
STM32H755_ARM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d834  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800dad8  0800dad8  0000ead8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e598  0800e598  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e598  0800e598  0000f598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5a0  0800e5a0  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5a0  0800e5a0  0000f5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e5a4  0800e5a4  0000f5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  24000000  0800e5a8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  240001f8  0800e7a0  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000724  0800e7a0  00010724  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6e2  00000000  00000000  00010226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4c  00000000  00000000  0002b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c8  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dc81  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001baa6  00000000  00000000  0006ec89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197f6e  00000000  00000000  0008a72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022269d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007714  00000000  00000000  002226e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  00229df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dabc 	.word	0x0800dabc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	0800dabc 	.word	0x0800dabc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <NRF24_DelayMicroSeconds+0x3c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <NRF24_DelayMicroSeconds+0x40>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	0c9a      	lsrs	r2, r3, #18
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000bb4:	bf00      	nop
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	60fa      	str	r2, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1fa      	bne.n	8000bb6 <NRF24_DelayMicroSeconds+0x22>
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	24000000 	.word	0x24000000
 8000bd4:	165e9f81 	.word	0x165e9f81

08000bd8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d008      	beq.n	8000bf8 <NRF24_csn+0x20>
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <NRF24_csn+0x38>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <NRF24_csn+0x3c>)
 8000bec:	8811      	ldrh	r1, [r2, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 ff4d 	bl	8003a90 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000bf6:	e007      	b.n	8000c08 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <NRF24_csn+0x38>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <NRF24_csn+0x3c>)
 8000bfe:	8811      	ldrh	r1, [r2, #0]
 8000c00:	2200      	movs	r2, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 ff44 	bl	8003a90 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000224 	.word	0x24000224
 8000c14:	24000228 	.word	0x24000228

08000c18 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d008      	beq.n	8000c38 <NRF24_ce+0x20>
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <NRF24_ce+0x38>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <NRF24_ce+0x3c>)
 8000c2c:	8811      	ldrh	r1, [r2, #0]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 ff2d 	bl	8003a90 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000c36:	e007      	b.n	8000c48 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <NRF24_ce+0x38>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <NRF24_ce+0x3c>)
 8000c3e:	8811      	ldrh	r1, [r2, #0]
 8000c40:	2200      	movs	r2, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 ff24 	bl	8003a90 <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000224 	.word	0x24000224
 8000c54:	2400022a 	.word	0x2400022a

08000c58 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ffb8 	bl	8000bd8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 031f 	and.w	r3, r3, #31
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c72:	f107 010c 	add.w	r1, r7, #12
 8000c76:	2364      	movs	r3, #100	@ 0x64
 8000c78:	2201      	movs	r2, #1
 8000c7a:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <NRF24_read_register+0x4c>)
 8000c7c:	f005 fee0 	bl	8006a40 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	1c59      	adds	r1, r3, #1
 8000c86:	2364      	movs	r3, #100	@ 0x64
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <NRF24_read_register+0x4c>)
 8000c8c:	f006 f8c6 	bl	8006e1c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c90:	7b7b      	ldrb	r3, [r7, #13]
 8000c92:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff ff9f 	bl	8000bd8 <NRF24_csn>
	return retData;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2400022c 	.word	0x2400022c

08000ca8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff8d 	bl	8000bd8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 031f 	and.w	r3, r3, #31
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000cc8:	f107 010c 	add.w	r1, r7, #12
 8000ccc:	2364      	movs	r3, #100	@ 0x64
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <NRF24_read_registerN+0x4c>)
 8000cd2:	f005 feb5 	bl	8006a40 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	2364      	movs	r3, #100	@ 0x64
 8000cdc:	6839      	ldr	r1, [r7, #0]
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <NRF24_read_registerN+0x4c>)
 8000ce0:	f006 f89c 	bl	8006e1c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff ff77 	bl	8000bd8 <NRF24_csn>
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2400022c 	.word	0x2400022c

08000cf8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff65 	bl	8000bd8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000d1c:	f107 010c 	add.w	r1, r7, #12
 8000d20:	2364      	movs	r3, #100	@ 0x64
 8000d22:	2202      	movs	r2, #2
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <NRF24_write_register+0x40>)
 8000d26:	f005 fe8b 	bl	8006a40 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff54 	bl	8000bd8 <NRF24_csn>
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2400022c 	.word	0x2400022c

08000d3c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff43 	bl	8000bd8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d5c:	f107 010c 	add.w	r1, r7, #12
 8000d60:	2364      	movs	r3, #100	@ 0x64
 8000d62:	2201      	movs	r2, #1
 8000d64:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <NRF24_write_registerN+0x4c>)
 8000d66:	f005 fe6b 	bl	8006a40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	2364      	movs	r3, #100	@ 0x64
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <NRF24_write_registerN+0x4c>)
 8000d74:	f005 fe64 	bl	8006a40 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff ff2d 	bl	8000bd8 <NRF24_csn>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2400022c 	.word	0x2400022c

08000d8c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000d98:	f000 fa0a 	bl	80011b0 <NRF24_getPayloadSize>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d303      	bcc.n	8000dae <NRF24_read_payload+0x22>
 8000da6:	f000 fa03 	bl	80011b0 <NRF24_getPayloadSize>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e000      	b.n	8000db0 <NRF24_read_payload+0x24>
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff ff10 	bl	8000bd8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000db8:	2361      	movs	r3, #97	@ 0x61
 8000dba:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000dbc:	f107 010e 	add.w	r1, r7, #14
 8000dc0:	2364      	movs	r3, #100	@ 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <NRF24_read_payload+0x5c>)
 8000dc6:	f005 fe3b 	bl	8006a40 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	2364      	movs	r3, #100	@ 0x64
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <NRF24_read_payload+0x5c>)
 8000dd4:	f006 f822 	bl	8006e1c <HAL_SPI_Receive>
	NRF24_csn(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff fefd 	bl	8000bd8 <NRF24_csn>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2400022c 	.word	0x2400022c

08000dec <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000df0:	21ff      	movs	r1, #255	@ 0xff
 8000df2:	20e1      	movs	r0, #225	@ 0xe1
 8000df4:	f7ff ff80 	bl	8000cf8 <NRF24_write_register>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000e00:	21ff      	movs	r1, #255	@ 0xff
 8000e02:	20e2      	movs	r0, #226	@ 0xe2
 8000e04:	f7ff ff78 	bl	8000cf8 <NRF24_write_register>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f7ff ff20 	bl	8000c58 <NRF24_read_register>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000e28:	b082      	sub	sp, #8
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000e3c:	4b66      	ldr	r3, [pc, #408]	@ (8000fd8 <NRF24_begin+0x1b0>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2288      	movs	r2, #136	@ 0x88
 8000e46:	4619      	mov	r1, r3
 8000e48:	f009 fc39 	bl	800a6be <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000e4c:	4a63      	ldr	r2, [pc, #396]	@ (8000fdc <NRF24_begin+0x1b4>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000e52:	4a63      	ldr	r2, [pc, #396]	@ (8000fe0 <NRF24_begin+0x1b8>)
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000e58:	4a62      	ldr	r2, [pc, #392]	@ (8000fe4 <NRF24_begin+0x1bc>)
 8000e5a:	883b      	ldrh	r3, [r7, #0]
 8000e5c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff feba 	bl	8000bd8 <NRF24_csn>
	NRF24_ce(0);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fed7 	bl	8000c18 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e6a:	2005      	movs	r0, #5
 8000e6c:	f001 ffe8 	bl	8002e40 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e70:	2108      	movs	r1, #8
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff ff40 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e78:	213f      	movs	r1, #63	@ 0x3f
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff ff3c 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e80:	2103      	movs	r1, #3
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff ff38 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e88:	2103      	movs	r1, #3
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f7ff ff34 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e90:	2103      	movs	r1, #3
 8000e92:	2004      	movs	r0, #4
 8000e94:	f7ff ff30 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e98:	2102      	movs	r1, #2
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f7ff ff2c 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	f7ff ff28 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ea8:	210e      	movs	r1, #14
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f7ff ff24 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2008      	movs	r0, #8
 8000eb4:	f7ff ff20 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2009      	movs	r0, #9
 8000ebc:	f7ff ff1c 	bl	8000cf8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ec0:	23e7      	movs	r3, #231	@ 0xe7
 8000ec2:	733b      	strb	r3, [r7, #12]
 8000ec4:	23e7      	movs	r3, #231	@ 0xe7
 8000ec6:	72fb      	strb	r3, [r7, #11]
 8000ec8:	23e7      	movs	r3, #231	@ 0xe7
 8000eca:	72bb      	strb	r3, [r7, #10]
 8000ecc:	23e7      	movs	r3, #231	@ 0xe7
 8000ece:	727b      	strb	r3, [r7, #9]
 8000ed0:	23e7      	movs	r3, #231	@ 0xe7
 8000ed2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	2205      	movs	r2, #5
 8000eda:	4619      	mov	r1, r3
 8000edc:	200a      	movs	r0, #10
 8000ede:	f7ff ff2d 	bl	8000d3c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000ee2:	23c2      	movs	r3, #194	@ 0xc2
 8000ee4:	733b      	strb	r3, [r7, #12]
 8000ee6:	23c2      	movs	r3, #194	@ 0xc2
 8000ee8:	72fb      	strb	r3, [r7, #11]
 8000eea:	23c2      	movs	r3, #194	@ 0xc2
 8000eec:	72bb      	strb	r3, [r7, #10]
 8000eee:	23c2      	movs	r3, #194	@ 0xc2
 8000ef0:	727b      	strb	r3, [r7, #9]
 8000ef2:	23c2      	movs	r3, #194	@ 0xc2
 8000ef4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2205      	movs	r2, #5
 8000efc:	4619      	mov	r1, r3
 8000efe:	200b      	movs	r0, #11
 8000f00:	f7ff ff1c 	bl	8000d3c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000f04:	21c3      	movs	r1, #195	@ 0xc3
 8000f06:	200c      	movs	r0, #12
 8000f08:	f7ff fef6 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000f0c:	21c4      	movs	r1, #196	@ 0xc4
 8000f0e:	200d      	movs	r0, #13
 8000f10:	f7ff fef2 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000f14:	21c5      	movs	r1, #197	@ 0xc5
 8000f16:	200e      	movs	r0, #14
 8000f18:	f7ff feee 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000f1c:	21c6      	movs	r1, #198	@ 0xc6
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f7ff feea 	bl	8000cf8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000f24:	23e7      	movs	r3, #231	@ 0xe7
 8000f26:	733b      	strb	r3, [r7, #12]
 8000f28:	23e7      	movs	r3, #231	@ 0xe7
 8000f2a:	72fb      	strb	r3, [r7, #11]
 8000f2c:	23e7      	movs	r3, #231	@ 0xe7
 8000f2e:	72bb      	strb	r3, [r7, #10]
 8000f30:	23e7      	movs	r3, #231	@ 0xe7
 8000f32:	727b      	strb	r3, [r7, #9]
 8000f34:	23e7      	movs	r3, #231	@ 0xe7
 8000f36:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2010      	movs	r0, #16
 8000f42:	f7ff fefb 	bl	8000d3c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2011      	movs	r0, #17
 8000f4a:	f7ff fed5 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2012      	movs	r0, #18
 8000f52:	f7ff fed1 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000f56:	2100      	movs	r1, #0
 8000f58:	2013      	movs	r0, #19
 8000f5a:	f7ff fecd 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2014      	movs	r0, #20
 8000f62:	f7ff fec9 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	2015      	movs	r0, #21
 8000f6a:	f7ff fec5 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2016      	movs	r0, #22
 8000f72:	f7ff fec1 	bl	8000cf8 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f76:	f000 fad5 	bl	8001524 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	201c      	movs	r0, #28
 8000f7e:	f7ff febb 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f82:	2100      	movs	r1, #0
 8000f84:	201d      	movs	r0, #29
 8000f86:	f7ff feb7 	bl	8000cf8 <NRF24_write_register>
	printRadioSettings();
 8000f8a:	f000 fae5 	bl	8001558 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f8e:	210f      	movs	r1, #15
 8000f90:	200f      	movs	r0, #15
 8000f92:	f000 f8c5 	bl	8001120 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f9ab 	bl	80012f2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f000 f9e1 	bl	8001364 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 fa24 	bl	80013f0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000fa8:	f000 f976 	bl	8001298 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000fac:	2020      	movs	r0, #32
 8000fae:	f000 f8e7 	bl	8001180 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000fb2:	f000 faae 	bl	8001512 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000fb6:	204c      	movs	r0, #76	@ 0x4c
 8000fb8:	f000 f8cd 	bl	8001156 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000fbc:	f7ff ff16 	bl	8000dec <NRF24_flush_tx>
	NRF24_flush_rx();
 8000fc0:	f7ff ff1c 	bl	8000dfc <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000fc4:	f000 fa3c 	bl	8001440 <NRF24_powerDown>
	
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd2:	b002      	add	sp, #8
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2400022c 	.word	0x2400022c
 8000fdc:	24000224 	.word	0x24000224
 8000fe0:	24000228 	.word	0x24000228
 8000fe4:	2400022a 	.word	0x2400022a

08000fe8 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fe33 	bl	8000c58 <NRF24_read_register>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f043 0303 	orr.w	r3, r3, #3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fe7b 	bl	8000cf8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <NRF24_startListening+0x48>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	4313      	orrs	r3, r2
 800100a:	d004      	beq.n	8001016 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800100c:	2205      	movs	r2, #5
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <NRF24_startListening+0x48>)
 8001010:	200a      	movs	r0, #10
 8001012:	f7ff fe93 	bl	8000d3c <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8001016:	f7ff fee9 	bl	8000dec <NRF24_flush_tx>
	NRF24_flush_rx();
 800101a:	f7ff feef 	bl	8000dfc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fdfa 	bl	8000c18 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001024:	2096      	movs	r0, #150	@ 0x96
 8001026:	f7ff fdb5 	bl	8000b94 <NRF24_DelayMicroSeconds>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000218 	.word	0x24000218

08001034 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001038:	2000      	movs	r0, #0
 800103a:	f000 fa10 	bl	800145e <NRF24_availablePipe>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	bd80      	pop	{r7, pc}

08001044 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	4619      	mov	r1, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fe99 	bl	8000d8c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800105a:	2017      	movs	r0, #23
 800105c:	f7ff fdfc 	bl	8000c58 <NRF24_read_register>
 8001060:	4603      	mov	r3, r0
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001068:	f7ff fec8 	bl	8000dfc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800106c:	f000 f8ac 	bl	80011c8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf14      	ite	ne
 8001076:	2301      	movne	r3, #1
 8001078:	2300      	moveq	r3, #0
 800107a:	b2db      	uxtb	r3, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4601      	mov	r1, r0
 800108c:	e9c7 2300 	strd	r2, r3, [r7]
 8001090:	460b      	mov	r3, r1
 8001092:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d104      	bne.n	80010a4 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800109a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800109e:	491c      	ldr	r1, [pc, #112]	@ (8001110 <NRF24_openReadingPipe+0x8c>)
 80010a0:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d82d      	bhi.n	8001106 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d808      	bhi.n	80010c2 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <NRF24_openReadingPipe+0x90>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	4639      	mov	r1, r7
 80010b8:	2205      	movs	r2, #5
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe3e 	bl	8000d3c <NRF24_write_registerN>
 80010c0:	e007      	b.n	80010d2 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <NRF24_openReadingPipe+0x90>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	4639      	mov	r1, r7
 80010ca:	2201      	movs	r2, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fe35 	bl	8000d3c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <NRF24_openReadingPipe+0x94>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	4a10      	ldr	r2, [pc, #64]	@ (800111c <NRF24_openReadingPipe+0x98>)
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe0a 	bl	8000cf8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fdb7 	bl	8000c58 <NRF24_read_register>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff fdf9 	bl	8000cf8 <NRF24_write_register>
	}
	
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000218 	.word	0x24000218
 8001114:	0800e134 	.word	0x0800e134
 8001118:	0800e13c 	.word	0x0800e13c
 800111c:	24000220 	.word	0x24000220

08001120 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	b25a      	sxtb	r2, r3
 8001136:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	b25b      	sxtb	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b25b      	sxtb	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	2004      	movs	r0, #4
 800114a:	f7ff fdd5 	bl	8000cf8 <NRF24_write_register>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001160:	237f      	movs	r3, #127	@ 0x7f
 8001162:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4293      	cmp	r3, r2
 800116a:	bf28      	it	cs
 800116c:	4613      	movcs	r3, r2
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	2005      	movs	r0, #5
 8001174:	f7ff fdc0 	bl	8000cf8 <NRF24_write_register>
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800118a:	2320      	movs	r3, #32
 800118c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4293      	cmp	r3, r2
 8001194:	bf28      	it	cs
 8001196:	4613      	movcs	r3, r2
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <NRF24_setPayloadSize+0x2c>)
 800119c:	701a      	strb	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	24000220 	.word	0x24000220

080011b0 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	return payload_size;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <NRF24_getPayloadSize+0x14>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	24000220 	.word	0x24000220

080011c8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80011cc:	2060      	movs	r0, #96	@ 0x60
 80011ce:	f7ff fd43 	bl	8000c58 <NRF24_read_register>
 80011d2:	4603      	mov	r3, r0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80011dc:	201d      	movs	r0, #29
 80011de:	f7ff fd3b 	bl	8000c58 <NRF24_read_register>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f043 0306 	orr.w	r3, r3, #6
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4619      	mov	r1, r3
 80011ec:	201d      	movs	r0, #29
 80011ee:	f7ff fd83 	bl	8000cf8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80011f2:	201d      	movs	r0, #29
 80011f4:	f7ff fd30 	bl	8000c58 <NRF24_read_register>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80011fe:	f000 f991 	bl	8001524 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001202:	201d      	movs	r0, #29
 8001204:	f7ff fd28 	bl	8000c58 <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	f043 0306 	orr.w	r3, r3, #6
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4619      	mov	r1, r3
 8001212:	201d      	movs	r0, #29
 8001214:	f7ff fd70 	bl	8000cf8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001218:	201c      	movs	r0, #28
 800121a:	f7ff fd1d 	bl	8000c58 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f043 0303 	orr.w	r3, r3, #3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4619      	mov	r1, r3
 8001228:	201c      	movs	r0, #28
 800122a:	f7ff fd65 	bl	8000cf8 <NRF24_write_register>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001238:	201d      	movs	r0, #29
 800123a:	f7ff fd0d 	bl	8000c58 <NRF24_read_register>
 800123e:	4603      	mov	r3, r0
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4619      	mov	r1, r3
 8001248:	201d      	movs	r0, #29
 800124a:	f7ff fd55 	bl	8000cf8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800124e:	201d      	movs	r0, #29
 8001250:	f7ff fd02 	bl	8000c58 <NRF24_read_register>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10c      	bne.n	8001274 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800125a:	f000 f963 	bl	8001524 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800125e:	201d      	movs	r0, #29
 8001260:	f7ff fcfa 	bl	8000c58 <NRF24_read_register>
 8001264:	4603      	mov	r3, r0
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4619      	mov	r1, r3
 800126e:	201d      	movs	r0, #29
 8001270:	f7ff fd42 	bl	8000cf8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001274:	201c      	movs	r0, #28
 8001276:	f7ff fcef 	bl	8000c58 <NRF24_read_register>
 800127a:	4603      	mov	r3, r0
 800127c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	201c      	movs	r0, #28
 8001286:	f7ff fd37 	bl	8000cf8 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800128a:	4b02      	ldr	r3, [pc, #8]	@ (8001294 <NRF24_enableDynamicPayloads+0x60>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
	
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	24000221 	.word	0x24000221

08001298 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800129c:	201d      	movs	r0, #29
 800129e:	f7ff fcdb 	bl	8000c58 <NRF24_read_register>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	201d      	movs	r0, #29
 80012ae:	f7ff fd23 	bl	8000cf8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80012b2:	2100      	movs	r1, #0
 80012b4:	201c      	movs	r0, #28
 80012b6:	f7ff fd1f 	bl	8000cf8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80012ba:	4b02      	ldr	r3, [pc, #8]	@ (80012c4 <NRF24_disableDynamicPayloads+0x2c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	24000221 	.word	0x24000221

080012c8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80012d8:	213f      	movs	r1, #63	@ 0x3f
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fd0c 	bl	8000cf8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80012e0:	e003      	b.n	80012ea <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fd07 	bl	8000cf8 <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012fc:	2006      	movs	r0, #6
 80012fe:	f7ff fcab 	bl	8000c58 <NRF24_read_register>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	f023 0306 	bic.w	r3, r3, #6
 800130c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d104      	bne.n	800131e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	f043 0306 	orr.w	r3, r3, #6
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e019      	b.n	8001352 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d104      	bne.n	800132e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e011      	b.n	8001352 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d104      	bne.n	800133e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e009      	b.n	8001352 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d103      	bne.n	8001352 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	f043 0306 	orr.w	r3, r3, #6
 8001350:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	4619      	mov	r1, r3
 8001356:	2006      	movs	r0, #6
 8001358:	f7ff fcce 	bl	8000cf8 <NRF24_write_register>
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001372:	2006      	movs	r0, #6
 8001374:	f7ff fc70 	bl	8000c58 <NRF24_read_register>
 8001378:	4603      	mov	r3, r0
 800137a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <NRF24_setDataRate+0x88>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001388:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d107      	bne.n	80013a0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <NRF24_setDataRate+0x88>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	e00d      	b.n	80013bc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d107      	bne.n	80013b6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <NRF24_setDataRate+0x88>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	73bb      	strb	r3, [r7, #14]
 80013b4:	e002      	b.n	80013bc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <NRF24_setDataRate+0x88>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	4619      	mov	r1, r3
 80013c0:	2006      	movs	r0, #6
 80013c2:	f7ff fc99 	bl	8000cf8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80013c6:	2006      	movs	r0, #6
 80013c8:	f7ff fc46 	bl	8000c58 <NRF24_read_register>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d102      	bne.n	80013dc <NRF24_setDataRate+0x78>
  {
    result = true;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e002      	b.n	80013e2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <NRF24_setDataRate+0x88>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	24000222 	.word	0x24000222

080013f0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fc2c 	bl	8000c58 <NRF24_read_register>
 8001400:	4603      	mov	r3, r0
 8001402:	f023 030c 	bic.w	r3, r3, #12
 8001406:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00f      	beq.n	800142e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d104      	bne.n	800141e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e007      	b.n	800142e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	4619      	mov	r1, r3
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fc60 	bl	8000cf8 <NRF24_write_register>
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fc07 	bl	8000c58 <NRF24_read_register>
 800144a:	4603      	mov	r3, r0
 800144c:	f023 0302 	bic.w	r3, r3, #2
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4619      	mov	r1, r3
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fc4f 	bl	8000cf8 <NRF24_write_register>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001466:	f7ff fcd1 	bl	8000e0c <NRF24_get_status>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf14      	ite	ne
 8001478:	2301      	movne	r3, #1
 800147a:	2300      	moveq	r3, #0
 800147c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d017      	beq.n	80014b4 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	b2da      	uxtb	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800149a:	2140      	movs	r1, #64	@ 0x40
 800149c:	2007      	movs	r0, #7
 800149e:	f7ff fc2b 	bl	8000cf8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80014ac:	2120      	movs	r1, #32
 80014ae:	2007      	movs	r0, #7
 80014b0:	f7ff fc22 	bl	8000cf8 <NRF24_write_register>
    }
  }
  return result;
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	6039      	str	r1, [r7, #0]
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	4613      	mov	r3, r2
 80014cc:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80014d2:	2320      	movs	r3, #32
 80014d4:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 80014d6:	7afa      	ldrb	r2, [r7, #11]
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	4293      	cmp	r3, r2
 80014dc:	bf28      	it	cs
 80014de:	4613      	movcs	r3, r2
 80014e0:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fb78 	bl	8000bd8 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	f063 0357 	orn	r3, r3, #87	@ 0x57
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	7aba      	ldrb	r2, [r7, #10]
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc1c 	bl	8000d3c <NRF24_write_registerN>
  NRF24_csn(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff fb67 	bl	8000bd8 <NRF24_csn>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001516:	2170      	movs	r1, #112	@ 0x70
 8001518:	2007      	movs	r0, #7
 800151a:	f7ff fbed 	bl	8000cf8 <NRF24_write_register>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fb54 	bl	8000bd8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001530:	2350      	movs	r3, #80	@ 0x50
 8001532:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001534:	2373      	movs	r3, #115	@ 0x73
 8001536:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001538:	1d39      	adds	r1, r7, #4
 800153a:	2364      	movs	r3, #100	@ 0x64
 800153c:	2202      	movs	r2, #2
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <NRF24_ACTIVATE_cmd+0x30>)
 8001540:	f005 fa7e 	bl	8006a40 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fb47 	bl	8000bd8 <NRF24_csn>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2400022c 	.word	0x2400022c

08001558 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b0a1      	sub	sp, #132	@ 0x84
 800155c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	49c3      	ldr	r1, [pc, #780]	@ (8001870 <printRadioSettings+0x318>)
 8001564:	4618      	mov	r0, r3
 8001566:	f008 ff33 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff06 	bl	8000380 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	48bd      	ldr	r0, [pc, #756]	@ (8001874 <printRadioSettings+0x31c>)
 8001580:	f006 fe73 	bl	800826a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fb67 	bl	8000c58 <NRF24_read_register>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val & (1 << 3))
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800159c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <printRadioSettings+0x5e>
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	49b2      	ldr	r1, [pc, #712]	@ (8001878 <printRadioSettings+0x320>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f008 ff0e 	bl	800a3d0 <siprintf>
 80015b4:	e00c      	b.n	80015d0 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	49b0      	ldr	r1, [pc, #704]	@ (800187c <printRadioSettings+0x324>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f008 ff07 	bl	800a3d0 <siprintf>
 80015c2:	e005      	b.n	80015d0 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	49ad      	ldr	r1, [pc, #692]	@ (8001880 <printRadioSettings+0x328>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f008 ff00 	bl	800a3d0 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fed3 	bl	8000380 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f107 0108 	add.w	r1, r7, #8
 80015e2:	230a      	movs	r3, #10
 80015e4:	48a3      	ldr	r0, [pc, #652]	@ (8001874 <printRadioSettings+0x31c>)
 80015e6:	f006 fe40 	bl	800826a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fb34 	bl	8000c58 <NRF24_read_register>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80015fa:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bfcc      	ite	gt
 8001602:	2301      	movgt	r3, #1
 8001604:	2300      	movle	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800160a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800160e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001612:	2b00      	cmp	r3, #0
 8001614:	bfcc      	ite	gt
 8001616:	2301      	movgt	r3, #1
 8001618:	2300      	movle	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001622:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001626:	2b00      	cmp	r3, #0
 8001628:	bfcc      	ite	gt
 800162a:	2301      	movgt	r3, #1
 800162c:	2300      	movle	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001632:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001636:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800163a:	2b00      	cmp	r3, #0
 800163c:	bfcc      	ite	gt
 800163e:	2301      	movgt	r3, #1
 8001640:	2300      	movle	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001646:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800164a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164e:	2b00      	cmp	r3, #0
 8001650:	bfcc      	ite	gt
 8001652:	2301      	movgt	r3, #1
 8001654:	2300      	movle	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800165a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800165e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001662:	2b00      	cmp	r3, #0
 8001664:	bfcc      	ite	gt
 8001666:	2301      	movgt	r3, #1
 8001668:	2300      	movle	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f107 0008 	add.w	r0, r7, #8
 8001670:	9303      	str	r3, [sp, #12]
 8001672:	9402      	str	r4, [sp, #8]
 8001674:	9101      	str	r1, [sp, #4]
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	4633      	mov	r3, r6
 800167a:	462a      	mov	r2, r5
 800167c:	4981      	ldr	r1, [pc, #516]	@ (8001884 <printRadioSettings+0x32c>)
 800167e:	f008 fea7 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fe7a 	bl	8000380 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 0108 	add.w	r1, r7, #8
 8001694:	230a      	movs	r3, #10
 8001696:	4877      	ldr	r0, [pc, #476]	@ (8001874 <printRadioSettings+0x31c>)
 8001698:	f006 fde7 	bl	800826a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff fadb 	bl	8000c58 <NRF24_read_register>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016ac:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bfcc      	ite	gt
 80016b4:	2301      	movgt	r3, #1
 80016b6:	2300      	movle	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016c0:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bfcc      	ite	gt
 80016c8:	2301      	movgt	r3, #1
 80016ca:	2300      	movle	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016d0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bfcc      	ite	gt
 80016dc:	2301      	movgt	r3, #1
 80016de:	2300      	movle	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bfcc      	ite	gt
 80016f0:	2301      	movgt	r3, #1
 80016f2:	2300      	movle	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001700:	2b00      	cmp	r3, #0
 8001702:	bfcc      	ite	gt
 8001704:	2301      	movgt	r3, #1
 8001706:	2300      	movle	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800170c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001710:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001714:	2b00      	cmp	r3, #0
 8001716:	bfcc      	ite	gt
 8001718:	2301      	movgt	r3, #1
 800171a:	2300      	movle	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f107 0008 	add.w	r0, r7, #8
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	9402      	str	r4, [sp, #8]
 8001726:	9101      	str	r1, [sp, #4]
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	4633      	mov	r3, r6
 800172c:	462a      	mov	r2, r5
 800172e:	4956      	ldr	r1, [pc, #344]	@ (8001888 <printRadioSettings+0x330>)
 8001730:	f008 fe4e 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe21 	bl	8000380 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	f107 0108 	add.w	r1, r7, #8
 8001746:	230a      	movs	r3, #10
 8001748:	484a      	ldr	r0, [pc, #296]	@ (8001874 <printRadioSettings+0x31c>)
 800174a:	f006 fd8e 	bl	800826a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800174e:	2003      	movs	r0, #3
 8001750:	f7ff fa82 	bl	8000c58 <NRF24_read_register>
 8001754:	4603      	mov	r3, r0
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val +=2;
 800175e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001762:	3302      	adds	r3, #2
 8001764:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001768:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4946      	ldr	r1, [pc, #280]	@ (800188c <printRadioSettings+0x334>)
 8001772:	4618      	mov	r0, r3
 8001774:	f008 fe2c 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fdff 	bl	8000380 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	f107 0108 	add.w	r1, r7, #8
 800178a:	230a      	movs	r3, #10
 800178c:	4839      	ldr	r0, [pc, #228]	@ (8001874 <printRadioSettings+0x31c>)
 800178e:	f006 fd6c 	bl	800826a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001792:	2005      	movs	r0, #5
 8001794:	f7ff fa60 	bl	8000c58 <NRF24_read_register>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800179e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80017a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4939      	ldr	r1, [pc, #228]	@ (8001890 <printRadioSettings+0x338>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f008 fe0f 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fde2 	bl	8000380 <strlen>
 80017bc:	4603      	mov	r3, r0
 80017be:	b29a      	uxth	r2, r3
 80017c0:	f107 0108 	add.w	r1, r7, #8
 80017c4:	230a      	movs	r3, #10
 80017c6:	482b      	ldr	r0, [pc, #172]	@ (8001874 <printRadioSettings+0x31c>)
 80017c8:	f006 fd4f 	bl	800826a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80017cc:	2006      	movs	r0, #6
 80017ce:	f7ff fa43 	bl	8000c58 <NRF24_read_register>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80017d8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <printRadioSettings+0x29a>
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	492a      	ldr	r1, [pc, #168]	@ (8001894 <printRadioSettings+0x33c>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f008 fdf0 	bl	800a3d0 <siprintf>
 80017f0:	e005      	b.n	80017fe <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4928      	ldr	r1, [pc, #160]	@ (8001898 <printRadioSettings+0x340>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f008 fde9 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fdbc 	bl	8000380 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	f107 0108 	add.w	r1, r7, #8
 8001810:	230a      	movs	r3, #10
 8001812:	4818      	ldr	r0, [pc, #96]	@ (8001874 <printRadioSettings+0x31c>)
 8001814:	f006 fd29 	bl	800826a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001818:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800181c:	f003 0306 	and.w	r3, r3, #6
 8001820:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val = (reg8Val>>1);
 8001824:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800182e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <printRadioSettings+0x2ec>
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4918      	ldr	r1, [pc, #96]	@ (800189c <printRadioSettings+0x344>)
 800183c:	4618      	mov	r0, r3
 800183e:	f008 fdc7 	bl	800a3d0 <siprintf>
 8001842:	e03b      	b.n	80018bc <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001844:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <printRadioSettings+0x302>
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	4913      	ldr	r1, [pc, #76]	@ (80018a0 <printRadioSettings+0x348>)
 8001852:	4618      	mov	r0, r3
 8001854:	f008 fdbc 	bl	800a3d0 <siprintf>
 8001858:	e030      	b.n	80018bc <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800185e:	2b02      	cmp	r3, #2
 8001860:	d122      	bne.n	80018a8 <printRadioSettings+0x350>
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	490f      	ldr	r1, [pc, #60]	@ (80018a4 <printRadioSettings+0x34c>)
 8001868:	4618      	mov	r0, r3
 800186a:	f008 fdb1 	bl	800a3d0 <siprintf>
 800186e:	e025      	b.n	80018bc <printRadioSettings+0x364>
 8001870:	0800dad8 	.word	0x0800dad8
 8001874:	240002b4 	.word	0x240002b4
 8001878:	0800db0c 	.word	0x0800db0c
 800187c:	0800db28 	.word	0x0800db28
 8001880:	0800db44 	.word	0x0800db44
 8001884:	0800db58 	.word	0x0800db58
 8001888:	0800db9c 	.word	0x0800db9c
 800188c:	0800dbe8 	.word	0x0800dbe8
 8001890:	0800dc04 	.word	0x0800dc04
 8001894:	0800dc18 	.word	0x0800dc18
 8001898:	0800dc30 	.word	0x0800dc30
 800189c:	0800dc48 	.word	0x0800dc48
 80018a0:	0800dc5c 	.word	0x0800dc5c
 80018a4:	0800dc70 	.word	0x0800dc70
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80018a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d105      	bne.n	80018bc <printRadioSettings+0x364>
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	49d7      	ldr	r1, [pc, #860]	@ (8001c14 <printRadioSettings+0x6bc>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f008 fd8a 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fd5d 	bl	8000380 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f107 0108 	add.w	r1, r7, #8
 80018ce:	230a      	movs	r3, #10
 80018d0:	48d1      	ldr	r0, [pc, #836]	@ (8001c18 <printRadioSettings+0x6c0>)
 80018d2:	f006 fcca 	bl	800826a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80018d6:	463b      	mov	r3, r7
 80018d8:	2205      	movs	r2, #5
 80018da:	4619      	mov	r1, r3
 80018dc:	200a      	movs	r0, #10
 80018de:	f7ff f9e3 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018e2:	793b      	ldrb	r3, [r7, #4]
 80018e4:	461c      	mov	r4, r3
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	461d      	mov	r5, r3
 80018ea:	78bb      	ldrb	r3, [r7, #2]
 80018ec:	787a      	ldrb	r2, [r7, #1]
 80018ee:	7839      	ldrb	r1, [r7, #0]
 80018f0:	f107 0008 	add.w	r0, r7, #8
 80018f4:	9102      	str	r1, [sp, #8]
 80018f6:	9201      	str	r2, [sp, #4]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	462b      	mov	r3, r5
 80018fc:	4622      	mov	r2, r4
 80018fe:	49c7      	ldr	r1, [pc, #796]	@ (8001c1c <printRadioSettings+0x6c4>)
 8001900:	f008 fd66 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fd39 	bl	8000380 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	48bf      	ldr	r0, [pc, #764]	@ (8001c18 <printRadioSettings+0x6c0>)
 800191a:	f006 fca6 	bl	800826a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800191e:	463b      	mov	r3, r7
 8001920:	2205      	movs	r2, #5
 8001922:	4619      	mov	r1, r3
 8001924:	200b      	movs	r0, #11
 8001926:	f7ff f9bf 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800192a:	793b      	ldrb	r3, [r7, #4]
 800192c:	461c      	mov	r4, r3
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	461d      	mov	r5, r3
 8001932:	78bb      	ldrb	r3, [r7, #2]
 8001934:	787a      	ldrb	r2, [r7, #1]
 8001936:	7839      	ldrb	r1, [r7, #0]
 8001938:	f107 0008 	add.w	r0, r7, #8
 800193c:	9102      	str	r1, [sp, #8]
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	462b      	mov	r3, r5
 8001944:	4622      	mov	r2, r4
 8001946:	49b6      	ldr	r1, [pc, #728]	@ (8001c20 <printRadioSettings+0x6c8>)
 8001948:	f008 fd42 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd15 	bl	8000380 <strlen>
 8001956:	4603      	mov	r3, r0
 8001958:	b29a      	uxth	r2, r3
 800195a:	f107 0108 	add.w	r1, r7, #8
 800195e:	230a      	movs	r3, #10
 8001960:	48ad      	ldr	r0, [pc, #692]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001962:	f006 fc82 	bl	800826a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001966:	463b      	mov	r3, r7
 8001968:	2201      	movs	r2, #1
 800196a:	4619      	mov	r1, r3
 800196c:	200c      	movs	r0, #12
 800196e:	f7ff f99b 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001972:	783b      	ldrb	r3, [r7, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	49aa      	ldr	r1, [pc, #680]	@ (8001c24 <printRadioSettings+0x6cc>)
 800197c:	4618      	mov	r0, r3
 800197e:	f008 fd27 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fcfa 	bl	8000380 <strlen>
 800198c:	4603      	mov	r3, r0
 800198e:	b29a      	uxth	r2, r3
 8001990:	f107 0108 	add.w	r1, r7, #8
 8001994:	230a      	movs	r3, #10
 8001996:	48a0      	ldr	r0, [pc, #640]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001998:	f006 fc67 	bl	800826a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800199c:	463b      	mov	r3, r7
 800199e:	2201      	movs	r2, #1
 80019a0:	4619      	mov	r1, r3
 80019a2:	200d      	movs	r0, #13
 80019a4:	f7ff f980 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019a8:	783b      	ldrb	r3, [r7, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	499d      	ldr	r1, [pc, #628]	@ (8001c28 <printRadioSettings+0x6d0>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f008 fd0c 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fcdf 	bl	8000380 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f107 0108 	add.w	r1, r7, #8
 80019ca:	230a      	movs	r3, #10
 80019cc:	4892      	ldr	r0, [pc, #584]	@ (8001c18 <printRadioSettings+0x6c0>)
 80019ce:	f006 fc4c 	bl	800826a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80019d2:	463b      	mov	r3, r7
 80019d4:	2201      	movs	r2, #1
 80019d6:	4619      	mov	r1, r3
 80019d8:	200e      	movs	r0, #14
 80019da:	f7ff f965 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019de:	783b      	ldrb	r3, [r7, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4991      	ldr	r1, [pc, #580]	@ (8001c2c <printRadioSettings+0x6d4>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f008 fcf1 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fcc4 	bl	8000380 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	230a      	movs	r3, #10
 8001a02:	4885      	ldr	r0, [pc, #532]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001a04:	f006 fc31 	bl	800826a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f7ff f94a 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001a14:	783b      	ldrb	r3, [r7, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4984      	ldr	r1, [pc, #528]	@ (8001c30 <printRadioSettings+0x6d8>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f008 fcd6 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fca9 	bl	8000380 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f107 0108 	add.w	r1, r7, #8
 8001a36:	230a      	movs	r3, #10
 8001a38:	4877      	ldr	r0, [pc, #476]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001a3a:	f006 fc16 	bl	800826a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2205      	movs	r2, #5
 8001a42:	4619      	mov	r1, r3
 8001a44:	2010      	movs	r0, #16
 8001a46:	f7ff f92f 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001a4a:	793b      	ldrb	r3, [r7, #4]
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	461d      	mov	r5, r3
 8001a52:	78bb      	ldrb	r3, [r7, #2]
 8001a54:	787a      	ldrb	r2, [r7, #1]
 8001a56:	7839      	ldrb	r1, [r7, #0]
 8001a58:	f107 0008 	add.w	r0, r7, #8
 8001a5c:	9102      	str	r1, [sp, #8]
 8001a5e:	9201      	str	r2, [sp, #4]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	462b      	mov	r3, r5
 8001a64:	4622      	mov	r2, r4
 8001a66:	4973      	ldr	r1, [pc, #460]	@ (8001c34 <printRadioSettings+0x6dc>)
 8001a68:	f008 fcb2 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fc85 	bl	8000380 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f107 0108 	add.w	r1, r7, #8
 8001a7e:	230a      	movs	r3, #10
 8001a80:	4865      	ldr	r0, [pc, #404]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001a82:	f006 fbf2 	bl	800826a <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a86:	2011      	movs	r0, #17
 8001a88:	f7ff f8e6 	bl	8000c58 <NRF24_read_register>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a92:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4966      	ldr	r1, [pc, #408]	@ (8001c38 <printRadioSettings+0x6e0>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f008 fc95 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fc68 	bl	8000380 <strlen>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f107 0108 	add.w	r1, r7, #8
 8001ab8:	230a      	movs	r3, #10
 8001aba:	4857      	ldr	r0, [pc, #348]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001abc:	f006 fbd5 	bl	800826a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001ac0:	2012      	movs	r0, #18
 8001ac2:	f7ff f8c9 	bl	8000c58 <NRF24_read_register>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001acc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ad0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	4958      	ldr	r1, [pc, #352]	@ (8001c3c <printRadioSettings+0x6e4>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f008 fc78 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fc4b 	bl	8000380 <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	f107 0108 	add.w	r1, r7, #8
 8001af2:	230a      	movs	r3, #10
 8001af4:	4848      	ldr	r0, [pc, #288]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001af6:	f006 fbb8 	bl	800826a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001afa:	2013      	movs	r0, #19
 8001afc:	f7ff f8ac 	bl	8000c58 <NRF24_read_register>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	494b      	ldr	r1, [pc, #300]	@ (8001c40 <printRadioSettings+0x6e8>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f008 fc5b 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc2e 	bl	8000380 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f107 0108 	add.w	r1, r7, #8
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	483a      	ldr	r0, [pc, #232]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001b30:	f006 fb9b 	bl	800826a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001b34:	2014      	movs	r0, #20
 8001b36:	f7ff f88f 	bl	8000c58 <NRF24_read_register>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b40:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b44:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	493d      	ldr	r1, [pc, #244]	@ (8001c44 <printRadioSettings+0x6ec>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f008 fc3e 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fc11 	bl	8000380 <strlen>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f107 0108 	add.w	r1, r7, #8
 8001b66:	230a      	movs	r3, #10
 8001b68:	482b      	ldr	r0, [pc, #172]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001b6a:	f006 fb7e 	bl	800826a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001b6e:	2015      	movs	r0, #21
 8001b70:	f7ff f872 	bl	8000c58 <NRF24_read_register>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b7a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	4930      	ldr	r1, [pc, #192]	@ (8001c48 <printRadioSettings+0x6f0>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f008 fc21 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fbf4 	bl	8000380 <strlen>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f107 0108 	add.w	r1, r7, #8
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	481d      	ldr	r0, [pc, #116]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001ba4:	f006 fb61 	bl	800826a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001ba8:	2016      	movs	r0, #22
 8001baa:	f7ff f855 	bl	8000c58 <NRF24_read_register>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001bb4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001bb8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	4922      	ldr	r1, [pc, #136]	@ (8001c4c <printRadioSettings+0x6f4>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f008 fc04 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fbd7 	bl	8000380 <strlen>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f107 0108 	add.w	r1, r7, #8
 8001bda:	230a      	movs	r3, #10
 8001bdc:	480e      	ldr	r0, [pc, #56]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001bde:	f006 fb44 	bl	800826a <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001be2:	201c      	movs	r0, #28
 8001be4:	f7ff f838 	bl	8000c58 <NRF24_read_register>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001bf2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bfcc      	ite	gt
 8001bfa:	2301      	movgt	r3, #1
 8001bfc:	2300      	movle	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c02:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c06:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bfcc      	ite	gt
 8001c0e:	2301      	movgt	r3, #1
 8001c10:	2300      	movle	r3, #0
 8001c12:	e01d      	b.n	8001c50 <printRadioSettings+0x6f8>
 8001c14:	0800dc84 	.word	0x0800dc84
 8001c18:	240002b4 	.word	0x240002b4
 8001c1c:	0800dc98 	.word	0x0800dc98
 8001c20:	0800dcc8 	.word	0x0800dcc8
 8001c24:	0800dcf8 	.word	0x0800dcf8
 8001c28:	0800dd20 	.word	0x0800dd20
 8001c2c:	0800dd48 	.word	0x0800dd48
 8001c30:	0800dd70 	.word	0x0800dd70
 8001c34:	0800dd98 	.word	0x0800dd98
 8001c38:	0800ddc4 	.word	0x0800ddc4
 8001c3c:	0800dde0 	.word	0x0800dde0
 8001c40:	0800ddfc 	.word	0x0800ddfc
 8001c44:	0800de18 	.word	0x0800de18
 8001c48:	0800de34 	.word	0x0800de34
 8001c4c:	0800de50 	.word	0x0800de50
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c58:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bfcc      	ite	gt
 8001c60:	2301      	movgt	r3, #1
 8001c62:	2300      	movle	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c68:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c6c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bfcc      	ite	gt
 8001c74:	2301      	movgt	r3, #1
 8001c76:	2300      	movle	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c7c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c80:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bfcc      	ite	gt
 8001c88:	2301      	movgt	r3, #1
 8001c8a:	2300      	movle	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c90:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c94:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bfcc      	ite	gt
 8001c9c:	2301      	movgt	r3, #1
 8001c9e:	2300      	movle	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f107 0008 	add.w	r0, r7, #8
 8001ca6:	9303      	str	r3, [sp, #12]
 8001ca8:	9402      	str	r4, [sp, #8]
 8001caa:	9101      	str	r1, [sp, #4]
 8001cac:	9200      	str	r2, [sp, #0]
 8001cae:	4633      	mov	r3, r6
 8001cb0:	462a      	mov	r2, r5
 8001cb2:	4936      	ldr	r1, [pc, #216]	@ (8001d8c <printRadioSettings+0x834>)
 8001cb4:	f008 fb8c 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fb5f 	bl	8000380 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 0108 	add.w	r1, r7, #8
 8001cca:	230a      	movs	r3, #10
 8001ccc:	4830      	ldr	r0, [pc, #192]	@ (8001d90 <printRadioSettings+0x838>)
 8001cce:	f006 facc 	bl	800826a <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001cd2:	201d      	movs	r0, #29
 8001cd4:	f7fe ffc0 	bl	8000c58 <NRF24_read_register>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001cde:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <printRadioSettings+0x7a0>
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	4929      	ldr	r1, [pc, #164]	@ (8001d94 <printRadioSettings+0x83c>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f008 fb6d 	bl	800a3d0 <siprintf>
 8001cf6:	e005      	b.n	8001d04 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	4926      	ldr	r1, [pc, #152]	@ (8001d98 <printRadioSettings+0x840>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f008 fb66 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fb39 	bl	8000380 <strlen>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f107 0108 	add.w	r1, r7, #8
 8001d16:	230a      	movs	r3, #10
 8001d18:	481d      	ldr	r0, [pc, #116]	@ (8001d90 <printRadioSettings+0x838>)
 8001d1a:	f006 faa6 	bl	800826a <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001d1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <printRadioSettings+0x7e0>
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	491b      	ldr	r1, [pc, #108]	@ (8001d9c <printRadioSettings+0x844>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f008 fb4d 	bl	800a3d0 <siprintf>
 8001d36:	e005      	b.n	8001d44 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	4918      	ldr	r1, [pc, #96]	@ (8001da0 <printRadioSettings+0x848>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f008 fb46 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb19 	bl	8000380 <strlen>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	f107 0108 	add.w	r1, r7, #8
 8001d56:	230a      	movs	r3, #10
 8001d58:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <printRadioSettings+0x838>)
 8001d5a:	f006 fa86 	bl	800826a <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4910      	ldr	r1, [pc, #64]	@ (8001da4 <printRadioSettings+0x84c>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f008 fb33 	bl	800a3d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fb06 	bl	8000380 <strlen>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <printRadioSettings+0x838>)
 8001d80:	f006 fa73 	bl	800826a <HAL_UART_Transmit>
}
 8001d84:	bf00      	nop
 8001d86:	3774      	adds	r7, #116	@ 0x74
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8c:	0800de6c 	.word	0x0800de6c
 8001d90:	240002b4 	.word	0x240002b4
 8001d94:	0800deb8 	.word	0x0800deb8
 8001d98:	0800ded0 	.word	0x0800ded0
 8001d9c:	0800dee8 	.word	0x0800dee8
 8001da0:	0800df04 	.word	0x0800df04
 8001da4:	0800dad8 	.word	0x0800dad8

08001da8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001da8:	b084      	sub	sp, #16
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	f107 0c08 	add.w	ip, r7, #8
 8001db2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <nrf24_DebugUART_Init+0x2c>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	2294      	movs	r2, #148	@ 0x94
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f008 fc7c 	bl	800a6be <memcpy>
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dce:	b004      	add	sp, #16
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	240002b4 	.word	0x240002b4

08001dd8 <NRF_Init>:
void checkNRF();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void NRF_Init(void) {
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b0a3      	sub	sp, #140	@ 0x8c
 8001ddc:	af22      	add	r7, sp, #136	@ 0x88
	NRF24_begin(GPIOC, GPIO_PIN_6, GPIO_PIN_7, hspi1); // Ajusta según tu configuración de pines
 8001dde:	4c1e      	ldr	r4, [pc, #120]	@ (8001e58 <NRF_Init+0x80>)
 8001de0:	4668      	mov	r0, sp
 8001de2:	1d23      	adds	r3, r4, #4
 8001de4:	2284      	movs	r2, #132	@ 0x84
 8001de6:	4619      	mov	r1, r3
 8001de8:	f008 fc69 	bl	800a6be <memcpy>
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	2140      	movs	r1, #64	@ 0x40
 8001df2:	481a      	ldr	r0, [pc, #104]	@ (8001e5c <NRF_Init+0x84>)
 8001df4:	f7ff f818 	bl	8000e28 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 8001df8:	4c19      	ldr	r4, [pc, #100]	@ (8001e60 <NRF_Init+0x88>)
 8001dfa:	4668      	mov	r0, sp
 8001dfc:	f104 0310 	add.w	r3, r4, #16
 8001e00:	2284      	movs	r2, #132	@ 0x84
 8001e02:	4619      	mov	r1, r3
 8001e04:	f008 fc5b 	bl	800a6be <memcpy>
 8001e08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e0c:	f7ff ffcc 	bl	8001da8 <nrf24_DebugUART_Init>
	NRF24_openReadingPipe(1, pipe_address); // Abre el pipe 1 con la dirección configurada
 8001e10:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e50 <NRF_Init+0x78>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff f934 	bl	8001084 <NRF24_openReadingPipe>
	NRF24_setAutoAck(false);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fa53 	bl	80012c8 <NRF24_setAutoAck>
	NRF24_setChannel(52); // Canal de RF, asegúrate que coincida con el Arduino
 8001e22:	2034      	movs	r0, #52	@ 0x34
 8001e24:	f7ff f997 	bl	8001156 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001e28:	2020      	movs	r0, #32
 8001e2a:	f7ff f9a9 	bl	8001180 <NRF24_setPayloadSize>
	NRF24_setDataRate(RF24_2MBPS); // Velocidad de datos, debe coincidir con el Arduino
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff fa98 	bl	8001364 <NRF24_setDataRate>
	NRF24_enableDynamicPayloads();
 8001e34:	f7ff f9fe 	bl	8001234 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8001e38:	f7ff f9ce 	bl	80011d8 <NRF24_enableAckPayload>
	NRF24_startListening(); // Comienza a escuchar
 8001e3c:	f7ff f8d4 	bl	8000fe8 <NRF24_startListening>
	printRadioSettings();
 8001e40:	f7ff fb8a 	bl	8001558 <printRadioSettings>
}
 8001e44:	bf00      	nop
 8001e46:	3704      	adds	r7, #4
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	f3af 8000 	nop.w
 8001e50:	223344aa 	.word	0x223344aa
 8001e54:	00000011 	.word	0x00000011
 8001e58:	240003e8 	.word	0x240003e8
 8001e5c:	58020800 	.word	0x58020800
 8001e60:	24000508 	.word	0x24000508

08001e64 <checkNRF>:

void checkNRF(void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af02      	add	r7, sp, #8
	uint8_t x = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
	uint8_t y = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73bb      	strb	r3, [r7, #14]
	uint8_t a = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	737b      	strb	r3, [r7, #13]
	uint8_t buffer[6];
	if(NRF24_available())
 8001e76:	f7ff f8dd 	bl	8001034 <NRF24_available>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d041      	beq.n	8001f04 <checkNRF+0xa0>
	  {
		NRF24_read(buffer, 6);
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2106      	movs	r1, #6
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f8dd 	bl	8001044 <NRF24_read>

		if((buffer[0] == 0xFF && buffer[1] == 0xFF)){
 8001e8a:	793b      	ldrb	r3, [r7, #4]
 8001e8c:	2bff      	cmp	r3, #255	@ 0xff
 8001e8e:	d106      	bne.n	8001e9e <checkNRF+0x3a>
 8001e90:	797b      	ldrb	r3, [r7, #5]
 8001e92:	2bff      	cmp	r3, #255	@ 0xff
 8001e94:	d103      	bne.n	8001e9e <checkNRF+0x3a>
			printf("Coordinates not found\r\n");
 8001e96:	481f      	ldr	r0, [pc, #124]	@ (8001f14 <checkNRF+0xb0>)
 8001e98:	f008 fa5e 	bl	800a358 <puts>
 8001e9c:	e02c      	b.n	8001ef8 <checkNRF+0x94>
		}
		else{
			x = (buffer[0]<<8|buffer[1]);
 8001e9e:	793b      	ldrb	r3, [r7, #4]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b25a      	sxtb	r2, r3
 8001ea4:	797b      	ldrb	r3, [r7, #5]
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	73fb      	strb	r3, [r7, #15]
			y = (buffer[2]<<8|buffer[3]);
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	b25a      	sxtb	r2, r3
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	73bb      	strb	r3, [r7, #14]
			a = (buffer[4]<<8|buffer[5]);
 8001ebe:	7a3b      	ldrb	r3, [r7, #8]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b25a      	sxtb	r2, r3
 8001ec4:	7a7b      	ldrb	r3, [r7, #9]
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	737b      	strb	r3, [r7, #13]
		//				snprintf(myRxData, 32, "%u %u %u \r\n", (buffer[0]<<8|buffer[1]), (buffer[2]<<8|buffer[3]), (buffer[4]<<8|buffer[5]));

			snprintf(myRxData, 32, "x = %u, y = %u, a = %u \r\n", x, y, a);
 8001ece:	7bf9      	ldrb	r1, [r7, #15]
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	7b7a      	ldrb	r2, [r7, #13]
 8001ed4:	9201      	str	r2, [sp, #4]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4a0f      	ldr	r2, [pc, #60]	@ (8001f18 <checkNRF+0xb4>)
 8001edc:	2120      	movs	r1, #32
 8001ede:	480f      	ldr	r0, [pc, #60]	@ (8001f1c <checkNRF+0xb8>)
 8001ee0:	f008 fa42 	bl	800a368 <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, strlen(myRxData), 10);
 8001ee4:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <checkNRF+0xb8>)
 8001ee6:	f7fe fa4b 	bl	8000380 <strlen>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	230a      	movs	r3, #10
 8001ef0:	490a      	ldr	r1, [pc, #40]	@ (8001f1c <checkNRF+0xb8>)
 8001ef2:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <checkNRF+0xbc>)
 8001ef4:	f006 f9b9 	bl	800826a <HAL_UART_Transmit>
			//printf("x = %u, y = %u, a = %u \r\n", x,y,a);
			//printf("test \r\n");

		}
		NRF24_writeAckPayload(1, myAckPayload, 32);
 8001ef8:	2220      	movs	r2, #32
 8001efa:	490a      	ldr	r1, [pc, #40]	@ (8001f24 <checkNRF+0xc0>)
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff fade 	bl	80014be <NRF24_writeAckPayload>
	  } else {
		printf("NRF NOT AVAILABLE \r\n");
	  }
}
 8001f02:	e002      	b.n	8001f0a <checkNRF+0xa6>
		printf("NRF NOT AVAILABLE \r\n");
 8001f04:	4808      	ldr	r0, [pc, #32]	@ (8001f28 <checkNRF+0xc4>)
 8001f06:	f008 fa27 	bl	800a358 <puts>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	0800e01c 	.word	0x0800e01c
 8001f18:	0800e034 	.word	0x0800e034
 8001f1c:	2400059c 	.word	0x2400059c
 8001f20:	24000508 	.word	0x24000508
 8001f24:	24000008 	.word	0x24000008
 8001f28:	0800e050 	.word	0x0800e050
 8001f2c:	00000000 	.word	0x00000000

08001f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b09d      	sub	sp, #116	@ 0x74
 8001f34:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001f3c:	bf00      	nop
 8001f3e:	4b44      	ldr	r3, [pc, #272]	@ (8002050 <main+0x120>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <main+0x24>
 8001f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dcf4      	bgt.n	8001f3e <main+0xe>
  if ( timeout < 0 )
 8001f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	da01      	bge.n	8001f5e <main+0x2e>
  {
  Error_Handler();
 8001f5a:	f000 fb9f 	bl	800269c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f5e:	f000 fedd 	bl	8002d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f62:	f000 f883 	bl	800206c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f66:	f000 f8ff 	bl	8002168 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001f6a:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <main+0x120>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f70:	4a37      	ldr	r2, [pc, #220]	@ (8002050 <main+0x120>)
 8001f72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f7a:	4b35      	ldr	r3, [pc, #212]	@ (8002050 <main+0x120>)
 8001f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f001 fd9b 	bl	8003ac4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2000      	movs	r0, #0
 8001f92:	f001 fdb1 	bl	8003af8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001f9c:	bf00      	nop
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002050 <main+0x120>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <main+0x84>
 8001faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	dcf4      	bgt.n	8001f9e <main+0x6e>
if ( timeout < 0 )
 8001fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da01      	bge.n	8001fbe <main+0x8e>
{
Error_Handler();
 8001fba:	f000 fb6f 	bl	800269c <Error_Handler>
}
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
	uint64_t pipe_address = 0x11223344AALL;
 8001fbe:	a322      	add	r3, pc, #136	@ (adr r3, 8002048 <main+0x118>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	char myRxData[50];
	uint8_t buffer[6];
	char myAckPayload[32] = "Ack by STMF7!";
 8001fc8:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <main+0x124>)
 8001fca:	1d3c      	adds	r4, r7, #4
 8001fcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fce:	c407      	stmia	r4!, {r0, r1, r2}
 8001fd0:	8023      	strh	r3, [r4, #0]
 8001fd2:	f107 0312 	add.w	r3, r7, #18
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	821a      	strh	r2, [r3, #16]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe2:	f000 fa81 	bl	80024e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001fe6:	f000 f941 	bl	800226c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001fea:	f000 fa31 	bl	8002450 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 8001fee:	f000 f993 	bl	8002318 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001ff2:	f000 f9df 	bl	80023b4 <MX_TIM14_Init>
  MX_FDCAN1_Init();
 8001ff6:	f000 f8d5 	bl	80021a4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  NRF_Init();
 8001ffa:	f7ff feed 	bl	8001dd8 <NRF_Init>
  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 8001ffe:	2100      	movs	r1, #0
 8002000:	4815      	ldr	r0, [pc, #84]	@ (8002058 <main+0x128>)
 8002002:	f005 fb1f 	bl	8007644 <HAL_TIM_PWM_Start>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <main+0xe6>
	{
	  printf("TIM14_PWM Failed to Start\r\n");
 800200c:	4813      	ldr	r0, [pc, #76]	@ (800205c <main+0x12c>)
 800200e:	f008 f9a3 	bl	800a358 <puts>
//#error "TIM14_PWM FAILED TO START"
	  Error_Handler();
 8002012:	f000 fb43 	bl	800269c <Error_Handler>
	}
  if (HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1) != HAL_OK)
 8002016:	2100      	movs	r1, #0
 8002018:	4811      	ldr	r0, [pc, #68]	@ (8002060 <main+0x130>)
 800201a:	f005 fb13 	bl	8007644 <HAL_TIM_PWM_Start>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <main+0xfe>
  {
	  printf("TIM13_PWM Failed to Start\r\n");
 8002024:	480f      	ldr	r0, [pc, #60]	@ (8002064 <main+0x134>)
 8002026:	f008 f997 	bl	800a358 <puts>
	  Error_Handler();
 800202a:	f000 fb37 	bl	800269c <Error_Handler>
  }
  printf("Timer's PWM channels OK \r\n");
 800202e:	480e      	ldr	r0, [pc, #56]	@ (8002068 <main+0x138>)
 8002030:	f008 f992 	bl	800a358 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  checkNRF();
 8002034:	f7ff ff16 	bl	8001e64 <checkNRF>
	  HAL_Delay(100);
 8002038:	2064      	movs	r0, #100	@ 0x64
 800203a:	f000 ff01 	bl	8002e40 <HAL_Delay>
	  checkNRF();
 800203e:	bf00      	nop
 8002040:	e7f8      	b.n	8002034 <main+0x104>
 8002042:	bf00      	nop
 8002044:	f3af 8000 	nop.w
 8002048:	223344aa 	.word	0x223344aa
 800204c:	00000011 	.word	0x00000011
 8002050:	58024400 	.word	0x58024400
 8002054:	0800e0b8 	.word	0x0800e0b8
 8002058:	240004bc 	.word	0x240004bc
 800205c:	0800e064 	.word	0x0800e064
 8002060:	24000470 	.word	0x24000470
 8002064:	0800e080 	.word	0x0800e080
 8002068:	0800e09c 	.word	0x0800e09c

0800206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b09c      	sub	sp, #112	@ 0x70
 8002070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002076:	224c      	movs	r2, #76	@ 0x4c
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f008 faa0 	bl	800a5c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	2220      	movs	r2, #32
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f008 fa9a 	bl	800a5c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800208c:	2004      	movs	r0, #4
 800208e:	f001 fd47 	bl	8003b20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <SystemClock_Config+0xf4>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4a31      	ldr	r2, [pc, #196]	@ (8002160 <SystemClock_Config+0xf4>)
 800209c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020a0:	6193      	str	r3, [r2, #24]
 80020a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002160 <SystemClock_Config+0xf4>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <SystemClock_Config+0xf8>)
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002164 <SystemClock_Config+0xf8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80020b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <SystemClock_Config+0xf8>)
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020c4:	bf00      	nop
 80020c6:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <SystemClock_Config+0xf4>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020d2:	d1f8      	bne.n	80020c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80020d4:	2303      	movs	r3, #3
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80020de:	2301      	movs	r3, #1
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020e2:	2340      	movs	r3, #64	@ 0x40
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e6:	2302      	movs	r3, #2
 80020e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ea:	2302      	movs	r3, #2
 80020ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80020ee:	2302      	movs	r3, #2
 80020f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80020f2:	23f0      	movs	r3, #240	@ 0xf0
 80020f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 80020fa:	2318      	movs	r3, #24
 80020fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020fe:	2302      	movs	r3, #2
 8002100:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002102:	2308      	movs	r3, #8
 8002104:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002106:	2300      	movs	r3, #0
 8002108:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800210e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002112:	4618      	mov	r0, r3
 8002114:	f001 fd5e 	bl	8003bd4 <HAL_RCC_OscConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800211e:	f000 fabd 	bl	800269c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002122:	233f      	movs	r3, #63	@ 0x3f
 8002124:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002126:	2303      	movs	r3, #3
 8002128:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800212e:	2308      	movs	r3, #8
 8002130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002132:	2340      	movs	r3, #64	@ 0x40
 8002134:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002136:	2340      	movs	r3, #64	@ 0x40
 8002138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800213a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800213e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002140:	2340      	movs	r3, #64	@ 0x40
 8002142:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2104      	movs	r1, #4
 8002148:	4618      	mov	r0, r3
 800214a:	f002 f99d 	bl	8004488 <HAL_RCC_ClockConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002154:	f000 faa2 	bl	800269c <Error_Handler>
  }
}
 8002158:	bf00      	nop
 800215a:	3770      	adds	r7, #112	@ 0x70
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	58024800 	.word	0x58024800
 8002164:	58000400 	.word	0x58000400

08002168 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0b0      	sub	sp, #192	@ 0xc0
 800216c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800216e:	463b      	mov	r3, r7
 8002170:	22c0      	movs	r2, #192	@ 0xc0
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f008 fa23 	bl	800a5c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800217a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002186:	2300      	movs	r3, #0
 8002188:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218a:	463b      	mov	r3, r7
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fd07 	bl	8004ba0 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8002198:	f000 fa80 	bl	800269c <Error_Handler>
  }
}
 800219c:	bf00      	nop
 800219e:	37c0      	adds	r7, #192	@ 0xc0
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80021a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002268 <MX_FDCAN1_Init+0xc4>)
 80021ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80021ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80021b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80021ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80021c6:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80021cc:	4b25      	ldr	r3, [pc, #148]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021ce:	2202      	movs	r2, #2
 80021d0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 80021d2:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021d4:	2208      	movs	r2, #8
 80021d6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 80021d8:	4b22      	ldr	r3, [pc, #136]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021da:	221f      	movs	r2, #31
 80021dc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80021de:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021e0:	2208      	movs	r2, #8
 80021e2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80021e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80021ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80021f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002204:	2201      	movs	r2, #1
 8002206:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002208:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 800220a:	2200      	movs	r2, #0
 800220c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002210:	2201      	movs	r2, #1
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002214:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002216:	2204      	movs	r2, #4
 8002218:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800221a:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 800221c:	2200      	movs	r2, #0
 800221e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002220:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002222:	2204      	movs	r2, #4
 8002224:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002228:	2200      	movs	r2, #0
 800222a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800222c:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 800222e:	2204      	movs	r2, #4
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002234:	2200      	movs	r2, #0
 8002236:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 800223a:	2200      	movs	r2, #0
 800223c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002240:	2201      	movs	r2, #1
 8002242:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002244:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002246:	2200      	movs	r2, #0
 8002248:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 800224c:	2204      	movs	r2, #4
 800224e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002250:	4804      	ldr	r0, [pc, #16]	@ (8002264 <MX_FDCAN1_Init+0xc0>)
 8002252:	f000 ff09 	bl	8003068 <HAL_FDCAN_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800225c:	f000 fa1e 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	24000348 	.word	0x24000348
 8002268:	4000a000 	.word	0x4000a000

0800226c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002270:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <MX_SPI1_Init+0xa4>)
 8002272:	4a28      	ldr	r2, [pc, #160]	@ (8002314 <MX_SPI1_Init+0xa8>)
 8002274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <MX_SPI1_Init+0xa4>)
 8002278:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800227c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800227e:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <MX_SPI1_Init+0xa4>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002284:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <MX_SPI1_Init+0xa4>)
 8002286:	2207      	movs	r2, #7
 8002288:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800228a:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <MX_SPI1_Init+0xa4>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002290:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <MX_SPI1_Init+0xa4>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <MX_SPI1_Init+0xa4>)
 8002298:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800229c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022a0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80022a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ac:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b2:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80022b8:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022be:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022cc:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022de:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022ea:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022f0:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	@ (8002310 <MX_SPI1_Init+0xa4>)
 80022fe:	f004 fa7b 	bl	80067f8 <HAL_SPI_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002308:	f000 f9c8 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	240003e8 	.word	0x240003e8
 8002314:	40013000 	.word	0x40013000

08002318 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002330:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <MX_TIM13_Init+0x94>)
 8002332:	4a1f      	ldr	r2, [pc, #124]	@ (80023b0 <MX_TIM13_Init+0x98>)
 8002334:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <MX_TIM13_Init+0x94>)
 8002338:	22ef      	movs	r2, #239	@ 0xef
 800233a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <MX_TIM13_Init+0x94>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <MX_TIM13_Init+0x94>)
 8002344:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002348:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <MX_TIM13_Init+0x94>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <MX_TIM13_Init+0x94>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002356:	4815      	ldr	r0, [pc, #84]	@ (80023ac <MX_TIM13_Init+0x94>)
 8002358:	f005 f8bb 	bl	80074d2 <HAL_TIM_Base_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002362:	f000 f99b 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002366:	4811      	ldr	r0, [pc, #68]	@ (80023ac <MX_TIM13_Init+0x94>)
 8002368:	f005 f90a 	bl	8007580 <HAL_TIM_PWM_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002372:	f000 f993 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002376:	2360      	movs	r3, #96	@ 0x60
 8002378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800237a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800237e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2200      	movs	r2, #0
 800238c:	4619      	mov	r1, r3
 800238e:	4807      	ldr	r0, [pc, #28]	@ (80023ac <MX_TIM13_Init+0x94>)
 8002390:	f005 fa66 	bl	8007860 <HAL_TIM_PWM_ConfigChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 800239a:	f000 f97f 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800239e:	4803      	ldr	r0, [pc, #12]	@ (80023ac <MX_TIM13_Init+0x94>)
 80023a0:	f000 face 	bl	8002940 <HAL_TIM_MspPostInit>

}
 80023a4:	bf00      	nop
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	24000470 	.word	0x24000470
 80023b0:	40001c00 	.word	0x40001c00

080023b4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	615a      	str	r2, [r3, #20]
 80023ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80023cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002448 <MX_TIM14_Init+0x94>)
 80023ce:	4a1f      	ldr	r2, [pc, #124]	@ (800244c <MX_TIM14_Init+0x98>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 80023d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <MX_TIM14_Init+0x94>)
 80023d4:	22ef      	movs	r2, #239	@ 0xef
 80023d6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <MX_TIM14_Init+0x94>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <MX_TIM14_Init+0x94>)
 80023e0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80023e4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e6:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <MX_TIM14_Init+0x94>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <MX_TIM14_Init+0x94>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80023f2:	4815      	ldr	r0, [pc, #84]	@ (8002448 <MX_TIM14_Init+0x94>)
 80023f4:	f005 f86d 	bl	80074d2 <HAL_TIM_Base_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80023fe:	f000 f94d 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002402:	4811      	ldr	r0, [pc, #68]	@ (8002448 <MX_TIM14_Init+0x94>)
 8002404:	f005 f8bc 	bl	8007580 <HAL_TIM_PWM_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800240e:	f000 f945 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002412:	2360      	movs	r3, #96	@ 0x60
 8002414:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8002416:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800241a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2200      	movs	r2, #0
 8002428:	4619      	mov	r1, r3
 800242a:	4807      	ldr	r0, [pc, #28]	@ (8002448 <MX_TIM14_Init+0x94>)
 800242c:	f005 fa18 	bl	8007860 <HAL_TIM_PWM_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8002436:	f000 f931 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800243a:	4803      	ldr	r0, [pc, #12]	@ (8002448 <MX_TIM14_Init+0x94>)
 800243c:	f000 fa80 	bl	8002940 <HAL_TIM_MspPostInit>

}
 8002440:	bf00      	nop
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	240004bc 	.word	0x240004bc
 800244c:	40002000 	.word	0x40002000

08002450 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 8002456:	4a23      	ldr	r2, [pc, #140]	@ (80024e4 <MX_USART3_UART_Init+0x94>)
 8002458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800245a:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 800245c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002486:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800248c:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002492:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 8002494:	2200      	movs	r2, #0
 8002496:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002498:	4811      	ldr	r0, [pc, #68]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 800249a:	f005 fe96 	bl	80081ca <HAL_UART_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80024a4:	f000 f8fa 	bl	800269c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a8:	2100      	movs	r1, #0
 80024aa:	480d      	ldr	r0, [pc, #52]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 80024ac:	f006 ff2d 	bl	800930a <HAL_UARTEx_SetTxFifoThreshold>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80024b6:	f000 f8f1 	bl	800269c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ba:	2100      	movs	r1, #0
 80024bc:	4808      	ldr	r0, [pc, #32]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 80024be:	f006 ff62 	bl	8009386 <HAL_UARTEx_SetRxFifoThreshold>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80024c8:	f000 f8e8 	bl	800269c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80024cc:	4804      	ldr	r0, [pc, #16]	@ (80024e0 <MX_USART3_UART_Init+0x90>)
 80024ce:	f006 fee3 	bl	8009298 <HAL_UARTEx_DisableFifoMode>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80024d8:	f000 f8e0 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	24000508 	.word	0x24000508
 80024e4:	40004800 	.word	0x40004800

080024e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	@ 0x30
 80024ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024fe:	4b62      	ldr	r3, [pc, #392]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002504:	4a60      	ldr	r2, [pc, #384]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002506:	f043 0320 	orr.w	r3, r3, #32
 800250a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800250e:	4b5e      	ldr	r3, [pc, #376]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800251c:	4b5a      	ldr	r3, [pc, #360]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002522:	4a59      	ldr	r2, [pc, #356]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800252c:	4b56      	ldr	r3, [pc, #344]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b53      	ldr	r3, [pc, #332]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002540:	4a51      	ldr	r2, [pc, #324]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002558:	4b4b      	ldr	r3, [pc, #300]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800255e:	4a4a      	ldr	r2, [pc, #296]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002568:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 800256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002576:	4b44      	ldr	r3, [pc, #272]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800257c:	4a42      	ldr	r2, [pc, #264]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002586:	4b40      	ldr	r3, [pc, #256]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002594:	4b3c      	ldr	r3, [pc, #240]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 8002596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800259a:	4a3b      	ldr	r2, [pc, #236]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 800259c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025a4:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <MX_GPIO_Init+0x1a0>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	21c0      	movs	r1, #192	@ 0xc0
 80025b6:	4835      	ldr	r0, [pc, #212]	@ (800268c <MX_GPIO_Init+0x1a4>)
 80025b8:	f001 fa6a 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80025bc:	2332      	movs	r3, #50	@ 0x32
 80025be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025cc:	230b      	movs	r3, #11
 80025ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	482d      	ldr	r0, [pc, #180]	@ (800268c <MX_GPIO_Init+0x1a4>)
 80025d8:	f001 f8aa 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80025dc:	2306      	movs	r3, #6
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ec:	230b      	movs	r3, #11
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	4619      	mov	r1, r3
 80025f6:	4826      	ldr	r0, [pc, #152]	@ (8002690 <MX_GPIO_Init+0x1a8>)
 80025f8:	f001 f89a 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800260e:	230b      	movs	r3, #11
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 031c 	add.w	r3, r7, #28
 8002616:	4619      	mov	r1, r3
 8002618:	481e      	ldr	r0, [pc, #120]	@ (8002694 <MX_GPIO_Init+0x1ac>)
 800261a:	f001 f889 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 800261e:	23c0      	movs	r3, #192	@ 0xc0
 8002620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002622:	2301      	movs	r3, #1
 8002624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4815      	ldr	r0, [pc, #84]	@ (800268c <MX_GPIO_Init+0x1a4>)
 8002636:	f001 f87b 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800263a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800263e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800264c:	230a      	movs	r3, #10
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	4619      	mov	r1, r3
 8002656:	480e      	ldr	r0, [pc, #56]	@ (8002690 <MX_GPIO_Init+0x1a8>)
 8002658:	f001 f86a 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800265c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800266e:	230b      	movs	r3, #11
 8002670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	4619      	mov	r1, r3
 8002678:	4807      	ldr	r0, [pc, #28]	@ (8002698 <MX_GPIO_Init+0x1b0>)
 800267a:	f001 f859 	bl	8003730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800267e:	bf00      	nop
 8002680:	3730      	adds	r7, #48	@ 0x30
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	58024400 	.word	0x58024400
 800268c:	58020800 	.word	0x58020800
 8002690:	58020000 	.word	0x58020000
 8002694:	58020400 	.word	0x58020400
 8002698:	58021800 	.word	0x58021800

0800269c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <Error_Handler+0x8>

080026a8 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80026b0:	1d39      	adds	r1, r7, #4
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	2201      	movs	r2, #1
 80026b8:	4803      	ldr	r0, [pc, #12]	@ (80026c8 <__io_putchar+0x20>)
 80026ba:	f005 fdd6 	bl	800826a <HAL_UART_Transmit>
  return ch;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	24000508 	.word	0x24000508

080026cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <HAL_MspInit+0x30>)
 80026d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026d8:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <HAL_MspInit+0x30>)
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_MspInit+0x30>)
 80026e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	58024400 	.word	0x58024400

08002700 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b0ba      	sub	sp, #232	@ 0xe8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	22c0      	movs	r2, #192	@ 0xc0
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f007 ff4d 	bl	800a5c0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a31      	ldr	r2, [pc, #196]	@ (80027f0 <HAL_FDCAN_MspInit+0xf0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d15b      	bne.n	80027e8 <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002730:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800273c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fa29 	bl	8004ba0 <HAL_RCCEx_PeriphCLKConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002754:	f7ff ffa2 	bl	800269c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002758:	4b26      	ldr	r3, [pc, #152]	@ (80027f4 <HAL_FDCAN_MspInit+0xf4>)
 800275a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800275e:	4a25      	ldr	r2, [pc, #148]	@ (80027f4 <HAL_FDCAN_MspInit+0xf4>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002764:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002768:	4b22      	ldr	r3, [pc, #136]	@ (80027f4 <HAL_FDCAN_MspInit+0xf4>)
 800276a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	4b1f      	ldr	r3, [pc, #124]	@ (80027f4 <HAL_FDCAN_MspInit+0xf4>)
 8002778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800277c:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_FDCAN_MspInit+0xf4>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002786:	4b1b      	ldr	r3, [pc, #108]	@ (80027f4 <HAL_FDCAN_MspInit+0xf4>)
 8002788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002794:	2301      	movs	r3, #1
 8002796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80027ac:	2309      	movs	r3, #9
 80027ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027b6:	4619      	mov	r1, r3
 80027b8:	480f      	ldr	r0, [pc, #60]	@ (80027f8 <HAL_FDCAN_MspInit+0xf8>)
 80027ba:	f000 ffb9 	bl	8003730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027be:	2302      	movs	r3, #2
 80027c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80027d6:	2309      	movs	r3, #9
 80027d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <HAL_FDCAN_MspInit+0xf8>)
 80027e4:	f000 ffa4 	bl	8003730 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80027e8:	bf00      	nop
 80027ea:	37e8      	adds	r7, #232	@ 0xe8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	4000a000 	.word	0x4000a000
 80027f4:	58024400 	.word	0x58024400
 80027f8:	58020c00 	.word	0x58020c00

080027fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0ba      	sub	sp, #232	@ 0xe8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	22c0      	movs	r2, #192	@ 0xc0
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f007 fecf 	bl	800a5c0 <memset>
  if(hspi->Instance==SPI1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a26      	ldr	r2, [pc, #152]	@ (80028c0 <HAL_SPI_MspInit+0xc4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d145      	bne.n	80028b8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800282c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002838:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800283c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	4618      	mov	r0, r3
 8002844:	f002 f9ac 	bl	8004ba0 <HAL_RCCEx_PeriphCLKConfig>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800284e:	f7ff ff25 	bl	800269c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <HAL_SPI_MspInit+0xc8>)
 8002854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002858:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_SPI_MspInit+0xc8>)
 800285a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800285e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002862:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <HAL_SPI_MspInit+0xc8>)
 8002864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <HAL_SPI_MspInit+0xc8>)
 8002872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002876:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <HAL_SPI_MspInit+0xc8>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_SPI_MspInit+0xc8>)
 8002882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800288e:	23e0      	movs	r3, #224	@ 0xe0
 8002890:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028a6:	2305      	movs	r3, #5
 80028a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4805      	ldr	r0, [pc, #20]	@ (80028c8 <HAL_SPI_MspInit+0xcc>)
 80028b4:	f000 ff3c 	bl	8003730 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028b8:	bf00      	nop
 80028ba:	37e8      	adds	r7, #232	@ 0xe8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40013000 	.word	0x40013000
 80028c4:	58024400 	.word	0x58024400
 80028c8:	58020000 	.word	0x58020000

080028cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a16      	ldr	r2, [pc, #88]	@ (8002934 <HAL_TIM_Base_MspInit+0x68>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10f      	bne.n	80028fe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80028de:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <HAL_TIM_Base_MspInit+0x6c>)
 80028e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028e4:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <HAL_TIM_Base_MspInit+0x6c>)
 80028e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028ee:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <HAL_TIM_Base_MspInit+0x6c>)
 80028f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80028fc:	e013      	b.n	8002926 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a0e      	ldr	r2, [pc, #56]	@ (800293c <HAL_TIM_Base_MspInit+0x70>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10e      	bne.n	8002926 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <HAL_TIM_Base_MspInit+0x6c>)
 800290a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800290e:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <HAL_TIM_Base_MspInit+0x6c>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002914:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002918:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <HAL_TIM_Base_MspInit+0x6c>)
 800291a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40001c00 	.word	0x40001c00
 8002938:	58024400 	.word	0x58024400
 800293c:	40002000 	.word	0x40002000

08002940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a26      	ldr	r2, [pc, #152]	@ (80029f8 <HAL_TIM_MspPostInit+0xb8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d120      	bne.n	80029a4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002962:	4b26      	ldr	r3, [pc, #152]	@ (80029fc <HAL_TIM_MspPostInit+0xbc>)
 8002964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002968:	4a24      	ldr	r2, [pc, #144]	@ (80029fc <HAL_TIM_MspPostInit+0xbc>)
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002972:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <HAL_TIM_MspPostInit+0xbc>)
 8002974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002992:	2309      	movs	r3, #9
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	4818      	ldr	r0, [pc, #96]	@ (8002a00 <HAL_TIM_MspPostInit+0xc0>)
 800299e:	f000 fec7 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80029a2:	e024      	b.n	80029ee <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a16      	ldr	r2, [pc, #88]	@ (8002a04 <HAL_TIM_MspPostInit+0xc4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d11f      	bne.n	80029ee <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ae:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <HAL_TIM_MspPostInit+0xbc>)
 80029b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b4:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_TIM_MspPostInit+0xbc>)
 80029b6:	f043 0320 	orr.w	r3, r3, #32
 80029ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029be:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <HAL_TIM_MspPostInit+0xbc>)
 80029c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80029de:	2309      	movs	r3, #9
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <HAL_TIM_MspPostInit+0xc0>)
 80029ea:	f000 fea1 	bl	8003730 <HAL_GPIO_Init>
}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	@ 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40001c00 	.word	0x40001c00
 80029fc:	58024400 	.word	0x58024400
 8002a00:	58021400 	.word	0x58021400
 8002a04:	40002000 	.word	0x40002000

08002a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	22c0      	movs	r2, #192	@ 0xc0
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f007 fdc9 	bl	800a5c0 <memset>
  if(huart->Instance==USART3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <HAL_UART_MspInit+0xc8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d146      	bne.n	8002ac6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a38:	f04f 0202 	mov.w	r2, #2
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4a:	f107 0310 	add.w	r3, r7, #16
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f002 f8a6 	bl	8004ba0 <HAL_RCCEx_PeriphCLKConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a5a:	f7ff fe1f 	bl	800269c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_UART_MspInit+0xcc>)
 8002a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <HAL_UART_MspInit+0xcc>)
 8002a66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a6e:	4b19      	ldr	r3, [pc, #100]	@ (8002ad4 <HAL_UART_MspInit+0xcc>)
 8002a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_UART_MspInit+0xcc>)
 8002a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a82:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <HAL_UART_MspInit+0xcc>)
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <HAL_UART_MspInit+0xcc>)
 8002a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	@ (8002ad8 <HAL_UART_MspInit+0xd0>)
 8002ac2:	f000 fe35 	bl	8003730 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002ac6:	bf00      	nop
 8002ac8:	37e8      	adds	r7, #232	@ 0xe8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40004800 	.word	0x40004800
 8002ad4:	58024400 	.word	0x58024400
 8002ad8:	58020c00 	.word	0x58020c00

08002adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <NMI_Handler+0x4>

08002ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <HardFault_Handler+0x4>

08002aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <MemManage_Handler+0x4>

08002af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <BusFault_Handler+0x4>

08002afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <UsageFault_Handler+0x4>

08002b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b32:	f000 f965 	bl	8002e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  return 1;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <_kill>:

int _kill(int pid, int sig)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b54:	f007 fd86 	bl	800a664 <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2216      	movs	r2, #22
 8002b5c:	601a      	str	r2, [r3, #0]
  return -1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_exit>:

void _exit (int status)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b72:	f04f 31ff 	mov.w	r1, #4294967295
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffe7 	bl	8002b4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <_exit+0x12>

08002b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	e00a      	b.n	8002ba8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b92:	f3af 8000 	nop.w
 8002b96:	4601      	mov	r1, r0
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	60ba      	str	r2, [r7, #8]
 8002b9e:	b2ca      	uxtb	r2, r1
 8002ba0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbf0      	blt.n	8002b92 <_read+0x12>
  }

  return len;
 8002bb0:	687b      	ldr	r3, [r7, #4]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e009      	b.n	8002be0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fd67 	bl	80026a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	dbf1      	blt.n	8002bcc <_write+0x12>
  }
  return len;
 8002be8:	687b      	ldr	r3, [r7, #4]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <_close>:

int _close(int file)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_isatty>:

int _isatty(int file)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <_sbrk+0x5c>)
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <_sbrk+0x60>)
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <_sbrk+0x64>)
 8002c7a:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <_sbrk+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d207      	bcs.n	8002c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c8c:	f007 fcea 	bl	800a664 <__errno>
 8002c90:	4603      	mov	r3, r0
 8002c92:	220c      	movs	r2, #12
 8002c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e009      	b.n	8002cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a05      	ldr	r2, [pc, #20]	@ (8002cc0 <_sbrk+0x64>)
 8002cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	24080000 	.word	0x24080000
 8002cbc:	00000400 	.word	0x00000400
 8002cc0:	240005d0 	.word	0x240005d0
 8002cc4:	24000728 	.word	0x24000728

08002cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ccc:	f7fd fecc 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cd2:	490d      	ldr	r1, [pc, #52]	@ (8002d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd8:	e002      	b.n	8002ce0 <LoopCopyDataInit>

08002cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cde:	3304      	adds	r3, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce4:	d3f9      	bcc.n	8002cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8002d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cec:	e001      	b.n	8002cf2 <LoopFillZerobss>

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf0:	3204      	adds	r2, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cf6:	f007 fcbb 	bl	800a670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfa:	f7ff f919 	bl	8001f30 <main>
  bx  lr
 8002cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d08:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8002d0c:	0800e5a8 	.word	0x0800e5a8
  ldr r2, =_sbss
 8002d10:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8002d14:	24000724 	.word	0x24000724

08002d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d18:	e7fe      	b.n	8002d18 <ADC3_IRQHandler>
	...

08002d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d22:	2003      	movs	r0, #3
 8002d24:	f000 f96e 	bl	8003004 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d28:	f001 fd64 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <HAL_Init+0x68>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	4913      	ldr	r1, [pc, #76]	@ (8002d88 <HAL_Init+0x6c>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
 8002d44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d46:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <HAL_Init+0x68>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d88 <HAL_Init+0x6c>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d8c <HAL_Init+0x70>)
 8002d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d60:	4a0b      	ldr	r2, [pc, #44]	@ (8002d90 <HAL_Init+0x74>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d66:	2000      	movs	r0, #0
 8002d68:	f000 f814 	bl	8002d94 <HAL_InitTick>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e002      	b.n	8002d7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d76:	f7ff fca9 	bl	80026cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	58024400 	.word	0x58024400
 8002d88:	0800e124 	.word	0x0800e124
 8002d8c:	24000004 	.word	0x24000004
 8002d90:	24000000 	.word	0x24000000

08002d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d9c:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_InitTick+0x60>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e021      	b.n	8002dec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002da8:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <HAL_InitTick+0x64>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b11      	ldr	r3, [pc, #68]	@ (8002df4 <HAL_InitTick+0x60>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4619      	mov	r1, r3
 8002db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f945 	bl	800304e <HAL_SYSTICK_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00e      	b.n	8002dec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b0f      	cmp	r3, #15
 8002dd2:	d80a      	bhi.n	8002dea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f000 f91d 	bl	800301a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de0:	4a06      	ldr	r2, [pc, #24]	@ (8002dfc <HAL_InitTick+0x68>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e000      	b.n	8002dec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	2400002c 	.word	0x2400002c
 8002df8:	24000000 	.word	0x24000000
 8002dfc:	24000028 	.word	0x24000028

08002e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e04:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <HAL_IncTick+0x20>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_IncTick+0x24>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a04      	ldr	r2, [pc, #16]	@ (8002e24 <HAL_IncTick+0x24>)
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	2400002c 	.word	0x2400002c
 8002e24:	240005d4 	.word	0x240005d4

08002e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <HAL_GetTick+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	240005d4 	.word	0x240005d4

08002e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff ffee 	bl	8002e28 <HAL_GetTick>
 8002e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d005      	beq.n	8002e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_Delay+0x44>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e66:	bf00      	nop
 8002e68:	f7ff ffde 	bl	8002e28 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d8f7      	bhi.n	8002e68 <HAL_Delay+0x28>
  {
  }
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	2400002c 	.word	0x2400002c

08002e88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e8c:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <HAL_GetREVID+0x14>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0c1b      	lsrs	r3, r3, #16
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	5c001000 	.word	0x5c001000

08002ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ece:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	60d3      	str	r3, [r2, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00
 8002ee4:	05fa0000 	.word	0x05fa0000

08002ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eec:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <__NVIC_GetPriorityGrouping+0x18>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0307 	and.w	r3, r3, #7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	@ (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	@ (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	@ 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	@ 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd0:	d301      	bcc.n	8002fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00f      	b.n	8002ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <SysTick_Config+0x40>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fde:	210f      	movs	r1, #15
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	f7ff ff8e 	bl	8002f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <SysTick_Config+0x40>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fee:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <SysTick_Config+0x40>)
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010

08003004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff47 	bl	8002ea0 <__NVIC_SetPriorityGrouping>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003028:	f7ff ff5e 	bl	8002ee8 <__NVIC_GetPriorityGrouping>
 800302c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7ff ff90 	bl	8002f58 <NVIC_EncodePriority>
 8003038:	4602      	mov	r2, r0
 800303a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff5f 	bl	8002f04 <__NVIC_SetPriority>
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ffb2 	bl	8002fc0 <SysTick_Config>
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b098      	sub	sp, #96	@ 0x60
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003070:	4a84      	ldr	r2, [pc, #528]	@ (8003284 <HAL_FDCAN_Init+0x21c>)
 8003072:	f107 030c 	add.w	r3, r7, #12
 8003076:	4611      	mov	r1, r2
 8003078:	224c      	movs	r2, #76	@ 0x4c
 800307a:	4618      	mov	r0, r3
 800307c:	f007 fb1f 	bl	800a6be <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1c6      	b.n	8003418 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7e      	ldr	r2, [pc, #504]	@ (8003288 <HAL_FDCAN_Init+0x220>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d106      	bne.n	80030a2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fb22 	bl	8002700 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0210 	bic.w	r2, r2, #16
 80030ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030cc:	f7ff feac 	bl	8002e28 <HAL_GetTick>
 80030d0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030d2:	e014      	b.n	80030fe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030d4:	f7ff fea8 	bl	8002e28 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b0a      	cmp	r3, #10
 80030e0:	d90d      	bls.n	80030fe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2203      	movs	r2, #3
 80030f6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e18c      	b.n	8003418 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b08      	cmp	r3, #8
 800310a:	d0e3      	beq.n	80030d4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800311c:	f7ff fe84 	bl	8002e28 <HAL_GetTick>
 8003120:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003122:	e014      	b.n	800314e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003124:	f7ff fe80 	bl	8002e28 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d90d      	bls.n	800314e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e164      	b.n	8003418 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0e3      	beq.n	8003124 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0202 	orr.w	r2, r2, #2
 800316a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7c1b      	ldrb	r3, [r3, #16]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d108      	bne.n	8003186 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003182:	619a      	str	r2, [r3, #24]
 8003184:	e007      	b.n	8003196 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003194:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7c5b      	ldrb	r3, [r3, #17]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ac:	619a      	str	r2, [r3, #24]
 80031ae:	e007      	b.n	80031c0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031be:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7c9b      	ldrb	r3, [r3, #18]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031d6:	619a      	str	r2, [r3, #24]
 80031d8:	e007      	b.n	80031ea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031e8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800320e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0210 	bic.w	r2, r2, #16
 800321e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0204 	orr.w	r2, r2, #4
 8003236:	619a      	str	r2, [r3, #24]
 8003238:	e030      	b.n	800329c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02c      	beq.n	800329c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d020      	beq.n	800328c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003258:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0210 	orr.w	r2, r2, #16
 8003268:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d114      	bne.n	800329c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0220 	orr.w	r2, r2, #32
 8003280:	619a      	str	r2, [r3, #24]
 8003282:	e00b      	b.n	800329c <HAL_FDCAN_Init+0x234>
 8003284:	0800e0d8 	.word	0x0800e0d8
 8003288:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032ac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032b4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	3b01      	subs	r3, #1
 80032be:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032c4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032c6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d0:	d115      	bne.n	80032fe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	3b01      	subs	r3, #1
 80032de:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032e0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	3b01      	subs	r3, #1
 80032e8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80032ea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80032fa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032fc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003324:	4413      	add	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d011      	beq.n	800334e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003332:	f023 0107 	bic.w	r1, r3, #7
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	3360      	adds	r3, #96	@ 0x60
 800333e:	443b      	add	r3, r7
 8003340:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d011      	beq.n	800337a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800335e:	f023 0107 	bic.w	r1, r3, #7
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	3360      	adds	r3, #96	@ 0x60
 800336a:	443b      	add	r3, r7
 800336c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337e:	2b00      	cmp	r3, #0
 8003380:	d012      	beq.n	80033a8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800338a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	3360      	adds	r3, #96	@ 0x60
 8003396:	443b      	add	r3, r7
 8003398:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800339c:	011a      	lsls	r2, r3, #4
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80033b8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	3360      	adds	r3, #96	@ 0x60
 80033c4:	443b      	add	r3, r7
 80033c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80033ca:	021a      	lsls	r2, r3, #8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a11      	ldr	r2, [pc, #68]	@ (8003420 <HAL_FDCAN_Init+0x3b8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d107      	bne.n	80033f0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f022 0203 	bic.w	r2, r2, #3
 80033ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f80b 	bl	8003424 <FDCAN_CalcultateRamBlockAddresses>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003414:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003418:	4618      	mov	r0, r3
 800341a:	3760      	adds	r7, #96	@ 0x60
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	4000a000 	.word	0x4000a000

08003424 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003430:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800343a:	4ba7      	ldr	r3, [pc, #668]	@ (80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800343c:	4013      	ands	r3, r2
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0091      	lsls	r1, r2, #2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	430b      	orrs	r3, r1
 8003448:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003454:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	041a      	lsls	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4413      	add	r3, r2
 8003470:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800347a:	4b97      	ldr	r3, [pc, #604]	@ (80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800347c:	4013      	ands	r3, r2
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	0091      	lsls	r1, r2, #2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	430b      	orrs	r3, r1
 8003488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003494:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	041a      	lsls	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	4413      	add	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80034bc:	4b86      	ldr	r3, [pc, #536]	@ (80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80034be:	4013      	ands	r3, r2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	0091      	lsls	r1, r2, #2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034d6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	041a      	lsls	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4413      	add	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003504:	4b74      	ldr	r3, [pc, #464]	@ (80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	0091      	lsls	r1, r2, #2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	430b      	orrs	r3, r1
 8003512:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800351e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003526:	041a      	lsls	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	4413      	add	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800354c:	4b62      	ldr	r3, [pc, #392]	@ (80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800354e:	4013      	ands	r3, r2
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	0091      	lsls	r1, r2, #2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4413      	add	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003578:	4b57      	ldr	r3, [pc, #348]	@ (80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800357a:	4013      	ands	r3, r2
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	0091      	lsls	r1, r2, #2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	430b      	orrs	r3, r1
 8003586:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003592:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	041a      	lsls	r2, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	4413      	add	r3, r2
 80035b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80035ba:	4b47      	ldr	r3, [pc, #284]	@ (80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035bc:	4013      	ands	r3, r2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	0091      	lsls	r1, r2, #2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	430b      	orrs	r3, r1
 80035c8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035d4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035dc:	041a      	lsls	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035f0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f8:	061a      	lsls	r2, r3, #24
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003608:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800360a:	4413      	add	r3, r2
 800360c:	009a      	lsls	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	441a      	add	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800365c:	441a      	add	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	441a      	add	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	4a04      	ldr	r2, [pc, #16]	@ (80036e0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d915      	bls.n	8003700 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80036d4:	e006      	b.n	80036e4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80036d6:	bf00      	nop
 80036d8:	ffff0003 	.word	0xffff0003
 80036dc:	10002b00 	.word	0x10002b00
 80036e0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2203      	movs	r2, #3
 80036f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e010      	b.n	8003722 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e005      	b.n	8003714 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3304      	adds	r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d3f3      	bcc.n	8003708 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	@ 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800373e:	4b89      	ldr	r3, [pc, #548]	@ (8003964 <HAL_GPIO_Init+0x234>)
 8003740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003742:	e194      	b.n	8003a6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8186 	beq.w	8003a68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d005      	beq.n	8003774 <HAL_GPIO_Init+0x44>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d130      	bne.n	80037d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037aa:	2201      	movs	r2, #1
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	f003 0201 	and.w	r2, r3, #1
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d017      	beq.n	8003812 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	2203      	movs	r2, #3
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d123      	bne.n	8003866 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	08da      	lsrs	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3208      	adds	r2, #8
 8003826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	69b9      	ldr	r1, [r7, #24]
 8003862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	2203      	movs	r2, #3
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0203 	and.w	r2, r3, #3
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80e0 	beq.w	8003a68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003968 <HAL_GPIO_Init+0x238>)
 80038aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003968 <HAL_GPIO_Init+0x238>)
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80038b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003968 <HAL_GPIO_Init+0x238>)
 80038ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038c6:	4a29      	ldr	r2, [pc, #164]	@ (800396c <HAL_GPIO_Init+0x23c>)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	3302      	adds	r3, #2
 80038ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	220f      	movs	r2, #15
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a20      	ldr	r2, [pc, #128]	@ (8003970 <HAL_GPIO_Init+0x240>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d052      	beq.n	8003998 <HAL_GPIO_Init+0x268>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <HAL_GPIO_Init+0x244>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d031      	beq.n	800395e <HAL_GPIO_Init+0x22e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <HAL_GPIO_Init+0x248>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d02b      	beq.n	800395a <HAL_GPIO_Init+0x22a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_GPIO_Init+0x24c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d025      	beq.n	8003956 <HAL_GPIO_Init+0x226>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1c      	ldr	r2, [pc, #112]	@ (8003980 <HAL_GPIO_Init+0x250>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01f      	beq.n	8003952 <HAL_GPIO_Init+0x222>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1b      	ldr	r2, [pc, #108]	@ (8003984 <HAL_GPIO_Init+0x254>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d019      	beq.n	800394e <HAL_GPIO_Init+0x21e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1a      	ldr	r2, [pc, #104]	@ (8003988 <HAL_GPIO_Init+0x258>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_GPIO_Init+0x21a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a19      	ldr	r2, [pc, #100]	@ (800398c <HAL_GPIO_Init+0x25c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00d      	beq.n	8003946 <HAL_GPIO_Init+0x216>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a18      	ldr	r2, [pc, #96]	@ (8003990 <HAL_GPIO_Init+0x260>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <HAL_GPIO_Init+0x212>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a17      	ldr	r2, [pc, #92]	@ (8003994 <HAL_GPIO_Init+0x264>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_GPIO_Init+0x20e>
 800393a:	2309      	movs	r3, #9
 800393c:	e02d      	b.n	800399a <HAL_GPIO_Init+0x26a>
 800393e:	230a      	movs	r3, #10
 8003940:	e02b      	b.n	800399a <HAL_GPIO_Init+0x26a>
 8003942:	2308      	movs	r3, #8
 8003944:	e029      	b.n	800399a <HAL_GPIO_Init+0x26a>
 8003946:	2307      	movs	r3, #7
 8003948:	e027      	b.n	800399a <HAL_GPIO_Init+0x26a>
 800394a:	2306      	movs	r3, #6
 800394c:	e025      	b.n	800399a <HAL_GPIO_Init+0x26a>
 800394e:	2305      	movs	r3, #5
 8003950:	e023      	b.n	800399a <HAL_GPIO_Init+0x26a>
 8003952:	2304      	movs	r3, #4
 8003954:	e021      	b.n	800399a <HAL_GPIO_Init+0x26a>
 8003956:	2303      	movs	r3, #3
 8003958:	e01f      	b.n	800399a <HAL_GPIO_Init+0x26a>
 800395a:	2302      	movs	r3, #2
 800395c:	e01d      	b.n	800399a <HAL_GPIO_Init+0x26a>
 800395e:	2301      	movs	r3, #1
 8003960:	e01b      	b.n	800399a <HAL_GPIO_Init+0x26a>
 8003962:	bf00      	nop
 8003964:	58000080 	.word	0x58000080
 8003968:	58024400 	.word	0x58024400
 800396c:	58000400 	.word	0x58000400
 8003970:	58020000 	.word	0x58020000
 8003974:	58020400 	.word	0x58020400
 8003978:	58020800 	.word	0x58020800
 800397c:	58020c00 	.word	0x58020c00
 8003980:	58021000 	.word	0x58021000
 8003984:	58021400 	.word	0x58021400
 8003988:	58021800 	.word	0x58021800
 800398c:	58021c00 	.word	0x58021c00
 8003990:	58022000 	.word	0x58022000
 8003994:	58022400 	.word	0x58022400
 8003998:	2300      	movs	r3, #0
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	f002 0203 	and.w	r2, r2, #3
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	4093      	lsls	r3, r2
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039aa:	4938      	ldr	r1, [pc, #224]	@ (8003a8c <HAL_GPIO_Init+0x35c>)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f47f ae63 	bne.w	8003744 <HAL_GPIO_Init+0x14>
  }
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	3724      	adds	r7, #36	@ 0x24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	58000400 	.word	0x58000400

08003a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003aac:	e003      	b.n	8003ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003aae:	887b      	ldrh	r3, [r7, #2]
 8003ab0:	041a      	lsls	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	619a      	str	r2, [r3, #24]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003acc:	4a08      	ldr	r2, [pc, #32]	@ (8003af0 <HAL_HSEM_FastTake+0x2c>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3320      	adds	r3, #32
 8003ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad6:	4a07      	ldr	r2, [pc, #28]	@ (8003af4 <HAL_HSEM_FastTake+0x30>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	58026400 	.word	0x58026400
 8003af4:	80000300 	.word	0x80000300

08003af8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003b02:	4906      	ldr	r1, [pc, #24]	@ (8003b1c <HAL_HSEM_Release+0x24>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	58026400 	.word	0x58026400

08003b20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003b28:	4b29      	ldr	r3, [pc, #164]	@ (8003bd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d00a      	beq.n	8003b4a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b34:	4b26      	ldr	r3, [pc, #152]	@ (8003bd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d001      	beq.n	8003b46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e040      	b.n	8003bc8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e03e      	b.n	8003bc8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b4a:	4b21      	ldr	r3, [pc, #132]	@ (8003bd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003b52:	491f      	ldr	r1, [pc, #124]	@ (8003bd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b5a:	f7ff f965 	bl	8002e28 <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b60:	e009      	b.n	8003b76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b62:	f7ff f961 	bl	8002e28 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b70:	d901      	bls.n	8003b76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e028      	b.n	8003bc8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b76:	4b16      	ldr	r3, [pc, #88]	@ (8003bd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b82:	d1ee      	bne.n	8003b62 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b1e      	cmp	r3, #30
 8003b88:	d008      	beq.n	8003b9c <HAL_PWREx_ConfigSupply+0x7c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b8e:	d005      	beq.n	8003b9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b1d      	cmp	r3, #29
 8003b94:	d002      	beq.n	8003b9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b2d      	cmp	r3, #45	@ 0x2d
 8003b9a:	d114      	bne.n	8003bc6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b9c:	f7ff f944 	bl	8002e28 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ba2:	e009      	b.n	8003bb8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ba4:	f7ff f940 	bl	8002e28 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bb2:	d901      	bls.n	8003bb8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	58024800 	.word	0x58024800

08003bd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	@ 0x30
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f000 bc48 	b.w	8004478 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8088 	beq.w	8003d06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf6:	4b99      	ldr	r3, [pc, #612]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c00:	4b96      	ldr	r3, [pc, #600]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d007      	beq.n	8003c1c <HAL_RCC_OscConfig+0x48>
 8003c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0e:	2b18      	cmp	r3, #24
 8003c10:	d111      	bne.n	8003c36 <HAL_RCC_OscConfig+0x62>
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d10c      	bne.n	8003c36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d06d      	beq.n	8003d04 <HAL_RCC_OscConfig+0x130>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d169      	bne.n	8003d04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f000 bc21 	b.w	8004478 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x7a>
 8003c40:	4b86      	ldr	r3, [pc, #536]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a85      	ldr	r2, [pc, #532]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	e02e      	b.n	8003cac <HAL_RCC_OscConfig+0xd8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x9c>
 8003c56:	4b81      	ldr	r3, [pc, #516]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a80      	ldr	r2, [pc, #512]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b7e      	ldr	r3, [pc, #504]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7d      	ldr	r2, [pc, #500]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e01d      	b.n	8003cac <HAL_RCC_OscConfig+0xd8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCC_OscConfig+0xc0>
 8003c7a:	4b78      	ldr	r3, [pc, #480]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a77      	ldr	r2, [pc, #476]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	4b75      	ldr	r3, [pc, #468]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a74      	ldr	r2, [pc, #464]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0xd8>
 8003c94:	4b71      	ldr	r3, [pc, #452]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a70      	ldr	r2, [pc, #448]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b6e      	ldr	r3, [pc, #440]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a6d      	ldr	r2, [pc, #436]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7ff f8b8 	bl	8002e28 <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7ff f8b4 	bl	8002e28 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	@ 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e3d4      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cce:	4b63      	ldr	r3, [pc, #396]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0xe8>
 8003cda:	e014      	b.n	8003d06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7ff f8a4 	bl	8002e28 <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7ff f8a0 	bl	8002e28 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e3c0      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cf6:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x110>
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80ca 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d14:	4b51      	ldr	r3, [pc, #324]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_RCC_OscConfig+0x166>
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	2b18      	cmp	r3, #24
 8003d2e:	d156      	bne.n	8003dde <HAL_RCC_OscConfig+0x20a>
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d151      	bne.n	8003dde <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d3a:	4b48      	ldr	r3, [pc, #288]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_RCC_OscConfig+0x17e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e392      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d52:	4b42      	ldr	r3, [pc, #264]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 0219 	bic.w	r2, r3, #25
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	493f      	ldr	r1, [pc, #252]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7ff f860 	bl	8002e28 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7ff f85c 	bl	8002e28 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e37c      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d7e:	4b37      	ldr	r3, [pc, #220]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	f7ff f87d 	bl	8002e88 <HAL_GetREVID>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d817      	bhi.n	8003dc8 <HAL_RCC_OscConfig+0x1f4>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b40      	cmp	r3, #64	@ 0x40
 8003d9e:	d108      	bne.n	8003db2 <HAL_RCC_OscConfig+0x1de>
 8003da0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003da8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db0:	e07a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	031b      	lsls	r3, r3, #12
 8003dc0:	4926      	ldr	r1, [pc, #152]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc6:	e06f      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc8:	4b24      	ldr	r3, [pc, #144]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	4921      	ldr	r1, [pc, #132]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ddc:	e064      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d047      	beq.n	8003e76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003de6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 0219 	bic.w	r2, r3, #25
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	491a      	ldr	r1, [pc, #104]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7ff f816 	bl	8002e28 <HAL_GetTick>
 8003dfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e00:	f7ff f812 	bl	8002e28 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e332      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1e:	f7ff f833 	bl	8002e88 <HAL_GetREVID>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d819      	bhi.n	8003e60 <HAL_RCC_OscConfig+0x28c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b40      	cmp	r3, #64	@ 0x40
 8003e32:	d108      	bne.n	8003e46 <HAL_RCC_OscConfig+0x272>
 8003e34:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e3c:	4a07      	ldr	r2, [pc, #28]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e42:	6053      	str	r3, [r2, #4]
 8003e44:	e030      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2d4>
 8003e46:	4b05      	ldr	r3, [pc, #20]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	031b      	lsls	r3, r3, #12
 8003e54:	4901      	ldr	r1, [pc, #4]	@ (8003e5c <HAL_RCC_OscConfig+0x288>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
 8003e5a:	e025      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2d4>
 8003e5c:	58024400 	.word	0x58024400
 8003e60:	4b9a      	ldr	r3, [pc, #616]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	4997      	ldr	r1, [pc, #604]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
 8003e74:	e018      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b95      	ldr	r3, [pc, #596]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a94      	ldr	r2, [pc, #592]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe ffd1 	bl	8002e28 <HAL_GetTick>
 8003e86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fe ffcd 	bl	8002e28 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e2ed      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e9c:	4b8b      	ldr	r3, [pc, #556]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a9 	beq.w	8004008 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	4b85      	ldr	r3, [pc, #532]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ebe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ec0:	4b82      	ldr	r3, [pc, #520]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d007      	beq.n	8003edc <HAL_RCC_OscConfig+0x308>
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b18      	cmp	r3, #24
 8003ed0:	d13a      	bne.n	8003f48 <HAL_RCC_OscConfig+0x374>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d135      	bne.n	8003f48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003edc:	4b7b      	ldr	r3, [pc, #492]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x320>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b80      	cmp	r3, #128	@ 0x80
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e2c1      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ef4:	f7fe ffc8 	bl	8002e88 <HAL_GetREVID>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d817      	bhi.n	8003f32 <HAL_RCC_OscConfig+0x35e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d108      	bne.n	8003f1c <HAL_RCC_OscConfig+0x348>
 8003f0a:	4b70      	ldr	r3, [pc, #448]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003f12:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f1a:	e075      	b.n	8004008 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	069b      	lsls	r3, r3, #26
 8003f2a:	4968      	ldr	r1, [pc, #416]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f30:	e06a      	b.n	8004008 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f32:	4b66      	ldr	r3, [pc, #408]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	061b      	lsls	r3, r3, #24
 8003f40:	4962      	ldr	r1, [pc, #392]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f46:	e05f      	b.n	8004008 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d042      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f50:	4b5e      	ldr	r3, [pc, #376]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a5d      	ldr	r2, [pc, #372]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe ff64 	bl	8002e28 <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f64:	f7fe ff60 	bl	8002e28 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e280      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f76:	4b55      	ldr	r3, [pc, #340]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f82:	f7fe ff81 	bl	8002e88 <HAL_GetREVID>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d817      	bhi.n	8003fc0 <HAL_RCC_OscConfig+0x3ec>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d108      	bne.n	8003faa <HAL_RCC_OscConfig+0x3d6>
 8003f98:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003fa2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fa6:	6053      	str	r3, [r2, #4]
 8003fa8:	e02e      	b.n	8004008 <HAL_RCC_OscConfig+0x434>
 8003faa:	4b48      	ldr	r3, [pc, #288]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	069b      	lsls	r3, r3, #26
 8003fb8:	4944      	ldr	r1, [pc, #272]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
 8003fbe:	e023      	b.n	8004008 <HAL_RCC_OscConfig+0x434>
 8003fc0:	4b42      	ldr	r3, [pc, #264]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	061b      	lsls	r3, r3, #24
 8003fce:	493f      	ldr	r1, [pc, #252]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60cb      	str	r3, [r1, #12]
 8003fd4:	e018      	b.n	8004008 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3c      	ldr	r2, [pc, #240]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fe ff21 	bl	8002e28 <HAL_GetTick>
 8003fe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003fea:	f7fe ff1d 	bl	8002e28 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e23d      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ffc:	4b33      	ldr	r3, [pc, #204]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d036      	beq.n	8004082 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d019      	beq.n	8004050 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401c:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 800401e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004020:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fe fefe 	bl	8002e28 <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004030:	f7fe fefa 	bl	8002e28 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e21a      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004042:	4b22      	ldr	r3, [pc, #136]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8004044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x45c>
 800404e:	e018      	b.n	8004082 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b1e      	ldr	r3, [pc, #120]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8004052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004054:	4a1d      	ldr	r2, [pc, #116]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fe fee4 	bl	8002e28 <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004064:	f7fe fee0 	bl	8002e28 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e200      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004076:	4b15      	ldr	r3, [pc, #84]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8004078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d039      	beq.n	8004102 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004096:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a0c      	ldr	r2, [pc, #48]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 800409c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040a2:	f7fe fec1 	bl	8002e28 <HAL_GetTick>
 80040a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040aa:	f7fe febd 	bl	8002e28 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e1dd      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040bc:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <HAL_RCC_OscConfig+0x4f8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x4d6>
 80040c8:	e01b      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040d0:	4b9b      	ldr	r3, [pc, #620]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a9a      	ldr	r2, [pc, #616]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80040d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040dc:	f7fe fea4 	bl	8002e28 <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040e4:	f7fe fea0 	bl	8002e28 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1c0      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040f6:	4b92      	ldr	r3, [pc, #584]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8081 	beq.w	8004212 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004110:	4b8c      	ldr	r3, [pc, #560]	@ (8004344 <HAL_RCC_OscConfig+0x770>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a8b      	ldr	r2, [pc, #556]	@ (8004344 <HAL_RCC_OscConfig+0x770>)
 8004116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800411a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800411c:	f7fe fe84 	bl	8002e28 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fe fe80 	bl	8002e28 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	@ 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1a0      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004136:	4b83      	ldr	r3, [pc, #524]	@ (8004344 <HAL_RCC_OscConfig+0x770>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d106      	bne.n	8004158 <HAL_RCC_OscConfig+0x584>
 800414a:	4b7d      	ldr	r3, [pc, #500]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414e:	4a7c      	ldr	r2, [pc, #496]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6713      	str	r3, [r2, #112]	@ 0x70
 8004156:	e02d      	b.n	80041b4 <HAL_RCC_OscConfig+0x5e0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10c      	bne.n	800417a <HAL_RCC_OscConfig+0x5a6>
 8004160:	4b77      	ldr	r3, [pc, #476]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	4a76      	ldr	r2, [pc, #472]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	6713      	str	r3, [r2, #112]	@ 0x70
 800416c:	4b74      	ldr	r3, [pc, #464]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004170:	4a73      	ldr	r2, [pc, #460]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004172:	f023 0304 	bic.w	r3, r3, #4
 8004176:	6713      	str	r3, [r2, #112]	@ 0x70
 8004178:	e01c      	b.n	80041b4 <HAL_RCC_OscConfig+0x5e0>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b05      	cmp	r3, #5
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0x5c8>
 8004182:	4b6f      	ldr	r3, [pc, #444]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	4a6e      	ldr	r2, [pc, #440]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004188:	f043 0304 	orr.w	r3, r3, #4
 800418c:	6713      	str	r3, [r2, #112]	@ 0x70
 800418e:	4b6c      	ldr	r3, [pc, #432]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	4a6b      	ldr	r2, [pc, #428]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6713      	str	r3, [r2, #112]	@ 0x70
 800419a:	e00b      	b.n	80041b4 <HAL_RCC_OscConfig+0x5e0>
 800419c:	4b68      	ldr	r3, [pc, #416]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	4a67      	ldr	r2, [pc, #412]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a8:	4b65      	ldr	r3, [pc, #404]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a64      	ldr	r2, [pc, #400]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80041ae:	f023 0304 	bic.w	r3, r3, #4
 80041b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fe fe34 	bl	8002e28 <HAL_GetTick>
 80041c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c2:	e00a      	b.n	80041da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c4:	f7fe fe30 	bl	8002e28 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e14e      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041da:	4b59      	ldr	r3, [pc, #356]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ee      	beq.n	80041c4 <HAL_RCC_OscConfig+0x5f0>
 80041e6:	e014      	b.n	8004212 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fe fe1e 	bl	8002e28 <HAL_GetTick>
 80041ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f0:	f7fe fe1a 	bl	8002e28 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e138      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004206:	4b4e      	ldr	r3, [pc, #312]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1ee      	bne.n	80041f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 812d 	beq.w	8004476 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800421c:	4b48      	ldr	r3, [pc, #288]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004224:	2b18      	cmp	r3, #24
 8004226:	f000 80bd 	beq.w	80043a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	2b02      	cmp	r3, #2
 8004230:	f040 809e 	bne.w	8004370 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004234:	4b42      	ldr	r3, [pc, #264]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a41      	ldr	r2, [pc, #260]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800423a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800423e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe fdf2 	bl	8002e28 <HAL_GetTick>
 8004244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004248:	f7fe fdee 	bl	8002e28 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e10e      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800425a:	4b39      	ldr	r3, [pc, #228]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004266:	4b36      	ldr	r3, [pc, #216]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800426a:	4b37      	ldr	r3, [pc, #220]	@ (8004348 <HAL_RCC_OscConfig+0x774>)
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004276:	0112      	lsls	r2, r2, #4
 8004278:	430a      	orrs	r2, r1
 800427a:	4931      	ldr	r1, [pc, #196]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004284:	3b01      	subs	r3, #1
 8004286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	3b01      	subs	r3, #1
 8004290:	025b      	lsls	r3, r3, #9
 8004292:	b29b      	uxth	r3, r3
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429a:	3b01      	subs	r3, #1
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a8:	3b01      	subs	r3, #1
 80042aa:	061b      	lsls	r3, r3, #24
 80042ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042b0:	4923      	ldr	r1, [pc, #140]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80042b6:	4b22      	ldr	r3, [pc, #136]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	4a21      	ldr	r2, [pc, #132]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c6:	4b21      	ldr	r3, [pc, #132]	@ (800434c <HAL_RCC_OscConfig+0x778>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042ce:	00d2      	lsls	r2, r2, #3
 80042d0:	491b      	ldr	r1, [pc, #108]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	f023 020c 	bic.w	r2, r3, #12
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	4917      	ldr	r1, [pc, #92]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042e8:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	f023 0202 	bic.w	r2, r3, #2
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f4:	4912      	ldr	r1, [pc, #72]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042fa:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	4a10      	ldr	r2, [pc, #64]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004306:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	4a0d      	ldr	r2, [pc, #52]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800430c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004310:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004312:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800431c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800431e:	4b08      	ldr	r3, [pc, #32]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	4a07      	ldr	r2, [pc, #28]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432a:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a04      	ldr	r2, [pc, #16]	@ (8004340 <HAL_RCC_OscConfig+0x76c>)
 8004330:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fe fd77 	bl	8002e28 <HAL_GetTick>
 800433a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800433c:	e011      	b.n	8004362 <HAL_RCC_OscConfig+0x78e>
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
 8004344:	58024800 	.word	0x58024800
 8004348:	fffffc0c 	.word	0xfffffc0c
 800434c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe fd6a 	bl	8002e28 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e08a      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004362:	4b47      	ldr	r3, [pc, #284]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x77c>
 800436e:	e082      	b.n	8004476 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004370:	4b43      	ldr	r3, [pc, #268]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a42      	ldr	r2, [pc, #264]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800437a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fe fd54 	bl	8002e28 <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004384:	f7fe fd50 	bl	8002e28 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e070      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004396:	4b3a      	ldr	r3, [pc, #232]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x7b0>
 80043a2:	e068      	b.n	8004476 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043a4:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043aa:	4b35      	ldr	r3, [pc, #212]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d031      	beq.n	800441c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f003 0203 	and.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d12a      	bne.n	800441c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d122      	bne.n	800441c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d11a      	bne.n	800441c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	0a5b      	lsrs	r3, r3, #9
 80043ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d111      	bne.n	800441c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d108      	bne.n	800441c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e02b      	b.n	8004478 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004420:	4b17      	ldr	r3, [pc, #92]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800442a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	429a      	cmp	r2, r3
 8004434:	d01f      	beq.n	8004476 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004436:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	4a11      	ldr	r2, [pc, #68]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004442:	f7fe fcf1 	bl	8002e28 <HAL_GetTick>
 8004446:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004448:	bf00      	nop
 800444a:	f7fe fced 	bl	8002e28 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	4293      	cmp	r3, r2
 8004454:	d0f9      	beq.n	800444a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800445a:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <HAL_RCC_OscConfig+0x8b0>)
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004462:	00d2      	lsls	r2, r2, #3
 8004464:	4906      	ldr	r1, [pc, #24]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004466:	4313      	orrs	r3, r2
 8004468:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800446a:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	4a04      	ldr	r2, [pc, #16]	@ (8004480 <HAL_RCC_OscConfig+0x8ac>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3730      	adds	r7, #48	@ 0x30
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	58024400 	.word	0x58024400
 8004484:	ffff0007 	.word	0xffff0007

08004488 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e19c      	b.n	80047d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800449c:	4b8a      	ldr	r3, [pc, #552]	@ (80046c8 <HAL_RCC_ClockConfig+0x240>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d910      	bls.n	80044cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b87      	ldr	r3, [pc, #540]	@ (80046c8 <HAL_RCC_ClockConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 020f 	bic.w	r2, r3, #15
 80044b2:	4985      	ldr	r1, [pc, #532]	@ (80046c8 <HAL_RCC_ClockConfig+0x240>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b83      	ldr	r3, [pc, #524]	@ (80046c8 <HAL_RCC_ClockConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e184      	b.n	80047d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	4b7b      	ldr	r3, [pc, #492]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d908      	bls.n	80044fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044e8:	4b78      	ldr	r3, [pc, #480]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	4975      	ldr	r1, [pc, #468]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d010      	beq.n	8004528 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	4b70      	ldr	r3, [pc, #448]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004512:	429a      	cmp	r2, r3
 8004514:	d908      	bls.n	8004528 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004516:	4b6d      	ldr	r3, [pc, #436]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	496a      	ldr	r1, [pc, #424]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004524:	4313      	orrs	r3, r2
 8004526:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	4b64      	ldr	r3, [pc, #400]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004540:	429a      	cmp	r2, r3
 8004542:	d908      	bls.n	8004556 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004544:	4b61      	ldr	r3, [pc, #388]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	495e      	ldr	r1, [pc, #376]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004552:	4313      	orrs	r3, r2
 8004554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	4b59      	ldr	r3, [pc, #356]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800456e:	429a      	cmp	r2, r3
 8004570:	d908      	bls.n	8004584 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004572:	4b56      	ldr	r3, [pc, #344]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4953      	ldr	r1, [pc, #332]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004580:	4313      	orrs	r3, r2
 8004582:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d010      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	4b4d      	ldr	r3, [pc, #308]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	429a      	cmp	r2, r3
 800459e:	d908      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b4a      	ldr	r3, [pc, #296]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f023 020f 	bic.w	r2, r3, #15
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4947      	ldr	r1, [pc, #284]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d055      	beq.n	800466a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80045be:	4b43      	ldr	r3, [pc, #268]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4940      	ldr	r1, [pc, #256]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045d8:	4b3c      	ldr	r3, [pc, #240]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d121      	bne.n	8004628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0f6      	b.n	80047d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045f0:	4b36      	ldr	r3, [pc, #216]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d115      	bne.n	8004628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0ea      	b.n	80047d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d107      	bne.n	8004618 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004608:	4b30      	ldr	r3, [pc, #192]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0de      	b.n	80047d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004618:	4b2c      	ldr	r3, [pc, #176]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0d6      	b.n	80047d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004628:	4b28      	ldr	r3, [pc, #160]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f023 0207 	bic.w	r2, r3, #7
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4925      	ldr	r1, [pc, #148]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004636:	4313      	orrs	r3, r2
 8004638:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463a:	f7fe fbf5 	bl	8002e28 <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004640:	e00a      	b.n	8004658 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004642:	f7fe fbf1 	bl	8002e28 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0be      	b.n	80047d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004658:	4b1c      	ldr	r3, [pc, #112]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	429a      	cmp	r2, r3
 8004668:	d1eb      	bne.n	8004642 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	4b14      	ldr	r3, [pc, #80]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	429a      	cmp	r2, r3
 8004684:	d208      	bcs.n	8004698 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004686:	4b11      	ldr	r3, [pc, #68]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f023 020f 	bic.w	r2, r3, #15
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	490e      	ldr	r1, [pc, #56]	@ (80046cc <HAL_RCC_ClockConfig+0x244>)
 8004694:	4313      	orrs	r3, r2
 8004696:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <HAL_RCC_ClockConfig+0x240>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d214      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a6:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <HAL_RCC_ClockConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 020f 	bic.w	r2, r3, #15
 80046ae:	4906      	ldr	r1, [pc, #24]	@ (80046c8 <HAL_RCC_ClockConfig+0x240>)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b04      	ldr	r3, [pc, #16]	@ (80046c8 <HAL_RCC_ClockConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e086      	b.n	80047d6 <HAL_RCC_ClockConfig+0x34e>
 80046c8:	52002000 	.word	0x52002000
 80046cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	4b3f      	ldr	r3, [pc, #252]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d208      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046ec:	4b3c      	ldr	r3, [pc, #240]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	4939      	ldr	r1, [pc, #228]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d010      	beq.n	800472c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	4b34      	ldr	r3, [pc, #208]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004716:	429a      	cmp	r2, r3
 8004718:	d208      	bcs.n	800472c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800471a:	4b31      	ldr	r3, [pc, #196]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	492e      	ldr	r1, [pc, #184]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 8004728:	4313      	orrs	r3, r2
 800472a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	4b28      	ldr	r3, [pc, #160]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004744:	429a      	cmp	r2, r3
 8004746:	d208      	bcs.n	800475a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004748:	4b25      	ldr	r3, [pc, #148]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	4922      	ldr	r1, [pc, #136]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 8004756:	4313      	orrs	r3, r2
 8004758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004772:	429a      	cmp	r2, r3
 8004774:	d208      	bcs.n	8004788 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004776:	4b1a      	ldr	r3, [pc, #104]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4917      	ldr	r1, [pc, #92]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 8004784:	4313      	orrs	r3, r2
 8004786:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004788:	f000 f834 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	4912      	ldr	r1, [pc, #72]	@ (80047e4 <HAL_RCC_ClockConfig+0x35c>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047a6:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <HAL_RCC_ClockConfig+0x358>)
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	4a0d      	ldr	r2, [pc, #52]	@ (80047e4 <HAL_RCC_ClockConfig+0x35c>)
 80047b0:	5cd3      	ldrb	r3, [r2, r3]
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <HAL_RCC_ClockConfig+0x360>)
 80047be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047c0:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <HAL_RCC_ClockConfig+0x364>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80047c6:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <HAL_RCC_ClockConfig+0x368>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fae2 	bl	8002d94 <HAL_InitTick>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	58024400 	.word	0x58024400
 80047e4:	0800e124 	.word	0x0800e124
 80047e8:	24000004 	.word	0x24000004
 80047ec:	24000000 	.word	0x24000000
 80047f0:	24000028 	.word	0x24000028

080047f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	@ 0x24
 80047f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047fa:	4bb3      	ldr	r3, [pc, #716]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004802:	2b18      	cmp	r3, #24
 8004804:	f200 8155 	bhi.w	8004ab2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004808:	a201      	add	r2, pc, #4	@ (adr r2, 8004810 <HAL_RCC_GetSysClockFreq+0x1c>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004875 	.word	0x08004875
 8004814:	08004ab3 	.word	0x08004ab3
 8004818:	08004ab3 	.word	0x08004ab3
 800481c:	08004ab3 	.word	0x08004ab3
 8004820:	08004ab3 	.word	0x08004ab3
 8004824:	08004ab3 	.word	0x08004ab3
 8004828:	08004ab3 	.word	0x08004ab3
 800482c:	08004ab3 	.word	0x08004ab3
 8004830:	0800489b 	.word	0x0800489b
 8004834:	08004ab3 	.word	0x08004ab3
 8004838:	08004ab3 	.word	0x08004ab3
 800483c:	08004ab3 	.word	0x08004ab3
 8004840:	08004ab3 	.word	0x08004ab3
 8004844:	08004ab3 	.word	0x08004ab3
 8004848:	08004ab3 	.word	0x08004ab3
 800484c:	08004ab3 	.word	0x08004ab3
 8004850:	080048a1 	.word	0x080048a1
 8004854:	08004ab3 	.word	0x08004ab3
 8004858:	08004ab3 	.word	0x08004ab3
 800485c:	08004ab3 	.word	0x08004ab3
 8004860:	08004ab3 	.word	0x08004ab3
 8004864:	08004ab3 	.word	0x08004ab3
 8004868:	08004ab3 	.word	0x08004ab3
 800486c:	08004ab3 	.word	0x08004ab3
 8004870:	080048a7 	.word	0x080048a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004874:	4b94      	ldr	r3, [pc, #592]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004880:	4b91      	ldr	r3, [pc, #580]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	08db      	lsrs	r3, r3, #3
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	4a90      	ldr	r2, [pc, #576]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004892:	e111      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004894:	4b8d      	ldr	r3, [pc, #564]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004896:	61bb      	str	r3, [r7, #24]
      break;
 8004898:	e10e      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800489a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800489c:	61bb      	str	r3, [r7, #24]
      break;
 800489e:	e10b      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80048a0:	4b8c      	ldr	r3, [pc, #560]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048a2:	61bb      	str	r3, [r7, #24]
      break;
 80048a4:	e108      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048a6:	4b88      	ldr	r3, [pc, #544]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80048b0:	4b85      	ldr	r3, [pc, #532]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048bc:	4b82      	ldr	r3, [pc, #520]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048c6:	4b80      	ldr	r3, [pc, #512]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ca:	08db      	lsrs	r3, r3, #3
 80048cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80e1 	beq.w	8004aac <HAL_RCC_GetSysClockFreq+0x2b8>
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	f000 8083 	beq.w	80049f8 <HAL_RCC_GetSysClockFreq+0x204>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	f200 80a1 	bhi.w	8004a3c <HAL_RCC_GetSysClockFreq+0x248>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x114>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d056      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004906:	e099      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004908:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02d      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004914:	4b6c      	ldr	r3, [pc, #432]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	08db      	lsrs	r3, r3, #3
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	4a6b      	ldr	r2, [pc, #428]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493e:	4b62      	ldr	r3, [pc, #392]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004952:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800496e:	e087      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004adc <HAL_RCC_GetSysClockFreq+0x2e8>
 800497e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004982:	4b51      	ldr	r3, [pc, #324]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004992:	ed97 6a02 	vldr	s12, [r7, #8]
 8004996:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800499a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049b2:	e065      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004ae0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c6:	4b40      	ldr	r3, [pc, #256]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049f6:	e043      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004ae4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a3a:	e021      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004ae0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004a80:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	0a5b      	lsrs	r3, r3, #9
 8004a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa4:	ee17 3a90 	vmov	r3, s15
 8004aa8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61bb      	str	r3, [r7, #24]
      break;
 8004ab0:	e002      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ab4:	61bb      	str	r3, [r7, #24]
      break;
 8004ab6:	bf00      	nop
  }

  return sysclockfreq;
 8004ab8:	69bb      	ldr	r3, [r7, #24]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3724      	adds	r7, #36	@ 0x24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	58024400 	.word	0x58024400
 8004acc:	03d09000 	.word	0x03d09000
 8004ad0:	003d0900 	.word	0x003d0900
 8004ad4:	007a1200 	.word	0x007a1200
 8004ad8:	46000000 	.word	0x46000000
 8004adc:	4c742400 	.word	0x4c742400
 8004ae0:	4a742400 	.word	0x4a742400
 8004ae4:	4af42400 	.word	0x4af42400

08004ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004aee:	f7ff fe81 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8004af2:	4602      	mov	r2, r0
 8004af4:	4b10      	ldr	r3, [pc, #64]	@ (8004b38 <HAL_RCC_GetHCLKFreq+0x50>)
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	490f      	ldr	r1, [pc, #60]	@ (8004b3c <HAL_RCC_GetHCLKFreq+0x54>)
 8004b00:	5ccb      	ldrb	r3, [r1, r3]
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b38 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	4a09      	ldr	r2, [pc, #36]	@ (8004b3c <HAL_RCC_GetHCLKFreq+0x54>)
 8004b16:	5cd3      	ldrb	r3, [r2, r3]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	4a07      	ldr	r2, [pc, #28]	@ (8004b40 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b26:	4a07      	ldr	r2, [pc, #28]	@ (8004b44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	0800e124 	.word	0x0800e124
 8004b40:	24000004 	.word	0x24000004
 8004b44:	24000000 	.word	0x24000000

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b4c:	f7ff ffcc 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4904      	ldr	r1, [pc, #16]	@ (8004b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	58024400 	.word	0x58024400
 8004b70:	0800e124 	.word	0x0800e124

08004b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004b78:	f7ff ffb6 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4904      	ldr	r1, [pc, #16]	@ (8004b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	58024400 	.word	0x58024400
 8004b9c:	0800e124 	.word	0x0800e124

08004ba0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba4:	b0ca      	sub	sp, #296	@ 0x128
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004bc4:	2500      	movs	r5, #0
 8004bc6:	ea54 0305 	orrs.w	r3, r4, r5
 8004bca:	d049      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bd6:	d02f      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004bd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bdc:	d828      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004be2:	d01a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004be8:	d822      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bf2:	d007      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bf4:	e01c      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf6:	4bb8      	ldr	r3, [pc, #736]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfa:	4ab7      	ldr	r2, [pc, #732]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c02:	e01a      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	3308      	adds	r3, #8
 8004c0a:	2102      	movs	r1, #2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fc8f 	bl	8006530 <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c18:	e00f      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	3328      	adds	r3, #40	@ 0x28
 8004c20:	2102      	movs	r1, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 fd36 	bl	8006694 <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c2e:	e004      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c36:	e000      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c42:	4ba5      	ldr	r3, [pc, #660]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c50:	4aa1      	ldr	r2, [pc, #644]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c52:	430b      	orrs	r3, r1
 8004c54:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c56:	e003      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c68:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c6c:	f04f 0900 	mov.w	r9, #0
 8004c70:	ea58 0309 	orrs.w	r3, r8, r9
 8004c74:	d047      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d82a      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c80:	a201      	add	r2, pc, #4	@ (adr r2, 8004c88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004c9d 	.word	0x08004c9d
 8004c8c:	08004cab 	.word	0x08004cab
 8004c90:	08004cc1 	.word	0x08004cc1
 8004c94:	08004cdf 	.word	0x08004cdf
 8004c98:	08004cdf 	.word	0x08004cdf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c9c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	4a8d      	ldr	r2, [pc, #564]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ca8:	e01a      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cae:	3308      	adds	r3, #8
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 fc3c 	bl	8006530 <RCCEx_PLL2_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cbe:	e00f      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc4:	3328      	adds	r3, #40	@ 0x28
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fce3 	bl	8006694 <RCCEx_PLL3_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cd4:	e004      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ce8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cec:	f023 0107 	bic.w	r1, r3, #7
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf6:	4a78      	ldr	r2, [pc, #480]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004d12:	f04f 0b00 	mov.w	fp, #0
 8004d16:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d1a:	d04c      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d26:	d030      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d2c:	d829      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d30:	d02d      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d34:	d825      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d36:	2b80      	cmp	r3, #128	@ 0x80
 8004d38:	d018      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d3a:	2b80      	cmp	r3, #128	@ 0x80
 8004d3c:	d821      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004d42:	2b40      	cmp	r3, #64	@ 0x40
 8004d44:	d007      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004d46:	e01c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d48:	4b63      	ldr	r3, [pc, #396]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	4a62      	ldr	r2, [pc, #392]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d54:	e01c      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 fbe6 	bl	8006530 <RCCEx_PLL2_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d6a:	e011      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d70:	3328      	adds	r3, #40	@ 0x28
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fc8d 	bl	8006694 <RCCEx_PLL3_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d80:	e006      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d88:	e002      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d98:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da6:	4a4c      	ldr	r2, [pc, #304]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004dc2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004dcc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	d053      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004dde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004de2:	d035      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004de4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004de8:	d82e      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004dee:	d031      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004df0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004df4:	d828      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dfa:	d01a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004dfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e00:	d822      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004e06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e0a:	d007      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004e0c:	e01c      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0e:	4b32      	ldr	r3, [pc, #200]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	4a31      	ldr	r2, [pc, #196]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e1a:	e01c      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	3308      	adds	r3, #8
 8004e22:	2100      	movs	r1, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fb83 	bl	8006530 <RCCEx_PLL2_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e30:	e011      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e36:	3328      	adds	r3, #40	@ 0x28
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 fc2a 	bl	8006694 <RCCEx_PLL3_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e46:	e006      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e50:	bf00      	nop
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e62:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e74:	e003      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e94:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d056      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ea6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eaa:	d038      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004eac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eb0:	d831      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eb2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004eb6:	d034      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004eb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ebc:	d82b      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ebe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ec2:	d01d      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ec8:	d825      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004ece:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ed4:	e01f      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004edc:	4ba2      	ldr	r3, [pc, #648]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	4aa1      	ldr	r2, [pc, #644]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ee8:	e01c      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	3308      	adds	r3, #8
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 fb1c 	bl	8006530 <RCCEx_PLL2_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004efe:	e011      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f04:	3328      	adds	r3, #40	@ 0x28
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 fbc3 	bl	8006694 <RCCEx_PLL3_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f14:	e006      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f2c:	4b8e      	ldr	r3, [pc, #568]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f3c:	4a8a      	ldr	r2, [pc, #552]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f42:	e003      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004f62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d03a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f72:	2b30      	cmp	r3, #48	@ 0x30
 8004f74:	d01f      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f76:	2b30      	cmp	r3, #48	@ 0x30
 8004f78:	d819      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d00c      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d815      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d019      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d111      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8a:	4b77      	ldr	r3, [pc, #476]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8e:	4a76      	ldr	r2, [pc, #472]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f96:	e011      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 fac5 	bl	8006530 <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004fac:	e006      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fb4:	e002      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fc4:	4b68      	ldr	r3, [pc, #416]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd2:	4a65      	ldr	r2, [pc, #404]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fd8:	e003      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004fee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4313      	orrs	r3, r2
 8005000:	d051      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800500c:	d035      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800500e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005012:	d82e      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005014:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005018:	d031      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800501a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800501e:	d828      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005024:	d01a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502a:	d822      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005034:	d007      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005036:	e01c      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005038:	4b4b      	ldr	r3, [pc, #300]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	4a4a      	ldr	r2, [pc, #296]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800503e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005044:	e01c      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504a:	3308      	adds	r3, #8
 800504c:	2100      	movs	r1, #0
 800504e:	4618      	mov	r0, r3
 8005050:	f001 fa6e 	bl	8006530 <RCCEx_PLL2_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800505a:	e011      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800505c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005060:	3328      	adds	r3, #40	@ 0x28
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f001 fb15 	bl	8006694 <RCCEx_PLL3_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005070:	e006      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005078:	e002      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800507e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005088:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800508a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005096:	4a34      	ldr	r2, [pc, #208]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005098:	430b      	orrs	r3, r1
 800509a:	6513      	str	r3, [r2, #80]	@ 0x50
 800509c:	e003      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050b6:	2300      	movs	r3, #0
 80050b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80050bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80050c0:	460b      	mov	r3, r1
 80050c2:	4313      	orrs	r3, r2
 80050c4:	d056      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d0:	d033      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80050d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d6:	d82c      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050dc:	d02f      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80050de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050e2:	d826      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050e8:	d02b      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80050ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050ee:	d820      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050f4:	d012      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80050f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050fa:	d81a      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d022      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005104:	d115      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510a:	3308      	adds	r3, #8
 800510c:	2101      	movs	r1, #1
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fa0e 	bl	8006530 <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800511a:	e015      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005120:	3328      	adds	r3, #40	@ 0x28
 8005122:	2101      	movs	r1, #1
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fab5 	bl	8006694 <RCCEx_PLL3_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005130:	e00a      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800513a:	bf00      	nop
 800513c:	e004      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800513e:	bf00      	nop
 8005140:	e002      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10d      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005154:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800515e:	4a02      	ldr	r2, [pc, #8]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005160:	430b      	orrs	r3, r1
 8005162:	6513      	str	r3, [r2, #80]	@ 0x50
 8005164:	e006      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005166:	bf00      	nop
 8005168:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800518a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800518e:	460b      	mov	r3, r1
 8005190:	4313      	orrs	r3, r2
 8005192:	d055      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800519c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a0:	d033      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80051a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a6:	d82c      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ac:	d02f      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b2:	d826      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051b8:	d02b      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80051ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051be:	d820      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051c4:	d012      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80051c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ca:	d81a      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d022      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80051d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051d4:	d115      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	3308      	adds	r3, #8
 80051dc:	2101      	movs	r1, #1
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 f9a6 	bl	8006530 <RCCEx_PLL2_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051ea:	e015      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f0:	3328      	adds	r3, #40	@ 0x28
 80051f2:	2101      	movs	r1, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fa4d 	bl	8006694 <RCCEx_PLL3_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005200:	e00a      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005208:	e006      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005220:	4ba3      	ldr	r3, [pc, #652]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005224:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005230:	4a9f      	ldr	r2, [pc, #636]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005232:	430b      	orrs	r3, r1
 8005234:	6593      	str	r3, [r2, #88]	@ 0x58
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800523c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800524c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005256:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	d037      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800526a:	d00e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800526c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005270:	d816      	bhi.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d018      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800527a:	d111      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527c:	4b8c      	ldr	r3, [pc, #560]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	4a8b      	ldr	r2, [pc, #556]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005288:	e00f      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528e:	3308      	adds	r3, #8
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f001 f94c 	bl	8006530 <RCCEx_PLL2_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800529e:	e004      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80052a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052b2:	4b7f      	ldr	r3, [pc, #508]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c0:	4a7b      	ldr	r2, [pc, #492]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c2:	430b      	orrs	r3, r1
 80052c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80052c6:	e003      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80052d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80052dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80052e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d039      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d81c      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80052fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	0800533d 	.word	0x0800533d
 8005304:	08005311 	.word	0x08005311
 8005308:	0800531f 	.word	0x0800531f
 800530c:	0800533d 	.word	0x0800533d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005310:	4b67      	ldr	r3, [pc, #412]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	4a66      	ldr	r2, [pc, #408]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800531a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800531c:	e00f      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800531e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005322:	3308      	adds	r3, #8
 8005324:	2102      	movs	r1, #2
 8005326:	4618      	mov	r0, r3
 8005328:	f001 f902 	bl	8006530 <RCCEx_PLL2_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005332:	e004      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800533a:	e000      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800533c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005346:	4b5a      	ldr	r3, [pc, #360]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800534a:	f023 0103 	bic.w	r1, r3, #3
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005354:	4a56      	ldr	r2, [pc, #344]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005356:	430b      	orrs	r3, r1
 8005358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800535a:	e003      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005374:	2300      	movs	r3, #0
 8005376:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800537a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800537e:	460b      	mov	r3, r1
 8005380:	4313      	orrs	r3, r2
 8005382:	f000 809f 	beq.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005386:	4b4b      	ldr	r3, [pc, #300]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a4a      	ldr	r2, [pc, #296]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800538c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005392:	f7fd fd49 	bl	8002e28 <HAL_GetTick>
 8005396:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800539a:	e00b      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539c:	f7fd fd44 	bl	8002e28 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b64      	cmp	r3, #100	@ 0x64
 80053aa:	d903      	bls.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053b2:	e005      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053b4:	4b3f      	ldr	r3, [pc, #252]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0ed      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80053c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d179      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053c8:	4b39      	ldr	r3, [pc, #228]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053d4:	4053      	eors	r3, r2
 80053d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d015      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053de:	4b34      	ldr	r3, [pc, #208]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053ea:	4b31      	ldr	r3, [pc, #196]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	4a30      	ldr	r2, [pc, #192]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053f6:	4b2e      	ldr	r3, [pc, #184]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	4a2d      	ldr	r2, [pc, #180]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005400:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005402:	4a2b      	ldr	r2, [pc, #172]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005408:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005416:	d118      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd fd06 	bl	8002e28 <HAL_GetTick>
 800541c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005420:	e00d      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7fd fd01 	bl	8002e28 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800542c:	1ad2      	subs	r2, r2, r3
 800542e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005432:	429a      	cmp	r2, r3
 8005434:	d903      	bls.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800543c:	e005      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800543e:	4b1c      	ldr	r3, [pc, #112]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0eb      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800544a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800544e:	2b00      	cmp	r3, #0
 8005450:	d129      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800545a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800545e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005462:	d10e      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005464:	4b12      	ldr	r3, [pc, #72]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005470:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005474:	091a      	lsrs	r2, r3, #4
 8005476:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005478:	4013      	ands	r3, r2
 800547a:	4a0d      	ldr	r2, [pc, #52]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800547c:	430b      	orrs	r3, r1
 800547e:	6113      	str	r3, [r2, #16]
 8005480:	e005      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005482:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	4a0a      	ldr	r2, [pc, #40]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005488:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800548c:	6113      	str	r3, [r2, #16]
 800548e:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005490:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800549a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549e:	4a04      	ldr	r2, [pc, #16]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a0:	430b      	orrs	r3, r1
 80054a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a4:	e00e      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80054ae:	e009      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80054b0:	58024400 	.word	0x58024400
 80054b4:	58024800 	.word	0x58024800
 80054b8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f002 0301 	and.w	r3, r2, #1
 80054d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f000 8089 	beq.w	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054ec:	2b28      	cmp	r3, #40	@ 0x28
 80054ee:	d86b      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80054f0:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	080055d1 	.word	0x080055d1
 80054fc:	080055c9 	.word	0x080055c9
 8005500:	080055c9 	.word	0x080055c9
 8005504:	080055c9 	.word	0x080055c9
 8005508:	080055c9 	.word	0x080055c9
 800550c:	080055c9 	.word	0x080055c9
 8005510:	080055c9 	.word	0x080055c9
 8005514:	080055c9 	.word	0x080055c9
 8005518:	0800559d 	.word	0x0800559d
 800551c:	080055c9 	.word	0x080055c9
 8005520:	080055c9 	.word	0x080055c9
 8005524:	080055c9 	.word	0x080055c9
 8005528:	080055c9 	.word	0x080055c9
 800552c:	080055c9 	.word	0x080055c9
 8005530:	080055c9 	.word	0x080055c9
 8005534:	080055c9 	.word	0x080055c9
 8005538:	080055b3 	.word	0x080055b3
 800553c:	080055c9 	.word	0x080055c9
 8005540:	080055c9 	.word	0x080055c9
 8005544:	080055c9 	.word	0x080055c9
 8005548:	080055c9 	.word	0x080055c9
 800554c:	080055c9 	.word	0x080055c9
 8005550:	080055c9 	.word	0x080055c9
 8005554:	080055c9 	.word	0x080055c9
 8005558:	080055d1 	.word	0x080055d1
 800555c:	080055c9 	.word	0x080055c9
 8005560:	080055c9 	.word	0x080055c9
 8005564:	080055c9 	.word	0x080055c9
 8005568:	080055c9 	.word	0x080055c9
 800556c:	080055c9 	.word	0x080055c9
 8005570:	080055c9 	.word	0x080055c9
 8005574:	080055c9 	.word	0x080055c9
 8005578:	080055d1 	.word	0x080055d1
 800557c:	080055c9 	.word	0x080055c9
 8005580:	080055c9 	.word	0x080055c9
 8005584:	080055c9 	.word	0x080055c9
 8005588:	080055c9 	.word	0x080055c9
 800558c:	080055c9 	.word	0x080055c9
 8005590:	080055c9 	.word	0x080055c9
 8005594:	080055c9 	.word	0x080055c9
 8005598:	080055d1 	.word	0x080055d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a0:	3308      	adds	r3, #8
 80055a2:	2101      	movs	r1, #1
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 ffc3 	bl	8006530 <RCCEx_PLL2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055b0:	e00f      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	3328      	adds	r3, #40	@ 0x28
 80055b8:	2101      	movs	r1, #1
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 f86a 	bl	8006694 <RCCEx_PLL3_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055c6:	e004      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055ce:	e000      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80055d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10a      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055da:	4bbf      	ldr	r3, [pc, #764]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055e8:	4abb      	ldr	r2, [pc, #748]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055ea:	430b      	orrs	r3, r1
 80055ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80055ee:	e003      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f002 0302 	and.w	r3, r2, #2
 8005604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005608:	2300      	movs	r3, #0
 800560a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800560e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d041      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800561e:	2b05      	cmp	r3, #5
 8005620:	d824      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005675 	.word	0x08005675
 800562c:	08005641 	.word	0x08005641
 8005630:	08005657 	.word	0x08005657
 8005634:	08005675 	.word	0x08005675
 8005638:	08005675 	.word	0x08005675
 800563c:	08005675 	.word	0x08005675
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005644:	3308      	adds	r3, #8
 8005646:	2101      	movs	r1, #1
 8005648:	4618      	mov	r0, r3
 800564a:	f000 ff71 	bl	8006530 <RCCEx_PLL2_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005654:	e00f      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	3328      	adds	r3, #40	@ 0x28
 800565c:	2101      	movs	r1, #1
 800565e:	4618      	mov	r0, r3
 8005660:	f001 f818 	bl	8006694 <RCCEx_PLL3_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800566a:	e004      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005672:	e000      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800567e:	4b96      	ldr	r3, [pc, #600]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005682:	f023 0107 	bic.w	r1, r3, #7
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800568c:	4a92      	ldr	r2, [pc, #584]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800568e:	430b      	orrs	r3, r1
 8005690:	6553      	str	r3, [r2, #84]	@ 0x54
 8005692:	e003      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f002 0304 	and.w	r3, r2, #4
 80056a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4313      	orrs	r3, r2
 80056ba:	d044      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d825      	bhi.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80056c8:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	0800571d 	.word	0x0800571d
 80056d4:	080056e9 	.word	0x080056e9
 80056d8:	080056ff 	.word	0x080056ff
 80056dc:	0800571d 	.word	0x0800571d
 80056e0:	0800571d 	.word	0x0800571d
 80056e4:	0800571d 	.word	0x0800571d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ec:	3308      	adds	r3, #8
 80056ee:	2101      	movs	r1, #1
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 ff1d 	bl	8006530 <RCCEx_PLL2_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056fc:	e00f      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005702:	3328      	adds	r3, #40	@ 0x28
 8005704:	2101      	movs	r1, #1
 8005706:	4618      	mov	r0, r3
 8005708:	f000 ffc4 	bl	8006694 <RCCEx_PLL3_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005712:	e004      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800571a:	e000      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800571c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005726:	4b6c      	ldr	r3, [pc, #432]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572a:	f023 0107 	bic.w	r1, r3, #7
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005736:	4a68      	ldr	r2, [pc, #416]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005738:	430b      	orrs	r3, r1
 800573a:	6593      	str	r3, [r2, #88]	@ 0x58
 800573c:	e003      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f002 0320 	and.w	r3, r2, #32
 8005752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005756:	2300      	movs	r3, #0
 8005758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800575c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005760:	460b      	mov	r3, r1
 8005762:	4313      	orrs	r3, r2
 8005764:	d055      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005772:	d033      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005778:	d82c      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577e:	d02f      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005784:	d826      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005786:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800578a:	d02b      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800578c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005790:	d820      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005796:	d012      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800579c:	d81a      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d022      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80057a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057a6:	d115      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ac:	3308      	adds	r3, #8
 80057ae:	2100      	movs	r1, #0
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 febd 	bl	8006530 <RCCEx_PLL2_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80057bc:	e015      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c2:	3328      	adds	r3, #40	@ 0x28
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 ff64 	bl	8006694 <RCCEx_PLL3_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80057d2:	e00a      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057da:	e006      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057dc:	bf00      	nop
 80057de:	e004      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057e0:	bf00      	nop
 80057e2:	e002      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057e4:	bf00      	nop
 80057e6:	e000      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057f2:	4b39      	ldr	r3, [pc, #228]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005802:	4a35      	ldr	r2, [pc, #212]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005804:	430b      	orrs	r3, r1
 8005806:	6553      	str	r3, [r2, #84]	@ 0x54
 8005808:	e003      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800581e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005822:	2300      	movs	r3, #0
 8005824:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005828:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d058      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800583a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800583e:	d033      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005840:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005844:	d82c      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584a:	d02f      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005850:	d826      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005852:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005856:	d02b      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005858:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800585c:	d820      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800585e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005862:	d012      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005868:	d81a      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d022      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005872:	d115      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005878:	3308      	adds	r3, #8
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fe57 	bl	8006530 <RCCEx_PLL2_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005888:	e015      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588e:	3328      	adds	r3, #40	@ 0x28
 8005890:	2102      	movs	r1, #2
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fefe 	bl	8006694 <RCCEx_PLL3_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800589e:	e00a      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a6:	e006      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058a8:	bf00      	nop
 80058aa:	e004      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058ac:	bf00      	nop
 80058ae:	e002      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10e      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058be:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058ce:	4a02      	ldr	r2, [pc, #8]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058d0:	430b      	orrs	r3, r1
 80058d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d4:	e006      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80058d6:	bf00      	nop
 80058d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80058f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d055      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005908:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800590c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005910:	d033      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005912:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005916:	d82c      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800591c:	d02f      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800591e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005922:	d826      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005924:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005928:	d02b      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800592a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800592e:	d820      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005934:	d012      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800593a:	d81a      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d022      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005944:	d115      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	3308      	adds	r3, #8
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fdee 	bl	8006530 <RCCEx_PLL2_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800595a:	e015      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	3328      	adds	r3, #40	@ 0x28
 8005962:	2102      	movs	r1, #2
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fe95 	bl	8006694 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005970:	e00a      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005978:	e006      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800597a:	bf00      	nop
 800597c:	e004      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800597e:	bf00      	nop
 8005980:	e002      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005982:	bf00      	nop
 8005984:	e000      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10b      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005990:	4ba1      	ldr	r3, [pc, #644]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005994:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059a0:	4a9d      	ldr	r2, [pc, #628]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a6:	e003      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f002 0308 	and.w	r3, r2, #8
 80059bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059c0:	2300      	movs	r3, #0
 80059c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80059ca:	460b      	mov	r3, r1
 80059cc:	4313      	orrs	r3, r2
 80059ce:	d01e      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80059d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e2:	3328      	adds	r3, #40	@ 0x28
 80059e4:	2102      	movs	r1, #2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fe54 	bl	8006694 <RCCEx_PLL3_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059f8:	4b87      	ldr	r3, [pc, #540]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a08:	4a83      	ldr	r2, [pc, #524]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f002 0310 	and.w	r3, r2, #16
 8005a1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a24:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d01e      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a3a:	d10c      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a40:	3328      	adds	r3, #40	@ 0x28
 8005a42:	2102      	movs	r1, #2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fe25 	bl	8006694 <RCCEx_PLL3_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a56:	4b70      	ldr	r3, [pc, #448]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a66:	4a6c      	ldr	r2, [pc, #432]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d03e      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a98:	d022      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a9e:	d81b      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa8:	d00b      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005aaa:	e015      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fd3b 	bl	8006530 <RCCEx_PLL2_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ac0:	e00f      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac6:	3328      	adds	r3, #40	@ 0x28
 8005ac8:	2102      	movs	r1, #2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fde2 	bl	8006694 <RCCEx_PLL3_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ad6:	e004      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ade:	e000      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aea:	4b4b      	ldr	r3, [pc, #300]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005afa:	4a47      	ldr	r2, [pc, #284]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b00:	e003      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b18:	2300      	movs	r3, #0
 8005b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b1c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005b20:	460b      	mov	r3, r1
 8005b22:	4313      	orrs	r3, r2
 8005b24:	d03b      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b32:	d01f      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005b34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b38:	d818      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3e:	d003      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005b40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b44:	d007      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005b46:	e011      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b48:	4b33      	ldr	r3, [pc, #204]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	4a32      	ldr	r2, [pc, #200]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b54:	e00f      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5a:	3328      	adds	r3, #40	@ 0x28
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fd98 	bl	8006694 <RCCEx_PLL3_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b6a:	e004      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b72:	e000      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b7e:	4b26      	ldr	r3, [pc, #152]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8e:	4a22      	ldr	r2, [pc, #136]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b94:	e003      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005baa:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bac:	2300      	movs	r3, #0
 8005bae:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bb0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	d034      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc8:	d007      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005bca:	e011      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bcc:	4b12      	ldr	r3, [pc, #72]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	4a11      	ldr	r2, [pc, #68]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005bd8:	e00e      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bde:	3308      	adds	r3, #8
 8005be0:	2102      	movs	r1, #2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fca4 	bl	8006530 <RCCEx_PLL2_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005bee:	e003      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10d      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c00:	4b05      	ldr	r3, [pc, #20]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0e:	4a02      	ldr	r2, [pc, #8]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c10:	430b      	orrs	r3, r1
 8005c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c14:	e006      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005c16:	bf00      	nop
 8005c18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c32:	2300      	movs	r3, #0
 8005c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c36:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	d00c      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c44:	3328      	adds	r3, #40	@ 0x28
 8005c46:	2102      	movs	r1, #2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fd23 	bl	8006694 <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c68:	2300      	movs	r3, #0
 8005c6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c6c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005c70:	460b      	mov	r3, r1
 8005c72:	4313      	orrs	r3, r2
 8005c74:	d038      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c82:	d018      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c88:	d811      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c8e:	d014      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c94:	d80b      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d011      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c9e:	d106      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca0:	4bc3      	ldr	r3, [pc, #780]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	4ac2      	ldr	r2, [pc, #776]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005cac:	e008      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb4:	e004      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005cb6:	bf00      	nop
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005cba:	bf00      	nop
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cc8:	4bb9      	ldr	r3, [pc, #740]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ccc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cd8:	4ab5      	ldr	r2, [pc, #724]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cde:	e003      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cfa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4313      	orrs	r3, r2
 8005d02:	d009      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d04:	4baa      	ldr	r3, [pc, #680]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d12:	4aa7      	ldr	r2, [pc, #668]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005d24:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d26:	2300      	movs	r3, #0
 8005d28:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d2a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4313      	orrs	r3, r2
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d34:	4b9e      	ldr	r3, [pc, #632]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d44:	4a9a      	ldr	r2, [pc, #616]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d46:	430b      	orrs	r3, r1
 8005d48:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d58:	2300      	movs	r3, #0
 8005d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d5c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d60:	460b      	mov	r3, r1
 8005d62:	4313      	orrs	r3, r2
 8005d64:	d009      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d66:	4b92      	ldr	r3, [pc, #584]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d74:	4a8e      	ldr	r2, [pc, #568]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d88:	2300      	movs	r3, #0
 8005d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d8c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d90:	460b      	mov	r3, r1
 8005d92:	4313      	orrs	r3, r2
 8005d94:	d00e      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d96:	4b86      	ldr	r3, [pc, #536]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	4a85      	ldr	r2, [pc, #532]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005da0:	6113      	str	r3, [r2, #16]
 8005da2:	4b83      	ldr	r3, [pc, #524]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005da4:	6919      	ldr	r1, [r3, #16]
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005dae:	4a80      	ldr	r2, [pc, #512]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dc6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	d009      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005dd0:	4b77      	ldr	r3, [pc, #476]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	4a74      	ldr	r2, [pc, #464]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005de0:	430b      	orrs	r3, r1
 8005de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005df2:	2300      	movs	r3, #0
 8005df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e00:	4b6b      	ldr	r3, [pc, #428]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e04:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e10:	4a67      	ldr	r2, [pc, #412]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e12:	430b      	orrs	r3, r1
 8005e14:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	2100      	movs	r1, #0
 8005e20:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	d011      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e36:	3308      	adds	r3, #8
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fb78 	bl	8006530 <RCCEx_PLL2_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	2100      	movs	r1, #0
 8005e60:	6239      	str	r1, [r7, #32]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	d011      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e76:	3308      	adds	r3, #8
 8005e78:	2101      	movs	r1, #1
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fb58 	bl	8006530 <RCCEx_PLL2_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	61b9      	str	r1, [r7, #24]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005eac:	460b      	mov	r3, r1
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	d011      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	2102      	movs	r1, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fb38 	bl	8006530 <RCCEx_PLL2_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	2100      	movs	r1, #0
 8005ee0:	6139      	str	r1, [r7, #16]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005eec:	460b      	mov	r3, r1
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	d011      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	3328      	adds	r3, #40	@ 0x28
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fbca 	bl	8006694 <RCCEx_PLL3_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	2100      	movs	r1, #0
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	d011      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	3328      	adds	r3, #40	@ 0x28
 8005f38:	2101      	movs	r1, #1
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fbaa 	bl	8006694 <RCCEx_PLL3_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6039      	str	r1, [r7, #0]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	d011      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f76:	3328      	adds	r3, #40	@ 0x28
 8005f78:	2102      	movs	r1, #2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fb8a 	bl	8006694 <RCCEx_PLL3_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005f96:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005faa:	46bd      	mov	sp, r7
 8005fac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb0:	58024400 	.word	0x58024400

08005fb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fb8:	f7fe fd96 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4904      	ldr	r1, [pc, #16]	@ (8005fdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	0800e124 	.word	0x0800e124

08005fe0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	@ 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe8:	4ba1      	ldr	r3, [pc, #644]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff6:	0b1b      	lsrs	r3, r3, #12
 8005ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ffc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ffe:	4b9c      	ldr	r3, [pc, #624]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800600a:	4b99      	ldr	r3, [pc, #612]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800600c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600e:	08db      	lsrs	r3, r3, #3
 8006010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8111 	beq.w	8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b02      	cmp	r3, #2
 8006032:	f000 8083 	beq.w	800613c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b02      	cmp	r3, #2
 800603a:	f200 80a1 	bhi.w	8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d056      	beq.n	80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800604a:	e099      	b.n	8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800604c:	4b88      	ldr	r3, [pc, #544]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d02d      	beq.n	80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006058:	4b85      	ldr	r3, [pc, #532]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	08db      	lsrs	r3, r3, #3
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	4a84      	ldr	r2, [pc, #528]	@ (8006274 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
 8006068:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006082:	4b7b      	ldr	r3, [pc, #492]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006092:	ed97 6a03 	vldr	s12, [r7, #12]
 8006096:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800609a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060b2:	e087      	b.n	80061c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800627c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f6:	e065      	b.n	80061c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006102:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610a:	4b59      	ldr	r3, [pc, #356]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	ed97 6a03 	vldr	s12, [r7, #12]
 800611e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800613a:	e043      	b.n	80061c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800614a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614e:	4b48      	ldr	r3, [pc, #288]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006162:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800617e:	e021      	b.n	80061c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800618e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006192:	4b37      	ldr	r3, [pc, #220]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c8:	0a5b      	lsrs	r3, r3, #9
 80061ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061de:	edd7 6a07 	vldr	s13, [r7, #28]
 80061e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ea:	ee17 2a90 	vmov	r2, s15
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f6:	0c1b      	lsrs	r3, r3, #16
 80061f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006204:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800620c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006218:	ee17 2a90 	vmov	r2, s15
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006220:	4b13      	ldr	r3, [pc, #76]	@ (8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006224:	0e1b      	lsrs	r3, r3, #24
 8006226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800623a:	edd7 6a07 	vldr	s13, [r7, #28]
 800623e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006246:	ee17 2a90 	vmov	r2, s15
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800624e:	e008      	b.n	8006262 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	609a      	str	r2, [r3, #8]
}
 8006262:	bf00      	nop
 8006264:	3724      	adds	r7, #36	@ 0x24
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	58024400 	.word	0x58024400
 8006274:	03d09000 	.word	0x03d09000
 8006278:	46000000 	.word	0x46000000
 800627c:	4c742400 	.word	0x4c742400
 8006280:	4a742400 	.word	0x4a742400
 8006284:	4af42400 	.word	0x4af42400

08006288 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006288:	b480      	push	{r7}
 800628a:	b089      	sub	sp, #36	@ 0x24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006290:	4ba1      	ldr	r3, [pc, #644]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800629a:	4b9f      	ldr	r3, [pc, #636]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800629c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629e:	0d1b      	lsrs	r3, r3, #20
 80062a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062a6:	4b9c      	ldr	r3, [pc, #624]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062b2:	4b99      	ldr	r3, [pc, #612]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b6:	08db      	lsrs	r3, r3, #3
 80062b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8111 	beq.w	80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	f000 8083 	beq.w	80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	f200 80a1 	bhi.w	8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d056      	beq.n	80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062f2:	e099      	b.n	8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f4:	4b88      	ldr	r3, [pc, #544]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d02d      	beq.n	800635c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006300:	4b85      	ldr	r3, [pc, #532]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	4a84      	ldr	r2, [pc, #528]	@ (800651c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	ee07 3a90 	vmov	s15, r3
 8006318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632a:	4b7b      	ldr	r3, [pc, #492]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800632c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633a:	ed97 6a03 	vldr	s12, [r7, #12]
 800633e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800634e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006356:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800635a:	e087      	b.n	800646c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006366:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800636a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636e:	4b6a      	ldr	r3, [pc, #424]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006382:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800639e:	e065      	b.n	800646c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b2:	4b59      	ldr	r3, [pc, #356]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e2:	e043      	b.n	800646c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800652c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f6:	4b48      	ldr	r3, [pc, #288]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006406:	ed97 6a03 	vldr	s12, [r7, #12]
 800640a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800640e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800641a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006426:	e021      	b.n	800646c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643a:	4b37      	ldr	r3, [pc, #220]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	ed97 6a03 	vldr	s12, [r7, #12]
 800644e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800646a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800646c:	4b2a      	ldr	r3, [pc, #168]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800646e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006470:	0a5b      	lsrs	r3, r3, #9
 8006472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006486:	edd7 6a07 	vldr	s13, [r7, #28]
 800648a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006492:	ee17 2a90 	vmov	r2, s15
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800649a:	4b1f      	ldr	r3, [pc, #124]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	0c1b      	lsrs	r3, r3, #16
 80064a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c0:	ee17 2a90 	vmov	r2, s15
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80064c8:	4b13      	ldr	r3, [pc, #76]	@ (8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064cc:	0e1b      	lsrs	r3, r3, #24
 80064ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ee:	ee17 2a90 	vmov	r2, s15
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064f6:	e008      	b.n	800650a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	609a      	str	r2, [r3, #8]
}
 800650a:	bf00      	nop
 800650c:	3724      	adds	r7, #36	@ 0x24
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	58024400 	.word	0x58024400
 800651c:	03d09000 	.word	0x03d09000
 8006520:	46000000 	.word	0x46000000
 8006524:	4c742400 	.word	0x4c742400
 8006528:	4a742400 	.word	0x4a742400
 800652c:	4af42400 	.word	0x4af42400

08006530 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800653e:	4b53      	ldr	r3, [pc, #332]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b03      	cmp	r3, #3
 8006548:	d101      	bne.n	800654e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e099      	b.n	8006682 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800654e:	4b4f      	ldr	r3, [pc, #316]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a4e      	ldr	r2, [pc, #312]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006554:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655a:	f7fc fc65 	bl	8002e28 <HAL_GetTick>
 800655e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006560:	e008      	b.n	8006574 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006562:	f7fc fc61 	bl	8002e28 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e086      	b.n	8006682 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006574:	4b45      	ldr	r3, [pc, #276]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1f0      	bne.n	8006562 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006580:	4b42      	ldr	r3, [pc, #264]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006584:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	031b      	lsls	r3, r3, #12
 800658e:	493f      	ldr	r1, [pc, #252]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006590:	4313      	orrs	r3, r2
 8006592:	628b      	str	r3, [r1, #40]	@ 0x28
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	3b01      	subs	r3, #1
 800659a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	025b      	lsls	r3, r3, #9
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	041b      	lsls	r3, r3, #16
 80065b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	3b01      	subs	r3, #1
 80065be:	061b      	lsls	r3, r3, #24
 80065c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065c4:	4931      	ldr	r1, [pc, #196]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065ca:	4b30      	ldr	r3, [pc, #192]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	492d      	ldr	r1, [pc, #180]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065dc:	4b2b      	ldr	r3, [pc, #172]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	f023 0220 	bic.w	r2, r3, #32
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	4928      	ldr	r1, [pc, #160]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80065ee:	4b27      	ldr	r3, [pc, #156]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 80065f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f2:	4a26      	ldr	r2, [pc, #152]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 80065f4:	f023 0310 	bic.w	r3, r3, #16
 80065f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065fa:	4b24      	ldr	r3, [pc, #144]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 80065fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065fe:	4b24      	ldr	r3, [pc, #144]	@ (8006690 <RCCEx_PLL2_Config+0x160>)
 8006600:	4013      	ands	r3, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	69d2      	ldr	r2, [r2, #28]
 8006606:	00d2      	lsls	r2, r2, #3
 8006608:	4920      	ldr	r1, [pc, #128]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800660e:	4b1f      	ldr	r3, [pc, #124]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	4a1e      	ldr	r2, [pc, #120]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006614:	f043 0310 	orr.w	r3, r3, #16
 8006618:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006620:	4b1a      	ldr	r3, [pc, #104]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	4a19      	ldr	r2, [pc, #100]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006626:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800662a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800662c:	e00f      	b.n	800664e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006634:	4b15      	ldr	r3, [pc, #84]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	4a14      	ldr	r2, [pc, #80]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 800663a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800663e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006640:	e005      	b.n	800664e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006642:	4b12      	ldr	r3, [pc, #72]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006646:	4a11      	ldr	r2, [pc, #68]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006648:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800664c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800664e:	4b0f      	ldr	r3, [pc, #60]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a0e      	ldr	r2, [pc, #56]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006654:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665a:	f7fc fbe5 	bl	8002e28 <HAL_GetTick>
 800665e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006660:	e008      	b.n	8006674 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006662:	f7fc fbe1 	bl	8002e28 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e006      	b.n	8006682 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006674:	4b05      	ldr	r3, [pc, #20]	@ (800668c <RCCEx_PLL2_Config+0x15c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f0      	beq.n	8006662 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	58024400 	.word	0x58024400
 8006690:	ffff0007 	.word	0xffff0007

08006694 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066a2:	4b53      	ldr	r3, [pc, #332]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80066a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d101      	bne.n	80066b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e099      	b.n	80067e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066b2:	4b4f      	ldr	r3, [pc, #316]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a4e      	ldr	r2, [pc, #312]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80066b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066be:	f7fc fbb3 	bl	8002e28 <HAL_GetTick>
 80066c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066c4:	e008      	b.n	80066d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066c6:	f7fc fbaf 	bl	8002e28 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e086      	b.n	80067e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066d8:	4b45      	ldr	r3, [pc, #276]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f0      	bne.n	80066c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066e4:	4b42      	ldr	r3, [pc, #264]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	051b      	lsls	r3, r3, #20
 80066f2:	493f      	ldr	r1, [pc, #252]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	3b01      	subs	r3, #1
 8006708:	025b      	lsls	r3, r3, #9
 800670a:	b29b      	uxth	r3, r3
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	3b01      	subs	r3, #1
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	3b01      	subs	r3, #1
 8006722:	061b      	lsls	r3, r3, #24
 8006724:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006728:	4931      	ldr	r1, [pc, #196]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 800672a:	4313      	orrs	r3, r2
 800672c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800672e:	4b30      	ldr	r3, [pc, #192]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	492d      	ldr	r1, [pc, #180]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 800673c:	4313      	orrs	r3, r2
 800673e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006740:	4b2b      	ldr	r3, [pc, #172]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	4928      	ldr	r1, [pc, #160]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 800674e:	4313      	orrs	r3, r2
 8006750:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006752:	4b27      	ldr	r3, [pc, #156]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 8006754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006756:	4a26      	ldr	r2, [pc, #152]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 8006758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800675c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800675e:	4b24      	ldr	r3, [pc, #144]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 8006760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006762:	4b24      	ldr	r3, [pc, #144]	@ (80067f4 <RCCEx_PLL3_Config+0x160>)
 8006764:	4013      	ands	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	69d2      	ldr	r2, [r2, #28]
 800676a:	00d2      	lsls	r2, r2, #3
 800676c:	4920      	ldr	r1, [pc, #128]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 800676e:	4313      	orrs	r3, r2
 8006770:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006772:	4b1f      	ldr	r3, [pc, #124]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	4a1e      	ldr	r2, [pc, #120]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 8006778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800677c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006784:	4b1a      	ldr	r3, [pc, #104]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	4a19      	ldr	r2, [pc, #100]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 800678a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800678e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006790:	e00f      	b.n	80067b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d106      	bne.n	80067a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006798:	4b15      	ldr	r3, [pc, #84]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	4a14      	ldr	r2, [pc, #80]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 800679e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067a4:	e005      	b.n	80067b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067a6:	4b12      	ldr	r3, [pc, #72]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80067a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067aa:	4a11      	ldr	r2, [pc, #68]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80067ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067b2:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a0e      	ldr	r2, [pc, #56]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80067b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067be:	f7fc fb33 	bl	8002e28 <HAL_GetTick>
 80067c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067c4:	e008      	b.n	80067d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067c6:	f7fc fb2f 	bl	8002e28 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e006      	b.n	80067e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067d8:	4b05      	ldr	r3, [pc, #20]	@ (80067f0 <RCCEx_PLL3_Config+0x15c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	58024400 	.word	0x58024400
 80067f4:	ffff0007 	.word	0xffff0007

080067f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e10f      	b.n	8006a2a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a87      	ldr	r2, [pc, #540]	@ (8006a34 <HAL_SPI_Init+0x23c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00f      	beq.n	800683a <HAL_SPI_Init+0x42>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a86      	ldr	r2, [pc, #536]	@ (8006a38 <HAL_SPI_Init+0x240>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00a      	beq.n	800683a <HAL_SPI_Init+0x42>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a84      	ldr	r2, [pc, #528]	@ (8006a3c <HAL_SPI_Init+0x244>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d005      	beq.n	800683a <HAL_SPI_Init+0x42>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d901      	bls.n	800683a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0f7      	b.n	8006a2a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fe2e 	bl	800749c <SPI_GetPacketSize>
 8006840:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a7b      	ldr	r2, [pc, #492]	@ (8006a34 <HAL_SPI_Init+0x23c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00c      	beq.n	8006866 <HAL_SPI_Init+0x6e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a79      	ldr	r2, [pc, #484]	@ (8006a38 <HAL_SPI_Init+0x240>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <HAL_SPI_Init+0x6e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a78      	ldr	r2, [pc, #480]	@ (8006a3c <HAL_SPI_Init+0x244>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d002      	beq.n	8006866 <HAL_SPI_Init+0x6e>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b08      	cmp	r3, #8
 8006864:	d811      	bhi.n	800688a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800686a:	4a72      	ldr	r2, [pc, #456]	@ (8006a34 <HAL_SPI_Init+0x23c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a70      	ldr	r2, [pc, #448]	@ (8006a38 <HAL_SPI_Init+0x240>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_SPI_Init+0x8c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a6f      	ldr	r2, [pc, #444]	@ (8006a3c <HAL_SPI_Init+0x244>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d104      	bne.n	800688e <HAL_SPI_Init+0x96>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b10      	cmp	r3, #16
 8006888:	d901      	bls.n	800688e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0cd      	b.n	8006a2a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fb ffaa 	bl	80027fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0201 	bic.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80068ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068d4:	d119      	bne.n	800690a <HAL_SPI_Init+0x112>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068de:	d103      	bne.n	80068e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10c      	bne.n	800690a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80068f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f8:	d107      	bne.n	800690a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006908:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00f      	beq.n	8006936 <HAL_SPI_Init+0x13e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2b06      	cmp	r3, #6
 800691c:	d90b      	bls.n	8006936 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e007      	b.n	8006946 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006944:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69da      	ldr	r2, [r3, #28]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694e:	431a      	orrs	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006958:	ea42 0103 	orr.w	r1, r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	431a      	orrs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069a6:	ea42 0103 	orr.w	r1, r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d113      	bne.n	80069e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80069e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40013000 	.word	0x40013000
 8006a38:	40003800 	.word	0x40003800
 8006a3c:	40003c00 	.word	0x40003c00

08006a40 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3320      	adds	r3, #32
 8006a56:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a58:	f7fc f9e6 	bl	8002e28 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d001      	beq.n	8006a6e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e1d1      	b.n	8006e12 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_SPI_Transmit+0x3a>
 8006a74:	88fb      	ldrh	r3, [r7, #6]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e1c9      	b.n	8006e12 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_SPI_Transmit+0x4c>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e1c2      	b.n	8006e12 <HAL_SPI_Transmit+0x3d2>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2203      	movs	r2, #3
 8006a98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	88fa      	ldrh	r2, [r7, #6]
 8006ab6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006ae4:	d108      	bne.n	8006af8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e009      	b.n	8006b0c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006b0a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	4b96      	ldr	r3, [pc, #600]	@ (8006d6c <HAL_SPI_Transmit+0x32c>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	88f9      	ldrh	r1, [r7, #6]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b38:	d107      	bne.n	8006b4a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	d947      	bls.n	8006be2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006b52:	e03f      	b.n	8006bd4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d114      	bne.n	8006b8c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b72:	1d1a      	adds	r2, r3, #4
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b8a:	e023      	b.n	8006bd4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8c:	f7fc f94c 	bl	8002e28 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d803      	bhi.n	8006ba4 <HAL_SPI_Transmit+0x164>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d102      	bne.n	8006baa <HAL_SPI_Transmit+0x16a>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d114      	bne.n	8006bd4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fba8 	bl	8007300 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e11e      	b.n	8006e12 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1b9      	bne.n	8006b54 <HAL_SPI_Transmit+0x114>
 8006be0:	e0f1      	b.n	8006dc6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b07      	cmp	r3, #7
 8006be8:	f240 80e6 	bls.w	8006db8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006bec:	e05d      	b.n	8006caa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d132      	bne.n	8006c62 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d918      	bls.n	8006c3a <HAL_SPI_Transmit+0x1fa>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d014      	beq.n	8006c3a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b02      	subs	r3, #2
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006c38:	e037      	b.n	8006caa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c3e:	881a      	ldrh	r2, [r3, #0]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006c60:	e023      	b.n	8006caa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c62:	f7fc f8e1 	bl	8002e28 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d803      	bhi.n	8006c7a <HAL_SPI_Transmit+0x23a>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d102      	bne.n	8006c80 <HAL_SPI_Transmit+0x240>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d114      	bne.n	8006caa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fb3d 	bl	8007300 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e0b3      	b.n	8006e12 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d19b      	bne.n	8006bee <HAL_SPI_Transmit+0x1ae>
 8006cb6:	e086      	b.n	8006dc6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d154      	bne.n	8006d70 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d918      	bls.n	8006d04 <HAL_SPI_Transmit+0x2c4>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd6:	2b40      	cmp	r3, #64	@ 0x40
 8006cd8:	d914      	bls.n	8006d04 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d02:	e059      	b.n	8006db8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d917      	bls.n	8006d40 <HAL_SPI_Transmit+0x300>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d013      	beq.n	8006d40 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d1c:	881a      	ldrh	r2, [r3, #0]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d26:	1c9a      	adds	r2, r3, #2
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b02      	subs	r3, #2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d3e:	e03b      	b.n	8006db8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3320      	adds	r3, #32
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d6a:	e025      	b.n	8006db8 <HAL_SPI_Transmit+0x378>
 8006d6c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d70:	f7fc f85a 	bl	8002e28 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d803      	bhi.n	8006d88 <HAL_SPI_Transmit+0x348>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d102      	bne.n	8006d8e <HAL_SPI_Transmit+0x34e>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d114      	bne.n	8006db8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fab6 	bl	8007300 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e02c      	b.n	8006e12 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f47f af79 	bne.w	8006cb8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2108      	movs	r1, #8
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fb35 	bl	8007440 <SPI_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de2:	f043 0220 	orr.w	r2, r3, #32
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fa87 	bl	8007300 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
  }
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop

08006e1c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3301      	adds	r3, #1
 8006e36:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3330      	adds	r3, #48	@ 0x30
 8006e3e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e40:	f7fb fff2 	bl	8002e28 <HAL_GetTick>
 8006e44:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d001      	beq.n	8006e56 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006e52:	2302      	movs	r3, #2
 8006e54:	e250      	b.n	80072f8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Receive+0x46>
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e248      	b.n	80072f8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_SPI_Receive+0x58>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e241      	b.n	80072f8 <HAL_SPI_Receive+0x4dc>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	88fa      	ldrh	r2, [r7, #6]
 8006e96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006ecc:	d108      	bne.n	8006ee0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e009      	b.n	8006ef4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006ef2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	4b95      	ldr	r3, [pc, #596]	@ (8007150 <HAL_SPI_Receive+0x334>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	88f9      	ldrh	r1, [r7, #6]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f20:	d107      	bne.n	8006f32 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	d96c      	bls.n	8007014 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006f3a:	e064      	b.n	8007006 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d114      	bne.n	8006f7c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f5c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006f7a:	e044      	b.n	8007006 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8bfa      	ldrh	r2, [r7, #30]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d919      	bls.n	8006fbe <HAL_SPI_Receive+0x1a2>
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d014      	beq.n	8006fbe <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f9e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fa4:	1d1a      	adds	r2, r3, #4
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006fbc:	e023      	b.n	8007006 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fbe:	f7fb ff33 	bl	8002e28 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d803      	bhi.n	8006fd6 <HAL_SPI_Receive+0x1ba>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d102      	bne.n	8006fdc <HAL_SPI_Receive+0x1c0>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d114      	bne.n	8007006 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f98f 	bl	8007300 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fe8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e178      	b.n	80072f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d194      	bne.n	8006f3c <HAL_SPI_Receive+0x120>
 8007012:	e15e      	b.n	80072d2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2b07      	cmp	r3, #7
 800701a:	f240 8153 	bls.w	80072c4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800701e:	e08f      	b.n	8007140 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b01      	cmp	r3, #1
 8007034:	d114      	bne.n	8007060 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	8812      	ldrh	r2, [r2, #0]
 800703e:	b292      	uxth	r2, r2
 8007040:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007046:	1c9a      	adds	r2, r3, #2
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800705e:	e06f      	b.n	8007140 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007066:	b29b      	uxth	r3, r3
 8007068:	8bfa      	ldrh	r2, [r7, #30]
 800706a:	429a      	cmp	r2, r3
 800706c:	d924      	bls.n	80070b8 <HAL_SPI_Receive+0x29c>
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	8812      	ldrh	r2, [r2, #0]
 8007080:	b292      	uxth	r2, r2
 8007082:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007088:	1c9a      	adds	r2, r3, #2
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	8812      	ldrh	r2, [r2, #0]
 8007096:	b292      	uxth	r2, r2
 8007098:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800709e:	1c9a      	adds	r2, r3, #2
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	3b02      	subs	r3, #2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80070b6:	e043      	b.n	8007140 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d119      	bne.n	80070f8 <HAL_SPI_Receive+0x2dc>
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d014      	beq.n	80070f8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	8812      	ldrh	r2, [r2, #0]
 80070d6:	b292      	uxth	r2, r2
 80070d8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070de:	1c9a      	adds	r2, r3, #2
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80070f6:	e023      	b.n	8007140 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f8:	f7fb fe96 	bl	8002e28 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d803      	bhi.n	8007110 <HAL_SPI_Receive+0x2f4>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d102      	bne.n	8007116 <HAL_SPI_Receive+0x2fa>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d114      	bne.n	8007140 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f8f2 	bl	8007300 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007122:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e0db      	b.n	80072f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	f47f af69 	bne.w	8007020 <HAL_SPI_Receive+0x204>
 800714e:	e0c0      	b.n	80072d2 <HAL_SPI_Receive+0x4b6>
 8007150:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b01      	cmp	r3, #1
 8007168:	d117      	bne.n	800719a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007198:	e094      	b.n	80072c4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8bfa      	ldrh	r2, [r7, #30]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d946      	bls.n	8007236 <HAL_SPI_Receive+0x41a>
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d041      	beq.n	8007236 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f6:	7812      	ldrb	r2, [r2, #0]
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b04      	subs	r3, #4
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007234:	e046      	b.n	80072c4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d81c      	bhi.n	800727c <HAL_SPI_Receive+0x460>
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d017      	beq.n	800727c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007258:	7812      	ldrb	r2, [r2, #0]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800727a:	e023      	b.n	80072c4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800727c:	f7fb fdd4 	bl	8002e28 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d803      	bhi.n	8007294 <HAL_SPI_Receive+0x478>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d102      	bne.n	800729a <HAL_SPI_Receive+0x47e>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d114      	bne.n	80072c4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f830 	bl	8007300 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e019      	b.n	80072f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f47f af41 	bne.w	8007154 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f814 	bl	8007300 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80072f6:	2300      	movs	r3, #0
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0208 	orr.w	r2, r2, #8
 800731e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0210 	orr.w	r2, r2, #16
 800732e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6919      	ldr	r1, [r3, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b3c      	ldr	r3, [pc, #240]	@ (800743c <SPI_CloseTransfer+0x13c>)
 800734c:	400b      	ands	r3, r1
 800734e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800735e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b04      	cmp	r3, #4
 800736a:	d014      	beq.n	8007396 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00f      	beq.n	8007396 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800737c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0220 	orr.w	r2, r2, #32
 8007394:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d014      	beq.n	80073cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00f      	beq.n	80073cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00f      	beq.n	80073f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073dc:	f043 0201 	orr.w	r2, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00f      	beq.n	8007420 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007406:	f043 0208 	orr.w	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800741e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	fffffc90 	.word	0xfffffc90

08007440 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007450:	e010      	b.n	8007474 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007452:	f7fb fce9 	bl	8002e28 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d803      	bhi.n	800746a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d102      	bne.n	8007470 <SPI_WaitOnFlagUntilTimeout+0x30>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e00f      	b.n	8007494 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695a      	ldr	r2, [r3, #20]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4013      	ands	r3, r2
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	429a      	cmp	r2, r3
 8007482:	bf0c      	ite	eq
 8007484:	2301      	moveq	r3, #1
 8007486:	2300      	movne	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	461a      	mov	r2, r3
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	429a      	cmp	r2, r3
 8007490:	d0df      	beq.n	8007452 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	3301      	adds	r3, #1
 80074b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	3307      	adds	r3, #7
 80074ba:	08db      	lsrs	r3, r3, #3
 80074bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e049      	b.n	8007578 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7fb f9e7 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	4619      	mov	r1, r3
 8007510:	4610      	mov	r0, r2
 8007512:	f000 fab9 	bl	8007a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e049      	b.n	8007626 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f841 	bl	800762e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 fa62 	bl	8007a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <HAL_TIM_PWM_Start+0x24>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b01      	cmp	r3, #1
 800765e:	bf14      	ite	ne
 8007660:	2301      	movne	r3, #1
 8007662:	2300      	moveq	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	e03c      	b.n	80076e2 <HAL_TIM_PWM_Start+0x9e>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b04      	cmp	r3, #4
 800766c:	d109      	bne.n	8007682 <HAL_TIM_PWM_Start+0x3e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b01      	cmp	r3, #1
 8007678:	bf14      	ite	ne
 800767a:	2301      	movne	r3, #1
 800767c:	2300      	moveq	r3, #0
 800767e:	b2db      	uxtb	r3, r3
 8007680:	e02f      	b.n	80076e2 <HAL_TIM_PWM_Start+0x9e>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b08      	cmp	r3, #8
 8007686:	d109      	bne.n	800769c <HAL_TIM_PWM_Start+0x58>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	bf14      	ite	ne
 8007694:	2301      	movne	r3, #1
 8007696:	2300      	moveq	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	e022      	b.n	80076e2 <HAL_TIM_PWM_Start+0x9e>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b0c      	cmp	r3, #12
 80076a0:	d109      	bne.n	80076b6 <HAL_TIM_PWM_Start+0x72>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	bf14      	ite	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	2300      	moveq	r3, #0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	e015      	b.n	80076e2 <HAL_TIM_PWM_Start+0x9e>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d109      	bne.n	80076d0 <HAL_TIM_PWM_Start+0x8c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	bf14      	ite	ne
 80076c8:	2301      	movne	r3, #1
 80076ca:	2300      	moveq	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	e008      	b.n	80076e2 <HAL_TIM_PWM_Start+0x9e>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	bf14      	ite	ne
 80076dc:	2301      	movne	r3, #1
 80076de:	2300      	moveq	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e0a1      	b.n	800782e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_PWM_Start+0xb6>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076f8:	e023      	b.n	8007742 <HAL_TIM_PWM_Start+0xfe>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start+0xc6>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007708:	e01b      	b.n	8007742 <HAL_TIM_PWM_Start+0xfe>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b08      	cmp	r3, #8
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0xd6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007718:	e013      	b.n	8007742 <HAL_TIM_PWM_Start+0xfe>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b0c      	cmp	r3, #12
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start+0xe6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007728:	e00b      	b.n	8007742 <HAL_TIM_PWM_Start+0xfe>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b10      	cmp	r3, #16
 800772e:	d104      	bne.n	800773a <HAL_TIM_PWM_Start+0xf6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007738:	e003      	b.n	8007742 <HAL_TIM_PWM_Start+0xfe>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2201      	movs	r2, #1
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fd18 	bl	8008180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a38      	ldr	r2, [pc, #224]	@ (8007838 <HAL_TIM_PWM_Start+0x1f4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <HAL_TIM_PWM_Start+0x13e>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a37      	ldr	r2, [pc, #220]	@ (800783c <HAL_TIM_PWM_Start+0x1f8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00e      	beq.n	8007782 <HAL_TIM_PWM_Start+0x13e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a35      	ldr	r2, [pc, #212]	@ (8007840 <HAL_TIM_PWM_Start+0x1fc>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d009      	beq.n	8007782 <HAL_TIM_PWM_Start+0x13e>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a34      	ldr	r2, [pc, #208]	@ (8007844 <HAL_TIM_PWM_Start+0x200>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d004      	beq.n	8007782 <HAL_TIM_PWM_Start+0x13e>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a32      	ldr	r2, [pc, #200]	@ (8007848 <HAL_TIM_PWM_Start+0x204>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d101      	bne.n	8007786 <HAL_TIM_PWM_Start+0x142>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <HAL_TIM_PWM_Start+0x144>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800779a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a25      	ldr	r2, [pc, #148]	@ (8007838 <HAL_TIM_PWM_Start+0x1f4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d022      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1a8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ae:	d01d      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1a8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a25      	ldr	r2, [pc, #148]	@ (800784c <HAL_TIM_PWM_Start+0x208>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d018      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1a8>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a24      	ldr	r2, [pc, #144]	@ (8007850 <HAL_TIM_PWM_Start+0x20c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1a8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a22      	ldr	r2, [pc, #136]	@ (8007854 <HAL_TIM_PWM_Start+0x210>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00e      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1a8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1a      	ldr	r2, [pc, #104]	@ (800783c <HAL_TIM_PWM_Start+0x1f8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d009      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1a8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007858 <HAL_TIM_PWM_Start+0x214>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1a8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a16      	ldr	r2, [pc, #88]	@ (8007840 <HAL_TIM_PWM_Start+0x1fc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d115      	bne.n	8007818 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	4b1a      	ldr	r3, [pc, #104]	@ (800785c <HAL_TIM_PWM_Start+0x218>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b06      	cmp	r3, #6
 80077fc:	d015      	beq.n	800782a <HAL_TIM_PWM_Start+0x1e6>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007804:	d011      	beq.n	800782a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 0201 	orr.w	r2, r2, #1
 8007814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007816:	e008      	b.n	800782a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	e000      	b.n	800782c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	40010000 	.word	0x40010000
 800783c:	40010400 	.word	0x40010400
 8007840:	40014000 	.word	0x40014000
 8007844:	40014400 	.word	0x40014400
 8007848:	40014800 	.word	0x40014800
 800784c:	40000400 	.word	0x40000400
 8007850:	40000800 	.word	0x40000800
 8007854:	40000c00 	.word	0x40000c00
 8007858:	40001800 	.word	0x40001800
 800785c:	00010007 	.word	0x00010007

08007860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800787a:	2302      	movs	r3, #2
 800787c:	e0ff      	b.n	8007a7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b14      	cmp	r3, #20
 800788a:	f200 80f0 	bhi.w	8007a6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800788e:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078e9 	.word	0x080078e9
 8007898:	08007a6f 	.word	0x08007a6f
 800789c:	08007a6f 	.word	0x08007a6f
 80078a0:	08007a6f 	.word	0x08007a6f
 80078a4:	08007929 	.word	0x08007929
 80078a8:	08007a6f 	.word	0x08007a6f
 80078ac:	08007a6f 	.word	0x08007a6f
 80078b0:	08007a6f 	.word	0x08007a6f
 80078b4:	0800796b 	.word	0x0800796b
 80078b8:	08007a6f 	.word	0x08007a6f
 80078bc:	08007a6f 	.word	0x08007a6f
 80078c0:	08007a6f 	.word	0x08007a6f
 80078c4:	080079ab 	.word	0x080079ab
 80078c8:	08007a6f 	.word	0x08007a6f
 80078cc:	08007a6f 	.word	0x08007a6f
 80078d0:	08007a6f 	.word	0x08007a6f
 80078d4:	080079ed 	.word	0x080079ed
 80078d8:	08007a6f 	.word	0x08007a6f
 80078dc:	08007a6f 	.word	0x08007a6f
 80078e0:	08007a6f 	.word	0x08007a6f
 80078e4:	08007a2d 	.word	0x08007a2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68b9      	ldr	r1, [r7, #8]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f970 	bl	8007bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0208 	orr.w	r2, r2, #8
 8007902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0204 	bic.w	r2, r2, #4
 8007912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6999      	ldr	r1, [r3, #24]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	691a      	ldr	r2, [r3, #16]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	619a      	str	r2, [r3, #24]
      break;
 8007926:	e0a5      	b.n	8007a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f9e0 	bl	8007cf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6999      	ldr	r1, [r3, #24]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	021a      	lsls	r2, r3, #8
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	619a      	str	r2, [r3, #24]
      break;
 8007968:	e084      	b.n	8007a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fa49 	bl	8007e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69da      	ldr	r2, [r3, #28]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0208 	orr.w	r2, r2, #8
 8007984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69da      	ldr	r2, [r3, #28]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0204 	bic.w	r2, r2, #4
 8007994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69d9      	ldr	r1, [r3, #28]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	691a      	ldr	r2, [r3, #16]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	61da      	str	r2, [r3, #28]
      break;
 80079a8:	e064      	b.n	8007a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fab1 	bl	8007f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69d9      	ldr	r1, [r3, #28]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	021a      	lsls	r2, r3, #8
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	61da      	str	r2, [r3, #28]
      break;
 80079ea:	e043      	b.n	8007a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fafa 	bl	8007fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0208 	orr.w	r2, r2, #8
 8007a06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0204 	bic.w	r2, r2, #4
 8007a16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	691a      	ldr	r2, [r3, #16]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a2a:	e023      	b.n	8007a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fb3e 	bl	80080b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	021a      	lsls	r2, r3, #8
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a6c:	e002      	b.n	8007a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	75fb      	strb	r3, [r7, #23]
      break;
 8007a72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop

08007a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a46      	ldr	r2, [pc, #280]	@ (8007bb4 <TIM_Base_SetConfig+0x12c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa6:	d00f      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a43      	ldr	r2, [pc, #268]	@ (8007bb8 <TIM_Base_SetConfig+0x130>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00b      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a42      	ldr	r2, [pc, #264]	@ (8007bbc <TIM_Base_SetConfig+0x134>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d007      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a41      	ldr	r2, [pc, #260]	@ (8007bc0 <TIM_Base_SetConfig+0x138>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a40      	ldr	r2, [pc, #256]	@ (8007bc4 <TIM_Base_SetConfig+0x13c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d108      	bne.n	8007ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a35      	ldr	r2, [pc, #212]	@ (8007bb4 <TIM_Base_SetConfig+0x12c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d01f      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ae8:	d01b      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a32      	ldr	r2, [pc, #200]	@ (8007bb8 <TIM_Base_SetConfig+0x130>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d017      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a31      	ldr	r2, [pc, #196]	@ (8007bbc <TIM_Base_SetConfig+0x134>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a30      	ldr	r2, [pc, #192]	@ (8007bc0 <TIM_Base_SetConfig+0x138>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00f      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a2f      	ldr	r2, [pc, #188]	@ (8007bc4 <TIM_Base_SetConfig+0x13c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00b      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8007bc8 <TIM_Base_SetConfig+0x140>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d007      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a2d      	ldr	r2, [pc, #180]	@ (8007bcc <TIM_Base_SetConfig+0x144>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8007bd0 <TIM_Base_SetConfig+0x148>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d108      	bne.n	8007b34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a16      	ldr	r2, [pc, #88]	@ (8007bb4 <TIM_Base_SetConfig+0x12c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00f      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a18      	ldr	r2, [pc, #96]	@ (8007bc4 <TIM_Base_SetConfig+0x13c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a17      	ldr	r2, [pc, #92]	@ (8007bc8 <TIM_Base_SetConfig+0x140>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d007      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a16      	ldr	r2, [pc, #88]	@ (8007bcc <TIM_Base_SetConfig+0x144>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a15      	ldr	r2, [pc, #84]	@ (8007bd0 <TIM_Base_SetConfig+0x148>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d103      	bne.n	8007b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d105      	bne.n	8007ba6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f023 0201 	bic.w	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	611a      	str	r2, [r3, #16]
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	40010000 	.word	0x40010000
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40000800 	.word	0x40000800
 8007bc0:	40000c00 	.word	0x40000c00
 8007bc4:	40010400 	.word	0x40010400
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800

08007bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f023 0201 	bic.w	r2, r3, #1
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4b37      	ldr	r3, [pc, #220]	@ (8007cdc <TIM_OC1_SetConfig+0x108>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f023 0302 	bic.w	r3, r3, #2
 8007c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ce0 <TIM_OC1_SetConfig+0x10c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00f      	beq.n	8007c50 <TIM_OC1_SetConfig+0x7c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a2c      	ldr	r2, [pc, #176]	@ (8007ce4 <TIM_OC1_SetConfig+0x110>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00b      	beq.n	8007c50 <TIM_OC1_SetConfig+0x7c>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ce8 <TIM_OC1_SetConfig+0x114>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d007      	beq.n	8007c50 <TIM_OC1_SetConfig+0x7c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a2a      	ldr	r2, [pc, #168]	@ (8007cec <TIM_OC1_SetConfig+0x118>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d003      	beq.n	8007c50 <TIM_OC1_SetConfig+0x7c>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a29      	ldr	r2, [pc, #164]	@ (8007cf0 <TIM_OC1_SetConfig+0x11c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d10c      	bne.n	8007c6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f023 0308 	bic.w	r3, r3, #8
 8007c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f023 0304 	bic.w	r3, r3, #4
 8007c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce0 <TIM_OC1_SetConfig+0x10c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00f      	beq.n	8007c92 <TIM_OC1_SetConfig+0xbe>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce4 <TIM_OC1_SetConfig+0x110>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00b      	beq.n	8007c92 <TIM_OC1_SetConfig+0xbe>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce8 <TIM_OC1_SetConfig+0x114>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d007      	beq.n	8007c92 <TIM_OC1_SetConfig+0xbe>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a19      	ldr	r2, [pc, #100]	@ (8007cec <TIM_OC1_SetConfig+0x118>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d003      	beq.n	8007c92 <TIM_OC1_SetConfig+0xbe>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a18      	ldr	r2, [pc, #96]	@ (8007cf0 <TIM_OC1_SetConfig+0x11c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d111      	bne.n	8007cb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	621a      	str	r2, [r3, #32]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	fffeff8f 	.word	0xfffeff8f
 8007ce0:	40010000 	.word	0x40010000
 8007ce4:	40010400 	.word	0x40010400
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400
 8007cf0:	40014800 	.word	0x40014800

08007cf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	f023 0210 	bic.w	r2, r3, #16
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4b34      	ldr	r3, [pc, #208]	@ (8007df0 <TIM_OC2_SetConfig+0xfc>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 0320 	bic.w	r3, r3, #32
 8007d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a29      	ldr	r2, [pc, #164]	@ (8007df4 <TIM_OC2_SetConfig+0x100>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_OC2_SetConfig+0x68>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a28      	ldr	r2, [pc, #160]	@ (8007df8 <TIM_OC2_SetConfig+0x104>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d10d      	bne.n	8007d78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007df4 <TIM_OC2_SetConfig+0x100>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00f      	beq.n	8007da0 <TIM_OC2_SetConfig+0xac>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a1d      	ldr	r2, [pc, #116]	@ (8007df8 <TIM_OC2_SetConfig+0x104>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00b      	beq.n	8007da0 <TIM_OC2_SetConfig+0xac>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007dfc <TIM_OC2_SetConfig+0x108>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_OC2_SetConfig+0xac>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a1b      	ldr	r2, [pc, #108]	@ (8007e00 <TIM_OC2_SetConfig+0x10c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC2_SetConfig+0xac>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007e04 <TIM_OC2_SetConfig+0x110>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d113      	bne.n	8007dc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	feff8fff 	.word	0xfeff8fff
 8007df4:	40010000 	.word	0x40010000
 8007df8:	40010400 	.word	0x40010400
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40014400 	.word	0x40014400
 8007e04:	40014800 	.word	0x40014800

08007e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4b33      	ldr	r3, [pc, #204]	@ (8007f00 <TIM_OC3_SetConfig+0xf8>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0303 	bic.w	r3, r3, #3
 8007e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a28      	ldr	r2, [pc, #160]	@ (8007f04 <TIM_OC3_SetConfig+0xfc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d003      	beq.n	8007e6e <TIM_OC3_SetConfig+0x66>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a27      	ldr	r2, [pc, #156]	@ (8007f08 <TIM_OC3_SetConfig+0x100>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d10d      	bne.n	8007e8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f04 <TIM_OC3_SetConfig+0xfc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00f      	beq.n	8007eb2 <TIM_OC3_SetConfig+0xaa>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a1c      	ldr	r2, [pc, #112]	@ (8007f08 <TIM_OC3_SetConfig+0x100>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d00b      	beq.n	8007eb2 <TIM_OC3_SetConfig+0xaa>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8007f0c <TIM_OC3_SetConfig+0x104>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d007      	beq.n	8007eb2 <TIM_OC3_SetConfig+0xaa>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8007f10 <TIM_OC3_SetConfig+0x108>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d003      	beq.n	8007eb2 <TIM_OC3_SetConfig+0xaa>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a19      	ldr	r2, [pc, #100]	@ (8007f14 <TIM_OC3_SetConfig+0x10c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d113      	bne.n	8007eda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	621a      	str	r2, [r3, #32]
}
 8007ef4:	bf00      	nop
 8007ef6:	371c      	adds	r7, #28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	fffeff8f 	.word	0xfffeff8f
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40010400 	.word	0x40010400
 8007f0c:	40014000 	.word	0x40014000
 8007f10:	40014400 	.word	0x40014400
 8007f14:	40014800 	.word	0x40014800

08007f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4b24      	ldr	r3, [pc, #144]	@ (8007fd4 <TIM_OC4_SetConfig+0xbc>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	031b      	lsls	r3, r3, #12
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a19      	ldr	r2, [pc, #100]	@ (8007fd8 <TIM_OC4_SetConfig+0xc0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00f      	beq.n	8007f98 <TIM_OC4_SetConfig+0x80>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a18      	ldr	r2, [pc, #96]	@ (8007fdc <TIM_OC4_SetConfig+0xc4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00b      	beq.n	8007f98 <TIM_OC4_SetConfig+0x80>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a17      	ldr	r2, [pc, #92]	@ (8007fe0 <TIM_OC4_SetConfig+0xc8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d007      	beq.n	8007f98 <TIM_OC4_SetConfig+0x80>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a16      	ldr	r2, [pc, #88]	@ (8007fe4 <TIM_OC4_SetConfig+0xcc>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_OC4_SetConfig+0x80>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a15      	ldr	r2, [pc, #84]	@ (8007fe8 <TIM_OC4_SetConfig+0xd0>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d109      	bne.n	8007fac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	019b      	lsls	r3, r3, #6
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	621a      	str	r2, [r3, #32]
}
 8007fc6:	bf00      	nop
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	feff8fff 	.word	0xfeff8fff
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40010400 	.word	0x40010400
 8007fe0:	40014000 	.word	0x40014000
 8007fe4:	40014400 	.word	0x40014400
 8007fe8:	40014800 	.word	0x40014800

08007fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4b21      	ldr	r3, [pc, #132]	@ (800809c <TIM_OC5_SetConfig+0xb0>)
 8008018:	4013      	ands	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800802c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	041b      	lsls	r3, r3, #16
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a18      	ldr	r2, [pc, #96]	@ (80080a0 <TIM_OC5_SetConfig+0xb4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00f      	beq.n	8008062 <TIM_OC5_SetConfig+0x76>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a17      	ldr	r2, [pc, #92]	@ (80080a4 <TIM_OC5_SetConfig+0xb8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00b      	beq.n	8008062 <TIM_OC5_SetConfig+0x76>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a16      	ldr	r2, [pc, #88]	@ (80080a8 <TIM_OC5_SetConfig+0xbc>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d007      	beq.n	8008062 <TIM_OC5_SetConfig+0x76>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a15      	ldr	r2, [pc, #84]	@ (80080ac <TIM_OC5_SetConfig+0xc0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d003      	beq.n	8008062 <TIM_OC5_SetConfig+0x76>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a14      	ldr	r2, [pc, #80]	@ (80080b0 <TIM_OC5_SetConfig+0xc4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d109      	bne.n	8008076 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	021b      	lsls	r3, r3, #8
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	4313      	orrs	r3, r2
 8008074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	621a      	str	r2, [r3, #32]
}
 8008090:	bf00      	nop
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	fffeff8f 	.word	0xfffeff8f
 80080a0:	40010000 	.word	0x40010000
 80080a4:	40010400 	.word	0x40010400
 80080a8:	40014000 	.word	0x40014000
 80080ac:	40014400 	.word	0x40014400
 80080b0:	40014800 	.word	0x40014800

080080b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4b22      	ldr	r3, [pc, #136]	@ (8008168 <TIM_OC6_SetConfig+0xb4>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	051b      	lsls	r3, r3, #20
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a19      	ldr	r2, [pc, #100]	@ (800816c <TIM_OC6_SetConfig+0xb8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00f      	beq.n	800812c <TIM_OC6_SetConfig+0x78>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a18      	ldr	r2, [pc, #96]	@ (8008170 <TIM_OC6_SetConfig+0xbc>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00b      	beq.n	800812c <TIM_OC6_SetConfig+0x78>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a17      	ldr	r2, [pc, #92]	@ (8008174 <TIM_OC6_SetConfig+0xc0>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d007      	beq.n	800812c <TIM_OC6_SetConfig+0x78>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a16      	ldr	r2, [pc, #88]	@ (8008178 <TIM_OC6_SetConfig+0xc4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_OC6_SetConfig+0x78>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a15      	ldr	r2, [pc, #84]	@ (800817c <TIM_OC6_SetConfig+0xc8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d109      	bne.n	8008140 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008132:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	029b      	lsls	r3, r3, #10
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	621a      	str	r2, [r3, #32]
}
 800815a:	bf00      	nop
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	feff8fff 	.word	0xfeff8fff
 800816c:	40010000 	.word	0x40010000
 8008170:	40010400 	.word	0x40010400
 8008174:	40014000 	.word	0x40014000
 8008178:	40014400 	.word	0x40014400
 800817c:	40014800 	.word	0x40014800

08008180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	2201      	movs	r2, #1
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a1a      	ldr	r2, [r3, #32]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	43db      	mvns	r3, r3
 80081a2:	401a      	ands	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1a      	ldr	r2, [r3, #32]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	fa01 f303 	lsl.w	r3, r1, r3
 80081b8:	431a      	orrs	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	621a      	str	r2, [r3, #32]
}
 80081be:	bf00      	nop
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e042      	b.n	8008262 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fa fc0a 	bl	8002a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2224      	movs	r2, #36	@ 0x24
 80081f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0201 	bic.w	r2, r2, #1
 800820a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fe1f 	bl	8008e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f8b4 	bl	8008388 <UART_SetConfig>
 8008220:	4603      	mov	r3, r0
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e01b      	b.n	8008262 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008238:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008248:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0201 	orr.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fe9e 	bl	8008f9c <UART_CheckIdleState>
 8008260:	4603      	mov	r3, r0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b08a      	sub	sp, #40	@ 0x28
 800826e:	af02      	add	r7, sp, #8
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	4613      	mov	r3, r2
 8008278:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008280:	2b20      	cmp	r3, #32
 8008282:	d17b      	bne.n	800837c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <HAL_UART_Transmit+0x26>
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e074      	b.n	800837e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2221      	movs	r2, #33	@ 0x21
 80082a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082a4:	f7fa fdc0 	bl	8002e28 <HAL_GetTick>
 80082a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c2:	d108      	bne.n	80082d6 <HAL_UART_Transmit+0x6c>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d104      	bne.n	80082d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	61bb      	str	r3, [r7, #24]
 80082d4:	e003      	b.n	80082de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082de:	e030      	b.n	8008342 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2200      	movs	r2, #0
 80082e8:	2180      	movs	r1, #128	@ 0x80
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 ff00 	bl	80090f0 <UART_WaitOnFlagUntilTimeout>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e03d      	b.n	800837e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10b      	bne.n	8008320 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008316:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	3302      	adds	r3, #2
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	e007      	b.n	8008330 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	3301      	adds	r3, #1
 800832e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008336:	b29b      	uxth	r3, r3
 8008338:	3b01      	subs	r3, #1
 800833a:	b29a      	uxth	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1c8      	bne.n	80082e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2200      	movs	r2, #0
 8008356:	2140      	movs	r1, #64	@ 0x40
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 fec9 	bl	80090f0 <UART_WaitOnFlagUntilTimeout>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e006      	b.n	800837e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2220      	movs	r2, #32
 8008374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800837c:	2302      	movs	r3, #2
  }
}
 800837e:	4618      	mov	r0, r3
 8008380:	3720      	adds	r7, #32
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800838c:	b092      	sub	sp, #72	@ 0x48
 800838e:	af00      	add	r7, sp, #0
 8008390:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	431a      	orrs	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	431a      	orrs	r2, r3
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	4bbe      	ldr	r3, [pc, #760]	@ (80086b0 <UART_SetConfig+0x328>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083c0:	430b      	orrs	r3, r1
 80083c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4ab3      	ldr	r2, [pc, #716]	@ (80086b4 <UART_SetConfig+0x32c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d004      	beq.n	80083f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083f0:	4313      	orrs	r3, r2
 80083f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	4baf      	ldr	r3, [pc, #700]	@ (80086b8 <UART_SetConfig+0x330>)
 80083fc:	4013      	ands	r3, r2
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	6812      	ldr	r2, [r2, #0]
 8008402:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008404:	430b      	orrs	r3, r1
 8008406:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840e:	f023 010f 	bic.w	r1, r3, #15
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4aa6      	ldr	r2, [pc, #664]	@ (80086bc <UART_SetConfig+0x334>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d177      	bne.n	8008518 <UART_SetConfig+0x190>
 8008428:	4ba5      	ldr	r3, [pc, #660]	@ (80086c0 <UART_SetConfig+0x338>)
 800842a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800842c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008430:	2b28      	cmp	r3, #40	@ 0x28
 8008432:	d86d      	bhi.n	8008510 <UART_SetConfig+0x188>
 8008434:	a201      	add	r2, pc, #4	@ (adr r2, 800843c <UART_SetConfig+0xb4>)
 8008436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843a:	bf00      	nop
 800843c:	080084e1 	.word	0x080084e1
 8008440:	08008511 	.word	0x08008511
 8008444:	08008511 	.word	0x08008511
 8008448:	08008511 	.word	0x08008511
 800844c:	08008511 	.word	0x08008511
 8008450:	08008511 	.word	0x08008511
 8008454:	08008511 	.word	0x08008511
 8008458:	08008511 	.word	0x08008511
 800845c:	080084e9 	.word	0x080084e9
 8008460:	08008511 	.word	0x08008511
 8008464:	08008511 	.word	0x08008511
 8008468:	08008511 	.word	0x08008511
 800846c:	08008511 	.word	0x08008511
 8008470:	08008511 	.word	0x08008511
 8008474:	08008511 	.word	0x08008511
 8008478:	08008511 	.word	0x08008511
 800847c:	080084f1 	.word	0x080084f1
 8008480:	08008511 	.word	0x08008511
 8008484:	08008511 	.word	0x08008511
 8008488:	08008511 	.word	0x08008511
 800848c:	08008511 	.word	0x08008511
 8008490:	08008511 	.word	0x08008511
 8008494:	08008511 	.word	0x08008511
 8008498:	08008511 	.word	0x08008511
 800849c:	080084f9 	.word	0x080084f9
 80084a0:	08008511 	.word	0x08008511
 80084a4:	08008511 	.word	0x08008511
 80084a8:	08008511 	.word	0x08008511
 80084ac:	08008511 	.word	0x08008511
 80084b0:	08008511 	.word	0x08008511
 80084b4:	08008511 	.word	0x08008511
 80084b8:	08008511 	.word	0x08008511
 80084bc:	08008501 	.word	0x08008501
 80084c0:	08008511 	.word	0x08008511
 80084c4:	08008511 	.word	0x08008511
 80084c8:	08008511 	.word	0x08008511
 80084cc:	08008511 	.word	0x08008511
 80084d0:	08008511 	.word	0x08008511
 80084d4:	08008511 	.word	0x08008511
 80084d8:	08008511 	.word	0x08008511
 80084dc:	08008509 	.word	0x08008509
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e6:	e222      	b.n	800892e <UART_SetConfig+0x5a6>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ee:	e21e      	b.n	800892e <UART_SetConfig+0x5a6>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f6:	e21a      	b.n	800892e <UART_SetConfig+0x5a6>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fe:	e216      	b.n	800892e <UART_SetConfig+0x5a6>
 8008500:	2320      	movs	r3, #32
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008506:	e212      	b.n	800892e <UART_SetConfig+0x5a6>
 8008508:	2340      	movs	r3, #64	@ 0x40
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850e:	e20e      	b.n	800892e <UART_SetConfig+0x5a6>
 8008510:	2380      	movs	r3, #128	@ 0x80
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e20a      	b.n	800892e <UART_SetConfig+0x5a6>
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a69      	ldr	r2, [pc, #420]	@ (80086c4 <UART_SetConfig+0x33c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d130      	bne.n	8008584 <UART_SetConfig+0x1fc>
 8008522:	4b67      	ldr	r3, [pc, #412]	@ (80086c0 <UART_SetConfig+0x338>)
 8008524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b05      	cmp	r3, #5
 800852c:	d826      	bhi.n	800857c <UART_SetConfig+0x1f4>
 800852e:	a201      	add	r2, pc, #4	@ (adr r2, 8008534 <UART_SetConfig+0x1ac>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	0800854d 	.word	0x0800854d
 8008538:	08008555 	.word	0x08008555
 800853c:	0800855d 	.word	0x0800855d
 8008540:	08008565 	.word	0x08008565
 8008544:	0800856d 	.word	0x0800856d
 8008548:	08008575 	.word	0x08008575
 800854c:	2300      	movs	r3, #0
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008552:	e1ec      	b.n	800892e <UART_SetConfig+0x5a6>
 8008554:	2304      	movs	r3, #4
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855a:	e1e8      	b.n	800892e <UART_SetConfig+0x5a6>
 800855c:	2308      	movs	r3, #8
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008562:	e1e4      	b.n	800892e <UART_SetConfig+0x5a6>
 8008564:	2310      	movs	r3, #16
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856a:	e1e0      	b.n	800892e <UART_SetConfig+0x5a6>
 800856c:	2320      	movs	r3, #32
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008572:	e1dc      	b.n	800892e <UART_SetConfig+0x5a6>
 8008574:	2340      	movs	r3, #64	@ 0x40
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857a:	e1d8      	b.n	800892e <UART_SetConfig+0x5a6>
 800857c:	2380      	movs	r3, #128	@ 0x80
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008582:	e1d4      	b.n	800892e <UART_SetConfig+0x5a6>
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a4f      	ldr	r2, [pc, #316]	@ (80086c8 <UART_SetConfig+0x340>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d130      	bne.n	80085f0 <UART_SetConfig+0x268>
 800858e:	4b4c      	ldr	r3, [pc, #304]	@ (80086c0 <UART_SetConfig+0x338>)
 8008590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	2b05      	cmp	r3, #5
 8008598:	d826      	bhi.n	80085e8 <UART_SetConfig+0x260>
 800859a:	a201      	add	r2, pc, #4	@ (adr r2, 80085a0 <UART_SetConfig+0x218>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080085b9 	.word	0x080085b9
 80085a4:	080085c1 	.word	0x080085c1
 80085a8:	080085c9 	.word	0x080085c9
 80085ac:	080085d1 	.word	0x080085d1
 80085b0:	080085d9 	.word	0x080085d9
 80085b4:	080085e1 	.word	0x080085e1
 80085b8:	2300      	movs	r3, #0
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e1b6      	b.n	800892e <UART_SetConfig+0x5a6>
 80085c0:	2304      	movs	r3, #4
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c6:	e1b2      	b.n	800892e <UART_SetConfig+0x5a6>
 80085c8:	2308      	movs	r3, #8
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ce:	e1ae      	b.n	800892e <UART_SetConfig+0x5a6>
 80085d0:	2310      	movs	r3, #16
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d6:	e1aa      	b.n	800892e <UART_SetConfig+0x5a6>
 80085d8:	2320      	movs	r3, #32
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085de:	e1a6      	b.n	800892e <UART_SetConfig+0x5a6>
 80085e0:	2340      	movs	r3, #64	@ 0x40
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e6:	e1a2      	b.n	800892e <UART_SetConfig+0x5a6>
 80085e8:	2380      	movs	r3, #128	@ 0x80
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ee:	e19e      	b.n	800892e <UART_SetConfig+0x5a6>
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a35      	ldr	r2, [pc, #212]	@ (80086cc <UART_SetConfig+0x344>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d130      	bne.n	800865c <UART_SetConfig+0x2d4>
 80085fa:	4b31      	ldr	r3, [pc, #196]	@ (80086c0 <UART_SetConfig+0x338>)
 80085fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b05      	cmp	r3, #5
 8008604:	d826      	bhi.n	8008654 <UART_SetConfig+0x2cc>
 8008606:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <UART_SetConfig+0x284>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	08008625 	.word	0x08008625
 8008610:	0800862d 	.word	0x0800862d
 8008614:	08008635 	.word	0x08008635
 8008618:	0800863d 	.word	0x0800863d
 800861c:	08008645 	.word	0x08008645
 8008620:	0800864d 	.word	0x0800864d
 8008624:	2300      	movs	r3, #0
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e180      	b.n	800892e <UART_SetConfig+0x5a6>
 800862c:	2304      	movs	r3, #4
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e17c      	b.n	800892e <UART_SetConfig+0x5a6>
 8008634:	2308      	movs	r3, #8
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863a:	e178      	b.n	800892e <UART_SetConfig+0x5a6>
 800863c:	2310      	movs	r3, #16
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008642:	e174      	b.n	800892e <UART_SetConfig+0x5a6>
 8008644:	2320      	movs	r3, #32
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864a:	e170      	b.n	800892e <UART_SetConfig+0x5a6>
 800864c:	2340      	movs	r3, #64	@ 0x40
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008652:	e16c      	b.n	800892e <UART_SetConfig+0x5a6>
 8008654:	2380      	movs	r3, #128	@ 0x80
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865a:	e168      	b.n	800892e <UART_SetConfig+0x5a6>
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a1b      	ldr	r2, [pc, #108]	@ (80086d0 <UART_SetConfig+0x348>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d142      	bne.n	80086ec <UART_SetConfig+0x364>
 8008666:	4b16      	ldr	r3, [pc, #88]	@ (80086c0 <UART_SetConfig+0x338>)
 8008668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800866a:	f003 0307 	and.w	r3, r3, #7
 800866e:	2b05      	cmp	r3, #5
 8008670:	d838      	bhi.n	80086e4 <UART_SetConfig+0x35c>
 8008672:	a201      	add	r2, pc, #4	@ (adr r2, 8008678 <UART_SetConfig+0x2f0>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	08008691 	.word	0x08008691
 800867c:	08008699 	.word	0x08008699
 8008680:	080086a1 	.word	0x080086a1
 8008684:	080086a9 	.word	0x080086a9
 8008688:	080086d5 	.word	0x080086d5
 800868c:	080086dd 	.word	0x080086dd
 8008690:	2300      	movs	r3, #0
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e14a      	b.n	800892e <UART_SetConfig+0x5a6>
 8008698:	2304      	movs	r3, #4
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869e:	e146      	b.n	800892e <UART_SetConfig+0x5a6>
 80086a0:	2308      	movs	r3, #8
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a6:	e142      	b.n	800892e <UART_SetConfig+0x5a6>
 80086a8:	2310      	movs	r3, #16
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ae:	e13e      	b.n	800892e <UART_SetConfig+0x5a6>
 80086b0:	cfff69f3 	.word	0xcfff69f3
 80086b4:	58000c00 	.word	0x58000c00
 80086b8:	11fff4ff 	.word	0x11fff4ff
 80086bc:	40011000 	.word	0x40011000
 80086c0:	58024400 	.word	0x58024400
 80086c4:	40004400 	.word	0x40004400
 80086c8:	40004800 	.word	0x40004800
 80086cc:	40004c00 	.word	0x40004c00
 80086d0:	40005000 	.word	0x40005000
 80086d4:	2320      	movs	r3, #32
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e128      	b.n	800892e <UART_SetConfig+0x5a6>
 80086dc:	2340      	movs	r3, #64	@ 0x40
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e124      	b.n	800892e <UART_SetConfig+0x5a6>
 80086e4:	2380      	movs	r3, #128	@ 0x80
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e120      	b.n	800892e <UART_SetConfig+0x5a6>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4acb      	ldr	r2, [pc, #812]	@ (8008a20 <UART_SetConfig+0x698>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d176      	bne.n	80087e4 <UART_SetConfig+0x45c>
 80086f6:	4bcb      	ldr	r3, [pc, #812]	@ (8008a24 <UART_SetConfig+0x69c>)
 80086f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086fe:	2b28      	cmp	r3, #40	@ 0x28
 8008700:	d86c      	bhi.n	80087dc <UART_SetConfig+0x454>
 8008702:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <UART_SetConfig+0x380>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	080087ad 	.word	0x080087ad
 800870c:	080087dd 	.word	0x080087dd
 8008710:	080087dd 	.word	0x080087dd
 8008714:	080087dd 	.word	0x080087dd
 8008718:	080087dd 	.word	0x080087dd
 800871c:	080087dd 	.word	0x080087dd
 8008720:	080087dd 	.word	0x080087dd
 8008724:	080087dd 	.word	0x080087dd
 8008728:	080087b5 	.word	0x080087b5
 800872c:	080087dd 	.word	0x080087dd
 8008730:	080087dd 	.word	0x080087dd
 8008734:	080087dd 	.word	0x080087dd
 8008738:	080087dd 	.word	0x080087dd
 800873c:	080087dd 	.word	0x080087dd
 8008740:	080087dd 	.word	0x080087dd
 8008744:	080087dd 	.word	0x080087dd
 8008748:	080087bd 	.word	0x080087bd
 800874c:	080087dd 	.word	0x080087dd
 8008750:	080087dd 	.word	0x080087dd
 8008754:	080087dd 	.word	0x080087dd
 8008758:	080087dd 	.word	0x080087dd
 800875c:	080087dd 	.word	0x080087dd
 8008760:	080087dd 	.word	0x080087dd
 8008764:	080087dd 	.word	0x080087dd
 8008768:	080087c5 	.word	0x080087c5
 800876c:	080087dd 	.word	0x080087dd
 8008770:	080087dd 	.word	0x080087dd
 8008774:	080087dd 	.word	0x080087dd
 8008778:	080087dd 	.word	0x080087dd
 800877c:	080087dd 	.word	0x080087dd
 8008780:	080087dd 	.word	0x080087dd
 8008784:	080087dd 	.word	0x080087dd
 8008788:	080087cd 	.word	0x080087cd
 800878c:	080087dd 	.word	0x080087dd
 8008790:	080087dd 	.word	0x080087dd
 8008794:	080087dd 	.word	0x080087dd
 8008798:	080087dd 	.word	0x080087dd
 800879c:	080087dd 	.word	0x080087dd
 80087a0:	080087dd 	.word	0x080087dd
 80087a4:	080087dd 	.word	0x080087dd
 80087a8:	080087d5 	.word	0x080087d5
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e0bc      	b.n	800892e <UART_SetConfig+0x5a6>
 80087b4:	2304      	movs	r3, #4
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ba:	e0b8      	b.n	800892e <UART_SetConfig+0x5a6>
 80087bc:	2308      	movs	r3, #8
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c2:	e0b4      	b.n	800892e <UART_SetConfig+0x5a6>
 80087c4:	2310      	movs	r3, #16
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ca:	e0b0      	b.n	800892e <UART_SetConfig+0x5a6>
 80087cc:	2320      	movs	r3, #32
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d2:	e0ac      	b.n	800892e <UART_SetConfig+0x5a6>
 80087d4:	2340      	movs	r3, #64	@ 0x40
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087da:	e0a8      	b.n	800892e <UART_SetConfig+0x5a6>
 80087dc:	2380      	movs	r3, #128	@ 0x80
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e2:	e0a4      	b.n	800892e <UART_SetConfig+0x5a6>
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a8f      	ldr	r2, [pc, #572]	@ (8008a28 <UART_SetConfig+0x6a0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d130      	bne.n	8008850 <UART_SetConfig+0x4c8>
 80087ee:	4b8d      	ldr	r3, [pc, #564]	@ (8008a24 <UART_SetConfig+0x69c>)
 80087f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	2b05      	cmp	r3, #5
 80087f8:	d826      	bhi.n	8008848 <UART_SetConfig+0x4c0>
 80087fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008800 <UART_SetConfig+0x478>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008819 	.word	0x08008819
 8008804:	08008821 	.word	0x08008821
 8008808:	08008829 	.word	0x08008829
 800880c:	08008831 	.word	0x08008831
 8008810:	08008839 	.word	0x08008839
 8008814:	08008841 	.word	0x08008841
 8008818:	2300      	movs	r3, #0
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e086      	b.n	800892e <UART_SetConfig+0x5a6>
 8008820:	2304      	movs	r3, #4
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008826:	e082      	b.n	800892e <UART_SetConfig+0x5a6>
 8008828:	2308      	movs	r3, #8
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882e:	e07e      	b.n	800892e <UART_SetConfig+0x5a6>
 8008830:	2310      	movs	r3, #16
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008836:	e07a      	b.n	800892e <UART_SetConfig+0x5a6>
 8008838:	2320      	movs	r3, #32
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883e:	e076      	b.n	800892e <UART_SetConfig+0x5a6>
 8008840:	2340      	movs	r3, #64	@ 0x40
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008846:	e072      	b.n	800892e <UART_SetConfig+0x5a6>
 8008848:	2380      	movs	r3, #128	@ 0x80
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884e:	e06e      	b.n	800892e <UART_SetConfig+0x5a6>
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a75      	ldr	r2, [pc, #468]	@ (8008a2c <UART_SetConfig+0x6a4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d130      	bne.n	80088bc <UART_SetConfig+0x534>
 800885a:	4b72      	ldr	r3, [pc, #456]	@ (8008a24 <UART_SetConfig+0x69c>)
 800885c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	2b05      	cmp	r3, #5
 8008864:	d826      	bhi.n	80088b4 <UART_SetConfig+0x52c>
 8008866:	a201      	add	r2, pc, #4	@ (adr r2, 800886c <UART_SetConfig+0x4e4>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	08008885 	.word	0x08008885
 8008870:	0800888d 	.word	0x0800888d
 8008874:	08008895 	.word	0x08008895
 8008878:	0800889d 	.word	0x0800889d
 800887c:	080088a5 	.word	0x080088a5
 8008880:	080088ad 	.word	0x080088ad
 8008884:	2300      	movs	r3, #0
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e050      	b.n	800892e <UART_SetConfig+0x5a6>
 800888c:	2304      	movs	r3, #4
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008892:	e04c      	b.n	800892e <UART_SetConfig+0x5a6>
 8008894:	2308      	movs	r3, #8
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889a:	e048      	b.n	800892e <UART_SetConfig+0x5a6>
 800889c:	2310      	movs	r3, #16
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a2:	e044      	b.n	800892e <UART_SetConfig+0x5a6>
 80088a4:	2320      	movs	r3, #32
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088aa:	e040      	b.n	800892e <UART_SetConfig+0x5a6>
 80088ac:	2340      	movs	r3, #64	@ 0x40
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b2:	e03c      	b.n	800892e <UART_SetConfig+0x5a6>
 80088b4:	2380      	movs	r3, #128	@ 0x80
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ba:	e038      	b.n	800892e <UART_SetConfig+0x5a6>
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a5b      	ldr	r2, [pc, #364]	@ (8008a30 <UART_SetConfig+0x6a8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d130      	bne.n	8008928 <UART_SetConfig+0x5a0>
 80088c6:	4b57      	ldr	r3, [pc, #348]	@ (8008a24 <UART_SetConfig+0x69c>)
 80088c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d826      	bhi.n	8008920 <UART_SetConfig+0x598>
 80088d2:	a201      	add	r2, pc, #4	@ (adr r2, 80088d8 <UART_SetConfig+0x550>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	080088f1 	.word	0x080088f1
 80088dc:	080088f9 	.word	0x080088f9
 80088e0:	08008901 	.word	0x08008901
 80088e4:	08008909 	.word	0x08008909
 80088e8:	08008911 	.word	0x08008911
 80088ec:	08008919 	.word	0x08008919
 80088f0:	2302      	movs	r3, #2
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e01a      	b.n	800892e <UART_SetConfig+0x5a6>
 80088f8:	2304      	movs	r3, #4
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e016      	b.n	800892e <UART_SetConfig+0x5a6>
 8008900:	2308      	movs	r3, #8
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008906:	e012      	b.n	800892e <UART_SetConfig+0x5a6>
 8008908:	2310      	movs	r3, #16
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890e:	e00e      	b.n	800892e <UART_SetConfig+0x5a6>
 8008910:	2320      	movs	r3, #32
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008916:	e00a      	b.n	800892e <UART_SetConfig+0x5a6>
 8008918:	2340      	movs	r3, #64	@ 0x40
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891e:	e006      	b.n	800892e <UART_SetConfig+0x5a6>
 8008920:	2380      	movs	r3, #128	@ 0x80
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008926:	e002      	b.n	800892e <UART_SetConfig+0x5a6>
 8008928:	2380      	movs	r3, #128	@ 0x80
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a3f      	ldr	r2, [pc, #252]	@ (8008a30 <UART_SetConfig+0x6a8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	f040 80f8 	bne.w	8008b2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800893a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800893e:	2b20      	cmp	r3, #32
 8008940:	dc46      	bgt.n	80089d0 <UART_SetConfig+0x648>
 8008942:	2b02      	cmp	r3, #2
 8008944:	f2c0 8082 	blt.w	8008a4c <UART_SetConfig+0x6c4>
 8008948:	3b02      	subs	r3, #2
 800894a:	2b1e      	cmp	r3, #30
 800894c:	d87e      	bhi.n	8008a4c <UART_SetConfig+0x6c4>
 800894e:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <UART_SetConfig+0x5cc>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	080089d7 	.word	0x080089d7
 8008958:	08008a4d 	.word	0x08008a4d
 800895c:	080089df 	.word	0x080089df
 8008960:	08008a4d 	.word	0x08008a4d
 8008964:	08008a4d 	.word	0x08008a4d
 8008968:	08008a4d 	.word	0x08008a4d
 800896c:	080089ef 	.word	0x080089ef
 8008970:	08008a4d 	.word	0x08008a4d
 8008974:	08008a4d 	.word	0x08008a4d
 8008978:	08008a4d 	.word	0x08008a4d
 800897c:	08008a4d 	.word	0x08008a4d
 8008980:	08008a4d 	.word	0x08008a4d
 8008984:	08008a4d 	.word	0x08008a4d
 8008988:	08008a4d 	.word	0x08008a4d
 800898c:	080089ff 	.word	0x080089ff
 8008990:	08008a4d 	.word	0x08008a4d
 8008994:	08008a4d 	.word	0x08008a4d
 8008998:	08008a4d 	.word	0x08008a4d
 800899c:	08008a4d 	.word	0x08008a4d
 80089a0:	08008a4d 	.word	0x08008a4d
 80089a4:	08008a4d 	.word	0x08008a4d
 80089a8:	08008a4d 	.word	0x08008a4d
 80089ac:	08008a4d 	.word	0x08008a4d
 80089b0:	08008a4d 	.word	0x08008a4d
 80089b4:	08008a4d 	.word	0x08008a4d
 80089b8:	08008a4d 	.word	0x08008a4d
 80089bc:	08008a4d 	.word	0x08008a4d
 80089c0:	08008a4d 	.word	0x08008a4d
 80089c4:	08008a4d 	.word	0x08008a4d
 80089c8:	08008a4d 	.word	0x08008a4d
 80089cc:	08008a3f 	.word	0x08008a3f
 80089d0:	2b40      	cmp	r3, #64	@ 0x40
 80089d2:	d037      	beq.n	8008a44 <UART_SetConfig+0x6bc>
 80089d4:	e03a      	b.n	8008a4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80089d6:	f7fd faed 	bl	8005fb4 <HAL_RCCEx_GetD3PCLK1Freq>
 80089da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089dc:	e03c      	b.n	8008a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fd fafc 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ec:	e034      	b.n	8008a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ee:	f107 0318 	add.w	r3, r7, #24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd fc48 	bl	8006288 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fc:	e02c      	b.n	8008a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089fe:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <UART_SetConfig+0x69c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d016      	beq.n	8008a38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a0a:	4b06      	ldr	r3, [pc, #24]	@ (8008a24 <UART_SetConfig+0x69c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	08db      	lsrs	r3, r3, #3
 8008a10:	f003 0303 	and.w	r3, r3, #3
 8008a14:	4a07      	ldr	r2, [pc, #28]	@ (8008a34 <UART_SetConfig+0x6ac>)
 8008a16:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a1c:	e01c      	b.n	8008a58 <UART_SetConfig+0x6d0>
 8008a1e:	bf00      	nop
 8008a20:	40011400 	.word	0x40011400
 8008a24:	58024400 	.word	0x58024400
 8008a28:	40007800 	.word	0x40007800
 8008a2c:	40007c00 	.word	0x40007c00
 8008a30:	58000c00 	.word	0x58000c00
 8008a34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008a38:	4b9d      	ldr	r3, [pc, #628]	@ (8008cb0 <UART_SetConfig+0x928>)
 8008a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a3c:	e00c      	b.n	8008a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a3e:	4b9d      	ldr	r3, [pc, #628]	@ (8008cb4 <UART_SetConfig+0x92c>)
 8008a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a42:	e009      	b.n	8008a58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a4a:	e005      	b.n	8008a58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 81de 	beq.w	8008e1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a64:	4a94      	ldr	r2, [pc, #592]	@ (8008cb8 <UART_SetConfig+0x930>)
 8008a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a72:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	4413      	add	r3, r2
 8008a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d305      	bcc.n	8008a90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d903      	bls.n	8008a98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a96:	e1c1      	b.n	8008e1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	60fa      	str	r2, [r7, #12]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa4:	4a84      	ldr	r2, [pc, #528]	@ (8008cb8 <UART_SetConfig+0x930>)
 8008aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2200      	movs	r2, #0
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ab6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aba:	f7f7 fe25 	bl	8000708 <__aeabi_uldivmod>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	020b      	lsls	r3, r1, #8
 8008ad0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ad4:	0202      	lsls	r2, r0, #8
 8008ad6:	6979      	ldr	r1, [r7, #20]
 8008ad8:	6849      	ldr	r1, [r1, #4]
 8008ada:	0849      	lsrs	r1, r1, #1
 8008adc:	2000      	movs	r0, #0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	eb12 0804 	adds.w	r8, r2, r4
 8008ae6:	eb43 0905 	adc.w	r9, r3, r5
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	469a      	mov	sl, r3
 8008af2:	4693      	mov	fp, r2
 8008af4:	4652      	mov	r2, sl
 8008af6:	465b      	mov	r3, fp
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fe04 	bl	8000708 <__aeabi_uldivmod>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4613      	mov	r3, r2
 8008b06:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b0e:	d308      	bcc.n	8008b22 <UART_SetConfig+0x79a>
 8008b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b16:	d204      	bcs.n	8008b22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b1e:	60da      	str	r2, [r3, #12]
 8008b20:	e17c      	b.n	8008e1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b28:	e178      	b.n	8008e1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b32:	f040 80c5 	bne.w	8008cc0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008b36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	dc48      	bgt.n	8008bd0 <UART_SetConfig+0x848>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	db7b      	blt.n	8008c3a <UART_SetConfig+0x8b2>
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d879      	bhi.n	8008c3a <UART_SetConfig+0x8b2>
 8008b46:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <UART_SetConfig+0x7c4>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008bd7 	.word	0x08008bd7
 8008b50:	08008bdf 	.word	0x08008bdf
 8008b54:	08008c3b 	.word	0x08008c3b
 8008b58:	08008c3b 	.word	0x08008c3b
 8008b5c:	08008be7 	.word	0x08008be7
 8008b60:	08008c3b 	.word	0x08008c3b
 8008b64:	08008c3b 	.word	0x08008c3b
 8008b68:	08008c3b 	.word	0x08008c3b
 8008b6c:	08008bf7 	.word	0x08008bf7
 8008b70:	08008c3b 	.word	0x08008c3b
 8008b74:	08008c3b 	.word	0x08008c3b
 8008b78:	08008c3b 	.word	0x08008c3b
 8008b7c:	08008c3b 	.word	0x08008c3b
 8008b80:	08008c3b 	.word	0x08008c3b
 8008b84:	08008c3b 	.word	0x08008c3b
 8008b88:	08008c3b 	.word	0x08008c3b
 8008b8c:	08008c07 	.word	0x08008c07
 8008b90:	08008c3b 	.word	0x08008c3b
 8008b94:	08008c3b 	.word	0x08008c3b
 8008b98:	08008c3b 	.word	0x08008c3b
 8008b9c:	08008c3b 	.word	0x08008c3b
 8008ba0:	08008c3b 	.word	0x08008c3b
 8008ba4:	08008c3b 	.word	0x08008c3b
 8008ba8:	08008c3b 	.word	0x08008c3b
 8008bac:	08008c3b 	.word	0x08008c3b
 8008bb0:	08008c3b 	.word	0x08008c3b
 8008bb4:	08008c3b 	.word	0x08008c3b
 8008bb8:	08008c3b 	.word	0x08008c3b
 8008bbc:	08008c3b 	.word	0x08008c3b
 8008bc0:	08008c3b 	.word	0x08008c3b
 8008bc4:	08008c3b 	.word	0x08008c3b
 8008bc8:	08008c3b 	.word	0x08008c3b
 8008bcc:	08008c2d 	.word	0x08008c2d
 8008bd0:	2b40      	cmp	r3, #64	@ 0x40
 8008bd2:	d02e      	beq.n	8008c32 <UART_SetConfig+0x8aa>
 8008bd4:	e031      	b.n	8008c3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd6:	f7fb ffb7 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8008bda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bdc:	e033      	b.n	8008c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bde:	f7fb ffc9 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 8008be2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008be4:	e02f      	b.n	8008c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fd f9f8 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf4:	e027      	b.n	8008c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bf6:	f107 0318 	add.w	r3, r7, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fd fb44 	bl	8006288 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c04:	e01f      	b.n	8008c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c06:	4b2d      	ldr	r3, [pc, #180]	@ (8008cbc <UART_SetConfig+0x934>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0320 	and.w	r3, r3, #32
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c12:	4b2a      	ldr	r3, [pc, #168]	@ (8008cbc <UART_SetConfig+0x934>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	08db      	lsrs	r3, r3, #3
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	4a24      	ldr	r2, [pc, #144]	@ (8008cb0 <UART_SetConfig+0x928>)
 8008c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c24:	e00f      	b.n	8008c46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008c26:	4b22      	ldr	r3, [pc, #136]	@ (8008cb0 <UART_SetConfig+0x928>)
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c2a:	e00c      	b.n	8008c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c2c:	4b21      	ldr	r3, [pc, #132]	@ (8008cb4 <UART_SetConfig+0x92c>)
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c30:	e009      	b.n	8008c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c38:	e005      	b.n	8008c46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80e7 	beq.w	8008e1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c52:	4a19      	ldr	r2, [pc, #100]	@ (8008cb8 <UART_SetConfig+0x930>)
 8008c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c60:	005a      	lsls	r2, r3, #1
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	085b      	lsrs	r3, r3, #1
 8008c68:	441a      	add	r2, r3
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	2b0f      	cmp	r3, #15
 8008c78:	d916      	bls.n	8008ca8 <UART_SetConfig+0x920>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c80:	d212      	bcs.n	8008ca8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f023 030f 	bic.w	r3, r3, #15
 8008c8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f003 0307 	and.w	r3, r3, #7
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008ca4:	60da      	str	r2, [r3, #12]
 8008ca6:	e0b9      	b.n	8008e1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008cae:	e0b5      	b.n	8008e1c <UART_SetConfig+0xa94>
 8008cb0:	03d09000 	.word	0x03d09000
 8008cb4:	003d0900 	.word	0x003d0900
 8008cb8:	0800e144 	.word	0x0800e144
 8008cbc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cc0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008cc4:	2b20      	cmp	r3, #32
 8008cc6:	dc49      	bgt.n	8008d5c <UART_SetConfig+0x9d4>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	db7c      	blt.n	8008dc6 <UART_SetConfig+0xa3e>
 8008ccc:	2b20      	cmp	r3, #32
 8008cce:	d87a      	bhi.n	8008dc6 <UART_SetConfig+0xa3e>
 8008cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd8 <UART_SetConfig+0x950>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008d63 	.word	0x08008d63
 8008cdc:	08008d6b 	.word	0x08008d6b
 8008ce0:	08008dc7 	.word	0x08008dc7
 8008ce4:	08008dc7 	.word	0x08008dc7
 8008ce8:	08008d73 	.word	0x08008d73
 8008cec:	08008dc7 	.word	0x08008dc7
 8008cf0:	08008dc7 	.word	0x08008dc7
 8008cf4:	08008dc7 	.word	0x08008dc7
 8008cf8:	08008d83 	.word	0x08008d83
 8008cfc:	08008dc7 	.word	0x08008dc7
 8008d00:	08008dc7 	.word	0x08008dc7
 8008d04:	08008dc7 	.word	0x08008dc7
 8008d08:	08008dc7 	.word	0x08008dc7
 8008d0c:	08008dc7 	.word	0x08008dc7
 8008d10:	08008dc7 	.word	0x08008dc7
 8008d14:	08008dc7 	.word	0x08008dc7
 8008d18:	08008d93 	.word	0x08008d93
 8008d1c:	08008dc7 	.word	0x08008dc7
 8008d20:	08008dc7 	.word	0x08008dc7
 8008d24:	08008dc7 	.word	0x08008dc7
 8008d28:	08008dc7 	.word	0x08008dc7
 8008d2c:	08008dc7 	.word	0x08008dc7
 8008d30:	08008dc7 	.word	0x08008dc7
 8008d34:	08008dc7 	.word	0x08008dc7
 8008d38:	08008dc7 	.word	0x08008dc7
 8008d3c:	08008dc7 	.word	0x08008dc7
 8008d40:	08008dc7 	.word	0x08008dc7
 8008d44:	08008dc7 	.word	0x08008dc7
 8008d48:	08008dc7 	.word	0x08008dc7
 8008d4c:	08008dc7 	.word	0x08008dc7
 8008d50:	08008dc7 	.word	0x08008dc7
 8008d54:	08008dc7 	.word	0x08008dc7
 8008d58:	08008db9 	.word	0x08008db9
 8008d5c:	2b40      	cmp	r3, #64	@ 0x40
 8008d5e:	d02e      	beq.n	8008dbe <UART_SetConfig+0xa36>
 8008d60:	e031      	b.n	8008dc6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d62:	f7fb fef1 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8008d66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d68:	e033      	b.n	8008dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d6a:	f7fb ff03 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 8008d6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d70:	e02f      	b.n	8008dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fd f932 	bl	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d80:	e027      	b.n	8008dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d82:	f107 0318 	add.w	r3, r7, #24
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fd fa7e 	bl	8006288 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e01f      	b.n	8008dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d92:	4b2d      	ldr	r3, [pc, #180]	@ (8008e48 <UART_SetConfig+0xac0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0320 	and.w	r3, r3, #32
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008e48 <UART_SetConfig+0xac0>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	08db      	lsrs	r3, r3, #3
 8008da4:	f003 0303 	and.w	r3, r3, #3
 8008da8:	4a28      	ldr	r2, [pc, #160]	@ (8008e4c <UART_SetConfig+0xac4>)
 8008daa:	fa22 f303 	lsr.w	r3, r2, r3
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008db0:	e00f      	b.n	8008dd2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008db2:	4b26      	ldr	r3, [pc, #152]	@ (8008e4c <UART_SetConfig+0xac4>)
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db6:	e00c      	b.n	8008dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008db8:	4b25      	ldr	r3, [pc, #148]	@ (8008e50 <UART_SetConfig+0xac8>)
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbc:	e009      	b.n	8008dd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc4:	e005      	b.n	8008dd2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008dd0:	bf00      	nop
    }

    if (pclk != 0U)
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d021      	beq.n	8008e1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8008e54 <UART_SetConfig+0xacc>)
 8008dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	441a      	add	r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	2b0f      	cmp	r3, #15
 8008e00:	d909      	bls.n	8008e16 <UART_SetConfig+0xa8e>
 8008e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e08:	d205      	bcs.n	8008e16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	60da      	str	r2, [r3, #12]
 8008e14:	e002      	b.n	8008e1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2200      	movs	r2, #0
 8008e36:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e38:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3748      	adds	r7, #72	@ 0x48
 8008e40:	46bd      	mov	sp, r7
 8008e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e46:	bf00      	nop
 8008e48:	58024400 	.word	0x58024400
 8008e4c:	03d09000 	.word	0x03d09000
 8008e50:	003d0900 	.word	0x003d0900
 8008e54:	0800e144 	.word	0x0800e144

08008e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00a      	beq.n	8008e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea8:	f003 0302 	and.w	r3, r3, #2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00a      	beq.n	8008ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00a      	beq.n	8008ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eec:	f003 0310 	and.w	r3, r3, #16
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0e:	f003 0320 	and.w	r3, r3, #32
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d01a      	beq.n	8008f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f56:	d10a      	bne.n	8008f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
  }
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b098      	sub	sp, #96	@ 0x60
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fac:	f7f9 ff3c 	bl	8002e28 <HAL_GetTick>
 8008fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0308 	and.w	r3, r3, #8
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d12f      	bne.n	8009020 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f88e 	bl	80090f0 <UART_WaitOnFlagUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d022      	beq.n	8009020 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ffa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e6      	bne.n	8008fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e063      	b.n	80090e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b04      	cmp	r3, #4
 800902c:	d149      	bne.n	80090c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800902e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009036:	2200      	movs	r2, #0
 8009038:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f857 	bl	80090f0 <UART_WaitOnFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d03c      	beq.n	80090c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	623b      	str	r3, [r7, #32]
   return(result);
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800905c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009066:	633b      	str	r3, [r7, #48]	@ 0x30
 8009068:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800906c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e6      	bne.n	8009048 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	60fb      	str	r3, [r7, #12]
   return(result);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f023 0301 	bic.w	r3, r3, #1
 8009090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3308      	adds	r3, #8
 8009098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800909a:	61fa      	str	r2, [r7, #28]
 800909c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	69b9      	ldr	r1, [r7, #24]
 80090a0:	69fa      	ldr	r2, [r7, #28]
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	617b      	str	r3, [r7, #20]
   return(result);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e5      	bne.n	800907a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e012      	b.n	80090e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3758      	adds	r7, #88	@ 0x58
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	603b      	str	r3, [r7, #0]
 80090fc:	4613      	mov	r3, r2
 80090fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009100:	e04f      	b.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009108:	d04b      	beq.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800910a:	f7f9 fe8d 	bl	8002e28 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	429a      	cmp	r2, r3
 8009118:	d302      	bcc.n	8009120 <UART_WaitOnFlagUntilTimeout+0x30>
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e04e      	b.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d037      	beq.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b80      	cmp	r3, #128	@ 0x80
 8009136:	d034      	beq.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b40      	cmp	r3, #64	@ 0x40
 800913c:	d031      	beq.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f003 0308 	and.w	r3, r3, #8
 8009148:	2b08      	cmp	r3, #8
 800914a:	d110      	bne.n	800916e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2208      	movs	r2, #8
 8009152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 f839 	bl	80091cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2208      	movs	r2, #8
 800915e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e029      	b.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800917c:	d111      	bne.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 f81f 	bl	80091cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2220      	movs	r2, #32
 8009192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e00f      	b.n	80091c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69da      	ldr	r2, [r3, #28]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	4013      	ands	r3, r2
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	bf0c      	ite	eq
 80091b2:	2301      	moveq	r3, #1
 80091b4:	2300      	movne	r3, #0
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	461a      	mov	r2, r3
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d0a0      	beq.n	8009102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b095      	sub	sp, #84	@ 0x54
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80091f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e6      	bne.n	80091d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	61fb      	str	r3, [r7, #28]
   return(result);
 8009216:	69fa      	ldr	r2, [r7, #28]
 8009218:	4b1e      	ldr	r3, [pc, #120]	@ (8009294 <UART_EndRxTransfer+0xc8>)
 800921a:	4013      	ands	r3, r2
 800921c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3308      	adds	r3, #8
 8009224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009226:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009228:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800922c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e5      	bne.n	8009206 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800923e:	2b01      	cmp	r3, #1
 8009240:	d118      	bne.n	8009274 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f023 0310 	bic.w	r3, r3, #16
 8009256:	647b      	str	r3, [r7, #68]	@ 0x44
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009260:	61bb      	str	r3, [r7, #24]
 8009262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	613b      	str	r3, [r7, #16]
   return(result);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e6      	bne.n	8009242 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009288:	bf00      	nop
 800928a:	3754      	adds	r7, #84	@ 0x54
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	effffffe 	.word	0xeffffffe

08009298 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d101      	bne.n	80092ae <HAL_UARTEx_DisableFifoMode+0x16>
 80092aa:	2302      	movs	r3, #2
 80092ac:	e027      	b.n	80092fe <HAL_UARTEx_DisableFifoMode+0x66>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2224      	movs	r2, #36	@ 0x24
 80092ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0201 	bic.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800931a:	2b01      	cmp	r3, #1
 800931c:	d101      	bne.n	8009322 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800931e:	2302      	movs	r3, #2
 8009320:	e02d      	b.n	800937e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2224      	movs	r2, #36	@ 0x24
 800932e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0201 	bic.w	r2, r2, #1
 8009348:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f850 	bl	8009404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009396:	2b01      	cmp	r3, #1
 8009398:	d101      	bne.n	800939e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800939a:	2302      	movs	r3, #2
 800939c:	e02d      	b.n	80093fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2224      	movs	r2, #36	@ 0x24
 80093aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f022 0201 	bic.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f812 	bl	8009404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009410:	2b00      	cmp	r3, #0
 8009412:	d108      	bne.n	8009426 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009424:	e031      	b.n	800948a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009426:	2310      	movs	r3, #16
 8009428:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800942a:	2310      	movs	r3, #16
 800942c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	0e5b      	lsrs	r3, r3, #25
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f003 0307 	and.w	r3, r3, #7
 800943c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	0f5b      	lsrs	r3, r3, #29
 8009446:	b2db      	uxtb	r3, r3
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	7b3a      	ldrb	r2, [r7, #12]
 8009452:	4911      	ldr	r1, [pc, #68]	@ (8009498 <UARTEx_SetNbDataToProcess+0x94>)
 8009454:	5c8a      	ldrb	r2, [r1, r2]
 8009456:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800945a:	7b3a      	ldrb	r2, [r7, #12]
 800945c:	490f      	ldr	r1, [pc, #60]	@ (800949c <UARTEx_SetNbDataToProcess+0x98>)
 800945e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009460:	fb93 f3f2 	sdiv	r3, r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	7b7a      	ldrb	r2, [r7, #13]
 8009470:	4909      	ldr	r1, [pc, #36]	@ (8009498 <UARTEx_SetNbDataToProcess+0x94>)
 8009472:	5c8a      	ldrb	r2, [r1, r2]
 8009474:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009478:	7b7a      	ldrb	r2, [r7, #13]
 800947a:	4908      	ldr	r1, [pc, #32]	@ (800949c <UARTEx_SetNbDataToProcess+0x98>)
 800947c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800947e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	0800e15c 	.word	0x0800e15c
 800949c:	0800e164 	.word	0x0800e164

080094a0 <__cvt>:
 80094a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094a2:	ed2d 8b02 	vpush	{d8}
 80094a6:	eeb0 8b40 	vmov.f64	d8, d0
 80094aa:	b085      	sub	sp, #20
 80094ac:	4617      	mov	r7, r2
 80094ae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80094b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094b2:	ee18 2a90 	vmov	r2, s17
 80094b6:	f025 0520 	bic.w	r5, r5, #32
 80094ba:	2a00      	cmp	r2, #0
 80094bc:	bfb6      	itet	lt
 80094be:	222d      	movlt	r2, #45	@ 0x2d
 80094c0:	2200      	movge	r2, #0
 80094c2:	eeb1 8b40 	vneglt.f64	d8, d0
 80094c6:	2d46      	cmp	r5, #70	@ 0x46
 80094c8:	460c      	mov	r4, r1
 80094ca:	701a      	strb	r2, [r3, #0]
 80094cc:	d004      	beq.n	80094d8 <__cvt+0x38>
 80094ce:	2d45      	cmp	r5, #69	@ 0x45
 80094d0:	d100      	bne.n	80094d4 <__cvt+0x34>
 80094d2:	3401      	adds	r4, #1
 80094d4:	2102      	movs	r1, #2
 80094d6:	e000      	b.n	80094da <__cvt+0x3a>
 80094d8:	2103      	movs	r1, #3
 80094da:	ab03      	add	r3, sp, #12
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	ab02      	add	r3, sp, #8
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	4622      	mov	r2, r4
 80094e4:	4633      	mov	r3, r6
 80094e6:	eeb0 0b48 	vmov.f64	d0, d8
 80094ea:	f001 f985 	bl	800a7f8 <_dtoa_r>
 80094ee:	2d47      	cmp	r5, #71	@ 0x47
 80094f0:	d114      	bne.n	800951c <__cvt+0x7c>
 80094f2:	07fb      	lsls	r3, r7, #31
 80094f4:	d50a      	bpl.n	800950c <__cvt+0x6c>
 80094f6:	1902      	adds	r2, r0, r4
 80094f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80094fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009500:	bf08      	it	eq
 8009502:	9203      	streq	r2, [sp, #12]
 8009504:	2130      	movs	r1, #48	@ 0x30
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	4293      	cmp	r3, r2
 800950a:	d319      	bcc.n	8009540 <__cvt+0xa0>
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009510:	1a1b      	subs	r3, r3, r0
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	b005      	add	sp, #20
 8009516:	ecbd 8b02 	vpop	{d8}
 800951a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800951c:	2d46      	cmp	r5, #70	@ 0x46
 800951e:	eb00 0204 	add.w	r2, r0, r4
 8009522:	d1e9      	bne.n	80094f8 <__cvt+0x58>
 8009524:	7803      	ldrb	r3, [r0, #0]
 8009526:	2b30      	cmp	r3, #48	@ 0x30
 8009528:	d107      	bne.n	800953a <__cvt+0x9a>
 800952a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800952e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009532:	bf1c      	itt	ne
 8009534:	f1c4 0401 	rsbne	r4, r4, #1
 8009538:	6034      	strne	r4, [r6, #0]
 800953a:	6833      	ldr	r3, [r6, #0]
 800953c:	441a      	add	r2, r3
 800953e:	e7db      	b.n	80094f8 <__cvt+0x58>
 8009540:	1c5c      	adds	r4, r3, #1
 8009542:	9403      	str	r4, [sp, #12]
 8009544:	7019      	strb	r1, [r3, #0]
 8009546:	e7de      	b.n	8009506 <__cvt+0x66>

08009548 <__exponent>:
 8009548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954a:	2900      	cmp	r1, #0
 800954c:	bfba      	itte	lt
 800954e:	4249      	neglt	r1, r1
 8009550:	232d      	movlt	r3, #45	@ 0x2d
 8009552:	232b      	movge	r3, #43	@ 0x2b
 8009554:	2909      	cmp	r1, #9
 8009556:	7002      	strb	r2, [r0, #0]
 8009558:	7043      	strb	r3, [r0, #1]
 800955a:	dd29      	ble.n	80095b0 <__exponent+0x68>
 800955c:	f10d 0307 	add.w	r3, sp, #7
 8009560:	461d      	mov	r5, r3
 8009562:	270a      	movs	r7, #10
 8009564:	461a      	mov	r2, r3
 8009566:	fbb1 f6f7 	udiv	r6, r1, r7
 800956a:	fb07 1416 	mls	r4, r7, r6, r1
 800956e:	3430      	adds	r4, #48	@ 0x30
 8009570:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009574:	460c      	mov	r4, r1
 8009576:	2c63      	cmp	r4, #99	@ 0x63
 8009578:	f103 33ff 	add.w	r3, r3, #4294967295
 800957c:	4631      	mov	r1, r6
 800957e:	dcf1      	bgt.n	8009564 <__exponent+0x1c>
 8009580:	3130      	adds	r1, #48	@ 0x30
 8009582:	1e94      	subs	r4, r2, #2
 8009584:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009588:	1c41      	adds	r1, r0, #1
 800958a:	4623      	mov	r3, r4
 800958c:	42ab      	cmp	r3, r5
 800958e:	d30a      	bcc.n	80095a6 <__exponent+0x5e>
 8009590:	f10d 0309 	add.w	r3, sp, #9
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	42ac      	cmp	r4, r5
 8009598:	bf88      	it	hi
 800959a:	2300      	movhi	r3, #0
 800959c:	3302      	adds	r3, #2
 800959e:	4403      	add	r3, r0
 80095a0:	1a18      	subs	r0, r3, r0
 80095a2:	b003      	add	sp, #12
 80095a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80095aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80095ae:	e7ed      	b.n	800958c <__exponent+0x44>
 80095b0:	2330      	movs	r3, #48	@ 0x30
 80095b2:	3130      	adds	r1, #48	@ 0x30
 80095b4:	7083      	strb	r3, [r0, #2]
 80095b6:	70c1      	strb	r1, [r0, #3]
 80095b8:	1d03      	adds	r3, r0, #4
 80095ba:	e7f1      	b.n	80095a0 <__exponent+0x58>
 80095bc:	0000      	movs	r0, r0
	...

080095c0 <_printf_float>:
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	b08d      	sub	sp, #52	@ 0x34
 80095c6:	460c      	mov	r4, r1
 80095c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80095cc:	4616      	mov	r6, r2
 80095ce:	461f      	mov	r7, r3
 80095d0:	4605      	mov	r5, r0
 80095d2:	f000 fffd 	bl	800a5d0 <_localeconv_r>
 80095d6:	f8d0 b000 	ldr.w	fp, [r0]
 80095da:	4658      	mov	r0, fp
 80095dc:	f7f6 fed0 	bl	8000380 <strlen>
 80095e0:	2300      	movs	r3, #0
 80095e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80095e4:	f8d8 3000 	ldr.w	r3, [r8]
 80095e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80095ec:	6822      	ldr	r2, [r4, #0]
 80095ee:	9005      	str	r0, [sp, #20]
 80095f0:	3307      	adds	r3, #7
 80095f2:	f023 0307 	bic.w	r3, r3, #7
 80095f6:	f103 0108 	add.w	r1, r3, #8
 80095fa:	f8c8 1000 	str.w	r1, [r8]
 80095fe:	ed93 0b00 	vldr	d0, [r3]
 8009602:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009860 <_printf_float+0x2a0>
 8009606:	eeb0 7bc0 	vabs.f64	d7, d0
 800960a:	eeb4 7b46 	vcmp.f64	d7, d6
 800960e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009612:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009616:	dd24      	ble.n	8009662 <_printf_float+0xa2>
 8009618:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009620:	d502      	bpl.n	8009628 <_printf_float+0x68>
 8009622:	232d      	movs	r3, #45	@ 0x2d
 8009624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009628:	498f      	ldr	r1, [pc, #572]	@ (8009868 <_printf_float+0x2a8>)
 800962a:	4b90      	ldr	r3, [pc, #576]	@ (800986c <_printf_float+0x2ac>)
 800962c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009630:	bf94      	ite	ls
 8009632:	4688      	movls	r8, r1
 8009634:	4698      	movhi	r8, r3
 8009636:	f022 0204 	bic.w	r2, r2, #4
 800963a:	2303      	movs	r3, #3
 800963c:	6123      	str	r3, [r4, #16]
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	f04f 0a00 	mov.w	sl, #0
 8009644:	9700      	str	r7, [sp, #0]
 8009646:	4633      	mov	r3, r6
 8009648:	aa0b      	add	r2, sp, #44	@ 0x2c
 800964a:	4621      	mov	r1, r4
 800964c:	4628      	mov	r0, r5
 800964e:	f000 f9d1 	bl	80099f4 <_printf_common>
 8009652:	3001      	adds	r0, #1
 8009654:	f040 8089 	bne.w	800976a <_printf_float+0x1aa>
 8009658:	f04f 30ff 	mov.w	r0, #4294967295
 800965c:	b00d      	add	sp, #52	@ 0x34
 800965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009662:	eeb4 0b40 	vcmp.f64	d0, d0
 8009666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966a:	d709      	bvc.n	8009680 <_printf_float+0xc0>
 800966c:	ee10 3a90 	vmov	r3, s1
 8009670:	2b00      	cmp	r3, #0
 8009672:	bfbc      	itt	lt
 8009674:	232d      	movlt	r3, #45	@ 0x2d
 8009676:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800967a:	497d      	ldr	r1, [pc, #500]	@ (8009870 <_printf_float+0x2b0>)
 800967c:	4b7d      	ldr	r3, [pc, #500]	@ (8009874 <_printf_float+0x2b4>)
 800967e:	e7d5      	b.n	800962c <_printf_float+0x6c>
 8009680:	6863      	ldr	r3, [r4, #4]
 8009682:	1c59      	adds	r1, r3, #1
 8009684:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009688:	d139      	bne.n	80096fe <_printf_float+0x13e>
 800968a:	2306      	movs	r3, #6
 800968c:	6063      	str	r3, [r4, #4]
 800968e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009692:	2300      	movs	r3, #0
 8009694:	6022      	str	r2, [r4, #0]
 8009696:	9303      	str	r3, [sp, #12]
 8009698:	ab0a      	add	r3, sp, #40	@ 0x28
 800969a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800969e:	ab09      	add	r3, sp, #36	@ 0x24
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	6861      	ldr	r1, [r4, #4]
 80096a4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80096a8:	4628      	mov	r0, r5
 80096aa:	f7ff fef9 	bl	80094a0 <__cvt>
 80096ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80096b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096b4:	4680      	mov	r8, r0
 80096b6:	d129      	bne.n	800970c <_printf_float+0x14c>
 80096b8:	1cc8      	adds	r0, r1, #3
 80096ba:	db02      	blt.n	80096c2 <_printf_float+0x102>
 80096bc:	6863      	ldr	r3, [r4, #4]
 80096be:	4299      	cmp	r1, r3
 80096c0:	dd41      	ble.n	8009746 <_printf_float+0x186>
 80096c2:	f1a9 0902 	sub.w	r9, r9, #2
 80096c6:	fa5f f989 	uxtb.w	r9, r9
 80096ca:	3901      	subs	r1, #1
 80096cc:	464a      	mov	r2, r9
 80096ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80096d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80096d4:	f7ff ff38 	bl	8009548 <__exponent>
 80096d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096da:	1813      	adds	r3, r2, r0
 80096dc:	2a01      	cmp	r2, #1
 80096de:	4682      	mov	sl, r0
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	dc02      	bgt.n	80096ea <_printf_float+0x12a>
 80096e4:	6822      	ldr	r2, [r4, #0]
 80096e6:	07d2      	lsls	r2, r2, #31
 80096e8:	d501      	bpl.n	80096ee <_printf_float+0x12e>
 80096ea:	3301      	adds	r3, #1
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0a6      	beq.n	8009644 <_printf_float+0x84>
 80096f6:	232d      	movs	r3, #45	@ 0x2d
 80096f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096fc:	e7a2      	b.n	8009644 <_printf_float+0x84>
 80096fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009702:	d1c4      	bne.n	800968e <_printf_float+0xce>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1c2      	bne.n	800968e <_printf_float+0xce>
 8009708:	2301      	movs	r3, #1
 800970a:	e7bf      	b.n	800968c <_printf_float+0xcc>
 800970c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009710:	d9db      	bls.n	80096ca <_printf_float+0x10a>
 8009712:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009716:	d118      	bne.n	800974a <_printf_float+0x18a>
 8009718:	2900      	cmp	r1, #0
 800971a:	6863      	ldr	r3, [r4, #4]
 800971c:	dd0b      	ble.n	8009736 <_printf_float+0x176>
 800971e:	6121      	str	r1, [r4, #16]
 8009720:	b913      	cbnz	r3, 8009728 <_printf_float+0x168>
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	07d0      	lsls	r0, r2, #31
 8009726:	d502      	bpl.n	800972e <_printf_float+0x16e>
 8009728:	3301      	adds	r3, #1
 800972a:	440b      	add	r3, r1
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009730:	f04f 0a00 	mov.w	sl, #0
 8009734:	e7db      	b.n	80096ee <_printf_float+0x12e>
 8009736:	b913      	cbnz	r3, 800973e <_printf_float+0x17e>
 8009738:	6822      	ldr	r2, [r4, #0]
 800973a:	07d2      	lsls	r2, r2, #31
 800973c:	d501      	bpl.n	8009742 <_printf_float+0x182>
 800973e:	3302      	adds	r3, #2
 8009740:	e7f4      	b.n	800972c <_printf_float+0x16c>
 8009742:	2301      	movs	r3, #1
 8009744:	e7f2      	b.n	800972c <_printf_float+0x16c>
 8009746:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800974a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800974c:	4299      	cmp	r1, r3
 800974e:	db05      	blt.n	800975c <_printf_float+0x19c>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	6121      	str	r1, [r4, #16]
 8009754:	07d8      	lsls	r0, r3, #31
 8009756:	d5ea      	bpl.n	800972e <_printf_float+0x16e>
 8009758:	1c4b      	adds	r3, r1, #1
 800975a:	e7e7      	b.n	800972c <_printf_float+0x16c>
 800975c:	2900      	cmp	r1, #0
 800975e:	bfd4      	ite	le
 8009760:	f1c1 0202 	rsble	r2, r1, #2
 8009764:	2201      	movgt	r2, #1
 8009766:	4413      	add	r3, r2
 8009768:	e7e0      	b.n	800972c <_printf_float+0x16c>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	055a      	lsls	r2, r3, #21
 800976e:	d407      	bmi.n	8009780 <_printf_float+0x1c0>
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	4642      	mov	r2, r8
 8009774:	4631      	mov	r1, r6
 8009776:	4628      	mov	r0, r5
 8009778:	47b8      	blx	r7
 800977a:	3001      	adds	r0, #1
 800977c:	d12a      	bne.n	80097d4 <_printf_float+0x214>
 800977e:	e76b      	b.n	8009658 <_printf_float+0x98>
 8009780:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009784:	f240 80e0 	bls.w	8009948 <_printf_float+0x388>
 8009788:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800978c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009794:	d133      	bne.n	80097fe <_printf_float+0x23e>
 8009796:	4a38      	ldr	r2, [pc, #224]	@ (8009878 <_printf_float+0x2b8>)
 8009798:	2301      	movs	r3, #1
 800979a:	4631      	mov	r1, r6
 800979c:	4628      	mov	r0, r5
 800979e:	47b8      	blx	r7
 80097a0:	3001      	adds	r0, #1
 80097a2:	f43f af59 	beq.w	8009658 <_printf_float+0x98>
 80097a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80097aa:	4543      	cmp	r3, r8
 80097ac:	db02      	blt.n	80097b4 <_printf_float+0x1f4>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	07d8      	lsls	r0, r3, #31
 80097b2:	d50f      	bpl.n	80097d4 <_printf_float+0x214>
 80097b4:	9b05      	ldr	r3, [sp, #20]
 80097b6:	465a      	mov	r2, fp
 80097b8:	4631      	mov	r1, r6
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	f43f af4a 	beq.w	8009658 <_printf_float+0x98>
 80097c4:	f04f 0900 	mov.w	r9, #0
 80097c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80097cc:	f104 0a1a 	add.w	sl, r4, #26
 80097d0:	45c8      	cmp	r8, r9
 80097d2:	dc09      	bgt.n	80097e8 <_printf_float+0x228>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	079b      	lsls	r3, r3, #30
 80097d8:	f100 8107 	bmi.w	80099ea <_printf_float+0x42a>
 80097dc:	68e0      	ldr	r0, [r4, #12]
 80097de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097e0:	4298      	cmp	r0, r3
 80097e2:	bfb8      	it	lt
 80097e4:	4618      	movlt	r0, r3
 80097e6:	e739      	b.n	800965c <_printf_float+0x9c>
 80097e8:	2301      	movs	r3, #1
 80097ea:	4652      	mov	r2, sl
 80097ec:	4631      	mov	r1, r6
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b8      	blx	r7
 80097f2:	3001      	adds	r0, #1
 80097f4:	f43f af30 	beq.w	8009658 <_printf_float+0x98>
 80097f8:	f109 0901 	add.w	r9, r9, #1
 80097fc:	e7e8      	b.n	80097d0 <_printf_float+0x210>
 80097fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009800:	2b00      	cmp	r3, #0
 8009802:	dc3b      	bgt.n	800987c <_printf_float+0x2bc>
 8009804:	4a1c      	ldr	r2, [pc, #112]	@ (8009878 <_printf_float+0x2b8>)
 8009806:	2301      	movs	r3, #1
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f af22 	beq.w	8009658 <_printf_float+0x98>
 8009814:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009818:	ea59 0303 	orrs.w	r3, r9, r3
 800981c:	d102      	bne.n	8009824 <_printf_float+0x264>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	07d9      	lsls	r1, r3, #31
 8009822:	d5d7      	bpl.n	80097d4 <_printf_float+0x214>
 8009824:	9b05      	ldr	r3, [sp, #20]
 8009826:	465a      	mov	r2, fp
 8009828:	4631      	mov	r1, r6
 800982a:	4628      	mov	r0, r5
 800982c:	47b8      	blx	r7
 800982e:	3001      	adds	r0, #1
 8009830:	f43f af12 	beq.w	8009658 <_printf_float+0x98>
 8009834:	f04f 0a00 	mov.w	sl, #0
 8009838:	f104 0b1a 	add.w	fp, r4, #26
 800983c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800983e:	425b      	negs	r3, r3
 8009840:	4553      	cmp	r3, sl
 8009842:	dc01      	bgt.n	8009848 <_printf_float+0x288>
 8009844:	464b      	mov	r3, r9
 8009846:	e794      	b.n	8009772 <_printf_float+0x1b2>
 8009848:	2301      	movs	r3, #1
 800984a:	465a      	mov	r2, fp
 800984c:	4631      	mov	r1, r6
 800984e:	4628      	mov	r0, r5
 8009850:	47b8      	blx	r7
 8009852:	3001      	adds	r0, #1
 8009854:	f43f af00 	beq.w	8009658 <_printf_float+0x98>
 8009858:	f10a 0a01 	add.w	sl, sl, #1
 800985c:	e7ee      	b.n	800983c <_printf_float+0x27c>
 800985e:	bf00      	nop
 8009860:	ffffffff 	.word	0xffffffff
 8009864:	7fefffff 	.word	0x7fefffff
 8009868:	0800e16c 	.word	0x0800e16c
 800986c:	0800e170 	.word	0x0800e170
 8009870:	0800e174 	.word	0x0800e174
 8009874:	0800e178 	.word	0x0800e178
 8009878:	0800e17c 	.word	0x0800e17c
 800987c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800987e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009882:	4553      	cmp	r3, sl
 8009884:	bfa8      	it	ge
 8009886:	4653      	movge	r3, sl
 8009888:	2b00      	cmp	r3, #0
 800988a:	4699      	mov	r9, r3
 800988c:	dc37      	bgt.n	80098fe <_printf_float+0x33e>
 800988e:	2300      	movs	r3, #0
 8009890:	9307      	str	r3, [sp, #28]
 8009892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009896:	f104 021a 	add.w	r2, r4, #26
 800989a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800989c:	9907      	ldr	r1, [sp, #28]
 800989e:	9306      	str	r3, [sp, #24]
 80098a0:	eba3 0309 	sub.w	r3, r3, r9
 80098a4:	428b      	cmp	r3, r1
 80098a6:	dc31      	bgt.n	800990c <_printf_float+0x34c>
 80098a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098aa:	459a      	cmp	sl, r3
 80098ac:	dc3b      	bgt.n	8009926 <_printf_float+0x366>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	07da      	lsls	r2, r3, #31
 80098b2:	d438      	bmi.n	8009926 <_printf_float+0x366>
 80098b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b6:	ebaa 0903 	sub.w	r9, sl, r3
 80098ba:	9b06      	ldr	r3, [sp, #24]
 80098bc:	ebaa 0303 	sub.w	r3, sl, r3
 80098c0:	4599      	cmp	r9, r3
 80098c2:	bfa8      	it	ge
 80098c4:	4699      	movge	r9, r3
 80098c6:	f1b9 0f00 	cmp.w	r9, #0
 80098ca:	dc34      	bgt.n	8009936 <_printf_float+0x376>
 80098cc:	f04f 0800 	mov.w	r8, #0
 80098d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098d4:	f104 0b1a 	add.w	fp, r4, #26
 80098d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098da:	ebaa 0303 	sub.w	r3, sl, r3
 80098de:	eba3 0309 	sub.w	r3, r3, r9
 80098e2:	4543      	cmp	r3, r8
 80098e4:	f77f af76 	ble.w	80097d4 <_printf_float+0x214>
 80098e8:	2301      	movs	r3, #1
 80098ea:	465a      	mov	r2, fp
 80098ec:	4631      	mov	r1, r6
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	f43f aeb0 	beq.w	8009658 <_printf_float+0x98>
 80098f8:	f108 0801 	add.w	r8, r8, #1
 80098fc:	e7ec      	b.n	80098d8 <_printf_float+0x318>
 80098fe:	4642      	mov	r2, r8
 8009900:	4631      	mov	r1, r6
 8009902:	4628      	mov	r0, r5
 8009904:	47b8      	blx	r7
 8009906:	3001      	adds	r0, #1
 8009908:	d1c1      	bne.n	800988e <_printf_float+0x2ce>
 800990a:	e6a5      	b.n	8009658 <_printf_float+0x98>
 800990c:	2301      	movs	r3, #1
 800990e:	4631      	mov	r1, r6
 8009910:	4628      	mov	r0, r5
 8009912:	9206      	str	r2, [sp, #24]
 8009914:	47b8      	blx	r7
 8009916:	3001      	adds	r0, #1
 8009918:	f43f ae9e 	beq.w	8009658 <_printf_float+0x98>
 800991c:	9b07      	ldr	r3, [sp, #28]
 800991e:	9a06      	ldr	r2, [sp, #24]
 8009920:	3301      	adds	r3, #1
 8009922:	9307      	str	r3, [sp, #28]
 8009924:	e7b9      	b.n	800989a <_printf_float+0x2da>
 8009926:	9b05      	ldr	r3, [sp, #20]
 8009928:	465a      	mov	r2, fp
 800992a:	4631      	mov	r1, r6
 800992c:	4628      	mov	r0, r5
 800992e:	47b8      	blx	r7
 8009930:	3001      	adds	r0, #1
 8009932:	d1bf      	bne.n	80098b4 <_printf_float+0x2f4>
 8009934:	e690      	b.n	8009658 <_printf_float+0x98>
 8009936:	9a06      	ldr	r2, [sp, #24]
 8009938:	464b      	mov	r3, r9
 800993a:	4442      	add	r2, r8
 800993c:	4631      	mov	r1, r6
 800993e:	4628      	mov	r0, r5
 8009940:	47b8      	blx	r7
 8009942:	3001      	adds	r0, #1
 8009944:	d1c2      	bne.n	80098cc <_printf_float+0x30c>
 8009946:	e687      	b.n	8009658 <_printf_float+0x98>
 8009948:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800994c:	f1b9 0f01 	cmp.w	r9, #1
 8009950:	dc01      	bgt.n	8009956 <_printf_float+0x396>
 8009952:	07db      	lsls	r3, r3, #31
 8009954:	d536      	bpl.n	80099c4 <_printf_float+0x404>
 8009956:	2301      	movs	r3, #1
 8009958:	4642      	mov	r2, r8
 800995a:	4631      	mov	r1, r6
 800995c:	4628      	mov	r0, r5
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f ae79 	beq.w	8009658 <_printf_float+0x98>
 8009966:	9b05      	ldr	r3, [sp, #20]
 8009968:	465a      	mov	r2, fp
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	f43f ae71 	beq.w	8009658 <_printf_float+0x98>
 8009976:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800997a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800997e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009982:	f109 39ff 	add.w	r9, r9, #4294967295
 8009986:	d018      	beq.n	80099ba <_printf_float+0x3fa>
 8009988:	464b      	mov	r3, r9
 800998a:	f108 0201 	add.w	r2, r8, #1
 800998e:	4631      	mov	r1, r6
 8009990:	4628      	mov	r0, r5
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	d10c      	bne.n	80099b2 <_printf_float+0x3f2>
 8009998:	e65e      	b.n	8009658 <_printf_float+0x98>
 800999a:	2301      	movs	r3, #1
 800999c:	465a      	mov	r2, fp
 800999e:	4631      	mov	r1, r6
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b8      	blx	r7
 80099a4:	3001      	adds	r0, #1
 80099a6:	f43f ae57 	beq.w	8009658 <_printf_float+0x98>
 80099aa:	f108 0801 	add.w	r8, r8, #1
 80099ae:	45c8      	cmp	r8, r9
 80099b0:	dbf3      	blt.n	800999a <_printf_float+0x3da>
 80099b2:	4653      	mov	r3, sl
 80099b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80099b8:	e6dc      	b.n	8009774 <_printf_float+0x1b4>
 80099ba:	f04f 0800 	mov.w	r8, #0
 80099be:	f104 0b1a 	add.w	fp, r4, #26
 80099c2:	e7f4      	b.n	80099ae <_printf_float+0x3ee>
 80099c4:	2301      	movs	r3, #1
 80099c6:	4642      	mov	r2, r8
 80099c8:	e7e1      	b.n	800998e <_printf_float+0x3ce>
 80099ca:	2301      	movs	r3, #1
 80099cc:	464a      	mov	r2, r9
 80099ce:	4631      	mov	r1, r6
 80099d0:	4628      	mov	r0, r5
 80099d2:	47b8      	blx	r7
 80099d4:	3001      	adds	r0, #1
 80099d6:	f43f ae3f 	beq.w	8009658 <_printf_float+0x98>
 80099da:	f108 0801 	add.w	r8, r8, #1
 80099de:	68e3      	ldr	r3, [r4, #12]
 80099e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099e2:	1a5b      	subs	r3, r3, r1
 80099e4:	4543      	cmp	r3, r8
 80099e6:	dcf0      	bgt.n	80099ca <_printf_float+0x40a>
 80099e8:	e6f8      	b.n	80097dc <_printf_float+0x21c>
 80099ea:	f04f 0800 	mov.w	r8, #0
 80099ee:	f104 0919 	add.w	r9, r4, #25
 80099f2:	e7f4      	b.n	80099de <_printf_float+0x41e>

080099f4 <_printf_common>:
 80099f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	4616      	mov	r6, r2
 80099fa:	4698      	mov	r8, r3
 80099fc:	688a      	ldr	r2, [r1, #8]
 80099fe:	690b      	ldr	r3, [r1, #16]
 8009a00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	bfb8      	it	lt
 8009a08:	4613      	movlt	r3, r2
 8009a0a:	6033      	str	r3, [r6, #0]
 8009a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a10:	4607      	mov	r7, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	b10a      	cbz	r2, 8009a1a <_printf_common+0x26>
 8009a16:	3301      	adds	r3, #1
 8009a18:	6033      	str	r3, [r6, #0]
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	0699      	lsls	r1, r3, #26
 8009a1e:	bf42      	ittt	mi
 8009a20:	6833      	ldrmi	r3, [r6, #0]
 8009a22:	3302      	addmi	r3, #2
 8009a24:	6033      	strmi	r3, [r6, #0]
 8009a26:	6825      	ldr	r5, [r4, #0]
 8009a28:	f015 0506 	ands.w	r5, r5, #6
 8009a2c:	d106      	bne.n	8009a3c <_printf_common+0x48>
 8009a2e:	f104 0a19 	add.w	sl, r4, #25
 8009a32:	68e3      	ldr	r3, [r4, #12]
 8009a34:	6832      	ldr	r2, [r6, #0]
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	dc26      	bgt.n	8009a8a <_printf_common+0x96>
 8009a3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	3b00      	subs	r3, #0
 8009a44:	bf18      	it	ne
 8009a46:	2301      	movne	r3, #1
 8009a48:	0692      	lsls	r2, r2, #26
 8009a4a:	d42b      	bmi.n	8009aa4 <_printf_common+0xb0>
 8009a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a50:	4641      	mov	r1, r8
 8009a52:	4638      	mov	r0, r7
 8009a54:	47c8      	blx	r9
 8009a56:	3001      	adds	r0, #1
 8009a58:	d01e      	beq.n	8009a98 <_printf_common+0xa4>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	6922      	ldr	r2, [r4, #16]
 8009a5e:	f003 0306 	and.w	r3, r3, #6
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	bf02      	ittt	eq
 8009a66:	68e5      	ldreq	r5, [r4, #12]
 8009a68:	6833      	ldreq	r3, [r6, #0]
 8009a6a:	1aed      	subeq	r5, r5, r3
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	bf0c      	ite	eq
 8009a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a74:	2500      	movne	r5, #0
 8009a76:	4293      	cmp	r3, r2
 8009a78:	bfc4      	itt	gt
 8009a7a:	1a9b      	subgt	r3, r3, r2
 8009a7c:	18ed      	addgt	r5, r5, r3
 8009a7e:	2600      	movs	r6, #0
 8009a80:	341a      	adds	r4, #26
 8009a82:	42b5      	cmp	r5, r6
 8009a84:	d11a      	bne.n	8009abc <_printf_common+0xc8>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e008      	b.n	8009a9c <_printf_common+0xa8>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4652      	mov	r2, sl
 8009a8e:	4641      	mov	r1, r8
 8009a90:	4638      	mov	r0, r7
 8009a92:	47c8      	blx	r9
 8009a94:	3001      	adds	r0, #1
 8009a96:	d103      	bne.n	8009aa0 <_printf_common+0xac>
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7c6      	b.n	8009a32 <_printf_common+0x3e>
 8009aa4:	18e1      	adds	r1, r4, r3
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	2030      	movs	r0, #48	@ 0x30
 8009aaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009aae:	4422      	add	r2, r4
 8009ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ab4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ab8:	3302      	adds	r3, #2
 8009aba:	e7c7      	b.n	8009a4c <_printf_common+0x58>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	47c8      	blx	r9
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d0e6      	beq.n	8009a98 <_printf_common+0xa4>
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7d9      	b.n	8009a82 <_printf_common+0x8e>
	...

08009ad0 <_printf_i>:
 8009ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	7e0f      	ldrb	r7, [r1, #24]
 8009ad6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ad8:	2f78      	cmp	r7, #120	@ 0x78
 8009ada:	4691      	mov	r9, r2
 8009adc:	4680      	mov	r8, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	469a      	mov	sl, r3
 8009ae2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ae6:	d807      	bhi.n	8009af8 <_printf_i+0x28>
 8009ae8:	2f62      	cmp	r7, #98	@ 0x62
 8009aea:	d80a      	bhi.n	8009b02 <_printf_i+0x32>
 8009aec:	2f00      	cmp	r7, #0
 8009aee:	f000 80d2 	beq.w	8009c96 <_printf_i+0x1c6>
 8009af2:	2f58      	cmp	r7, #88	@ 0x58
 8009af4:	f000 80b9 	beq.w	8009c6a <_printf_i+0x19a>
 8009af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009afc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b00:	e03a      	b.n	8009b78 <_printf_i+0xa8>
 8009b02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b06:	2b15      	cmp	r3, #21
 8009b08:	d8f6      	bhi.n	8009af8 <_printf_i+0x28>
 8009b0a:	a101      	add	r1, pc, #4	@ (adr r1, 8009b10 <_printf_i+0x40>)
 8009b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b7d 	.word	0x08009b7d
 8009b18:	08009af9 	.word	0x08009af9
 8009b1c:	08009af9 	.word	0x08009af9
 8009b20:	08009af9 	.word	0x08009af9
 8009b24:	08009af9 	.word	0x08009af9
 8009b28:	08009b7d 	.word	0x08009b7d
 8009b2c:	08009af9 	.word	0x08009af9
 8009b30:	08009af9 	.word	0x08009af9
 8009b34:	08009af9 	.word	0x08009af9
 8009b38:	08009af9 	.word	0x08009af9
 8009b3c:	08009c7d 	.word	0x08009c7d
 8009b40:	08009ba7 	.word	0x08009ba7
 8009b44:	08009c37 	.word	0x08009c37
 8009b48:	08009af9 	.word	0x08009af9
 8009b4c:	08009af9 	.word	0x08009af9
 8009b50:	08009c9f 	.word	0x08009c9f
 8009b54:	08009af9 	.word	0x08009af9
 8009b58:	08009ba7 	.word	0x08009ba7
 8009b5c:	08009af9 	.word	0x08009af9
 8009b60:	08009af9 	.word	0x08009af9
 8009b64:	08009c3f 	.word	0x08009c3f
 8009b68:	6833      	ldr	r3, [r6, #0]
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6032      	str	r2, [r6, #0]
 8009b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e09d      	b.n	8009cb8 <_printf_i+0x1e8>
 8009b7c:	6833      	ldr	r3, [r6, #0]
 8009b7e:	6820      	ldr	r0, [r4, #0]
 8009b80:	1d19      	adds	r1, r3, #4
 8009b82:	6031      	str	r1, [r6, #0]
 8009b84:	0606      	lsls	r6, r0, #24
 8009b86:	d501      	bpl.n	8009b8c <_printf_i+0xbc>
 8009b88:	681d      	ldr	r5, [r3, #0]
 8009b8a:	e003      	b.n	8009b94 <_printf_i+0xc4>
 8009b8c:	0645      	lsls	r5, r0, #25
 8009b8e:	d5fb      	bpl.n	8009b88 <_printf_i+0xb8>
 8009b90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	da03      	bge.n	8009ba0 <_printf_i+0xd0>
 8009b98:	232d      	movs	r3, #45	@ 0x2d
 8009b9a:	426d      	negs	r5, r5
 8009b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ba0:	4859      	ldr	r0, [pc, #356]	@ (8009d08 <_printf_i+0x238>)
 8009ba2:	230a      	movs	r3, #10
 8009ba4:	e011      	b.n	8009bca <_printf_i+0xfa>
 8009ba6:	6821      	ldr	r1, [r4, #0]
 8009ba8:	6833      	ldr	r3, [r6, #0]
 8009baa:	0608      	lsls	r0, r1, #24
 8009bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bb0:	d402      	bmi.n	8009bb8 <_printf_i+0xe8>
 8009bb2:	0649      	lsls	r1, r1, #25
 8009bb4:	bf48      	it	mi
 8009bb6:	b2ad      	uxthmi	r5, r5
 8009bb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bba:	4853      	ldr	r0, [pc, #332]	@ (8009d08 <_printf_i+0x238>)
 8009bbc:	6033      	str	r3, [r6, #0]
 8009bbe:	bf14      	ite	ne
 8009bc0:	230a      	movne	r3, #10
 8009bc2:	2308      	moveq	r3, #8
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bca:	6866      	ldr	r6, [r4, #4]
 8009bcc:	60a6      	str	r6, [r4, #8]
 8009bce:	2e00      	cmp	r6, #0
 8009bd0:	bfa2      	ittt	ge
 8009bd2:	6821      	ldrge	r1, [r4, #0]
 8009bd4:	f021 0104 	bicge.w	r1, r1, #4
 8009bd8:	6021      	strge	r1, [r4, #0]
 8009bda:	b90d      	cbnz	r5, 8009be0 <_printf_i+0x110>
 8009bdc:	2e00      	cmp	r6, #0
 8009bde:	d04b      	beq.n	8009c78 <_printf_i+0x1a8>
 8009be0:	4616      	mov	r6, r2
 8009be2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009be6:	fb03 5711 	mls	r7, r3, r1, r5
 8009bea:	5dc7      	ldrb	r7, [r0, r7]
 8009bec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bf0:	462f      	mov	r7, r5
 8009bf2:	42bb      	cmp	r3, r7
 8009bf4:	460d      	mov	r5, r1
 8009bf6:	d9f4      	bls.n	8009be2 <_printf_i+0x112>
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d10b      	bne.n	8009c14 <_printf_i+0x144>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07df      	lsls	r7, r3, #31
 8009c00:	d508      	bpl.n	8009c14 <_printf_i+0x144>
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	6861      	ldr	r1, [r4, #4]
 8009c06:	4299      	cmp	r1, r3
 8009c08:	bfde      	ittt	le
 8009c0a:	2330      	movle	r3, #48	@ 0x30
 8009c0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c14:	1b92      	subs	r2, r2, r6
 8009c16:	6122      	str	r2, [r4, #16]
 8009c18:	f8cd a000 	str.w	sl, [sp]
 8009c1c:	464b      	mov	r3, r9
 8009c1e:	aa03      	add	r2, sp, #12
 8009c20:	4621      	mov	r1, r4
 8009c22:	4640      	mov	r0, r8
 8009c24:	f7ff fee6 	bl	80099f4 <_printf_common>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d14a      	bne.n	8009cc2 <_printf_i+0x1f2>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	b004      	add	sp, #16
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	f043 0320 	orr.w	r3, r3, #32
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	4833      	ldr	r0, [pc, #204]	@ (8009d0c <_printf_i+0x23c>)
 8009c40:	2778      	movs	r7, #120	@ 0x78
 8009c42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	6831      	ldr	r1, [r6, #0]
 8009c4a:	061f      	lsls	r7, r3, #24
 8009c4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c50:	d402      	bmi.n	8009c58 <_printf_i+0x188>
 8009c52:	065f      	lsls	r7, r3, #25
 8009c54:	bf48      	it	mi
 8009c56:	b2ad      	uxthmi	r5, r5
 8009c58:	6031      	str	r1, [r6, #0]
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	bf44      	itt	mi
 8009c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c62:	6023      	strmi	r3, [r4, #0]
 8009c64:	b11d      	cbz	r5, 8009c6e <_printf_i+0x19e>
 8009c66:	2310      	movs	r3, #16
 8009c68:	e7ac      	b.n	8009bc4 <_printf_i+0xf4>
 8009c6a:	4827      	ldr	r0, [pc, #156]	@ (8009d08 <_printf_i+0x238>)
 8009c6c:	e7e9      	b.n	8009c42 <_printf_i+0x172>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	f023 0320 	bic.w	r3, r3, #32
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	e7f6      	b.n	8009c66 <_printf_i+0x196>
 8009c78:	4616      	mov	r6, r2
 8009c7a:	e7bd      	b.n	8009bf8 <_printf_i+0x128>
 8009c7c:	6833      	ldr	r3, [r6, #0]
 8009c7e:	6825      	ldr	r5, [r4, #0]
 8009c80:	6961      	ldr	r1, [r4, #20]
 8009c82:	1d18      	adds	r0, r3, #4
 8009c84:	6030      	str	r0, [r6, #0]
 8009c86:	062e      	lsls	r6, r5, #24
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	d501      	bpl.n	8009c90 <_printf_i+0x1c0>
 8009c8c:	6019      	str	r1, [r3, #0]
 8009c8e:	e002      	b.n	8009c96 <_printf_i+0x1c6>
 8009c90:	0668      	lsls	r0, r5, #25
 8009c92:	d5fb      	bpl.n	8009c8c <_printf_i+0x1bc>
 8009c94:	8019      	strh	r1, [r3, #0]
 8009c96:	2300      	movs	r3, #0
 8009c98:	6123      	str	r3, [r4, #16]
 8009c9a:	4616      	mov	r6, r2
 8009c9c:	e7bc      	b.n	8009c18 <_printf_i+0x148>
 8009c9e:	6833      	ldr	r3, [r6, #0]
 8009ca0:	1d1a      	adds	r2, r3, #4
 8009ca2:	6032      	str	r2, [r6, #0]
 8009ca4:	681e      	ldr	r6, [r3, #0]
 8009ca6:	6862      	ldr	r2, [r4, #4]
 8009ca8:	2100      	movs	r1, #0
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7f6 fb18 	bl	80002e0 <memchr>
 8009cb0:	b108      	cbz	r0, 8009cb6 <_printf_i+0x1e6>
 8009cb2:	1b80      	subs	r0, r0, r6
 8009cb4:	6060      	str	r0, [r4, #4]
 8009cb6:	6863      	ldr	r3, [r4, #4]
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cc0:	e7aa      	b.n	8009c18 <_printf_i+0x148>
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	4649      	mov	r1, r9
 8009cc8:	4640      	mov	r0, r8
 8009cca:	47d0      	blx	sl
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d0ad      	beq.n	8009c2c <_printf_i+0x15c>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	079b      	lsls	r3, r3, #30
 8009cd4:	d413      	bmi.n	8009cfe <_printf_i+0x22e>
 8009cd6:	68e0      	ldr	r0, [r4, #12]
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	4298      	cmp	r0, r3
 8009cdc:	bfb8      	it	lt
 8009cde:	4618      	movlt	r0, r3
 8009ce0:	e7a6      	b.n	8009c30 <_printf_i+0x160>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	4640      	mov	r0, r8
 8009cea:	47d0      	blx	sl
 8009cec:	3001      	adds	r0, #1
 8009cee:	d09d      	beq.n	8009c2c <_printf_i+0x15c>
 8009cf0:	3501      	adds	r5, #1
 8009cf2:	68e3      	ldr	r3, [r4, #12]
 8009cf4:	9903      	ldr	r1, [sp, #12]
 8009cf6:	1a5b      	subs	r3, r3, r1
 8009cf8:	42ab      	cmp	r3, r5
 8009cfa:	dcf2      	bgt.n	8009ce2 <_printf_i+0x212>
 8009cfc:	e7eb      	b.n	8009cd6 <_printf_i+0x206>
 8009cfe:	2500      	movs	r5, #0
 8009d00:	f104 0619 	add.w	r6, r4, #25
 8009d04:	e7f5      	b.n	8009cf2 <_printf_i+0x222>
 8009d06:	bf00      	nop
 8009d08:	0800e17e 	.word	0x0800e17e
 8009d0c:	0800e18f 	.word	0x0800e18f

08009d10 <_scanf_float>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	b087      	sub	sp, #28
 8009d16:	4617      	mov	r7, r2
 8009d18:	9303      	str	r3, [sp, #12]
 8009d1a:	688b      	ldr	r3, [r1, #8]
 8009d1c:	1e5a      	subs	r2, r3, #1
 8009d1e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009d22:	bf81      	itttt	hi
 8009d24:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009d28:	eb03 0b05 	addhi.w	fp, r3, r5
 8009d2c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009d30:	608b      	strhi	r3, [r1, #8]
 8009d32:	680b      	ldr	r3, [r1, #0]
 8009d34:	460a      	mov	r2, r1
 8009d36:	f04f 0500 	mov.w	r5, #0
 8009d3a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009d3e:	f842 3b1c 	str.w	r3, [r2], #28
 8009d42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009d46:	4680      	mov	r8, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	bf98      	it	ls
 8009d4c:	f04f 0b00 	movls.w	fp, #0
 8009d50:	9201      	str	r2, [sp, #4]
 8009d52:	4616      	mov	r6, r2
 8009d54:	46aa      	mov	sl, r5
 8009d56:	46a9      	mov	r9, r5
 8009d58:	9502      	str	r5, [sp, #8]
 8009d5a:	68a2      	ldr	r2, [r4, #8]
 8009d5c:	b152      	cbz	r2, 8009d74 <_scanf_float+0x64>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	2b4e      	cmp	r3, #78	@ 0x4e
 8009d64:	d864      	bhi.n	8009e30 <_scanf_float+0x120>
 8009d66:	2b40      	cmp	r3, #64	@ 0x40
 8009d68:	d83c      	bhi.n	8009de4 <_scanf_float+0xd4>
 8009d6a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009d6e:	b2c8      	uxtb	r0, r1
 8009d70:	280e      	cmp	r0, #14
 8009d72:	d93a      	bls.n	8009dea <_scanf_float+0xda>
 8009d74:	f1b9 0f00 	cmp.w	r9, #0
 8009d78:	d003      	beq.n	8009d82 <_scanf_float+0x72>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d86:	f1ba 0f01 	cmp.w	sl, #1
 8009d8a:	f200 8117 	bhi.w	8009fbc <_scanf_float+0x2ac>
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	429e      	cmp	r6, r3
 8009d92:	f200 8108 	bhi.w	8009fa6 <_scanf_float+0x296>
 8009d96:	2001      	movs	r0, #1
 8009d98:	b007      	add	sp, #28
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009da2:	2a0d      	cmp	r2, #13
 8009da4:	d8e6      	bhi.n	8009d74 <_scanf_float+0x64>
 8009da6:	a101      	add	r1, pc, #4	@ (adr r1, 8009dac <_scanf_float+0x9c>)
 8009da8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009dac:	08009ef3 	.word	0x08009ef3
 8009db0:	08009d75 	.word	0x08009d75
 8009db4:	08009d75 	.word	0x08009d75
 8009db8:	08009d75 	.word	0x08009d75
 8009dbc:	08009f53 	.word	0x08009f53
 8009dc0:	08009f2b 	.word	0x08009f2b
 8009dc4:	08009d75 	.word	0x08009d75
 8009dc8:	08009d75 	.word	0x08009d75
 8009dcc:	08009f01 	.word	0x08009f01
 8009dd0:	08009d75 	.word	0x08009d75
 8009dd4:	08009d75 	.word	0x08009d75
 8009dd8:	08009d75 	.word	0x08009d75
 8009ddc:	08009d75 	.word	0x08009d75
 8009de0:	08009eb9 	.word	0x08009eb9
 8009de4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009de8:	e7db      	b.n	8009da2 <_scanf_float+0x92>
 8009dea:	290e      	cmp	r1, #14
 8009dec:	d8c2      	bhi.n	8009d74 <_scanf_float+0x64>
 8009dee:	a001      	add	r0, pc, #4	@ (adr r0, 8009df4 <_scanf_float+0xe4>)
 8009df0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009df4:	08009ea9 	.word	0x08009ea9
 8009df8:	08009d75 	.word	0x08009d75
 8009dfc:	08009ea9 	.word	0x08009ea9
 8009e00:	08009f3f 	.word	0x08009f3f
 8009e04:	08009d75 	.word	0x08009d75
 8009e08:	08009e51 	.word	0x08009e51
 8009e0c:	08009e8f 	.word	0x08009e8f
 8009e10:	08009e8f 	.word	0x08009e8f
 8009e14:	08009e8f 	.word	0x08009e8f
 8009e18:	08009e8f 	.word	0x08009e8f
 8009e1c:	08009e8f 	.word	0x08009e8f
 8009e20:	08009e8f 	.word	0x08009e8f
 8009e24:	08009e8f 	.word	0x08009e8f
 8009e28:	08009e8f 	.word	0x08009e8f
 8009e2c:	08009e8f 	.word	0x08009e8f
 8009e30:	2b6e      	cmp	r3, #110	@ 0x6e
 8009e32:	d809      	bhi.n	8009e48 <_scanf_float+0x138>
 8009e34:	2b60      	cmp	r3, #96	@ 0x60
 8009e36:	d8b2      	bhi.n	8009d9e <_scanf_float+0x8e>
 8009e38:	2b54      	cmp	r3, #84	@ 0x54
 8009e3a:	d07b      	beq.n	8009f34 <_scanf_float+0x224>
 8009e3c:	2b59      	cmp	r3, #89	@ 0x59
 8009e3e:	d199      	bne.n	8009d74 <_scanf_float+0x64>
 8009e40:	2d07      	cmp	r5, #7
 8009e42:	d197      	bne.n	8009d74 <_scanf_float+0x64>
 8009e44:	2508      	movs	r5, #8
 8009e46:	e02c      	b.n	8009ea2 <_scanf_float+0x192>
 8009e48:	2b74      	cmp	r3, #116	@ 0x74
 8009e4a:	d073      	beq.n	8009f34 <_scanf_float+0x224>
 8009e4c:	2b79      	cmp	r3, #121	@ 0x79
 8009e4e:	e7f6      	b.n	8009e3e <_scanf_float+0x12e>
 8009e50:	6821      	ldr	r1, [r4, #0]
 8009e52:	05c8      	lsls	r0, r1, #23
 8009e54:	d51b      	bpl.n	8009e8e <_scanf_float+0x17e>
 8009e56:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009e5a:	6021      	str	r1, [r4, #0]
 8009e5c:	f109 0901 	add.w	r9, r9, #1
 8009e60:	f1bb 0f00 	cmp.w	fp, #0
 8009e64:	d003      	beq.n	8009e6e <_scanf_float+0x15e>
 8009e66:	3201      	adds	r2, #1
 8009e68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e6c:	60a2      	str	r2, [r4, #8]
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	3b01      	subs	r3, #1
 8009e72:	60a3      	str	r3, [r4, #8]
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	3301      	adds	r3, #1
 8009e78:	6123      	str	r3, [r4, #16]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	607b      	str	r3, [r7, #4]
 8009e82:	f340 8087 	ble.w	8009f94 <_scanf_float+0x284>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	e765      	b.n	8009d5a <_scanf_float+0x4a>
 8009e8e:	eb1a 0105 	adds.w	r1, sl, r5
 8009e92:	f47f af6f 	bne.w	8009d74 <_scanf_float+0x64>
 8009e96:	6822      	ldr	r2, [r4, #0]
 8009e98:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009e9c:	6022      	str	r2, [r4, #0]
 8009e9e:	460d      	mov	r5, r1
 8009ea0:	468a      	mov	sl, r1
 8009ea2:	f806 3b01 	strb.w	r3, [r6], #1
 8009ea6:	e7e2      	b.n	8009e6e <_scanf_float+0x15e>
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	0610      	lsls	r0, r2, #24
 8009eac:	f57f af62 	bpl.w	8009d74 <_scanf_float+0x64>
 8009eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009eb4:	6022      	str	r2, [r4, #0]
 8009eb6:	e7f4      	b.n	8009ea2 <_scanf_float+0x192>
 8009eb8:	f1ba 0f00 	cmp.w	sl, #0
 8009ebc:	d10e      	bne.n	8009edc <_scanf_float+0x1cc>
 8009ebe:	f1b9 0f00 	cmp.w	r9, #0
 8009ec2:	d10e      	bne.n	8009ee2 <_scanf_float+0x1d2>
 8009ec4:	6822      	ldr	r2, [r4, #0]
 8009ec6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009eca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009ece:	d108      	bne.n	8009ee2 <_scanf_float+0x1d2>
 8009ed0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ed4:	6022      	str	r2, [r4, #0]
 8009ed6:	f04f 0a01 	mov.w	sl, #1
 8009eda:	e7e2      	b.n	8009ea2 <_scanf_float+0x192>
 8009edc:	f1ba 0f02 	cmp.w	sl, #2
 8009ee0:	d055      	beq.n	8009f8e <_scanf_float+0x27e>
 8009ee2:	2d01      	cmp	r5, #1
 8009ee4:	d002      	beq.n	8009eec <_scanf_float+0x1dc>
 8009ee6:	2d04      	cmp	r5, #4
 8009ee8:	f47f af44 	bne.w	8009d74 <_scanf_float+0x64>
 8009eec:	3501      	adds	r5, #1
 8009eee:	b2ed      	uxtb	r5, r5
 8009ef0:	e7d7      	b.n	8009ea2 <_scanf_float+0x192>
 8009ef2:	f1ba 0f01 	cmp.w	sl, #1
 8009ef6:	f47f af3d 	bne.w	8009d74 <_scanf_float+0x64>
 8009efa:	f04f 0a02 	mov.w	sl, #2
 8009efe:	e7d0      	b.n	8009ea2 <_scanf_float+0x192>
 8009f00:	b97d      	cbnz	r5, 8009f22 <_scanf_float+0x212>
 8009f02:	f1b9 0f00 	cmp.w	r9, #0
 8009f06:	f47f af38 	bne.w	8009d7a <_scanf_float+0x6a>
 8009f0a:	6822      	ldr	r2, [r4, #0]
 8009f0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009f10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009f14:	f040 8101 	bne.w	800a11a <_scanf_float+0x40a>
 8009f18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f1c:	6022      	str	r2, [r4, #0]
 8009f1e:	2501      	movs	r5, #1
 8009f20:	e7bf      	b.n	8009ea2 <_scanf_float+0x192>
 8009f22:	2d03      	cmp	r5, #3
 8009f24:	d0e2      	beq.n	8009eec <_scanf_float+0x1dc>
 8009f26:	2d05      	cmp	r5, #5
 8009f28:	e7de      	b.n	8009ee8 <_scanf_float+0x1d8>
 8009f2a:	2d02      	cmp	r5, #2
 8009f2c:	f47f af22 	bne.w	8009d74 <_scanf_float+0x64>
 8009f30:	2503      	movs	r5, #3
 8009f32:	e7b6      	b.n	8009ea2 <_scanf_float+0x192>
 8009f34:	2d06      	cmp	r5, #6
 8009f36:	f47f af1d 	bne.w	8009d74 <_scanf_float+0x64>
 8009f3a:	2507      	movs	r5, #7
 8009f3c:	e7b1      	b.n	8009ea2 <_scanf_float+0x192>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	0591      	lsls	r1, r2, #22
 8009f42:	f57f af17 	bpl.w	8009d74 <_scanf_float+0x64>
 8009f46:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009f4a:	6022      	str	r2, [r4, #0]
 8009f4c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f50:	e7a7      	b.n	8009ea2 <_scanf_float+0x192>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009f58:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009f5c:	d006      	beq.n	8009f6c <_scanf_float+0x25c>
 8009f5e:	0550      	lsls	r0, r2, #21
 8009f60:	f57f af08 	bpl.w	8009d74 <_scanf_float+0x64>
 8009f64:	f1b9 0f00 	cmp.w	r9, #0
 8009f68:	f000 80d7 	beq.w	800a11a <_scanf_float+0x40a>
 8009f6c:	0591      	lsls	r1, r2, #22
 8009f6e:	bf58      	it	pl
 8009f70:	9902      	ldrpl	r1, [sp, #8]
 8009f72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f76:	bf58      	it	pl
 8009f78:	eba9 0101 	subpl.w	r1, r9, r1
 8009f7c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009f80:	bf58      	it	pl
 8009f82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	f04f 0900 	mov.w	r9, #0
 8009f8c:	e789      	b.n	8009ea2 <_scanf_float+0x192>
 8009f8e:	f04f 0a03 	mov.w	sl, #3
 8009f92:	e786      	b.n	8009ea2 <_scanf_float+0x192>
 8009f94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009f98:	4639      	mov	r1, r7
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	4798      	blx	r3
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f43f aedb 	beq.w	8009d5a <_scanf_float+0x4a>
 8009fa4:	e6e6      	b.n	8009d74 <_scanf_float+0x64>
 8009fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009faa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fae:	463a      	mov	r2, r7
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4798      	blx	r3
 8009fb4:	6923      	ldr	r3, [r4, #16]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	6123      	str	r3, [r4, #16]
 8009fba:	e6e8      	b.n	8009d8e <_scanf_float+0x7e>
 8009fbc:	1e6b      	subs	r3, r5, #1
 8009fbe:	2b06      	cmp	r3, #6
 8009fc0:	d824      	bhi.n	800a00c <_scanf_float+0x2fc>
 8009fc2:	2d02      	cmp	r5, #2
 8009fc4:	d836      	bhi.n	800a034 <_scanf_float+0x324>
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	429e      	cmp	r6, r3
 8009fca:	f67f aee4 	bls.w	8009d96 <_scanf_float+0x86>
 8009fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fd6:	463a      	mov	r2, r7
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4798      	blx	r3
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	6123      	str	r3, [r4, #16]
 8009fe2:	e7f0      	b.n	8009fc6 <_scanf_float+0x2b6>
 8009fe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fe8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009fec:	463a      	mov	r2, r7
 8009fee:	4640      	mov	r0, r8
 8009ff0:	4798      	blx	r3
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	6123      	str	r3, [r4, #16]
 8009ff8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ffc:	fa5f fa8a 	uxtb.w	sl, sl
 800a000:	f1ba 0f02 	cmp.w	sl, #2
 800a004:	d1ee      	bne.n	8009fe4 <_scanf_float+0x2d4>
 800a006:	3d03      	subs	r5, #3
 800a008:	b2ed      	uxtb	r5, r5
 800a00a:	1b76      	subs	r6, r6, r5
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	05da      	lsls	r2, r3, #23
 800a010:	d530      	bpl.n	800a074 <_scanf_float+0x364>
 800a012:	055b      	lsls	r3, r3, #21
 800a014:	d511      	bpl.n	800a03a <_scanf_float+0x32a>
 800a016:	9b01      	ldr	r3, [sp, #4]
 800a018:	429e      	cmp	r6, r3
 800a01a:	f67f aebc 	bls.w	8009d96 <_scanf_float+0x86>
 800a01e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a022:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a026:	463a      	mov	r2, r7
 800a028:	4640      	mov	r0, r8
 800a02a:	4798      	blx	r3
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	3b01      	subs	r3, #1
 800a030:	6123      	str	r3, [r4, #16]
 800a032:	e7f0      	b.n	800a016 <_scanf_float+0x306>
 800a034:	46aa      	mov	sl, r5
 800a036:	46b3      	mov	fp, r6
 800a038:	e7de      	b.n	8009ff8 <_scanf_float+0x2e8>
 800a03a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	2965      	cmp	r1, #101	@ 0x65
 800a042:	f103 33ff 	add.w	r3, r3, #4294967295
 800a046:	f106 35ff 	add.w	r5, r6, #4294967295
 800a04a:	6123      	str	r3, [r4, #16]
 800a04c:	d00c      	beq.n	800a068 <_scanf_float+0x358>
 800a04e:	2945      	cmp	r1, #69	@ 0x45
 800a050:	d00a      	beq.n	800a068 <_scanf_float+0x358>
 800a052:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a056:	463a      	mov	r2, r7
 800a058:	4640      	mov	r0, r8
 800a05a:	4798      	blx	r3
 800a05c:	6923      	ldr	r3, [r4, #16]
 800a05e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a062:	3b01      	subs	r3, #1
 800a064:	1eb5      	subs	r5, r6, #2
 800a066:	6123      	str	r3, [r4, #16]
 800a068:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a06c:	463a      	mov	r2, r7
 800a06e:	4640      	mov	r0, r8
 800a070:	4798      	blx	r3
 800a072:	462e      	mov	r6, r5
 800a074:	6822      	ldr	r2, [r4, #0]
 800a076:	f012 0210 	ands.w	r2, r2, #16
 800a07a:	d001      	beq.n	800a080 <_scanf_float+0x370>
 800a07c:	2000      	movs	r0, #0
 800a07e:	e68b      	b.n	8009d98 <_scanf_float+0x88>
 800a080:	7032      	strb	r2, [r6, #0]
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a08c:	d11a      	bne.n	800a0c4 <_scanf_float+0x3b4>
 800a08e:	9b02      	ldr	r3, [sp, #8]
 800a090:	454b      	cmp	r3, r9
 800a092:	eba3 0209 	sub.w	r2, r3, r9
 800a096:	d121      	bne.n	800a0dc <_scanf_float+0x3cc>
 800a098:	9901      	ldr	r1, [sp, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	4640      	mov	r0, r8
 800a09e:	f002 fc61 	bl	800c964 <_strtod_r>
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	6821      	ldr	r1, [r4, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f011 0f02 	tst.w	r1, #2
 800a0ac:	f103 0204 	add.w	r2, r3, #4
 800a0b0:	d01f      	beq.n	800a0f2 <_scanf_float+0x3e2>
 800a0b2:	9903      	ldr	r1, [sp, #12]
 800a0b4:	600a      	str	r2, [r1, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	ed83 0b00 	vstr	d0, [r3]
 800a0bc:	68e3      	ldr	r3, [r4, #12]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	60e3      	str	r3, [r4, #12]
 800a0c2:	e7db      	b.n	800a07c <_scanf_float+0x36c>
 800a0c4:	9b04      	ldr	r3, [sp, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0e6      	beq.n	800a098 <_scanf_float+0x388>
 800a0ca:	9905      	ldr	r1, [sp, #20]
 800a0cc:	230a      	movs	r3, #10
 800a0ce:	3101      	adds	r1, #1
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	f002 fcc7 	bl	800ca64 <_strtol_r>
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	9e05      	ldr	r6, [sp, #20]
 800a0da:	1ac2      	subs	r2, r0, r3
 800a0dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a0e0:	429e      	cmp	r6, r3
 800a0e2:	bf28      	it	cs
 800a0e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a0e8:	490d      	ldr	r1, [pc, #52]	@ (800a120 <_scanf_float+0x410>)
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f000 f970 	bl	800a3d0 <siprintf>
 800a0f0:	e7d2      	b.n	800a098 <_scanf_float+0x388>
 800a0f2:	f011 0f04 	tst.w	r1, #4
 800a0f6:	9903      	ldr	r1, [sp, #12]
 800a0f8:	600a      	str	r2, [r1, #0]
 800a0fa:	d1dc      	bne.n	800a0b6 <_scanf_float+0x3a6>
 800a0fc:	eeb4 0b40 	vcmp.f64	d0, d0
 800a100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a104:	681d      	ldr	r5, [r3, #0]
 800a106:	d705      	bvc.n	800a114 <_scanf_float+0x404>
 800a108:	4806      	ldr	r0, [pc, #24]	@ (800a124 <_scanf_float+0x414>)
 800a10a:	f000 fae7 	bl	800a6dc <nanf>
 800a10e:	ed85 0a00 	vstr	s0, [r5]
 800a112:	e7d3      	b.n	800a0bc <_scanf_float+0x3ac>
 800a114:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a118:	e7f9      	b.n	800a10e <_scanf_float+0x3fe>
 800a11a:	f04f 0900 	mov.w	r9, #0
 800a11e:	e630      	b.n	8009d82 <_scanf_float+0x72>
 800a120:	0800e1a0 	.word	0x0800e1a0
 800a124:	0800e535 	.word	0x0800e535

0800a128 <std>:
 800a128:	2300      	movs	r3, #0
 800a12a:	b510      	push	{r4, lr}
 800a12c:	4604      	mov	r4, r0
 800a12e:	e9c0 3300 	strd	r3, r3, [r0]
 800a132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a136:	6083      	str	r3, [r0, #8]
 800a138:	8181      	strh	r1, [r0, #12]
 800a13a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a13c:	81c2      	strh	r2, [r0, #14]
 800a13e:	6183      	str	r3, [r0, #24]
 800a140:	4619      	mov	r1, r3
 800a142:	2208      	movs	r2, #8
 800a144:	305c      	adds	r0, #92	@ 0x5c
 800a146:	f000 fa3b 	bl	800a5c0 <memset>
 800a14a:	4b0d      	ldr	r3, [pc, #52]	@ (800a180 <std+0x58>)
 800a14c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a14e:	4b0d      	ldr	r3, [pc, #52]	@ (800a184 <std+0x5c>)
 800a150:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a152:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <std+0x60>)
 800a154:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a156:	4b0d      	ldr	r3, [pc, #52]	@ (800a18c <std+0x64>)
 800a158:	6323      	str	r3, [r4, #48]	@ 0x30
 800a15a:	4b0d      	ldr	r3, [pc, #52]	@ (800a190 <std+0x68>)
 800a15c:	6224      	str	r4, [r4, #32]
 800a15e:	429c      	cmp	r4, r3
 800a160:	d006      	beq.n	800a170 <std+0x48>
 800a162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a166:	4294      	cmp	r4, r2
 800a168:	d002      	beq.n	800a170 <std+0x48>
 800a16a:	33d0      	adds	r3, #208	@ 0xd0
 800a16c:	429c      	cmp	r4, r3
 800a16e:	d105      	bne.n	800a17c <std+0x54>
 800a170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a178:	f000 ba9e 	b.w	800a6b8 <__retarget_lock_init_recursive>
 800a17c:	bd10      	pop	{r4, pc}
 800a17e:	bf00      	nop
 800a180:	0800a411 	.word	0x0800a411
 800a184:	0800a433 	.word	0x0800a433
 800a188:	0800a46b 	.word	0x0800a46b
 800a18c:	0800a48f 	.word	0x0800a48f
 800a190:	240005d8 	.word	0x240005d8

0800a194 <stdio_exit_handler>:
 800a194:	4a02      	ldr	r2, [pc, #8]	@ (800a1a0 <stdio_exit_handler+0xc>)
 800a196:	4903      	ldr	r1, [pc, #12]	@ (800a1a4 <stdio_exit_handler+0x10>)
 800a198:	4803      	ldr	r0, [pc, #12]	@ (800a1a8 <stdio_exit_handler+0x14>)
 800a19a:	f000 b869 	b.w	800a270 <_fwalk_sglue>
 800a19e:	bf00      	nop
 800a1a0:	24000030 	.word	0x24000030
 800a1a4:	0800ce21 	.word	0x0800ce21
 800a1a8:	24000040 	.word	0x24000040

0800a1ac <cleanup_stdio>:
 800a1ac:	6841      	ldr	r1, [r0, #4]
 800a1ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e0 <cleanup_stdio+0x34>)
 800a1b0:	4299      	cmp	r1, r3
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	d001      	beq.n	800a1bc <cleanup_stdio+0x10>
 800a1b8:	f002 fe32 	bl	800ce20 <_fflush_r>
 800a1bc:	68a1      	ldr	r1, [r4, #8]
 800a1be:	4b09      	ldr	r3, [pc, #36]	@ (800a1e4 <cleanup_stdio+0x38>)
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	d002      	beq.n	800a1ca <cleanup_stdio+0x1e>
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f002 fe2b 	bl	800ce20 <_fflush_r>
 800a1ca:	68e1      	ldr	r1, [r4, #12]
 800a1cc:	4b06      	ldr	r3, [pc, #24]	@ (800a1e8 <cleanup_stdio+0x3c>)
 800a1ce:	4299      	cmp	r1, r3
 800a1d0:	d004      	beq.n	800a1dc <cleanup_stdio+0x30>
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d8:	f002 be22 	b.w	800ce20 <_fflush_r>
 800a1dc:	bd10      	pop	{r4, pc}
 800a1de:	bf00      	nop
 800a1e0:	240005d8 	.word	0x240005d8
 800a1e4:	24000640 	.word	0x24000640
 800a1e8:	240006a8 	.word	0x240006a8

0800a1ec <global_stdio_init.part.0>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a21c <global_stdio_init.part.0+0x30>)
 800a1f0:	4c0b      	ldr	r4, [pc, #44]	@ (800a220 <global_stdio_init.part.0+0x34>)
 800a1f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a224 <global_stdio_init.part.0+0x38>)
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2104      	movs	r1, #4
 800a1fc:	f7ff ff94 	bl	800a128 <std>
 800a200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a204:	2201      	movs	r2, #1
 800a206:	2109      	movs	r1, #9
 800a208:	f7ff ff8e 	bl	800a128 <std>
 800a20c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a210:	2202      	movs	r2, #2
 800a212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a216:	2112      	movs	r1, #18
 800a218:	f7ff bf86 	b.w	800a128 <std>
 800a21c:	24000710 	.word	0x24000710
 800a220:	240005d8 	.word	0x240005d8
 800a224:	0800a195 	.word	0x0800a195

0800a228 <__sfp_lock_acquire>:
 800a228:	4801      	ldr	r0, [pc, #4]	@ (800a230 <__sfp_lock_acquire+0x8>)
 800a22a:	f000 ba46 	b.w	800a6ba <__retarget_lock_acquire_recursive>
 800a22e:	bf00      	nop
 800a230:	24000719 	.word	0x24000719

0800a234 <__sfp_lock_release>:
 800a234:	4801      	ldr	r0, [pc, #4]	@ (800a23c <__sfp_lock_release+0x8>)
 800a236:	f000 ba41 	b.w	800a6bc <__retarget_lock_release_recursive>
 800a23a:	bf00      	nop
 800a23c:	24000719 	.word	0x24000719

0800a240 <__sinit>:
 800a240:	b510      	push	{r4, lr}
 800a242:	4604      	mov	r4, r0
 800a244:	f7ff fff0 	bl	800a228 <__sfp_lock_acquire>
 800a248:	6a23      	ldr	r3, [r4, #32]
 800a24a:	b11b      	cbz	r3, 800a254 <__sinit+0x14>
 800a24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a250:	f7ff bff0 	b.w	800a234 <__sfp_lock_release>
 800a254:	4b04      	ldr	r3, [pc, #16]	@ (800a268 <__sinit+0x28>)
 800a256:	6223      	str	r3, [r4, #32]
 800a258:	4b04      	ldr	r3, [pc, #16]	@ (800a26c <__sinit+0x2c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1f5      	bne.n	800a24c <__sinit+0xc>
 800a260:	f7ff ffc4 	bl	800a1ec <global_stdio_init.part.0>
 800a264:	e7f2      	b.n	800a24c <__sinit+0xc>
 800a266:	bf00      	nop
 800a268:	0800a1ad 	.word	0x0800a1ad
 800a26c:	24000710 	.word	0x24000710

0800a270 <_fwalk_sglue>:
 800a270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a274:	4607      	mov	r7, r0
 800a276:	4688      	mov	r8, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	2600      	movs	r6, #0
 800a27c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a280:	f1b9 0901 	subs.w	r9, r9, #1
 800a284:	d505      	bpl.n	800a292 <_fwalk_sglue+0x22>
 800a286:	6824      	ldr	r4, [r4, #0]
 800a288:	2c00      	cmp	r4, #0
 800a28a:	d1f7      	bne.n	800a27c <_fwalk_sglue+0xc>
 800a28c:	4630      	mov	r0, r6
 800a28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d907      	bls.n	800a2a8 <_fwalk_sglue+0x38>
 800a298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a29c:	3301      	adds	r3, #1
 800a29e:	d003      	beq.n	800a2a8 <_fwalk_sglue+0x38>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	47c0      	blx	r8
 800a2a6:	4306      	orrs	r6, r0
 800a2a8:	3568      	adds	r5, #104	@ 0x68
 800a2aa:	e7e9      	b.n	800a280 <_fwalk_sglue+0x10>

0800a2ac <_puts_r>:
 800a2ac:	6a03      	ldr	r3, [r0, #32]
 800a2ae:	b570      	push	{r4, r5, r6, lr}
 800a2b0:	6884      	ldr	r4, [r0, #8]
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	460e      	mov	r6, r1
 800a2b6:	b90b      	cbnz	r3, 800a2bc <_puts_r+0x10>
 800a2b8:	f7ff ffc2 	bl	800a240 <__sinit>
 800a2bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2be:	07db      	lsls	r3, r3, #31
 800a2c0:	d405      	bmi.n	800a2ce <_puts_r+0x22>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	0598      	lsls	r0, r3, #22
 800a2c6:	d402      	bmi.n	800a2ce <_puts_r+0x22>
 800a2c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2ca:	f000 f9f6 	bl	800a6ba <__retarget_lock_acquire_recursive>
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	0719      	lsls	r1, r3, #28
 800a2d2:	d502      	bpl.n	800a2da <_puts_r+0x2e>
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d135      	bne.n	800a346 <_puts_r+0x9a>
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f000 f919 	bl	800a514 <__swsetup_r>
 800a2e2:	b380      	cbz	r0, 800a346 <_puts_r+0x9a>
 800a2e4:	f04f 35ff 	mov.w	r5, #4294967295
 800a2e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2ea:	07da      	lsls	r2, r3, #31
 800a2ec:	d405      	bmi.n	800a2fa <_puts_r+0x4e>
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	059b      	lsls	r3, r3, #22
 800a2f2:	d402      	bmi.n	800a2fa <_puts_r+0x4e>
 800a2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2f6:	f000 f9e1 	bl	800a6bc <__retarget_lock_release_recursive>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	bd70      	pop	{r4, r5, r6, pc}
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	da04      	bge.n	800a30c <_puts_r+0x60>
 800a302:	69a2      	ldr	r2, [r4, #24]
 800a304:	429a      	cmp	r2, r3
 800a306:	dc17      	bgt.n	800a338 <_puts_r+0x8c>
 800a308:	290a      	cmp	r1, #10
 800a30a:	d015      	beq.n	800a338 <_puts_r+0x8c>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	1c5a      	adds	r2, r3, #1
 800a310:	6022      	str	r2, [r4, #0]
 800a312:	7019      	strb	r1, [r3, #0]
 800a314:	68a3      	ldr	r3, [r4, #8]
 800a316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a31a:	3b01      	subs	r3, #1
 800a31c:	60a3      	str	r3, [r4, #8]
 800a31e:	2900      	cmp	r1, #0
 800a320:	d1ed      	bne.n	800a2fe <_puts_r+0x52>
 800a322:	2b00      	cmp	r3, #0
 800a324:	da11      	bge.n	800a34a <_puts_r+0x9e>
 800a326:	4622      	mov	r2, r4
 800a328:	210a      	movs	r1, #10
 800a32a:	4628      	mov	r0, r5
 800a32c:	f000 f8b3 	bl	800a496 <__swbuf_r>
 800a330:	3001      	adds	r0, #1
 800a332:	d0d7      	beq.n	800a2e4 <_puts_r+0x38>
 800a334:	250a      	movs	r5, #10
 800a336:	e7d7      	b.n	800a2e8 <_puts_r+0x3c>
 800a338:	4622      	mov	r2, r4
 800a33a:	4628      	mov	r0, r5
 800a33c:	f000 f8ab 	bl	800a496 <__swbuf_r>
 800a340:	3001      	adds	r0, #1
 800a342:	d1e7      	bne.n	800a314 <_puts_r+0x68>
 800a344:	e7ce      	b.n	800a2e4 <_puts_r+0x38>
 800a346:	3e01      	subs	r6, #1
 800a348:	e7e4      	b.n	800a314 <_puts_r+0x68>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	6022      	str	r2, [r4, #0]
 800a350:	220a      	movs	r2, #10
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	e7ee      	b.n	800a334 <_puts_r+0x88>
	...

0800a358 <puts>:
 800a358:	4b02      	ldr	r3, [pc, #8]	@ (800a364 <puts+0xc>)
 800a35a:	4601      	mov	r1, r0
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	f7ff bfa5 	b.w	800a2ac <_puts_r>
 800a362:	bf00      	nop
 800a364:	2400003c 	.word	0x2400003c

0800a368 <sniprintf>:
 800a368:	b40c      	push	{r2, r3}
 800a36a:	b530      	push	{r4, r5, lr}
 800a36c:	4b17      	ldr	r3, [pc, #92]	@ (800a3cc <sniprintf+0x64>)
 800a36e:	1e0c      	subs	r4, r1, #0
 800a370:	681d      	ldr	r5, [r3, #0]
 800a372:	b09d      	sub	sp, #116	@ 0x74
 800a374:	da08      	bge.n	800a388 <sniprintf+0x20>
 800a376:	238b      	movs	r3, #139	@ 0x8b
 800a378:	602b      	str	r3, [r5, #0]
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	b01d      	add	sp, #116	@ 0x74
 800a380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a384:	b002      	add	sp, #8
 800a386:	4770      	bx	lr
 800a388:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a38c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a390:	bf14      	ite	ne
 800a392:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a396:	4623      	moveq	r3, r4
 800a398:	9304      	str	r3, [sp, #16]
 800a39a:	9307      	str	r3, [sp, #28]
 800a39c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3a0:	9002      	str	r0, [sp, #8]
 800a3a2:	9006      	str	r0, [sp, #24]
 800a3a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a3aa:	ab21      	add	r3, sp, #132	@ 0x84
 800a3ac:	a902      	add	r1, sp, #8
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	f002 fbb5 	bl	800cb20 <_svfiprintf_r>
 800a3b6:	1c43      	adds	r3, r0, #1
 800a3b8:	bfbc      	itt	lt
 800a3ba:	238b      	movlt	r3, #139	@ 0x8b
 800a3bc:	602b      	strlt	r3, [r5, #0]
 800a3be:	2c00      	cmp	r4, #0
 800a3c0:	d0dd      	beq.n	800a37e <sniprintf+0x16>
 800a3c2:	9b02      	ldr	r3, [sp, #8]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	e7d9      	b.n	800a37e <sniprintf+0x16>
 800a3ca:	bf00      	nop
 800a3cc:	2400003c 	.word	0x2400003c

0800a3d0 <siprintf>:
 800a3d0:	b40e      	push	{r1, r2, r3}
 800a3d2:	b500      	push	{lr}
 800a3d4:	b09c      	sub	sp, #112	@ 0x70
 800a3d6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3d8:	9002      	str	r0, [sp, #8]
 800a3da:	9006      	str	r0, [sp, #24]
 800a3dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3e0:	4809      	ldr	r0, [pc, #36]	@ (800a408 <siprintf+0x38>)
 800a3e2:	9107      	str	r1, [sp, #28]
 800a3e4:	9104      	str	r1, [sp, #16]
 800a3e6:	4909      	ldr	r1, [pc, #36]	@ (800a40c <siprintf+0x3c>)
 800a3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ec:	9105      	str	r1, [sp, #20]
 800a3ee:	6800      	ldr	r0, [r0, #0]
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	a902      	add	r1, sp, #8
 800a3f4:	f002 fb94 	bl	800cb20 <_svfiprintf_r>
 800a3f8:	9b02      	ldr	r3, [sp, #8]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	b01c      	add	sp, #112	@ 0x70
 800a400:	f85d eb04 	ldr.w	lr, [sp], #4
 800a404:	b003      	add	sp, #12
 800a406:	4770      	bx	lr
 800a408:	2400003c 	.word	0x2400003c
 800a40c:	ffff0208 	.word	0xffff0208

0800a410 <__sread>:
 800a410:	b510      	push	{r4, lr}
 800a412:	460c      	mov	r4, r1
 800a414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a418:	f000 f900 	bl	800a61c <_read_r>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	bfab      	itete	ge
 800a420:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a422:	89a3      	ldrhlt	r3, [r4, #12]
 800a424:	181b      	addge	r3, r3, r0
 800a426:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a42a:	bfac      	ite	ge
 800a42c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a42e:	81a3      	strhlt	r3, [r4, #12]
 800a430:	bd10      	pop	{r4, pc}

0800a432 <__swrite>:
 800a432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a436:	461f      	mov	r7, r3
 800a438:	898b      	ldrh	r3, [r1, #12]
 800a43a:	05db      	lsls	r3, r3, #23
 800a43c:	4605      	mov	r5, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	4616      	mov	r6, r2
 800a442:	d505      	bpl.n	800a450 <__swrite+0x1e>
 800a444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a448:	2302      	movs	r3, #2
 800a44a:	2200      	movs	r2, #0
 800a44c:	f000 f8d4 	bl	800a5f8 <_lseek_r>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a456:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	4632      	mov	r2, r6
 800a45e:	463b      	mov	r3, r7
 800a460:	4628      	mov	r0, r5
 800a462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a466:	f000 b8eb 	b.w	800a640 <_write_r>

0800a46a <__sseek>:
 800a46a:	b510      	push	{r4, lr}
 800a46c:	460c      	mov	r4, r1
 800a46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a472:	f000 f8c1 	bl	800a5f8 <_lseek_r>
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	bf15      	itete	ne
 800a47c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a47e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a482:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a486:	81a3      	strheq	r3, [r4, #12]
 800a488:	bf18      	it	ne
 800a48a:	81a3      	strhne	r3, [r4, #12]
 800a48c:	bd10      	pop	{r4, pc}

0800a48e <__sclose>:
 800a48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a492:	f000 b8a1 	b.w	800a5d8 <_close_r>

0800a496 <__swbuf_r>:
 800a496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a498:	460e      	mov	r6, r1
 800a49a:	4614      	mov	r4, r2
 800a49c:	4605      	mov	r5, r0
 800a49e:	b118      	cbz	r0, 800a4a8 <__swbuf_r+0x12>
 800a4a0:	6a03      	ldr	r3, [r0, #32]
 800a4a2:	b90b      	cbnz	r3, 800a4a8 <__swbuf_r+0x12>
 800a4a4:	f7ff fecc 	bl	800a240 <__sinit>
 800a4a8:	69a3      	ldr	r3, [r4, #24]
 800a4aa:	60a3      	str	r3, [r4, #8]
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	071a      	lsls	r2, r3, #28
 800a4b0:	d501      	bpl.n	800a4b6 <__swbuf_r+0x20>
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	b943      	cbnz	r3, 800a4c8 <__swbuf_r+0x32>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f000 f82b 	bl	800a514 <__swsetup_r>
 800a4be:	b118      	cbz	r0, 800a4c8 <__swbuf_r+0x32>
 800a4c0:	f04f 37ff 	mov.w	r7, #4294967295
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	6922      	ldr	r2, [r4, #16]
 800a4cc:	1a98      	subs	r0, r3, r2
 800a4ce:	6963      	ldr	r3, [r4, #20]
 800a4d0:	b2f6      	uxtb	r6, r6
 800a4d2:	4283      	cmp	r3, r0
 800a4d4:	4637      	mov	r7, r6
 800a4d6:	dc05      	bgt.n	800a4e4 <__swbuf_r+0x4e>
 800a4d8:	4621      	mov	r1, r4
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f002 fca0 	bl	800ce20 <_fflush_r>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d1ed      	bne.n	800a4c0 <__swbuf_r+0x2a>
 800a4e4:	68a3      	ldr	r3, [r4, #8]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	6022      	str	r2, [r4, #0]
 800a4f0:	701e      	strb	r6, [r3, #0]
 800a4f2:	6962      	ldr	r2, [r4, #20]
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d004      	beq.n	800a504 <__swbuf_r+0x6e>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	07db      	lsls	r3, r3, #31
 800a4fe:	d5e1      	bpl.n	800a4c4 <__swbuf_r+0x2e>
 800a500:	2e0a      	cmp	r6, #10
 800a502:	d1df      	bne.n	800a4c4 <__swbuf_r+0x2e>
 800a504:	4621      	mov	r1, r4
 800a506:	4628      	mov	r0, r5
 800a508:	f002 fc8a 	bl	800ce20 <_fflush_r>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d0d9      	beq.n	800a4c4 <__swbuf_r+0x2e>
 800a510:	e7d6      	b.n	800a4c0 <__swbuf_r+0x2a>
	...

0800a514 <__swsetup_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4b29      	ldr	r3, [pc, #164]	@ (800a5bc <__swsetup_r+0xa8>)
 800a518:	4605      	mov	r5, r0
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	460c      	mov	r4, r1
 800a51e:	b118      	cbz	r0, 800a528 <__swsetup_r+0x14>
 800a520:	6a03      	ldr	r3, [r0, #32]
 800a522:	b90b      	cbnz	r3, 800a528 <__swsetup_r+0x14>
 800a524:	f7ff fe8c 	bl	800a240 <__sinit>
 800a528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52c:	0719      	lsls	r1, r3, #28
 800a52e:	d422      	bmi.n	800a576 <__swsetup_r+0x62>
 800a530:	06da      	lsls	r2, r3, #27
 800a532:	d407      	bmi.n	800a544 <__swsetup_r+0x30>
 800a534:	2209      	movs	r2, #9
 800a536:	602a      	str	r2, [r5, #0]
 800a538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	f04f 30ff 	mov.w	r0, #4294967295
 800a542:	e033      	b.n	800a5ac <__swsetup_r+0x98>
 800a544:	0758      	lsls	r0, r3, #29
 800a546:	d512      	bpl.n	800a56e <__swsetup_r+0x5a>
 800a548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a54a:	b141      	cbz	r1, 800a55e <__swsetup_r+0x4a>
 800a54c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a550:	4299      	cmp	r1, r3
 800a552:	d002      	beq.n	800a55a <__swsetup_r+0x46>
 800a554:	4628      	mov	r0, r5
 800a556:	f000 fea5 	bl	800b2a4 <_free_r>
 800a55a:	2300      	movs	r3, #0
 800a55c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	2300      	movs	r3, #0
 800a568:	6063      	str	r3, [r4, #4]
 800a56a:	6923      	ldr	r3, [r4, #16]
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	f043 0308 	orr.w	r3, r3, #8
 800a574:	81a3      	strh	r3, [r4, #12]
 800a576:	6923      	ldr	r3, [r4, #16]
 800a578:	b94b      	cbnz	r3, 800a58e <__swsetup_r+0x7a>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a584:	d003      	beq.n	800a58e <__swsetup_r+0x7a>
 800a586:	4621      	mov	r1, r4
 800a588:	4628      	mov	r0, r5
 800a58a:	f002 fc97 	bl	800cebc <__smakebuf_r>
 800a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a592:	f013 0201 	ands.w	r2, r3, #1
 800a596:	d00a      	beq.n	800a5ae <__swsetup_r+0x9a>
 800a598:	2200      	movs	r2, #0
 800a59a:	60a2      	str	r2, [r4, #8]
 800a59c:	6962      	ldr	r2, [r4, #20]
 800a59e:	4252      	negs	r2, r2
 800a5a0:	61a2      	str	r2, [r4, #24]
 800a5a2:	6922      	ldr	r2, [r4, #16]
 800a5a4:	b942      	cbnz	r2, 800a5b8 <__swsetup_r+0xa4>
 800a5a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5aa:	d1c5      	bne.n	800a538 <__swsetup_r+0x24>
 800a5ac:	bd38      	pop	{r3, r4, r5, pc}
 800a5ae:	0799      	lsls	r1, r3, #30
 800a5b0:	bf58      	it	pl
 800a5b2:	6962      	ldrpl	r2, [r4, #20]
 800a5b4:	60a2      	str	r2, [r4, #8]
 800a5b6:	e7f4      	b.n	800a5a2 <__swsetup_r+0x8e>
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	e7f7      	b.n	800a5ac <__swsetup_r+0x98>
 800a5bc:	2400003c 	.word	0x2400003c

0800a5c0 <memset>:
 800a5c0:	4402      	add	r2, r0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d100      	bne.n	800a5ca <memset+0xa>
 800a5c8:	4770      	bx	lr
 800a5ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ce:	e7f9      	b.n	800a5c4 <memset+0x4>

0800a5d0 <_localeconv_r>:
 800a5d0:	4800      	ldr	r0, [pc, #0]	@ (800a5d4 <_localeconv_r+0x4>)
 800a5d2:	4770      	bx	lr
 800a5d4:	2400017c 	.word	0x2400017c

0800a5d8 <_close_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4d06      	ldr	r5, [pc, #24]	@ (800a5f4 <_close_r+0x1c>)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7f8 fb05 	bl	8002bf2 <_close>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_close_r+0x1a>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_close_r+0x1a>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	24000714 	.word	0x24000714

0800a5f8 <_lseek_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d07      	ldr	r5, [pc, #28]	@ (800a618 <_lseek_r+0x20>)
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	4608      	mov	r0, r1
 800a600:	4611      	mov	r1, r2
 800a602:	2200      	movs	r2, #0
 800a604:	602a      	str	r2, [r5, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	f7f8 fb1a 	bl	8002c40 <_lseek>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d102      	bne.n	800a616 <_lseek_r+0x1e>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b103      	cbz	r3, 800a616 <_lseek_r+0x1e>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	24000714 	.word	0x24000714

0800a61c <_read_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d07      	ldr	r5, [pc, #28]	@ (800a63c <_read_r+0x20>)
 800a620:	4604      	mov	r4, r0
 800a622:	4608      	mov	r0, r1
 800a624:	4611      	mov	r1, r2
 800a626:	2200      	movs	r2, #0
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7f8 faa8 	bl	8002b80 <_read>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_read_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_read_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	24000714 	.word	0x24000714

0800a640 <_write_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4d07      	ldr	r5, [pc, #28]	@ (800a660 <_write_r+0x20>)
 800a644:	4604      	mov	r4, r0
 800a646:	4608      	mov	r0, r1
 800a648:	4611      	mov	r1, r2
 800a64a:	2200      	movs	r2, #0
 800a64c:	602a      	str	r2, [r5, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	f7f8 fab3 	bl	8002bba <_write>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_write_r+0x1e>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_write_r+0x1e>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	24000714 	.word	0x24000714

0800a664 <__errno>:
 800a664:	4b01      	ldr	r3, [pc, #4]	@ (800a66c <__errno+0x8>)
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	2400003c 	.word	0x2400003c

0800a670 <__libc_init_array>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	4d0d      	ldr	r5, [pc, #52]	@ (800a6a8 <__libc_init_array+0x38>)
 800a674:	4c0d      	ldr	r4, [pc, #52]	@ (800a6ac <__libc_init_array+0x3c>)
 800a676:	1b64      	subs	r4, r4, r5
 800a678:	10a4      	asrs	r4, r4, #2
 800a67a:	2600      	movs	r6, #0
 800a67c:	42a6      	cmp	r6, r4
 800a67e:	d109      	bne.n	800a694 <__libc_init_array+0x24>
 800a680:	4d0b      	ldr	r5, [pc, #44]	@ (800a6b0 <__libc_init_array+0x40>)
 800a682:	4c0c      	ldr	r4, [pc, #48]	@ (800a6b4 <__libc_init_array+0x44>)
 800a684:	f003 fa1a 	bl	800dabc <_init>
 800a688:	1b64      	subs	r4, r4, r5
 800a68a:	10a4      	asrs	r4, r4, #2
 800a68c:	2600      	movs	r6, #0
 800a68e:	42a6      	cmp	r6, r4
 800a690:	d105      	bne.n	800a69e <__libc_init_array+0x2e>
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	f855 3b04 	ldr.w	r3, [r5], #4
 800a698:	4798      	blx	r3
 800a69a:	3601      	adds	r6, #1
 800a69c:	e7ee      	b.n	800a67c <__libc_init_array+0xc>
 800a69e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a2:	4798      	blx	r3
 800a6a4:	3601      	adds	r6, #1
 800a6a6:	e7f2      	b.n	800a68e <__libc_init_array+0x1e>
 800a6a8:	0800e5a0 	.word	0x0800e5a0
 800a6ac:	0800e5a0 	.word	0x0800e5a0
 800a6b0:	0800e5a0 	.word	0x0800e5a0
 800a6b4:	0800e5a4 	.word	0x0800e5a4

0800a6b8 <__retarget_lock_init_recursive>:
 800a6b8:	4770      	bx	lr

0800a6ba <__retarget_lock_acquire_recursive>:
 800a6ba:	4770      	bx	lr

0800a6bc <__retarget_lock_release_recursive>:
 800a6bc:	4770      	bx	lr

0800a6be <memcpy>:
 800a6be:	440a      	add	r2, r1
 800a6c0:	4291      	cmp	r1, r2
 800a6c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6c6:	d100      	bne.n	800a6ca <memcpy+0xc>
 800a6c8:	4770      	bx	lr
 800a6ca:	b510      	push	{r4, lr}
 800a6cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d4:	4291      	cmp	r1, r2
 800a6d6:	d1f9      	bne.n	800a6cc <memcpy+0xe>
 800a6d8:	bd10      	pop	{r4, pc}
	...

0800a6dc <nanf>:
 800a6dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a6e4 <nanf+0x8>
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	7fc00000 	.word	0x7fc00000

0800a6e8 <quorem>:
 800a6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	6903      	ldr	r3, [r0, #16]
 800a6ee:	690c      	ldr	r4, [r1, #16]
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	db7e      	blt.n	800a7f4 <quorem+0x10c>
 800a6f6:	3c01      	subs	r4, #1
 800a6f8:	f101 0814 	add.w	r8, r1, #20
 800a6fc:	00a3      	lsls	r3, r4, #2
 800a6fe:	f100 0514 	add.w	r5, r0, #20
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a70e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a712:	3301      	adds	r3, #1
 800a714:	429a      	cmp	r2, r3
 800a716:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a71a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a71e:	d32e      	bcc.n	800a77e <quorem+0x96>
 800a720:	f04f 0a00 	mov.w	sl, #0
 800a724:	46c4      	mov	ip, r8
 800a726:	46ae      	mov	lr, r5
 800a728:	46d3      	mov	fp, sl
 800a72a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a72e:	b298      	uxth	r0, r3
 800a730:	fb06 a000 	mla	r0, r6, r0, sl
 800a734:	0c02      	lsrs	r2, r0, #16
 800a736:	0c1b      	lsrs	r3, r3, #16
 800a738:	fb06 2303 	mla	r3, r6, r3, r2
 800a73c:	f8de 2000 	ldr.w	r2, [lr]
 800a740:	b280      	uxth	r0, r0
 800a742:	b292      	uxth	r2, r2
 800a744:	1a12      	subs	r2, r2, r0
 800a746:	445a      	add	r2, fp
 800a748:	f8de 0000 	ldr.w	r0, [lr]
 800a74c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a750:	b29b      	uxth	r3, r3
 800a752:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a756:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a75a:	b292      	uxth	r2, r2
 800a75c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a760:	45e1      	cmp	r9, ip
 800a762:	f84e 2b04 	str.w	r2, [lr], #4
 800a766:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a76a:	d2de      	bcs.n	800a72a <quorem+0x42>
 800a76c:	9b00      	ldr	r3, [sp, #0]
 800a76e:	58eb      	ldr	r3, [r5, r3]
 800a770:	b92b      	cbnz	r3, 800a77e <quorem+0x96>
 800a772:	9b01      	ldr	r3, [sp, #4]
 800a774:	3b04      	subs	r3, #4
 800a776:	429d      	cmp	r5, r3
 800a778:	461a      	mov	r2, r3
 800a77a:	d32f      	bcc.n	800a7dc <quorem+0xf4>
 800a77c:	613c      	str	r4, [r7, #16]
 800a77e:	4638      	mov	r0, r7
 800a780:	f001 f954 	bl	800ba2c <__mcmp>
 800a784:	2800      	cmp	r0, #0
 800a786:	db25      	blt.n	800a7d4 <quorem+0xec>
 800a788:	4629      	mov	r1, r5
 800a78a:	2000      	movs	r0, #0
 800a78c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a790:	f8d1 c000 	ldr.w	ip, [r1]
 800a794:	fa1f fe82 	uxth.w	lr, r2
 800a798:	fa1f f38c 	uxth.w	r3, ip
 800a79c:	eba3 030e 	sub.w	r3, r3, lr
 800a7a0:	4403      	add	r3, r0
 800a7a2:	0c12      	lsrs	r2, r2, #16
 800a7a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7b2:	45c1      	cmp	r9, r8
 800a7b4:	f841 3b04 	str.w	r3, [r1], #4
 800a7b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7bc:	d2e6      	bcs.n	800a78c <quorem+0xa4>
 800a7be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7c6:	b922      	cbnz	r2, 800a7d2 <quorem+0xea>
 800a7c8:	3b04      	subs	r3, #4
 800a7ca:	429d      	cmp	r5, r3
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	d30b      	bcc.n	800a7e8 <quorem+0x100>
 800a7d0:	613c      	str	r4, [r7, #16]
 800a7d2:	3601      	adds	r6, #1
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	b003      	add	sp, #12
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	6812      	ldr	r2, [r2, #0]
 800a7de:	3b04      	subs	r3, #4
 800a7e0:	2a00      	cmp	r2, #0
 800a7e2:	d1cb      	bne.n	800a77c <quorem+0x94>
 800a7e4:	3c01      	subs	r4, #1
 800a7e6:	e7c6      	b.n	800a776 <quorem+0x8e>
 800a7e8:	6812      	ldr	r2, [r2, #0]
 800a7ea:	3b04      	subs	r3, #4
 800a7ec:	2a00      	cmp	r2, #0
 800a7ee:	d1ef      	bne.n	800a7d0 <quorem+0xe8>
 800a7f0:	3c01      	subs	r4, #1
 800a7f2:	e7ea      	b.n	800a7ca <quorem+0xe2>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e7ee      	b.n	800a7d6 <quorem+0xee>

0800a7f8 <_dtoa_r>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	ed2d 8b02 	vpush	{d8}
 800a800:	69c7      	ldr	r7, [r0, #28]
 800a802:	b091      	sub	sp, #68	@ 0x44
 800a804:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a808:	ec55 4b10 	vmov	r4, r5, d0
 800a80c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a80e:	9107      	str	r1, [sp, #28]
 800a810:	4681      	mov	r9, r0
 800a812:	9209      	str	r2, [sp, #36]	@ 0x24
 800a814:	930d      	str	r3, [sp, #52]	@ 0x34
 800a816:	b97f      	cbnz	r7, 800a838 <_dtoa_r+0x40>
 800a818:	2010      	movs	r0, #16
 800a81a:	f000 fd8d 	bl	800b338 <malloc>
 800a81e:	4602      	mov	r2, r0
 800a820:	f8c9 001c 	str.w	r0, [r9, #28]
 800a824:	b920      	cbnz	r0, 800a830 <_dtoa_r+0x38>
 800a826:	4ba0      	ldr	r3, [pc, #640]	@ (800aaa8 <_dtoa_r+0x2b0>)
 800a828:	21ef      	movs	r1, #239	@ 0xef
 800a82a:	48a0      	ldr	r0, [pc, #640]	@ (800aaac <_dtoa_r+0x2b4>)
 800a82c:	f002 fbe8 	bl	800d000 <__assert_func>
 800a830:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a834:	6007      	str	r7, [r0, #0]
 800a836:	60c7      	str	r7, [r0, #12]
 800a838:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a83c:	6819      	ldr	r1, [r3, #0]
 800a83e:	b159      	cbz	r1, 800a858 <_dtoa_r+0x60>
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	604a      	str	r2, [r1, #4]
 800a844:	2301      	movs	r3, #1
 800a846:	4093      	lsls	r3, r2
 800a848:	608b      	str	r3, [r1, #8]
 800a84a:	4648      	mov	r0, r9
 800a84c:	f000 fe6a 	bl	800b524 <_Bfree>
 800a850:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	1e2b      	subs	r3, r5, #0
 800a85a:	bfbb      	ittet	lt
 800a85c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a860:	9303      	strlt	r3, [sp, #12]
 800a862:	2300      	movge	r3, #0
 800a864:	2201      	movlt	r2, #1
 800a866:	bfac      	ite	ge
 800a868:	6033      	strge	r3, [r6, #0]
 800a86a:	6032      	strlt	r2, [r6, #0]
 800a86c:	4b90      	ldr	r3, [pc, #576]	@ (800aab0 <_dtoa_r+0x2b8>)
 800a86e:	9e03      	ldr	r6, [sp, #12]
 800a870:	43b3      	bics	r3, r6
 800a872:	d110      	bne.n	800a896 <_dtoa_r+0x9e>
 800a874:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a876:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a880:	4323      	orrs	r3, r4
 800a882:	f000 84de 	beq.w	800b242 <_dtoa_r+0xa4a>
 800a886:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a888:	4f8a      	ldr	r7, [pc, #552]	@ (800aab4 <_dtoa_r+0x2bc>)
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 84e0 	beq.w	800b250 <_dtoa_r+0xa58>
 800a890:	1cfb      	adds	r3, r7, #3
 800a892:	f000 bcdb 	b.w	800b24c <_dtoa_r+0xa54>
 800a896:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a89a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a2:	d10a      	bne.n	800a8ba <_dtoa_r+0xc2>
 800a8a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a8ac:	b113      	cbz	r3, 800a8b4 <_dtoa_r+0xbc>
 800a8ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a8b0:	4b81      	ldr	r3, [pc, #516]	@ (800aab8 <_dtoa_r+0x2c0>)
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	4f81      	ldr	r7, [pc, #516]	@ (800aabc <_dtoa_r+0x2c4>)
 800a8b6:	f000 bccb 	b.w	800b250 <_dtoa_r+0xa58>
 800a8ba:	aa0e      	add	r2, sp, #56	@ 0x38
 800a8bc:	a90f      	add	r1, sp, #60	@ 0x3c
 800a8be:	4648      	mov	r0, r9
 800a8c0:	eeb0 0b48 	vmov.f64	d0, d8
 800a8c4:	f001 f9d2 	bl	800bc6c <__d2b>
 800a8c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a8cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8ce:	9001      	str	r0, [sp, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d045      	beq.n	800a960 <_dtoa_r+0x168>
 800a8d4:	eeb0 7b48 	vmov.f64	d7, d8
 800a8d8:	ee18 1a90 	vmov	r1, s17
 800a8dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a8e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a8e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a8e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a8ec:	2500      	movs	r5, #0
 800a8ee:	ee07 1a90 	vmov	s15, r1
 800a8f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a8f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800aa90 <_dtoa_r+0x298>
 800a8fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a8fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800aa98 <_dtoa_r+0x2a0>
 800a902:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a906:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800aaa0 <_dtoa_r+0x2a8>
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a912:	eeb0 7b46 	vmov.f64	d7, d6
 800a916:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a91a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a91e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a926:	ee16 8a90 	vmov	r8, s13
 800a92a:	d508      	bpl.n	800a93e <_dtoa_r+0x146>
 800a92c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a930:	eeb4 6b47 	vcmp.f64	d6, d7
 800a934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a938:	bf18      	it	ne
 800a93a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a93e:	f1b8 0f16 	cmp.w	r8, #22
 800a942:	d82b      	bhi.n	800a99c <_dtoa_r+0x1a4>
 800a944:	495e      	ldr	r1, [pc, #376]	@ (800aac0 <_dtoa_r+0x2c8>)
 800a946:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a94a:	ed91 7b00 	vldr	d7, [r1]
 800a94e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a956:	d501      	bpl.n	800a95c <_dtoa_r+0x164>
 800a958:	f108 38ff 	add.w	r8, r8, #4294967295
 800a95c:	2100      	movs	r1, #0
 800a95e:	e01e      	b.n	800a99e <_dtoa_r+0x1a6>
 800a960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a962:	4413      	add	r3, r2
 800a964:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a968:	2920      	cmp	r1, #32
 800a96a:	bfc1      	itttt	gt
 800a96c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a970:	408e      	lslgt	r6, r1
 800a972:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a976:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a97a:	bfd6      	itet	le
 800a97c:	f1c1 0120 	rsble	r1, r1, #32
 800a980:	4331      	orrgt	r1, r6
 800a982:	fa04 f101 	lslle.w	r1, r4, r1
 800a986:	ee07 1a90 	vmov	s15, r1
 800a98a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a98e:	3b01      	subs	r3, #1
 800a990:	ee17 1a90 	vmov	r1, s15
 800a994:	2501      	movs	r5, #1
 800a996:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a99a:	e7a8      	b.n	800a8ee <_dtoa_r+0xf6>
 800a99c:	2101      	movs	r1, #1
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	1e53      	subs	r3, r2, #1
 800a9a2:	9306      	str	r3, [sp, #24]
 800a9a4:	bf45      	ittet	mi
 800a9a6:	f1c2 0301 	rsbmi	r3, r2, #1
 800a9aa:	9305      	strmi	r3, [sp, #20]
 800a9ac:	2300      	movpl	r3, #0
 800a9ae:	2300      	movmi	r3, #0
 800a9b0:	bf4c      	ite	mi
 800a9b2:	9306      	strmi	r3, [sp, #24]
 800a9b4:	9305      	strpl	r3, [sp, #20]
 800a9b6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ba:	910c      	str	r1, [sp, #48]	@ 0x30
 800a9bc:	db18      	blt.n	800a9f0 <_dtoa_r+0x1f8>
 800a9be:	9b06      	ldr	r3, [sp, #24]
 800a9c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a9c4:	4443      	add	r3, r8
 800a9c6:	9306      	str	r3, [sp, #24]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	9a07      	ldr	r2, [sp, #28]
 800a9cc:	2a09      	cmp	r2, #9
 800a9ce:	d849      	bhi.n	800aa64 <_dtoa_r+0x26c>
 800a9d0:	2a05      	cmp	r2, #5
 800a9d2:	bfc4      	itt	gt
 800a9d4:	3a04      	subgt	r2, #4
 800a9d6:	9207      	strgt	r2, [sp, #28]
 800a9d8:	9a07      	ldr	r2, [sp, #28]
 800a9da:	f1a2 0202 	sub.w	r2, r2, #2
 800a9de:	bfcc      	ite	gt
 800a9e0:	2400      	movgt	r4, #0
 800a9e2:	2401      	movle	r4, #1
 800a9e4:	2a03      	cmp	r2, #3
 800a9e6:	d848      	bhi.n	800aa7a <_dtoa_r+0x282>
 800a9e8:	e8df f002 	tbb	[pc, r2]
 800a9ec:	3a2c2e0b 	.word	0x3a2c2e0b
 800a9f0:	9b05      	ldr	r3, [sp, #20]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	eba3 0308 	sub.w	r3, r3, r8
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	920a      	str	r2, [sp, #40]	@ 0x28
 800a9fc:	f1c8 0300 	rsb	r3, r8, #0
 800aa00:	e7e3      	b.n	800a9ca <_dtoa_r+0x1d2>
 800aa02:	2200      	movs	r2, #0
 800aa04:	9208      	str	r2, [sp, #32]
 800aa06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa08:	2a00      	cmp	r2, #0
 800aa0a:	dc39      	bgt.n	800aa80 <_dtoa_r+0x288>
 800aa0c:	f04f 0b01 	mov.w	fp, #1
 800aa10:	46da      	mov	sl, fp
 800aa12:	465a      	mov	r2, fp
 800aa14:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800aa18:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	2004      	movs	r0, #4
 800aa20:	f100 0614 	add.w	r6, r0, #20
 800aa24:	4296      	cmp	r6, r2
 800aa26:	d930      	bls.n	800aa8a <_dtoa_r+0x292>
 800aa28:	6079      	str	r1, [r7, #4]
 800aa2a:	4648      	mov	r0, r9
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	f000 fd39 	bl	800b4a4 <_Balloc>
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	4607      	mov	r7, r0
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d146      	bne.n	800aac8 <_dtoa_r+0x2d0>
 800aa3a:	4b22      	ldr	r3, [pc, #136]	@ (800aac4 <_dtoa_r+0x2cc>)
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa42:	e6f2      	b.n	800a82a <_dtoa_r+0x32>
 800aa44:	2201      	movs	r2, #1
 800aa46:	e7dd      	b.n	800aa04 <_dtoa_r+0x20c>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	9208      	str	r2, [sp, #32]
 800aa4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa4e:	eb08 0b02 	add.w	fp, r8, r2
 800aa52:	f10b 0a01 	add.w	sl, fp, #1
 800aa56:	4652      	mov	r2, sl
 800aa58:	2a01      	cmp	r2, #1
 800aa5a:	bfb8      	it	lt
 800aa5c:	2201      	movlt	r2, #1
 800aa5e:	e7db      	b.n	800aa18 <_dtoa_r+0x220>
 800aa60:	2201      	movs	r2, #1
 800aa62:	e7f2      	b.n	800aa4a <_dtoa_r+0x252>
 800aa64:	2401      	movs	r4, #1
 800aa66:	2200      	movs	r2, #0
 800aa68:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800aa6c:	f04f 3bff 	mov.w	fp, #4294967295
 800aa70:	2100      	movs	r1, #0
 800aa72:	46da      	mov	sl, fp
 800aa74:	2212      	movs	r2, #18
 800aa76:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa78:	e7ce      	b.n	800aa18 <_dtoa_r+0x220>
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	9208      	str	r2, [sp, #32]
 800aa7e:	e7f5      	b.n	800aa6c <_dtoa_r+0x274>
 800aa80:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800aa84:	46da      	mov	sl, fp
 800aa86:	465a      	mov	r2, fp
 800aa88:	e7c6      	b.n	800aa18 <_dtoa_r+0x220>
 800aa8a:	3101      	adds	r1, #1
 800aa8c:	0040      	lsls	r0, r0, #1
 800aa8e:	e7c7      	b.n	800aa20 <_dtoa_r+0x228>
 800aa90:	636f4361 	.word	0x636f4361
 800aa94:	3fd287a7 	.word	0x3fd287a7
 800aa98:	8b60c8b3 	.word	0x8b60c8b3
 800aa9c:	3fc68a28 	.word	0x3fc68a28
 800aaa0:	509f79fb 	.word	0x509f79fb
 800aaa4:	3fd34413 	.word	0x3fd34413
 800aaa8:	0800e1b2 	.word	0x0800e1b2
 800aaac:	0800e1c9 	.word	0x0800e1c9
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	0800e1ae 	.word	0x0800e1ae
 800aab8:	0800e17d 	.word	0x0800e17d
 800aabc:	0800e17c 	.word	0x0800e17c
 800aac0:	0800e2c0 	.word	0x0800e2c0
 800aac4:	0800e221 	.word	0x0800e221
 800aac8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800aacc:	f1ba 0f0e 	cmp.w	sl, #14
 800aad0:	6010      	str	r0, [r2, #0]
 800aad2:	d86f      	bhi.n	800abb4 <_dtoa_r+0x3bc>
 800aad4:	2c00      	cmp	r4, #0
 800aad6:	d06d      	beq.n	800abb4 <_dtoa_r+0x3bc>
 800aad8:	f1b8 0f00 	cmp.w	r8, #0
 800aadc:	f340 80c2 	ble.w	800ac64 <_dtoa_r+0x46c>
 800aae0:	4aca      	ldr	r2, [pc, #808]	@ (800ae0c <_dtoa_r+0x614>)
 800aae2:	f008 010f 	and.w	r1, r8, #15
 800aae6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aaea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800aaee:	ed92 7b00 	vldr	d7, [r2]
 800aaf2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800aaf6:	f000 80a9 	beq.w	800ac4c <_dtoa_r+0x454>
 800aafa:	4ac5      	ldr	r2, [pc, #788]	@ (800ae10 <_dtoa_r+0x618>)
 800aafc:	ed92 6b08 	vldr	d6, [r2, #32]
 800ab00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ab04:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ab08:	f001 010f 	and.w	r1, r1, #15
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	48c0      	ldr	r0, [pc, #768]	@ (800ae10 <_dtoa_r+0x618>)
 800ab10:	2900      	cmp	r1, #0
 800ab12:	f040 809d 	bne.w	800ac50 <_dtoa_r+0x458>
 800ab16:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ab1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ab24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab28:	2900      	cmp	r1, #0
 800ab2a:	f000 80c1 	beq.w	800acb0 <_dtoa_r+0x4b8>
 800ab2e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ab32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3a:	f140 80b9 	bpl.w	800acb0 <_dtoa_r+0x4b8>
 800ab3e:	f1ba 0f00 	cmp.w	sl, #0
 800ab42:	f000 80b5 	beq.w	800acb0 <_dtoa_r+0x4b8>
 800ab46:	f1bb 0f00 	cmp.w	fp, #0
 800ab4a:	dd31      	ble.n	800abb0 <_dtoa_r+0x3b8>
 800ab4c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ab50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab54:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab58:	f108 31ff 	add.w	r1, r8, #4294967295
 800ab5c:	9104      	str	r1, [sp, #16]
 800ab5e:	3201      	adds	r2, #1
 800ab60:	465c      	mov	r4, fp
 800ab62:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab66:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ab6a:	ee07 2a90 	vmov	s15, r2
 800ab6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ab72:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ab76:	ee15 2a90 	vmov	r2, s11
 800ab7a:	ec51 0b15 	vmov	r0, r1, d5
 800ab7e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	f040 8098 	bne.w	800acb8 <_dtoa_r+0x4c0>
 800ab88:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ab8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ab90:	ec41 0b17 	vmov	d7, r0, r1
 800ab94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9c:	f300 8261 	bgt.w	800b062 <_dtoa_r+0x86a>
 800aba0:	eeb1 7b47 	vneg.f64	d7, d7
 800aba4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abac:	f100 80f5 	bmi.w	800ad9a <_dtoa_r+0x5a2>
 800abb0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	f2c0 812c 	blt.w	800ae14 <_dtoa_r+0x61c>
 800abbc:	f1b8 0f0e 	cmp.w	r8, #14
 800abc0:	f300 8128 	bgt.w	800ae14 <_dtoa_r+0x61c>
 800abc4:	4b91      	ldr	r3, [pc, #580]	@ (800ae0c <_dtoa_r+0x614>)
 800abc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800abca:	ed93 6b00 	vldr	d6, [r3]
 800abce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	da03      	bge.n	800abdc <_dtoa_r+0x3e4>
 800abd4:	f1ba 0f00 	cmp.w	sl, #0
 800abd8:	f340 80d2 	ble.w	800ad80 <_dtoa_r+0x588>
 800abdc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800abe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abe4:	463e      	mov	r6, r7
 800abe6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800abea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800abee:	ee15 3a10 	vmov	r3, s10
 800abf2:	3330      	adds	r3, #48	@ 0x30
 800abf4:	f806 3b01 	strb.w	r3, [r6], #1
 800abf8:	1bf3      	subs	r3, r6, r7
 800abfa:	459a      	cmp	sl, r3
 800abfc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ac00:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ac04:	f040 80f8 	bne.w	800adf8 <_dtoa_r+0x600>
 800ac08:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ac0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac14:	f300 80dd 	bgt.w	800add2 <_dtoa_r+0x5da>
 800ac18:	eeb4 7b46 	vcmp.f64	d7, d6
 800ac1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac20:	d104      	bne.n	800ac2c <_dtoa_r+0x434>
 800ac22:	ee15 3a10 	vmov	r3, s10
 800ac26:	07db      	lsls	r3, r3, #31
 800ac28:	f100 80d3 	bmi.w	800add2 <_dtoa_r+0x5da>
 800ac2c:	9901      	ldr	r1, [sp, #4]
 800ac2e:	4648      	mov	r0, r9
 800ac30:	f000 fc78 	bl	800b524 <_Bfree>
 800ac34:	2300      	movs	r3, #0
 800ac36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac38:	7033      	strb	r3, [r6, #0]
 800ac3a:	f108 0301 	add.w	r3, r8, #1
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 8304 	beq.w	800b250 <_dtoa_r+0xa58>
 800ac48:	601e      	str	r6, [r3, #0]
 800ac4a:	e301      	b.n	800b250 <_dtoa_r+0xa58>
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	e75e      	b.n	800ab0e <_dtoa_r+0x316>
 800ac50:	07cc      	lsls	r4, r1, #31
 800ac52:	d504      	bpl.n	800ac5e <_dtoa_r+0x466>
 800ac54:	ed90 6b00 	vldr	d6, [r0]
 800ac58:	3201      	adds	r2, #1
 800ac5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac5e:	1049      	asrs	r1, r1, #1
 800ac60:	3008      	adds	r0, #8
 800ac62:	e755      	b.n	800ab10 <_dtoa_r+0x318>
 800ac64:	d022      	beq.n	800acac <_dtoa_r+0x4b4>
 800ac66:	f1c8 0100 	rsb	r1, r8, #0
 800ac6a:	4a68      	ldr	r2, [pc, #416]	@ (800ae0c <_dtoa_r+0x614>)
 800ac6c:	f001 000f 	and.w	r0, r1, #15
 800ac70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ac74:	ed92 7b00 	vldr	d7, [r2]
 800ac78:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ac7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac80:	4863      	ldr	r0, [pc, #396]	@ (800ae10 <_dtoa_r+0x618>)
 800ac82:	1109      	asrs	r1, r1, #4
 800ac84:	2400      	movs	r4, #0
 800ac86:	2202      	movs	r2, #2
 800ac88:	b929      	cbnz	r1, 800ac96 <_dtoa_r+0x49e>
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	f43f af49 	beq.w	800ab22 <_dtoa_r+0x32a>
 800ac90:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac94:	e745      	b.n	800ab22 <_dtoa_r+0x32a>
 800ac96:	07ce      	lsls	r6, r1, #31
 800ac98:	d505      	bpl.n	800aca6 <_dtoa_r+0x4ae>
 800ac9a:	ed90 6b00 	vldr	d6, [r0]
 800ac9e:	3201      	adds	r2, #1
 800aca0:	2401      	movs	r4, #1
 800aca2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aca6:	1049      	asrs	r1, r1, #1
 800aca8:	3008      	adds	r0, #8
 800acaa:	e7ed      	b.n	800ac88 <_dtoa_r+0x490>
 800acac:	2202      	movs	r2, #2
 800acae:	e738      	b.n	800ab22 <_dtoa_r+0x32a>
 800acb0:	f8cd 8010 	str.w	r8, [sp, #16]
 800acb4:	4654      	mov	r4, sl
 800acb6:	e754      	b.n	800ab62 <_dtoa_r+0x36a>
 800acb8:	4a54      	ldr	r2, [pc, #336]	@ (800ae0c <_dtoa_r+0x614>)
 800acba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800acbe:	ed12 4b02 	vldr	d4, [r2, #-8]
 800acc2:	9a08      	ldr	r2, [sp, #32]
 800acc4:	ec41 0b17 	vmov	d7, r0, r1
 800acc8:	443c      	add	r4, r7
 800acca:	b34a      	cbz	r2, 800ad20 <_dtoa_r+0x528>
 800accc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800acd0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800acd4:	463e      	mov	r6, r7
 800acd6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800acda:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800acde:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ace2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ace6:	ee14 2a90 	vmov	r2, s9
 800acea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800acee:	3230      	adds	r2, #48	@ 0x30
 800acf0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800acf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800acf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfc:	f806 2b01 	strb.w	r2, [r6], #1
 800ad00:	d438      	bmi.n	800ad74 <_dtoa_r+0x57c>
 800ad02:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ad06:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ad0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0e:	d462      	bmi.n	800add6 <_dtoa_r+0x5de>
 800ad10:	42a6      	cmp	r6, r4
 800ad12:	f43f af4d 	beq.w	800abb0 <_dtoa_r+0x3b8>
 800ad16:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ad1a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad1e:	e7e0      	b.n	800ace2 <_dtoa_r+0x4ea>
 800ad20:	4621      	mov	r1, r4
 800ad22:	463e      	mov	r6, r7
 800ad24:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad28:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ad2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ad30:	ee14 2a90 	vmov	r2, s9
 800ad34:	3230      	adds	r2, #48	@ 0x30
 800ad36:	f806 2b01 	strb.w	r2, [r6], #1
 800ad3a:	42a6      	cmp	r6, r4
 800ad3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ad40:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad44:	d119      	bne.n	800ad7a <_dtoa_r+0x582>
 800ad46:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ad4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ad4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ad52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad56:	dc3e      	bgt.n	800add6 <_dtoa_r+0x5de>
 800ad58:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ad5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ad60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad64:	f57f af24 	bpl.w	800abb0 <_dtoa_r+0x3b8>
 800ad68:	460e      	mov	r6, r1
 800ad6a:	3901      	subs	r1, #1
 800ad6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad70:	2b30      	cmp	r3, #48	@ 0x30
 800ad72:	d0f9      	beq.n	800ad68 <_dtoa_r+0x570>
 800ad74:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ad78:	e758      	b.n	800ac2c <_dtoa_r+0x434>
 800ad7a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad7e:	e7d5      	b.n	800ad2c <_dtoa_r+0x534>
 800ad80:	d10b      	bne.n	800ad9a <_dtoa_r+0x5a2>
 800ad82:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ad86:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad96:	f2c0 8161 	blt.w	800b05c <_dtoa_r+0x864>
 800ad9a:	2400      	movs	r4, #0
 800ad9c:	4625      	mov	r5, r4
 800ad9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ada0:	43db      	mvns	r3, r3
 800ada2:	9304      	str	r3, [sp, #16]
 800ada4:	463e      	mov	r6, r7
 800ada6:	f04f 0800 	mov.w	r8, #0
 800adaa:	4621      	mov	r1, r4
 800adac:	4648      	mov	r0, r9
 800adae:	f000 fbb9 	bl	800b524 <_Bfree>
 800adb2:	2d00      	cmp	r5, #0
 800adb4:	d0de      	beq.n	800ad74 <_dtoa_r+0x57c>
 800adb6:	f1b8 0f00 	cmp.w	r8, #0
 800adba:	d005      	beq.n	800adc8 <_dtoa_r+0x5d0>
 800adbc:	45a8      	cmp	r8, r5
 800adbe:	d003      	beq.n	800adc8 <_dtoa_r+0x5d0>
 800adc0:	4641      	mov	r1, r8
 800adc2:	4648      	mov	r0, r9
 800adc4:	f000 fbae 	bl	800b524 <_Bfree>
 800adc8:	4629      	mov	r1, r5
 800adca:	4648      	mov	r0, r9
 800adcc:	f000 fbaa 	bl	800b524 <_Bfree>
 800add0:	e7d0      	b.n	800ad74 <_dtoa_r+0x57c>
 800add2:	f8cd 8010 	str.w	r8, [sp, #16]
 800add6:	4633      	mov	r3, r6
 800add8:	461e      	mov	r6, r3
 800adda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adde:	2a39      	cmp	r2, #57	@ 0x39
 800ade0:	d106      	bne.n	800adf0 <_dtoa_r+0x5f8>
 800ade2:	429f      	cmp	r7, r3
 800ade4:	d1f8      	bne.n	800add8 <_dtoa_r+0x5e0>
 800ade6:	9a04      	ldr	r2, [sp, #16]
 800ade8:	3201      	adds	r2, #1
 800adea:	9204      	str	r2, [sp, #16]
 800adec:	2230      	movs	r2, #48	@ 0x30
 800adee:	703a      	strb	r2, [r7, #0]
 800adf0:	781a      	ldrb	r2, [r3, #0]
 800adf2:	3201      	adds	r2, #1
 800adf4:	701a      	strb	r2, [r3, #0]
 800adf6:	e7bd      	b.n	800ad74 <_dtoa_r+0x57c>
 800adf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800adfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	f47f aeef 	bne.w	800abe6 <_dtoa_r+0x3ee>
 800ae08:	e710      	b.n	800ac2c <_dtoa_r+0x434>
 800ae0a:	bf00      	nop
 800ae0c:	0800e2c0 	.word	0x0800e2c0
 800ae10:	0800e298 	.word	0x0800e298
 800ae14:	9908      	ldr	r1, [sp, #32]
 800ae16:	2900      	cmp	r1, #0
 800ae18:	f000 80e3 	beq.w	800afe2 <_dtoa_r+0x7ea>
 800ae1c:	9907      	ldr	r1, [sp, #28]
 800ae1e:	2901      	cmp	r1, #1
 800ae20:	f300 80c8 	bgt.w	800afb4 <_dtoa_r+0x7bc>
 800ae24:	2d00      	cmp	r5, #0
 800ae26:	f000 80c1 	beq.w	800afac <_dtoa_r+0x7b4>
 800ae2a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae2e:	9e05      	ldr	r6, [sp, #20]
 800ae30:	461c      	mov	r4, r3
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	9b05      	ldr	r3, [sp, #20]
 800ae36:	4413      	add	r3, r2
 800ae38:	9305      	str	r3, [sp, #20]
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	4413      	add	r3, r2
 800ae40:	4648      	mov	r0, r9
 800ae42:	9306      	str	r3, [sp, #24]
 800ae44:	f000 fc6c 	bl	800b720 <__i2b>
 800ae48:	9b04      	ldr	r3, [sp, #16]
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	b166      	cbz	r6, 800ae68 <_dtoa_r+0x670>
 800ae4e:	9a06      	ldr	r2, [sp, #24]
 800ae50:	2a00      	cmp	r2, #0
 800ae52:	dd09      	ble.n	800ae68 <_dtoa_r+0x670>
 800ae54:	42b2      	cmp	r2, r6
 800ae56:	9905      	ldr	r1, [sp, #20]
 800ae58:	bfa8      	it	ge
 800ae5a:	4632      	movge	r2, r6
 800ae5c:	1a89      	subs	r1, r1, r2
 800ae5e:	9105      	str	r1, [sp, #20]
 800ae60:	9906      	ldr	r1, [sp, #24]
 800ae62:	1ab6      	subs	r6, r6, r2
 800ae64:	1a8a      	subs	r2, r1, r2
 800ae66:	9206      	str	r2, [sp, #24]
 800ae68:	b1fb      	cbz	r3, 800aeaa <_dtoa_r+0x6b2>
 800ae6a:	9a08      	ldr	r2, [sp, #32]
 800ae6c:	2a00      	cmp	r2, #0
 800ae6e:	f000 80bc 	beq.w	800afea <_dtoa_r+0x7f2>
 800ae72:	b19c      	cbz	r4, 800ae9c <_dtoa_r+0x6a4>
 800ae74:	4629      	mov	r1, r5
 800ae76:	4622      	mov	r2, r4
 800ae78:	4648      	mov	r0, r9
 800ae7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae7c:	f000 fd10 	bl	800b8a0 <__pow5mult>
 800ae80:	9a01      	ldr	r2, [sp, #4]
 800ae82:	4601      	mov	r1, r0
 800ae84:	4605      	mov	r5, r0
 800ae86:	4648      	mov	r0, r9
 800ae88:	f000 fc60 	bl	800b74c <__multiply>
 800ae8c:	9901      	ldr	r1, [sp, #4]
 800ae8e:	9004      	str	r0, [sp, #16]
 800ae90:	4648      	mov	r0, r9
 800ae92:	f000 fb47 	bl	800b524 <_Bfree>
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae9a:	9201      	str	r2, [sp, #4]
 800ae9c:	1b1a      	subs	r2, r3, r4
 800ae9e:	d004      	beq.n	800aeaa <_dtoa_r+0x6b2>
 800aea0:	9901      	ldr	r1, [sp, #4]
 800aea2:	4648      	mov	r0, r9
 800aea4:	f000 fcfc 	bl	800b8a0 <__pow5mult>
 800aea8:	9001      	str	r0, [sp, #4]
 800aeaa:	2101      	movs	r1, #1
 800aeac:	4648      	mov	r0, r9
 800aeae:	f000 fc37 	bl	800b720 <__i2b>
 800aeb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 81d0 	beq.w	800b25c <_dtoa_r+0xa64>
 800aebc:	461a      	mov	r2, r3
 800aebe:	4601      	mov	r1, r0
 800aec0:	4648      	mov	r0, r9
 800aec2:	f000 fced 	bl	800b8a0 <__pow5mult>
 800aec6:	9b07      	ldr	r3, [sp, #28]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	4604      	mov	r4, r0
 800aecc:	f300 8095 	bgt.w	800affa <_dtoa_r+0x802>
 800aed0:	9b02      	ldr	r3, [sp, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f040 808b 	bne.w	800afee <_dtoa_r+0x7f6>
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800aede:	2a00      	cmp	r2, #0
 800aee0:	f040 8087 	bne.w	800aff2 <_dtoa_r+0x7fa>
 800aee4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800aee8:	0d12      	lsrs	r2, r2, #20
 800aeea:	0512      	lsls	r2, r2, #20
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	f000 8082 	beq.w	800aff6 <_dtoa_r+0x7fe>
 800aef2:	9b05      	ldr	r3, [sp, #20]
 800aef4:	3301      	adds	r3, #1
 800aef6:	9305      	str	r3, [sp, #20]
 800aef8:	9b06      	ldr	r3, [sp, #24]
 800aefa:	3301      	adds	r3, #1
 800aefc:	9306      	str	r3, [sp, #24]
 800aefe:	2301      	movs	r3, #1
 800af00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 81af 	beq.w	800b268 <_dtoa_r+0xa70>
 800af0a:	6922      	ldr	r2, [r4, #16]
 800af0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800af10:	6910      	ldr	r0, [r2, #16]
 800af12:	f000 fbb9 	bl	800b688 <__hi0bits>
 800af16:	f1c0 0020 	rsb	r0, r0, #32
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	4418      	add	r0, r3
 800af1e:	f010 001f 	ands.w	r0, r0, #31
 800af22:	d076      	beq.n	800b012 <_dtoa_r+0x81a>
 800af24:	f1c0 0220 	rsb	r2, r0, #32
 800af28:	2a04      	cmp	r2, #4
 800af2a:	dd69      	ble.n	800b000 <_dtoa_r+0x808>
 800af2c:	9b05      	ldr	r3, [sp, #20]
 800af2e:	f1c0 001c 	rsb	r0, r0, #28
 800af32:	4403      	add	r3, r0
 800af34:	9305      	str	r3, [sp, #20]
 800af36:	9b06      	ldr	r3, [sp, #24]
 800af38:	4406      	add	r6, r0
 800af3a:	4403      	add	r3, r0
 800af3c:	9306      	str	r3, [sp, #24]
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	dd05      	ble.n	800af50 <_dtoa_r+0x758>
 800af44:	9901      	ldr	r1, [sp, #4]
 800af46:	461a      	mov	r2, r3
 800af48:	4648      	mov	r0, r9
 800af4a:	f000 fd03 	bl	800b954 <__lshift>
 800af4e:	9001      	str	r0, [sp, #4]
 800af50:	9b06      	ldr	r3, [sp, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	dd05      	ble.n	800af62 <_dtoa_r+0x76a>
 800af56:	4621      	mov	r1, r4
 800af58:	461a      	mov	r2, r3
 800af5a:	4648      	mov	r0, r9
 800af5c:	f000 fcfa 	bl	800b954 <__lshift>
 800af60:	4604      	mov	r4, r0
 800af62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af64:	2b00      	cmp	r3, #0
 800af66:	d056      	beq.n	800b016 <_dtoa_r+0x81e>
 800af68:	9801      	ldr	r0, [sp, #4]
 800af6a:	4621      	mov	r1, r4
 800af6c:	f000 fd5e 	bl	800ba2c <__mcmp>
 800af70:	2800      	cmp	r0, #0
 800af72:	da50      	bge.n	800b016 <_dtoa_r+0x81e>
 800af74:	f108 33ff 	add.w	r3, r8, #4294967295
 800af78:	9304      	str	r3, [sp, #16]
 800af7a:	9901      	ldr	r1, [sp, #4]
 800af7c:	2300      	movs	r3, #0
 800af7e:	220a      	movs	r2, #10
 800af80:	4648      	mov	r0, r9
 800af82:	f000 faf1 	bl	800b568 <__multadd>
 800af86:	9b08      	ldr	r3, [sp, #32]
 800af88:	9001      	str	r0, [sp, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 816e 	beq.w	800b26c <_dtoa_r+0xa74>
 800af90:	4629      	mov	r1, r5
 800af92:	2300      	movs	r3, #0
 800af94:	220a      	movs	r2, #10
 800af96:	4648      	mov	r0, r9
 800af98:	f000 fae6 	bl	800b568 <__multadd>
 800af9c:	f1bb 0f00 	cmp.w	fp, #0
 800afa0:	4605      	mov	r5, r0
 800afa2:	dc64      	bgt.n	800b06e <_dtoa_r+0x876>
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	dc3e      	bgt.n	800b028 <_dtoa_r+0x830>
 800afaa:	e060      	b.n	800b06e <_dtoa_r+0x876>
 800afac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800afb2:	e73c      	b.n	800ae2e <_dtoa_r+0x636>
 800afb4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800afb8:	42a3      	cmp	r3, r4
 800afba:	bfbf      	itttt	lt
 800afbc:	1ae2      	sublt	r2, r4, r3
 800afbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800afc0:	189b      	addlt	r3, r3, r2
 800afc2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800afc4:	bfae      	itee	ge
 800afc6:	1b1c      	subge	r4, r3, r4
 800afc8:	4623      	movlt	r3, r4
 800afca:	2400      	movlt	r4, #0
 800afcc:	f1ba 0f00 	cmp.w	sl, #0
 800afd0:	bfb5      	itete	lt
 800afd2:	9a05      	ldrlt	r2, [sp, #20]
 800afd4:	9e05      	ldrge	r6, [sp, #20]
 800afd6:	eba2 060a 	sublt.w	r6, r2, sl
 800afda:	4652      	movge	r2, sl
 800afdc:	bfb8      	it	lt
 800afde:	2200      	movlt	r2, #0
 800afe0:	e727      	b.n	800ae32 <_dtoa_r+0x63a>
 800afe2:	9e05      	ldr	r6, [sp, #20]
 800afe4:	9d08      	ldr	r5, [sp, #32]
 800afe6:	461c      	mov	r4, r3
 800afe8:	e730      	b.n	800ae4c <_dtoa_r+0x654>
 800afea:	461a      	mov	r2, r3
 800afec:	e758      	b.n	800aea0 <_dtoa_r+0x6a8>
 800afee:	2300      	movs	r3, #0
 800aff0:	e786      	b.n	800af00 <_dtoa_r+0x708>
 800aff2:	9b02      	ldr	r3, [sp, #8]
 800aff4:	e784      	b.n	800af00 <_dtoa_r+0x708>
 800aff6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aff8:	e783      	b.n	800af02 <_dtoa_r+0x70a>
 800affa:	2300      	movs	r3, #0
 800affc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800affe:	e784      	b.n	800af0a <_dtoa_r+0x712>
 800b000:	d09d      	beq.n	800af3e <_dtoa_r+0x746>
 800b002:	9b05      	ldr	r3, [sp, #20]
 800b004:	321c      	adds	r2, #28
 800b006:	4413      	add	r3, r2
 800b008:	9305      	str	r3, [sp, #20]
 800b00a:	9b06      	ldr	r3, [sp, #24]
 800b00c:	4416      	add	r6, r2
 800b00e:	4413      	add	r3, r2
 800b010:	e794      	b.n	800af3c <_dtoa_r+0x744>
 800b012:	4602      	mov	r2, r0
 800b014:	e7f5      	b.n	800b002 <_dtoa_r+0x80a>
 800b016:	f1ba 0f00 	cmp.w	sl, #0
 800b01a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b01e:	46d3      	mov	fp, sl
 800b020:	dc21      	bgt.n	800b066 <_dtoa_r+0x86e>
 800b022:	9b07      	ldr	r3, [sp, #28]
 800b024:	2b02      	cmp	r3, #2
 800b026:	dd1e      	ble.n	800b066 <_dtoa_r+0x86e>
 800b028:	f1bb 0f00 	cmp.w	fp, #0
 800b02c:	f47f aeb7 	bne.w	800ad9e <_dtoa_r+0x5a6>
 800b030:	4621      	mov	r1, r4
 800b032:	465b      	mov	r3, fp
 800b034:	2205      	movs	r2, #5
 800b036:	4648      	mov	r0, r9
 800b038:	f000 fa96 	bl	800b568 <__multadd>
 800b03c:	4601      	mov	r1, r0
 800b03e:	4604      	mov	r4, r0
 800b040:	9801      	ldr	r0, [sp, #4]
 800b042:	f000 fcf3 	bl	800ba2c <__mcmp>
 800b046:	2800      	cmp	r0, #0
 800b048:	f77f aea9 	ble.w	800ad9e <_dtoa_r+0x5a6>
 800b04c:	463e      	mov	r6, r7
 800b04e:	2331      	movs	r3, #49	@ 0x31
 800b050:	f806 3b01 	strb.w	r3, [r6], #1
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	3301      	adds	r3, #1
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	e6a4      	b.n	800ada6 <_dtoa_r+0x5ae>
 800b05c:	f8cd 8010 	str.w	r8, [sp, #16]
 800b060:	4654      	mov	r4, sl
 800b062:	4625      	mov	r5, r4
 800b064:	e7f2      	b.n	800b04c <_dtoa_r+0x854>
 800b066:	9b08      	ldr	r3, [sp, #32]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 8103 	beq.w	800b274 <_dtoa_r+0xa7c>
 800b06e:	2e00      	cmp	r6, #0
 800b070:	dd05      	ble.n	800b07e <_dtoa_r+0x886>
 800b072:	4629      	mov	r1, r5
 800b074:	4632      	mov	r2, r6
 800b076:	4648      	mov	r0, r9
 800b078:	f000 fc6c 	bl	800b954 <__lshift>
 800b07c:	4605      	mov	r5, r0
 800b07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d058      	beq.n	800b136 <_dtoa_r+0x93e>
 800b084:	6869      	ldr	r1, [r5, #4]
 800b086:	4648      	mov	r0, r9
 800b088:	f000 fa0c 	bl	800b4a4 <_Balloc>
 800b08c:	4606      	mov	r6, r0
 800b08e:	b928      	cbnz	r0, 800b09c <_dtoa_r+0x8a4>
 800b090:	4b82      	ldr	r3, [pc, #520]	@ (800b29c <_dtoa_r+0xaa4>)
 800b092:	4602      	mov	r2, r0
 800b094:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b098:	f7ff bbc7 	b.w	800a82a <_dtoa_r+0x32>
 800b09c:	692a      	ldr	r2, [r5, #16]
 800b09e:	3202      	adds	r2, #2
 800b0a0:	0092      	lsls	r2, r2, #2
 800b0a2:	f105 010c 	add.w	r1, r5, #12
 800b0a6:	300c      	adds	r0, #12
 800b0a8:	f7ff fb09 	bl	800a6be <memcpy>
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	4648      	mov	r0, r9
 800b0b2:	f000 fc4f 	bl	800b954 <__lshift>
 800b0b6:	1c7b      	adds	r3, r7, #1
 800b0b8:	9305      	str	r3, [sp, #20]
 800b0ba:	eb07 030b 	add.w	r3, r7, fp
 800b0be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c0:	9b02      	ldr	r3, [sp, #8]
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	46a8      	mov	r8, r5
 800b0c8:	9308      	str	r3, [sp, #32]
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	9b05      	ldr	r3, [sp, #20]
 800b0ce:	9801      	ldr	r0, [sp, #4]
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b0d6:	f7ff fb07 	bl	800a6e8 <quorem>
 800b0da:	4641      	mov	r1, r8
 800b0dc:	9002      	str	r0, [sp, #8]
 800b0de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b0e2:	9801      	ldr	r0, [sp, #4]
 800b0e4:	f000 fca2 	bl	800ba2c <__mcmp>
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	9006      	str	r0, [sp, #24]
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	4648      	mov	r0, r9
 800b0f0:	f000 fcb8 	bl	800ba64 <__mdiff>
 800b0f4:	68c2      	ldr	r2, [r0, #12]
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	b9fa      	cbnz	r2, 800b13a <_dtoa_r+0x942>
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	9801      	ldr	r0, [sp, #4]
 800b0fe:	f000 fc95 	bl	800ba2c <__mcmp>
 800b102:	4602      	mov	r2, r0
 800b104:	4631      	mov	r1, r6
 800b106:	4648      	mov	r0, r9
 800b108:	920a      	str	r2, [sp, #40]	@ 0x28
 800b10a:	f000 fa0b 	bl	800b524 <_Bfree>
 800b10e:	9b07      	ldr	r3, [sp, #28]
 800b110:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b112:	9e05      	ldr	r6, [sp, #20]
 800b114:	ea43 0102 	orr.w	r1, r3, r2
 800b118:	9b08      	ldr	r3, [sp, #32]
 800b11a:	4319      	orrs	r1, r3
 800b11c:	d10f      	bne.n	800b13e <_dtoa_r+0x946>
 800b11e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b122:	d028      	beq.n	800b176 <_dtoa_r+0x97e>
 800b124:	9b06      	ldr	r3, [sp, #24]
 800b126:	2b00      	cmp	r3, #0
 800b128:	dd02      	ble.n	800b130 <_dtoa_r+0x938>
 800b12a:	9b02      	ldr	r3, [sp, #8]
 800b12c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b130:	f88b a000 	strb.w	sl, [fp]
 800b134:	e639      	b.n	800adaa <_dtoa_r+0x5b2>
 800b136:	4628      	mov	r0, r5
 800b138:	e7bd      	b.n	800b0b6 <_dtoa_r+0x8be>
 800b13a:	2201      	movs	r2, #1
 800b13c:	e7e2      	b.n	800b104 <_dtoa_r+0x90c>
 800b13e:	9b06      	ldr	r3, [sp, #24]
 800b140:	2b00      	cmp	r3, #0
 800b142:	db04      	blt.n	800b14e <_dtoa_r+0x956>
 800b144:	9907      	ldr	r1, [sp, #28]
 800b146:	430b      	orrs	r3, r1
 800b148:	9908      	ldr	r1, [sp, #32]
 800b14a:	430b      	orrs	r3, r1
 800b14c:	d120      	bne.n	800b190 <_dtoa_r+0x998>
 800b14e:	2a00      	cmp	r2, #0
 800b150:	ddee      	ble.n	800b130 <_dtoa_r+0x938>
 800b152:	9901      	ldr	r1, [sp, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	4648      	mov	r0, r9
 800b158:	f000 fbfc 	bl	800b954 <__lshift>
 800b15c:	4621      	mov	r1, r4
 800b15e:	9001      	str	r0, [sp, #4]
 800b160:	f000 fc64 	bl	800ba2c <__mcmp>
 800b164:	2800      	cmp	r0, #0
 800b166:	dc03      	bgt.n	800b170 <_dtoa_r+0x978>
 800b168:	d1e2      	bne.n	800b130 <_dtoa_r+0x938>
 800b16a:	f01a 0f01 	tst.w	sl, #1
 800b16e:	d0df      	beq.n	800b130 <_dtoa_r+0x938>
 800b170:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b174:	d1d9      	bne.n	800b12a <_dtoa_r+0x932>
 800b176:	2339      	movs	r3, #57	@ 0x39
 800b178:	f88b 3000 	strb.w	r3, [fp]
 800b17c:	4633      	mov	r3, r6
 800b17e:	461e      	mov	r6, r3
 800b180:	3b01      	subs	r3, #1
 800b182:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b186:	2a39      	cmp	r2, #57	@ 0x39
 800b188:	d053      	beq.n	800b232 <_dtoa_r+0xa3a>
 800b18a:	3201      	adds	r2, #1
 800b18c:	701a      	strb	r2, [r3, #0]
 800b18e:	e60c      	b.n	800adaa <_dtoa_r+0x5b2>
 800b190:	2a00      	cmp	r2, #0
 800b192:	dd07      	ble.n	800b1a4 <_dtoa_r+0x9ac>
 800b194:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b198:	d0ed      	beq.n	800b176 <_dtoa_r+0x97e>
 800b19a:	f10a 0301 	add.w	r3, sl, #1
 800b19e:	f88b 3000 	strb.w	r3, [fp]
 800b1a2:	e602      	b.n	800adaa <_dtoa_r+0x5b2>
 800b1a4:	9b05      	ldr	r3, [sp, #20]
 800b1a6:	9a05      	ldr	r2, [sp, #20]
 800b1a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d029      	beq.n	800b206 <_dtoa_r+0xa0e>
 800b1b2:	9901      	ldr	r1, [sp, #4]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	220a      	movs	r2, #10
 800b1b8:	4648      	mov	r0, r9
 800b1ba:	f000 f9d5 	bl	800b568 <__multadd>
 800b1be:	45a8      	cmp	r8, r5
 800b1c0:	9001      	str	r0, [sp, #4]
 800b1c2:	f04f 0300 	mov.w	r3, #0
 800b1c6:	f04f 020a 	mov.w	r2, #10
 800b1ca:	4641      	mov	r1, r8
 800b1cc:	4648      	mov	r0, r9
 800b1ce:	d107      	bne.n	800b1e0 <_dtoa_r+0x9e8>
 800b1d0:	f000 f9ca 	bl	800b568 <__multadd>
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	9b05      	ldr	r3, [sp, #20]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	e775      	b.n	800b0cc <_dtoa_r+0x8d4>
 800b1e0:	f000 f9c2 	bl	800b568 <__multadd>
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	220a      	movs	r2, #10
 800b1ec:	4648      	mov	r0, r9
 800b1ee:	f000 f9bb 	bl	800b568 <__multadd>
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	e7f0      	b.n	800b1d8 <_dtoa_r+0x9e0>
 800b1f6:	f1bb 0f00 	cmp.w	fp, #0
 800b1fa:	bfcc      	ite	gt
 800b1fc:	465e      	movgt	r6, fp
 800b1fe:	2601      	movle	r6, #1
 800b200:	443e      	add	r6, r7
 800b202:	f04f 0800 	mov.w	r8, #0
 800b206:	9901      	ldr	r1, [sp, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	4648      	mov	r0, r9
 800b20c:	f000 fba2 	bl	800b954 <__lshift>
 800b210:	4621      	mov	r1, r4
 800b212:	9001      	str	r0, [sp, #4]
 800b214:	f000 fc0a 	bl	800ba2c <__mcmp>
 800b218:	2800      	cmp	r0, #0
 800b21a:	dcaf      	bgt.n	800b17c <_dtoa_r+0x984>
 800b21c:	d102      	bne.n	800b224 <_dtoa_r+0xa2c>
 800b21e:	f01a 0f01 	tst.w	sl, #1
 800b222:	d1ab      	bne.n	800b17c <_dtoa_r+0x984>
 800b224:	4633      	mov	r3, r6
 800b226:	461e      	mov	r6, r3
 800b228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b22c:	2a30      	cmp	r2, #48	@ 0x30
 800b22e:	d0fa      	beq.n	800b226 <_dtoa_r+0xa2e>
 800b230:	e5bb      	b.n	800adaa <_dtoa_r+0x5b2>
 800b232:	429f      	cmp	r7, r3
 800b234:	d1a3      	bne.n	800b17e <_dtoa_r+0x986>
 800b236:	9b04      	ldr	r3, [sp, #16]
 800b238:	3301      	adds	r3, #1
 800b23a:	9304      	str	r3, [sp, #16]
 800b23c:	2331      	movs	r3, #49	@ 0x31
 800b23e:	703b      	strb	r3, [r7, #0]
 800b240:	e5b3      	b.n	800adaa <_dtoa_r+0x5b2>
 800b242:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b244:	4f16      	ldr	r7, [pc, #88]	@ (800b2a0 <_dtoa_r+0xaa8>)
 800b246:	b11b      	cbz	r3, 800b250 <_dtoa_r+0xa58>
 800b248:	f107 0308 	add.w	r3, r7, #8
 800b24c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	4638      	mov	r0, r7
 800b252:	b011      	add	sp, #68	@ 0x44
 800b254:	ecbd 8b02 	vpop	{d8}
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25c:	9b07      	ldr	r3, [sp, #28]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	f77f ae36 	ble.w	800aed0 <_dtoa_r+0x6d8>
 800b264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b266:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b268:	2001      	movs	r0, #1
 800b26a:	e656      	b.n	800af1a <_dtoa_r+0x722>
 800b26c:	f1bb 0f00 	cmp.w	fp, #0
 800b270:	f77f aed7 	ble.w	800b022 <_dtoa_r+0x82a>
 800b274:	463e      	mov	r6, r7
 800b276:	9801      	ldr	r0, [sp, #4]
 800b278:	4621      	mov	r1, r4
 800b27a:	f7ff fa35 	bl	800a6e8 <quorem>
 800b27e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b282:	f806 ab01 	strb.w	sl, [r6], #1
 800b286:	1bf2      	subs	r2, r6, r7
 800b288:	4593      	cmp	fp, r2
 800b28a:	ddb4      	ble.n	800b1f6 <_dtoa_r+0x9fe>
 800b28c:	9901      	ldr	r1, [sp, #4]
 800b28e:	2300      	movs	r3, #0
 800b290:	220a      	movs	r2, #10
 800b292:	4648      	mov	r0, r9
 800b294:	f000 f968 	bl	800b568 <__multadd>
 800b298:	9001      	str	r0, [sp, #4]
 800b29a:	e7ec      	b.n	800b276 <_dtoa_r+0xa7e>
 800b29c:	0800e221 	.word	0x0800e221
 800b2a0:	0800e1a5 	.word	0x0800e1a5

0800b2a4 <_free_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	2900      	cmp	r1, #0
 800b2aa:	d041      	beq.n	800b330 <_free_r+0x8c>
 800b2ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2b0:	1f0c      	subs	r4, r1, #4
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	bfb8      	it	lt
 800b2b6:	18e4      	addlt	r4, r4, r3
 800b2b8:	f000 f8e8 	bl	800b48c <__malloc_lock>
 800b2bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b334 <_free_r+0x90>)
 800b2be:	6813      	ldr	r3, [r2, #0]
 800b2c0:	b933      	cbnz	r3, 800b2d0 <_free_r+0x2c>
 800b2c2:	6063      	str	r3, [r4, #4]
 800b2c4:	6014      	str	r4, [r2, #0]
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2cc:	f000 b8e4 	b.w	800b498 <__malloc_unlock>
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	d908      	bls.n	800b2e6 <_free_r+0x42>
 800b2d4:	6820      	ldr	r0, [r4, #0]
 800b2d6:	1821      	adds	r1, r4, r0
 800b2d8:	428b      	cmp	r3, r1
 800b2da:	bf01      	itttt	eq
 800b2dc:	6819      	ldreq	r1, [r3, #0]
 800b2de:	685b      	ldreq	r3, [r3, #4]
 800b2e0:	1809      	addeq	r1, r1, r0
 800b2e2:	6021      	streq	r1, [r4, #0]
 800b2e4:	e7ed      	b.n	800b2c2 <_free_r+0x1e>
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	b10b      	cbz	r3, 800b2f0 <_free_r+0x4c>
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	d9fa      	bls.n	800b2e6 <_free_r+0x42>
 800b2f0:	6811      	ldr	r1, [r2, #0]
 800b2f2:	1850      	adds	r0, r2, r1
 800b2f4:	42a0      	cmp	r0, r4
 800b2f6:	d10b      	bne.n	800b310 <_free_r+0x6c>
 800b2f8:	6820      	ldr	r0, [r4, #0]
 800b2fa:	4401      	add	r1, r0
 800b2fc:	1850      	adds	r0, r2, r1
 800b2fe:	4283      	cmp	r3, r0
 800b300:	6011      	str	r1, [r2, #0]
 800b302:	d1e0      	bne.n	800b2c6 <_free_r+0x22>
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	6053      	str	r3, [r2, #4]
 800b30a:	4408      	add	r0, r1
 800b30c:	6010      	str	r0, [r2, #0]
 800b30e:	e7da      	b.n	800b2c6 <_free_r+0x22>
 800b310:	d902      	bls.n	800b318 <_free_r+0x74>
 800b312:	230c      	movs	r3, #12
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	e7d6      	b.n	800b2c6 <_free_r+0x22>
 800b318:	6820      	ldr	r0, [r4, #0]
 800b31a:	1821      	adds	r1, r4, r0
 800b31c:	428b      	cmp	r3, r1
 800b31e:	bf04      	itt	eq
 800b320:	6819      	ldreq	r1, [r3, #0]
 800b322:	685b      	ldreq	r3, [r3, #4]
 800b324:	6063      	str	r3, [r4, #4]
 800b326:	bf04      	itt	eq
 800b328:	1809      	addeq	r1, r1, r0
 800b32a:	6021      	streq	r1, [r4, #0]
 800b32c:	6054      	str	r4, [r2, #4]
 800b32e:	e7ca      	b.n	800b2c6 <_free_r+0x22>
 800b330:	bd38      	pop	{r3, r4, r5, pc}
 800b332:	bf00      	nop
 800b334:	24000720 	.word	0x24000720

0800b338 <malloc>:
 800b338:	4b02      	ldr	r3, [pc, #8]	@ (800b344 <malloc+0xc>)
 800b33a:	4601      	mov	r1, r0
 800b33c:	6818      	ldr	r0, [r3, #0]
 800b33e:	f000 b825 	b.w	800b38c <_malloc_r>
 800b342:	bf00      	nop
 800b344:	2400003c 	.word	0x2400003c

0800b348 <sbrk_aligned>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	4e0f      	ldr	r6, [pc, #60]	@ (800b388 <sbrk_aligned+0x40>)
 800b34c:	460c      	mov	r4, r1
 800b34e:	6831      	ldr	r1, [r6, #0]
 800b350:	4605      	mov	r5, r0
 800b352:	b911      	cbnz	r1, 800b35a <sbrk_aligned+0x12>
 800b354:	f001 fe3c 	bl	800cfd0 <_sbrk_r>
 800b358:	6030      	str	r0, [r6, #0]
 800b35a:	4621      	mov	r1, r4
 800b35c:	4628      	mov	r0, r5
 800b35e:	f001 fe37 	bl	800cfd0 <_sbrk_r>
 800b362:	1c43      	adds	r3, r0, #1
 800b364:	d103      	bne.n	800b36e <sbrk_aligned+0x26>
 800b366:	f04f 34ff 	mov.w	r4, #4294967295
 800b36a:	4620      	mov	r0, r4
 800b36c:	bd70      	pop	{r4, r5, r6, pc}
 800b36e:	1cc4      	adds	r4, r0, #3
 800b370:	f024 0403 	bic.w	r4, r4, #3
 800b374:	42a0      	cmp	r0, r4
 800b376:	d0f8      	beq.n	800b36a <sbrk_aligned+0x22>
 800b378:	1a21      	subs	r1, r4, r0
 800b37a:	4628      	mov	r0, r5
 800b37c:	f001 fe28 	bl	800cfd0 <_sbrk_r>
 800b380:	3001      	adds	r0, #1
 800b382:	d1f2      	bne.n	800b36a <sbrk_aligned+0x22>
 800b384:	e7ef      	b.n	800b366 <sbrk_aligned+0x1e>
 800b386:	bf00      	nop
 800b388:	2400071c 	.word	0x2400071c

0800b38c <_malloc_r>:
 800b38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b390:	1ccd      	adds	r5, r1, #3
 800b392:	f025 0503 	bic.w	r5, r5, #3
 800b396:	3508      	adds	r5, #8
 800b398:	2d0c      	cmp	r5, #12
 800b39a:	bf38      	it	cc
 800b39c:	250c      	movcc	r5, #12
 800b39e:	2d00      	cmp	r5, #0
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	db01      	blt.n	800b3a8 <_malloc_r+0x1c>
 800b3a4:	42a9      	cmp	r1, r5
 800b3a6:	d904      	bls.n	800b3b2 <_malloc_r+0x26>
 800b3a8:	230c      	movs	r3, #12
 800b3aa:	6033      	str	r3, [r6, #0]
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b488 <_malloc_r+0xfc>
 800b3b6:	f000 f869 	bl	800b48c <__malloc_lock>
 800b3ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b3be:	461c      	mov	r4, r3
 800b3c0:	bb44      	cbnz	r4, 800b414 <_malloc_r+0x88>
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f7ff ffbf 	bl	800b348 <sbrk_aligned>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	d158      	bne.n	800b482 <_malloc_r+0xf6>
 800b3d0:	f8d8 4000 	ldr.w	r4, [r8]
 800b3d4:	4627      	mov	r7, r4
 800b3d6:	2f00      	cmp	r7, #0
 800b3d8:	d143      	bne.n	800b462 <_malloc_r+0xd6>
 800b3da:	2c00      	cmp	r4, #0
 800b3dc:	d04b      	beq.n	800b476 <_malloc_r+0xea>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	eb04 0903 	add.w	r9, r4, r3
 800b3e8:	f001 fdf2 	bl	800cfd0 <_sbrk_r>
 800b3ec:	4581      	cmp	r9, r0
 800b3ee:	d142      	bne.n	800b476 <_malloc_r+0xea>
 800b3f0:	6821      	ldr	r1, [r4, #0]
 800b3f2:	1a6d      	subs	r5, r5, r1
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7ff ffa6 	bl	800b348 <sbrk_aligned>
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	d03a      	beq.n	800b476 <_malloc_r+0xea>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	442b      	add	r3, r5
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	f8d8 3000 	ldr.w	r3, [r8]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	bb62      	cbnz	r2, 800b468 <_malloc_r+0xdc>
 800b40e:	f8c8 7000 	str.w	r7, [r8]
 800b412:	e00f      	b.n	800b434 <_malloc_r+0xa8>
 800b414:	6822      	ldr	r2, [r4, #0]
 800b416:	1b52      	subs	r2, r2, r5
 800b418:	d420      	bmi.n	800b45c <_malloc_r+0xd0>
 800b41a:	2a0b      	cmp	r2, #11
 800b41c:	d917      	bls.n	800b44e <_malloc_r+0xc2>
 800b41e:	1961      	adds	r1, r4, r5
 800b420:	42a3      	cmp	r3, r4
 800b422:	6025      	str	r5, [r4, #0]
 800b424:	bf18      	it	ne
 800b426:	6059      	strne	r1, [r3, #4]
 800b428:	6863      	ldr	r3, [r4, #4]
 800b42a:	bf08      	it	eq
 800b42c:	f8c8 1000 	streq.w	r1, [r8]
 800b430:	5162      	str	r2, [r4, r5]
 800b432:	604b      	str	r3, [r1, #4]
 800b434:	4630      	mov	r0, r6
 800b436:	f000 f82f 	bl	800b498 <__malloc_unlock>
 800b43a:	f104 000b 	add.w	r0, r4, #11
 800b43e:	1d23      	adds	r3, r4, #4
 800b440:	f020 0007 	bic.w	r0, r0, #7
 800b444:	1ac2      	subs	r2, r0, r3
 800b446:	bf1c      	itt	ne
 800b448:	1a1b      	subne	r3, r3, r0
 800b44a:	50a3      	strne	r3, [r4, r2]
 800b44c:	e7af      	b.n	800b3ae <_malloc_r+0x22>
 800b44e:	6862      	ldr	r2, [r4, #4]
 800b450:	42a3      	cmp	r3, r4
 800b452:	bf0c      	ite	eq
 800b454:	f8c8 2000 	streq.w	r2, [r8]
 800b458:	605a      	strne	r2, [r3, #4]
 800b45a:	e7eb      	b.n	800b434 <_malloc_r+0xa8>
 800b45c:	4623      	mov	r3, r4
 800b45e:	6864      	ldr	r4, [r4, #4]
 800b460:	e7ae      	b.n	800b3c0 <_malloc_r+0x34>
 800b462:	463c      	mov	r4, r7
 800b464:	687f      	ldr	r7, [r7, #4]
 800b466:	e7b6      	b.n	800b3d6 <_malloc_r+0x4a>
 800b468:	461a      	mov	r2, r3
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	42a3      	cmp	r3, r4
 800b46e:	d1fb      	bne.n	800b468 <_malloc_r+0xdc>
 800b470:	2300      	movs	r3, #0
 800b472:	6053      	str	r3, [r2, #4]
 800b474:	e7de      	b.n	800b434 <_malloc_r+0xa8>
 800b476:	230c      	movs	r3, #12
 800b478:	6033      	str	r3, [r6, #0]
 800b47a:	4630      	mov	r0, r6
 800b47c:	f000 f80c 	bl	800b498 <__malloc_unlock>
 800b480:	e794      	b.n	800b3ac <_malloc_r+0x20>
 800b482:	6005      	str	r5, [r0, #0]
 800b484:	e7d6      	b.n	800b434 <_malloc_r+0xa8>
 800b486:	bf00      	nop
 800b488:	24000720 	.word	0x24000720

0800b48c <__malloc_lock>:
 800b48c:	4801      	ldr	r0, [pc, #4]	@ (800b494 <__malloc_lock+0x8>)
 800b48e:	f7ff b914 	b.w	800a6ba <__retarget_lock_acquire_recursive>
 800b492:	bf00      	nop
 800b494:	24000718 	.word	0x24000718

0800b498 <__malloc_unlock>:
 800b498:	4801      	ldr	r0, [pc, #4]	@ (800b4a0 <__malloc_unlock+0x8>)
 800b49a:	f7ff b90f 	b.w	800a6bc <__retarget_lock_release_recursive>
 800b49e:	bf00      	nop
 800b4a0:	24000718 	.word	0x24000718

0800b4a4 <_Balloc>:
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	69c6      	ldr	r6, [r0, #28]
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	b976      	cbnz	r6, 800b4cc <_Balloc+0x28>
 800b4ae:	2010      	movs	r0, #16
 800b4b0:	f7ff ff42 	bl	800b338 <malloc>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	61e0      	str	r0, [r4, #28]
 800b4b8:	b920      	cbnz	r0, 800b4c4 <_Balloc+0x20>
 800b4ba:	4b18      	ldr	r3, [pc, #96]	@ (800b51c <_Balloc+0x78>)
 800b4bc:	4818      	ldr	r0, [pc, #96]	@ (800b520 <_Balloc+0x7c>)
 800b4be:	216b      	movs	r1, #107	@ 0x6b
 800b4c0:	f001 fd9e 	bl	800d000 <__assert_func>
 800b4c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4c8:	6006      	str	r6, [r0, #0]
 800b4ca:	60c6      	str	r6, [r0, #12]
 800b4cc:	69e6      	ldr	r6, [r4, #28]
 800b4ce:	68f3      	ldr	r3, [r6, #12]
 800b4d0:	b183      	cbz	r3, 800b4f4 <_Balloc+0x50>
 800b4d2:	69e3      	ldr	r3, [r4, #28]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4da:	b9b8      	cbnz	r0, 800b50c <_Balloc+0x68>
 800b4dc:	2101      	movs	r1, #1
 800b4de:	fa01 f605 	lsl.w	r6, r1, r5
 800b4e2:	1d72      	adds	r2, r6, #5
 800b4e4:	0092      	lsls	r2, r2, #2
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f001 fda8 	bl	800d03c <_calloc_r>
 800b4ec:	b160      	cbz	r0, 800b508 <_Balloc+0x64>
 800b4ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4f2:	e00e      	b.n	800b512 <_Balloc+0x6e>
 800b4f4:	2221      	movs	r2, #33	@ 0x21
 800b4f6:	2104      	movs	r1, #4
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f001 fd9f 	bl	800d03c <_calloc_r>
 800b4fe:	69e3      	ldr	r3, [r4, #28]
 800b500:	60f0      	str	r0, [r6, #12]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e4      	bne.n	800b4d2 <_Balloc+0x2e>
 800b508:	2000      	movs	r0, #0
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
 800b50c:	6802      	ldr	r2, [r0, #0]
 800b50e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b512:	2300      	movs	r3, #0
 800b514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b518:	e7f7      	b.n	800b50a <_Balloc+0x66>
 800b51a:	bf00      	nop
 800b51c:	0800e1b2 	.word	0x0800e1b2
 800b520:	0800e232 	.word	0x0800e232

0800b524 <_Bfree>:
 800b524:	b570      	push	{r4, r5, r6, lr}
 800b526:	69c6      	ldr	r6, [r0, #28]
 800b528:	4605      	mov	r5, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	b976      	cbnz	r6, 800b54c <_Bfree+0x28>
 800b52e:	2010      	movs	r0, #16
 800b530:	f7ff ff02 	bl	800b338 <malloc>
 800b534:	4602      	mov	r2, r0
 800b536:	61e8      	str	r0, [r5, #28]
 800b538:	b920      	cbnz	r0, 800b544 <_Bfree+0x20>
 800b53a:	4b09      	ldr	r3, [pc, #36]	@ (800b560 <_Bfree+0x3c>)
 800b53c:	4809      	ldr	r0, [pc, #36]	@ (800b564 <_Bfree+0x40>)
 800b53e:	218f      	movs	r1, #143	@ 0x8f
 800b540:	f001 fd5e 	bl	800d000 <__assert_func>
 800b544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b548:	6006      	str	r6, [r0, #0]
 800b54a:	60c6      	str	r6, [r0, #12]
 800b54c:	b13c      	cbz	r4, 800b55e <_Bfree+0x3a>
 800b54e:	69eb      	ldr	r3, [r5, #28]
 800b550:	6862      	ldr	r2, [r4, #4]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b558:	6021      	str	r1, [r4, #0]
 800b55a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b55e:	bd70      	pop	{r4, r5, r6, pc}
 800b560:	0800e1b2 	.word	0x0800e1b2
 800b564:	0800e232 	.word	0x0800e232

0800b568 <__multadd>:
 800b568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56c:	690d      	ldr	r5, [r1, #16]
 800b56e:	4607      	mov	r7, r0
 800b570:	460c      	mov	r4, r1
 800b572:	461e      	mov	r6, r3
 800b574:	f101 0c14 	add.w	ip, r1, #20
 800b578:	2000      	movs	r0, #0
 800b57a:	f8dc 3000 	ldr.w	r3, [ip]
 800b57e:	b299      	uxth	r1, r3
 800b580:	fb02 6101 	mla	r1, r2, r1, r6
 800b584:	0c1e      	lsrs	r6, r3, #16
 800b586:	0c0b      	lsrs	r3, r1, #16
 800b588:	fb02 3306 	mla	r3, r2, r6, r3
 800b58c:	b289      	uxth	r1, r1
 800b58e:	3001      	adds	r0, #1
 800b590:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b594:	4285      	cmp	r5, r0
 800b596:	f84c 1b04 	str.w	r1, [ip], #4
 800b59a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b59e:	dcec      	bgt.n	800b57a <__multadd+0x12>
 800b5a0:	b30e      	cbz	r6, 800b5e6 <__multadd+0x7e>
 800b5a2:	68a3      	ldr	r3, [r4, #8]
 800b5a4:	42ab      	cmp	r3, r5
 800b5a6:	dc19      	bgt.n	800b5dc <__multadd+0x74>
 800b5a8:	6861      	ldr	r1, [r4, #4]
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	3101      	adds	r1, #1
 800b5ae:	f7ff ff79 	bl	800b4a4 <_Balloc>
 800b5b2:	4680      	mov	r8, r0
 800b5b4:	b928      	cbnz	r0, 800b5c2 <__multadd+0x5a>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	4b0c      	ldr	r3, [pc, #48]	@ (800b5ec <__multadd+0x84>)
 800b5ba:	480d      	ldr	r0, [pc, #52]	@ (800b5f0 <__multadd+0x88>)
 800b5bc:	21ba      	movs	r1, #186	@ 0xba
 800b5be:	f001 fd1f 	bl	800d000 <__assert_func>
 800b5c2:	6922      	ldr	r2, [r4, #16]
 800b5c4:	3202      	adds	r2, #2
 800b5c6:	f104 010c 	add.w	r1, r4, #12
 800b5ca:	0092      	lsls	r2, r2, #2
 800b5cc:	300c      	adds	r0, #12
 800b5ce:	f7ff f876 	bl	800a6be <memcpy>
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f7ff ffa5 	bl	800b524 <_Bfree>
 800b5da:	4644      	mov	r4, r8
 800b5dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5e0:	3501      	adds	r5, #1
 800b5e2:	615e      	str	r6, [r3, #20]
 800b5e4:	6125      	str	r5, [r4, #16]
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ec:	0800e221 	.word	0x0800e221
 800b5f0:	0800e232 	.word	0x0800e232

0800b5f4 <__s2b>:
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	4615      	mov	r5, r2
 800b5fc:	461f      	mov	r7, r3
 800b5fe:	2209      	movs	r2, #9
 800b600:	3308      	adds	r3, #8
 800b602:	4606      	mov	r6, r0
 800b604:	fb93 f3f2 	sdiv	r3, r3, r2
 800b608:	2100      	movs	r1, #0
 800b60a:	2201      	movs	r2, #1
 800b60c:	429a      	cmp	r2, r3
 800b60e:	db09      	blt.n	800b624 <__s2b+0x30>
 800b610:	4630      	mov	r0, r6
 800b612:	f7ff ff47 	bl	800b4a4 <_Balloc>
 800b616:	b940      	cbnz	r0, 800b62a <__s2b+0x36>
 800b618:	4602      	mov	r2, r0
 800b61a:	4b19      	ldr	r3, [pc, #100]	@ (800b680 <__s2b+0x8c>)
 800b61c:	4819      	ldr	r0, [pc, #100]	@ (800b684 <__s2b+0x90>)
 800b61e:	21d3      	movs	r1, #211	@ 0xd3
 800b620:	f001 fcee 	bl	800d000 <__assert_func>
 800b624:	0052      	lsls	r2, r2, #1
 800b626:	3101      	adds	r1, #1
 800b628:	e7f0      	b.n	800b60c <__s2b+0x18>
 800b62a:	9b08      	ldr	r3, [sp, #32]
 800b62c:	6143      	str	r3, [r0, #20]
 800b62e:	2d09      	cmp	r5, #9
 800b630:	f04f 0301 	mov.w	r3, #1
 800b634:	6103      	str	r3, [r0, #16]
 800b636:	dd16      	ble.n	800b666 <__s2b+0x72>
 800b638:	f104 0909 	add.w	r9, r4, #9
 800b63c:	46c8      	mov	r8, r9
 800b63e:	442c      	add	r4, r5
 800b640:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b644:	4601      	mov	r1, r0
 800b646:	3b30      	subs	r3, #48	@ 0x30
 800b648:	220a      	movs	r2, #10
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ff8c 	bl	800b568 <__multadd>
 800b650:	45a0      	cmp	r8, r4
 800b652:	d1f5      	bne.n	800b640 <__s2b+0x4c>
 800b654:	f1a5 0408 	sub.w	r4, r5, #8
 800b658:	444c      	add	r4, r9
 800b65a:	1b2d      	subs	r5, r5, r4
 800b65c:	1963      	adds	r3, r4, r5
 800b65e:	42bb      	cmp	r3, r7
 800b660:	db04      	blt.n	800b66c <__s2b+0x78>
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	340a      	adds	r4, #10
 800b668:	2509      	movs	r5, #9
 800b66a:	e7f6      	b.n	800b65a <__s2b+0x66>
 800b66c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b670:	4601      	mov	r1, r0
 800b672:	3b30      	subs	r3, #48	@ 0x30
 800b674:	220a      	movs	r2, #10
 800b676:	4630      	mov	r0, r6
 800b678:	f7ff ff76 	bl	800b568 <__multadd>
 800b67c:	e7ee      	b.n	800b65c <__s2b+0x68>
 800b67e:	bf00      	nop
 800b680:	0800e221 	.word	0x0800e221
 800b684:	0800e232 	.word	0x0800e232

0800b688 <__hi0bits>:
 800b688:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b68c:	4603      	mov	r3, r0
 800b68e:	bf36      	itet	cc
 800b690:	0403      	lslcc	r3, r0, #16
 800b692:	2000      	movcs	r0, #0
 800b694:	2010      	movcc	r0, #16
 800b696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b69a:	bf3c      	itt	cc
 800b69c:	021b      	lslcc	r3, r3, #8
 800b69e:	3008      	addcc	r0, #8
 800b6a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6a4:	bf3c      	itt	cc
 800b6a6:	011b      	lslcc	r3, r3, #4
 800b6a8:	3004      	addcc	r0, #4
 800b6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6ae:	bf3c      	itt	cc
 800b6b0:	009b      	lslcc	r3, r3, #2
 800b6b2:	3002      	addcc	r0, #2
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	db05      	blt.n	800b6c4 <__hi0bits+0x3c>
 800b6b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b6bc:	f100 0001 	add.w	r0, r0, #1
 800b6c0:	bf08      	it	eq
 800b6c2:	2020      	moveq	r0, #32
 800b6c4:	4770      	bx	lr

0800b6c6 <__lo0bits>:
 800b6c6:	6803      	ldr	r3, [r0, #0]
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	f013 0007 	ands.w	r0, r3, #7
 800b6ce:	d00b      	beq.n	800b6e8 <__lo0bits+0x22>
 800b6d0:	07d9      	lsls	r1, r3, #31
 800b6d2:	d421      	bmi.n	800b718 <__lo0bits+0x52>
 800b6d4:	0798      	lsls	r0, r3, #30
 800b6d6:	bf49      	itett	mi
 800b6d8:	085b      	lsrmi	r3, r3, #1
 800b6da:	089b      	lsrpl	r3, r3, #2
 800b6dc:	2001      	movmi	r0, #1
 800b6de:	6013      	strmi	r3, [r2, #0]
 800b6e0:	bf5c      	itt	pl
 800b6e2:	6013      	strpl	r3, [r2, #0]
 800b6e4:	2002      	movpl	r0, #2
 800b6e6:	4770      	bx	lr
 800b6e8:	b299      	uxth	r1, r3
 800b6ea:	b909      	cbnz	r1, 800b6f0 <__lo0bits+0x2a>
 800b6ec:	0c1b      	lsrs	r3, r3, #16
 800b6ee:	2010      	movs	r0, #16
 800b6f0:	b2d9      	uxtb	r1, r3
 800b6f2:	b909      	cbnz	r1, 800b6f8 <__lo0bits+0x32>
 800b6f4:	3008      	adds	r0, #8
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	0719      	lsls	r1, r3, #28
 800b6fa:	bf04      	itt	eq
 800b6fc:	091b      	lsreq	r3, r3, #4
 800b6fe:	3004      	addeq	r0, #4
 800b700:	0799      	lsls	r1, r3, #30
 800b702:	bf04      	itt	eq
 800b704:	089b      	lsreq	r3, r3, #2
 800b706:	3002      	addeq	r0, #2
 800b708:	07d9      	lsls	r1, r3, #31
 800b70a:	d403      	bmi.n	800b714 <__lo0bits+0x4e>
 800b70c:	085b      	lsrs	r3, r3, #1
 800b70e:	f100 0001 	add.w	r0, r0, #1
 800b712:	d003      	beq.n	800b71c <__lo0bits+0x56>
 800b714:	6013      	str	r3, [r2, #0]
 800b716:	4770      	bx	lr
 800b718:	2000      	movs	r0, #0
 800b71a:	4770      	bx	lr
 800b71c:	2020      	movs	r0, #32
 800b71e:	4770      	bx	lr

0800b720 <__i2b>:
 800b720:	b510      	push	{r4, lr}
 800b722:	460c      	mov	r4, r1
 800b724:	2101      	movs	r1, #1
 800b726:	f7ff febd 	bl	800b4a4 <_Balloc>
 800b72a:	4602      	mov	r2, r0
 800b72c:	b928      	cbnz	r0, 800b73a <__i2b+0x1a>
 800b72e:	4b05      	ldr	r3, [pc, #20]	@ (800b744 <__i2b+0x24>)
 800b730:	4805      	ldr	r0, [pc, #20]	@ (800b748 <__i2b+0x28>)
 800b732:	f240 1145 	movw	r1, #325	@ 0x145
 800b736:	f001 fc63 	bl	800d000 <__assert_func>
 800b73a:	2301      	movs	r3, #1
 800b73c:	6144      	str	r4, [r0, #20]
 800b73e:	6103      	str	r3, [r0, #16]
 800b740:	bd10      	pop	{r4, pc}
 800b742:	bf00      	nop
 800b744:	0800e221 	.word	0x0800e221
 800b748:	0800e232 	.word	0x0800e232

0800b74c <__multiply>:
 800b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b750:	4614      	mov	r4, r2
 800b752:	690a      	ldr	r2, [r1, #16]
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	429a      	cmp	r2, r3
 800b758:	bfa8      	it	ge
 800b75a:	4623      	movge	r3, r4
 800b75c:	460f      	mov	r7, r1
 800b75e:	bfa4      	itt	ge
 800b760:	460c      	movge	r4, r1
 800b762:	461f      	movge	r7, r3
 800b764:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b768:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b76c:	68a3      	ldr	r3, [r4, #8]
 800b76e:	6861      	ldr	r1, [r4, #4]
 800b770:	eb0a 0609 	add.w	r6, sl, r9
 800b774:	42b3      	cmp	r3, r6
 800b776:	b085      	sub	sp, #20
 800b778:	bfb8      	it	lt
 800b77a:	3101      	addlt	r1, #1
 800b77c:	f7ff fe92 	bl	800b4a4 <_Balloc>
 800b780:	b930      	cbnz	r0, 800b790 <__multiply+0x44>
 800b782:	4602      	mov	r2, r0
 800b784:	4b44      	ldr	r3, [pc, #272]	@ (800b898 <__multiply+0x14c>)
 800b786:	4845      	ldr	r0, [pc, #276]	@ (800b89c <__multiply+0x150>)
 800b788:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b78c:	f001 fc38 	bl	800d000 <__assert_func>
 800b790:	f100 0514 	add.w	r5, r0, #20
 800b794:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b798:	462b      	mov	r3, r5
 800b79a:	2200      	movs	r2, #0
 800b79c:	4543      	cmp	r3, r8
 800b79e:	d321      	bcc.n	800b7e4 <__multiply+0x98>
 800b7a0:	f107 0114 	add.w	r1, r7, #20
 800b7a4:	f104 0214 	add.w	r2, r4, #20
 800b7a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b7ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b7b0:	9302      	str	r3, [sp, #8]
 800b7b2:	1b13      	subs	r3, r2, r4
 800b7b4:	3b15      	subs	r3, #21
 800b7b6:	f023 0303 	bic.w	r3, r3, #3
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	f104 0715 	add.w	r7, r4, #21
 800b7c0:	42ba      	cmp	r2, r7
 800b7c2:	bf38      	it	cc
 800b7c4:	2304      	movcc	r3, #4
 800b7c6:	9301      	str	r3, [sp, #4]
 800b7c8:	9b02      	ldr	r3, [sp, #8]
 800b7ca:	9103      	str	r1, [sp, #12]
 800b7cc:	428b      	cmp	r3, r1
 800b7ce:	d80c      	bhi.n	800b7ea <__multiply+0x9e>
 800b7d0:	2e00      	cmp	r6, #0
 800b7d2:	dd03      	ble.n	800b7dc <__multiply+0x90>
 800b7d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d05b      	beq.n	800b894 <__multiply+0x148>
 800b7dc:	6106      	str	r6, [r0, #16]
 800b7de:	b005      	add	sp, #20
 800b7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e4:	f843 2b04 	str.w	r2, [r3], #4
 800b7e8:	e7d8      	b.n	800b79c <__multiply+0x50>
 800b7ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800b7ee:	f1ba 0f00 	cmp.w	sl, #0
 800b7f2:	d024      	beq.n	800b83e <__multiply+0xf2>
 800b7f4:	f104 0e14 	add.w	lr, r4, #20
 800b7f8:	46a9      	mov	r9, r5
 800b7fa:	f04f 0c00 	mov.w	ip, #0
 800b7fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b802:	f8d9 3000 	ldr.w	r3, [r9]
 800b806:	fa1f fb87 	uxth.w	fp, r7
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b810:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b814:	f8d9 7000 	ldr.w	r7, [r9]
 800b818:	4463      	add	r3, ip
 800b81a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b81e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b822:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b826:	b29b      	uxth	r3, r3
 800b828:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b82c:	4572      	cmp	r2, lr
 800b82e:	f849 3b04 	str.w	r3, [r9], #4
 800b832:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b836:	d8e2      	bhi.n	800b7fe <__multiply+0xb2>
 800b838:	9b01      	ldr	r3, [sp, #4]
 800b83a:	f845 c003 	str.w	ip, [r5, r3]
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b844:	3104      	adds	r1, #4
 800b846:	f1b9 0f00 	cmp.w	r9, #0
 800b84a:	d021      	beq.n	800b890 <__multiply+0x144>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	f104 0c14 	add.w	ip, r4, #20
 800b852:	46ae      	mov	lr, r5
 800b854:	f04f 0a00 	mov.w	sl, #0
 800b858:	f8bc b000 	ldrh.w	fp, [ip]
 800b85c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b860:	fb09 770b 	mla	r7, r9, fp, r7
 800b864:	4457      	add	r7, sl
 800b866:	b29b      	uxth	r3, r3
 800b868:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b86c:	f84e 3b04 	str.w	r3, [lr], #4
 800b870:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b878:	f8be 3000 	ldrh.w	r3, [lr]
 800b87c:	fb09 330a 	mla	r3, r9, sl, r3
 800b880:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b884:	4562      	cmp	r2, ip
 800b886:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b88a:	d8e5      	bhi.n	800b858 <__multiply+0x10c>
 800b88c:	9f01      	ldr	r7, [sp, #4]
 800b88e:	51eb      	str	r3, [r5, r7]
 800b890:	3504      	adds	r5, #4
 800b892:	e799      	b.n	800b7c8 <__multiply+0x7c>
 800b894:	3e01      	subs	r6, #1
 800b896:	e79b      	b.n	800b7d0 <__multiply+0x84>
 800b898:	0800e221 	.word	0x0800e221
 800b89c:	0800e232 	.word	0x0800e232

0800b8a0 <__pow5mult>:
 800b8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a4:	4615      	mov	r5, r2
 800b8a6:	f012 0203 	ands.w	r2, r2, #3
 800b8aa:	4607      	mov	r7, r0
 800b8ac:	460e      	mov	r6, r1
 800b8ae:	d007      	beq.n	800b8c0 <__pow5mult+0x20>
 800b8b0:	4c25      	ldr	r4, [pc, #148]	@ (800b948 <__pow5mult+0xa8>)
 800b8b2:	3a01      	subs	r2, #1
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8ba:	f7ff fe55 	bl	800b568 <__multadd>
 800b8be:	4606      	mov	r6, r0
 800b8c0:	10ad      	asrs	r5, r5, #2
 800b8c2:	d03d      	beq.n	800b940 <__pow5mult+0xa0>
 800b8c4:	69fc      	ldr	r4, [r7, #28]
 800b8c6:	b97c      	cbnz	r4, 800b8e8 <__pow5mult+0x48>
 800b8c8:	2010      	movs	r0, #16
 800b8ca:	f7ff fd35 	bl	800b338 <malloc>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	61f8      	str	r0, [r7, #28]
 800b8d2:	b928      	cbnz	r0, 800b8e0 <__pow5mult+0x40>
 800b8d4:	4b1d      	ldr	r3, [pc, #116]	@ (800b94c <__pow5mult+0xac>)
 800b8d6:	481e      	ldr	r0, [pc, #120]	@ (800b950 <__pow5mult+0xb0>)
 800b8d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b8dc:	f001 fb90 	bl	800d000 <__assert_func>
 800b8e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8e4:	6004      	str	r4, [r0, #0]
 800b8e6:	60c4      	str	r4, [r0, #12]
 800b8e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b8ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8f0:	b94c      	cbnz	r4, 800b906 <__pow5mult+0x66>
 800b8f2:	f240 2171 	movw	r1, #625	@ 0x271
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	f7ff ff12 	bl	800b720 <__i2b>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b902:	4604      	mov	r4, r0
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	f04f 0900 	mov.w	r9, #0
 800b90a:	07eb      	lsls	r3, r5, #31
 800b90c:	d50a      	bpl.n	800b924 <__pow5mult+0x84>
 800b90e:	4631      	mov	r1, r6
 800b910:	4622      	mov	r2, r4
 800b912:	4638      	mov	r0, r7
 800b914:	f7ff ff1a 	bl	800b74c <__multiply>
 800b918:	4631      	mov	r1, r6
 800b91a:	4680      	mov	r8, r0
 800b91c:	4638      	mov	r0, r7
 800b91e:	f7ff fe01 	bl	800b524 <_Bfree>
 800b922:	4646      	mov	r6, r8
 800b924:	106d      	asrs	r5, r5, #1
 800b926:	d00b      	beq.n	800b940 <__pow5mult+0xa0>
 800b928:	6820      	ldr	r0, [r4, #0]
 800b92a:	b938      	cbnz	r0, 800b93c <__pow5mult+0x9c>
 800b92c:	4622      	mov	r2, r4
 800b92e:	4621      	mov	r1, r4
 800b930:	4638      	mov	r0, r7
 800b932:	f7ff ff0b 	bl	800b74c <__multiply>
 800b936:	6020      	str	r0, [r4, #0]
 800b938:	f8c0 9000 	str.w	r9, [r0]
 800b93c:	4604      	mov	r4, r0
 800b93e:	e7e4      	b.n	800b90a <__pow5mult+0x6a>
 800b940:	4630      	mov	r0, r6
 800b942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b946:	bf00      	nop
 800b948:	0800e28c 	.word	0x0800e28c
 800b94c:	0800e1b2 	.word	0x0800e1b2
 800b950:	0800e232 	.word	0x0800e232

0800b954 <__lshift>:
 800b954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	460c      	mov	r4, r1
 800b95a:	6849      	ldr	r1, [r1, #4]
 800b95c:	6923      	ldr	r3, [r4, #16]
 800b95e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b962:	68a3      	ldr	r3, [r4, #8]
 800b964:	4607      	mov	r7, r0
 800b966:	4691      	mov	r9, r2
 800b968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b96c:	f108 0601 	add.w	r6, r8, #1
 800b970:	42b3      	cmp	r3, r6
 800b972:	db0b      	blt.n	800b98c <__lshift+0x38>
 800b974:	4638      	mov	r0, r7
 800b976:	f7ff fd95 	bl	800b4a4 <_Balloc>
 800b97a:	4605      	mov	r5, r0
 800b97c:	b948      	cbnz	r0, 800b992 <__lshift+0x3e>
 800b97e:	4602      	mov	r2, r0
 800b980:	4b28      	ldr	r3, [pc, #160]	@ (800ba24 <__lshift+0xd0>)
 800b982:	4829      	ldr	r0, [pc, #164]	@ (800ba28 <__lshift+0xd4>)
 800b984:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b988:	f001 fb3a 	bl	800d000 <__assert_func>
 800b98c:	3101      	adds	r1, #1
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	e7ee      	b.n	800b970 <__lshift+0x1c>
 800b992:	2300      	movs	r3, #0
 800b994:	f100 0114 	add.w	r1, r0, #20
 800b998:	f100 0210 	add.w	r2, r0, #16
 800b99c:	4618      	mov	r0, r3
 800b99e:	4553      	cmp	r3, sl
 800b9a0:	db33      	blt.n	800ba0a <__lshift+0xb6>
 800b9a2:	6920      	ldr	r0, [r4, #16]
 800b9a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9a8:	f104 0314 	add.w	r3, r4, #20
 800b9ac:	f019 091f 	ands.w	r9, r9, #31
 800b9b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9b8:	d02b      	beq.n	800ba12 <__lshift+0xbe>
 800b9ba:	f1c9 0e20 	rsb	lr, r9, #32
 800b9be:	468a      	mov	sl, r1
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	6818      	ldr	r0, [r3, #0]
 800b9c4:	fa00 f009 	lsl.w	r0, r0, r9
 800b9c8:	4310      	orrs	r0, r2
 800b9ca:	f84a 0b04 	str.w	r0, [sl], #4
 800b9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d2:	459c      	cmp	ip, r3
 800b9d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9d8:	d8f3      	bhi.n	800b9c2 <__lshift+0x6e>
 800b9da:	ebac 0304 	sub.w	r3, ip, r4
 800b9de:	3b15      	subs	r3, #21
 800b9e0:	f023 0303 	bic.w	r3, r3, #3
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	f104 0015 	add.w	r0, r4, #21
 800b9ea:	4584      	cmp	ip, r0
 800b9ec:	bf38      	it	cc
 800b9ee:	2304      	movcc	r3, #4
 800b9f0:	50ca      	str	r2, [r1, r3]
 800b9f2:	b10a      	cbz	r2, 800b9f8 <__lshift+0xa4>
 800b9f4:	f108 0602 	add.w	r6, r8, #2
 800b9f8:	3e01      	subs	r6, #1
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	612e      	str	r6, [r5, #16]
 800b9fe:	4621      	mov	r1, r4
 800ba00:	f7ff fd90 	bl	800b524 <_Bfree>
 800ba04:	4628      	mov	r0, r5
 800ba06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba0e:	3301      	adds	r3, #1
 800ba10:	e7c5      	b.n	800b99e <__lshift+0x4a>
 800ba12:	3904      	subs	r1, #4
 800ba14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba1c:	459c      	cmp	ip, r3
 800ba1e:	d8f9      	bhi.n	800ba14 <__lshift+0xc0>
 800ba20:	e7ea      	b.n	800b9f8 <__lshift+0xa4>
 800ba22:	bf00      	nop
 800ba24:	0800e221 	.word	0x0800e221
 800ba28:	0800e232 	.word	0x0800e232

0800ba2c <__mcmp>:
 800ba2c:	690a      	ldr	r2, [r1, #16]
 800ba2e:	4603      	mov	r3, r0
 800ba30:	6900      	ldr	r0, [r0, #16]
 800ba32:	1a80      	subs	r0, r0, r2
 800ba34:	b530      	push	{r4, r5, lr}
 800ba36:	d10e      	bne.n	800ba56 <__mcmp+0x2a>
 800ba38:	3314      	adds	r3, #20
 800ba3a:	3114      	adds	r1, #20
 800ba3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba4c:	4295      	cmp	r5, r2
 800ba4e:	d003      	beq.n	800ba58 <__mcmp+0x2c>
 800ba50:	d205      	bcs.n	800ba5e <__mcmp+0x32>
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
 800ba56:	bd30      	pop	{r4, r5, pc}
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	d3f3      	bcc.n	800ba44 <__mcmp+0x18>
 800ba5c:	e7fb      	b.n	800ba56 <__mcmp+0x2a>
 800ba5e:	2001      	movs	r0, #1
 800ba60:	e7f9      	b.n	800ba56 <__mcmp+0x2a>
	...

0800ba64 <__mdiff>:
 800ba64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	4689      	mov	r9, r1
 800ba6a:	4606      	mov	r6, r0
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	4648      	mov	r0, r9
 800ba70:	4614      	mov	r4, r2
 800ba72:	f7ff ffdb 	bl	800ba2c <__mcmp>
 800ba76:	1e05      	subs	r5, r0, #0
 800ba78:	d112      	bne.n	800baa0 <__mdiff+0x3c>
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f7ff fd11 	bl	800b4a4 <_Balloc>
 800ba82:	4602      	mov	r2, r0
 800ba84:	b928      	cbnz	r0, 800ba92 <__mdiff+0x2e>
 800ba86:	4b3f      	ldr	r3, [pc, #252]	@ (800bb84 <__mdiff+0x120>)
 800ba88:	f240 2137 	movw	r1, #567	@ 0x237
 800ba8c:	483e      	ldr	r0, [pc, #248]	@ (800bb88 <__mdiff+0x124>)
 800ba8e:	f001 fab7 	bl	800d000 <__assert_func>
 800ba92:	2301      	movs	r3, #1
 800ba94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba98:	4610      	mov	r0, r2
 800ba9a:	b003      	add	sp, #12
 800ba9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa0:	bfbc      	itt	lt
 800baa2:	464b      	movlt	r3, r9
 800baa4:	46a1      	movlt	r9, r4
 800baa6:	4630      	mov	r0, r6
 800baa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800baac:	bfba      	itte	lt
 800baae:	461c      	movlt	r4, r3
 800bab0:	2501      	movlt	r5, #1
 800bab2:	2500      	movge	r5, #0
 800bab4:	f7ff fcf6 	bl	800b4a4 <_Balloc>
 800bab8:	4602      	mov	r2, r0
 800baba:	b918      	cbnz	r0, 800bac4 <__mdiff+0x60>
 800babc:	4b31      	ldr	r3, [pc, #196]	@ (800bb84 <__mdiff+0x120>)
 800babe:	f240 2145 	movw	r1, #581	@ 0x245
 800bac2:	e7e3      	b.n	800ba8c <__mdiff+0x28>
 800bac4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bac8:	6926      	ldr	r6, [r4, #16]
 800baca:	60c5      	str	r5, [r0, #12]
 800bacc:	f109 0310 	add.w	r3, r9, #16
 800bad0:	f109 0514 	add.w	r5, r9, #20
 800bad4:	f104 0e14 	add.w	lr, r4, #20
 800bad8:	f100 0b14 	add.w	fp, r0, #20
 800badc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bae0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	46d9      	mov	r9, fp
 800bae8:	f04f 0c00 	mov.w	ip, #0
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800baf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	fa1f f38a 	uxth.w	r3, sl
 800bafc:	4619      	mov	r1, r3
 800bafe:	b283      	uxth	r3, r0
 800bb00:	1acb      	subs	r3, r1, r3
 800bb02:	0c00      	lsrs	r0, r0, #16
 800bb04:	4463      	add	r3, ip
 800bb06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb14:	4576      	cmp	r6, lr
 800bb16:	f849 3b04 	str.w	r3, [r9], #4
 800bb1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb1e:	d8e5      	bhi.n	800baec <__mdiff+0x88>
 800bb20:	1b33      	subs	r3, r6, r4
 800bb22:	3b15      	subs	r3, #21
 800bb24:	f023 0303 	bic.w	r3, r3, #3
 800bb28:	3415      	adds	r4, #21
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	42a6      	cmp	r6, r4
 800bb2e:	bf38      	it	cc
 800bb30:	2304      	movcc	r3, #4
 800bb32:	441d      	add	r5, r3
 800bb34:	445b      	add	r3, fp
 800bb36:	461e      	mov	r6, r3
 800bb38:	462c      	mov	r4, r5
 800bb3a:	4544      	cmp	r4, r8
 800bb3c:	d30e      	bcc.n	800bb5c <__mdiff+0xf8>
 800bb3e:	f108 0103 	add.w	r1, r8, #3
 800bb42:	1b49      	subs	r1, r1, r5
 800bb44:	f021 0103 	bic.w	r1, r1, #3
 800bb48:	3d03      	subs	r5, #3
 800bb4a:	45a8      	cmp	r8, r5
 800bb4c:	bf38      	it	cc
 800bb4e:	2100      	movcc	r1, #0
 800bb50:	440b      	add	r3, r1
 800bb52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb56:	b191      	cbz	r1, 800bb7e <__mdiff+0x11a>
 800bb58:	6117      	str	r7, [r2, #16]
 800bb5a:	e79d      	b.n	800ba98 <__mdiff+0x34>
 800bb5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb60:	46e6      	mov	lr, ip
 800bb62:	0c08      	lsrs	r0, r1, #16
 800bb64:	fa1c fc81 	uxtah	ip, ip, r1
 800bb68:	4471      	add	r1, lr
 800bb6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb6e:	b289      	uxth	r1, r1
 800bb70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb74:	f846 1b04 	str.w	r1, [r6], #4
 800bb78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb7c:	e7dd      	b.n	800bb3a <__mdiff+0xd6>
 800bb7e:	3f01      	subs	r7, #1
 800bb80:	e7e7      	b.n	800bb52 <__mdiff+0xee>
 800bb82:	bf00      	nop
 800bb84:	0800e221 	.word	0x0800e221
 800bb88:	0800e232 	.word	0x0800e232

0800bb8c <__ulp>:
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	ed8d 0b00 	vstr	d0, [sp]
 800bb92:	9a01      	ldr	r2, [sp, #4]
 800bb94:	4b0f      	ldr	r3, [pc, #60]	@ (800bbd4 <__ulp+0x48>)
 800bb96:	4013      	ands	r3, r2
 800bb98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	dc08      	bgt.n	800bbb2 <__ulp+0x26>
 800bba0:	425b      	negs	r3, r3
 800bba2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bba6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbaa:	da04      	bge.n	800bbb6 <__ulp+0x2a>
 800bbac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bbb0:	4113      	asrs	r3, r2
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	e008      	b.n	800bbc8 <__ulp+0x3c>
 800bbb6:	f1a2 0314 	sub.w	r3, r2, #20
 800bbba:	2b1e      	cmp	r3, #30
 800bbbc:	bfda      	itte	le
 800bbbe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bbc2:	40da      	lsrle	r2, r3
 800bbc4:	2201      	movgt	r2, #1
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	ec41 0b10 	vmov	d0, r0, r1
 800bbd0:	b002      	add	sp, #8
 800bbd2:	4770      	bx	lr
 800bbd4:	7ff00000 	.word	0x7ff00000

0800bbd8 <__b2d>:
 800bbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	6906      	ldr	r6, [r0, #16]
 800bbde:	f100 0814 	add.w	r8, r0, #20
 800bbe2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bbe6:	1f37      	subs	r7, r6, #4
 800bbe8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bbec:	4610      	mov	r0, r2
 800bbee:	f7ff fd4b 	bl	800b688 <__hi0bits>
 800bbf2:	f1c0 0320 	rsb	r3, r0, #32
 800bbf6:	280a      	cmp	r0, #10
 800bbf8:	600b      	str	r3, [r1, #0]
 800bbfa:	491b      	ldr	r1, [pc, #108]	@ (800bc68 <__b2d+0x90>)
 800bbfc:	dc15      	bgt.n	800bc2a <__b2d+0x52>
 800bbfe:	f1c0 0c0b 	rsb	ip, r0, #11
 800bc02:	fa22 f30c 	lsr.w	r3, r2, ip
 800bc06:	45b8      	cmp	r8, r7
 800bc08:	ea43 0501 	orr.w	r5, r3, r1
 800bc0c:	bf34      	ite	cc
 800bc0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc12:	2300      	movcs	r3, #0
 800bc14:	3015      	adds	r0, #21
 800bc16:	fa02 f000 	lsl.w	r0, r2, r0
 800bc1a:	fa23 f30c 	lsr.w	r3, r3, ip
 800bc1e:	4303      	orrs	r3, r0
 800bc20:	461c      	mov	r4, r3
 800bc22:	ec45 4b10 	vmov	d0, r4, r5
 800bc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc2a:	45b8      	cmp	r8, r7
 800bc2c:	bf3a      	itte	cc
 800bc2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc32:	f1a6 0708 	subcc.w	r7, r6, #8
 800bc36:	2300      	movcs	r3, #0
 800bc38:	380b      	subs	r0, #11
 800bc3a:	d012      	beq.n	800bc62 <__b2d+0x8a>
 800bc3c:	f1c0 0120 	rsb	r1, r0, #32
 800bc40:	fa23 f401 	lsr.w	r4, r3, r1
 800bc44:	4082      	lsls	r2, r0
 800bc46:	4322      	orrs	r2, r4
 800bc48:	4547      	cmp	r7, r8
 800bc4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bc4e:	bf8c      	ite	hi
 800bc50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bc54:	2200      	movls	r2, #0
 800bc56:	4083      	lsls	r3, r0
 800bc58:	40ca      	lsrs	r2, r1
 800bc5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	e7de      	b.n	800bc20 <__b2d+0x48>
 800bc62:	ea42 0501 	orr.w	r5, r2, r1
 800bc66:	e7db      	b.n	800bc20 <__b2d+0x48>
 800bc68:	3ff00000 	.word	0x3ff00000

0800bc6c <__d2b>:
 800bc6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc70:	460f      	mov	r7, r1
 800bc72:	2101      	movs	r1, #1
 800bc74:	ec59 8b10 	vmov	r8, r9, d0
 800bc78:	4616      	mov	r6, r2
 800bc7a:	f7ff fc13 	bl	800b4a4 <_Balloc>
 800bc7e:	4604      	mov	r4, r0
 800bc80:	b930      	cbnz	r0, 800bc90 <__d2b+0x24>
 800bc82:	4602      	mov	r2, r0
 800bc84:	4b23      	ldr	r3, [pc, #140]	@ (800bd14 <__d2b+0xa8>)
 800bc86:	4824      	ldr	r0, [pc, #144]	@ (800bd18 <__d2b+0xac>)
 800bc88:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc8c:	f001 f9b8 	bl	800d000 <__assert_func>
 800bc90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc98:	b10d      	cbz	r5, 800bc9e <__d2b+0x32>
 800bc9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc9e:	9301      	str	r3, [sp, #4]
 800bca0:	f1b8 0300 	subs.w	r3, r8, #0
 800bca4:	d023      	beq.n	800bcee <__d2b+0x82>
 800bca6:	4668      	mov	r0, sp
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	f7ff fd0c 	bl	800b6c6 <__lo0bits>
 800bcae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bcb2:	b1d0      	cbz	r0, 800bcea <__d2b+0x7e>
 800bcb4:	f1c0 0320 	rsb	r3, r0, #32
 800bcb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcbc:	430b      	orrs	r3, r1
 800bcbe:	40c2      	lsrs	r2, r0
 800bcc0:	6163      	str	r3, [r4, #20]
 800bcc2:	9201      	str	r2, [sp, #4]
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	61a3      	str	r3, [r4, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	bf0c      	ite	eq
 800bccc:	2201      	moveq	r2, #1
 800bcce:	2202      	movne	r2, #2
 800bcd0:	6122      	str	r2, [r4, #16]
 800bcd2:	b1a5      	cbz	r5, 800bcfe <__d2b+0x92>
 800bcd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bcd8:	4405      	add	r5, r0
 800bcda:	603d      	str	r5, [r7, #0]
 800bcdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bce0:	6030      	str	r0, [r6, #0]
 800bce2:	4620      	mov	r0, r4
 800bce4:	b003      	add	sp, #12
 800bce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcea:	6161      	str	r1, [r4, #20]
 800bcec:	e7ea      	b.n	800bcc4 <__d2b+0x58>
 800bcee:	a801      	add	r0, sp, #4
 800bcf0:	f7ff fce9 	bl	800b6c6 <__lo0bits>
 800bcf4:	9b01      	ldr	r3, [sp, #4]
 800bcf6:	6163      	str	r3, [r4, #20]
 800bcf8:	3020      	adds	r0, #32
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	e7e8      	b.n	800bcd0 <__d2b+0x64>
 800bcfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd06:	6038      	str	r0, [r7, #0]
 800bd08:	6918      	ldr	r0, [r3, #16]
 800bd0a:	f7ff fcbd 	bl	800b688 <__hi0bits>
 800bd0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd12:	e7e5      	b.n	800bce0 <__d2b+0x74>
 800bd14:	0800e221 	.word	0x0800e221
 800bd18:	0800e232 	.word	0x0800e232

0800bd1c <__ratio>:
 800bd1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd20:	4688      	mov	r8, r1
 800bd22:	4669      	mov	r1, sp
 800bd24:	4681      	mov	r9, r0
 800bd26:	f7ff ff57 	bl	800bbd8 <__b2d>
 800bd2a:	a901      	add	r1, sp, #4
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	ec55 4b10 	vmov	r4, r5, d0
 800bd32:	f7ff ff51 	bl	800bbd8 <__b2d>
 800bd36:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bd3a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bd3e:	1ad2      	subs	r2, r2, r3
 800bd40:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bd44:	1a5b      	subs	r3, r3, r1
 800bd46:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bd4a:	ec57 6b10 	vmov	r6, r7, d0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	bfd6      	itet	le
 800bd52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd56:	462a      	movgt	r2, r5
 800bd58:	463a      	movle	r2, r7
 800bd5a:	46ab      	mov	fp, r5
 800bd5c:	46a2      	mov	sl, r4
 800bd5e:	bfce      	itee	gt
 800bd60:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bd64:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bd68:	ee00 3a90 	vmovle	s1, r3
 800bd6c:	ec4b ab17 	vmov	d7, sl, fp
 800bd70:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bd74:	b003      	add	sp, #12
 800bd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd7a <__copybits>:
 800bd7a:	3901      	subs	r1, #1
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	1149      	asrs	r1, r1, #5
 800bd80:	6914      	ldr	r4, [r2, #16]
 800bd82:	3101      	adds	r1, #1
 800bd84:	f102 0314 	add.w	r3, r2, #20
 800bd88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd90:	1f05      	subs	r5, r0, #4
 800bd92:	42a3      	cmp	r3, r4
 800bd94:	d30c      	bcc.n	800bdb0 <__copybits+0x36>
 800bd96:	1aa3      	subs	r3, r4, r2
 800bd98:	3b11      	subs	r3, #17
 800bd9a:	f023 0303 	bic.w	r3, r3, #3
 800bd9e:	3211      	adds	r2, #17
 800bda0:	42a2      	cmp	r2, r4
 800bda2:	bf88      	it	hi
 800bda4:	2300      	movhi	r3, #0
 800bda6:	4418      	add	r0, r3
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4288      	cmp	r0, r1
 800bdac:	d305      	bcc.n	800bdba <__copybits+0x40>
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	f853 6b04 	ldr.w	r6, [r3], #4
 800bdb4:	f845 6f04 	str.w	r6, [r5, #4]!
 800bdb8:	e7eb      	b.n	800bd92 <__copybits+0x18>
 800bdba:	f840 3b04 	str.w	r3, [r0], #4
 800bdbe:	e7f4      	b.n	800bdaa <__copybits+0x30>

0800bdc0 <__any_on>:
 800bdc0:	f100 0214 	add.w	r2, r0, #20
 800bdc4:	6900      	ldr	r0, [r0, #16]
 800bdc6:	114b      	asrs	r3, r1, #5
 800bdc8:	4298      	cmp	r0, r3
 800bdca:	b510      	push	{r4, lr}
 800bdcc:	db11      	blt.n	800bdf2 <__any_on+0x32>
 800bdce:	dd0a      	ble.n	800bde6 <__any_on+0x26>
 800bdd0:	f011 011f 	ands.w	r1, r1, #31
 800bdd4:	d007      	beq.n	800bde6 <__any_on+0x26>
 800bdd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bdda:	fa24 f001 	lsr.w	r0, r4, r1
 800bdde:	fa00 f101 	lsl.w	r1, r0, r1
 800bde2:	428c      	cmp	r4, r1
 800bde4:	d10b      	bne.n	800bdfe <__any_on+0x3e>
 800bde6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d803      	bhi.n	800bdf6 <__any_on+0x36>
 800bdee:	2000      	movs	r0, #0
 800bdf0:	bd10      	pop	{r4, pc}
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	e7f7      	b.n	800bde6 <__any_on+0x26>
 800bdf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdfa:	2900      	cmp	r1, #0
 800bdfc:	d0f5      	beq.n	800bdea <__any_on+0x2a>
 800bdfe:	2001      	movs	r0, #1
 800be00:	e7f6      	b.n	800bdf0 <__any_on+0x30>

0800be02 <sulp>:
 800be02:	b570      	push	{r4, r5, r6, lr}
 800be04:	4604      	mov	r4, r0
 800be06:	460d      	mov	r5, r1
 800be08:	4616      	mov	r6, r2
 800be0a:	ec45 4b10 	vmov	d0, r4, r5
 800be0e:	f7ff febd 	bl	800bb8c <__ulp>
 800be12:	b17e      	cbz	r6, 800be34 <sulp+0x32>
 800be14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800be18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	dd09      	ble.n	800be34 <sulp+0x32>
 800be20:	051b      	lsls	r3, r3, #20
 800be22:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800be26:	2000      	movs	r0, #0
 800be28:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800be2c:	ec41 0b17 	vmov	d7, r0, r1
 800be30:	ee20 0b07 	vmul.f64	d0, d0, d7
 800be34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be38 <_strtod_l>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	ed2d 8b0a 	vpush	{d8-d12}
 800be40:	b097      	sub	sp, #92	@ 0x5c
 800be42:	4688      	mov	r8, r1
 800be44:	920e      	str	r2, [sp, #56]	@ 0x38
 800be46:	2200      	movs	r2, #0
 800be48:	9212      	str	r2, [sp, #72]	@ 0x48
 800be4a:	9005      	str	r0, [sp, #20]
 800be4c:	f04f 0a00 	mov.w	sl, #0
 800be50:	f04f 0b00 	mov.w	fp, #0
 800be54:	460a      	mov	r2, r1
 800be56:	9211      	str	r2, [sp, #68]	@ 0x44
 800be58:	7811      	ldrb	r1, [r2, #0]
 800be5a:	292b      	cmp	r1, #43	@ 0x2b
 800be5c:	d04c      	beq.n	800bef8 <_strtod_l+0xc0>
 800be5e:	d839      	bhi.n	800bed4 <_strtod_l+0x9c>
 800be60:	290d      	cmp	r1, #13
 800be62:	d833      	bhi.n	800becc <_strtod_l+0x94>
 800be64:	2908      	cmp	r1, #8
 800be66:	d833      	bhi.n	800bed0 <_strtod_l+0x98>
 800be68:	2900      	cmp	r1, #0
 800be6a:	d03c      	beq.n	800bee6 <_strtod_l+0xae>
 800be6c:	2200      	movs	r2, #0
 800be6e:	9208      	str	r2, [sp, #32]
 800be70:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800be72:	782a      	ldrb	r2, [r5, #0]
 800be74:	2a30      	cmp	r2, #48	@ 0x30
 800be76:	f040 80b5 	bne.w	800bfe4 <_strtod_l+0x1ac>
 800be7a:	786a      	ldrb	r2, [r5, #1]
 800be7c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be80:	2a58      	cmp	r2, #88	@ 0x58
 800be82:	d170      	bne.n	800bf66 <_strtod_l+0x12e>
 800be84:	9302      	str	r3, [sp, #8]
 800be86:	9b08      	ldr	r3, [sp, #32]
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	ab12      	add	r3, sp, #72	@ 0x48
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	4a8b      	ldr	r2, [pc, #556]	@ (800c0bc <_strtod_l+0x284>)
 800be90:	9805      	ldr	r0, [sp, #20]
 800be92:	ab13      	add	r3, sp, #76	@ 0x4c
 800be94:	a911      	add	r1, sp, #68	@ 0x44
 800be96:	f001 f94d 	bl	800d134 <__gethex>
 800be9a:	f010 060f 	ands.w	r6, r0, #15
 800be9e:	4604      	mov	r4, r0
 800bea0:	d005      	beq.n	800beae <_strtod_l+0x76>
 800bea2:	2e06      	cmp	r6, #6
 800bea4:	d12a      	bne.n	800befc <_strtod_l+0xc4>
 800bea6:	3501      	adds	r5, #1
 800bea8:	2300      	movs	r3, #0
 800beaa:	9511      	str	r5, [sp, #68]	@ 0x44
 800beac:	9308      	str	r3, [sp, #32]
 800beae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f040 852f 	bne.w	800c914 <_strtod_l+0xadc>
 800beb6:	9b08      	ldr	r3, [sp, #32]
 800beb8:	ec4b ab10 	vmov	d0, sl, fp
 800bebc:	b1cb      	cbz	r3, 800bef2 <_strtod_l+0xba>
 800bebe:	eeb1 0b40 	vneg.f64	d0, d0
 800bec2:	b017      	add	sp, #92	@ 0x5c
 800bec4:	ecbd 8b0a 	vpop	{d8-d12}
 800bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800becc:	2920      	cmp	r1, #32
 800bece:	d1cd      	bne.n	800be6c <_strtod_l+0x34>
 800bed0:	3201      	adds	r2, #1
 800bed2:	e7c0      	b.n	800be56 <_strtod_l+0x1e>
 800bed4:	292d      	cmp	r1, #45	@ 0x2d
 800bed6:	d1c9      	bne.n	800be6c <_strtod_l+0x34>
 800bed8:	2101      	movs	r1, #1
 800beda:	9108      	str	r1, [sp, #32]
 800bedc:	1c51      	adds	r1, r2, #1
 800bede:	9111      	str	r1, [sp, #68]	@ 0x44
 800bee0:	7852      	ldrb	r2, [r2, #1]
 800bee2:	2a00      	cmp	r2, #0
 800bee4:	d1c4      	bne.n	800be70 <_strtod_l+0x38>
 800bee6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800beec:	2b00      	cmp	r3, #0
 800beee:	f040 850f 	bne.w	800c910 <_strtod_l+0xad8>
 800bef2:	ec4b ab10 	vmov	d0, sl, fp
 800bef6:	e7e4      	b.n	800bec2 <_strtod_l+0x8a>
 800bef8:	2100      	movs	r1, #0
 800befa:	e7ee      	b.n	800beda <_strtod_l+0xa2>
 800befc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800befe:	b13a      	cbz	r2, 800bf10 <_strtod_l+0xd8>
 800bf00:	2135      	movs	r1, #53	@ 0x35
 800bf02:	a814      	add	r0, sp, #80	@ 0x50
 800bf04:	f7ff ff39 	bl	800bd7a <__copybits>
 800bf08:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bf0a:	9805      	ldr	r0, [sp, #20]
 800bf0c:	f7ff fb0a 	bl	800b524 <_Bfree>
 800bf10:	1e73      	subs	r3, r6, #1
 800bf12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf14:	2b04      	cmp	r3, #4
 800bf16:	d806      	bhi.n	800bf26 <_strtod_l+0xee>
 800bf18:	e8df f003 	tbb	[pc, r3]
 800bf1c:	201d0314 	.word	0x201d0314
 800bf20:	14          	.byte	0x14
 800bf21:	00          	.byte	0x00
 800bf22:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800bf26:	05e3      	lsls	r3, r4, #23
 800bf28:	bf48      	it	mi
 800bf2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bf2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf32:	0d1b      	lsrs	r3, r3, #20
 800bf34:	051b      	lsls	r3, r3, #20
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1b9      	bne.n	800beae <_strtod_l+0x76>
 800bf3a:	f7fe fb93 	bl	800a664 <__errno>
 800bf3e:	2322      	movs	r3, #34	@ 0x22
 800bf40:	6003      	str	r3, [r0, #0]
 800bf42:	e7b4      	b.n	800beae <_strtod_l+0x76>
 800bf44:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800bf48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bf4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bf50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bf54:	e7e7      	b.n	800bf26 <_strtod_l+0xee>
 800bf56:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800c0c4 <_strtod_l+0x28c>
 800bf5a:	e7e4      	b.n	800bf26 <_strtod_l+0xee>
 800bf5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bf60:	f04f 3aff 	mov.w	sl, #4294967295
 800bf64:	e7df      	b.n	800bf26 <_strtod_l+0xee>
 800bf66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	9211      	str	r2, [sp, #68]	@ 0x44
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	2b30      	cmp	r3, #48	@ 0x30
 800bf70:	d0f9      	beq.n	800bf66 <_strtod_l+0x12e>
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d09b      	beq.n	800beae <_strtod_l+0x76>
 800bf76:	2301      	movs	r3, #1
 800bf78:	2600      	movs	r6, #0
 800bf7a:	9307      	str	r3, [sp, #28]
 800bf7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf80:	46b1      	mov	r9, r6
 800bf82:	4635      	mov	r5, r6
 800bf84:	220a      	movs	r2, #10
 800bf86:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800bf88:	7804      	ldrb	r4, [r0, #0]
 800bf8a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800bf8e:	b2d9      	uxtb	r1, r3
 800bf90:	2909      	cmp	r1, #9
 800bf92:	d929      	bls.n	800bfe8 <_strtod_l+0x1b0>
 800bf94:	494a      	ldr	r1, [pc, #296]	@ (800c0c0 <_strtod_l+0x288>)
 800bf96:	2201      	movs	r2, #1
 800bf98:	f000 ffe6 	bl	800cf68 <strncmp>
 800bf9c:	b378      	cbz	r0, 800bffe <_strtod_l+0x1c6>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	4607      	mov	r7, r0
 800bfa6:	9006      	str	r0, [sp, #24]
 800bfa8:	2a65      	cmp	r2, #101	@ 0x65
 800bfaa:	d001      	beq.n	800bfb0 <_strtod_l+0x178>
 800bfac:	2a45      	cmp	r2, #69	@ 0x45
 800bfae:	d117      	bne.n	800bfe0 <_strtod_l+0x1a8>
 800bfb0:	b91b      	cbnz	r3, 800bfba <_strtod_l+0x182>
 800bfb2:	9b07      	ldr	r3, [sp, #28]
 800bfb4:	4303      	orrs	r3, r0
 800bfb6:	d096      	beq.n	800bee6 <_strtod_l+0xae>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800bfbe:	f108 0201 	add.w	r2, r8, #1
 800bfc2:	9211      	str	r2, [sp, #68]	@ 0x44
 800bfc4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bfc8:	2a2b      	cmp	r2, #43	@ 0x2b
 800bfca:	d06b      	beq.n	800c0a4 <_strtod_l+0x26c>
 800bfcc:	2a2d      	cmp	r2, #45	@ 0x2d
 800bfce:	d071      	beq.n	800c0b4 <_strtod_l+0x27c>
 800bfd0:	f04f 0e00 	mov.w	lr, #0
 800bfd4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800bfd8:	2c09      	cmp	r4, #9
 800bfda:	d979      	bls.n	800c0d0 <_strtod_l+0x298>
 800bfdc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800bfe0:	2400      	movs	r4, #0
 800bfe2:	e094      	b.n	800c10e <_strtod_l+0x2d6>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	e7c7      	b.n	800bf78 <_strtod_l+0x140>
 800bfe8:	2d08      	cmp	r5, #8
 800bfea:	f100 0001 	add.w	r0, r0, #1
 800bfee:	bfd4      	ite	le
 800bff0:	fb02 3909 	mlale	r9, r2, r9, r3
 800bff4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800bff8:	3501      	adds	r5, #1
 800bffa:	9011      	str	r0, [sp, #68]	@ 0x44
 800bffc:	e7c3      	b.n	800bf86 <_strtod_l+0x14e>
 800bffe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	9211      	str	r2, [sp, #68]	@ 0x44
 800c004:	785a      	ldrb	r2, [r3, #1]
 800c006:	b375      	cbz	r5, 800c066 <_strtod_l+0x22e>
 800c008:	4607      	mov	r7, r0
 800c00a:	462b      	mov	r3, r5
 800c00c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c010:	2909      	cmp	r1, #9
 800c012:	d913      	bls.n	800c03c <_strtod_l+0x204>
 800c014:	2101      	movs	r1, #1
 800c016:	9106      	str	r1, [sp, #24]
 800c018:	e7c6      	b.n	800bfa8 <_strtod_l+0x170>
 800c01a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c01c:	1c5a      	adds	r2, r3, #1
 800c01e:	9211      	str	r2, [sp, #68]	@ 0x44
 800c020:	785a      	ldrb	r2, [r3, #1]
 800c022:	3001      	adds	r0, #1
 800c024:	2a30      	cmp	r2, #48	@ 0x30
 800c026:	d0f8      	beq.n	800c01a <_strtod_l+0x1e2>
 800c028:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c02c:	2b08      	cmp	r3, #8
 800c02e:	f200 8476 	bhi.w	800c91e <_strtod_l+0xae6>
 800c032:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c034:	930a      	str	r3, [sp, #40]	@ 0x28
 800c036:	4607      	mov	r7, r0
 800c038:	2000      	movs	r0, #0
 800c03a:	4603      	mov	r3, r0
 800c03c:	3a30      	subs	r2, #48	@ 0x30
 800c03e:	f100 0101 	add.w	r1, r0, #1
 800c042:	d023      	beq.n	800c08c <_strtod_l+0x254>
 800c044:	440f      	add	r7, r1
 800c046:	eb00 0c03 	add.w	ip, r0, r3
 800c04a:	4619      	mov	r1, r3
 800c04c:	240a      	movs	r4, #10
 800c04e:	4561      	cmp	r1, ip
 800c050:	d10b      	bne.n	800c06a <_strtod_l+0x232>
 800c052:	1c5c      	adds	r4, r3, #1
 800c054:	4403      	add	r3, r0
 800c056:	2b08      	cmp	r3, #8
 800c058:	4404      	add	r4, r0
 800c05a:	dc11      	bgt.n	800c080 <_strtod_l+0x248>
 800c05c:	230a      	movs	r3, #10
 800c05e:	fb03 2909 	mla	r9, r3, r9, r2
 800c062:	2100      	movs	r1, #0
 800c064:	e013      	b.n	800c08e <_strtod_l+0x256>
 800c066:	4628      	mov	r0, r5
 800c068:	e7dc      	b.n	800c024 <_strtod_l+0x1ec>
 800c06a:	2908      	cmp	r1, #8
 800c06c:	f101 0101 	add.w	r1, r1, #1
 800c070:	dc02      	bgt.n	800c078 <_strtod_l+0x240>
 800c072:	fb04 f909 	mul.w	r9, r4, r9
 800c076:	e7ea      	b.n	800c04e <_strtod_l+0x216>
 800c078:	2910      	cmp	r1, #16
 800c07a:	bfd8      	it	le
 800c07c:	4366      	mulle	r6, r4
 800c07e:	e7e6      	b.n	800c04e <_strtod_l+0x216>
 800c080:	2b0f      	cmp	r3, #15
 800c082:	dcee      	bgt.n	800c062 <_strtod_l+0x22a>
 800c084:	230a      	movs	r3, #10
 800c086:	fb03 2606 	mla	r6, r3, r6, r2
 800c08a:	e7ea      	b.n	800c062 <_strtod_l+0x22a>
 800c08c:	461c      	mov	r4, r3
 800c08e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	9211      	str	r2, [sp, #68]	@ 0x44
 800c094:	785a      	ldrb	r2, [r3, #1]
 800c096:	4608      	mov	r0, r1
 800c098:	4623      	mov	r3, r4
 800c09a:	e7b7      	b.n	800c00c <_strtod_l+0x1d4>
 800c09c:	2301      	movs	r3, #1
 800c09e:	2700      	movs	r7, #0
 800c0a0:	9306      	str	r3, [sp, #24]
 800c0a2:	e786      	b.n	800bfb2 <_strtod_l+0x17a>
 800c0a4:	f04f 0e00 	mov.w	lr, #0
 800c0a8:	f108 0202 	add.w	r2, r8, #2
 800c0ac:	9211      	str	r2, [sp, #68]	@ 0x44
 800c0ae:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c0b2:	e78f      	b.n	800bfd4 <_strtod_l+0x19c>
 800c0b4:	f04f 0e01 	mov.w	lr, #1
 800c0b8:	e7f6      	b.n	800c0a8 <_strtod_l+0x270>
 800c0ba:	bf00      	nop
 800c0bc:	0800e3a0 	.word	0x0800e3a0
 800c0c0:	0800e388 	.word	0x0800e388
 800c0c4:	7ff00000 	.word	0x7ff00000
 800c0c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c0ca:	1c54      	adds	r4, r2, #1
 800c0cc:	9411      	str	r4, [sp, #68]	@ 0x44
 800c0ce:	7852      	ldrb	r2, [r2, #1]
 800c0d0:	2a30      	cmp	r2, #48	@ 0x30
 800c0d2:	d0f9      	beq.n	800c0c8 <_strtod_l+0x290>
 800c0d4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800c0d8:	2c08      	cmp	r4, #8
 800c0da:	d881      	bhi.n	800bfe0 <_strtod_l+0x1a8>
 800c0dc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800c0e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c0e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c0e6:	1c51      	adds	r1, r2, #1
 800c0e8:	9111      	str	r1, [sp, #68]	@ 0x44
 800c0ea:	7852      	ldrb	r2, [r2, #1]
 800c0ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c0f0:	2c09      	cmp	r4, #9
 800c0f2:	d938      	bls.n	800c166 <_strtod_l+0x32e>
 800c0f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c0f6:	1b0c      	subs	r4, r1, r4
 800c0f8:	2c08      	cmp	r4, #8
 800c0fa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c0fe:	dc02      	bgt.n	800c106 <_strtod_l+0x2ce>
 800c100:	4564      	cmp	r4, ip
 800c102:	bfa8      	it	ge
 800c104:	4664      	movge	r4, ip
 800c106:	f1be 0f00 	cmp.w	lr, #0
 800c10a:	d000      	beq.n	800c10e <_strtod_l+0x2d6>
 800c10c:	4264      	negs	r4, r4
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d14e      	bne.n	800c1b0 <_strtod_l+0x378>
 800c112:	9b07      	ldr	r3, [sp, #28]
 800c114:	4318      	orrs	r0, r3
 800c116:	f47f aeca 	bne.w	800beae <_strtod_l+0x76>
 800c11a:	9b06      	ldr	r3, [sp, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f47f aee2 	bne.w	800bee6 <_strtod_l+0xae>
 800c122:	2a69      	cmp	r2, #105	@ 0x69
 800c124:	d027      	beq.n	800c176 <_strtod_l+0x33e>
 800c126:	dc24      	bgt.n	800c172 <_strtod_l+0x33a>
 800c128:	2a49      	cmp	r2, #73	@ 0x49
 800c12a:	d024      	beq.n	800c176 <_strtod_l+0x33e>
 800c12c:	2a4e      	cmp	r2, #78	@ 0x4e
 800c12e:	f47f aeda 	bne.w	800bee6 <_strtod_l+0xae>
 800c132:	4997      	ldr	r1, [pc, #604]	@ (800c390 <_strtod_l+0x558>)
 800c134:	a811      	add	r0, sp, #68	@ 0x44
 800c136:	f001 fa1f 	bl	800d578 <__match>
 800c13a:	2800      	cmp	r0, #0
 800c13c:	f43f aed3 	beq.w	800bee6 <_strtod_l+0xae>
 800c140:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b28      	cmp	r3, #40	@ 0x28
 800c146:	d12d      	bne.n	800c1a4 <_strtod_l+0x36c>
 800c148:	4992      	ldr	r1, [pc, #584]	@ (800c394 <_strtod_l+0x55c>)
 800c14a:	aa14      	add	r2, sp, #80	@ 0x50
 800c14c:	a811      	add	r0, sp, #68	@ 0x44
 800c14e:	f001 fa27 	bl	800d5a0 <__hexnan>
 800c152:	2805      	cmp	r0, #5
 800c154:	d126      	bne.n	800c1a4 <_strtod_l+0x36c>
 800c156:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c158:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c15c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c160:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c164:	e6a3      	b.n	800beae <_strtod_l+0x76>
 800c166:	240a      	movs	r4, #10
 800c168:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c16c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c170:	e7b8      	b.n	800c0e4 <_strtod_l+0x2ac>
 800c172:	2a6e      	cmp	r2, #110	@ 0x6e
 800c174:	e7db      	b.n	800c12e <_strtod_l+0x2f6>
 800c176:	4988      	ldr	r1, [pc, #544]	@ (800c398 <_strtod_l+0x560>)
 800c178:	a811      	add	r0, sp, #68	@ 0x44
 800c17a:	f001 f9fd 	bl	800d578 <__match>
 800c17e:	2800      	cmp	r0, #0
 800c180:	f43f aeb1 	beq.w	800bee6 <_strtod_l+0xae>
 800c184:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c186:	4985      	ldr	r1, [pc, #532]	@ (800c39c <_strtod_l+0x564>)
 800c188:	3b01      	subs	r3, #1
 800c18a:	a811      	add	r0, sp, #68	@ 0x44
 800c18c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c18e:	f001 f9f3 	bl	800d578 <__match>
 800c192:	b910      	cbnz	r0, 800c19a <_strtod_l+0x362>
 800c194:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c196:	3301      	adds	r3, #1
 800c198:	9311      	str	r3, [sp, #68]	@ 0x44
 800c19a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c3b0 <_strtod_l+0x578>
 800c19e:	f04f 0a00 	mov.w	sl, #0
 800c1a2:	e684      	b.n	800beae <_strtod_l+0x76>
 800c1a4:	487e      	ldr	r0, [pc, #504]	@ (800c3a0 <_strtod_l+0x568>)
 800c1a6:	f000 ff23 	bl	800cff0 <nan>
 800c1aa:	ec5b ab10 	vmov	sl, fp, d0
 800c1ae:	e67e      	b.n	800beae <_strtod_l+0x76>
 800c1b0:	ee07 9a90 	vmov	s15, r9
 800c1b4:	1be2      	subs	r2, r4, r7
 800c1b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c1ba:	2d00      	cmp	r5, #0
 800c1bc:	bf08      	it	eq
 800c1be:	461d      	moveq	r5, r3
 800c1c0:	2b10      	cmp	r3, #16
 800c1c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	bfa8      	it	ge
 800c1c8:	2210      	movge	r2, #16
 800c1ca:	2b09      	cmp	r3, #9
 800c1cc:	ec5b ab17 	vmov	sl, fp, d7
 800c1d0:	dc15      	bgt.n	800c1fe <_strtod_l+0x3c6>
 800c1d2:	1be1      	subs	r1, r4, r7
 800c1d4:	2900      	cmp	r1, #0
 800c1d6:	f43f ae6a 	beq.w	800beae <_strtod_l+0x76>
 800c1da:	eba4 0107 	sub.w	r1, r4, r7
 800c1de:	dd72      	ble.n	800c2c6 <_strtod_l+0x48e>
 800c1e0:	2916      	cmp	r1, #22
 800c1e2:	dc59      	bgt.n	800c298 <_strtod_l+0x460>
 800c1e4:	4b6f      	ldr	r3, [pc, #444]	@ (800c3a4 <_strtod_l+0x56c>)
 800c1e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1ec:	ed93 7b00 	vldr	d7, [r3]
 800c1f0:	ec4b ab16 	vmov	d6, sl, fp
 800c1f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1f8:	ec5b ab17 	vmov	sl, fp, d7
 800c1fc:	e657      	b.n	800beae <_strtod_l+0x76>
 800c1fe:	4969      	ldr	r1, [pc, #420]	@ (800c3a4 <_strtod_l+0x56c>)
 800c200:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c204:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c208:	ee06 6a90 	vmov	s13, r6
 800c20c:	2b0f      	cmp	r3, #15
 800c20e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c212:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c216:	ec5b ab16 	vmov	sl, fp, d6
 800c21a:	ddda      	ble.n	800c1d2 <_strtod_l+0x39a>
 800c21c:	1a9a      	subs	r2, r3, r2
 800c21e:	1be1      	subs	r1, r4, r7
 800c220:	440a      	add	r2, r1
 800c222:	2a00      	cmp	r2, #0
 800c224:	f340 8094 	ble.w	800c350 <_strtod_l+0x518>
 800c228:	f012 000f 	ands.w	r0, r2, #15
 800c22c:	d00a      	beq.n	800c244 <_strtod_l+0x40c>
 800c22e:	495d      	ldr	r1, [pc, #372]	@ (800c3a4 <_strtod_l+0x56c>)
 800c230:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c234:	ed91 7b00 	vldr	d7, [r1]
 800c238:	ec4b ab16 	vmov	d6, sl, fp
 800c23c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c240:	ec5b ab17 	vmov	sl, fp, d7
 800c244:	f032 020f 	bics.w	r2, r2, #15
 800c248:	d073      	beq.n	800c332 <_strtod_l+0x4fa>
 800c24a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c24e:	dd47      	ble.n	800c2e0 <_strtod_l+0x4a8>
 800c250:	2400      	movs	r4, #0
 800c252:	4625      	mov	r5, r4
 800c254:	9407      	str	r4, [sp, #28]
 800c256:	4626      	mov	r6, r4
 800c258:	9a05      	ldr	r2, [sp, #20]
 800c25a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c3b0 <_strtod_l+0x578>
 800c25e:	2322      	movs	r3, #34	@ 0x22
 800c260:	6013      	str	r3, [r2, #0]
 800c262:	f04f 0a00 	mov.w	sl, #0
 800c266:	9b07      	ldr	r3, [sp, #28]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f43f ae20 	beq.w	800beae <_strtod_l+0x76>
 800c26e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c270:	9805      	ldr	r0, [sp, #20]
 800c272:	f7ff f957 	bl	800b524 <_Bfree>
 800c276:	9805      	ldr	r0, [sp, #20]
 800c278:	4631      	mov	r1, r6
 800c27a:	f7ff f953 	bl	800b524 <_Bfree>
 800c27e:	9805      	ldr	r0, [sp, #20]
 800c280:	4629      	mov	r1, r5
 800c282:	f7ff f94f 	bl	800b524 <_Bfree>
 800c286:	9907      	ldr	r1, [sp, #28]
 800c288:	9805      	ldr	r0, [sp, #20]
 800c28a:	f7ff f94b 	bl	800b524 <_Bfree>
 800c28e:	9805      	ldr	r0, [sp, #20]
 800c290:	4621      	mov	r1, r4
 800c292:	f7ff f947 	bl	800b524 <_Bfree>
 800c296:	e60a      	b.n	800beae <_strtod_l+0x76>
 800c298:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c29c:	1be0      	subs	r0, r4, r7
 800c29e:	4281      	cmp	r1, r0
 800c2a0:	dbbc      	blt.n	800c21c <_strtod_l+0x3e4>
 800c2a2:	4a40      	ldr	r2, [pc, #256]	@ (800c3a4 <_strtod_l+0x56c>)
 800c2a4:	f1c3 030f 	rsb	r3, r3, #15
 800c2a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c2ac:	ed91 7b00 	vldr	d7, [r1]
 800c2b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2b2:	ec4b ab16 	vmov	d6, sl, fp
 800c2b6:	1acb      	subs	r3, r1, r3
 800c2b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c2bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2c0:	ed92 6b00 	vldr	d6, [r2]
 800c2c4:	e796      	b.n	800c1f4 <_strtod_l+0x3bc>
 800c2c6:	3116      	adds	r1, #22
 800c2c8:	dba8      	blt.n	800c21c <_strtod_l+0x3e4>
 800c2ca:	4b36      	ldr	r3, [pc, #216]	@ (800c3a4 <_strtod_l+0x56c>)
 800c2cc:	1b3c      	subs	r4, r7, r4
 800c2ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c2d2:	ed94 7b00 	vldr	d7, [r4]
 800c2d6:	ec4b ab16 	vmov	d6, sl, fp
 800c2da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c2de:	e78b      	b.n	800c1f8 <_strtod_l+0x3c0>
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	ec4b ab17 	vmov	d7, sl, fp
 800c2e6:	4e30      	ldr	r6, [pc, #192]	@ (800c3a8 <_strtod_l+0x570>)
 800c2e8:	1112      	asrs	r2, r2, #4
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	2a01      	cmp	r2, #1
 800c2ee:	dc23      	bgt.n	800c338 <_strtod_l+0x500>
 800c2f0:	b108      	cbz	r0, 800c2f6 <_strtod_l+0x4be>
 800c2f2:	ec5b ab17 	vmov	sl, fp, d7
 800c2f6:	4a2c      	ldr	r2, [pc, #176]	@ (800c3a8 <_strtod_l+0x570>)
 800c2f8:	482c      	ldr	r0, [pc, #176]	@ (800c3ac <_strtod_l+0x574>)
 800c2fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c2fe:	ed92 7b00 	vldr	d7, [r2]
 800c302:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c306:	ec4b ab16 	vmov	d6, sl, fp
 800c30a:	4a29      	ldr	r2, [pc, #164]	@ (800c3b0 <_strtod_l+0x578>)
 800c30c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c310:	ee17 1a90 	vmov	r1, s15
 800c314:	400a      	ands	r2, r1
 800c316:	4282      	cmp	r2, r0
 800c318:	ec5b ab17 	vmov	sl, fp, d7
 800c31c:	d898      	bhi.n	800c250 <_strtod_l+0x418>
 800c31e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c322:	4282      	cmp	r2, r0
 800c324:	bf86      	itte	hi
 800c326:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c3b4 <_strtod_l+0x57c>
 800c32a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c32e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c332:	2200      	movs	r2, #0
 800c334:	9206      	str	r2, [sp, #24]
 800c336:	e076      	b.n	800c426 <_strtod_l+0x5ee>
 800c338:	f012 0f01 	tst.w	r2, #1
 800c33c:	d004      	beq.n	800c348 <_strtod_l+0x510>
 800c33e:	ed96 6b00 	vldr	d6, [r6]
 800c342:	2001      	movs	r0, #1
 800c344:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c348:	3101      	adds	r1, #1
 800c34a:	1052      	asrs	r2, r2, #1
 800c34c:	3608      	adds	r6, #8
 800c34e:	e7cd      	b.n	800c2ec <_strtod_l+0x4b4>
 800c350:	d0ef      	beq.n	800c332 <_strtod_l+0x4fa>
 800c352:	4252      	negs	r2, r2
 800c354:	f012 000f 	ands.w	r0, r2, #15
 800c358:	d00a      	beq.n	800c370 <_strtod_l+0x538>
 800c35a:	4912      	ldr	r1, [pc, #72]	@ (800c3a4 <_strtod_l+0x56c>)
 800c35c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c360:	ed91 7b00 	vldr	d7, [r1]
 800c364:	ec4b ab16 	vmov	d6, sl, fp
 800c368:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c36c:	ec5b ab17 	vmov	sl, fp, d7
 800c370:	1112      	asrs	r2, r2, #4
 800c372:	d0de      	beq.n	800c332 <_strtod_l+0x4fa>
 800c374:	2a1f      	cmp	r2, #31
 800c376:	dd1f      	ble.n	800c3b8 <_strtod_l+0x580>
 800c378:	2400      	movs	r4, #0
 800c37a:	4625      	mov	r5, r4
 800c37c:	9407      	str	r4, [sp, #28]
 800c37e:	4626      	mov	r6, r4
 800c380:	9a05      	ldr	r2, [sp, #20]
 800c382:	2322      	movs	r3, #34	@ 0x22
 800c384:	f04f 0a00 	mov.w	sl, #0
 800c388:	f04f 0b00 	mov.w	fp, #0
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	e76a      	b.n	800c266 <_strtod_l+0x42e>
 800c390:	0800e179 	.word	0x0800e179
 800c394:	0800e38c 	.word	0x0800e38c
 800c398:	0800e171 	.word	0x0800e171
 800c39c:	0800e1a8 	.word	0x0800e1a8
 800c3a0:	0800e535 	.word	0x0800e535
 800c3a4:	0800e2c0 	.word	0x0800e2c0
 800c3a8:	0800e298 	.word	0x0800e298
 800c3ac:	7ca00000 	.word	0x7ca00000
 800c3b0:	7ff00000 	.word	0x7ff00000
 800c3b4:	7fefffff 	.word	0x7fefffff
 800c3b8:	f012 0110 	ands.w	r1, r2, #16
 800c3bc:	bf18      	it	ne
 800c3be:	216a      	movne	r1, #106	@ 0x6a
 800c3c0:	9106      	str	r1, [sp, #24]
 800c3c2:	ec4b ab17 	vmov	d7, sl, fp
 800c3c6:	49b0      	ldr	r1, [pc, #704]	@ (800c688 <_strtod_l+0x850>)
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	07d6      	lsls	r6, r2, #31
 800c3cc:	d504      	bpl.n	800c3d8 <_strtod_l+0x5a0>
 800c3ce:	ed91 6b00 	vldr	d6, [r1]
 800c3d2:	2001      	movs	r0, #1
 800c3d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c3d8:	1052      	asrs	r2, r2, #1
 800c3da:	f101 0108 	add.w	r1, r1, #8
 800c3de:	d1f4      	bne.n	800c3ca <_strtod_l+0x592>
 800c3e0:	b108      	cbz	r0, 800c3e6 <_strtod_l+0x5ae>
 800c3e2:	ec5b ab17 	vmov	sl, fp, d7
 800c3e6:	9a06      	ldr	r2, [sp, #24]
 800c3e8:	b1b2      	cbz	r2, 800c418 <_strtod_l+0x5e0>
 800c3ea:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c3ee:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c3f2:	2a00      	cmp	r2, #0
 800c3f4:	4658      	mov	r0, fp
 800c3f6:	dd0f      	ble.n	800c418 <_strtod_l+0x5e0>
 800c3f8:	2a1f      	cmp	r2, #31
 800c3fa:	dd55      	ble.n	800c4a8 <_strtod_l+0x670>
 800c3fc:	2a34      	cmp	r2, #52	@ 0x34
 800c3fe:	bfde      	ittt	le
 800c400:	f04f 32ff 	movle.w	r2, #4294967295
 800c404:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c408:	408a      	lslle	r2, r1
 800c40a:	f04f 0a00 	mov.w	sl, #0
 800c40e:	bfcc      	ite	gt
 800c410:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c414:	ea02 0b00 	andle.w	fp, r2, r0
 800c418:	ec4b ab17 	vmov	d7, sl, fp
 800c41c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c424:	d0a8      	beq.n	800c378 <_strtod_l+0x540>
 800c426:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c428:	9805      	ldr	r0, [sp, #20]
 800c42a:	f8cd 9000 	str.w	r9, [sp]
 800c42e:	462a      	mov	r2, r5
 800c430:	f7ff f8e0 	bl	800b5f4 <__s2b>
 800c434:	9007      	str	r0, [sp, #28]
 800c436:	2800      	cmp	r0, #0
 800c438:	f43f af0a 	beq.w	800c250 <_strtod_l+0x418>
 800c43c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c43e:	1b3f      	subs	r7, r7, r4
 800c440:	2b00      	cmp	r3, #0
 800c442:	bfb4      	ite	lt
 800c444:	463b      	movlt	r3, r7
 800c446:	2300      	movge	r3, #0
 800c448:	930a      	str	r3, [sp, #40]	@ 0x28
 800c44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c44c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800c678 <_strtod_l+0x840>
 800c450:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c454:	2400      	movs	r4, #0
 800c456:	930d      	str	r3, [sp, #52]	@ 0x34
 800c458:	4625      	mov	r5, r4
 800c45a:	9b07      	ldr	r3, [sp, #28]
 800c45c:	9805      	ldr	r0, [sp, #20]
 800c45e:	6859      	ldr	r1, [r3, #4]
 800c460:	f7ff f820 	bl	800b4a4 <_Balloc>
 800c464:	4606      	mov	r6, r0
 800c466:	2800      	cmp	r0, #0
 800c468:	f43f aef6 	beq.w	800c258 <_strtod_l+0x420>
 800c46c:	9b07      	ldr	r3, [sp, #28]
 800c46e:	691a      	ldr	r2, [r3, #16]
 800c470:	ec4b ab19 	vmov	d9, sl, fp
 800c474:	3202      	adds	r2, #2
 800c476:	f103 010c 	add.w	r1, r3, #12
 800c47a:	0092      	lsls	r2, r2, #2
 800c47c:	300c      	adds	r0, #12
 800c47e:	f7fe f91e 	bl	800a6be <memcpy>
 800c482:	eeb0 0b49 	vmov.f64	d0, d9
 800c486:	9805      	ldr	r0, [sp, #20]
 800c488:	aa14      	add	r2, sp, #80	@ 0x50
 800c48a:	a913      	add	r1, sp, #76	@ 0x4c
 800c48c:	f7ff fbee 	bl	800bc6c <__d2b>
 800c490:	9012      	str	r0, [sp, #72]	@ 0x48
 800c492:	2800      	cmp	r0, #0
 800c494:	f43f aee0 	beq.w	800c258 <_strtod_l+0x420>
 800c498:	9805      	ldr	r0, [sp, #20]
 800c49a:	2101      	movs	r1, #1
 800c49c:	f7ff f940 	bl	800b720 <__i2b>
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	b940      	cbnz	r0, 800c4b6 <_strtod_l+0x67e>
 800c4a4:	2500      	movs	r5, #0
 800c4a6:	e6d7      	b.n	800c258 <_strtod_l+0x420>
 800c4a8:	f04f 31ff 	mov.w	r1, #4294967295
 800c4ac:	fa01 f202 	lsl.w	r2, r1, r2
 800c4b0:	ea02 0a0a 	and.w	sl, r2, sl
 800c4b4:	e7b0      	b.n	800c418 <_strtod_l+0x5e0>
 800c4b6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c4b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c4ba:	2f00      	cmp	r7, #0
 800c4bc:	bfab      	itete	ge
 800c4be:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c4c0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c4c2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c4c6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c4ca:	bfac      	ite	ge
 800c4cc:	eb07 0903 	addge.w	r9, r7, r3
 800c4d0:	eba3 0807 	sublt.w	r8, r3, r7
 800c4d4:	9b06      	ldr	r3, [sp, #24]
 800c4d6:	1aff      	subs	r7, r7, r3
 800c4d8:	4417      	add	r7, r2
 800c4da:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c4de:	4a6b      	ldr	r2, [pc, #428]	@ (800c68c <_strtod_l+0x854>)
 800c4e0:	3f01      	subs	r7, #1
 800c4e2:	4297      	cmp	r7, r2
 800c4e4:	da51      	bge.n	800c58a <_strtod_l+0x752>
 800c4e6:	1bd1      	subs	r1, r2, r7
 800c4e8:	291f      	cmp	r1, #31
 800c4ea:	eba3 0301 	sub.w	r3, r3, r1
 800c4ee:	f04f 0201 	mov.w	r2, #1
 800c4f2:	dc3e      	bgt.n	800c572 <_strtod_l+0x73a>
 800c4f4:	408a      	lsls	r2, r1
 800c4f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c4fc:	eb09 0703 	add.w	r7, r9, r3
 800c500:	4498      	add	r8, r3
 800c502:	9b06      	ldr	r3, [sp, #24]
 800c504:	45b9      	cmp	r9, r7
 800c506:	4498      	add	r8, r3
 800c508:	464b      	mov	r3, r9
 800c50a:	bfa8      	it	ge
 800c50c:	463b      	movge	r3, r7
 800c50e:	4543      	cmp	r3, r8
 800c510:	bfa8      	it	ge
 800c512:	4643      	movge	r3, r8
 800c514:	2b00      	cmp	r3, #0
 800c516:	bfc2      	ittt	gt
 800c518:	1aff      	subgt	r7, r7, r3
 800c51a:	eba8 0803 	subgt.w	r8, r8, r3
 800c51e:	eba9 0903 	subgt.w	r9, r9, r3
 800c522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c524:	2b00      	cmp	r3, #0
 800c526:	dd16      	ble.n	800c556 <_strtod_l+0x71e>
 800c528:	4629      	mov	r1, r5
 800c52a:	9805      	ldr	r0, [sp, #20]
 800c52c:	461a      	mov	r2, r3
 800c52e:	f7ff f9b7 	bl	800b8a0 <__pow5mult>
 800c532:	4605      	mov	r5, r0
 800c534:	2800      	cmp	r0, #0
 800c536:	d0b5      	beq.n	800c4a4 <_strtod_l+0x66c>
 800c538:	4601      	mov	r1, r0
 800c53a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c53c:	9805      	ldr	r0, [sp, #20]
 800c53e:	f7ff f905 	bl	800b74c <__multiply>
 800c542:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c544:	2800      	cmp	r0, #0
 800c546:	f43f ae87 	beq.w	800c258 <_strtod_l+0x420>
 800c54a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c54c:	9805      	ldr	r0, [sp, #20]
 800c54e:	f7fe ffe9 	bl	800b524 <_Bfree>
 800c552:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c554:	9312      	str	r3, [sp, #72]	@ 0x48
 800c556:	2f00      	cmp	r7, #0
 800c558:	dc1b      	bgt.n	800c592 <_strtod_l+0x75a>
 800c55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dd21      	ble.n	800c5a4 <_strtod_l+0x76c>
 800c560:	4631      	mov	r1, r6
 800c562:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c564:	9805      	ldr	r0, [sp, #20]
 800c566:	f7ff f99b 	bl	800b8a0 <__pow5mult>
 800c56a:	4606      	mov	r6, r0
 800c56c:	b9d0      	cbnz	r0, 800c5a4 <_strtod_l+0x76c>
 800c56e:	2600      	movs	r6, #0
 800c570:	e672      	b.n	800c258 <_strtod_l+0x420>
 800c572:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c576:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c57a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c57e:	37e2      	adds	r7, #226	@ 0xe2
 800c580:	fa02 f107 	lsl.w	r1, r2, r7
 800c584:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c586:	920c      	str	r2, [sp, #48]	@ 0x30
 800c588:	e7b8      	b.n	800c4fc <_strtod_l+0x6c4>
 800c58a:	2200      	movs	r2, #0
 800c58c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c58e:	2201      	movs	r2, #1
 800c590:	e7f9      	b.n	800c586 <_strtod_l+0x74e>
 800c592:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c594:	9805      	ldr	r0, [sp, #20]
 800c596:	463a      	mov	r2, r7
 800c598:	f7ff f9dc 	bl	800b954 <__lshift>
 800c59c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d1db      	bne.n	800c55a <_strtod_l+0x722>
 800c5a2:	e659      	b.n	800c258 <_strtod_l+0x420>
 800c5a4:	f1b8 0f00 	cmp.w	r8, #0
 800c5a8:	dd07      	ble.n	800c5ba <_strtod_l+0x782>
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	9805      	ldr	r0, [sp, #20]
 800c5ae:	4642      	mov	r2, r8
 800c5b0:	f7ff f9d0 	bl	800b954 <__lshift>
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d0d9      	beq.n	800c56e <_strtod_l+0x736>
 800c5ba:	f1b9 0f00 	cmp.w	r9, #0
 800c5be:	dd08      	ble.n	800c5d2 <_strtod_l+0x79a>
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	9805      	ldr	r0, [sp, #20]
 800c5c4:	464a      	mov	r2, r9
 800c5c6:	f7ff f9c5 	bl	800b954 <__lshift>
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	f43f ae43 	beq.w	800c258 <_strtod_l+0x420>
 800c5d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c5d4:	9805      	ldr	r0, [sp, #20]
 800c5d6:	4632      	mov	r2, r6
 800c5d8:	f7ff fa44 	bl	800ba64 <__mdiff>
 800c5dc:	4604      	mov	r4, r0
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f ae3a 	beq.w	800c258 <_strtod_l+0x420>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c5ea:	60c3      	str	r3, [r0, #12]
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	f7ff fa1d 	bl	800ba2c <__mcmp>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	da4e      	bge.n	800c694 <_strtod_l+0x85c>
 800c5f6:	ea58 080a 	orrs.w	r8, r8, sl
 800c5fa:	d174      	bne.n	800c6e6 <_strtod_l+0x8ae>
 800c5fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c600:	2b00      	cmp	r3, #0
 800c602:	d170      	bne.n	800c6e6 <_strtod_l+0x8ae>
 800c604:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c608:	0d1b      	lsrs	r3, r3, #20
 800c60a:	051b      	lsls	r3, r3, #20
 800c60c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c610:	d969      	bls.n	800c6e6 <_strtod_l+0x8ae>
 800c612:	6963      	ldr	r3, [r4, #20]
 800c614:	b913      	cbnz	r3, 800c61c <_strtod_l+0x7e4>
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	dd64      	ble.n	800c6e6 <_strtod_l+0x8ae>
 800c61c:	4621      	mov	r1, r4
 800c61e:	2201      	movs	r2, #1
 800c620:	9805      	ldr	r0, [sp, #20]
 800c622:	f7ff f997 	bl	800b954 <__lshift>
 800c626:	4629      	mov	r1, r5
 800c628:	4604      	mov	r4, r0
 800c62a:	f7ff f9ff 	bl	800ba2c <__mcmp>
 800c62e:	2800      	cmp	r0, #0
 800c630:	dd59      	ble.n	800c6e6 <_strtod_l+0x8ae>
 800c632:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c636:	9a06      	ldr	r2, [sp, #24]
 800c638:	0d1b      	lsrs	r3, r3, #20
 800c63a:	051b      	lsls	r3, r3, #20
 800c63c:	2a00      	cmp	r2, #0
 800c63e:	d070      	beq.n	800c722 <_strtod_l+0x8ea>
 800c640:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c644:	d86d      	bhi.n	800c722 <_strtod_l+0x8ea>
 800c646:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c64a:	f67f ae99 	bls.w	800c380 <_strtod_l+0x548>
 800c64e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800c680 <_strtod_l+0x848>
 800c652:	ec4b ab16 	vmov	d6, sl, fp
 800c656:	4b0e      	ldr	r3, [pc, #56]	@ (800c690 <_strtod_l+0x858>)
 800c658:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c65c:	ee17 2a90 	vmov	r2, s15
 800c660:	4013      	ands	r3, r2
 800c662:	ec5b ab17 	vmov	sl, fp, d7
 800c666:	2b00      	cmp	r3, #0
 800c668:	f47f ae01 	bne.w	800c26e <_strtod_l+0x436>
 800c66c:	9a05      	ldr	r2, [sp, #20]
 800c66e:	2322      	movs	r3, #34	@ 0x22
 800c670:	6013      	str	r3, [r2, #0]
 800c672:	e5fc      	b.n	800c26e <_strtod_l+0x436>
 800c674:	f3af 8000 	nop.w
 800c678:	ffc00000 	.word	0xffc00000
 800c67c:	41dfffff 	.word	0x41dfffff
 800c680:	00000000 	.word	0x00000000
 800c684:	39500000 	.word	0x39500000
 800c688:	0800e3b8 	.word	0x0800e3b8
 800c68c:	fffffc02 	.word	0xfffffc02
 800c690:	7ff00000 	.word	0x7ff00000
 800c694:	46d9      	mov	r9, fp
 800c696:	d15d      	bne.n	800c754 <_strtod_l+0x91c>
 800c698:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c69c:	f1b8 0f00 	cmp.w	r8, #0
 800c6a0:	d02a      	beq.n	800c6f8 <_strtod_l+0x8c0>
 800c6a2:	4aab      	ldr	r2, [pc, #684]	@ (800c950 <_strtod_l+0xb18>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d12a      	bne.n	800c6fe <_strtod_l+0x8c6>
 800c6a8:	9b06      	ldr	r3, [sp, #24]
 800c6aa:	4652      	mov	r2, sl
 800c6ac:	b1fb      	cbz	r3, 800c6ee <_strtod_l+0x8b6>
 800c6ae:	4ba9      	ldr	r3, [pc, #676]	@ (800c954 <_strtod_l+0xb1c>)
 800c6b0:	ea0b 0303 	and.w	r3, fp, r3
 800c6b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c6b8:	f04f 31ff 	mov.w	r1, #4294967295
 800c6bc:	d81a      	bhi.n	800c6f4 <_strtod_l+0x8bc>
 800c6be:	0d1b      	lsrs	r3, r3, #20
 800c6c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d118      	bne.n	800c6fe <_strtod_l+0x8c6>
 800c6cc:	4ba2      	ldr	r3, [pc, #648]	@ (800c958 <_strtod_l+0xb20>)
 800c6ce:	4599      	cmp	r9, r3
 800c6d0:	d102      	bne.n	800c6d8 <_strtod_l+0x8a0>
 800c6d2:	3201      	adds	r2, #1
 800c6d4:	f43f adc0 	beq.w	800c258 <_strtod_l+0x420>
 800c6d8:	4b9e      	ldr	r3, [pc, #632]	@ (800c954 <_strtod_l+0xb1c>)
 800c6da:	ea09 0303 	and.w	r3, r9, r3
 800c6de:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800c6e2:	f04f 0a00 	mov.w	sl, #0
 800c6e6:	9b06      	ldr	r3, [sp, #24]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1b0      	bne.n	800c64e <_strtod_l+0x816>
 800c6ec:	e5bf      	b.n	800c26e <_strtod_l+0x436>
 800c6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f2:	e7e9      	b.n	800c6c8 <_strtod_l+0x890>
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	e7e7      	b.n	800c6c8 <_strtod_l+0x890>
 800c6f8:	ea53 030a 	orrs.w	r3, r3, sl
 800c6fc:	d099      	beq.n	800c632 <_strtod_l+0x7fa>
 800c6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c700:	b1c3      	cbz	r3, 800c734 <_strtod_l+0x8fc>
 800c702:	ea13 0f09 	tst.w	r3, r9
 800c706:	d0ee      	beq.n	800c6e6 <_strtod_l+0x8ae>
 800c708:	9a06      	ldr	r2, [sp, #24]
 800c70a:	4650      	mov	r0, sl
 800c70c:	4659      	mov	r1, fp
 800c70e:	f1b8 0f00 	cmp.w	r8, #0
 800c712:	d013      	beq.n	800c73c <_strtod_l+0x904>
 800c714:	f7ff fb75 	bl	800be02 <sulp>
 800c718:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c71c:	ec5b ab17 	vmov	sl, fp, d7
 800c720:	e7e1      	b.n	800c6e6 <_strtod_l+0x8ae>
 800c722:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c726:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c72a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c72e:	f04f 3aff 	mov.w	sl, #4294967295
 800c732:	e7d8      	b.n	800c6e6 <_strtod_l+0x8ae>
 800c734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c736:	ea13 0f0a 	tst.w	r3, sl
 800c73a:	e7e4      	b.n	800c706 <_strtod_l+0x8ce>
 800c73c:	f7ff fb61 	bl	800be02 <sulp>
 800c740:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c744:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c74c:	ec5b ab10 	vmov	sl, fp, d0
 800c750:	d1c9      	bne.n	800c6e6 <_strtod_l+0x8ae>
 800c752:	e615      	b.n	800c380 <_strtod_l+0x548>
 800c754:	4629      	mov	r1, r5
 800c756:	4620      	mov	r0, r4
 800c758:	f7ff fae0 	bl	800bd1c <__ratio>
 800c75c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c760:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c768:	d85d      	bhi.n	800c826 <_strtod_l+0x9ee>
 800c76a:	f1b8 0f00 	cmp.w	r8, #0
 800c76e:	d164      	bne.n	800c83a <_strtod_l+0xa02>
 800c770:	f1ba 0f00 	cmp.w	sl, #0
 800c774:	d14b      	bne.n	800c80e <_strtod_l+0x9d6>
 800c776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c77a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d160      	bne.n	800c844 <_strtod_l+0xa0c>
 800c782:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c786:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78e:	d401      	bmi.n	800c794 <_strtod_l+0x95c>
 800c790:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c794:	eeb1 ab48 	vneg.f64	d10, d8
 800c798:	486e      	ldr	r0, [pc, #440]	@ (800c954 <_strtod_l+0xb1c>)
 800c79a:	4970      	ldr	r1, [pc, #448]	@ (800c95c <_strtod_l+0xb24>)
 800c79c:	ea09 0700 	and.w	r7, r9, r0
 800c7a0:	428f      	cmp	r7, r1
 800c7a2:	ec53 2b1a 	vmov	r2, r3, d10
 800c7a6:	d17d      	bne.n	800c8a4 <_strtod_l+0xa6c>
 800c7a8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c7ac:	ec4b ab1c 	vmov	d12, sl, fp
 800c7b0:	eeb0 0b4c 	vmov.f64	d0, d12
 800c7b4:	f7ff f9ea 	bl	800bb8c <__ulp>
 800c7b8:	4866      	ldr	r0, [pc, #408]	@ (800c954 <_strtod_l+0xb1c>)
 800c7ba:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c7be:	ee1c 3a90 	vmov	r3, s25
 800c7c2:	4a67      	ldr	r2, [pc, #412]	@ (800c960 <_strtod_l+0xb28>)
 800c7c4:	ea03 0100 	and.w	r1, r3, r0
 800c7c8:	4291      	cmp	r1, r2
 800c7ca:	ec5b ab1c 	vmov	sl, fp, d12
 800c7ce:	d93c      	bls.n	800c84a <_strtod_l+0xa12>
 800c7d0:	ee19 2a90 	vmov	r2, s19
 800c7d4:	4b60      	ldr	r3, [pc, #384]	@ (800c958 <_strtod_l+0xb20>)
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d104      	bne.n	800c7e4 <_strtod_l+0x9ac>
 800c7da:	ee19 3a10 	vmov	r3, s18
 800c7de:	3301      	adds	r3, #1
 800c7e0:	f43f ad3a 	beq.w	800c258 <_strtod_l+0x420>
 800c7e4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c958 <_strtod_l+0xb20>
 800c7e8:	f04f 3aff 	mov.w	sl, #4294967295
 800c7ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c7ee:	9805      	ldr	r0, [sp, #20]
 800c7f0:	f7fe fe98 	bl	800b524 <_Bfree>
 800c7f4:	9805      	ldr	r0, [sp, #20]
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	f7fe fe94 	bl	800b524 <_Bfree>
 800c7fc:	9805      	ldr	r0, [sp, #20]
 800c7fe:	4629      	mov	r1, r5
 800c800:	f7fe fe90 	bl	800b524 <_Bfree>
 800c804:	9805      	ldr	r0, [sp, #20]
 800c806:	4621      	mov	r1, r4
 800c808:	f7fe fe8c 	bl	800b524 <_Bfree>
 800c80c:	e625      	b.n	800c45a <_strtod_l+0x622>
 800c80e:	f1ba 0f01 	cmp.w	sl, #1
 800c812:	d103      	bne.n	800c81c <_strtod_l+0x9e4>
 800c814:	f1bb 0f00 	cmp.w	fp, #0
 800c818:	f43f adb2 	beq.w	800c380 <_strtod_l+0x548>
 800c81c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c820:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c824:	e7b8      	b.n	800c798 <_strtod_l+0x960>
 800c826:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c82a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c82e:	f1b8 0f00 	cmp.w	r8, #0
 800c832:	d0af      	beq.n	800c794 <_strtod_l+0x95c>
 800c834:	eeb0 ab48 	vmov.f64	d10, d8
 800c838:	e7ae      	b.n	800c798 <_strtod_l+0x960>
 800c83a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c83e:	eeb0 8b4a 	vmov.f64	d8, d10
 800c842:	e7a9      	b.n	800c798 <_strtod_l+0x960>
 800c844:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c848:	e7a6      	b.n	800c798 <_strtod_l+0x960>
 800c84a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c84e:	9b06      	ldr	r3, [sp, #24]
 800c850:	46d9      	mov	r9, fp
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1ca      	bne.n	800c7ec <_strtod_l+0x9b4>
 800c856:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c85a:	0d1b      	lsrs	r3, r3, #20
 800c85c:	051b      	lsls	r3, r3, #20
 800c85e:	429f      	cmp	r7, r3
 800c860:	d1c4      	bne.n	800c7ec <_strtod_l+0x9b4>
 800c862:	ec51 0b18 	vmov	r0, r1, d8
 800c866:	f7f3 ff67 	bl	8000738 <__aeabi_d2lz>
 800c86a:	f7f3 ff1f 	bl	80006ac <__aeabi_l2d>
 800c86e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c872:	ec41 0b17 	vmov	d7, r0, r1
 800c876:	ea49 090a 	orr.w	r9, r9, sl
 800c87a:	ea59 0908 	orrs.w	r9, r9, r8
 800c87e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c882:	d03c      	beq.n	800c8fe <_strtod_l+0xac6>
 800c884:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c938 <_strtod_l+0xb00>
 800c888:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c890:	f53f aced 	bmi.w	800c26e <_strtod_l+0x436>
 800c894:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c940 <_strtod_l+0xb08>
 800c898:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a0:	dda4      	ble.n	800c7ec <_strtod_l+0x9b4>
 800c8a2:	e4e4      	b.n	800c26e <_strtod_l+0x436>
 800c8a4:	9906      	ldr	r1, [sp, #24]
 800c8a6:	b1e1      	cbz	r1, 800c8e2 <_strtod_l+0xaaa>
 800c8a8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c8ac:	d819      	bhi.n	800c8e2 <_strtod_l+0xaaa>
 800c8ae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b6:	d811      	bhi.n	800c8dc <_strtod_l+0xaa4>
 800c8b8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c8bc:	ee18 3a10 	vmov	r3, s16
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	bf38      	it	cc
 800c8c4:	2301      	movcc	r3, #1
 800c8c6:	ee08 3a10 	vmov	s16, r3
 800c8ca:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c8ce:	f1b8 0f00 	cmp.w	r8, #0
 800c8d2:	d111      	bne.n	800c8f8 <_strtod_l+0xac0>
 800c8d4:	eeb1 7b48 	vneg.f64	d7, d8
 800c8d8:	ec53 2b17 	vmov	r2, r3, d7
 800c8dc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c8e0:	1bcb      	subs	r3, r1, r7
 800c8e2:	eeb0 0b49 	vmov.f64	d0, d9
 800c8e6:	ec43 2b1a 	vmov	d10, r2, r3
 800c8ea:	f7ff f94f 	bl	800bb8c <__ulp>
 800c8ee:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c8f2:	ec5b ab19 	vmov	sl, fp, d9
 800c8f6:	e7aa      	b.n	800c84e <_strtod_l+0xa16>
 800c8f8:	eeb0 7b48 	vmov.f64	d7, d8
 800c8fc:	e7ec      	b.n	800c8d8 <_strtod_l+0xaa0>
 800c8fe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c948 <_strtod_l+0xb10>
 800c902:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c90a:	f57f af6f 	bpl.w	800c7ec <_strtod_l+0x9b4>
 800c90e:	e4ae      	b.n	800c26e <_strtod_l+0x436>
 800c910:	2300      	movs	r3, #0
 800c912:	9308      	str	r3, [sp, #32]
 800c914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c916:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c918:	6013      	str	r3, [r2, #0]
 800c91a:	f7ff bacc 	b.w	800beb6 <_strtod_l+0x7e>
 800c91e:	2a65      	cmp	r2, #101	@ 0x65
 800c920:	f43f abbc 	beq.w	800c09c <_strtod_l+0x264>
 800c924:	2a45      	cmp	r2, #69	@ 0x45
 800c926:	f43f abb9 	beq.w	800c09c <_strtod_l+0x264>
 800c92a:	2301      	movs	r3, #1
 800c92c:	9306      	str	r3, [sp, #24]
 800c92e:	f7ff bbf0 	b.w	800c112 <_strtod_l+0x2da>
 800c932:	bf00      	nop
 800c934:	f3af 8000 	nop.w
 800c938:	94a03595 	.word	0x94a03595
 800c93c:	3fdfffff 	.word	0x3fdfffff
 800c940:	35afe535 	.word	0x35afe535
 800c944:	3fe00000 	.word	0x3fe00000
 800c948:	94a03595 	.word	0x94a03595
 800c94c:	3fcfffff 	.word	0x3fcfffff
 800c950:	000fffff 	.word	0x000fffff
 800c954:	7ff00000 	.word	0x7ff00000
 800c958:	7fefffff 	.word	0x7fefffff
 800c95c:	7fe00000 	.word	0x7fe00000
 800c960:	7c9fffff 	.word	0x7c9fffff

0800c964 <_strtod_r>:
 800c964:	4b01      	ldr	r3, [pc, #4]	@ (800c96c <_strtod_r+0x8>)
 800c966:	f7ff ba67 	b.w	800be38 <_strtod_l>
 800c96a:	bf00      	nop
 800c96c:	2400008c 	.word	0x2400008c

0800c970 <_strtol_l.constprop.0>:
 800c970:	2b24      	cmp	r3, #36	@ 0x24
 800c972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c976:	4686      	mov	lr, r0
 800c978:	4690      	mov	r8, r2
 800c97a:	d801      	bhi.n	800c980 <_strtol_l.constprop.0+0x10>
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d106      	bne.n	800c98e <_strtol_l.constprop.0+0x1e>
 800c980:	f7fd fe70 	bl	800a664 <__errno>
 800c984:	2316      	movs	r3, #22
 800c986:	6003      	str	r3, [r0, #0]
 800c988:	2000      	movs	r0, #0
 800c98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98e:	4834      	ldr	r0, [pc, #208]	@ (800ca60 <_strtol_l.constprop.0+0xf0>)
 800c990:	460d      	mov	r5, r1
 800c992:	462a      	mov	r2, r5
 800c994:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c998:	5d06      	ldrb	r6, [r0, r4]
 800c99a:	f016 0608 	ands.w	r6, r6, #8
 800c99e:	d1f8      	bne.n	800c992 <_strtol_l.constprop.0+0x22>
 800c9a0:	2c2d      	cmp	r4, #45	@ 0x2d
 800c9a2:	d12d      	bne.n	800ca00 <_strtol_l.constprop.0+0x90>
 800c9a4:	782c      	ldrb	r4, [r5, #0]
 800c9a6:	2601      	movs	r6, #1
 800c9a8:	1c95      	adds	r5, r2, #2
 800c9aa:	f033 0210 	bics.w	r2, r3, #16
 800c9ae:	d109      	bne.n	800c9c4 <_strtol_l.constprop.0+0x54>
 800c9b0:	2c30      	cmp	r4, #48	@ 0x30
 800c9b2:	d12a      	bne.n	800ca0a <_strtol_l.constprop.0+0x9a>
 800c9b4:	782a      	ldrb	r2, [r5, #0]
 800c9b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c9ba:	2a58      	cmp	r2, #88	@ 0x58
 800c9bc:	d125      	bne.n	800ca0a <_strtol_l.constprop.0+0x9a>
 800c9be:	786c      	ldrb	r4, [r5, #1]
 800c9c0:	2310      	movs	r3, #16
 800c9c2:	3502      	adds	r5, #2
 800c9c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c9c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	fbbc f9f3 	udiv	r9, ip, r3
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c9d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c9dc:	2f09      	cmp	r7, #9
 800c9de:	d81b      	bhi.n	800ca18 <_strtol_l.constprop.0+0xa8>
 800c9e0:	463c      	mov	r4, r7
 800c9e2:	42a3      	cmp	r3, r4
 800c9e4:	dd27      	ble.n	800ca36 <_strtol_l.constprop.0+0xc6>
 800c9e6:	1c57      	adds	r7, r2, #1
 800c9e8:	d007      	beq.n	800c9fa <_strtol_l.constprop.0+0x8a>
 800c9ea:	4581      	cmp	r9, r0
 800c9ec:	d320      	bcc.n	800ca30 <_strtol_l.constprop.0+0xc0>
 800c9ee:	d101      	bne.n	800c9f4 <_strtol_l.constprop.0+0x84>
 800c9f0:	45a2      	cmp	sl, r4
 800c9f2:	db1d      	blt.n	800ca30 <_strtol_l.constprop.0+0xc0>
 800c9f4:	fb00 4003 	mla	r0, r0, r3, r4
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9fe:	e7eb      	b.n	800c9d8 <_strtol_l.constprop.0+0x68>
 800ca00:	2c2b      	cmp	r4, #43	@ 0x2b
 800ca02:	bf04      	itt	eq
 800ca04:	782c      	ldrbeq	r4, [r5, #0]
 800ca06:	1c95      	addeq	r5, r2, #2
 800ca08:	e7cf      	b.n	800c9aa <_strtol_l.constprop.0+0x3a>
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1da      	bne.n	800c9c4 <_strtol_l.constprop.0+0x54>
 800ca0e:	2c30      	cmp	r4, #48	@ 0x30
 800ca10:	bf0c      	ite	eq
 800ca12:	2308      	moveq	r3, #8
 800ca14:	230a      	movne	r3, #10
 800ca16:	e7d5      	b.n	800c9c4 <_strtol_l.constprop.0+0x54>
 800ca18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ca1c:	2f19      	cmp	r7, #25
 800ca1e:	d801      	bhi.n	800ca24 <_strtol_l.constprop.0+0xb4>
 800ca20:	3c37      	subs	r4, #55	@ 0x37
 800ca22:	e7de      	b.n	800c9e2 <_strtol_l.constprop.0+0x72>
 800ca24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ca28:	2f19      	cmp	r7, #25
 800ca2a:	d804      	bhi.n	800ca36 <_strtol_l.constprop.0+0xc6>
 800ca2c:	3c57      	subs	r4, #87	@ 0x57
 800ca2e:	e7d8      	b.n	800c9e2 <_strtol_l.constprop.0+0x72>
 800ca30:	f04f 32ff 	mov.w	r2, #4294967295
 800ca34:	e7e1      	b.n	800c9fa <_strtol_l.constprop.0+0x8a>
 800ca36:	1c53      	adds	r3, r2, #1
 800ca38:	d108      	bne.n	800ca4c <_strtol_l.constprop.0+0xdc>
 800ca3a:	2322      	movs	r3, #34	@ 0x22
 800ca3c:	f8ce 3000 	str.w	r3, [lr]
 800ca40:	4660      	mov	r0, ip
 800ca42:	f1b8 0f00 	cmp.w	r8, #0
 800ca46:	d0a0      	beq.n	800c98a <_strtol_l.constprop.0+0x1a>
 800ca48:	1e69      	subs	r1, r5, #1
 800ca4a:	e006      	b.n	800ca5a <_strtol_l.constprop.0+0xea>
 800ca4c:	b106      	cbz	r6, 800ca50 <_strtol_l.constprop.0+0xe0>
 800ca4e:	4240      	negs	r0, r0
 800ca50:	f1b8 0f00 	cmp.w	r8, #0
 800ca54:	d099      	beq.n	800c98a <_strtol_l.constprop.0+0x1a>
 800ca56:	2a00      	cmp	r2, #0
 800ca58:	d1f6      	bne.n	800ca48 <_strtol_l.constprop.0+0xd8>
 800ca5a:	f8c8 1000 	str.w	r1, [r8]
 800ca5e:	e794      	b.n	800c98a <_strtol_l.constprop.0+0x1a>
 800ca60:	0800e3e1 	.word	0x0800e3e1

0800ca64 <_strtol_r>:
 800ca64:	f7ff bf84 	b.w	800c970 <_strtol_l.constprop.0>

0800ca68 <__ssputs_r>:
 800ca68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca6c:	688e      	ldr	r6, [r1, #8]
 800ca6e:	461f      	mov	r7, r3
 800ca70:	42be      	cmp	r6, r7
 800ca72:	680b      	ldr	r3, [r1, #0]
 800ca74:	4682      	mov	sl, r0
 800ca76:	460c      	mov	r4, r1
 800ca78:	4690      	mov	r8, r2
 800ca7a:	d82d      	bhi.n	800cad8 <__ssputs_r+0x70>
 800ca7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca84:	d026      	beq.n	800cad4 <__ssputs_r+0x6c>
 800ca86:	6965      	ldr	r5, [r4, #20]
 800ca88:	6909      	ldr	r1, [r1, #16]
 800ca8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca8e:	eba3 0901 	sub.w	r9, r3, r1
 800ca92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca96:	1c7b      	adds	r3, r7, #1
 800ca98:	444b      	add	r3, r9
 800ca9a:	106d      	asrs	r5, r5, #1
 800ca9c:	429d      	cmp	r5, r3
 800ca9e:	bf38      	it	cc
 800caa0:	461d      	movcc	r5, r3
 800caa2:	0553      	lsls	r3, r2, #21
 800caa4:	d527      	bpl.n	800caf6 <__ssputs_r+0x8e>
 800caa6:	4629      	mov	r1, r5
 800caa8:	f7fe fc70 	bl	800b38c <_malloc_r>
 800caac:	4606      	mov	r6, r0
 800caae:	b360      	cbz	r0, 800cb0a <__ssputs_r+0xa2>
 800cab0:	6921      	ldr	r1, [r4, #16]
 800cab2:	464a      	mov	r2, r9
 800cab4:	f7fd fe03 	bl	800a6be <memcpy>
 800cab8:	89a3      	ldrh	r3, [r4, #12]
 800caba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cac2:	81a3      	strh	r3, [r4, #12]
 800cac4:	6126      	str	r6, [r4, #16]
 800cac6:	6165      	str	r5, [r4, #20]
 800cac8:	444e      	add	r6, r9
 800caca:	eba5 0509 	sub.w	r5, r5, r9
 800cace:	6026      	str	r6, [r4, #0]
 800cad0:	60a5      	str	r5, [r4, #8]
 800cad2:	463e      	mov	r6, r7
 800cad4:	42be      	cmp	r6, r7
 800cad6:	d900      	bls.n	800cada <__ssputs_r+0x72>
 800cad8:	463e      	mov	r6, r7
 800cada:	6820      	ldr	r0, [r4, #0]
 800cadc:	4632      	mov	r2, r6
 800cade:	4641      	mov	r1, r8
 800cae0:	f000 fa28 	bl	800cf34 <memmove>
 800cae4:	68a3      	ldr	r3, [r4, #8]
 800cae6:	1b9b      	subs	r3, r3, r6
 800cae8:	60a3      	str	r3, [r4, #8]
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	4433      	add	r3, r6
 800caee:	6023      	str	r3, [r4, #0]
 800caf0:	2000      	movs	r0, #0
 800caf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf6:	462a      	mov	r2, r5
 800caf8:	f000 fdff 	bl	800d6fa <_realloc_r>
 800cafc:	4606      	mov	r6, r0
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d1e0      	bne.n	800cac4 <__ssputs_r+0x5c>
 800cb02:	6921      	ldr	r1, [r4, #16]
 800cb04:	4650      	mov	r0, sl
 800cb06:	f7fe fbcd 	bl	800b2a4 <_free_r>
 800cb0a:	230c      	movs	r3, #12
 800cb0c:	f8ca 3000 	str.w	r3, [sl]
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb16:	81a3      	strh	r3, [r4, #12]
 800cb18:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1c:	e7e9      	b.n	800caf2 <__ssputs_r+0x8a>
	...

0800cb20 <_svfiprintf_r>:
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	4698      	mov	r8, r3
 800cb26:	898b      	ldrh	r3, [r1, #12]
 800cb28:	061b      	lsls	r3, r3, #24
 800cb2a:	b09d      	sub	sp, #116	@ 0x74
 800cb2c:	4607      	mov	r7, r0
 800cb2e:	460d      	mov	r5, r1
 800cb30:	4614      	mov	r4, r2
 800cb32:	d510      	bpl.n	800cb56 <_svfiprintf_r+0x36>
 800cb34:	690b      	ldr	r3, [r1, #16]
 800cb36:	b973      	cbnz	r3, 800cb56 <_svfiprintf_r+0x36>
 800cb38:	2140      	movs	r1, #64	@ 0x40
 800cb3a:	f7fe fc27 	bl	800b38c <_malloc_r>
 800cb3e:	6028      	str	r0, [r5, #0]
 800cb40:	6128      	str	r0, [r5, #16]
 800cb42:	b930      	cbnz	r0, 800cb52 <_svfiprintf_r+0x32>
 800cb44:	230c      	movs	r3, #12
 800cb46:	603b      	str	r3, [r7, #0]
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	b01d      	add	sp, #116	@ 0x74
 800cb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb52:	2340      	movs	r3, #64	@ 0x40
 800cb54:	616b      	str	r3, [r5, #20]
 800cb56:	2300      	movs	r3, #0
 800cb58:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb5a:	2320      	movs	r3, #32
 800cb5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb60:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb64:	2330      	movs	r3, #48	@ 0x30
 800cb66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd04 <_svfiprintf_r+0x1e4>
 800cb6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb6e:	f04f 0901 	mov.w	r9, #1
 800cb72:	4623      	mov	r3, r4
 800cb74:	469a      	mov	sl, r3
 800cb76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb7a:	b10a      	cbz	r2, 800cb80 <_svfiprintf_r+0x60>
 800cb7c:	2a25      	cmp	r2, #37	@ 0x25
 800cb7e:	d1f9      	bne.n	800cb74 <_svfiprintf_r+0x54>
 800cb80:	ebba 0b04 	subs.w	fp, sl, r4
 800cb84:	d00b      	beq.n	800cb9e <_svfiprintf_r+0x7e>
 800cb86:	465b      	mov	r3, fp
 800cb88:	4622      	mov	r2, r4
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	f7ff ff6b 	bl	800ca68 <__ssputs_r>
 800cb92:	3001      	adds	r0, #1
 800cb94:	f000 80a7 	beq.w	800cce6 <_svfiprintf_r+0x1c6>
 800cb98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb9a:	445a      	add	r2, fp
 800cb9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 809f 	beq.w	800cce6 <_svfiprintf_r+0x1c6>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbb2:	f10a 0a01 	add.w	sl, sl, #1
 800cbb6:	9304      	str	r3, [sp, #16]
 800cbb8:	9307      	str	r3, [sp, #28]
 800cbba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbbe:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbc0:	4654      	mov	r4, sl
 800cbc2:	2205      	movs	r2, #5
 800cbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc8:	484e      	ldr	r0, [pc, #312]	@ (800cd04 <_svfiprintf_r+0x1e4>)
 800cbca:	f7f3 fb89 	bl	80002e0 <memchr>
 800cbce:	9a04      	ldr	r2, [sp, #16]
 800cbd0:	b9d8      	cbnz	r0, 800cc0a <_svfiprintf_r+0xea>
 800cbd2:	06d0      	lsls	r0, r2, #27
 800cbd4:	bf44      	itt	mi
 800cbd6:	2320      	movmi	r3, #32
 800cbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbdc:	0711      	lsls	r1, r2, #28
 800cbde:	bf44      	itt	mi
 800cbe0:	232b      	movmi	r3, #43	@ 0x2b
 800cbe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbe6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbea:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbec:	d015      	beq.n	800cc1a <_svfiprintf_r+0xfa>
 800cbee:	9a07      	ldr	r2, [sp, #28]
 800cbf0:	4654      	mov	r4, sl
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	f04f 0c0a 	mov.w	ip, #10
 800cbf8:	4621      	mov	r1, r4
 800cbfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbfe:	3b30      	subs	r3, #48	@ 0x30
 800cc00:	2b09      	cmp	r3, #9
 800cc02:	d94b      	bls.n	800cc9c <_svfiprintf_r+0x17c>
 800cc04:	b1b0      	cbz	r0, 800cc34 <_svfiprintf_r+0x114>
 800cc06:	9207      	str	r2, [sp, #28]
 800cc08:	e014      	b.n	800cc34 <_svfiprintf_r+0x114>
 800cc0a:	eba0 0308 	sub.w	r3, r0, r8
 800cc0e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc12:	4313      	orrs	r3, r2
 800cc14:	9304      	str	r3, [sp, #16]
 800cc16:	46a2      	mov	sl, r4
 800cc18:	e7d2      	b.n	800cbc0 <_svfiprintf_r+0xa0>
 800cc1a:	9b03      	ldr	r3, [sp, #12]
 800cc1c:	1d19      	adds	r1, r3, #4
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	9103      	str	r1, [sp, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	bfbb      	ittet	lt
 800cc26:	425b      	neglt	r3, r3
 800cc28:	f042 0202 	orrlt.w	r2, r2, #2
 800cc2c:	9307      	strge	r3, [sp, #28]
 800cc2e:	9307      	strlt	r3, [sp, #28]
 800cc30:	bfb8      	it	lt
 800cc32:	9204      	strlt	r2, [sp, #16]
 800cc34:	7823      	ldrb	r3, [r4, #0]
 800cc36:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc38:	d10a      	bne.n	800cc50 <_svfiprintf_r+0x130>
 800cc3a:	7863      	ldrb	r3, [r4, #1]
 800cc3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc3e:	d132      	bne.n	800cca6 <_svfiprintf_r+0x186>
 800cc40:	9b03      	ldr	r3, [sp, #12]
 800cc42:	1d1a      	adds	r2, r3, #4
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	9203      	str	r2, [sp, #12]
 800cc48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc4c:	3402      	adds	r4, #2
 800cc4e:	9305      	str	r3, [sp, #20]
 800cc50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd14 <_svfiprintf_r+0x1f4>
 800cc54:	7821      	ldrb	r1, [r4, #0]
 800cc56:	2203      	movs	r2, #3
 800cc58:	4650      	mov	r0, sl
 800cc5a:	f7f3 fb41 	bl	80002e0 <memchr>
 800cc5e:	b138      	cbz	r0, 800cc70 <_svfiprintf_r+0x150>
 800cc60:	9b04      	ldr	r3, [sp, #16]
 800cc62:	eba0 000a 	sub.w	r0, r0, sl
 800cc66:	2240      	movs	r2, #64	@ 0x40
 800cc68:	4082      	lsls	r2, r0
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	3401      	adds	r4, #1
 800cc6e:	9304      	str	r3, [sp, #16]
 800cc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc74:	4824      	ldr	r0, [pc, #144]	@ (800cd08 <_svfiprintf_r+0x1e8>)
 800cc76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc7a:	2206      	movs	r2, #6
 800cc7c:	f7f3 fb30 	bl	80002e0 <memchr>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d036      	beq.n	800ccf2 <_svfiprintf_r+0x1d2>
 800cc84:	4b21      	ldr	r3, [pc, #132]	@ (800cd0c <_svfiprintf_r+0x1ec>)
 800cc86:	bb1b      	cbnz	r3, 800ccd0 <_svfiprintf_r+0x1b0>
 800cc88:	9b03      	ldr	r3, [sp, #12]
 800cc8a:	3307      	adds	r3, #7
 800cc8c:	f023 0307 	bic.w	r3, r3, #7
 800cc90:	3308      	adds	r3, #8
 800cc92:	9303      	str	r3, [sp, #12]
 800cc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc96:	4433      	add	r3, r6
 800cc98:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc9a:	e76a      	b.n	800cb72 <_svfiprintf_r+0x52>
 800cc9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cca0:	460c      	mov	r4, r1
 800cca2:	2001      	movs	r0, #1
 800cca4:	e7a8      	b.n	800cbf8 <_svfiprintf_r+0xd8>
 800cca6:	2300      	movs	r3, #0
 800cca8:	3401      	adds	r4, #1
 800ccaa:	9305      	str	r3, [sp, #20]
 800ccac:	4619      	mov	r1, r3
 800ccae:	f04f 0c0a 	mov.w	ip, #10
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccb8:	3a30      	subs	r2, #48	@ 0x30
 800ccba:	2a09      	cmp	r2, #9
 800ccbc:	d903      	bls.n	800ccc6 <_svfiprintf_r+0x1a6>
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d0c6      	beq.n	800cc50 <_svfiprintf_r+0x130>
 800ccc2:	9105      	str	r1, [sp, #20]
 800ccc4:	e7c4      	b.n	800cc50 <_svfiprintf_r+0x130>
 800ccc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccca:	4604      	mov	r4, r0
 800cccc:	2301      	movs	r3, #1
 800ccce:	e7f0      	b.n	800ccb2 <_svfiprintf_r+0x192>
 800ccd0:	ab03      	add	r3, sp, #12
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	462a      	mov	r2, r5
 800ccd6:	4b0e      	ldr	r3, [pc, #56]	@ (800cd10 <_svfiprintf_r+0x1f0>)
 800ccd8:	a904      	add	r1, sp, #16
 800ccda:	4638      	mov	r0, r7
 800ccdc:	f7fc fc70 	bl	80095c0 <_printf_float>
 800cce0:	1c42      	adds	r2, r0, #1
 800cce2:	4606      	mov	r6, r0
 800cce4:	d1d6      	bne.n	800cc94 <_svfiprintf_r+0x174>
 800cce6:	89ab      	ldrh	r3, [r5, #12]
 800cce8:	065b      	lsls	r3, r3, #25
 800ccea:	f53f af2d 	bmi.w	800cb48 <_svfiprintf_r+0x28>
 800ccee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccf0:	e72c      	b.n	800cb4c <_svfiprintf_r+0x2c>
 800ccf2:	ab03      	add	r3, sp, #12
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	462a      	mov	r2, r5
 800ccf8:	4b05      	ldr	r3, [pc, #20]	@ (800cd10 <_svfiprintf_r+0x1f0>)
 800ccfa:	a904      	add	r1, sp, #16
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f7fc fee7 	bl	8009ad0 <_printf_i>
 800cd02:	e7ed      	b.n	800cce0 <_svfiprintf_r+0x1c0>
 800cd04:	0800e4e1 	.word	0x0800e4e1
 800cd08:	0800e4eb 	.word	0x0800e4eb
 800cd0c:	080095c1 	.word	0x080095c1
 800cd10:	0800ca69 	.word	0x0800ca69
 800cd14:	0800e4e7 	.word	0x0800e4e7

0800cd18 <__sflush_r>:
 800cd18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd20:	0716      	lsls	r6, r2, #28
 800cd22:	4605      	mov	r5, r0
 800cd24:	460c      	mov	r4, r1
 800cd26:	d454      	bmi.n	800cdd2 <__sflush_r+0xba>
 800cd28:	684b      	ldr	r3, [r1, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	dc02      	bgt.n	800cd34 <__sflush_r+0x1c>
 800cd2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	dd48      	ble.n	800cdc6 <__sflush_r+0xae>
 800cd34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd36:	2e00      	cmp	r6, #0
 800cd38:	d045      	beq.n	800cdc6 <__sflush_r+0xae>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd40:	682f      	ldr	r7, [r5, #0]
 800cd42:	6a21      	ldr	r1, [r4, #32]
 800cd44:	602b      	str	r3, [r5, #0]
 800cd46:	d030      	beq.n	800cdaa <__sflush_r+0x92>
 800cd48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	0759      	lsls	r1, r3, #29
 800cd4e:	d505      	bpl.n	800cd5c <__sflush_r+0x44>
 800cd50:	6863      	ldr	r3, [r4, #4]
 800cd52:	1ad2      	subs	r2, r2, r3
 800cd54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd56:	b10b      	cbz	r3, 800cd5c <__sflush_r+0x44>
 800cd58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd5a:	1ad2      	subs	r2, r2, r3
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd60:	6a21      	ldr	r1, [r4, #32]
 800cd62:	4628      	mov	r0, r5
 800cd64:	47b0      	blx	r6
 800cd66:	1c43      	adds	r3, r0, #1
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	d106      	bne.n	800cd7a <__sflush_r+0x62>
 800cd6c:	6829      	ldr	r1, [r5, #0]
 800cd6e:	291d      	cmp	r1, #29
 800cd70:	d82b      	bhi.n	800cdca <__sflush_r+0xb2>
 800cd72:	4a2a      	ldr	r2, [pc, #168]	@ (800ce1c <__sflush_r+0x104>)
 800cd74:	410a      	asrs	r2, r1
 800cd76:	07d6      	lsls	r6, r2, #31
 800cd78:	d427      	bmi.n	800cdca <__sflush_r+0xb2>
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	6062      	str	r2, [r4, #4]
 800cd7e:	04d9      	lsls	r1, r3, #19
 800cd80:	6922      	ldr	r2, [r4, #16]
 800cd82:	6022      	str	r2, [r4, #0]
 800cd84:	d504      	bpl.n	800cd90 <__sflush_r+0x78>
 800cd86:	1c42      	adds	r2, r0, #1
 800cd88:	d101      	bne.n	800cd8e <__sflush_r+0x76>
 800cd8a:	682b      	ldr	r3, [r5, #0]
 800cd8c:	b903      	cbnz	r3, 800cd90 <__sflush_r+0x78>
 800cd8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd92:	602f      	str	r7, [r5, #0]
 800cd94:	b1b9      	cbz	r1, 800cdc6 <__sflush_r+0xae>
 800cd96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd9a:	4299      	cmp	r1, r3
 800cd9c:	d002      	beq.n	800cda4 <__sflush_r+0x8c>
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f7fe fa80 	bl	800b2a4 <_free_r>
 800cda4:	2300      	movs	r3, #0
 800cda6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cda8:	e00d      	b.n	800cdc6 <__sflush_r+0xae>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	4628      	mov	r0, r5
 800cdae:	47b0      	blx	r6
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	1c50      	adds	r0, r2, #1
 800cdb4:	d1c9      	bne.n	800cd4a <__sflush_r+0x32>
 800cdb6:	682b      	ldr	r3, [r5, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d0c6      	beq.n	800cd4a <__sflush_r+0x32>
 800cdbc:	2b1d      	cmp	r3, #29
 800cdbe:	d001      	beq.n	800cdc4 <__sflush_r+0xac>
 800cdc0:	2b16      	cmp	r3, #22
 800cdc2:	d11e      	bne.n	800ce02 <__sflush_r+0xea>
 800cdc4:	602f      	str	r7, [r5, #0]
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	e022      	b.n	800ce10 <__sflush_r+0xf8>
 800cdca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdce:	b21b      	sxth	r3, r3
 800cdd0:	e01b      	b.n	800ce0a <__sflush_r+0xf2>
 800cdd2:	690f      	ldr	r7, [r1, #16]
 800cdd4:	2f00      	cmp	r7, #0
 800cdd6:	d0f6      	beq.n	800cdc6 <__sflush_r+0xae>
 800cdd8:	0793      	lsls	r3, r2, #30
 800cdda:	680e      	ldr	r6, [r1, #0]
 800cddc:	bf08      	it	eq
 800cdde:	694b      	ldreq	r3, [r1, #20]
 800cde0:	600f      	str	r7, [r1, #0]
 800cde2:	bf18      	it	ne
 800cde4:	2300      	movne	r3, #0
 800cde6:	eba6 0807 	sub.w	r8, r6, r7
 800cdea:	608b      	str	r3, [r1, #8]
 800cdec:	f1b8 0f00 	cmp.w	r8, #0
 800cdf0:	dde9      	ble.n	800cdc6 <__sflush_r+0xae>
 800cdf2:	6a21      	ldr	r1, [r4, #32]
 800cdf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cdf6:	4643      	mov	r3, r8
 800cdf8:	463a      	mov	r2, r7
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	47b0      	blx	r6
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	dc08      	bgt.n	800ce14 <__sflush_r+0xfc>
 800ce02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce0a:	81a3      	strh	r3, [r4, #12]
 800ce0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce14:	4407      	add	r7, r0
 800ce16:	eba8 0800 	sub.w	r8, r8, r0
 800ce1a:	e7e7      	b.n	800cdec <__sflush_r+0xd4>
 800ce1c:	dfbffffe 	.word	0xdfbffffe

0800ce20 <_fflush_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	690b      	ldr	r3, [r1, #16]
 800ce24:	4605      	mov	r5, r0
 800ce26:	460c      	mov	r4, r1
 800ce28:	b913      	cbnz	r3, 800ce30 <_fflush_r+0x10>
 800ce2a:	2500      	movs	r5, #0
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	b118      	cbz	r0, 800ce3a <_fflush_r+0x1a>
 800ce32:	6a03      	ldr	r3, [r0, #32]
 800ce34:	b90b      	cbnz	r3, 800ce3a <_fflush_r+0x1a>
 800ce36:	f7fd fa03 	bl	800a240 <__sinit>
 800ce3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d0f3      	beq.n	800ce2a <_fflush_r+0xa>
 800ce42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce44:	07d0      	lsls	r0, r2, #31
 800ce46:	d404      	bmi.n	800ce52 <_fflush_r+0x32>
 800ce48:	0599      	lsls	r1, r3, #22
 800ce4a:	d402      	bmi.n	800ce52 <_fflush_r+0x32>
 800ce4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce4e:	f7fd fc34 	bl	800a6ba <__retarget_lock_acquire_recursive>
 800ce52:	4628      	mov	r0, r5
 800ce54:	4621      	mov	r1, r4
 800ce56:	f7ff ff5f 	bl	800cd18 <__sflush_r>
 800ce5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce5c:	07da      	lsls	r2, r3, #31
 800ce5e:	4605      	mov	r5, r0
 800ce60:	d4e4      	bmi.n	800ce2c <_fflush_r+0xc>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	059b      	lsls	r3, r3, #22
 800ce66:	d4e1      	bmi.n	800ce2c <_fflush_r+0xc>
 800ce68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce6a:	f7fd fc27 	bl	800a6bc <__retarget_lock_release_recursive>
 800ce6e:	e7dd      	b.n	800ce2c <_fflush_r+0xc>

0800ce70 <__swhatbuf_r>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	460c      	mov	r4, r1
 800ce74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce78:	2900      	cmp	r1, #0
 800ce7a:	b096      	sub	sp, #88	@ 0x58
 800ce7c:	4615      	mov	r5, r2
 800ce7e:	461e      	mov	r6, r3
 800ce80:	da0d      	bge.n	800ce9e <__swhatbuf_r+0x2e>
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce88:	f04f 0100 	mov.w	r1, #0
 800ce8c:	bf14      	ite	ne
 800ce8e:	2340      	movne	r3, #64	@ 0x40
 800ce90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce94:	2000      	movs	r0, #0
 800ce96:	6031      	str	r1, [r6, #0]
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	b016      	add	sp, #88	@ 0x58
 800ce9c:	bd70      	pop	{r4, r5, r6, pc}
 800ce9e:	466a      	mov	r2, sp
 800cea0:	f000 f874 	bl	800cf8c <_fstat_r>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	dbec      	blt.n	800ce82 <__swhatbuf_r+0x12>
 800cea8:	9901      	ldr	r1, [sp, #4]
 800ceaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ceae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ceb2:	4259      	negs	r1, r3
 800ceb4:	4159      	adcs	r1, r3
 800ceb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ceba:	e7eb      	b.n	800ce94 <__swhatbuf_r+0x24>

0800cebc <__smakebuf_r>:
 800cebc:	898b      	ldrh	r3, [r1, #12]
 800cebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cec0:	079d      	lsls	r5, r3, #30
 800cec2:	4606      	mov	r6, r0
 800cec4:	460c      	mov	r4, r1
 800cec6:	d507      	bpl.n	800ced8 <__smakebuf_r+0x1c>
 800cec8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	6123      	str	r3, [r4, #16]
 800ced0:	2301      	movs	r3, #1
 800ced2:	6163      	str	r3, [r4, #20]
 800ced4:	b003      	add	sp, #12
 800ced6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced8:	ab01      	add	r3, sp, #4
 800ceda:	466a      	mov	r2, sp
 800cedc:	f7ff ffc8 	bl	800ce70 <__swhatbuf_r>
 800cee0:	9f00      	ldr	r7, [sp, #0]
 800cee2:	4605      	mov	r5, r0
 800cee4:	4639      	mov	r1, r7
 800cee6:	4630      	mov	r0, r6
 800cee8:	f7fe fa50 	bl	800b38c <_malloc_r>
 800ceec:	b948      	cbnz	r0, 800cf02 <__smakebuf_r+0x46>
 800ceee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cef2:	059a      	lsls	r2, r3, #22
 800cef4:	d4ee      	bmi.n	800ced4 <__smakebuf_r+0x18>
 800cef6:	f023 0303 	bic.w	r3, r3, #3
 800cefa:	f043 0302 	orr.w	r3, r3, #2
 800cefe:	81a3      	strh	r3, [r4, #12]
 800cf00:	e7e2      	b.n	800cec8 <__smakebuf_r+0xc>
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	6020      	str	r0, [r4, #0]
 800cf06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf12:	b15b      	cbz	r3, 800cf2c <__smakebuf_r+0x70>
 800cf14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f000 f849 	bl	800cfb0 <_isatty_r>
 800cf1e:	b128      	cbz	r0, 800cf2c <__smakebuf_r+0x70>
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	f023 0303 	bic.w	r3, r3, #3
 800cf26:	f043 0301 	orr.w	r3, r3, #1
 800cf2a:	81a3      	strh	r3, [r4, #12]
 800cf2c:	89a3      	ldrh	r3, [r4, #12]
 800cf2e:	431d      	orrs	r5, r3
 800cf30:	81a5      	strh	r5, [r4, #12]
 800cf32:	e7cf      	b.n	800ced4 <__smakebuf_r+0x18>

0800cf34 <memmove>:
 800cf34:	4288      	cmp	r0, r1
 800cf36:	b510      	push	{r4, lr}
 800cf38:	eb01 0402 	add.w	r4, r1, r2
 800cf3c:	d902      	bls.n	800cf44 <memmove+0x10>
 800cf3e:	4284      	cmp	r4, r0
 800cf40:	4623      	mov	r3, r4
 800cf42:	d807      	bhi.n	800cf54 <memmove+0x20>
 800cf44:	1e43      	subs	r3, r0, #1
 800cf46:	42a1      	cmp	r1, r4
 800cf48:	d008      	beq.n	800cf5c <memmove+0x28>
 800cf4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf52:	e7f8      	b.n	800cf46 <memmove+0x12>
 800cf54:	4402      	add	r2, r0
 800cf56:	4601      	mov	r1, r0
 800cf58:	428a      	cmp	r2, r1
 800cf5a:	d100      	bne.n	800cf5e <memmove+0x2a>
 800cf5c:	bd10      	pop	{r4, pc}
 800cf5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf66:	e7f7      	b.n	800cf58 <memmove+0x24>

0800cf68 <strncmp>:
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	b16a      	cbz	r2, 800cf88 <strncmp+0x20>
 800cf6c:	3901      	subs	r1, #1
 800cf6e:	1884      	adds	r4, r0, r2
 800cf70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d103      	bne.n	800cf84 <strncmp+0x1c>
 800cf7c:	42a0      	cmp	r0, r4
 800cf7e:	d001      	beq.n	800cf84 <strncmp+0x1c>
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	d1f5      	bne.n	800cf70 <strncmp+0x8>
 800cf84:	1ad0      	subs	r0, r2, r3
 800cf86:	bd10      	pop	{r4, pc}
 800cf88:	4610      	mov	r0, r2
 800cf8a:	e7fc      	b.n	800cf86 <strncmp+0x1e>

0800cf8c <_fstat_r>:
 800cf8c:	b538      	push	{r3, r4, r5, lr}
 800cf8e:	4d07      	ldr	r5, [pc, #28]	@ (800cfac <_fstat_r+0x20>)
 800cf90:	2300      	movs	r3, #0
 800cf92:	4604      	mov	r4, r0
 800cf94:	4608      	mov	r0, r1
 800cf96:	4611      	mov	r1, r2
 800cf98:	602b      	str	r3, [r5, #0]
 800cf9a:	f7f5 fe36 	bl	8002c0a <_fstat>
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	d102      	bne.n	800cfa8 <_fstat_r+0x1c>
 800cfa2:	682b      	ldr	r3, [r5, #0]
 800cfa4:	b103      	cbz	r3, 800cfa8 <_fstat_r+0x1c>
 800cfa6:	6023      	str	r3, [r4, #0]
 800cfa8:	bd38      	pop	{r3, r4, r5, pc}
 800cfaa:	bf00      	nop
 800cfac:	24000714 	.word	0x24000714

0800cfb0 <_isatty_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d06      	ldr	r5, [pc, #24]	@ (800cfcc <_isatty_r+0x1c>)
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	4608      	mov	r0, r1
 800cfba:	602b      	str	r3, [r5, #0]
 800cfbc:	f7f5 fe35 	bl	8002c2a <_isatty>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d102      	bne.n	800cfca <_isatty_r+0x1a>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	b103      	cbz	r3, 800cfca <_isatty_r+0x1a>
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	24000714 	.word	0x24000714

0800cfd0 <_sbrk_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4d06      	ldr	r5, [pc, #24]	@ (800cfec <_sbrk_r+0x1c>)
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	4608      	mov	r0, r1
 800cfda:	602b      	str	r3, [r5, #0]
 800cfdc:	f7f5 fe3e 	bl	8002c5c <_sbrk>
 800cfe0:	1c43      	adds	r3, r0, #1
 800cfe2:	d102      	bne.n	800cfea <_sbrk_r+0x1a>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	b103      	cbz	r3, 800cfea <_sbrk_r+0x1a>
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	bd38      	pop	{r3, r4, r5, pc}
 800cfec:	24000714 	.word	0x24000714

0800cff0 <nan>:
 800cff0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cff8 <nan+0x8>
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	00000000 	.word	0x00000000
 800cffc:	7ff80000 	.word	0x7ff80000

0800d000 <__assert_func>:
 800d000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d002:	4614      	mov	r4, r2
 800d004:	461a      	mov	r2, r3
 800d006:	4b09      	ldr	r3, [pc, #36]	@ (800d02c <__assert_func+0x2c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4605      	mov	r5, r0
 800d00c:	68d8      	ldr	r0, [r3, #12]
 800d00e:	b954      	cbnz	r4, 800d026 <__assert_func+0x26>
 800d010:	4b07      	ldr	r3, [pc, #28]	@ (800d030 <__assert_func+0x30>)
 800d012:	461c      	mov	r4, r3
 800d014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d018:	9100      	str	r1, [sp, #0]
 800d01a:	462b      	mov	r3, r5
 800d01c:	4905      	ldr	r1, [pc, #20]	@ (800d034 <__assert_func+0x34>)
 800d01e:	f000 fba7 	bl	800d770 <fiprintf>
 800d022:	f000 fbb7 	bl	800d794 <abort>
 800d026:	4b04      	ldr	r3, [pc, #16]	@ (800d038 <__assert_func+0x38>)
 800d028:	e7f4      	b.n	800d014 <__assert_func+0x14>
 800d02a:	bf00      	nop
 800d02c:	2400003c 	.word	0x2400003c
 800d030:	0800e535 	.word	0x0800e535
 800d034:	0800e507 	.word	0x0800e507
 800d038:	0800e4fa 	.word	0x0800e4fa

0800d03c <_calloc_r>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	fba1 5402 	umull	r5, r4, r1, r2
 800d042:	b93c      	cbnz	r4, 800d054 <_calloc_r+0x18>
 800d044:	4629      	mov	r1, r5
 800d046:	f7fe f9a1 	bl	800b38c <_malloc_r>
 800d04a:	4606      	mov	r6, r0
 800d04c:	b928      	cbnz	r0, 800d05a <_calloc_r+0x1e>
 800d04e:	2600      	movs	r6, #0
 800d050:	4630      	mov	r0, r6
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	220c      	movs	r2, #12
 800d056:	6002      	str	r2, [r0, #0]
 800d058:	e7f9      	b.n	800d04e <_calloc_r+0x12>
 800d05a:	462a      	mov	r2, r5
 800d05c:	4621      	mov	r1, r4
 800d05e:	f7fd faaf 	bl	800a5c0 <memset>
 800d062:	e7f5      	b.n	800d050 <_calloc_r+0x14>

0800d064 <rshift>:
 800d064:	6903      	ldr	r3, [r0, #16]
 800d066:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d06a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d06e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d072:	f100 0414 	add.w	r4, r0, #20
 800d076:	dd45      	ble.n	800d104 <rshift+0xa0>
 800d078:	f011 011f 	ands.w	r1, r1, #31
 800d07c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d080:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d084:	d10c      	bne.n	800d0a0 <rshift+0x3c>
 800d086:	f100 0710 	add.w	r7, r0, #16
 800d08a:	4629      	mov	r1, r5
 800d08c:	42b1      	cmp	r1, r6
 800d08e:	d334      	bcc.n	800d0fa <rshift+0x96>
 800d090:	1a9b      	subs	r3, r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	1eea      	subs	r2, r5, #3
 800d096:	4296      	cmp	r6, r2
 800d098:	bf38      	it	cc
 800d09a:	2300      	movcc	r3, #0
 800d09c:	4423      	add	r3, r4
 800d09e:	e015      	b.n	800d0cc <rshift+0x68>
 800d0a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0a4:	f1c1 0820 	rsb	r8, r1, #32
 800d0a8:	40cf      	lsrs	r7, r1
 800d0aa:	f105 0e04 	add.w	lr, r5, #4
 800d0ae:	46a1      	mov	r9, r4
 800d0b0:	4576      	cmp	r6, lr
 800d0b2:	46f4      	mov	ip, lr
 800d0b4:	d815      	bhi.n	800d0e2 <rshift+0x7e>
 800d0b6:	1a9a      	subs	r2, r3, r2
 800d0b8:	0092      	lsls	r2, r2, #2
 800d0ba:	3a04      	subs	r2, #4
 800d0bc:	3501      	adds	r5, #1
 800d0be:	42ae      	cmp	r6, r5
 800d0c0:	bf38      	it	cc
 800d0c2:	2200      	movcc	r2, #0
 800d0c4:	18a3      	adds	r3, r4, r2
 800d0c6:	50a7      	str	r7, [r4, r2]
 800d0c8:	b107      	cbz	r7, 800d0cc <rshift+0x68>
 800d0ca:	3304      	adds	r3, #4
 800d0cc:	1b1a      	subs	r2, r3, r4
 800d0ce:	42a3      	cmp	r3, r4
 800d0d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d0d4:	bf08      	it	eq
 800d0d6:	2300      	moveq	r3, #0
 800d0d8:	6102      	str	r2, [r0, #16]
 800d0da:	bf08      	it	eq
 800d0dc:	6143      	streq	r3, [r0, #20]
 800d0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	f8dc c000 	ldr.w	ip, [ip]
 800d0e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d0ea:	ea4c 0707 	orr.w	r7, ip, r7
 800d0ee:	f849 7b04 	str.w	r7, [r9], #4
 800d0f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0f6:	40cf      	lsrs	r7, r1
 800d0f8:	e7da      	b.n	800d0b0 <rshift+0x4c>
 800d0fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800d0fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800d102:	e7c3      	b.n	800d08c <rshift+0x28>
 800d104:	4623      	mov	r3, r4
 800d106:	e7e1      	b.n	800d0cc <rshift+0x68>

0800d108 <__hexdig_fun>:
 800d108:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d10c:	2b09      	cmp	r3, #9
 800d10e:	d802      	bhi.n	800d116 <__hexdig_fun+0xe>
 800d110:	3820      	subs	r0, #32
 800d112:	b2c0      	uxtb	r0, r0
 800d114:	4770      	bx	lr
 800d116:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d11a:	2b05      	cmp	r3, #5
 800d11c:	d801      	bhi.n	800d122 <__hexdig_fun+0x1a>
 800d11e:	3847      	subs	r0, #71	@ 0x47
 800d120:	e7f7      	b.n	800d112 <__hexdig_fun+0xa>
 800d122:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d126:	2b05      	cmp	r3, #5
 800d128:	d801      	bhi.n	800d12e <__hexdig_fun+0x26>
 800d12a:	3827      	subs	r0, #39	@ 0x27
 800d12c:	e7f1      	b.n	800d112 <__hexdig_fun+0xa>
 800d12e:	2000      	movs	r0, #0
 800d130:	4770      	bx	lr
	...

0800d134 <__gethex>:
 800d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	b085      	sub	sp, #20
 800d13a:	468a      	mov	sl, r1
 800d13c:	9302      	str	r3, [sp, #8]
 800d13e:	680b      	ldr	r3, [r1, #0]
 800d140:	9001      	str	r0, [sp, #4]
 800d142:	4690      	mov	r8, r2
 800d144:	1c9c      	adds	r4, r3, #2
 800d146:	46a1      	mov	r9, r4
 800d148:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d14c:	2830      	cmp	r0, #48	@ 0x30
 800d14e:	d0fa      	beq.n	800d146 <__gethex+0x12>
 800d150:	eba9 0303 	sub.w	r3, r9, r3
 800d154:	f1a3 0b02 	sub.w	fp, r3, #2
 800d158:	f7ff ffd6 	bl	800d108 <__hexdig_fun>
 800d15c:	4605      	mov	r5, r0
 800d15e:	2800      	cmp	r0, #0
 800d160:	d168      	bne.n	800d234 <__gethex+0x100>
 800d162:	49a0      	ldr	r1, [pc, #640]	@ (800d3e4 <__gethex+0x2b0>)
 800d164:	2201      	movs	r2, #1
 800d166:	4648      	mov	r0, r9
 800d168:	f7ff fefe 	bl	800cf68 <strncmp>
 800d16c:	4607      	mov	r7, r0
 800d16e:	2800      	cmp	r0, #0
 800d170:	d167      	bne.n	800d242 <__gethex+0x10e>
 800d172:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d176:	4626      	mov	r6, r4
 800d178:	f7ff ffc6 	bl	800d108 <__hexdig_fun>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d062      	beq.n	800d246 <__gethex+0x112>
 800d180:	4623      	mov	r3, r4
 800d182:	7818      	ldrb	r0, [r3, #0]
 800d184:	2830      	cmp	r0, #48	@ 0x30
 800d186:	4699      	mov	r9, r3
 800d188:	f103 0301 	add.w	r3, r3, #1
 800d18c:	d0f9      	beq.n	800d182 <__gethex+0x4e>
 800d18e:	f7ff ffbb 	bl	800d108 <__hexdig_fun>
 800d192:	fab0 f580 	clz	r5, r0
 800d196:	096d      	lsrs	r5, r5, #5
 800d198:	f04f 0b01 	mov.w	fp, #1
 800d19c:	464a      	mov	r2, r9
 800d19e:	4616      	mov	r6, r2
 800d1a0:	3201      	adds	r2, #1
 800d1a2:	7830      	ldrb	r0, [r6, #0]
 800d1a4:	f7ff ffb0 	bl	800d108 <__hexdig_fun>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d1f8      	bne.n	800d19e <__gethex+0x6a>
 800d1ac:	498d      	ldr	r1, [pc, #564]	@ (800d3e4 <__gethex+0x2b0>)
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f7ff fed9 	bl	800cf68 <strncmp>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d13f      	bne.n	800d23a <__gethex+0x106>
 800d1ba:	b944      	cbnz	r4, 800d1ce <__gethex+0x9a>
 800d1bc:	1c74      	adds	r4, r6, #1
 800d1be:	4622      	mov	r2, r4
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	3201      	adds	r2, #1
 800d1c4:	7830      	ldrb	r0, [r6, #0]
 800d1c6:	f7ff ff9f 	bl	800d108 <__hexdig_fun>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d1f8      	bne.n	800d1c0 <__gethex+0x8c>
 800d1ce:	1ba4      	subs	r4, r4, r6
 800d1d0:	00a7      	lsls	r7, r4, #2
 800d1d2:	7833      	ldrb	r3, [r6, #0]
 800d1d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d1d8:	2b50      	cmp	r3, #80	@ 0x50
 800d1da:	d13e      	bne.n	800d25a <__gethex+0x126>
 800d1dc:	7873      	ldrb	r3, [r6, #1]
 800d1de:	2b2b      	cmp	r3, #43	@ 0x2b
 800d1e0:	d033      	beq.n	800d24a <__gethex+0x116>
 800d1e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800d1e4:	d034      	beq.n	800d250 <__gethex+0x11c>
 800d1e6:	1c71      	adds	r1, r6, #1
 800d1e8:	2400      	movs	r4, #0
 800d1ea:	7808      	ldrb	r0, [r1, #0]
 800d1ec:	f7ff ff8c 	bl	800d108 <__hexdig_fun>
 800d1f0:	1e43      	subs	r3, r0, #1
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	2b18      	cmp	r3, #24
 800d1f6:	d830      	bhi.n	800d25a <__gethex+0x126>
 800d1f8:	f1a0 0210 	sub.w	r2, r0, #16
 800d1fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d200:	f7ff ff82 	bl	800d108 <__hexdig_fun>
 800d204:	f100 3cff 	add.w	ip, r0, #4294967295
 800d208:	fa5f fc8c 	uxtb.w	ip, ip
 800d20c:	f1bc 0f18 	cmp.w	ip, #24
 800d210:	f04f 030a 	mov.w	r3, #10
 800d214:	d91e      	bls.n	800d254 <__gethex+0x120>
 800d216:	b104      	cbz	r4, 800d21a <__gethex+0xe6>
 800d218:	4252      	negs	r2, r2
 800d21a:	4417      	add	r7, r2
 800d21c:	f8ca 1000 	str.w	r1, [sl]
 800d220:	b1ed      	cbz	r5, 800d25e <__gethex+0x12a>
 800d222:	f1bb 0f00 	cmp.w	fp, #0
 800d226:	bf0c      	ite	eq
 800d228:	2506      	moveq	r5, #6
 800d22a:	2500      	movne	r5, #0
 800d22c:	4628      	mov	r0, r5
 800d22e:	b005      	add	sp, #20
 800d230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d234:	2500      	movs	r5, #0
 800d236:	462c      	mov	r4, r5
 800d238:	e7b0      	b.n	800d19c <__gethex+0x68>
 800d23a:	2c00      	cmp	r4, #0
 800d23c:	d1c7      	bne.n	800d1ce <__gethex+0x9a>
 800d23e:	4627      	mov	r7, r4
 800d240:	e7c7      	b.n	800d1d2 <__gethex+0x9e>
 800d242:	464e      	mov	r6, r9
 800d244:	462f      	mov	r7, r5
 800d246:	2501      	movs	r5, #1
 800d248:	e7c3      	b.n	800d1d2 <__gethex+0x9e>
 800d24a:	2400      	movs	r4, #0
 800d24c:	1cb1      	adds	r1, r6, #2
 800d24e:	e7cc      	b.n	800d1ea <__gethex+0xb6>
 800d250:	2401      	movs	r4, #1
 800d252:	e7fb      	b.n	800d24c <__gethex+0x118>
 800d254:	fb03 0002 	mla	r0, r3, r2, r0
 800d258:	e7ce      	b.n	800d1f8 <__gethex+0xc4>
 800d25a:	4631      	mov	r1, r6
 800d25c:	e7de      	b.n	800d21c <__gethex+0xe8>
 800d25e:	eba6 0309 	sub.w	r3, r6, r9
 800d262:	3b01      	subs	r3, #1
 800d264:	4629      	mov	r1, r5
 800d266:	2b07      	cmp	r3, #7
 800d268:	dc0a      	bgt.n	800d280 <__gethex+0x14c>
 800d26a:	9801      	ldr	r0, [sp, #4]
 800d26c:	f7fe f91a 	bl	800b4a4 <_Balloc>
 800d270:	4604      	mov	r4, r0
 800d272:	b940      	cbnz	r0, 800d286 <__gethex+0x152>
 800d274:	4b5c      	ldr	r3, [pc, #368]	@ (800d3e8 <__gethex+0x2b4>)
 800d276:	4602      	mov	r2, r0
 800d278:	21e4      	movs	r1, #228	@ 0xe4
 800d27a:	485c      	ldr	r0, [pc, #368]	@ (800d3ec <__gethex+0x2b8>)
 800d27c:	f7ff fec0 	bl	800d000 <__assert_func>
 800d280:	3101      	adds	r1, #1
 800d282:	105b      	asrs	r3, r3, #1
 800d284:	e7ef      	b.n	800d266 <__gethex+0x132>
 800d286:	f100 0a14 	add.w	sl, r0, #20
 800d28a:	2300      	movs	r3, #0
 800d28c:	4655      	mov	r5, sl
 800d28e:	469b      	mov	fp, r3
 800d290:	45b1      	cmp	r9, r6
 800d292:	d337      	bcc.n	800d304 <__gethex+0x1d0>
 800d294:	f845 bb04 	str.w	fp, [r5], #4
 800d298:	eba5 050a 	sub.w	r5, r5, sl
 800d29c:	10ad      	asrs	r5, r5, #2
 800d29e:	6125      	str	r5, [r4, #16]
 800d2a0:	4658      	mov	r0, fp
 800d2a2:	f7fe f9f1 	bl	800b688 <__hi0bits>
 800d2a6:	016d      	lsls	r5, r5, #5
 800d2a8:	f8d8 6000 	ldr.w	r6, [r8]
 800d2ac:	1a2d      	subs	r5, r5, r0
 800d2ae:	42b5      	cmp	r5, r6
 800d2b0:	dd54      	ble.n	800d35c <__gethex+0x228>
 800d2b2:	1bad      	subs	r5, r5, r6
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f7fe fd82 	bl	800bdc0 <__any_on>
 800d2bc:	4681      	mov	r9, r0
 800d2be:	b178      	cbz	r0, 800d2e0 <__gethex+0x1ac>
 800d2c0:	1e6b      	subs	r3, r5, #1
 800d2c2:	1159      	asrs	r1, r3, #5
 800d2c4:	f003 021f 	and.w	r2, r3, #31
 800d2c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d2cc:	f04f 0901 	mov.w	r9, #1
 800d2d0:	fa09 f202 	lsl.w	r2, r9, r2
 800d2d4:	420a      	tst	r2, r1
 800d2d6:	d003      	beq.n	800d2e0 <__gethex+0x1ac>
 800d2d8:	454b      	cmp	r3, r9
 800d2da:	dc36      	bgt.n	800d34a <__gethex+0x216>
 800d2dc:	f04f 0902 	mov.w	r9, #2
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f7ff febe 	bl	800d064 <rshift>
 800d2e8:	442f      	add	r7, r5
 800d2ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2ee:	42bb      	cmp	r3, r7
 800d2f0:	da42      	bge.n	800d378 <__gethex+0x244>
 800d2f2:	9801      	ldr	r0, [sp, #4]
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	f7fe f915 	bl	800b524 <_Bfree>
 800d2fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	25a3      	movs	r5, #163	@ 0xa3
 800d302:	e793      	b.n	800d22c <__gethex+0xf8>
 800d304:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d308:	2a2e      	cmp	r2, #46	@ 0x2e
 800d30a:	d012      	beq.n	800d332 <__gethex+0x1fe>
 800d30c:	2b20      	cmp	r3, #32
 800d30e:	d104      	bne.n	800d31a <__gethex+0x1e6>
 800d310:	f845 bb04 	str.w	fp, [r5], #4
 800d314:	f04f 0b00 	mov.w	fp, #0
 800d318:	465b      	mov	r3, fp
 800d31a:	7830      	ldrb	r0, [r6, #0]
 800d31c:	9303      	str	r3, [sp, #12]
 800d31e:	f7ff fef3 	bl	800d108 <__hexdig_fun>
 800d322:	9b03      	ldr	r3, [sp, #12]
 800d324:	f000 000f 	and.w	r0, r0, #15
 800d328:	4098      	lsls	r0, r3
 800d32a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d32e:	3304      	adds	r3, #4
 800d330:	e7ae      	b.n	800d290 <__gethex+0x15c>
 800d332:	45b1      	cmp	r9, r6
 800d334:	d8ea      	bhi.n	800d30c <__gethex+0x1d8>
 800d336:	492b      	ldr	r1, [pc, #172]	@ (800d3e4 <__gethex+0x2b0>)
 800d338:	9303      	str	r3, [sp, #12]
 800d33a:	2201      	movs	r2, #1
 800d33c:	4630      	mov	r0, r6
 800d33e:	f7ff fe13 	bl	800cf68 <strncmp>
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	2800      	cmp	r0, #0
 800d346:	d1e1      	bne.n	800d30c <__gethex+0x1d8>
 800d348:	e7a2      	b.n	800d290 <__gethex+0x15c>
 800d34a:	1ea9      	subs	r1, r5, #2
 800d34c:	4620      	mov	r0, r4
 800d34e:	f7fe fd37 	bl	800bdc0 <__any_on>
 800d352:	2800      	cmp	r0, #0
 800d354:	d0c2      	beq.n	800d2dc <__gethex+0x1a8>
 800d356:	f04f 0903 	mov.w	r9, #3
 800d35a:	e7c1      	b.n	800d2e0 <__gethex+0x1ac>
 800d35c:	da09      	bge.n	800d372 <__gethex+0x23e>
 800d35e:	1b75      	subs	r5, r6, r5
 800d360:	4621      	mov	r1, r4
 800d362:	9801      	ldr	r0, [sp, #4]
 800d364:	462a      	mov	r2, r5
 800d366:	f7fe faf5 	bl	800b954 <__lshift>
 800d36a:	1b7f      	subs	r7, r7, r5
 800d36c:	4604      	mov	r4, r0
 800d36e:	f100 0a14 	add.w	sl, r0, #20
 800d372:	f04f 0900 	mov.w	r9, #0
 800d376:	e7b8      	b.n	800d2ea <__gethex+0x1b6>
 800d378:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d37c:	42bd      	cmp	r5, r7
 800d37e:	dd6f      	ble.n	800d460 <__gethex+0x32c>
 800d380:	1bed      	subs	r5, r5, r7
 800d382:	42ae      	cmp	r6, r5
 800d384:	dc34      	bgt.n	800d3f0 <__gethex+0x2bc>
 800d386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d022      	beq.n	800d3d4 <__gethex+0x2a0>
 800d38e:	2b03      	cmp	r3, #3
 800d390:	d024      	beq.n	800d3dc <__gethex+0x2a8>
 800d392:	2b01      	cmp	r3, #1
 800d394:	d115      	bne.n	800d3c2 <__gethex+0x28e>
 800d396:	42ae      	cmp	r6, r5
 800d398:	d113      	bne.n	800d3c2 <__gethex+0x28e>
 800d39a:	2e01      	cmp	r6, #1
 800d39c:	d10b      	bne.n	800d3b6 <__gethex+0x282>
 800d39e:	9a02      	ldr	r2, [sp, #8]
 800d3a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	6123      	str	r3, [r4, #16]
 800d3aa:	f8ca 3000 	str.w	r3, [sl]
 800d3ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3b0:	2562      	movs	r5, #98	@ 0x62
 800d3b2:	601c      	str	r4, [r3, #0]
 800d3b4:	e73a      	b.n	800d22c <__gethex+0xf8>
 800d3b6:	1e71      	subs	r1, r6, #1
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f7fe fd01 	bl	800bdc0 <__any_on>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d1ed      	bne.n	800d39e <__gethex+0x26a>
 800d3c2:	9801      	ldr	r0, [sp, #4]
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	f7fe f8ad 	bl	800b524 <_Bfree>
 800d3ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	6013      	str	r3, [r2, #0]
 800d3d0:	2550      	movs	r5, #80	@ 0x50
 800d3d2:	e72b      	b.n	800d22c <__gethex+0xf8>
 800d3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1f3      	bne.n	800d3c2 <__gethex+0x28e>
 800d3da:	e7e0      	b.n	800d39e <__gethex+0x26a>
 800d3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1dd      	bne.n	800d39e <__gethex+0x26a>
 800d3e2:	e7ee      	b.n	800d3c2 <__gethex+0x28e>
 800d3e4:	0800e388 	.word	0x0800e388
 800d3e8:	0800e221 	.word	0x0800e221
 800d3ec:	0800e536 	.word	0x0800e536
 800d3f0:	1e6f      	subs	r7, r5, #1
 800d3f2:	f1b9 0f00 	cmp.w	r9, #0
 800d3f6:	d130      	bne.n	800d45a <__gethex+0x326>
 800d3f8:	b127      	cbz	r7, 800d404 <__gethex+0x2d0>
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f7fe fcdf 	bl	800bdc0 <__any_on>
 800d402:	4681      	mov	r9, r0
 800d404:	117a      	asrs	r2, r7, #5
 800d406:	2301      	movs	r3, #1
 800d408:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d40c:	f007 071f 	and.w	r7, r7, #31
 800d410:	40bb      	lsls	r3, r7
 800d412:	4213      	tst	r3, r2
 800d414:	4629      	mov	r1, r5
 800d416:	4620      	mov	r0, r4
 800d418:	bf18      	it	ne
 800d41a:	f049 0902 	orrne.w	r9, r9, #2
 800d41e:	f7ff fe21 	bl	800d064 <rshift>
 800d422:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d426:	1b76      	subs	r6, r6, r5
 800d428:	2502      	movs	r5, #2
 800d42a:	f1b9 0f00 	cmp.w	r9, #0
 800d42e:	d047      	beq.n	800d4c0 <__gethex+0x38c>
 800d430:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d434:	2b02      	cmp	r3, #2
 800d436:	d015      	beq.n	800d464 <__gethex+0x330>
 800d438:	2b03      	cmp	r3, #3
 800d43a:	d017      	beq.n	800d46c <__gethex+0x338>
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d109      	bne.n	800d454 <__gethex+0x320>
 800d440:	f019 0f02 	tst.w	r9, #2
 800d444:	d006      	beq.n	800d454 <__gethex+0x320>
 800d446:	f8da 3000 	ldr.w	r3, [sl]
 800d44a:	ea49 0903 	orr.w	r9, r9, r3
 800d44e:	f019 0f01 	tst.w	r9, #1
 800d452:	d10e      	bne.n	800d472 <__gethex+0x33e>
 800d454:	f045 0510 	orr.w	r5, r5, #16
 800d458:	e032      	b.n	800d4c0 <__gethex+0x38c>
 800d45a:	f04f 0901 	mov.w	r9, #1
 800d45e:	e7d1      	b.n	800d404 <__gethex+0x2d0>
 800d460:	2501      	movs	r5, #1
 800d462:	e7e2      	b.n	800d42a <__gethex+0x2f6>
 800d464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d466:	f1c3 0301 	rsb	r3, r3, #1
 800d46a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d0f0      	beq.n	800d454 <__gethex+0x320>
 800d472:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d476:	f104 0314 	add.w	r3, r4, #20
 800d47a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d47e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d482:	f04f 0c00 	mov.w	ip, #0
 800d486:	4618      	mov	r0, r3
 800d488:	f853 2b04 	ldr.w	r2, [r3], #4
 800d48c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d490:	d01b      	beq.n	800d4ca <__gethex+0x396>
 800d492:	3201      	adds	r2, #1
 800d494:	6002      	str	r2, [r0, #0]
 800d496:	2d02      	cmp	r5, #2
 800d498:	f104 0314 	add.w	r3, r4, #20
 800d49c:	d13c      	bne.n	800d518 <__gethex+0x3e4>
 800d49e:	f8d8 2000 	ldr.w	r2, [r8]
 800d4a2:	3a01      	subs	r2, #1
 800d4a4:	42b2      	cmp	r2, r6
 800d4a6:	d109      	bne.n	800d4bc <__gethex+0x388>
 800d4a8:	1171      	asrs	r1, r6, #5
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d4b0:	f006 061f 	and.w	r6, r6, #31
 800d4b4:	fa02 f606 	lsl.w	r6, r2, r6
 800d4b8:	421e      	tst	r6, r3
 800d4ba:	d13a      	bne.n	800d532 <__gethex+0x3fe>
 800d4bc:	f045 0520 	orr.w	r5, r5, #32
 800d4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4c2:	601c      	str	r4, [r3, #0]
 800d4c4:	9b02      	ldr	r3, [sp, #8]
 800d4c6:	601f      	str	r7, [r3, #0]
 800d4c8:	e6b0      	b.n	800d22c <__gethex+0xf8>
 800d4ca:	4299      	cmp	r1, r3
 800d4cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d4d0:	d8d9      	bhi.n	800d486 <__gethex+0x352>
 800d4d2:	68a3      	ldr	r3, [r4, #8]
 800d4d4:	459b      	cmp	fp, r3
 800d4d6:	db17      	blt.n	800d508 <__gethex+0x3d4>
 800d4d8:	6861      	ldr	r1, [r4, #4]
 800d4da:	9801      	ldr	r0, [sp, #4]
 800d4dc:	3101      	adds	r1, #1
 800d4de:	f7fd ffe1 	bl	800b4a4 <_Balloc>
 800d4e2:	4681      	mov	r9, r0
 800d4e4:	b918      	cbnz	r0, 800d4ee <__gethex+0x3ba>
 800d4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d550 <__gethex+0x41c>)
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	2184      	movs	r1, #132	@ 0x84
 800d4ec:	e6c5      	b.n	800d27a <__gethex+0x146>
 800d4ee:	6922      	ldr	r2, [r4, #16]
 800d4f0:	3202      	adds	r2, #2
 800d4f2:	f104 010c 	add.w	r1, r4, #12
 800d4f6:	0092      	lsls	r2, r2, #2
 800d4f8:	300c      	adds	r0, #12
 800d4fa:	f7fd f8e0 	bl	800a6be <memcpy>
 800d4fe:	4621      	mov	r1, r4
 800d500:	9801      	ldr	r0, [sp, #4]
 800d502:	f7fe f80f 	bl	800b524 <_Bfree>
 800d506:	464c      	mov	r4, r9
 800d508:	6923      	ldr	r3, [r4, #16]
 800d50a:	1c5a      	adds	r2, r3, #1
 800d50c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d510:	6122      	str	r2, [r4, #16]
 800d512:	2201      	movs	r2, #1
 800d514:	615a      	str	r2, [r3, #20]
 800d516:	e7be      	b.n	800d496 <__gethex+0x362>
 800d518:	6922      	ldr	r2, [r4, #16]
 800d51a:	455a      	cmp	r2, fp
 800d51c:	dd0b      	ble.n	800d536 <__gethex+0x402>
 800d51e:	2101      	movs	r1, #1
 800d520:	4620      	mov	r0, r4
 800d522:	f7ff fd9f 	bl	800d064 <rshift>
 800d526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d52a:	3701      	adds	r7, #1
 800d52c:	42bb      	cmp	r3, r7
 800d52e:	f6ff aee0 	blt.w	800d2f2 <__gethex+0x1be>
 800d532:	2501      	movs	r5, #1
 800d534:	e7c2      	b.n	800d4bc <__gethex+0x388>
 800d536:	f016 061f 	ands.w	r6, r6, #31
 800d53a:	d0fa      	beq.n	800d532 <__gethex+0x3fe>
 800d53c:	4453      	add	r3, sl
 800d53e:	f1c6 0620 	rsb	r6, r6, #32
 800d542:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d546:	f7fe f89f 	bl	800b688 <__hi0bits>
 800d54a:	42b0      	cmp	r0, r6
 800d54c:	dbe7      	blt.n	800d51e <__gethex+0x3ea>
 800d54e:	e7f0      	b.n	800d532 <__gethex+0x3fe>
 800d550:	0800e221 	.word	0x0800e221

0800d554 <L_shift>:
 800d554:	f1c2 0208 	rsb	r2, r2, #8
 800d558:	0092      	lsls	r2, r2, #2
 800d55a:	b570      	push	{r4, r5, r6, lr}
 800d55c:	f1c2 0620 	rsb	r6, r2, #32
 800d560:	6843      	ldr	r3, [r0, #4]
 800d562:	6804      	ldr	r4, [r0, #0]
 800d564:	fa03 f506 	lsl.w	r5, r3, r6
 800d568:	432c      	orrs	r4, r5
 800d56a:	40d3      	lsrs	r3, r2
 800d56c:	6004      	str	r4, [r0, #0]
 800d56e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d572:	4288      	cmp	r0, r1
 800d574:	d3f4      	bcc.n	800d560 <L_shift+0xc>
 800d576:	bd70      	pop	{r4, r5, r6, pc}

0800d578 <__match>:
 800d578:	b530      	push	{r4, r5, lr}
 800d57a:	6803      	ldr	r3, [r0, #0]
 800d57c:	3301      	adds	r3, #1
 800d57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d582:	b914      	cbnz	r4, 800d58a <__match+0x12>
 800d584:	6003      	str	r3, [r0, #0]
 800d586:	2001      	movs	r0, #1
 800d588:	bd30      	pop	{r4, r5, pc}
 800d58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d58e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d592:	2d19      	cmp	r5, #25
 800d594:	bf98      	it	ls
 800d596:	3220      	addls	r2, #32
 800d598:	42a2      	cmp	r2, r4
 800d59a:	d0f0      	beq.n	800d57e <__match+0x6>
 800d59c:	2000      	movs	r0, #0
 800d59e:	e7f3      	b.n	800d588 <__match+0x10>

0800d5a0 <__hexnan>:
 800d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	680b      	ldr	r3, [r1, #0]
 800d5a6:	6801      	ldr	r1, [r0, #0]
 800d5a8:	115e      	asrs	r6, r3, #5
 800d5aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d5ae:	f013 031f 	ands.w	r3, r3, #31
 800d5b2:	b087      	sub	sp, #28
 800d5b4:	bf18      	it	ne
 800d5b6:	3604      	addne	r6, #4
 800d5b8:	2500      	movs	r5, #0
 800d5ba:	1f37      	subs	r7, r6, #4
 800d5bc:	4682      	mov	sl, r0
 800d5be:	4690      	mov	r8, r2
 800d5c0:	9301      	str	r3, [sp, #4]
 800d5c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5c6:	46b9      	mov	r9, r7
 800d5c8:	463c      	mov	r4, r7
 800d5ca:	9502      	str	r5, [sp, #8]
 800d5cc:	46ab      	mov	fp, r5
 800d5ce:	784a      	ldrb	r2, [r1, #1]
 800d5d0:	1c4b      	adds	r3, r1, #1
 800d5d2:	9303      	str	r3, [sp, #12]
 800d5d4:	b342      	cbz	r2, 800d628 <__hexnan+0x88>
 800d5d6:	4610      	mov	r0, r2
 800d5d8:	9105      	str	r1, [sp, #20]
 800d5da:	9204      	str	r2, [sp, #16]
 800d5dc:	f7ff fd94 	bl	800d108 <__hexdig_fun>
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	d151      	bne.n	800d688 <__hexnan+0xe8>
 800d5e4:	9a04      	ldr	r2, [sp, #16]
 800d5e6:	9905      	ldr	r1, [sp, #20]
 800d5e8:	2a20      	cmp	r2, #32
 800d5ea:	d818      	bhi.n	800d61e <__hexnan+0x7e>
 800d5ec:	9b02      	ldr	r3, [sp, #8]
 800d5ee:	459b      	cmp	fp, r3
 800d5f0:	dd13      	ble.n	800d61a <__hexnan+0x7a>
 800d5f2:	454c      	cmp	r4, r9
 800d5f4:	d206      	bcs.n	800d604 <__hexnan+0x64>
 800d5f6:	2d07      	cmp	r5, #7
 800d5f8:	dc04      	bgt.n	800d604 <__hexnan+0x64>
 800d5fa:	462a      	mov	r2, r5
 800d5fc:	4649      	mov	r1, r9
 800d5fe:	4620      	mov	r0, r4
 800d600:	f7ff ffa8 	bl	800d554 <L_shift>
 800d604:	4544      	cmp	r4, r8
 800d606:	d952      	bls.n	800d6ae <__hexnan+0x10e>
 800d608:	2300      	movs	r3, #0
 800d60a:	f1a4 0904 	sub.w	r9, r4, #4
 800d60e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d612:	f8cd b008 	str.w	fp, [sp, #8]
 800d616:	464c      	mov	r4, r9
 800d618:	461d      	mov	r5, r3
 800d61a:	9903      	ldr	r1, [sp, #12]
 800d61c:	e7d7      	b.n	800d5ce <__hexnan+0x2e>
 800d61e:	2a29      	cmp	r2, #41	@ 0x29
 800d620:	d157      	bne.n	800d6d2 <__hexnan+0x132>
 800d622:	3102      	adds	r1, #2
 800d624:	f8ca 1000 	str.w	r1, [sl]
 800d628:	f1bb 0f00 	cmp.w	fp, #0
 800d62c:	d051      	beq.n	800d6d2 <__hexnan+0x132>
 800d62e:	454c      	cmp	r4, r9
 800d630:	d206      	bcs.n	800d640 <__hexnan+0xa0>
 800d632:	2d07      	cmp	r5, #7
 800d634:	dc04      	bgt.n	800d640 <__hexnan+0xa0>
 800d636:	462a      	mov	r2, r5
 800d638:	4649      	mov	r1, r9
 800d63a:	4620      	mov	r0, r4
 800d63c:	f7ff ff8a 	bl	800d554 <L_shift>
 800d640:	4544      	cmp	r4, r8
 800d642:	d936      	bls.n	800d6b2 <__hexnan+0x112>
 800d644:	f1a8 0204 	sub.w	r2, r8, #4
 800d648:	4623      	mov	r3, r4
 800d64a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d64e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d652:	429f      	cmp	r7, r3
 800d654:	d2f9      	bcs.n	800d64a <__hexnan+0xaa>
 800d656:	1b3b      	subs	r3, r7, r4
 800d658:	f023 0303 	bic.w	r3, r3, #3
 800d65c:	3304      	adds	r3, #4
 800d65e:	3401      	adds	r4, #1
 800d660:	3e03      	subs	r6, #3
 800d662:	42b4      	cmp	r4, r6
 800d664:	bf88      	it	hi
 800d666:	2304      	movhi	r3, #4
 800d668:	4443      	add	r3, r8
 800d66a:	2200      	movs	r2, #0
 800d66c:	f843 2b04 	str.w	r2, [r3], #4
 800d670:	429f      	cmp	r7, r3
 800d672:	d2fb      	bcs.n	800d66c <__hexnan+0xcc>
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	b91b      	cbnz	r3, 800d680 <__hexnan+0xe0>
 800d678:	4547      	cmp	r7, r8
 800d67a:	d128      	bne.n	800d6ce <__hexnan+0x12e>
 800d67c:	2301      	movs	r3, #1
 800d67e:	603b      	str	r3, [r7, #0]
 800d680:	2005      	movs	r0, #5
 800d682:	b007      	add	sp, #28
 800d684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d688:	3501      	adds	r5, #1
 800d68a:	2d08      	cmp	r5, #8
 800d68c:	f10b 0b01 	add.w	fp, fp, #1
 800d690:	dd06      	ble.n	800d6a0 <__hexnan+0x100>
 800d692:	4544      	cmp	r4, r8
 800d694:	d9c1      	bls.n	800d61a <__hexnan+0x7a>
 800d696:	2300      	movs	r3, #0
 800d698:	f844 3c04 	str.w	r3, [r4, #-4]
 800d69c:	2501      	movs	r5, #1
 800d69e:	3c04      	subs	r4, #4
 800d6a0:	6822      	ldr	r2, [r4, #0]
 800d6a2:	f000 000f 	and.w	r0, r0, #15
 800d6a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d6aa:	6020      	str	r0, [r4, #0]
 800d6ac:	e7b5      	b.n	800d61a <__hexnan+0x7a>
 800d6ae:	2508      	movs	r5, #8
 800d6b0:	e7b3      	b.n	800d61a <__hexnan+0x7a>
 800d6b2:	9b01      	ldr	r3, [sp, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d0dd      	beq.n	800d674 <__hexnan+0xd4>
 800d6b8:	f1c3 0320 	rsb	r3, r3, #32
 800d6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c0:	40da      	lsrs	r2, r3
 800d6c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d6c6:	4013      	ands	r3, r2
 800d6c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d6cc:	e7d2      	b.n	800d674 <__hexnan+0xd4>
 800d6ce:	3f04      	subs	r7, #4
 800d6d0:	e7d0      	b.n	800d674 <__hexnan+0xd4>
 800d6d2:	2004      	movs	r0, #4
 800d6d4:	e7d5      	b.n	800d682 <__hexnan+0xe2>

0800d6d6 <__ascii_mbtowc>:
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	b901      	cbnz	r1, 800d6dc <__ascii_mbtowc+0x6>
 800d6da:	a901      	add	r1, sp, #4
 800d6dc:	b142      	cbz	r2, 800d6f0 <__ascii_mbtowc+0x1a>
 800d6de:	b14b      	cbz	r3, 800d6f4 <__ascii_mbtowc+0x1e>
 800d6e0:	7813      	ldrb	r3, [r2, #0]
 800d6e2:	600b      	str	r3, [r1, #0]
 800d6e4:	7812      	ldrb	r2, [r2, #0]
 800d6e6:	1e10      	subs	r0, r2, #0
 800d6e8:	bf18      	it	ne
 800d6ea:	2001      	movne	r0, #1
 800d6ec:	b002      	add	sp, #8
 800d6ee:	4770      	bx	lr
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	e7fb      	b.n	800d6ec <__ascii_mbtowc+0x16>
 800d6f4:	f06f 0001 	mvn.w	r0, #1
 800d6f8:	e7f8      	b.n	800d6ec <__ascii_mbtowc+0x16>

0800d6fa <_realloc_r>:
 800d6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fe:	4680      	mov	r8, r0
 800d700:	4615      	mov	r5, r2
 800d702:	460c      	mov	r4, r1
 800d704:	b921      	cbnz	r1, 800d710 <_realloc_r+0x16>
 800d706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d70a:	4611      	mov	r1, r2
 800d70c:	f7fd be3e 	b.w	800b38c <_malloc_r>
 800d710:	b92a      	cbnz	r2, 800d71e <_realloc_r+0x24>
 800d712:	f7fd fdc7 	bl	800b2a4 <_free_r>
 800d716:	2400      	movs	r4, #0
 800d718:	4620      	mov	r0, r4
 800d71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d71e:	f000 f840 	bl	800d7a2 <_malloc_usable_size_r>
 800d722:	4285      	cmp	r5, r0
 800d724:	4606      	mov	r6, r0
 800d726:	d802      	bhi.n	800d72e <_realloc_r+0x34>
 800d728:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d72c:	d8f4      	bhi.n	800d718 <_realloc_r+0x1e>
 800d72e:	4629      	mov	r1, r5
 800d730:	4640      	mov	r0, r8
 800d732:	f7fd fe2b 	bl	800b38c <_malloc_r>
 800d736:	4607      	mov	r7, r0
 800d738:	2800      	cmp	r0, #0
 800d73a:	d0ec      	beq.n	800d716 <_realloc_r+0x1c>
 800d73c:	42b5      	cmp	r5, r6
 800d73e:	462a      	mov	r2, r5
 800d740:	4621      	mov	r1, r4
 800d742:	bf28      	it	cs
 800d744:	4632      	movcs	r2, r6
 800d746:	f7fc ffba 	bl	800a6be <memcpy>
 800d74a:	4621      	mov	r1, r4
 800d74c:	4640      	mov	r0, r8
 800d74e:	f7fd fda9 	bl	800b2a4 <_free_r>
 800d752:	463c      	mov	r4, r7
 800d754:	e7e0      	b.n	800d718 <_realloc_r+0x1e>

0800d756 <__ascii_wctomb>:
 800d756:	4603      	mov	r3, r0
 800d758:	4608      	mov	r0, r1
 800d75a:	b141      	cbz	r1, 800d76e <__ascii_wctomb+0x18>
 800d75c:	2aff      	cmp	r2, #255	@ 0xff
 800d75e:	d904      	bls.n	800d76a <__ascii_wctomb+0x14>
 800d760:	228a      	movs	r2, #138	@ 0x8a
 800d762:	601a      	str	r2, [r3, #0]
 800d764:	f04f 30ff 	mov.w	r0, #4294967295
 800d768:	4770      	bx	lr
 800d76a:	700a      	strb	r2, [r1, #0]
 800d76c:	2001      	movs	r0, #1
 800d76e:	4770      	bx	lr

0800d770 <fiprintf>:
 800d770:	b40e      	push	{r1, r2, r3}
 800d772:	b503      	push	{r0, r1, lr}
 800d774:	4601      	mov	r1, r0
 800d776:	ab03      	add	r3, sp, #12
 800d778:	4805      	ldr	r0, [pc, #20]	@ (800d790 <fiprintf+0x20>)
 800d77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d77e:	6800      	ldr	r0, [r0, #0]
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	f000 f83f 	bl	800d804 <_vfiprintf_r>
 800d786:	b002      	add	sp, #8
 800d788:	f85d eb04 	ldr.w	lr, [sp], #4
 800d78c:	b003      	add	sp, #12
 800d78e:	4770      	bx	lr
 800d790:	2400003c 	.word	0x2400003c

0800d794 <abort>:
 800d794:	b508      	push	{r3, lr}
 800d796:	2006      	movs	r0, #6
 800d798:	f000 f974 	bl	800da84 <raise>
 800d79c:	2001      	movs	r0, #1
 800d79e:	f7f5 f9e4 	bl	8002b6a <_exit>

0800d7a2 <_malloc_usable_size_r>:
 800d7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7a6:	1f18      	subs	r0, r3, #4
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	bfbc      	itt	lt
 800d7ac:	580b      	ldrlt	r3, [r1, r0]
 800d7ae:	18c0      	addlt	r0, r0, r3
 800d7b0:	4770      	bx	lr

0800d7b2 <__sfputc_r>:
 800d7b2:	6893      	ldr	r3, [r2, #8]
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	b410      	push	{r4}
 800d7ba:	6093      	str	r3, [r2, #8]
 800d7bc:	da08      	bge.n	800d7d0 <__sfputc_r+0x1e>
 800d7be:	6994      	ldr	r4, [r2, #24]
 800d7c0:	42a3      	cmp	r3, r4
 800d7c2:	db01      	blt.n	800d7c8 <__sfputc_r+0x16>
 800d7c4:	290a      	cmp	r1, #10
 800d7c6:	d103      	bne.n	800d7d0 <__sfputc_r+0x1e>
 800d7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7cc:	f7fc be63 	b.w	800a496 <__swbuf_r>
 800d7d0:	6813      	ldr	r3, [r2, #0]
 800d7d2:	1c58      	adds	r0, r3, #1
 800d7d4:	6010      	str	r0, [r2, #0]
 800d7d6:	7019      	strb	r1, [r3, #0]
 800d7d8:	4608      	mov	r0, r1
 800d7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <__sfputs_r>:
 800d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	4614      	mov	r4, r2
 800d7e8:	18d5      	adds	r5, r2, r3
 800d7ea:	42ac      	cmp	r4, r5
 800d7ec:	d101      	bne.n	800d7f2 <__sfputs_r+0x12>
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	e007      	b.n	800d802 <__sfputs_r+0x22>
 800d7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f6:	463a      	mov	r2, r7
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f7ff ffda 	bl	800d7b2 <__sfputc_r>
 800d7fe:	1c43      	adds	r3, r0, #1
 800d800:	d1f3      	bne.n	800d7ea <__sfputs_r+0xa>
 800d802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d804 <_vfiprintf_r>:
 800d804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d808:	460d      	mov	r5, r1
 800d80a:	b09d      	sub	sp, #116	@ 0x74
 800d80c:	4614      	mov	r4, r2
 800d80e:	4698      	mov	r8, r3
 800d810:	4606      	mov	r6, r0
 800d812:	b118      	cbz	r0, 800d81c <_vfiprintf_r+0x18>
 800d814:	6a03      	ldr	r3, [r0, #32]
 800d816:	b90b      	cbnz	r3, 800d81c <_vfiprintf_r+0x18>
 800d818:	f7fc fd12 	bl	800a240 <__sinit>
 800d81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d81e:	07d9      	lsls	r1, r3, #31
 800d820:	d405      	bmi.n	800d82e <_vfiprintf_r+0x2a>
 800d822:	89ab      	ldrh	r3, [r5, #12]
 800d824:	059a      	lsls	r2, r3, #22
 800d826:	d402      	bmi.n	800d82e <_vfiprintf_r+0x2a>
 800d828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d82a:	f7fc ff46 	bl	800a6ba <__retarget_lock_acquire_recursive>
 800d82e:	89ab      	ldrh	r3, [r5, #12]
 800d830:	071b      	lsls	r3, r3, #28
 800d832:	d501      	bpl.n	800d838 <_vfiprintf_r+0x34>
 800d834:	692b      	ldr	r3, [r5, #16]
 800d836:	b99b      	cbnz	r3, 800d860 <_vfiprintf_r+0x5c>
 800d838:	4629      	mov	r1, r5
 800d83a:	4630      	mov	r0, r6
 800d83c:	f7fc fe6a 	bl	800a514 <__swsetup_r>
 800d840:	b170      	cbz	r0, 800d860 <_vfiprintf_r+0x5c>
 800d842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d844:	07dc      	lsls	r4, r3, #31
 800d846:	d504      	bpl.n	800d852 <_vfiprintf_r+0x4e>
 800d848:	f04f 30ff 	mov.w	r0, #4294967295
 800d84c:	b01d      	add	sp, #116	@ 0x74
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	89ab      	ldrh	r3, [r5, #12]
 800d854:	0598      	lsls	r0, r3, #22
 800d856:	d4f7      	bmi.n	800d848 <_vfiprintf_r+0x44>
 800d858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d85a:	f7fc ff2f 	bl	800a6bc <__retarget_lock_release_recursive>
 800d85e:	e7f3      	b.n	800d848 <_vfiprintf_r+0x44>
 800d860:	2300      	movs	r3, #0
 800d862:	9309      	str	r3, [sp, #36]	@ 0x24
 800d864:	2320      	movs	r3, #32
 800d866:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d86e:	2330      	movs	r3, #48	@ 0x30
 800d870:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800da20 <_vfiprintf_r+0x21c>
 800d874:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d878:	f04f 0901 	mov.w	r9, #1
 800d87c:	4623      	mov	r3, r4
 800d87e:	469a      	mov	sl, r3
 800d880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d884:	b10a      	cbz	r2, 800d88a <_vfiprintf_r+0x86>
 800d886:	2a25      	cmp	r2, #37	@ 0x25
 800d888:	d1f9      	bne.n	800d87e <_vfiprintf_r+0x7a>
 800d88a:	ebba 0b04 	subs.w	fp, sl, r4
 800d88e:	d00b      	beq.n	800d8a8 <_vfiprintf_r+0xa4>
 800d890:	465b      	mov	r3, fp
 800d892:	4622      	mov	r2, r4
 800d894:	4629      	mov	r1, r5
 800d896:	4630      	mov	r0, r6
 800d898:	f7ff ffa2 	bl	800d7e0 <__sfputs_r>
 800d89c:	3001      	adds	r0, #1
 800d89e:	f000 80a7 	beq.w	800d9f0 <_vfiprintf_r+0x1ec>
 800d8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8a4:	445a      	add	r2, fp
 800d8a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 809f 	beq.w	800d9f0 <_vfiprintf_r+0x1ec>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8bc:	f10a 0a01 	add.w	sl, sl, #1
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	9307      	str	r3, [sp, #28]
 800d8c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8ca:	4654      	mov	r4, sl
 800d8cc:	2205      	movs	r2, #5
 800d8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8d2:	4853      	ldr	r0, [pc, #332]	@ (800da20 <_vfiprintf_r+0x21c>)
 800d8d4:	f7f2 fd04 	bl	80002e0 <memchr>
 800d8d8:	9a04      	ldr	r2, [sp, #16]
 800d8da:	b9d8      	cbnz	r0, 800d914 <_vfiprintf_r+0x110>
 800d8dc:	06d1      	lsls	r1, r2, #27
 800d8de:	bf44      	itt	mi
 800d8e0:	2320      	movmi	r3, #32
 800d8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8e6:	0713      	lsls	r3, r2, #28
 800d8e8:	bf44      	itt	mi
 800d8ea:	232b      	movmi	r3, #43	@ 0x2b
 800d8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8f6:	d015      	beq.n	800d924 <_vfiprintf_r+0x120>
 800d8f8:	9a07      	ldr	r2, [sp, #28]
 800d8fa:	4654      	mov	r4, sl
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	f04f 0c0a 	mov.w	ip, #10
 800d902:	4621      	mov	r1, r4
 800d904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d908:	3b30      	subs	r3, #48	@ 0x30
 800d90a:	2b09      	cmp	r3, #9
 800d90c:	d94b      	bls.n	800d9a6 <_vfiprintf_r+0x1a2>
 800d90e:	b1b0      	cbz	r0, 800d93e <_vfiprintf_r+0x13a>
 800d910:	9207      	str	r2, [sp, #28]
 800d912:	e014      	b.n	800d93e <_vfiprintf_r+0x13a>
 800d914:	eba0 0308 	sub.w	r3, r0, r8
 800d918:	fa09 f303 	lsl.w	r3, r9, r3
 800d91c:	4313      	orrs	r3, r2
 800d91e:	9304      	str	r3, [sp, #16]
 800d920:	46a2      	mov	sl, r4
 800d922:	e7d2      	b.n	800d8ca <_vfiprintf_r+0xc6>
 800d924:	9b03      	ldr	r3, [sp, #12]
 800d926:	1d19      	adds	r1, r3, #4
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	9103      	str	r1, [sp, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	bfbb      	ittet	lt
 800d930:	425b      	neglt	r3, r3
 800d932:	f042 0202 	orrlt.w	r2, r2, #2
 800d936:	9307      	strge	r3, [sp, #28]
 800d938:	9307      	strlt	r3, [sp, #28]
 800d93a:	bfb8      	it	lt
 800d93c:	9204      	strlt	r2, [sp, #16]
 800d93e:	7823      	ldrb	r3, [r4, #0]
 800d940:	2b2e      	cmp	r3, #46	@ 0x2e
 800d942:	d10a      	bne.n	800d95a <_vfiprintf_r+0x156>
 800d944:	7863      	ldrb	r3, [r4, #1]
 800d946:	2b2a      	cmp	r3, #42	@ 0x2a
 800d948:	d132      	bne.n	800d9b0 <_vfiprintf_r+0x1ac>
 800d94a:	9b03      	ldr	r3, [sp, #12]
 800d94c:	1d1a      	adds	r2, r3, #4
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	9203      	str	r2, [sp, #12]
 800d952:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d956:	3402      	adds	r4, #2
 800d958:	9305      	str	r3, [sp, #20]
 800d95a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800da30 <_vfiprintf_r+0x22c>
 800d95e:	7821      	ldrb	r1, [r4, #0]
 800d960:	2203      	movs	r2, #3
 800d962:	4650      	mov	r0, sl
 800d964:	f7f2 fcbc 	bl	80002e0 <memchr>
 800d968:	b138      	cbz	r0, 800d97a <_vfiprintf_r+0x176>
 800d96a:	9b04      	ldr	r3, [sp, #16]
 800d96c:	eba0 000a 	sub.w	r0, r0, sl
 800d970:	2240      	movs	r2, #64	@ 0x40
 800d972:	4082      	lsls	r2, r0
 800d974:	4313      	orrs	r3, r2
 800d976:	3401      	adds	r4, #1
 800d978:	9304      	str	r3, [sp, #16]
 800d97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d97e:	4829      	ldr	r0, [pc, #164]	@ (800da24 <_vfiprintf_r+0x220>)
 800d980:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d984:	2206      	movs	r2, #6
 800d986:	f7f2 fcab 	bl	80002e0 <memchr>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d03f      	beq.n	800da0e <_vfiprintf_r+0x20a>
 800d98e:	4b26      	ldr	r3, [pc, #152]	@ (800da28 <_vfiprintf_r+0x224>)
 800d990:	bb1b      	cbnz	r3, 800d9da <_vfiprintf_r+0x1d6>
 800d992:	9b03      	ldr	r3, [sp, #12]
 800d994:	3307      	adds	r3, #7
 800d996:	f023 0307 	bic.w	r3, r3, #7
 800d99a:	3308      	adds	r3, #8
 800d99c:	9303      	str	r3, [sp, #12]
 800d99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a0:	443b      	add	r3, r7
 800d9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9a4:	e76a      	b.n	800d87c <_vfiprintf_r+0x78>
 800d9a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	e7a8      	b.n	800d902 <_vfiprintf_r+0xfe>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	3401      	adds	r4, #1
 800d9b4:	9305      	str	r3, [sp, #20]
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	f04f 0c0a 	mov.w	ip, #10
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9c2:	3a30      	subs	r2, #48	@ 0x30
 800d9c4:	2a09      	cmp	r2, #9
 800d9c6:	d903      	bls.n	800d9d0 <_vfiprintf_r+0x1cc>
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0c6      	beq.n	800d95a <_vfiprintf_r+0x156>
 800d9cc:	9105      	str	r1, [sp, #20]
 800d9ce:	e7c4      	b.n	800d95a <_vfiprintf_r+0x156>
 800d9d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e7f0      	b.n	800d9bc <_vfiprintf_r+0x1b8>
 800d9da:	ab03      	add	r3, sp, #12
 800d9dc:	9300      	str	r3, [sp, #0]
 800d9de:	462a      	mov	r2, r5
 800d9e0:	4b12      	ldr	r3, [pc, #72]	@ (800da2c <_vfiprintf_r+0x228>)
 800d9e2:	a904      	add	r1, sp, #16
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f7fb fdeb 	bl	80095c0 <_printf_float>
 800d9ea:	4607      	mov	r7, r0
 800d9ec:	1c78      	adds	r0, r7, #1
 800d9ee:	d1d6      	bne.n	800d99e <_vfiprintf_r+0x19a>
 800d9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9f2:	07d9      	lsls	r1, r3, #31
 800d9f4:	d405      	bmi.n	800da02 <_vfiprintf_r+0x1fe>
 800d9f6:	89ab      	ldrh	r3, [r5, #12]
 800d9f8:	059a      	lsls	r2, r3, #22
 800d9fa:	d402      	bmi.n	800da02 <_vfiprintf_r+0x1fe>
 800d9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9fe:	f7fc fe5d 	bl	800a6bc <__retarget_lock_release_recursive>
 800da02:	89ab      	ldrh	r3, [r5, #12]
 800da04:	065b      	lsls	r3, r3, #25
 800da06:	f53f af1f 	bmi.w	800d848 <_vfiprintf_r+0x44>
 800da0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da0c:	e71e      	b.n	800d84c <_vfiprintf_r+0x48>
 800da0e:	ab03      	add	r3, sp, #12
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	462a      	mov	r2, r5
 800da14:	4b05      	ldr	r3, [pc, #20]	@ (800da2c <_vfiprintf_r+0x228>)
 800da16:	a904      	add	r1, sp, #16
 800da18:	4630      	mov	r0, r6
 800da1a:	f7fc f859 	bl	8009ad0 <_printf_i>
 800da1e:	e7e4      	b.n	800d9ea <_vfiprintf_r+0x1e6>
 800da20:	0800e4e1 	.word	0x0800e4e1
 800da24:	0800e4eb 	.word	0x0800e4eb
 800da28:	080095c1 	.word	0x080095c1
 800da2c:	0800d7e1 	.word	0x0800d7e1
 800da30:	0800e4e7 	.word	0x0800e4e7

0800da34 <_raise_r>:
 800da34:	291f      	cmp	r1, #31
 800da36:	b538      	push	{r3, r4, r5, lr}
 800da38:	4605      	mov	r5, r0
 800da3a:	460c      	mov	r4, r1
 800da3c:	d904      	bls.n	800da48 <_raise_r+0x14>
 800da3e:	2316      	movs	r3, #22
 800da40:	6003      	str	r3, [r0, #0]
 800da42:	f04f 30ff 	mov.w	r0, #4294967295
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da4a:	b112      	cbz	r2, 800da52 <_raise_r+0x1e>
 800da4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da50:	b94b      	cbnz	r3, 800da66 <_raise_r+0x32>
 800da52:	4628      	mov	r0, r5
 800da54:	f000 f830 	bl	800dab8 <_getpid_r>
 800da58:	4622      	mov	r2, r4
 800da5a:	4601      	mov	r1, r0
 800da5c:	4628      	mov	r0, r5
 800da5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da62:	f000 b817 	b.w	800da94 <_kill_r>
 800da66:	2b01      	cmp	r3, #1
 800da68:	d00a      	beq.n	800da80 <_raise_r+0x4c>
 800da6a:	1c59      	adds	r1, r3, #1
 800da6c:	d103      	bne.n	800da76 <_raise_r+0x42>
 800da6e:	2316      	movs	r3, #22
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	2001      	movs	r0, #1
 800da74:	e7e7      	b.n	800da46 <_raise_r+0x12>
 800da76:	2100      	movs	r1, #0
 800da78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da7c:	4620      	mov	r0, r4
 800da7e:	4798      	blx	r3
 800da80:	2000      	movs	r0, #0
 800da82:	e7e0      	b.n	800da46 <_raise_r+0x12>

0800da84 <raise>:
 800da84:	4b02      	ldr	r3, [pc, #8]	@ (800da90 <raise+0xc>)
 800da86:	4601      	mov	r1, r0
 800da88:	6818      	ldr	r0, [r3, #0]
 800da8a:	f7ff bfd3 	b.w	800da34 <_raise_r>
 800da8e:	bf00      	nop
 800da90:	2400003c 	.word	0x2400003c

0800da94 <_kill_r>:
 800da94:	b538      	push	{r3, r4, r5, lr}
 800da96:	4d07      	ldr	r5, [pc, #28]	@ (800dab4 <_kill_r+0x20>)
 800da98:	2300      	movs	r3, #0
 800da9a:	4604      	mov	r4, r0
 800da9c:	4608      	mov	r0, r1
 800da9e:	4611      	mov	r1, r2
 800daa0:	602b      	str	r3, [r5, #0]
 800daa2:	f7f5 f852 	bl	8002b4a <_kill>
 800daa6:	1c43      	adds	r3, r0, #1
 800daa8:	d102      	bne.n	800dab0 <_kill_r+0x1c>
 800daaa:	682b      	ldr	r3, [r5, #0]
 800daac:	b103      	cbz	r3, 800dab0 <_kill_r+0x1c>
 800daae:	6023      	str	r3, [r4, #0]
 800dab0:	bd38      	pop	{r3, r4, r5, pc}
 800dab2:	bf00      	nop
 800dab4:	24000714 	.word	0x24000714

0800dab8 <_getpid_r>:
 800dab8:	f7f5 b83f 	b.w	8002b3a <_getpid>

0800dabc <_init>:
 800dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabe:	bf00      	nop
 800dac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dac2:	bc08      	pop	{r3}
 800dac4:	469e      	mov	lr, r3
 800dac6:	4770      	bx	lr

0800dac8 <_fini>:
 800dac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daca:	bf00      	nop
 800dacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dace:	bc08      	pop	{r3}
 800dad0:	469e      	mov	lr, r3
 800dad2:	4770      	bx	lr
