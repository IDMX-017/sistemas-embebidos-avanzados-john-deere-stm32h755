
STM32H755_ARM_CONTROL_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c318  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f78  0800c5b8  0800c5b8  0000d5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d530  0800d530  0000f1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d530  0800d530  0000e530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d538  0800d538  0000f1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d538  0800d538  0000e538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d53c  0800d53c  0000e53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  24000000  0800d540  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  240001fc  0800d73c  0000f1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240004d0  0800d73c  0000f4d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001584a  00000000  00000000  0000f22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d1  00000000  00000000  00024a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00027448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb3  00000000  00000000  00028508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b906  00000000  00000000  000291bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016356  00000000  00000000  00064ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189504  00000000  00000000  0007ae17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0020431b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bcc  00000000  00000000  002043d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  00209f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000020  00000000  00000000  0020a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000000d8  00000000  00000000  0020a05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001fc 	.word	0x240001fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c5a0 	.word	0x0800c5a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000200 	.word	0x24000200
 80002dc:	0800c5a0 	.word	0x0800c5a0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000
 8000b94:	00000000 	.word	0x00000000

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	ed2d 8b04 	vpush	{d8-d9}
 8000b9e:	b098      	sub	sp, #96	@ 0x60
 8000ba0:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ba2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ba8:	bf00      	nop
 8000baa:	4b97      	ldr	r3, [pc, #604]	@ (8000e08 <main+0x270>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <main+0x28>
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dcf4      	bgt.n	8000baa <main+0x12>
  if ( timeout < 0 )
 8000bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da01      	bge.n	8000bca <main+0x32>
  {
  Error_Handler();
 8000bc6:	f000 fb69 	bl	800129c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bca:	f001 f895 	bl	8001cf8 <HAL_Init>

  /* USER CODE BEGIN Init */
  //Servo_Init(htim13);
  //Motor_Init(htim14);
  PID_Init(&pid_delta, 0.5f, 0.05f, 0.001f);
 8000bce:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 8000e0c <main+0x274>
 8000bd2:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8000e10 <main+0x278>
 8000bd6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8000bda:	488e      	ldr	r0, [pc, #568]	@ (8000e14 <main+0x27c>)
 8000bdc:	f000 fc38 	bl	8001450 <PID_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f934 	bl	8000e4c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000be4:	4b88      	ldr	r3, [pc, #544]	@ (8000e08 <main+0x270>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	4a87      	ldr	r2, [pc, #540]	@ (8000e08 <main+0x270>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf4:	4b84      	ldr	r3, [pc, #528]	@ (8000e08 <main+0x270>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f001 fbce 	bl	80023a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f001 fbe4 	bl	80023d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c16:	bf00      	nop
 8000c18:	4b7b      	ldr	r3, [pc, #492]	@ (8000e08 <main+0x270>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d104      	bne.n	8000c2e <main+0x96>
 8000c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	dcf4      	bgt.n	8000c18 <main+0x80>
if ( timeout < 0 )
 8000c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	da01      	bge.n	8000c38 <main+0xa0>
{
Error_Handler();
 8000c34:	f000 fb32 	bl	800129c <Error_Handler>

  /* USER CODE BEGIN SysInit */
	arm_pid_instance_f32 pid;

	// Inicialización
	pid.Kp = 1.0f;  // Ganancia proporcional
 8000c38:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pid.Ki = 0.5f;  // Ganancia integral
 8000c3e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pid.Kd = 0.01f; // Ganancia derivativa
 8000c44:	4b74      	ldr	r3, [pc, #464]	@ (8000e18 <main+0x280>)
 8000c46:	633b      	str	r3, [r7, #48]	@ 0x30

	// Llamar a la función de inicialización
	arm_pid_init_f32(&pid, 1);  // 1: reset del estado interno del PID
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f006 f8f4 	bl	8006e3c <arm_pid_init_f32>

	float32_t setpoint_angle = 45.0f; // Ángulo deseado
 8000c54:	4b71      	ldr	r3, [pc, #452]	@ (8000e1c <main+0x284>)
 8000c56:	647b      	str	r3, [r7, #68]	@ 0x44
	float32_t current_angle = 0.0f;   // Ángulo inicial
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	643b      	str	r3, [r7, #64]	@ 0x40
	float32_t pid_output = 0.0f;      // Salida del PID
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float32_t dt = 0.1f;              // Intervalo de tiempo (100 ms)
 8000c64:	4b6e      	ldr	r3, [pc, #440]	@ (8000e20 <main+0x288>)
 8000c66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c68:	f000 fa52 	bl	8001110 <MX_GPIO_Init>
  MX_TIM13_Init();
 8000c6c:	f000 f968 	bl	8000f40 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000c70:	f000 f9b4 	bl	8000fdc <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8000c74:	f000 fa00 	bl	8001078 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  float32_t delton = 0.0f;
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  float32_t velocidad = 0.0f;
 8000c7e:	f04f 0300 	mov.w	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  float32_t pid_control = 0.0f;
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
	  }
	  */

	  //HAL_Delay(100);
	  // Simulación
	  for (int i = 0; i < 50; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c8e:	e0b1      	b.n	8000df4 <main+0x25c>
		  printf("Iteración %d\n", i);
 8000c90:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000c92:	4864      	ldr	r0, [pc, #400]	@ (8000e24 <main+0x28c>)
 8000c94:	f007 f842 	bl	8007d1c <iprintf>

		  // Calcular el ángulo y la velocidad deseada usando PURE_PURSUIT
		  PURE_PURSUIT(&StateRobot, &delton, &velocidad, &trayectory);
 8000c98:	f107 0208 	add.w	r2, r7, #8
 8000c9c:	f107 010c 	add.w	r1, r7, #12
 8000ca0:	4b61      	ldr	r3, [pc, #388]	@ (8000e28 <main+0x290>)
 8000ca2:	4862      	ldr	r0, [pc, #392]	@ (8000e2c <main+0x294>)
 8000ca4:	f000 fc44 	bl	8001530 <PURE_PURSUIT>

		  // Calcular la señal de control del PID
		  pid_control = PID_Angle(&pid_delta, delton, StateRobot.delta);
 8000ca8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cac:	4b5f      	ldr	r3, [pc, #380]	@ (8000e2c <main+0x294>)
 8000cae:	ed93 7a03 	vldr	s14, [r3, #12]
 8000cb2:	eef0 0a47 	vmov.f32	s1, s14
 8000cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cba:	4856      	ldr	r0, [pc, #344]	@ (8000e14 <main+0x27c>)
 8000cbc:	f000 fbe3 	bl	8001486 <PID_Angle>
 8000cc0:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		  // Imprimir valores
		  printf("Posición actual del robot: (%.2f, %.2f, %.2f°)\n\r",
				 StateRobot.x, StateRobot.y, StateRobot.theta * RAD_TO_DEG);
 8000cc4:	4b59      	ldr	r3, [pc, #356]	@ (8000e2c <main+0x294>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
		  printf("Posición actual del robot: (%.2f, %.2f, %.2f°)\n\r",
 8000cca:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				 StateRobot.x, StateRobot.y, StateRobot.theta * RAD_TO_DEG);
 8000cce:	4b57      	ldr	r3, [pc, #348]	@ (8000e2c <main+0x294>)
 8000cd0:	edd3 7a01 	vldr	s15, [r3, #4]
		  printf("Posición actual del robot: (%.2f, %.2f, %.2f°)\n\r",
 8000cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				 StateRobot.x, StateRobot.y, StateRobot.theta * RAD_TO_DEG);
 8000cd8:	4b54      	ldr	r3, [pc, #336]	@ (8000e2c <main+0x294>)
 8000cda:	edd3 6a02 	vldr	s13, [r3, #8]
 8000cde:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 8000e30 <main+0x298>
 8000ce2:	ee66 6a86 	vmul.f32	s13, s13, s12
		  printf("Posición actual del robot: (%.2f, %.2f, %.2f°)\n\r",
 8000ce6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000cea:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000cee:	ed8d 7b00 	vstr	d7, [sp]
 8000cf2:	ec53 2b15 	vmov	r2, r3, d5
 8000cf6:	484f      	ldr	r0, [pc, #316]	@ (8000e34 <main+0x29c>)
 8000cf8:	f007 f810 	bl	8007d1c <iprintf>
		  printf("Ángulo deseado hacia el waypoint: %.2f°\n\r", delton * RAD_TO_DEG);
 8000cfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d00:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000e30 <main+0x298>
 8000d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d0c:	ec53 2b17 	vmov	r2, r3, d7
 8000d10:	4849      	ldr	r0, [pc, #292]	@ (8000e38 <main+0x2a0>)
 8000d12:	f007 f803 	bl	8007d1c <iprintf>
		  printf("Señal de control del PID: %.2f\n\r", pid_control);
 8000d16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d1e:	ec53 2b17 	vmov	r2, r3, d7
 8000d22:	4846      	ldr	r0, [pc, #280]	@ (8000e3c <main+0x2a4>)
 8000d24:	f006 fffa 	bl	8007d1c <iprintf>
		  printf("Velocidad lineal deseada: %.2f m/s\n\r", velocidad);
 8000d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d30:	ec53 2b17 	vmov	r2, r3, d7
 8000d34:	4842      	ldr	r0, [pc, #264]	@ (8000e40 <main+0x2a8>)
 8000d36:	f006 fff1 	bl	8007d1c <iprintf>

		  // Actualizar el estado del robot (simulación física básica)
		  StateRobot.delta = pid_control;
 8000d3a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e2c <main+0x294>)
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d3e:	60d3      	str	r3, [r2, #12]
		  StateRobot.theta += StateRobot.delta * 0.1f;  // Cambio de orientación basado en delta
 8000d40:	4b3a      	ldr	r3, [pc, #232]	@ (8000e2c <main+0x294>)
 8000d42:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d46:	4b39      	ldr	r3, [pc, #228]	@ (8000e2c <main+0x294>)
 8000d48:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d4c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8000e44 <main+0x2ac>
 8000d50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d58:	4b34      	ldr	r3, [pc, #208]	@ (8000e2c <main+0x294>)
 8000d5a:	edc3 7a02 	vstr	s15, [r3, #8]
		  StateRobot.x += velocidad * cos(StateRobot.theta) * 0.1f; // Movimiento en X
 8000d5e:	4b33      	ldr	r3, [pc, #204]	@ (8000e2c <main+0x294>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000d68:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d6c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000d70:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <main+0x294>)
 8000d72:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7a:	eeb0 0b47 	vmov.f64	d0, d7
 8000d7e:	f00a fc57 	bl	800b630 <cos>
 8000d82:	eeb0 7b40 	vmov.f64	d7, d0
 8000d86:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000d8a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8000e00 <main+0x268>
 8000d8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d92:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000d96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d9a:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <main+0x294>)
 8000d9c:	edc3 7a00 	vstr	s15, [r3]
		  StateRobot.y += velocidad * sin(StateRobot.theta) * 0.1f; // Movimiento en Y
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <main+0x294>)
 8000da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000da6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dae:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000db2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <main+0x294>)
 8000db4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000db8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dbc:	eeb0 0b47 	vmov.f64	d0, d7
 8000dc0:	f00a fc8a 	bl	800b6d8 <sin>
 8000dc4:	eeb0 7b40 	vmov.f64	d7, d0
 8000dc8:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000dcc:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8000e00 <main+0x268>
 8000dd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dd4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000dd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <main+0x294>)
 8000dde:	edc3 7a01 	vstr	s15, [r3, #4]

		  // Pausa entre iteraciones (si fuera en hardware)
		  HAL_Delay(10);
 8000de2:	200a      	movs	r0, #10
 8000de4:	f001 f81a 	bl	8001e1c <HAL_Delay>
		  printf("\n\r");
 8000de8:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <main+0x2b0>)
 8000dea:	f006 ff97 	bl	8007d1c <iprintf>
	  for (int i = 0; i < 50; i++) {
 8000dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000df0:	3301      	adds	r3, #1
 8000df2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000df6:	2b31      	cmp	r3, #49	@ 0x31
 8000df8:	f77f af4a 	ble.w	8000c90 <main+0xf8>
 8000dfc:	e745      	b.n	8000c8a <main+0xf2>
 8000dfe:	bf00      	nop
 8000e00:	a0000000 	.word	0xa0000000
 8000e04:	3fb99999 	.word	0x3fb99999
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	3a83126f 	.word	0x3a83126f
 8000e10:	3d4ccccd 	.word	0x3d4ccccd
 8000e14:	24000358 	.word	0x24000358
 8000e18:	3c23d70a 	.word	0x3c23d70a
 8000e1c:	42340000 	.word	0x42340000
 8000e20:	3dcccccd 	.word	0x3dcccccd
 8000e24:	0800c5b8 	.word	0x0800c5b8
 8000e28:	24000020 	.word	0x24000020
 8000e2c:	24000344 	.word	0x24000344
 8000e30:	42652ee1 	.word	0x42652ee1
 8000e34:	0800c5c8 	.word	0x0800c5c8
 8000e38:	0800c5fc 	.word	0x0800c5fc
 8000e3c:	0800c628 	.word	0x0800c628
 8000e40:	0800c64c 	.word	0x0800c64c
 8000e44:	3dcccccd 	.word	0x3dcccccd
 8000e48:	0800c674 	.word	0x0800c674

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b09c      	sub	sp, #112	@ 0x70
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	224c      	movs	r2, #76	@ 0x4c
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f006 ffd3 	bl	8007e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2220      	movs	r2, #32
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 ffcd 	bl	8007e06 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f001 fac7 	bl	8002400 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b30      	ldr	r3, [pc, #192]	@ (8000f38 <SystemClock_Config+0xec>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f38 <SystemClock_Config+0xec>)
 8000e7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <SystemClock_Config+0xec>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <SystemClock_Config+0xf0>)
 8000e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e90:	4a2a      	ldr	r2, [pc, #168]	@ (8000f3c <SystemClock_Config+0xf0>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e98:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <SystemClock_Config+0xf0>)
 8000e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea4:	bf00      	nop
 8000ea6:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <SystemClock_Config+0xec>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb2:	d1f8      	bne.n	8000ea6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000eca:	23f0      	movs	r3, #240	@ 0xf0
 8000ecc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000eda:	2308      	movs	r3, #8
 8000edc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fae2 	bl	80024b4 <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ef6:	f000 f9d1 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	233f      	movs	r3, #63	@ 0x3f
 8000efc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2303      	movs	r3, #3
 8000f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f06:	2308      	movs	r3, #8
 8000f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f0a:	2340      	movs	r3, #64	@ 0x40
 8000f0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f0e:	2340      	movs	r3, #64	@ 0x40
 8000f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f18:	2340      	movs	r3, #64	@ 0x40
 8000f1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2104      	movs	r1, #4
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 ff21 	bl	8002d68 <HAL_RCC_ClockConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000f2c:	f000 f9b6 	bl	800129c <Error_Handler>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3770      	adds	r7, #112	@ 0x70
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024800 	.word	0x58024800
 8000f3c:	58000400 	.word	0x58000400

08000f40 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd8 <MX_TIM13_Init+0x98>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000f60:	22ef      	movs	r2, #239	@ 0xef
 8000f62:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000f6c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f70:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000f7e:	4815      	ldr	r0, [pc, #84]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000f80:	f004 f8aa 	bl	80050d8 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000f8a:	f000 f987 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000f90:	f004 f8f9 	bl	8005186 <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000f9a:	f000 f97f 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9e:	2360      	movs	r3, #96	@ 0x60
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4807      	ldr	r0, [pc, #28]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000fb6:	f004 f947 	bl	8005248 <HAL_TIM_PWM_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000fc0:	f000 f96c 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <MX_TIM13_Init+0x94>)
 8000fc6:	f000 fca9 	bl	800191c <HAL_TIM_MspPostInit>

}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	24000218 	.word	0x24000218
 8000fd8:	40001c00 	.word	0x40001c00

08000fdc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <MX_TIM14_Init+0x94>)
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8001074 <MX_TIM14_Init+0x98>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <MX_TIM14_Init+0x94>)
 8000ffc:	22ef      	movs	r2, #239	@ 0xef
 8000ffe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_TIM14_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <MX_TIM14_Init+0x94>)
 8001008:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800100c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <MX_TIM14_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <MX_TIM14_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800101a:	4815      	ldr	r0, [pc, #84]	@ (8001070 <MX_TIM14_Init+0x94>)
 800101c:	f004 f85c 	bl	80050d8 <HAL_TIM_Base_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001026:	f000 f939 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <MX_TIM14_Init+0x94>)
 800102c:	f004 f8ab 	bl	8005186 <HAL_TIM_PWM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001036:	f000 f931 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103a:	2360      	movs	r3, #96	@ 0x60
 800103c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	4619      	mov	r1, r3
 8001050:	4807      	ldr	r0, [pc, #28]	@ (8001070 <MX_TIM14_Init+0x94>)
 8001052:	f004 f8f9 	bl	8005248 <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800105c:	f000 f91e 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <MX_TIM14_Init+0x94>)
 8001062:	f000 fc5b 	bl	800191c <HAL_TIM_MspPostInit>

}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	24000264 	.word	0x24000264
 8001074:	40002000 	.word	0x40002000

08001078 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 800107e:	4a23      	ldr	r2, [pc, #140]	@ (800110c <MX_USART3_UART_Init+0x94>)
 8001080:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c0:	4811      	ldr	r0, [pc, #68]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010c2:	f004 fd51 	bl	8005b68 <HAL_UART_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010cc:	f000 f8e6 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	480d      	ldr	r0, [pc, #52]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010d4:	f005 fde7 	bl	8006ca6 <HAL_UARTEx_SetTxFifoThreshold>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010de:	f000 f8dd 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4808      	ldr	r0, [pc, #32]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010e6:	f005 fe1c 	bl	8006d22 <HAL_UARTEx_SetRxFifoThreshold>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010f0:	f000 f8d4 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	@ (8001108 <MX_USART3_UART_Init+0x90>)
 80010f6:	f005 fd9d 	bl	8006c34 <HAL_UARTEx_DisableFifoMode>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001100:	f000 f8cc 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	240002b0 	.word	0x240002b0
 800110c:	40004800 	.word	0x40004800

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	@ 0x30
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001126:	4b58      	ldr	r3, [pc, #352]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112c:	4a56      	ldr	r2, [pc, #344]	@ (8001288 <MX_GPIO_Init+0x178>)
 800112e:	f043 0320 	orr.w	r3, r3, #32
 8001132:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001136:	4b54      	ldr	r3, [pc, #336]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b50      	ldr	r3, [pc, #320]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114a:	4a4f      	ldr	r2, [pc, #316]	@ (8001288 <MX_GPIO_Init+0x178>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001154:	4b4c      	ldr	r3, [pc, #304]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b49      	ldr	r3, [pc, #292]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001168:	4a47      	ldr	r2, [pc, #284]	@ (8001288 <MX_GPIO_Init+0x178>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001172:	4b45      	ldr	r3, [pc, #276]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b41      	ldr	r3, [pc, #260]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	4a40      	ldr	r2, [pc, #256]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001190:	4b3d      	ldr	r3, [pc, #244]	@ (8001288 <MX_GPIO_Init+0x178>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	4b3a      	ldr	r3, [pc, #232]	@ (8001288 <MX_GPIO_Init+0x178>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a4:	4a38      	ldr	r2, [pc, #224]	@ (8001288 <MX_GPIO_Init+0x178>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ae:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <MX_GPIO_Init+0x178>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011bc:	4b32      	ldr	r3, [pc, #200]	@ (8001288 <MX_GPIO_Init+0x178>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c2:	4a31      	ldr	r2, [pc, #196]	@ (8001288 <MX_GPIO_Init+0x178>)
 80011c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <MX_GPIO_Init+0x178>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80011da:	2332      	movs	r3, #50	@ 0x32
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ea:	230b      	movs	r3, #11
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4825      	ldr	r0, [pc, #148]	@ (800128c <MX_GPIO_Init+0x17c>)
 80011f6:	f000 ff25 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80011fa:	2386      	movs	r3, #134	@ 0x86
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120a:	230b      	movs	r3, #11
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	481e      	ldr	r0, [pc, #120]	@ (8001290 <MX_GPIO_Init+0x180>)
 8001216:	f000 ff15 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800121a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800122c:	230b      	movs	r3, #11
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4817      	ldr	r0, [pc, #92]	@ (8001294 <MX_GPIO_Init+0x184>)
 8001238:	f000 ff04 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800123c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800124e:	230a      	movs	r3, #10
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <MX_GPIO_Init+0x180>)
 800125a:	f000 fef3 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800125e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001270:	230b      	movs	r3, #11
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4807      	ldr	r0, [pc, #28]	@ (8001298 <MX_GPIO_Init+0x188>)
 800127c:	f000 fee2 	bl	8002044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001280:	bf00      	nop
 8001282:	3730      	adds	r7, #48	@ 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	58024400 	.word	0x58024400
 800128c:	58020800 	.word	0x58020800
 8001290:	58020000 	.word	0x58020000
 8001294:	58020400 	.word	0x58020400
 8001298:	58021800 	.word	0x58021800

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012b0:	1d39      	adds	r1, r7, #4
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	2201      	movs	r2, #1
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <__io_putchar+0x20>)
 80012ba:	f004 fca5 	bl	8005c08 <HAL_UART_Transmit>
  return ch;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	240002b0 	.word	0x240002b0

080012cc <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	ed87 0a00 	vstr	s0, [r7]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	edd7 7a00 	vldr	s15, [r7]
 80012e2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80012f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80012f6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a04 	vldr	s15, [r3, #16]
 8001306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	ee07 3a90 	vmov	s15, r3

  }
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	ed87 0a01 	vstr	s0, [r7, #4]
 800134e:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8001350:	edd7 7a01 	vldr	s15, [r7, #4]
 8001354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	db0a      	blt.n	8001374 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800135e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001362:	f00a fa07 	bl	800b774 <sqrtf>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001370:	2300      	movs	r3, #0
 8001372:	e005      	b.n	8001380 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <saturate>:
    state->v = 0.0f;
    state->delta = 0.0f;
}

/* Function for Value Saturation */
float32_t saturate(float32_t value, float32_t min, float32_t max) {
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001392:	edc7 0a02 	vstr	s1, [r7, #8]
 8001396:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value > max) return max;
 800139a:	ed97 7a03 	vldr	s14, [r7, #12]
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	dd01      	ble.n	80013b0 <saturate+0x28>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	e00b      	b.n	80013c8 <saturate+0x40>
    if (value < min) return min;
 80013b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	d501      	bpl.n	80013c6 <saturate+0x3e>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	e000      	b.n	80013c8 <saturate+0x40>
    return value;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eeb0 0a67 	vmov.f32	s0, s15
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <normalize_angle>:

float32_t normalize_angle(float32_t angle) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle > PI) angle -= 2.0f * PI;
 80013e6:	e007      	b.n	80013f8 <normalize_angle+0x1c>
 80013e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ec:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001444 <normalize_angle+0x68>
 80013f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001448 <normalize_angle+0x6c>
 8001400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	dcee      	bgt.n	80013e8 <normalize_angle+0xc>
    while (angle < -PI) angle += 2.0f * PI;
 800140a:	e007      	b.n	800141c <normalize_angle+0x40>
 800140c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001410:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001444 <normalize_angle+0x68>
 8001414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001418:	edc7 7a01 	vstr	s15, [r7, #4]
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800144c <normalize_angle+0x70>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	d4ee      	bmi.n	800140c <normalize_angle+0x30>
    return angle;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	ee07 3a90 	vmov	s15, r3
}
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40c90fdb 	.word	0x40c90fdb
 8001448:	40490fdb 	.word	0x40490fdb
 800144c:	c0490fdb 	.word	0xc0490fdb

08001450 <PID_Init>:

void PID_Init(arm_pid_instance_f32 *pid, float32_t Kp, float32_t Ki, float32_t Kd)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	ed87 0a02 	vstr	s0, [r7, #8]
 800145c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001460:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	619a      	str	r2, [r3, #24]
	pid->Ki = Ki;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	61da      	str	r2, [r3, #28]
	pid->Kd = Kd;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(pid, 1);
 8001476:	2101      	movs	r1, #1
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f005 fcdf 	bl	8006e3c <arm_pid_init_f32>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <PID_Angle>:

float32_t PID_Angle(arm_pid_instance_f32 *pid_delta, float32_t delta_desired, float32_t delta_actual)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001492:	edc7 0a01 	vstr	s1, [r7, #4]
    //float32_t error = normalize_angle(delta_desired - delta_actual);
	return arm_pid_f32(pid_delta, normalize_angle(delta_desired - delta_actual));
 8001496:	ed97 7a02 	vldr	s14, [r7, #8]
 800149a:	edd7 7a01 	vldr	s15, [r7, #4]
 800149e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	f7ff ff99 	bl	80013dc <normalize_angle>
 80014aa:	eef0 7a40 	vmov.f32	s15, s0
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff ff0a 	bl	80012cc <arm_pid_f32>
 80014b8:	eef0 7a40 	vmov.f32	s15, s0
}
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <calc_vector_length>:
	//float32_t angle_objective = (180.0f/PI)*angle_radian;
	return angle_radian;
}

float32_t calc_vector_length(float32_t x1, float32_t y1, float32_t x2, float32_t y2)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b088      	sub	sp, #32
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	ed87 0a03 	vstr	s0, [r7, #12]
 80014d0:	edc7 0a02 	vstr	s1, [r7, #8]
 80014d4:	ed87 1a01 	vstr	s2, [r7, #4]
 80014d8:	edc7 1a00 	vstr	s3, [r7]
	float32_t result;
	float32_t dx = x2 - x1;
 80014dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t dy = y2 - y1;
 80014ec:	ed97 7a00 	vldr	s14, [r7]
 80014f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f8:	edc7 7a06 	vstr	s15, [r7, #24]
	arm_sqrt_f32(dx * dx + dy * dy, &result);
 80014fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001500:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001504:	edd7 7a06 	vldr	s15, [r7, #24]
 8001508:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800150c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f7ff ff13 	bl	8001344 <arm_sqrt_f32>
	return result;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	ee07 3a90 	vmov	s15, r3
}
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <PURE_PURSUIT>:

void PURE_PURSUIT(RobotState *state, float32_t *desired_delta, float32_t *desired_v, Path *path)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b09c      	sub	sp, #112	@ 0x70
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	uint32_t target_index = path->current_index;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float32_t dx, dy, distance;

	float32_t waypoint_tolerance = 0.01f;
 8001544:	4bc5      	ldr	r3, [pc, #788]	@ (800185c <PURE_PURSUIT+0x32c>)
 8001546:	663b      	str	r3, [r7, #96]	@ 0x60

	while (target_index < path->length) {
 8001548:	e04b      	b.n	80015e2 <PURE_PURSUIT+0xb2>
		// Obtener Waypoint Actual
		Waypoint current_waypoint = path->waypoints[target_index];
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	18ca      	adds	r2, r1, r3
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001560:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		// Calcular Distancia al Waypoint actual
		dx = current_waypoint.x - state->x;
 8001564:	ed97 7a04 	vldr	s14, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001572:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		dy = current_waypoint.y - state->y;
 8001576:	ed97 7a05 	vldr	s14, [r7, #20]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		arm_sqrt_f32(dx * dx + dy * dy, &distance);
 8001588:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800158c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001590:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001594:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015a0:	4618      	mov	r0, r3
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	f7ff fecd 	bl	8001344 <arm_sqrt_f32>

		//printf("dx: %.2f, dy: %.2f, atan2: %.2f degrees\n", dx, dy, atan2f(dy, dx));

		if (distance < waypoint_tolerance || current_waypoint.flag == 1) {
 80015aa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015ae:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80015b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ba:	dc02      	bgt.n	80015c2 <PURE_PURSUIT+0x92>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d114      	bne.n	80015ec <PURE_PURSUIT+0xbc>
			/* Avanzar al siguiente waypoint */
			path->waypoints[target_index].flag = 1;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6819      	ldr	r1, [r3, #0]
 80015c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	2201      	movs	r2, #1
 80015d4:	609a      	str	r2, [r3, #8]
			target_index++;
 80015d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015d8:	3301      	adds	r3, #1
 80015da:	66fb      	str	r3, [r7, #108]	@ 0x6c
			path->current_index = target_index;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015e0:	609a      	str	r2, [r3, #8]
	while (target_index < path->length) {
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3ae      	bcc.n	800154a <PURE_PURSUIT+0x1a>
			break;
		}
	}

	// Verificar si se ha recorrido toda la trayectoria
    if (target_index >= path->length) {
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d308      	bcc.n	8001608 <PURE_PURSUIT+0xd8>
        *desired_v = 0.0f;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
        *desired_delta = 0.0f;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e125      	b.n	8001854 <PURE_PURSUIT+0x324>
        //Robot_status = IDLE;
        return;
    }

    // Si no se ha completado la trayectoria continua
    Waypoint current_waypoint = path->waypoints[target_index];
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	18ca      	adds	r2, r1, r3
 8001618:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161c:	ca07      	ldmia	r2, {r0, r1, r2}
 800161e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Waypoint next_waypoint = (target_index + 1 < path->length) ? path->waypoints[target_index + 1] : current_waypoint;
 8001622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	d20e      	bcs.n	800164c <PURE_PURSUIT+0x11c>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	18ca      	adds	r2, r1, r3
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	ca07      	ldmia	r2, {r0, r1, r2}
 8001646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800164a:	e006      	b.n	800165a <PURE_PURSUIT+0x12a>
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001654:	ca07      	ldmia	r2, {r0, r1, r2}
 8001656:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    float32_t distance_to_next_waypoint = calc_vector_length(current_waypoint.x, current_waypoint.y, next_waypoint.x, next_waypoint.y);
 800165a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800165e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001662:	edd7 6a07 	vldr	s13, [r7, #28]
 8001666:	ed97 6a08 	vldr	s12, [r7, #32]
 800166a:	eef0 1a46 	vmov.f32	s3, s12
 800166e:	eeb0 1a66 	vmov.f32	s2, s13
 8001672:	eef0 0a47 	vmov.f32	s1, s14
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	f7ff ff24 	bl	80014c6 <calc_vector_length>
 800167e:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

    float32_t target_x, target_y;
	if (distance_to_next_waypoint < LD)
 8001682:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001686:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001860 <PURE_PURSUIT+0x330>
 800168a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d504      	bpl.n	800169e <PURE_PURSUIT+0x16e>
	{
		// Si LD es mayor que la distancia al siguiente waypoint, se usa directamente el siguiente waypoint
		target_x = next_waypoint.x;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	66bb      	str	r3, [r7, #104]	@ 0x68
		target_y = next_waypoint.y;
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	667b      	str	r3, [r7, #100]	@ 0x64
 800169c:	e02f      	b.n	80016fe <PURE_PURSUIT+0x1ce>
	} else {
		// Interpolar dinámicamente para calcular el punto de mira
		float32_t t = LD / distance_to_next_waypoint;
 800169e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001860 <PURE_PURSUIT+0x330>
 80016a2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80016a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016aa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		target_x = (1 - t) * current_waypoint.x + t * next_waypoint.x;
 80016ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016b2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80016b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80016be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80016c6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		target_y = (1 - t) * current_waypoint.y + t * next_waypoint.y;
 80016d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016da:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80016de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80016ee:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80016f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fa:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	target_x = state->x + unit_dx * LD;
	target_y = state->y + unit_dy * LD;
	*/

	/* Calcular el vector hacia el siguiente waypoint */
    dx = target_x - state->x;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    dy = target_y - state->y;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	edd3 7a01 	vldr	s15, [r3, #4]
 8001716:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800171a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    //printf("Target Point: (%.2f, %.2f)\n", target_x, target_y);
    float32_t angle_to_target = (float32_t)atan2f(dy, dx);
 8001722:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 8001726:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 800172a:	f00a f821 	bl	800b770 <atan2f>
 800172e:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    //printf("dx: %.2f, dy: %.2f, atan2: %.2f degrees\n", dx, dy, atan2f(dy, dx));
    float32_t alpha = normalize_angle(angle_to_target - state->theta);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	edd3 7a02 	vldr	s15, [r3, #8]
 8001738:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800173c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	f7ff fe4a 	bl	80013dc <normalize_angle>
 8001748:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    //printf("Alpha (normalized): %.2f degrees\n", alpha);

	float32_t gamma = (2.0f*arm_sin_f32(alpha))/LD;
 800174c:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8001750:	f005 fb9a 	bl	8006e88 <arm_sin_f32>
 8001754:	eef0 7a40 	vmov.f32	s15, s0
 8001758:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800175c:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001860 <PURE_PURSUIT+0x330>
 8001760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001764:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	*desired_delta = (float32_t)atan(L*gamma);
 8001768:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800176c:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001864 <PURE_PURSUIT+0x334>
 8001770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001774:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001778:	eeb0 0b47 	vmov.f64	d0, d7
 800177c:	f009 fe5c 	bl	800b438 <atan>
 8001780:	eeb0 7b40 	vmov.f64	d7, d0
 8001784:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	edc3 7a00 	vstr	s15, [r3]
    *desired_delta = saturate(*desired_delta, -DELTA_MAX, DELTA_MAX);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8001868 <PURE_PURSUIT+0x338>
 8001798:	eddf 0a34 	vldr	s1, [pc, #208]	@ 800186c <PURE_PURSUIT+0x33c>
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	f7ff fdf2 	bl	8001388 <saturate>
 80017a4:	eef0 7a40 	vmov.f32	s15, s0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	edc3 7a00 	vstr	s15, [r3]

    float32_t v_base = 0.5f;  // Velocidad base
 80017ae:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80017b2:	643b      	str	r3, [r7, #64]	@ 0x40
    float32_t k = 1.0f;       // Constante de ajuste
 80017b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    *desired_v = v_base / (1.0f + k * (float32_t)fabsf(gamma));
 80017ba:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80017be:	eeb0 7ae7 	vabs.f32	s14, s15
 80017c2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80017c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017d2:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80017d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	edc3 7a00 	vstr	s15, [r3]

    if (target_index == path->length - 1) {
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d123      	bne.n	8001834 <PURE_PURSUIT+0x304>
	float32_t distance_to_goal = calc_vector_length(
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80017f8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80017fc:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 8001800:	eef0 1a46 	vmov.f32	s3, s12
 8001804:	eeb0 1a66 	vmov.f32	s2, s13
 8001808:	eef0 0a47 	vmov.f32	s1, s14
 800180c:	eeb0 0a67 	vmov.f32	s0, s15
 8001810:	f7ff fe59 	bl	80014c6 <calc_vector_length>
 8001814:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
			state->x, state->y, current_waypoint.x, current_waypoint.y
			);
		*desired_v *= (distance_to_goal / LD);  // Reducir progresivamente la velocidad
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001822:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 8001860 <PURE_PURSUIT+0x330>
 8001826:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800182a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edc3 7a00 	vstr	s15, [r3]
	}

	/* Saturar la Velocidad Deseada */
	*desired_v = saturate(*desired_v, V_MIN, V_MAX);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800183e:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001870 <PURE_PURSUIT+0x340>
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	f7ff fd9f 	bl	8001388 <saturate>
 800184a:	eef0 7a40 	vmov.f32	s15, s0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edc3 7a00 	vstr	s15, [r3]
	//printf("Delta limits: [%.2f, %.2f]\n", -DELTA_MAX , DELTA_MAX);

}
 8001854:	3770      	adds	r7, #112	@ 0x70
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	3c23d70a 	.word	0x3c23d70a
 8001860:	3c23d70a 	.word	0x3c23d70a
 8001864:	3e19999a 	.word	0x3e19999a
 8001868:	3f860a92 	.word	0x3f860a92
 800186c:	bf860a92 	.word	0xbf860a92
 8001870:	00000000 	.word	0x00000000

08001874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_MspInit+0x30>)
 800187c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001880:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_MspInit+0x30>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_MspInit+0x30>)
 800188c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58024400 	.word	0x58024400

080018a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <HAL_TIM_Base_MspInit+0x68>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10f      	bne.n	80018da <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <HAL_TIM_Base_MspInit+0x6c>)
 80018bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <HAL_TIM_Base_MspInit+0x6c>)
 80018c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018ca:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_TIM_Base_MspInit+0x6c>)
 80018cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80018d8:	e013      	b.n	8001902 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <HAL_TIM_Base_MspInit+0x70>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d10e      	bne.n	8001902 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_TIM_Base_MspInit+0x6c>)
 80018e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <HAL_TIM_Base_MspInit+0x6c>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <HAL_TIM_Base_MspInit+0x6c>)
 80018f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40001c00 	.word	0x40001c00
 8001914:	58024400 	.word	0x58024400
 8001918:	40002000 	.word	0x40002000

0800191c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a26      	ldr	r2, [pc, #152]	@ (80019d4 <HAL_TIM_MspPostInit+0xb8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d120      	bne.n	8001980 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800193e:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <HAL_TIM_MspPostInit+0xbc>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001944:	4a24      	ldr	r2, [pc, #144]	@ (80019d8 <HAL_TIM_MspPostInit+0xbc>)
 8001946:	f043 0320 	orr.w	r3, r3, #32
 800194a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800194e:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <HAL_TIM_MspPostInit+0xbc>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800195c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800196e:	2309      	movs	r3, #9
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4818      	ldr	r0, [pc, #96]	@ (80019dc <HAL_TIM_MspPostInit+0xc0>)
 800197a:	f000 fb63 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800197e:	e024      	b.n	80019ca <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a16      	ldr	r2, [pc, #88]	@ (80019e0 <HAL_TIM_MspPostInit+0xc4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11f      	bne.n	80019ca <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <HAL_TIM_MspPostInit+0xbc>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001990:	4a11      	ldr	r2, [pc, #68]	@ (80019d8 <HAL_TIM_MspPostInit+0xbc>)
 8001992:	f043 0320 	orr.w	r3, r3, #32
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <HAL_TIM_MspPostInit+0xbc>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80019ba:	2309      	movs	r3, #9
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	@ (80019dc <HAL_TIM_MspPostInit+0xc0>)
 80019c6:	f000 fb3d 	bl	8002044 <HAL_GPIO_Init>
}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	@ 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40001c00 	.word	0x40001c00
 80019d8:	58024400 	.word	0x58024400
 80019dc:	58021400 	.word	0x58021400
 80019e0:	40002000 	.word	0x40002000

080019e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0ba      	sub	sp, #232	@ 0xe8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	22c0      	movs	r2, #192	@ 0xc0
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f006 f9fe 	bl	8007e06 <memset>
  if(huart->Instance==USART3)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a27      	ldr	r2, [pc, #156]	@ (8001aac <HAL_UART_MspInit+0xc8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d146      	bne.n	8001aa2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a14:	f04f 0202 	mov.w	r2, #2
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fd28 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a36:	f7ff fc31 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <HAL_UART_MspInit+0xcc>)
 8001a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a40:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab0 <HAL_UART_MspInit+0xcc>)
 8001a42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_UART_MspInit+0xcc>)
 8001a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_UART_MspInit+0xcc>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5e:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <HAL_UART_MspInit+0xcc>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <HAL_UART_MspInit+0xcc>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a90:	2307      	movs	r3, #7
 8001a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <HAL_UART_MspInit+0xd0>)
 8001a9e:	f000 fad1 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001aa2:	bf00      	nop
 8001aa4:	37e8      	adds	r7, #232	@ 0xe8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40004800 	.word	0x40004800
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	58020c00 	.word	0x58020c00

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <NMI_Handler+0x4>

08001ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <MemManage_Handler+0x4>

08001ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <UsageFault_Handler+0x4>

08001ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 f965 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  return 1;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_kill>:

int _kill(int pid, int sig)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b30:	f006 f9bc 	bl	8007eac <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2216      	movs	r2, #22
 8001b38:	601a      	str	r2, [r3, #0]
  return -1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_exit>:

void _exit (int status)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffe7 	bl	8001b26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <_exit+0x12>

08001b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e00a      	b.n	8001b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b6e:	f3af 8000 	nop.w
 8001b72:	4601      	mov	r1, r0
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf0      	blt.n	8001b6e <_read+0x12>
  }

  return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e009      	b.n	8001bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fb79 	bl	80012a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf1      	blt.n	8001ba8 <_write+0x12>
  }
  return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f006 f920 	bl	8007eac <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24080000 	.word	0x24080000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	2400037c 	.word	0x2400037c
 8001ca0:	240004d0 	.word	0x240004d0

08001ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ca8:	f7fe fede 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f006 f8f1 	bl	8007eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd6:	f7fe ff5f 	bl	8000b98 <main>
  bx  lr
 8001cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ce0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ce4:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8001ce8:	0800d540 	.word	0x0800d540
  ldr r2, =_sbss
 8001cec:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 8001cf0:	240004d0 	.word	0x240004d0

08001cf4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC3_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f96e 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d04:	f001 f9e6 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_Init+0x68>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	4913      	ldr	r1, [pc, #76]	@ (8001d64 <HAL_Init+0x6c>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_Init+0x68>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <HAL_Init+0x6c>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <HAL_Init+0x70>)
 8001d3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <HAL_Init+0x74>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f814 	bl	8001d70 <HAL_InitTick>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e002      	b.n	8001d58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d52:	f7ff fd8f 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	58024400 	.word	0x58024400
 8001d64:	0800c678 	.word	0x0800c678
 8001d68:	24000004 	.word	0x24000004
 8001d6c:	24000000 	.word	0x24000000

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_InitTick+0x60>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e021      	b.n	8001dc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_InitTick+0x64>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_InitTick+0x60>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f945 	bl	800202a <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f91d 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <HAL_InitTick+0x68>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	24000030 	.word	0x24000030
 8001dd4:	24000000 	.word	0x24000000
 8001dd8:	2400002c 	.word	0x2400002c

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	24000030 	.word	0x24000030
 8001e00:	24000380 	.word	0x24000380

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	24000380 	.word	0x24000380

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	24000030 	.word	0x24000030

08001e64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <HAL_GetREVID+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	5c001000 	.word	0x5c001000

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x40>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x40>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00
 8001ec0:	05fa0000 	.word	0x05fa0000

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	@ (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	@ (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff47 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff5e 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff90 	bl	8001f34 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5f 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffb2 	bl	8001f9c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002052:	4b89      	ldr	r3, [pc, #548]	@ (8002278 <HAL_GPIO_Init+0x234>)
 8002054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002056:	e194      	b.n	8002382 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8186 	beq.w	800237c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d005      	beq.n	8002088 <HAL_GPIO_Init+0x44>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d130      	bne.n	80020ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020be:	2201      	movs	r2, #1
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 0201 	and.w	r2, r3, #1
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d017      	beq.n	8002126 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d123      	bne.n	800217a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	08da      	lsrs	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	69b9      	ldr	r1, [r7, #24]
 8002176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0203 	and.w	r2, r3, #3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80e0 	beq.w	800237c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021bc:	4b2f      	ldr	r3, [pc, #188]	@ (800227c <HAL_GPIO_Init+0x238>)
 80021be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021c2:	4a2e      	ldr	r2, [pc, #184]	@ (800227c <HAL_GPIO_Init+0x238>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <HAL_GPIO_Init+0x238>)
 80021ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a29      	ldr	r2, [pc, #164]	@ (8002280 <HAL_GPIO_Init+0x23c>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <HAL_GPIO_Init+0x240>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d052      	beq.n	80022ac <HAL_GPIO_Init+0x268>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_GPIO_Init+0x244>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_GPIO_Init+0x22e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_GPIO_Init+0x248>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02b      	beq.n	800226e <HAL_GPIO_Init+0x22a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <HAL_GPIO_Init+0x24c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d025      	beq.n	800226a <HAL_GPIO_Init+0x226>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1c      	ldr	r2, [pc, #112]	@ (8002294 <HAL_GPIO_Init+0x250>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x222>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <HAL_GPIO_Init+0x254>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x21e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1a      	ldr	r2, [pc, #104]	@ (800229c <HAL_GPIO_Init+0x258>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x21a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <HAL_GPIO_Init+0x25c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x216>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a18      	ldr	r2, [pc, #96]	@ (80022a4 <HAL_GPIO_Init+0x260>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x212>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <HAL_GPIO_Init+0x264>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x20e>
 800224e:	2309      	movs	r3, #9
 8002250:	e02d      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002252:	230a      	movs	r3, #10
 8002254:	e02b      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002256:	2308      	movs	r3, #8
 8002258:	e029      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 800225a:	2307      	movs	r3, #7
 800225c:	e027      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 800225e:	2306      	movs	r3, #6
 8002260:	e025      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002262:	2305      	movs	r3, #5
 8002264:	e023      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002266:	2304      	movs	r3, #4
 8002268:	e021      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 800226a:	2303      	movs	r3, #3
 800226c:	e01f      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 800226e:	2302      	movs	r3, #2
 8002270:	e01d      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002272:	2301      	movs	r3, #1
 8002274:	e01b      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002276:	bf00      	nop
 8002278:	58000080 	.word	0x58000080
 800227c:	58024400 	.word	0x58024400
 8002280:	58000400 	.word	0x58000400
 8002284:	58020000 	.word	0x58020000
 8002288:	58020400 	.word	0x58020400
 800228c:	58020800 	.word	0x58020800
 8002290:	58020c00 	.word	0x58020c00
 8002294:	58021000 	.word	0x58021000
 8002298:	58021400 	.word	0x58021400
 800229c:	58021800 	.word	0x58021800
 80022a0:	58021c00 	.word	0x58021c00
 80022a4:	58022000 	.word	0x58022000
 80022a8:	58022400 	.word	0x58022400
 80022ac:	2300      	movs	r3, #0
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	f002 0203 	and.w	r2, r2, #3
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	4093      	lsls	r3, r2
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022be:	4938      	ldr	r1, [pc, #224]	@ (80023a0 <HAL_GPIO_Init+0x35c>)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f ae63 	bne.w	8002058 <HAL_GPIO_Init+0x14>
  }
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	3724      	adds	r7, #36	@ 0x24
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	58000400 	.word	0x58000400

080023a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80023ac:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <HAL_HSEM_FastTake+0x2c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3320      	adds	r3, #32
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <HAL_HSEM_FastTake+0x30>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	58026400 	.word	0x58026400
 80023d4:	80000300 	.word	0x80000300

080023d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80023e2:	4906      	ldr	r1, [pc, #24]	@ (80023fc <HAL_HSEM_Release+0x24>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	58026400 	.word	0x58026400

08002400 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002408:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	2b06      	cmp	r3, #6
 8002412:	d00a      	beq.n	800242a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002414:	4b26      	ldr	r3, [pc, #152]	@ (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e040      	b.n	80024a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e03e      	b.n	80024a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800242a:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002432:	491f      	ldr	r1, [pc, #124]	@ (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4313      	orrs	r3, r2
 8002438:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800243a:	f7ff fce3 	bl	8001e04 <HAL_GetTick>
 800243e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002440:	e009      	b.n	8002456 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002442:	f7ff fcdf 	bl	8001e04 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002450:	d901      	bls.n	8002456 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e028      	b.n	80024a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002456:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002462:	d1ee      	bne.n	8002442 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b1e      	cmp	r3, #30
 8002468:	d008      	beq.n	800247c <HAL_PWREx_ConfigSupply+0x7c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b2e      	cmp	r3, #46	@ 0x2e
 800246e:	d005      	beq.n	800247c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b1d      	cmp	r3, #29
 8002474:	d002      	beq.n	800247c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b2d      	cmp	r3, #45	@ 0x2d
 800247a:	d114      	bne.n	80024a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800247c:	f7ff fcc2 	bl	8001e04 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002482:	e009      	b.n	8002498 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002484:	f7ff fcbe 	bl	8001e04 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002492:	d901      	bls.n	8002498 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e007      	b.n	80024a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a4:	d1ee      	bne.n	8002484 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	58024800 	.word	0x58024800

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	@ 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f000 bc48 	b.w	8002d58 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8088 	beq.w	80025e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b99      	ldr	r3, [pc, #612]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e0:	4b96      	ldr	r3, [pc, #600]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d007      	beq.n	80024fc <HAL_RCC_OscConfig+0x48>
 80024ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ee:	2b18      	cmp	r3, #24
 80024f0:	d111      	bne.n	8002516 <HAL_RCC_OscConfig+0x62>
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d10c      	bne.n	8002516 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	4b8f      	ldr	r3, [pc, #572]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d06d      	beq.n	80025e4 <HAL_RCC_OscConfig+0x130>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d169      	bne.n	80025e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f000 bc21 	b.w	8002d58 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x7a>
 8002520:	4b86      	ldr	r3, [pc, #536]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a85      	ldr	r2, [pc, #532]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e02e      	b.n	800258c <HAL_RCC_OscConfig+0xd8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x9c>
 8002536:	4b81      	ldr	r3, [pc, #516]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a80      	ldr	r2, [pc, #512]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b7e      	ldr	r3, [pc, #504]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7d      	ldr	r2, [pc, #500]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002548:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xd8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0xc0>
 800255a:	4b78      	ldr	r3, [pc, #480]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a77      	ldr	r2, [pc, #476]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b75      	ldr	r3, [pc, #468]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a74      	ldr	r2, [pc, #464]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xd8>
 8002574:	4b71      	ldr	r3, [pc, #452]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a70      	ldr	r2, [pc, #448]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b6e      	ldr	r3, [pc, #440]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6d      	ldr	r2, [pc, #436]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff fc36 	bl	8001e04 <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7ff fc32 	bl	8001e04 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e3d4      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ae:	4b63      	ldr	r3, [pc, #396]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xe8>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7ff fc22 	bl	8001e04 <HAL_GetTick>
 80025c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7ff fc1e 	bl	8001e04 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e3c0      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025d6:	4b59      	ldr	r3, [pc, #356]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x110>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80ca 	beq.w	8002788 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f4:	4b51      	ldr	r3, [pc, #324]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025fe:	4b4f      	ldr	r3, [pc, #316]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_RCC_OscConfig+0x166>
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	2b18      	cmp	r3, #24
 800260e:	d156      	bne.n	80026be <HAL_RCC_OscConfig+0x20a>
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d151      	bne.n	80026be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261a:	4b48      	ldr	r3, [pc, #288]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x17e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e392      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002632:	4b42      	ldr	r3, [pc, #264]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0219 	bic.w	r2, r3, #25
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	493f      	ldr	r1, [pc, #252]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7ff fbde 	bl	8001e04 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264c:	f7ff fbda 	bl	8001e04 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e37c      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265e:	4b37      	ldr	r3, [pc, #220]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	f7ff fbfb 	bl	8001e64 <HAL_GetREVID>
 800266e:	4603      	mov	r3, r0
 8002670:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002674:	4293      	cmp	r3, r2
 8002676:	d817      	bhi.n	80026a8 <HAL_RCC_OscConfig+0x1f4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b40      	cmp	r3, #64	@ 0x40
 800267e:	d108      	bne.n	8002692 <HAL_RCC_OscConfig+0x1de>
 8002680:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002688:	4a2c      	ldr	r2, [pc, #176]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 800268a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800268e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002690:	e07a      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	031b      	lsls	r3, r3, #12
 80026a0:	4926      	ldr	r1, [pc, #152]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a6:	e06f      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b24      	ldr	r3, [pc, #144]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	4921      	ldr	r1, [pc, #132]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026bc:	e064      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d047      	beq.n	8002756 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026c6:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0219 	bic.w	r2, r3, #25
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	491a      	ldr	r1, [pc, #104]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff fb94 	bl	8001e04 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7ff fb90 	bl	8001e04 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e332      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f2:	4b12      	ldr	r3, [pc, #72]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	f7ff fbb1 	bl	8001e64 <HAL_GetREVID>
 8002702:	4603      	mov	r3, r0
 8002704:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002708:	4293      	cmp	r3, r2
 800270a:	d819      	bhi.n	8002740 <HAL_RCC_OscConfig+0x28c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b40      	cmp	r3, #64	@ 0x40
 8002712:	d108      	bne.n	8002726 <HAL_RCC_OscConfig+0x272>
 8002714:	4b09      	ldr	r3, [pc, #36]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800271c:	4a07      	ldr	r2, [pc, #28]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 800271e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002722:	6053      	str	r3, [r2, #4]
 8002724:	e030      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
 8002726:	4b05      	ldr	r3, [pc, #20]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	031b      	lsls	r3, r3, #12
 8002734:	4901      	ldr	r1, [pc, #4]	@ (800273c <HAL_RCC_OscConfig+0x288>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
 800273a:	e025      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
 800273c:	58024400 	.word	0x58024400
 8002740:	4b9a      	ldr	r3, [pc, #616]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	4997      	ldr	r1, [pc, #604]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	e018      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b95      	ldr	r3, [pc, #596]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a94      	ldr	r2, [pc, #592]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7ff fb4f 	bl	8001e04 <HAL_GetTick>
 8002766:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7ff fb4b 	bl	8001e04 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e2ed      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800277c:	4b8b      	ldr	r3, [pc, #556]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a9 	beq.w	80028e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4b85      	ldr	r3, [pc, #532]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800279e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a0:	4b82      	ldr	r3, [pc, #520]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d007      	beq.n	80027bc <HAL_RCC_OscConfig+0x308>
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b18      	cmp	r3, #24
 80027b0:	d13a      	bne.n	8002828 <HAL_RCC_OscConfig+0x374>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d135      	bne.n	8002828 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027bc:	4b7b      	ldr	r3, [pc, #492]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_OscConfig+0x320>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b80      	cmp	r3, #128	@ 0x80
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e2c1      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027d4:	f7ff fb46 	bl	8001e64 <HAL_GetREVID>
 80027d8:	4603      	mov	r3, r0
 80027da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027de:	4293      	cmp	r3, r2
 80027e0:	d817      	bhi.n	8002812 <HAL_RCC_OscConfig+0x35e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_OscConfig+0x348>
 80027ea:	4b70      	ldr	r3, [pc, #448]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027f2:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027fa:	e075      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027fc:	4b6b      	ldr	r3, [pc, #428]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	4968      	ldr	r1, [pc, #416]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002810:	e06a      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002812:	4b66      	ldr	r3, [pc, #408]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	4962      	ldr	r1, [pc, #392]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002826:	e05f      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d042      	beq.n	80028b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002830:	4b5e      	ldr	r3, [pc, #376]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5d      	ldr	r2, [pc, #372]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fae2 	bl	8001e04 <HAL_GetTick>
 8002840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002844:	f7ff fade 	bl	8001e04 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e280      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002856:	4b55      	ldr	r3, [pc, #340]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002862:	f7ff faff 	bl	8001e64 <HAL_GetREVID>
 8002866:	4603      	mov	r3, r0
 8002868:	f241 0203 	movw	r2, #4099	@ 0x1003
 800286c:	4293      	cmp	r3, r2
 800286e:	d817      	bhi.n	80028a0 <HAL_RCC_OscConfig+0x3ec>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	2b20      	cmp	r3, #32
 8002876:	d108      	bne.n	800288a <HAL_RCC_OscConfig+0x3d6>
 8002878:	4b4c      	ldr	r3, [pc, #304]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002880:	4a4a      	ldr	r2, [pc, #296]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002886:	6053      	str	r3, [r2, #4]
 8002888:	e02e      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
 800288a:	4b48      	ldr	r3, [pc, #288]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	4944      	ldr	r1, [pc, #272]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
 800289e:	e023      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
 80028a0:	4b42      	ldr	r3, [pc, #264]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	493f      	ldr	r1, [pc, #252]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
 80028b4:	e018      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028b6:	4b3d      	ldr	r3, [pc, #244]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3c      	ldr	r2, [pc, #240]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7ff fa9f 	bl	8001e04 <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028ca:	f7ff fa9b 	bl	8001e04 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e23d      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028dc:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d036      	beq.n	8002962 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d019      	beq.n	8002930 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fc:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002900:	4a2a      	ldr	r2, [pc, #168]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7ff fa7c 	bl	8001e04 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002910:	f7ff fa78 	bl	8001e04 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e21a      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002922:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x45c>
 800292e:	e018      	b.n	8002962 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002930:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002934:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7ff fa62 	bl	8001e04 <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002944:	f7ff fa5e 	bl	8001e04 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e200      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d039      	beq.n	80029e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002976:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a0c      	ldr	r2, [pc, #48]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800297c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002980:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002982:	f7ff fa3f 	bl	8001e04 <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800298a:	f7ff fa3b 	bl	8001e04 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1dd      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x4d6>
 80029a8:	e01b      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
 80029aa:	bf00      	nop
 80029ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a9a      	ldr	r2, [pc, #616]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 80029b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029bc:	f7ff fa22 	bl	8001e04 <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c4:	f7ff fa1e 	bl	8001e04 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1c0      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029d6:	4b92      	ldr	r3, [pc, #584]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8081 	beq.w	8002af2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002c24 <HAL_RCC_OscConfig+0x770>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a8b      	ldr	r2, [pc, #556]	@ (8002c24 <HAL_RCC_OscConfig+0x770>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029fc:	f7ff fa02 	bl	8001e04 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a04:	f7ff f9fe 	bl	8001e04 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	@ 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1a0      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a16:	4b83      	ldr	r3, [pc, #524]	@ (8002c24 <HAL_RCC_OscConfig+0x770>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x584>
 8002a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a36:	e02d      	b.n	8002a94 <HAL_RCC_OscConfig+0x5e0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x5a6>
 8002a40:	4b77      	ldr	r3, [pc, #476]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4a76      	ldr	r2, [pc, #472]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4c:	4b74      	ldr	r3, [pc, #464]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a73      	ldr	r2, [pc, #460]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	e01c      	b.n	8002a94 <HAL_RCC_OscConfig+0x5e0>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c8>
 8002a62:	4b6f      	ldr	r3, [pc, #444]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a6e      	ldr	r2, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a6b      	ldr	r2, [pc, #428]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0x5e0>
 8002a7c:	4b68      	ldr	r3, [pc, #416]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	4a67      	ldr	r2, [pc, #412]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a88:	4b65      	ldr	r3, [pc, #404]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a64      	ldr	r2, [pc, #400]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7ff f9b2 	bl	8001e04 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7ff f9ae 	bl	8001e04 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e14e      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aba:	4b59      	ldr	r3, [pc, #356]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x5f0>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7ff f99c 	bl	8001e04 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7ff f998 	bl	8001e04 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e138      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 812d 	beq.w	8002d56 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002afc:	4b48      	ldr	r3, [pc, #288]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b04:	2b18      	cmp	r3, #24
 8002b06:	f000 80bd 	beq.w	8002c84 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	f040 809e 	bne.w	8002c50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b42      	ldr	r3, [pc, #264]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a41      	ldr	r2, [pc, #260]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7ff f970 	bl	8001e04 <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7ff f96c 	bl	8001e04 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e10e      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b3a:	4b39      	ldr	r3, [pc, #228]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b46:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b4a:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <HAL_RCC_OscConfig+0x774>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	4931      	ldr	r1, [pc, #196]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	3b01      	subs	r3, #1
 8002b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	025b      	lsls	r3, r3, #9
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	061b      	lsls	r3, r3, #24
 8002b8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b90:	4923      	ldr	r1, [pc, #140]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b96:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	4a21      	ldr	r2, [pc, #132]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <HAL_RCC_OscConfig+0x778>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bae:	00d2      	lsls	r2, r2, #3
 8002bb0:	491b      	ldr	r1, [pc, #108]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	f023 020c 	bic.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	4917      	ldr	r1, [pc, #92]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bc8:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	f023 0202 	bic.w	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	4912      	ldr	r1, [pc, #72]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bda:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	4a10      	ldr	r2, [pc, #64]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002bfe:	4b08      	ldr	r3, [pc, #32]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0a:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a04      	ldr	r2, [pc, #16]	@ (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7ff f8f5 	bl	8001e04 <HAL_GetTick>
 8002c1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c1c:	e011      	b.n	8002c42 <HAL_RCC_OscConfig+0x78e>
 8002c1e:	bf00      	nop
 8002c20:	58024400 	.word	0x58024400
 8002c24:	58024800 	.word	0x58024800
 8002c28:	fffffc0c 	.word	0xfffffc0c
 8002c2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7ff f8e8 	bl	8001e04 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e08a      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x77c>
 8002c4e:	e082      	b.n	8002d56 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b43      	ldr	r3, [pc, #268]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a42      	ldr	r2, [pc, #264]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7ff f8d2 	bl	8001e04 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7ff f8ce 	bl	8001e04 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e070      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c76:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x7b0>
 8002c82:	e068      	b.n	8002d56 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c84:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c8a:	4b35      	ldr	r3, [pc, #212]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d031      	beq.n	8002cfc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0203 	and.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d12a      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d122      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d11a      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	0a5b      	lsrs	r3, r3, #9
 8002cca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d111      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d108      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	0e1b      	lsrs	r3, r3, #24
 8002cee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e02b      	b.n	8002d58 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d00:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d04:	08db      	lsrs	r3, r3, #3
 8002d06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d01f      	beq.n	8002d56 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1a:	4a11      	ldr	r2, [pc, #68]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d22:	f7ff f86f 	bl	8001e04 <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d28:	bf00      	nop
 8002d2a:	f7ff f86b 	bl	8001e04 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d0f9      	beq.n	8002d2a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <HAL_RCC_OscConfig+0x8b0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d42:	00d2      	lsls	r2, r2, #3
 8002d44:	4906      	ldr	r1, [pc, #24]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	4a04      	ldr	r2, [pc, #16]	@ (8002d60 <HAL_RCC_OscConfig+0x8ac>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3730      	adds	r7, #48	@ 0x30
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	58024400 	.word	0x58024400
 8002d64:	ffff0007 	.word	0xffff0007

08002d68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e19c      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b8a      	ldr	r3, [pc, #552]	@ (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d910      	bls.n	8002dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b87      	ldr	r3, [pc, #540]	@ (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 020f 	bic.w	r2, r3, #15
 8002d92:	4985      	ldr	r1, [pc, #532]	@ (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b83      	ldr	r3, [pc, #524]	@ (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e184      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d010      	beq.n	8002dda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d908      	bls.n	8002dda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dc8:	4b78      	ldr	r3, [pc, #480]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	4975      	ldr	r1, [pc, #468]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d010      	beq.n	8002e08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	4b70      	ldr	r3, [pc, #448]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d908      	bls.n	8002e08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002df6:	4b6d      	ldr	r3, [pc, #436]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	496a      	ldr	r1, [pc, #424]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	4b64      	ldr	r3, [pc, #400]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d908      	bls.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e24:	4b61      	ldr	r3, [pc, #388]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	495e      	ldr	r1, [pc, #376]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	4b59      	ldr	r3, [pc, #356]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e52:	4b56      	ldr	r3, [pc, #344]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4953      	ldr	r1, [pc, #332]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	4b4d      	ldr	r3, [pc, #308]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d908      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e80:	4b4a      	ldr	r3, [pc, #296]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f023 020f 	bic.w	r2, r3, #15
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4947      	ldr	r1, [pc, #284]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d055      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e9e:	4b43      	ldr	r3, [pc, #268]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4940      	ldr	r1, [pc, #256]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d121      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0f6      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed0:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d115      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0ea      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee8:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0de      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d6      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f08:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f023 0207 	bic.w	r2, r3, #7
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4925      	ldr	r1, [pc, #148]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1a:	f7fe ff73 	bl	8001e04 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f22:	f7fe ff6f 	bl	8001e04 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0be      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f38:	4b1c      	ldr	r3, [pc, #112]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d1eb      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d208      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f66:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f023 020f 	bic.w	r2, r3, #15
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	490e      	ldr	r1, [pc, #56]	@ (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d214      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	4906      	ldr	r1, [pc, #24]	@ (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e086      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
 8002fa8:	52002000 	.word	0x52002000
 8002fac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d208      	bcs.n	8002fde <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	4939      	ldr	r1, [pc, #228]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d208      	bcs.n	800300c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ffa:	4b31      	ldr	r3, [pc, #196]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	492e      	ldr	r1, [pc, #184]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003008:	4313      	orrs	r3, r2
 800300a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	4b28      	ldr	r3, [pc, #160]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003024:	429a      	cmp	r2, r3
 8003026:	d208      	bcs.n	800303a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4922      	ldr	r1, [pc, #136]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003036:	4313      	orrs	r3, r2
 8003038:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003052:	429a      	cmp	r2, r3
 8003054:	d208      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003056:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4917      	ldr	r1, [pc, #92]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003064:	4313      	orrs	r3, r2
 8003066:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003068:	f000 f834 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	4912      	ldr	r1, [pc, #72]	@ (80030c4 <HAL_RCC_ClockConfig+0x35c>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003086:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	4a0d      	ldr	r2, [pc, #52]	@ (80030c4 <HAL_RCC_ClockConfig+0x35c>)
 8003090:	5cd3      	ldrb	r3, [r2, r3]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_RCC_ClockConfig+0x360>)
 800309e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030a0:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <HAL_RCC_ClockConfig+0x364>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <HAL_RCC_ClockConfig+0x368>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fe60 	bl	8001d70 <HAL_InitTick>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	58024400 	.word	0x58024400
 80030c4:	0800c678 	.word	0x0800c678
 80030c8:	24000004 	.word	0x24000004
 80030cc:	24000000 	.word	0x24000000
 80030d0:	2400002c 	.word	0x2400002c

080030d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	@ 0x24
 80030d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030da:	4bb3      	ldr	r3, [pc, #716]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030e2:	2b18      	cmp	r3, #24
 80030e4:	f200 8155 	bhi.w	8003392 <HAL_RCC_GetSysClockFreq+0x2be>
 80030e8:	a201      	add	r2, pc, #4	@ (adr r2, 80030f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003155 	.word	0x08003155
 80030f4:	08003393 	.word	0x08003393
 80030f8:	08003393 	.word	0x08003393
 80030fc:	08003393 	.word	0x08003393
 8003100:	08003393 	.word	0x08003393
 8003104:	08003393 	.word	0x08003393
 8003108:	08003393 	.word	0x08003393
 800310c:	08003393 	.word	0x08003393
 8003110:	0800317b 	.word	0x0800317b
 8003114:	08003393 	.word	0x08003393
 8003118:	08003393 	.word	0x08003393
 800311c:	08003393 	.word	0x08003393
 8003120:	08003393 	.word	0x08003393
 8003124:	08003393 	.word	0x08003393
 8003128:	08003393 	.word	0x08003393
 800312c:	08003393 	.word	0x08003393
 8003130:	08003181 	.word	0x08003181
 8003134:	08003393 	.word	0x08003393
 8003138:	08003393 	.word	0x08003393
 800313c:	08003393 	.word	0x08003393
 8003140:	08003393 	.word	0x08003393
 8003144:	08003393 	.word	0x08003393
 8003148:	08003393 	.word	0x08003393
 800314c:	08003393 	.word	0x08003393
 8003150:	08003187 	.word	0x08003187
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003154:	4b94      	ldr	r3, [pc, #592]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003160:	4b91      	ldr	r3, [pc, #580]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	4a90      	ldr	r2, [pc, #576]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
 8003170:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003172:	e111      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003174:	4b8d      	ldr	r3, [pc, #564]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003176:	61bb      	str	r3, [r7, #24]
      break;
 8003178:	e10e      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800317a:	4b8d      	ldr	r3, [pc, #564]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800317c:	61bb      	str	r3, [r7, #24]
      break;
 800317e:	e10b      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003180:	4b8c      	ldr	r3, [pc, #560]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003182:	61bb      	str	r3, [r7, #24]
      break;
 8003184:	e108      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003186:	4b88      	ldr	r3, [pc, #544]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003190:	4b85      	ldr	r3, [pc, #532]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800319a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800319c:	4b82      	ldr	r3, [pc, #520]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031a6:	4b80      	ldr	r3, [pc, #512]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031aa:	08db      	lsrs	r3, r3, #3
 80031ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80e1 	beq.w	800338c <HAL_RCC_GetSysClockFreq+0x2b8>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	f000 8083 	beq.w	80032d8 <HAL_RCC_GetSysClockFreq+0x204>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	f200 80a1 	bhi.w	800331c <HAL_RCC_GetSysClockFreq+0x248>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x114>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d056      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031e6:	e099      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e8:	4b6f      	ldr	r3, [pc, #444]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02d      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031f4:	4b6c      	ldr	r3, [pc, #432]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	4a6b      	ldr	r2, [pc, #428]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321e:	4b62      	ldr	r3, [pc, #392]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003232:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800323a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800324e:	e087      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80033bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800325e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003262:	4b51      	ldr	r3, [pc, #324]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003272:	ed97 6a02 	vldr	s12, [r7, #8]
 8003276:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800327a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800328a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003292:	e065      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80033c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a6:	4b40      	ldr	r3, [pc, #256]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032d6:	e043      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80033c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ea:	4b2f      	ldr	r3, [pc, #188]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003316:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800331a:	e021      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b1e      	ldr	r3, [pc, #120]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003342:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003360:	4b11      	ldr	r3, [pc, #68]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	0a5b      	lsrs	r3, r3, #9
 8003366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800336a:	3301      	adds	r3, #1
 800336c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003378:	edd7 6a07 	vldr	s13, [r7, #28]
 800337c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003384:	ee17 3a90 	vmov	r3, s15
 8003388:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800338a:	e005      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
      break;
 8003390:	e002      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003394:	61bb      	str	r3, [r7, #24]
      break;
 8003396:	bf00      	nop
  }

  return sysclockfreq;
 8003398:	69bb      	ldr	r3, [r7, #24]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	@ 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	58024400 	.word	0x58024400
 80033ac:	03d09000 	.word	0x03d09000
 80033b0:	003d0900 	.word	0x003d0900
 80033b4:	007a1200 	.word	0x007a1200
 80033b8:	46000000 	.word	0x46000000
 80033bc:	4c742400 	.word	0x4c742400
 80033c0:	4a742400 	.word	0x4a742400
 80033c4:	4af42400 	.word	0x4af42400

080033c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033ce:	f7ff fe81 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <HAL_RCC_GetHCLKFreq+0x50>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	490f      	ldr	r1, [pc, #60]	@ (800341c <HAL_RCC_GetHCLKFreq+0x54>)
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	4a09      	ldr	r2, [pc, #36]	@ (800341c <HAL_RCC_GetHCLKFreq+0x54>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	4a07      	ldr	r2, [pc, #28]	@ (8003420 <HAL_RCC_GetHCLKFreq+0x58>)
 8003404:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003406:	4a07      	ldr	r2, [pc, #28]	@ (8003424 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800340c:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <HAL_RCC_GetHCLKFreq+0x58>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58024400 	.word	0x58024400
 800341c:	0800c678 	.word	0x0800c678
 8003420:	24000004 	.word	0x24000004
 8003424:	24000000 	.word	0x24000000

08003428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800342c:	f7ff ffcc 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4904      	ldr	r1, [pc, #16]	@ (8003450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	58024400 	.word	0x58024400
 8003450:	0800c678 	.word	0x0800c678

08003454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003458:	f7ff ffb6 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4904      	ldr	r1, [pc, #16]	@ (800347c <HAL_RCC_GetPCLK2Freq+0x28>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58024400 	.word	0x58024400
 800347c:	0800c678 	.word	0x0800c678

08003480 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b0ca      	sub	sp, #296	@ 0x128
 8003486:	af00      	add	r7, sp, #0
 8003488:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800348c:	2300      	movs	r3, #0
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003492:	2300      	movs	r3, #0
 8003494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80034a4:	2500      	movs	r5, #0
 80034a6:	ea54 0305 	orrs.w	r3, r4, r5
 80034aa:	d049      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034b6:	d02f      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034bc:	d828      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034c2:	d01a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034c8:	d822      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d2:	d007      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034d4:	e01c      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d6:	4bb8      	ldr	r3, [pc, #736]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	4ab7      	ldr	r2, [pc, #732]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034e2:	e01a      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e8:	3308      	adds	r3, #8
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fc8f 	bl	8004e10 <RCCEx_PLL2_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034f8:	e00f      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	3328      	adds	r3, #40	@ 0x28
 8003500:	2102      	movs	r1, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f001 fd36 	bl	8004f74 <RCCEx_PLL3_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800350e:	e004      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003522:	4ba5      	ldr	r3, [pc, #660]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003526:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003530:	4aa1      	ldr	r2, [pc, #644]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003532:	430b      	orrs	r3, r1
 8003534:	6513      	str	r3, [r2, #80]	@ 0x50
 8003536:	e003      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800353c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800354c:	f04f 0900 	mov.w	r9, #0
 8003550:	ea58 0309 	orrs.w	r3, r8, r9
 8003554:	d047      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	2b04      	cmp	r3, #4
 800355e:	d82a      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003560:	a201      	add	r2, pc, #4	@ (adr r2, 8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800357d 	.word	0x0800357d
 800356c:	0800358b 	.word	0x0800358b
 8003570:	080035a1 	.word	0x080035a1
 8003574:	080035bf 	.word	0x080035bf
 8003578:	080035bf 	.word	0x080035bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4b8e      	ldr	r3, [pc, #568]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	4a8d      	ldr	r2, [pc, #564]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003588:	e01a      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	3308      	adds	r3, #8
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fc3c 	bl	8004e10 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800359e:	e00f      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	3328      	adds	r3, #40	@ 0x28
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fce3 	bl	8004f74 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035b4:	e004      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035bc:	e000      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c8:	4b7b      	ldr	r3, [pc, #492]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035cc:	f023 0107 	bic.w	r1, r3, #7
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d6:	4a78      	ldr	r2, [pc, #480]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d8:	430b      	orrs	r3, r1
 80035da:	6513      	str	r3, [r2, #80]	@ 0x50
 80035dc:	e003      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80035f2:	f04f 0b00 	mov.w	fp, #0
 80035f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80035fa:	d04c      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003606:	d030      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800360c:	d829      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800360e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003610:	d02d      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003612:	2bc0      	cmp	r3, #192	@ 0xc0
 8003614:	d825      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003616:	2b80      	cmp	r3, #128	@ 0x80
 8003618:	d018      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d821      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003622:	2b40      	cmp	r3, #64	@ 0x40
 8003624:	d007      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003626:	e01c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4b63      	ldr	r3, [pc, #396]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	4a62      	ldr	r2, [pc, #392]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003634:	e01c      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	3308      	adds	r3, #8
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fbe6 	bl	8004e10 <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	3328      	adds	r3, #40	@ 0x28
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fc8d 	bl	8004f74 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003678:	4b4f      	ldr	r3, [pc, #316]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800367a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	4a4c      	ldr	r2, [pc, #304]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6513      	str	r3, [r2, #80]	@ 0x50
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80036a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80036b0:	460b      	mov	r3, r1
 80036b2:	4313      	orrs	r3, r2
 80036b4:	d053      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c2:	d035      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c8:	d82e      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036ce:	d031      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036d4:	d828      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036da:	d01a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e0:	d822      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036ea:	d007      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036ec:	e01c      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ee:	4b32      	ldr	r3, [pc, #200]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	4a31      	ldr	r2, [pc, #196]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036fa:	e01c      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003700:	3308      	adds	r3, #8
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fb83 	bl	8004e10 <RCCEx_PLL2_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003710:	e011      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	3328      	adds	r3, #40	@ 0x28
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f001 fc2a 	bl	8004f74 <RCCEx_PLL3_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003726:	e006      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800372e:	e002      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800373e:	4b1e      	ldr	r3, [pc, #120]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003742:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800374e:	4a1a      	ldr	r2, [pc, #104]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003750:	430b      	orrs	r3, r1
 8003752:	6593      	str	r3, [r2, #88]	@ 0x58
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800376a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800376e:	2300      	movs	r3, #0
 8003770:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003774:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003778:	460b      	mov	r3, r1
 800377a:	4313      	orrs	r3, r2
 800377c:	d056      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003782:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003786:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800378a:	d038      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800378c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003790:	d831      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003792:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003796:	d034      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003798:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800379c:	d82b      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800379e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037a2:	d01d      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037a8:	d825      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037b4:	e01f      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037b6:	bf00      	nop
 80037b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037bc:	4ba2      	ldr	r3, [pc, #648]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	4aa1      	ldr	r2, [pc, #644]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c8:	e01c      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	3308      	adds	r3, #8
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fb1c 	bl	8004e10 <RCCEx_PLL2_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037de:	e011      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e4:	3328      	adds	r3, #40	@ 0x28
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fbc3 	bl	8004f74 <RCCEx_PLL3_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037fc:	e002      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800380c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003810:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003818:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800381c:	4a8a      	ldr	r2, [pc, #552]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381e:	430b      	orrs	r3, r1
 8003820:	6593      	str	r3, [r2, #88]	@ 0x58
 8003822:	e003      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003838:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003842:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003846:	460b      	mov	r3, r1
 8003848:	4313      	orrs	r3, r2
 800384a:	d03a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003852:	2b30      	cmp	r3, #48	@ 0x30
 8003854:	d01f      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003856:	2b30      	cmp	r3, #48	@ 0x30
 8003858:	d819      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800385a:	2b20      	cmp	r3, #32
 800385c:	d00c      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800385e:	2b20      	cmp	r3, #32
 8003860:	d815      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d019      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003866:	2b10      	cmp	r3, #16
 8003868:	d111      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386a:	4b77      	ldr	r3, [pc, #476]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	4a76      	ldr	r2, [pc, #472]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003876:	e011      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	3308      	adds	r3, #8
 800387e:	2102      	movs	r1, #2
 8003880:	4618      	mov	r0, r3
 8003882:	f001 fac5 	bl	8004e10 <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800388c:	e006      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003894:	e002      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800389a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038a4:	4b68      	ldr	r3, [pc, #416]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b2:	4a65      	ldr	r2, [pc, #404]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b8:	e003      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80038ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038dc:	460b      	mov	r3, r1
 80038de:	4313      	orrs	r3, r2
 80038e0:	d051      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038ec:	d035      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f2:	d82e      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038f8:	d031      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038fe:	d828      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003904:	d01a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800390a:	d822      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003914:	d007      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003916:	e01c      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003918:	4b4b      	ldr	r3, [pc, #300]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003924:	e01c      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	3308      	adds	r3, #8
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fa6e 	bl	8004e10 <RCCEx_PLL2_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800393a:	e011      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	3328      	adds	r3, #40	@ 0x28
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fb15 	bl	8004f74 <RCCEx_PLL3_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003958:	e002      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003968:	4b37      	ldr	r3, [pc, #220]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003976:	4a34      	ldr	r2, [pc, #208]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003978:	430b      	orrs	r3, r1
 800397a:	6513      	str	r3, [r2, #80]	@ 0x50
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800399c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80039a0:	460b      	mov	r3, r1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	d056      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b0:	d033      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b6:	d82c      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039bc:	d02f      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039c2:	d826      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039c8:	d02b      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80039ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039ce:	d820      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d4:	d012      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039da:	d81a      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d022      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e4:	d115      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	3308      	adds	r3, #8
 80039ec:	2101      	movs	r1, #1
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fa0e 	bl	8004e10 <RCCEx_PLL2_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039fa:	e015      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	3328      	adds	r3, #40	@ 0x28
 8003a02:	2101      	movs	r1, #1
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 fab5 	bl	8004f74 <RCCEx_PLL3_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a10:	e00a      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a18:	e006      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e004      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e002      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10d      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a3e:	4a02      	ldr	r2, [pc, #8]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a44:	e006      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a46:	bf00      	nop
 8003a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4313      	orrs	r3, r2
 8003a72:	d055      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a80:	d033      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a86:	d82c      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8c:	d02f      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a92:	d826      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a98:	d02b      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a9e:	d820      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa4:	d012      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aaa:	d81a      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d022      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab4:	d115      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	3308      	adds	r3, #8
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 f9a6 	bl	8004e10 <RCCEx_PLL2_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003aca:	e015      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad0:	3328      	adds	r3, #40	@ 0x28
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 fa4d 	bl	8004f74 <RCCEx_PLL3_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae8:	e006      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aea:	bf00      	nop
 8003aec:	e004      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aee:	bf00      	nop
 8003af0:	e002      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b00:	4ba3      	ldr	r3, [pc, #652]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b10:	4a9f      	ldr	r2, [pc, #636]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	d037      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b4a:	d00e      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b50:	d816      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d018      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b5a:	d111      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	4a8b      	ldr	r2, [pc, #556]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b68:	e00f      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	3308      	adds	r3, #8
 8003b70:	2101      	movs	r1, #1
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 f94c 	bl	8004e10 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b7e:	e004      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b92:	4b7f      	ldr	r3, [pc, #508]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b96:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	4a7b      	ldr	r2, [pc, #492]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ba6:	e003      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003bc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	d039      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d81c      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003bda:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c1d 	.word	0x08003c1d
 8003be4:	08003bf1 	.word	0x08003bf1
 8003be8:	08003bff 	.word	0x08003bff
 8003bec:	08003c1d 	.word	0x08003c1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf0:	4b67      	ldr	r3, [pc, #412]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	4a66      	ldr	r2, [pc, #408]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bfc:	e00f      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	3308      	adds	r3, #8
 8003c04:	2102      	movs	r1, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 f902 	bl	8004e10 <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c26:	4b5a      	ldr	r3, [pc, #360]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2a:	f023 0103 	bic.w	r1, r3, #3
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c34:	4a56      	ldr	r2, [pc, #344]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	430b      	orrs	r3, r1
 8003c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f000 809f 	beq.w	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c66:	4b4b      	ldr	r3, [pc, #300]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c72:	f7fe f8c7 	bl	8001e04 <HAL_GetTick>
 8003c76:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7c:	f7fe f8c2 	bl	8001e04 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b64      	cmp	r3, #100	@ 0x64
 8003c8a:	d903      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c92:	e005      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c94:	4b3f      	ldr	r3, [pc, #252]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ed      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d179      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ca8:	4b39      	ldr	r3, [pc, #228]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003caa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cb4:	4053      	eors	r3, r2
 8003cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbe:	4b34      	ldr	r3, [pc, #208]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cca:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	4a30      	ldr	r2, [pc, #192]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	4a2d      	ldr	r2, [pc, #180]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ce8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf6:	d118      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe f884 	bl	8001e04 <HAL_GetTick>
 8003cfc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d00:	e00d      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fe f87f 	bl	8001e04 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d0c:	1ad2      	subs	r2, r2, r3
 8003d0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d903      	bls.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d1c:	e005      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0eb      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d129      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d42:	d10e      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d44:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d54:	091a      	lsrs	r2, r3, #4
 8003d56:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6113      	str	r3, [r2, #16]
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d62:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	4a0a      	ldr	r2, [pc, #40]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d6c:	6113      	str	r3, [r2, #16]
 8003d6e:	4b08      	ldr	r3, [pc, #32]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d70:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7e:	4a04      	ldr	r2, [pc, #16]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d84:	e00e      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003d8e:	e009      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d90:	58024400 	.word	0x58024400
 8003d94:	58024800 	.word	0x58024800
 8003d98:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f002 0301 	and.w	r3, r2, #1
 8003db0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f000 8089 	beq.w	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dcc:	2b28      	cmp	r3, #40	@ 0x28
 8003dce:	d86b      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003eb1 	.word	0x08003eb1
 8003ddc:	08003ea9 	.word	0x08003ea9
 8003de0:	08003ea9 	.word	0x08003ea9
 8003de4:	08003ea9 	.word	0x08003ea9
 8003de8:	08003ea9 	.word	0x08003ea9
 8003dec:	08003ea9 	.word	0x08003ea9
 8003df0:	08003ea9 	.word	0x08003ea9
 8003df4:	08003ea9 	.word	0x08003ea9
 8003df8:	08003e7d 	.word	0x08003e7d
 8003dfc:	08003ea9 	.word	0x08003ea9
 8003e00:	08003ea9 	.word	0x08003ea9
 8003e04:	08003ea9 	.word	0x08003ea9
 8003e08:	08003ea9 	.word	0x08003ea9
 8003e0c:	08003ea9 	.word	0x08003ea9
 8003e10:	08003ea9 	.word	0x08003ea9
 8003e14:	08003ea9 	.word	0x08003ea9
 8003e18:	08003e93 	.word	0x08003e93
 8003e1c:	08003ea9 	.word	0x08003ea9
 8003e20:	08003ea9 	.word	0x08003ea9
 8003e24:	08003ea9 	.word	0x08003ea9
 8003e28:	08003ea9 	.word	0x08003ea9
 8003e2c:	08003ea9 	.word	0x08003ea9
 8003e30:	08003ea9 	.word	0x08003ea9
 8003e34:	08003ea9 	.word	0x08003ea9
 8003e38:	08003eb1 	.word	0x08003eb1
 8003e3c:	08003ea9 	.word	0x08003ea9
 8003e40:	08003ea9 	.word	0x08003ea9
 8003e44:	08003ea9 	.word	0x08003ea9
 8003e48:	08003ea9 	.word	0x08003ea9
 8003e4c:	08003ea9 	.word	0x08003ea9
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003eb1 	.word	0x08003eb1
 8003e5c:	08003ea9 	.word	0x08003ea9
 8003e60:	08003ea9 	.word	0x08003ea9
 8003e64:	08003ea9 	.word	0x08003ea9
 8003e68:	08003ea9 	.word	0x08003ea9
 8003e6c:	08003ea9 	.word	0x08003ea9
 8003e70:	08003ea9 	.word	0x08003ea9
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003eb1 	.word	0x08003eb1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e80:	3308      	adds	r3, #8
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 ffc3 	bl	8004e10 <RCCEx_PLL2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e90:	e00f      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	3328      	adds	r3, #40	@ 0x28
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f86a 	bl	8004f74 <RCCEx_PLL3_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eba:	4bbf      	ldr	r3, [pc, #764]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ec8:	4abb      	ldr	r2, [pc, #748]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f002 0302 	and.w	r3, r2, #2
 8003ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003eee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	d041      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d824      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f02:	a201      	add	r2, pc, #4	@ (adr r2, 8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f55 	.word	0x08003f55
 8003f0c:	08003f21 	.word	0x08003f21
 8003f10:	08003f37 	.word	0x08003f37
 8003f14:	08003f55 	.word	0x08003f55
 8003f18:	08003f55 	.word	0x08003f55
 8003f1c:	08003f55 	.word	0x08003f55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	3308      	adds	r3, #8
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 ff71 	bl	8004e10 <RCCEx_PLL2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f34:	e00f      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	3328      	adds	r3, #40	@ 0x28
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f818 	bl	8004f74 <RCCEx_PLL3_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f5e:	4b96      	ldr	r3, [pc, #600]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f62:	f023 0107 	bic.w	r1, r3, #7
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f6c:	4a92      	ldr	r2, [pc, #584]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f72:	e003      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f002 0304 	and.w	r3, r2, #4
 8003f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	d044      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d825      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003ffd 	.word	0x08003ffd
 8003fb4:	08003fc9 	.word	0x08003fc9
 8003fb8:	08003fdf 	.word	0x08003fdf
 8003fbc:	08003ffd 	.word	0x08003ffd
 8003fc0:	08003ffd 	.word	0x08003ffd
 8003fc4:	08003ffd 	.word	0x08003ffd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fcc:	3308      	adds	r3, #8
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 ff1d 	bl	8004e10 <RCCEx_PLL2_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fdc:	e00f      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	3328      	adds	r3, #40	@ 0x28
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 ffc4 	bl	8004f74 <RCCEx_PLL3_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ff2:	e004      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004006:	4b6c      	ldr	r3, [pc, #432]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	f023 0107 	bic.w	r1, r3, #7
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004016:	4a68      	ldr	r2, [pc, #416]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6593      	str	r3, [r2, #88]	@ 0x58
 800401c:	e003      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f002 0320 	and.w	r3, r2, #32
 8004032:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800403c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d055      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004052:	d033      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004058:	d82c      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405e:	d02f      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004064:	d826      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004066:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800406a:	d02b      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800406c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004070:	d820      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004076:	d012      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800407c:	d81a      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d022      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004086:	d115      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408c:	3308      	adds	r3, #8
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f000 febd 	bl	8004e10 <RCCEx_PLL2_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800409c:	e015      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	3328      	adds	r3, #40	@ 0x28
 80040a4:	2102      	movs	r1, #2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 ff64 	bl	8004f74 <RCCEx_PLL3_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040b2:	e00a      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ba:	e006      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040bc:	bf00      	nop
 80040be:	e004      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040c0:	bf00      	nop
 80040c2:	e002      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040c4:	bf00      	nop
 80040c6:	e000      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d2:	4b39      	ldr	r3, [pc, #228]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	4a35      	ldr	r2, [pc, #212]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80040e8:	e003      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80040fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004108:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800410c:	460b      	mov	r3, r1
 800410e:	4313      	orrs	r3, r2
 8004110:	d058      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800411a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800411e:	d033      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004120:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004124:	d82c      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800412a:	d02f      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800412c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004130:	d826      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004132:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004136:	d02b      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004138:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800413c:	d820      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800413e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004142:	d012      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004148:	d81a      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d022      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004152:	d115      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	3308      	adds	r3, #8
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe57 	bl	8004e10 <RCCEx_PLL2_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004168:	e015      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	3328      	adds	r3, #40	@ 0x28
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fefe 	bl	8004f74 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800417e:	e00a      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004186:	e006      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004188:	bf00      	nop
 800418a:	e004      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800418c:	bf00      	nop
 800418e:	e002      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004190:	bf00      	nop
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10e      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ae:	4a02      	ldr	r2, [pc, #8]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b4:	e006      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041b6:	bf00      	nop
 80041b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80041d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041de:	460b      	mov	r3, r1
 80041e0:	4313      	orrs	r3, r2
 80041e2:	d055      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041f0:	d033      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041f6:	d82c      	bhi.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041fc:	d02f      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004202:	d826      	bhi.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004204:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004208:	d02b      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800420a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800420e:	d820      	bhi.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004214:	d012      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800421a:	d81a      	bhi.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d022      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004224:	d115      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	3308      	adds	r3, #8
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fdee 	bl	8004e10 <RCCEx_PLL2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800423a:	e015      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004240:	3328      	adds	r3, #40	@ 0x28
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fe95 	bl	8004f74 <RCCEx_PLL3_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004250:	e00a      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004258:	e006      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800425a:	bf00      	nop
 800425c:	e004      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800425e:	bf00      	nop
 8004260:	e002      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004262:	bf00      	nop
 8004264:	e000      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004270:	4ba1      	ldr	r3, [pc, #644]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004274:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004280:	4a9d      	ldr	r2, [pc, #628]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004282:	430b      	orrs	r3, r1
 8004284:	6593      	str	r3, [r2, #88]	@ 0x58
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 0308 	and.w	r3, r2, #8
 800429c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	d01e      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	3328      	adds	r3, #40	@ 0x28
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fe54 	bl	8004f74 <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042d8:	4b87      	ldr	r3, [pc, #540]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e8:	4a83      	ldr	r2, [pc, #524]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ea:	430b      	orrs	r3, r1
 80042ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f002 0310 	and.w	r3, r2, #16
 80042fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042fe:	2300      	movs	r3, #0
 8004300:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004304:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004308:	460b      	mov	r3, r1
 800430a:	4313      	orrs	r3, r2
 800430c:	d01e      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800431a:	d10c      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	3328      	adds	r3, #40	@ 0x28
 8004322:	2102      	movs	r1, #2
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fe25 	bl	8004f74 <RCCEx_PLL3_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004336:	4b70      	ldr	r3, [pc, #448]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004346:	4a6c      	ldr	r2, [pc, #432]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004348:	430b      	orrs	r3, r1
 800434a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004358:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800435c:	2300      	movs	r3, #0
 800435e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004362:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004366:	460b      	mov	r3, r1
 8004368:	4313      	orrs	r3, r2
 800436a:	d03e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004378:	d022      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800437a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800437e:	d81b      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004388:	d00b      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800438a:	e015      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	3308      	adds	r3, #8
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fd3b 	bl	8004e10 <RCCEx_PLL2_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043a0:	e00f      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	3328      	adds	r3, #40	@ 0x28
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fde2 	bl	8004f74 <RCCEx_PLL3_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ca:	4b4b      	ldr	r3, [pc, #300]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043da:	4a47      	ldr	r2, [pc, #284]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e0:	e003      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80043f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043f8:	2300      	movs	r3, #0
 80043fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d03b      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004412:	d01f      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004414:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004418:	d818      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800441a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800441e:	d003      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004424:	d007      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004426:	e011      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004428:	4b33      	ldr	r3, [pc, #204]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	4a32      	ldr	r2, [pc, #200]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004434:	e00f      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	3328      	adds	r3, #40	@ 0x28
 800443c:	2101      	movs	r1, #1
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fd98 	bl	8004f74 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800444a:	e004      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800445e:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004462:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	4a22      	ldr	r2, [pc, #136]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004470:	430b      	orrs	r3, r1
 8004472:	6553      	str	r3, [r2, #84]	@ 0x54
 8004474:	e003      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800447a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800448a:	673b      	str	r3, [r7, #112]	@ 0x70
 800448c:	2300      	movs	r3, #0
 800448e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004490:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004494:	460b      	mov	r3, r1
 8004496:	4313      	orrs	r3, r2
 8004498:	d034      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a8:	d007      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044aa:	e011      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ac:	4b12      	ldr	r3, [pc, #72]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	4a11      	ldr	r2, [pc, #68]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044b8:	e00e      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	3308      	adds	r3, #8
 80044c0:	2102      	movs	r1, #2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fca4 	bl	8004e10 <RCCEx_PLL2_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10d      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044e0:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ee:	4a02      	ldr	r2, [pc, #8]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044f4:	e006      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80044f6:	bf00      	nop
 80044f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004512:	2300      	movs	r3, #0
 8004514:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004516:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800451a:	460b      	mov	r3, r1
 800451c:	4313      	orrs	r3, r2
 800451e:	d00c      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	3328      	adds	r3, #40	@ 0x28
 8004526:	2102      	movs	r1, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fd23 	bl	8004f74 <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004546:	663b      	str	r3, [r7, #96]	@ 0x60
 8004548:	2300      	movs	r3, #0
 800454a:	667b      	str	r3, [r7, #100]	@ 0x64
 800454c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004550:	460b      	mov	r3, r1
 8004552:	4313      	orrs	r3, r2
 8004554:	d038      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800455e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004562:	d018      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004568:	d811      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800456a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800456e:	d014      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004574:	d80b      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d011      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800457a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800457e:	d106      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004580:	4bc3      	ldr	r3, [pc, #780]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	4ac2      	ldr	r2, [pc, #776]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800458a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800458c:	e008      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004594:	e004      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004596:	bf00      	nop
 8004598:	e002      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800459a:	bf00      	nop
 800459c:	e000      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800459e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045a8:	4bb9      	ldr	r3, [pc, #740]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045b8:	4ab5      	ldr	r2, [pc, #724]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80045be:	e003      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045d6:	2300      	movs	r3, #0
 80045d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045e4:	4baa      	ldr	r3, [pc, #680]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f2:	4aa7      	ldr	r2, [pc, #668]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004604:	653b      	str	r3, [r7, #80]	@ 0x50
 8004606:	2300      	movs	r3, #0
 8004608:	657b      	str	r3, [r7, #84]	@ 0x54
 800460a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800460e:	460b      	mov	r3, r1
 8004610:	4313      	orrs	r3, r2
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004614:	4b9e      	ldr	r3, [pc, #632]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004620:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004624:	4a9a      	ldr	r2, [pc, #616]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004626:	430b      	orrs	r3, r1
 8004628:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004638:	2300      	movs	r3, #0
 800463a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800463c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004646:	4b92      	ldr	r3, [pc, #584]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004654:	4a8e      	ldr	r2, [pc, #568]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004656:	430b      	orrs	r3, r1
 8004658:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004666:	643b      	str	r3, [r7, #64]	@ 0x40
 8004668:	2300      	movs	r3, #0
 800466a:	647b      	str	r3, [r7, #68]	@ 0x44
 800466c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004670:	460b      	mov	r3, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004676:	4b86      	ldr	r3, [pc, #536]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	4a85      	ldr	r2, [pc, #532]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800467c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004680:	6113      	str	r3, [r2, #16]
 8004682:	4b83      	ldr	r3, [pc, #524]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004684:	6919      	ldr	r1, [r3, #16]
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800468e:	4a80      	ldr	r2, [pc, #512]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004690:	430b      	orrs	r3, r1
 8004692:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80046a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046a2:	2300      	movs	r3, #0
 80046a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046b0:	4b77      	ldr	r3, [pc, #476]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	4a74      	ldr	r2, [pc, #464]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c0:	430b      	orrs	r3, r1
 80046c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80046d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d2:	2300      	movs	r3, #0
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80046da:	460b      	mov	r3, r1
 80046dc:	4313      	orrs	r3, r2
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046f0:	4a67      	ldr	r2, [pc, #412]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	2100      	movs	r1, #0
 8004700:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004708:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800470c:	460b      	mov	r3, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	d011      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	3308      	adds	r3, #8
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fb78 	bl	8004e10 <RCCEx_PLL2_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	2100      	movs	r1, #0
 8004740:	6239      	str	r1, [r7, #32]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
 8004748:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800474c:	460b      	mov	r3, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	d011      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004756:	3308      	adds	r3, #8
 8004758:	2101      	movs	r1, #1
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fb58 	bl	8004e10 <RCCEx_PLL2_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	2100      	movs	r1, #0
 8004780:	61b9      	str	r1, [r7, #24]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800478c:	460b      	mov	r3, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	d011      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	3308      	adds	r3, #8
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fb38 	bl	8004e10 <RCCEx_PLL2_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	2100      	movs	r1, #0
 80047c0:	6139      	str	r1, [r7, #16]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d011      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	3328      	adds	r3, #40	@ 0x28
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fbca 	bl	8004f74 <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	2100      	movs	r1, #0
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	3328      	adds	r3, #40	@ 0x28
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fbaa 	bl	8004f74 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	2100      	movs	r1, #0
 8004840:	6039      	str	r1, [r7, #0]
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	e9d7 1200 	ldrd	r1, r2, [r7]
 800484c:	460b      	mov	r3, r1
 800484e:	4313      	orrs	r3, r2
 8004850:	d011      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	3328      	adds	r3, #40	@ 0x28
 8004858:	2102      	movs	r1, #2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb8a 	bl	8004f74 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004876:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
}
 8004884:	4618      	mov	r0, r3
 8004886:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800488a:	46bd      	mov	sp, r7
 800488c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004890:	58024400 	.word	0x58024400

08004894 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004898:	f7fe fd96 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	4904      	ldr	r1, [pc, #16]	@ (80048bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	58024400 	.word	0x58024400
 80048bc:	0800c678 	.word	0x0800c678

080048c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	@ 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048d2:	4b9f      	ldr	r3, [pc, #636]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	0b1b      	lsrs	r3, r3, #12
 80048d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048de:	4b9c      	ldr	r3, [pc, #624]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048ea:	4b99      	ldr	r3, [pc, #612]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	08db      	lsrs	r3, r3, #3
 80048f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8111 	beq.w	8004b30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b02      	cmp	r3, #2
 8004912:	f000 8083 	beq.w	8004a1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b02      	cmp	r3, #2
 800491a:	f200 80a1 	bhi.w	8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d056      	beq.n	80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800492a:	e099      	b.n	8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800492c:	4b88      	ldr	r3, [pc, #544]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02d      	beq.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004938:	4b85      	ldr	r3, [pc, #532]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	08db      	lsrs	r3, r3, #3
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	4a84      	ldr	r2, [pc, #528]	@ (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
 8004948:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b7b      	ldr	r3, [pc, #492]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a03 	vldr	s12, [r7, #12]
 8004976:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004992:	e087      	b.n	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049d6:	e065      	b.n	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ea:	4b59      	ldr	r3, [pc, #356]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a1a:	e043      	b.n	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2e:	4b48      	ldr	r3, [pc, #288]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a5e:	e021      	b.n	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a72:	4b37      	ldr	r3, [pc, #220]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	0a5b      	lsrs	r3, r3, #9
 8004aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aca:	ee17 2a90 	vmov	r2, s15
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af8:	ee17 2a90 	vmov	r2, s15
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b00:	4b13      	ldr	r3, [pc, #76]	@ (8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	0e1b      	lsrs	r3, r3, #24
 8004b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b26:	ee17 2a90 	vmov	r2, s15
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b2e:	e008      	b.n	8004b42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
}
 8004b42:	bf00      	nop
 8004b44:	3724      	adds	r7, #36	@ 0x24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	58024400 	.word	0x58024400
 8004b54:	03d09000 	.word	0x03d09000
 8004b58:	46000000 	.word	0x46000000
 8004b5c:	4c742400 	.word	0x4c742400
 8004b60:	4a742400 	.word	0x4a742400
 8004b64:	4af42400 	.word	0x4af42400

08004b68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b089      	sub	sp, #36	@ 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b70:	4ba1      	ldr	r3, [pc, #644]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b7a:	4b9f      	ldr	r3, [pc, #636]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	0d1b      	lsrs	r3, r3, #20
 8004b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b86:	4b9c      	ldr	r3, [pc, #624]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b92:	4b99      	ldr	r3, [pc, #612]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	08db      	lsrs	r3, r3, #3
 8004b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8111 	beq.w	8004dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f000 8083 	beq.w	8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	f200 80a1 	bhi.w	8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d056      	beq.n	8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bd2:	e099      	b.n	8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bd4:	4b88      	ldr	r3, [pc, #544]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02d      	beq.n	8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004be0:	4b85      	ldr	r3, [pc, #532]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	08db      	lsrs	r3, r3, #3
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	4a84      	ldr	r2, [pc, #528]	@ (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c3a:	e087      	b.n	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c7e:	e065      	b.n	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c92:	4b59      	ldr	r3, [pc, #356]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc2:	e043      	b.n	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd6:	4b48      	ldr	r3, [pc, #288]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d06:	e021      	b.n	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1a:	4b37      	ldr	r3, [pc, #220]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d50:	0a5b      	lsrs	r3, r3, #9
 8004d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d72:	ee17 2a90 	vmov	r2, s15
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	0c1b      	lsrs	r3, r3, #16
 8004d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d84:	ee07 3a90 	vmov	s15, r3
 8004d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da0:	ee17 2a90 	vmov	r2, s15
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004da8:	4b13      	ldr	r3, [pc, #76]	@ (8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dac:	0e1b      	lsrs	r3, r3, #24
 8004dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dce:	ee17 2a90 	vmov	r2, s15
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dd6:	e008      	b.n	8004dea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
}
 8004dea:	bf00      	nop
 8004dec:	3724      	adds	r7, #36	@ 0x24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	03d09000 	.word	0x03d09000
 8004e00:	46000000 	.word	0x46000000
 8004e04:	4c742400 	.word	0x4c742400
 8004e08:	4a742400 	.word	0x4a742400
 8004e0c:	4af42400 	.word	0x4af42400

08004e10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e1e:	4b53      	ldr	r3, [pc, #332]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d101      	bne.n	8004e2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e099      	b.n	8004f62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a4e      	ldr	r2, [pc, #312]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004e34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3a:	f7fc ffe3 	bl	8001e04 <HAL_GetTick>
 8004e3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e40:	e008      	b.n	8004e54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e42:	f7fc ffdf 	bl	8001e04 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e086      	b.n	8004f62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e54:	4b45      	ldr	r3, [pc, #276]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e60:	4b42      	ldr	r3, [pc, #264]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	031b      	lsls	r3, r3, #12
 8004e6e:	493f      	ldr	r1, [pc, #252]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	025b      	lsls	r3, r3, #9
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	061b      	lsls	r3, r3, #24
 8004ea0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ea4:	4931      	ldr	r1, [pc, #196]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004eaa:	4b30      	ldr	r3, [pc, #192]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	492d      	ldr	r1, [pc, #180]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	f023 0220 	bic.w	r2, r3, #32
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4928      	ldr	r1, [pc, #160]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ece:	4b27      	ldr	r3, [pc, #156]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004ed4:	f023 0310 	bic.w	r3, r3, #16
 8004ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004eda:	4b24      	ldr	r3, [pc, #144]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <RCCEx_PLL2_Config+0x160>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	69d2      	ldr	r2, [r2, #28]
 8004ee6:	00d2      	lsls	r2, r2, #3
 8004ee8:	4920      	ldr	r1, [pc, #128]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004eee:	4b1f      	ldr	r3, [pc, #124]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	f043 0310 	orr.w	r3, r3, #16
 8004ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f00:	4b1a      	ldr	r3, [pc, #104]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	4a19      	ldr	r2, [pc, #100]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f0c:	e00f      	b.n	8004f2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d106      	bne.n	8004f22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f14:	4b15      	ldr	r3, [pc, #84]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	4a14      	ldr	r2, [pc, #80]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f20:	e005      	b.n	8004f2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f22:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	4a11      	ldr	r2, [pc, #68]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a0e      	ldr	r2, [pc, #56]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fc ff63 	bl	8001e04 <HAL_GetTick>
 8004f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f40:	e008      	b.n	8004f54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f42:	f7fc ff5f 	bl	8001e04 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e006      	b.n	8004f62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f54:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <RCCEx_PLL2_Config+0x15c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	ffff0007 	.word	0xffff0007

08004f74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f82:	4b53      	ldr	r3, [pc, #332]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d101      	bne.n	8004f92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e099      	b.n	80050c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f92:	4b4f      	ldr	r3, [pc, #316]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a4e      	ldr	r2, [pc, #312]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8004f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9e:	f7fc ff31 	bl	8001e04 <HAL_GetTick>
 8004fa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fa4:	e008      	b.n	8004fb8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fa6:	f7fc ff2d 	bl	8001e04 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e086      	b.n	80050c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fb8:	4b45      	ldr	r3, [pc, #276]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f0      	bne.n	8004fa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fc4:	4b42      	ldr	r3, [pc, #264]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	051b      	lsls	r3, r3, #20
 8004fd2:	493f      	ldr	r1, [pc, #252]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	025b      	lsls	r3, r3, #9
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	041b      	lsls	r3, r3, #16
 8004ff6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	3b01      	subs	r3, #1
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005008:	4931      	ldr	r1, [pc, #196]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800500e:	4b30      	ldr	r3, [pc, #192]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	492d      	ldr	r1, [pc, #180]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	4928      	ldr	r1, [pc, #160]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005032:	4b27      	ldr	r3, [pc, #156]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	4a26      	ldr	r2, [pc, #152]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800503c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800503e:	4b24      	ldr	r3, [pc, #144]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <RCCEx_PLL3_Config+0x160>)
 8005044:	4013      	ands	r3, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	69d2      	ldr	r2, [r2, #28]
 800504a:	00d2      	lsls	r2, r2, #3
 800504c:	4920      	ldr	r1, [pc, #128]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005052:	4b1f      	ldr	r3, [pc, #124]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	4a1e      	ldr	r2, [pc, #120]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005064:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	4a19      	ldr	r2, [pc, #100]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 800506a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800506e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005070:	e00f      	b.n	8005092 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005078:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	4a14      	ldr	r2, [pc, #80]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 800507e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005082:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005084:	e005      	b.n	8005092 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005086:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	4a11      	ldr	r2, [pc, #68]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 800508c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005090:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005092:	4b0f      	ldr	r3, [pc, #60]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a0e      	ldr	r2, [pc, #56]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 8005098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509e:	f7fc feb1 	bl	8001e04 <HAL_GetTick>
 80050a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050a4:	e008      	b.n	80050b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050a6:	f7fc fead 	bl	8001e04 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e006      	b.n	80050c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050b8:	4b05      	ldr	r3, [pc, #20]	@ (80050d0 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	58024400 	.word	0x58024400
 80050d4:	ffff0007 	.word	0xffff0007

080050d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e049      	b.n	800517e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc fbd2 	bl	80018a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f000 f9aa 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e049      	b.n	800522c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f841 	bl	8005234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f000 f953 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005262:	2302      	movs	r3, #2
 8005264:	e0ff      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b14      	cmp	r3, #20
 8005272:	f200 80f0 	bhi.w	8005456 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005276:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	080052d1 	.word	0x080052d1
 8005280:	08005457 	.word	0x08005457
 8005284:	08005457 	.word	0x08005457
 8005288:	08005457 	.word	0x08005457
 800528c:	08005311 	.word	0x08005311
 8005290:	08005457 	.word	0x08005457
 8005294:	08005457 	.word	0x08005457
 8005298:	08005457 	.word	0x08005457
 800529c:	08005353 	.word	0x08005353
 80052a0:	08005457 	.word	0x08005457
 80052a4:	08005457 	.word	0x08005457
 80052a8:	08005457 	.word	0x08005457
 80052ac:	08005393 	.word	0x08005393
 80052b0:	08005457 	.word	0x08005457
 80052b4:	08005457 	.word	0x08005457
 80052b8:	08005457 	.word	0x08005457
 80052bc:	080053d5 	.word	0x080053d5
 80052c0:	08005457 	.word	0x08005457
 80052c4:	08005457 	.word	0x08005457
 80052c8:	08005457 	.word	0x08005457
 80052cc:	08005415 	.word	0x08005415
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f970 	bl	80055bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0208 	orr.w	r2, r2, #8
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0204 	bic.w	r2, r2, #4
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	619a      	str	r2, [r3, #24]
      break;
 800530e:	e0a5      	b.n	800545c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f9e0 	bl	80056dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800532a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800533a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6999      	ldr	r1, [r3, #24]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	021a      	lsls	r2, r3, #8
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	619a      	str	r2, [r3, #24]
      break;
 8005350:	e084      	b.n	800545c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fa49 	bl	80057f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0208 	orr.w	r2, r2, #8
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0204 	bic.w	r2, r2, #4
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	61da      	str	r2, [r3, #28]
      break;
 8005390:	e064      	b.n	800545c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fab1 	bl	8005900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69d9      	ldr	r1, [r3, #28]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	021a      	lsls	r2, r3, #8
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	61da      	str	r2, [r3, #28]
      break;
 80053d2:	e043      	b.n	800545c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fafa 	bl	80059d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0208 	orr.w	r2, r2, #8
 80053ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0204 	bic.w	r2, r2, #4
 80053fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005412:	e023      	b.n	800545c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fb3e 	bl	8005a9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800542e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800543e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	021a      	lsls	r2, r3, #8
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005454:	e002      	b.n	800545c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a46      	ldr	r2, [pc, #280]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548e:	d00f      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a43      	ldr	r2, [pc, #268]	@ (80055a0 <TIM_Base_SetConfig+0x130>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00b      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a42      	ldr	r2, [pc, #264]	@ (80055a4 <TIM_Base_SetConfig+0x134>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a41      	ldr	r2, [pc, #260]	@ (80055a8 <TIM_Base_SetConfig+0x138>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a40      	ldr	r2, [pc, #256]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a35      	ldr	r2, [pc, #212]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01f      	beq.n	800550a <TIM_Base_SetConfig+0x9a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d0:	d01b      	beq.n	800550a <TIM_Base_SetConfig+0x9a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a32      	ldr	r2, [pc, #200]	@ (80055a0 <TIM_Base_SetConfig+0x130>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d017      	beq.n	800550a <TIM_Base_SetConfig+0x9a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a31      	ldr	r2, [pc, #196]	@ (80055a4 <TIM_Base_SetConfig+0x134>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <TIM_Base_SetConfig+0x9a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a30      	ldr	r2, [pc, #192]	@ (80055a8 <TIM_Base_SetConfig+0x138>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00f      	beq.n	800550a <TIM_Base_SetConfig+0x9a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2f      	ldr	r2, [pc, #188]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00b      	beq.n	800550a <TIM_Base_SetConfig+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2e      	ldr	r2, [pc, #184]	@ (80055b0 <TIM_Base_SetConfig+0x140>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d007      	beq.n	800550a <TIM_Base_SetConfig+0x9a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2d      	ldr	r2, [pc, #180]	@ (80055b4 <TIM_Base_SetConfig+0x144>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_Base_SetConfig+0x9a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2c      	ldr	r2, [pc, #176]	@ (80055b8 <TIM_Base_SetConfig+0x148>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d108      	bne.n	800551c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a16      	ldr	r2, [pc, #88]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00f      	beq.n	8005568 <TIM_Base_SetConfig+0xf8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a18      	ldr	r2, [pc, #96]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00b      	beq.n	8005568 <TIM_Base_SetConfig+0xf8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a17      	ldr	r2, [pc, #92]	@ (80055b0 <TIM_Base_SetConfig+0x140>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d007      	beq.n	8005568 <TIM_Base_SetConfig+0xf8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a16      	ldr	r2, [pc, #88]	@ (80055b4 <TIM_Base_SetConfig+0x144>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0xf8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a15      	ldr	r2, [pc, #84]	@ (80055b8 <TIM_Base_SetConfig+0x148>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d103      	bne.n	8005570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b01      	cmp	r3, #1
 8005580:	d105      	bne.n	800558e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]
  }
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800

080055bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f023 0201 	bic.w	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4b37      	ldr	r3, [pc, #220]	@ (80056c4 <TIM_OC1_SetConfig+0x108>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f023 0302 	bic.w	r3, r3, #2
 8005604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2d      	ldr	r2, [pc, #180]	@ (80056c8 <TIM_OC1_SetConfig+0x10c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00f      	beq.n	8005638 <TIM_OC1_SetConfig+0x7c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a2c      	ldr	r2, [pc, #176]	@ (80056cc <TIM_OC1_SetConfig+0x110>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00b      	beq.n	8005638 <TIM_OC1_SetConfig+0x7c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a2b      	ldr	r2, [pc, #172]	@ (80056d0 <TIM_OC1_SetConfig+0x114>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <TIM_OC1_SetConfig+0x7c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a2a      	ldr	r2, [pc, #168]	@ (80056d4 <TIM_OC1_SetConfig+0x118>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC1_SetConfig+0x7c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a29      	ldr	r2, [pc, #164]	@ (80056d8 <TIM_OC1_SetConfig+0x11c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d10c      	bne.n	8005652 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0308 	bic.w	r3, r3, #8
 800563e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1c      	ldr	r2, [pc, #112]	@ (80056c8 <TIM_OC1_SetConfig+0x10c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_OC1_SetConfig+0xbe>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <TIM_OC1_SetConfig+0x110>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_OC1_SetConfig+0xbe>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1a      	ldr	r2, [pc, #104]	@ (80056d0 <TIM_OC1_SetConfig+0x114>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_OC1_SetConfig+0xbe>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a19      	ldr	r2, [pc, #100]	@ (80056d4 <TIM_OC1_SetConfig+0x118>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_OC1_SetConfig+0xbe>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a18      	ldr	r2, [pc, #96]	@ (80056d8 <TIM_OC1_SetConfig+0x11c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d111      	bne.n	800569e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	fffeff8f 	.word	0xfffeff8f
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40010400 	.word	0x40010400
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800

080056dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0210 	bic.w	r2, r3, #16
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4b34      	ldr	r3, [pc, #208]	@ (80057d8 <TIM_OC2_SetConfig+0xfc>)
 8005708:	4013      	ands	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0320 	bic.w	r3, r3, #32
 8005726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a29      	ldr	r2, [pc, #164]	@ (80057dc <TIM_OC2_SetConfig+0x100>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC2_SetConfig+0x68>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a28      	ldr	r2, [pc, #160]	@ (80057e0 <TIM_OC2_SetConfig+0x104>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d10d      	bne.n	8005760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800574a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800575e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a1e      	ldr	r2, [pc, #120]	@ (80057dc <TIM_OC2_SetConfig+0x100>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00f      	beq.n	8005788 <TIM_OC2_SetConfig+0xac>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a1d      	ldr	r2, [pc, #116]	@ (80057e0 <TIM_OC2_SetConfig+0x104>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00b      	beq.n	8005788 <TIM_OC2_SetConfig+0xac>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1c      	ldr	r2, [pc, #112]	@ (80057e4 <TIM_OC2_SetConfig+0x108>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d007      	beq.n	8005788 <TIM_OC2_SetConfig+0xac>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1b      	ldr	r2, [pc, #108]	@ (80057e8 <TIM_OC2_SetConfig+0x10c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_OC2_SetConfig+0xac>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1a      	ldr	r2, [pc, #104]	@ (80057ec <TIM_OC2_SetConfig+0x110>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d113      	bne.n	80057b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800578e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	feff8fff 	.word	0xfeff8fff
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40010400 	.word	0x40010400
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40014400 	.word	0x40014400
 80057ec:	40014800 	.word	0x40014800

080057f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <TIM_OC3_SetConfig+0xf8>)
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0303 	bic.w	r3, r3, #3
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a28      	ldr	r2, [pc, #160]	@ (80058ec <TIM_OC3_SetConfig+0xfc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC3_SetConfig+0x66>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a27      	ldr	r2, [pc, #156]	@ (80058f0 <TIM_OC3_SetConfig+0x100>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10d      	bne.n	8005872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1d      	ldr	r2, [pc, #116]	@ (80058ec <TIM_OC3_SetConfig+0xfc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00f      	beq.n	800589a <TIM_OC3_SetConfig+0xaa>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1c      	ldr	r2, [pc, #112]	@ (80058f0 <TIM_OC3_SetConfig+0x100>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <TIM_OC3_SetConfig+0xaa>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1b      	ldr	r2, [pc, #108]	@ (80058f4 <TIM_OC3_SetConfig+0x104>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_OC3_SetConfig+0xaa>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <TIM_OC3_SetConfig+0x108>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC3_SetConfig+0xaa>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a19      	ldr	r2, [pc, #100]	@ (80058fc <TIM_OC3_SetConfig+0x10c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d113      	bne.n	80058c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	fffeff8f 	.word	0xfffeff8f
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40010400 	.word	0x40010400
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4b24      	ldr	r3, [pc, #144]	@ (80059bc <TIM_OC4_SetConfig+0xbc>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800594a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	031b      	lsls	r3, r3, #12
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a19      	ldr	r2, [pc, #100]	@ (80059c0 <TIM_OC4_SetConfig+0xc0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00f      	beq.n	8005980 <TIM_OC4_SetConfig+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a18      	ldr	r2, [pc, #96]	@ (80059c4 <TIM_OC4_SetConfig+0xc4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00b      	beq.n	8005980 <TIM_OC4_SetConfig+0x80>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a17      	ldr	r2, [pc, #92]	@ (80059c8 <TIM_OC4_SetConfig+0xc8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <TIM_OC4_SetConfig+0x80>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <TIM_OC4_SetConfig+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_OC4_SetConfig+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <TIM_OC4_SetConfig+0xd0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d109      	bne.n	8005994 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	feff8fff 	.word	0xfeff8fff
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800

080059d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4b21      	ldr	r3, [pc, #132]	@ (8005a84 <TIM_OC5_SetConfig+0xb0>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a18      	ldr	r2, [pc, #96]	@ (8005a88 <TIM_OC5_SetConfig+0xb4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_OC5_SetConfig+0x76>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a17      	ldr	r2, [pc, #92]	@ (8005a8c <TIM_OC5_SetConfig+0xb8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_OC5_SetConfig+0x76>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a16      	ldr	r2, [pc, #88]	@ (8005a90 <TIM_OC5_SetConfig+0xbc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_OC5_SetConfig+0x76>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <TIM_OC5_SetConfig+0xc0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_OC5_SetConfig+0x76>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a14      	ldr	r2, [pc, #80]	@ (8005a98 <TIM_OC5_SetConfig+0xc4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d109      	bne.n	8005a5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	fffeff8f 	.word	0xfffeff8f
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800

08005a9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4b22      	ldr	r3, [pc, #136]	@ (8005b50 <TIM_OC6_SetConfig+0xb4>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	051b      	lsls	r3, r3, #20
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a19      	ldr	r2, [pc, #100]	@ (8005b54 <TIM_OC6_SetConfig+0xb8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00f      	beq.n	8005b14 <TIM_OC6_SetConfig+0x78>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a18      	ldr	r2, [pc, #96]	@ (8005b58 <TIM_OC6_SetConfig+0xbc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <TIM_OC6_SetConfig+0x78>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <TIM_OC6_SetConfig+0xc0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_OC6_SetConfig+0x78>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <TIM_OC6_SetConfig+0xc4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC6_SetConfig+0x78>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <TIM_OC6_SetConfig+0xc8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d109      	bne.n	8005b28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	029b      	lsls	r3, r3, #10
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	feff8fff 	.word	0xfeff8fff
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800

08005b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e042      	b.n	8005c00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fb ff29 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2224      	movs	r2, #36	@ 0x24
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fe1e 	bl	80067f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8b3 	bl	8005d24 <UART_SetConfig>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e01b      	b.n	8005c00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fe9d 	bl	8006938 <UART_CheckIdleState>
 8005bfe:	4603      	mov	r3, r0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d17b      	bne.n	8005d1a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_UART_Transmit+0x26>
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e074      	b.n	8005d1c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2221      	movs	r2, #33	@ 0x21
 8005c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c42:	f7fc f8df 	bl	8001e04 <HAL_GetTick>
 8005c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c60:	d108      	bne.n	8005c74 <HAL_UART_Transmit+0x6c>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	e003      	b.n	8005c7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c7c:	e030      	b.n	8005ce0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2200      	movs	r2, #0
 8005c86:	2180      	movs	r1, #128	@ 0x80
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 feff 	bl	8006a8c <UART_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e03d      	b.n	8005d1c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	3302      	adds	r3, #2
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	e007      	b.n	8005cce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1c8      	bne.n	8005c7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2140      	movs	r1, #64	@ 0x40
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fec8 	bl	8006a8c <UART_WaitOnFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e006      	b.n	8005d1c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e000      	b.n	8005d1c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d28:	b092      	sub	sp, #72	@ 0x48
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4bbe      	ldr	r3, [pc, #760]	@ (800604c <UART_SetConfig+0x328>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4ab3      	ldr	r2, [pc, #716]	@ (8006050 <UART_SetConfig+0x32c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	4baf      	ldr	r3, [pc, #700]	@ (8006054 <UART_SetConfig+0x330>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	f023 010f 	bic.w	r1, r3, #15
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4aa6      	ldr	r2, [pc, #664]	@ (8006058 <UART_SetConfig+0x334>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d177      	bne.n	8005eb4 <UART_SetConfig+0x190>
 8005dc4:	4ba5      	ldr	r3, [pc, #660]	@ (800605c <UART_SetConfig+0x338>)
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dcc:	2b28      	cmp	r3, #40	@ 0x28
 8005dce:	d86d      	bhi.n	8005eac <UART_SetConfig+0x188>
 8005dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <UART_SetConfig+0xb4>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e7d 	.word	0x08005e7d
 8005ddc:	08005ead 	.word	0x08005ead
 8005de0:	08005ead 	.word	0x08005ead
 8005de4:	08005ead 	.word	0x08005ead
 8005de8:	08005ead 	.word	0x08005ead
 8005dec:	08005ead 	.word	0x08005ead
 8005df0:	08005ead 	.word	0x08005ead
 8005df4:	08005ead 	.word	0x08005ead
 8005df8:	08005e85 	.word	0x08005e85
 8005dfc:	08005ead 	.word	0x08005ead
 8005e00:	08005ead 	.word	0x08005ead
 8005e04:	08005ead 	.word	0x08005ead
 8005e08:	08005ead 	.word	0x08005ead
 8005e0c:	08005ead 	.word	0x08005ead
 8005e10:	08005ead 	.word	0x08005ead
 8005e14:	08005ead 	.word	0x08005ead
 8005e18:	08005e8d 	.word	0x08005e8d
 8005e1c:	08005ead 	.word	0x08005ead
 8005e20:	08005ead 	.word	0x08005ead
 8005e24:	08005ead 	.word	0x08005ead
 8005e28:	08005ead 	.word	0x08005ead
 8005e2c:	08005ead 	.word	0x08005ead
 8005e30:	08005ead 	.word	0x08005ead
 8005e34:	08005ead 	.word	0x08005ead
 8005e38:	08005e95 	.word	0x08005e95
 8005e3c:	08005ead 	.word	0x08005ead
 8005e40:	08005ead 	.word	0x08005ead
 8005e44:	08005ead 	.word	0x08005ead
 8005e48:	08005ead 	.word	0x08005ead
 8005e4c:	08005ead 	.word	0x08005ead
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005e9d 	.word	0x08005e9d
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005ead 	.word	0x08005ead
 8005e68:	08005ead 	.word	0x08005ead
 8005e6c:	08005ead 	.word	0x08005ead
 8005e70:	08005ead 	.word	0x08005ead
 8005e74:	08005ead 	.word	0x08005ead
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e222      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e21e      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e21a      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e216      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e212      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005ea4:	2340      	movs	r3, #64	@ 0x40
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e20e      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005eac:	2380      	movs	r3, #128	@ 0x80
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e20a      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a69      	ldr	r2, [pc, #420]	@ (8006060 <UART_SetConfig+0x33c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d130      	bne.n	8005f20 <UART_SetConfig+0x1fc>
 8005ebe:	4b67      	ldr	r3, [pc, #412]	@ (800605c <UART_SetConfig+0x338>)
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d826      	bhi.n	8005f18 <UART_SetConfig+0x1f4>
 8005eca:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed0 <UART_SetConfig+0x1ac>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f09 	.word	0x08005f09
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e1ec      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e1e8      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e1e4      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e1e0      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f08:	2320      	movs	r3, #32
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e1dc      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f10:	2340      	movs	r3, #64	@ 0x40
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e1d8      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f18:	2380      	movs	r3, #128	@ 0x80
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e1d4      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a4f      	ldr	r2, [pc, #316]	@ (8006064 <UART_SetConfig+0x340>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d130      	bne.n	8005f8c <UART_SetConfig+0x268>
 8005f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800605c <UART_SetConfig+0x338>)
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d826      	bhi.n	8005f84 <UART_SetConfig+0x260>
 8005f36:	a201      	add	r2, pc, #4	@ (adr r2, 8005f3c <UART_SetConfig+0x218>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	08005f65 	.word	0x08005f65
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	2300      	movs	r3, #0
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e1b6      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e1b2      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f64:	2308      	movs	r3, #8
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e1ae      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e1aa      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f74:	2320      	movs	r3, #32
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e1a6      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f7c:	2340      	movs	r3, #64	@ 0x40
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e1a2      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f84:	2380      	movs	r3, #128	@ 0x80
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e19e      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a35      	ldr	r2, [pc, #212]	@ (8006068 <UART_SetConfig+0x344>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d130      	bne.n	8005ff8 <UART_SetConfig+0x2d4>
 8005f96:	4b31      	ldr	r3, [pc, #196]	@ (800605c <UART_SetConfig+0x338>)
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d826      	bhi.n	8005ff0 <UART_SetConfig+0x2cc>
 8005fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x284>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fc1 	.word	0x08005fc1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	08005fd1 	.word	0x08005fd1
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fe9 	.word	0x08005fe9
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e180      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e17c      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e178      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e174      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e170      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005fe8:	2340      	movs	r3, #64	@ 0x40
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e16c      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005ff0:	2380      	movs	r3, #128	@ 0x80
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e168      	b.n	80062ca <UART_SetConfig+0x5a6>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800606c <UART_SetConfig+0x348>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d142      	bne.n	8006088 <UART_SetConfig+0x364>
 8006002:	4b16      	ldr	r3, [pc, #88]	@ (800605c <UART_SetConfig+0x338>)
 8006004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b05      	cmp	r3, #5
 800600c:	d838      	bhi.n	8006080 <UART_SetConfig+0x35c>
 800600e:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <UART_SetConfig+0x2f0>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	0800602d 	.word	0x0800602d
 8006018:	08006035 	.word	0x08006035
 800601c:	0800603d 	.word	0x0800603d
 8006020:	08006045 	.word	0x08006045
 8006024:	08006071 	.word	0x08006071
 8006028:	08006079 	.word	0x08006079
 800602c:	2300      	movs	r3, #0
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e14a      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006034:	2304      	movs	r3, #4
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e146      	b.n	80062ca <UART_SetConfig+0x5a6>
 800603c:	2308      	movs	r3, #8
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e142      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006044:	2310      	movs	r3, #16
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e13e      	b.n	80062ca <UART_SetConfig+0x5a6>
 800604c:	cfff69f3 	.word	0xcfff69f3
 8006050:	58000c00 	.word	0x58000c00
 8006054:	11fff4ff 	.word	0x11fff4ff
 8006058:	40011000 	.word	0x40011000
 800605c:	58024400 	.word	0x58024400
 8006060:	40004400 	.word	0x40004400
 8006064:	40004800 	.word	0x40004800
 8006068:	40004c00 	.word	0x40004c00
 800606c:	40005000 	.word	0x40005000
 8006070:	2320      	movs	r3, #32
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e128      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006078:	2340      	movs	r3, #64	@ 0x40
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e124      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006080:	2380      	movs	r3, #128	@ 0x80
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e120      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4acb      	ldr	r2, [pc, #812]	@ (80063bc <UART_SetConfig+0x698>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d176      	bne.n	8006180 <UART_SetConfig+0x45c>
 8006092:	4bcb      	ldr	r3, [pc, #812]	@ (80063c0 <UART_SetConfig+0x69c>)
 8006094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006096:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800609a:	2b28      	cmp	r3, #40	@ 0x28
 800609c:	d86c      	bhi.n	8006178 <UART_SetConfig+0x454>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <UART_SetConfig+0x380>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	08006149 	.word	0x08006149
 80060a8:	08006179 	.word	0x08006179
 80060ac:	08006179 	.word	0x08006179
 80060b0:	08006179 	.word	0x08006179
 80060b4:	08006179 	.word	0x08006179
 80060b8:	08006179 	.word	0x08006179
 80060bc:	08006179 	.word	0x08006179
 80060c0:	08006179 	.word	0x08006179
 80060c4:	08006151 	.word	0x08006151
 80060c8:	08006179 	.word	0x08006179
 80060cc:	08006179 	.word	0x08006179
 80060d0:	08006179 	.word	0x08006179
 80060d4:	08006179 	.word	0x08006179
 80060d8:	08006179 	.word	0x08006179
 80060dc:	08006179 	.word	0x08006179
 80060e0:	08006179 	.word	0x08006179
 80060e4:	08006159 	.word	0x08006159
 80060e8:	08006179 	.word	0x08006179
 80060ec:	08006179 	.word	0x08006179
 80060f0:	08006179 	.word	0x08006179
 80060f4:	08006179 	.word	0x08006179
 80060f8:	08006179 	.word	0x08006179
 80060fc:	08006179 	.word	0x08006179
 8006100:	08006179 	.word	0x08006179
 8006104:	08006161 	.word	0x08006161
 8006108:	08006179 	.word	0x08006179
 800610c:	08006179 	.word	0x08006179
 8006110:	08006179 	.word	0x08006179
 8006114:	08006179 	.word	0x08006179
 8006118:	08006179 	.word	0x08006179
 800611c:	08006179 	.word	0x08006179
 8006120:	08006179 	.word	0x08006179
 8006124:	08006169 	.word	0x08006169
 8006128:	08006179 	.word	0x08006179
 800612c:	08006179 	.word	0x08006179
 8006130:	08006179 	.word	0x08006179
 8006134:	08006179 	.word	0x08006179
 8006138:	08006179 	.word	0x08006179
 800613c:	08006179 	.word	0x08006179
 8006140:	08006179 	.word	0x08006179
 8006144:	08006171 	.word	0x08006171
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e0bc      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006150:	2304      	movs	r3, #4
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e0b8      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006158:	2308      	movs	r3, #8
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e0b4      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006160:	2310      	movs	r3, #16
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e0b0      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006168:	2320      	movs	r3, #32
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e0ac      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006170:	2340      	movs	r3, #64	@ 0x40
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e0a8      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006178:	2380      	movs	r3, #128	@ 0x80
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e0a4      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a8f      	ldr	r2, [pc, #572]	@ (80063c4 <UART_SetConfig+0x6a0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d130      	bne.n	80061ec <UART_SetConfig+0x4c8>
 800618a:	4b8d      	ldr	r3, [pc, #564]	@ (80063c0 <UART_SetConfig+0x69c>)
 800618c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	2b05      	cmp	r3, #5
 8006194:	d826      	bhi.n	80061e4 <UART_SetConfig+0x4c0>
 8006196:	a201      	add	r2, pc, #4	@ (adr r2, 800619c <UART_SetConfig+0x478>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061b5 	.word	0x080061b5
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	080061c5 	.word	0x080061c5
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	080061d5 	.word	0x080061d5
 80061b0:	080061dd 	.word	0x080061dd
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e086      	b.n	80062ca <UART_SetConfig+0x5a6>
 80061bc:	2304      	movs	r3, #4
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e082      	b.n	80062ca <UART_SetConfig+0x5a6>
 80061c4:	2308      	movs	r3, #8
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e07e      	b.n	80062ca <UART_SetConfig+0x5a6>
 80061cc:	2310      	movs	r3, #16
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e07a      	b.n	80062ca <UART_SetConfig+0x5a6>
 80061d4:	2320      	movs	r3, #32
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e076      	b.n	80062ca <UART_SetConfig+0x5a6>
 80061dc:	2340      	movs	r3, #64	@ 0x40
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e072      	b.n	80062ca <UART_SetConfig+0x5a6>
 80061e4:	2380      	movs	r3, #128	@ 0x80
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e06e      	b.n	80062ca <UART_SetConfig+0x5a6>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a75      	ldr	r2, [pc, #468]	@ (80063c8 <UART_SetConfig+0x6a4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d130      	bne.n	8006258 <UART_SetConfig+0x534>
 80061f6:	4b72      	ldr	r3, [pc, #456]	@ (80063c0 <UART_SetConfig+0x69c>)
 80061f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d826      	bhi.n	8006250 <UART_SetConfig+0x52c>
 8006202:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <UART_SetConfig+0x4e4>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006221 	.word	0x08006221
 800620c:	08006229 	.word	0x08006229
 8006210:	08006231 	.word	0x08006231
 8006214:	08006239 	.word	0x08006239
 8006218:	08006241 	.word	0x08006241
 800621c:	08006249 	.word	0x08006249
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e050      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006228:	2304      	movs	r3, #4
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e04c      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e048      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006238:	2310      	movs	r3, #16
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e044      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006240:	2320      	movs	r3, #32
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e040      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006248:	2340      	movs	r3, #64	@ 0x40
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e03c      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006250:	2380      	movs	r3, #128	@ 0x80
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e038      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a5b      	ldr	r2, [pc, #364]	@ (80063cc <UART_SetConfig+0x6a8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d130      	bne.n	80062c4 <UART_SetConfig+0x5a0>
 8006262:	4b57      	ldr	r3, [pc, #348]	@ (80063c0 <UART_SetConfig+0x69c>)
 8006264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b05      	cmp	r3, #5
 800626c:	d826      	bhi.n	80062bc <UART_SetConfig+0x598>
 800626e:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <UART_SetConfig+0x550>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	0800628d 	.word	0x0800628d
 8006278:	08006295 	.word	0x08006295
 800627c:	0800629d 	.word	0x0800629d
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062ad 	.word	0x080062ad
 8006288:	080062b5 	.word	0x080062b5
 800628c:	2302      	movs	r3, #2
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e01a      	b.n	80062ca <UART_SetConfig+0x5a6>
 8006294:	2304      	movs	r3, #4
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e016      	b.n	80062ca <UART_SetConfig+0x5a6>
 800629c:	2308      	movs	r3, #8
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e012      	b.n	80062ca <UART_SetConfig+0x5a6>
 80062a4:	2310      	movs	r3, #16
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e00e      	b.n	80062ca <UART_SetConfig+0x5a6>
 80062ac:	2320      	movs	r3, #32
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e00a      	b.n	80062ca <UART_SetConfig+0x5a6>
 80062b4:	2340      	movs	r3, #64	@ 0x40
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e006      	b.n	80062ca <UART_SetConfig+0x5a6>
 80062bc:	2380      	movs	r3, #128	@ 0x80
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e002      	b.n	80062ca <UART_SetConfig+0x5a6>
 80062c4:	2380      	movs	r3, #128	@ 0x80
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a3f      	ldr	r2, [pc, #252]	@ (80063cc <UART_SetConfig+0x6a8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	f040 80f8 	bne.w	80064c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062da:	2b20      	cmp	r3, #32
 80062dc:	dc46      	bgt.n	800636c <UART_SetConfig+0x648>
 80062de:	2b02      	cmp	r3, #2
 80062e0:	f2c0 8082 	blt.w	80063e8 <UART_SetConfig+0x6c4>
 80062e4:	3b02      	subs	r3, #2
 80062e6:	2b1e      	cmp	r3, #30
 80062e8:	d87e      	bhi.n	80063e8 <UART_SetConfig+0x6c4>
 80062ea:	a201      	add	r2, pc, #4	@ (adr r2, 80062f0 <UART_SetConfig+0x5cc>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006373 	.word	0x08006373
 80062f4:	080063e9 	.word	0x080063e9
 80062f8:	0800637b 	.word	0x0800637b
 80062fc:	080063e9 	.word	0x080063e9
 8006300:	080063e9 	.word	0x080063e9
 8006304:	080063e9 	.word	0x080063e9
 8006308:	0800638b 	.word	0x0800638b
 800630c:	080063e9 	.word	0x080063e9
 8006310:	080063e9 	.word	0x080063e9
 8006314:	080063e9 	.word	0x080063e9
 8006318:	080063e9 	.word	0x080063e9
 800631c:	080063e9 	.word	0x080063e9
 8006320:	080063e9 	.word	0x080063e9
 8006324:	080063e9 	.word	0x080063e9
 8006328:	0800639b 	.word	0x0800639b
 800632c:	080063e9 	.word	0x080063e9
 8006330:	080063e9 	.word	0x080063e9
 8006334:	080063e9 	.word	0x080063e9
 8006338:	080063e9 	.word	0x080063e9
 800633c:	080063e9 	.word	0x080063e9
 8006340:	080063e9 	.word	0x080063e9
 8006344:	080063e9 	.word	0x080063e9
 8006348:	080063e9 	.word	0x080063e9
 800634c:	080063e9 	.word	0x080063e9
 8006350:	080063e9 	.word	0x080063e9
 8006354:	080063e9 	.word	0x080063e9
 8006358:	080063e9 	.word	0x080063e9
 800635c:	080063e9 	.word	0x080063e9
 8006360:	080063e9 	.word	0x080063e9
 8006364:	080063e9 	.word	0x080063e9
 8006368:	080063db 	.word	0x080063db
 800636c:	2b40      	cmp	r3, #64	@ 0x40
 800636e:	d037      	beq.n	80063e0 <UART_SetConfig+0x6bc>
 8006370:	e03a      	b.n	80063e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006372:	f7fe fa8f 	bl	8004894 <HAL_RCCEx_GetD3PCLK1Freq>
 8006376:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006378:	e03c      	b.n	80063f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800637a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fa9e 	bl	80048c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006388:	e034      	b.n	80063f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800638a:	f107 0318 	add.w	r3, r7, #24
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fbea 	bl	8004b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006398:	e02c      	b.n	80063f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800639a:	4b09      	ldr	r3, [pc, #36]	@ (80063c0 <UART_SetConfig+0x69c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d016      	beq.n	80063d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063a6:	4b06      	ldr	r3, [pc, #24]	@ (80063c0 <UART_SetConfig+0x69c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	08db      	lsrs	r3, r3, #3
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	4a07      	ldr	r2, [pc, #28]	@ (80063d0 <UART_SetConfig+0x6ac>)
 80063b2:	fa22 f303 	lsr.w	r3, r2, r3
 80063b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063b8:	e01c      	b.n	80063f4 <UART_SetConfig+0x6d0>
 80063ba:	bf00      	nop
 80063bc:	40011400 	.word	0x40011400
 80063c0:	58024400 	.word	0x58024400
 80063c4:	40007800 	.word	0x40007800
 80063c8:	40007c00 	.word	0x40007c00
 80063cc:	58000c00 	.word	0x58000c00
 80063d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80063d4:	4b9d      	ldr	r3, [pc, #628]	@ (800664c <UART_SetConfig+0x928>)
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d8:	e00c      	b.n	80063f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063da:	4b9d      	ldr	r3, [pc, #628]	@ (8006650 <UART_SetConfig+0x92c>)
 80063dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063de:	e009      	b.n	80063f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e6:	e005      	b.n	80063f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 81de 	beq.w	80067b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	4a94      	ldr	r2, [pc, #592]	@ (8006654 <UART_SetConfig+0x930>)
 8006402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006406:	461a      	mov	r2, r3
 8006408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640a:	fbb3 f3f2 	udiv	r3, r3, r2
 800640e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4413      	add	r3, r2
 800641a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641c:	429a      	cmp	r2, r3
 800641e:	d305      	bcc.n	800642c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006428:	429a      	cmp	r2, r3
 800642a:	d903      	bls.n	8006434 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006432:	e1c1      	b.n	80067b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006436:	2200      	movs	r2, #0
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	60fa      	str	r2, [r7, #12]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	4a84      	ldr	r2, [pc, #528]	@ (8006654 <UART_SetConfig+0x930>)
 8006442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006446:	b29b      	uxth	r3, r3
 8006448:	2200      	movs	r2, #0
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006452:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006456:	f7fa f957 	bl	8000708 <__aeabi_uldivmod>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	020b      	lsls	r3, r1, #8
 800646c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006470:	0202      	lsls	r2, r0, #8
 8006472:	6979      	ldr	r1, [r7, #20]
 8006474:	6849      	ldr	r1, [r1, #4]
 8006476:	0849      	lsrs	r1, r1, #1
 8006478:	2000      	movs	r0, #0
 800647a:	460c      	mov	r4, r1
 800647c:	4605      	mov	r5, r0
 800647e:	eb12 0804 	adds.w	r8, r2, r4
 8006482:	eb43 0905 	adc.w	r9, r3, r5
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	469a      	mov	sl, r3
 800648e:	4693      	mov	fp, r2
 8006490:	4652      	mov	r2, sl
 8006492:	465b      	mov	r3, fp
 8006494:	4640      	mov	r0, r8
 8006496:	4649      	mov	r1, r9
 8006498:	f7fa f936 	bl	8000708 <__aeabi_uldivmod>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4613      	mov	r3, r2
 80064a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064aa:	d308      	bcc.n	80064be <UART_SetConfig+0x79a>
 80064ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b2:	d204      	bcs.n	80064be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	e17c      	b.n	80067b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064c4:	e178      	b.n	80067b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ce:	f040 80c5 	bne.w	800665c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80064d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	dc48      	bgt.n	800656c <UART_SetConfig+0x848>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	db7b      	blt.n	80065d6 <UART_SetConfig+0x8b2>
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d879      	bhi.n	80065d6 <UART_SetConfig+0x8b2>
 80064e2:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <UART_SetConfig+0x7c4>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	08006573 	.word	0x08006573
 80064ec:	0800657b 	.word	0x0800657b
 80064f0:	080065d7 	.word	0x080065d7
 80064f4:	080065d7 	.word	0x080065d7
 80064f8:	08006583 	.word	0x08006583
 80064fc:	080065d7 	.word	0x080065d7
 8006500:	080065d7 	.word	0x080065d7
 8006504:	080065d7 	.word	0x080065d7
 8006508:	08006593 	.word	0x08006593
 800650c:	080065d7 	.word	0x080065d7
 8006510:	080065d7 	.word	0x080065d7
 8006514:	080065d7 	.word	0x080065d7
 8006518:	080065d7 	.word	0x080065d7
 800651c:	080065d7 	.word	0x080065d7
 8006520:	080065d7 	.word	0x080065d7
 8006524:	080065d7 	.word	0x080065d7
 8006528:	080065a3 	.word	0x080065a3
 800652c:	080065d7 	.word	0x080065d7
 8006530:	080065d7 	.word	0x080065d7
 8006534:	080065d7 	.word	0x080065d7
 8006538:	080065d7 	.word	0x080065d7
 800653c:	080065d7 	.word	0x080065d7
 8006540:	080065d7 	.word	0x080065d7
 8006544:	080065d7 	.word	0x080065d7
 8006548:	080065d7 	.word	0x080065d7
 800654c:	080065d7 	.word	0x080065d7
 8006550:	080065d7 	.word	0x080065d7
 8006554:	080065d7 	.word	0x080065d7
 8006558:	080065d7 	.word	0x080065d7
 800655c:	080065d7 	.word	0x080065d7
 8006560:	080065d7 	.word	0x080065d7
 8006564:	080065d7 	.word	0x080065d7
 8006568:	080065c9 	.word	0x080065c9
 800656c:	2b40      	cmp	r3, #64	@ 0x40
 800656e:	d02e      	beq.n	80065ce <UART_SetConfig+0x8aa>
 8006570:	e031      	b.n	80065d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006572:	f7fc ff59 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8006576:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006578:	e033      	b.n	80065e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800657a:	f7fc ff6b 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 800657e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006580:	e02f      	b.n	80065e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe f99a 	bl	80048c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006590:	e027      	b.n	80065e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006592:	f107 0318 	add.w	r3, r7, #24
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fae6 	bl	8004b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a0:	e01f      	b.n	80065e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006658 <UART_SetConfig+0x934>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006658 <UART_SetConfig+0x934>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	08db      	lsrs	r3, r3, #3
 80065b4:	f003 0303 	and.w	r3, r3, #3
 80065b8:	4a24      	ldr	r2, [pc, #144]	@ (800664c <UART_SetConfig+0x928>)
 80065ba:	fa22 f303 	lsr.w	r3, r2, r3
 80065be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065c0:	e00f      	b.n	80065e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80065c2:	4b22      	ldr	r3, [pc, #136]	@ (800664c <UART_SetConfig+0x928>)
 80065c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c6:	e00c      	b.n	80065e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065c8:	4b21      	ldr	r3, [pc, #132]	@ (8006650 <UART_SetConfig+0x92c>)
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065cc:	e009      	b.n	80065e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d4:	e005      	b.n	80065e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80e7 	beq.w	80067b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	4a19      	ldr	r2, [pc, #100]	@ (8006654 <UART_SetConfig+0x930>)
 80065f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065fc:	005a      	lsls	r2, r3, #1
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	441a      	add	r2, r3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006612:	2b0f      	cmp	r3, #15
 8006614:	d916      	bls.n	8006644 <UART_SetConfig+0x920>
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800661c:	d212      	bcs.n	8006644 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800661e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006620:	b29b      	uxth	r3, r3
 8006622:	f023 030f 	bic.w	r3, r3, #15
 8006626:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	b29b      	uxth	r3, r3
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	b29a      	uxth	r2, r3
 8006634:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006636:	4313      	orrs	r3, r2
 8006638:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	e0b9      	b.n	80067b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800664a:	e0b5      	b.n	80067b8 <UART_SetConfig+0xa94>
 800664c:	03d09000 	.word	0x03d09000
 8006650:	003d0900 	.word	0x003d0900
 8006654:	0800c688 	.word	0x0800c688
 8006658:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800665c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006660:	2b20      	cmp	r3, #32
 8006662:	dc49      	bgt.n	80066f8 <UART_SetConfig+0x9d4>
 8006664:	2b00      	cmp	r3, #0
 8006666:	db7c      	blt.n	8006762 <UART_SetConfig+0xa3e>
 8006668:	2b20      	cmp	r3, #32
 800666a:	d87a      	bhi.n	8006762 <UART_SetConfig+0xa3e>
 800666c:	a201      	add	r2, pc, #4	@ (adr r2, 8006674 <UART_SetConfig+0x950>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	080066ff 	.word	0x080066ff
 8006678:	08006707 	.word	0x08006707
 800667c:	08006763 	.word	0x08006763
 8006680:	08006763 	.word	0x08006763
 8006684:	0800670f 	.word	0x0800670f
 8006688:	08006763 	.word	0x08006763
 800668c:	08006763 	.word	0x08006763
 8006690:	08006763 	.word	0x08006763
 8006694:	0800671f 	.word	0x0800671f
 8006698:	08006763 	.word	0x08006763
 800669c:	08006763 	.word	0x08006763
 80066a0:	08006763 	.word	0x08006763
 80066a4:	08006763 	.word	0x08006763
 80066a8:	08006763 	.word	0x08006763
 80066ac:	08006763 	.word	0x08006763
 80066b0:	08006763 	.word	0x08006763
 80066b4:	0800672f 	.word	0x0800672f
 80066b8:	08006763 	.word	0x08006763
 80066bc:	08006763 	.word	0x08006763
 80066c0:	08006763 	.word	0x08006763
 80066c4:	08006763 	.word	0x08006763
 80066c8:	08006763 	.word	0x08006763
 80066cc:	08006763 	.word	0x08006763
 80066d0:	08006763 	.word	0x08006763
 80066d4:	08006763 	.word	0x08006763
 80066d8:	08006763 	.word	0x08006763
 80066dc:	08006763 	.word	0x08006763
 80066e0:	08006763 	.word	0x08006763
 80066e4:	08006763 	.word	0x08006763
 80066e8:	08006763 	.word	0x08006763
 80066ec:	08006763 	.word	0x08006763
 80066f0:	08006763 	.word	0x08006763
 80066f4:	08006755 	.word	0x08006755
 80066f8:	2b40      	cmp	r3, #64	@ 0x40
 80066fa:	d02e      	beq.n	800675a <UART_SetConfig+0xa36>
 80066fc:	e031      	b.n	8006762 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066fe:	f7fc fe93 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8006702:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006704:	e033      	b.n	800676e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006706:	f7fc fea5 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 800670a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800670c:	e02f      	b.n	800676e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800670e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe f8d4 	bl	80048c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800671c:	e027      	b.n	800676e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800671e:	f107 0318 	add.w	r3, r7, #24
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fa20 	bl	8004b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800672c:	e01f      	b.n	800676e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800672e:	4b2d      	ldr	r3, [pc, #180]	@ (80067e4 <UART_SetConfig+0xac0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800673a:	4b2a      	ldr	r3, [pc, #168]	@ (80067e4 <UART_SetConfig+0xac0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	08db      	lsrs	r3, r3, #3
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	4a28      	ldr	r2, [pc, #160]	@ (80067e8 <UART_SetConfig+0xac4>)
 8006746:	fa22 f303 	lsr.w	r3, r2, r3
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800674c:	e00f      	b.n	800676e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800674e:	4b26      	ldr	r3, [pc, #152]	@ (80067e8 <UART_SetConfig+0xac4>)
 8006750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006752:	e00c      	b.n	800676e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006754:	4b25      	ldr	r3, [pc, #148]	@ (80067ec <UART_SetConfig+0xac8>)
 8006756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006758:	e009      	b.n	800676e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006760:	e005      	b.n	800676e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800676c:	bf00      	nop
    }

    if (pclk != 0U)
 800676e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d021      	beq.n	80067b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	4a1d      	ldr	r2, [pc, #116]	@ (80067f0 <UART_SetConfig+0xacc>)
 800677a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800677e:	461a      	mov	r2, r3
 8006780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006782:	fbb3 f2f2 	udiv	r2, r3, r2
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	441a      	add	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	fbb2 f3f3 	udiv	r3, r2, r3
 8006796:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d909      	bls.n	80067b2 <UART_SetConfig+0xa8e>
 800679e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a4:	d205      	bcs.n	80067b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	e002      	b.n	80067b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2200      	movs	r2, #0
 80067cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2200      	movs	r2, #0
 80067d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3748      	adds	r7, #72	@ 0x48
 80067dc:	46bd      	mov	sp, r7
 80067de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067e2:	bf00      	nop
 80067e4:	58024400 	.word	0x58024400
 80067e8:	03d09000 	.word	0x03d09000
 80067ec:	003d0900 	.word	0x003d0900
 80067f0:	0800c688 	.word	0x0800c688

080067f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01a      	beq.n	800690a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068f2:	d10a      	bne.n	800690a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]
  }
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b098      	sub	sp, #96	@ 0x60
 800693c:	af02      	add	r7, sp, #8
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006948:	f7fb fa5c 	bl	8001e04 <HAL_GetTick>
 800694c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b08      	cmp	r3, #8
 800695a:	d12f      	bne.n	80069bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800695c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006964:	2200      	movs	r2, #0
 8006966:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f88e 	bl	8006a8c <UART_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d022      	beq.n	80069bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800698a:	653b      	str	r3, [r7, #80]	@ 0x50
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006994:	647b      	str	r3, [r7, #68]	@ 0x44
 8006996:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800699a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e6      	bne.n	8006976 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e063      	b.n	8006a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d149      	bne.n	8006a5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d2:	2200      	movs	r2, #0
 80069d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f857 	bl	8006a8c <UART_WaitOnFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d03c      	beq.n	8006a5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	623b      	str	r3, [r7, #32]
   return(result);
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e6      	bne.n	80069e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3308      	adds	r3, #8
 8006a34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a36:	61fa      	str	r2, [r7, #28]
 8006a38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	69b9      	ldr	r1, [r7, #24]
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	617b      	str	r3, [r7, #20]
   return(result);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e5      	bne.n	8006a16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e012      	b.n	8006a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3758      	adds	r7, #88	@ 0x58
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9c:	e04f      	b.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa4:	d04b      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa6:	f7fb f9ad 	bl	8001e04 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d302      	bcc.n	8006abc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e04e      	b.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d037      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b80      	cmp	r3, #128	@ 0x80
 8006ad2:	d034      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b40      	cmp	r3, #64	@ 0x40
 8006ad8:	d031      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d110      	bne.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2208      	movs	r2, #8
 8006aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 f839 	bl	8006b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2208      	movs	r2, #8
 8006afa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e029      	b.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b18:	d111      	bne.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 f81f 	bl	8006b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e00f      	b.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4013      	ands	r3, r2
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	bf0c      	ite	eq
 8006b4e:	2301      	moveq	r3, #1
 8006b50:	2300      	movne	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d0a0      	beq.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b095      	sub	sp, #84	@ 0x54
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e6      	bne.n	8006b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c30 <UART_EndRxTransfer+0xc8>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e5      	bne.n	8006ba2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d118      	bne.n	8006c10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6979      	ldr	r1, [r7, #20]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c24:	bf00      	nop
 8006c26:	3754      	adds	r7, #84	@ 0x54
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	effffffe 	.word	0xeffffffe

08006c34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_UARTEx_DisableFifoMode+0x16>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e027      	b.n	8006c9a <HAL_UARTEx_DisableFifoMode+0x66>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2224      	movs	r2, #36	@ 0x24
 8006c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e02d      	b.n	8006d1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2224      	movs	r2, #36	@ 0x24
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0201 	bic.w	r2, r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f850 	bl	8006da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e02d      	b.n	8006d96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2224      	movs	r2, #36	@ 0x24
 8006d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0201 	bic.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f812 	bl	8006da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d108      	bne.n	8006dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dc0:	e031      	b.n	8006e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	0e5b      	lsrs	r3, r3, #25
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	0f5b      	lsrs	r3, r3, #29
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	7b3a      	ldrb	r2, [r7, #12]
 8006dee:	4911      	ldr	r1, [pc, #68]	@ (8006e34 <UARTEx_SetNbDataToProcess+0x94>)
 8006df0:	5c8a      	ldrb	r2, [r1, r2]
 8006df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006df6:	7b3a      	ldrb	r2, [r7, #12]
 8006df8:	490f      	ldr	r1, [pc, #60]	@ (8006e38 <UARTEx_SetNbDataToProcess+0x98>)
 8006dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	7b7a      	ldrb	r2, [r7, #13]
 8006e0c:	4909      	ldr	r1, [pc, #36]	@ (8006e34 <UARTEx_SetNbDataToProcess+0x94>)
 8006e0e:	5c8a      	ldrb	r2, [r1, r2]
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e14:	7b7a      	ldrb	r2, [r7, #13]
 8006e16:	4908      	ldr	r1, [pc, #32]	@ (8006e38 <UARTEx_SetNbDataToProcess+0x98>)
 8006e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	0800c6a0 	.word	0x0800c6a0
 8006e38:	0800c6a8 	.word	0x0800c6a8

08006e3c <arm_pid_init_f32>:
 8006e3c:	ed90 7a08 	vldr	s14, [r0, #32]
 8006e40:	edd0 7a06 	vldr	s15, [r0, #24]
 8006e44:	ed90 6a07 	vldr	s12, [r0, #28]
 8006e48:	eef1 6a67 	vneg.f32	s13, s15
 8006e4c:	ed80 7a02 	vstr	s14, [r0, #8]
 8006e50:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006e54:	ee37 6a07 	vadd.f32	s12, s14, s14
 8006e58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e5c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8006e60:	edc0 7a00 	vstr	s15, [r0]
 8006e64:	ed80 7a01 	vstr	s14, [r0, #4]
 8006e68:	b161      	cbz	r1, 8006e84 <arm_pid_init_f32+0x48>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	7303      	strb	r3, [r0, #12]
 8006e6e:	7343      	strb	r3, [r0, #13]
 8006e70:	7383      	strb	r3, [r0, #14]
 8006e72:	73c3      	strb	r3, [r0, #15]
 8006e74:	7403      	strb	r3, [r0, #16]
 8006e76:	7443      	strb	r3, [r0, #17]
 8006e78:	7483      	strb	r3, [r0, #18]
 8006e7a:	74c3      	strb	r3, [r0, #19]
 8006e7c:	7503      	strb	r3, [r0, #20]
 8006e7e:	7543      	strb	r3, [r0, #21]
 8006e80:	7583      	strb	r3, [r0, #22]
 8006e82:	75c3      	strb	r3, [r0, #23]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop

08006e88 <arm_sin_f32>:
 8006e88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006f04 <arm_sin_f32+0x7c>
 8006e90:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e98:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006e9c:	d42c      	bmi.n	8006ef8 <arm_sin_f32+0x70>
 8006e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ea2:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8006f08 <arm_sin_f32+0x80>
 8006ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006eae:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb6:	db01      	blt.n	8006ebc <arm_sin_f32+0x34>
 8006eb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ebc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006ec0:	4a12      	ldr	r2, [pc, #72]	@ (8006f0c <arm_sin_f32+0x84>)
 8006ec2:	ee17 3a10 	vmov	r3, s14
 8006ec6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ece:	ee06 3a90 	vmov	s13, r3
 8006ed2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006ed6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006eda:	ed91 0a00 	vldr	s0, [r1]
 8006ede:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ee2:	edd1 6a01 	vldr	s13, [r1, #4]
 8006ee6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006eea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006eee:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006ef2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ef6:	4770      	bx	lr
 8006ef8:	ee17 3a90 	vmov	r3, s15
 8006efc:	3b01      	subs	r3, #1
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	e7cc      	b.n	8006e9e <arm_sin_f32+0x16>
 8006f04:	3e22f983 	.word	0x3e22f983
 8006f08:	44000000 	.word	0x44000000
 8006f0c:	0800c6b0 	.word	0x0800c6b0

08006f10 <__cvt>:
 8006f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f12:	ed2d 8b02 	vpush	{d8}
 8006f16:	eeb0 8b40 	vmov.f64	d8, d0
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	4617      	mov	r7, r2
 8006f1e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006f20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f22:	ee18 2a90 	vmov	r2, s17
 8006f26:	f025 0520 	bic.w	r5, r5, #32
 8006f2a:	2a00      	cmp	r2, #0
 8006f2c:	bfb6      	itet	lt
 8006f2e:	222d      	movlt	r2, #45	@ 0x2d
 8006f30:	2200      	movge	r2, #0
 8006f32:	eeb1 8b40 	vneglt.f64	d8, d0
 8006f36:	2d46      	cmp	r5, #70	@ 0x46
 8006f38:	460c      	mov	r4, r1
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	d004      	beq.n	8006f48 <__cvt+0x38>
 8006f3e:	2d45      	cmp	r5, #69	@ 0x45
 8006f40:	d100      	bne.n	8006f44 <__cvt+0x34>
 8006f42:	3401      	adds	r4, #1
 8006f44:	2102      	movs	r1, #2
 8006f46:	e000      	b.n	8006f4a <__cvt+0x3a>
 8006f48:	2103      	movs	r1, #3
 8006f4a:	ab03      	add	r3, sp, #12
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	ab02      	add	r3, sp, #8
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	4622      	mov	r2, r4
 8006f54:	4633      	mov	r3, r6
 8006f56:	eeb0 0b48 	vmov.f64	d0, d8
 8006f5a:	f001 f865 	bl	8008028 <_dtoa_r>
 8006f5e:	2d47      	cmp	r5, #71	@ 0x47
 8006f60:	d114      	bne.n	8006f8c <__cvt+0x7c>
 8006f62:	07fb      	lsls	r3, r7, #31
 8006f64:	d50a      	bpl.n	8006f7c <__cvt+0x6c>
 8006f66:	1902      	adds	r2, r0, r4
 8006f68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f70:	bf08      	it	eq
 8006f72:	9203      	streq	r2, [sp, #12]
 8006f74:	2130      	movs	r1, #48	@ 0x30
 8006f76:	9b03      	ldr	r3, [sp, #12]
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d319      	bcc.n	8006fb0 <__cvt+0xa0>
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f80:	1a1b      	subs	r3, r3, r0
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	b005      	add	sp, #20
 8006f86:	ecbd 8b02 	vpop	{d8}
 8006f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8c:	2d46      	cmp	r5, #70	@ 0x46
 8006f8e:	eb00 0204 	add.w	r2, r0, r4
 8006f92:	d1e9      	bne.n	8006f68 <__cvt+0x58>
 8006f94:	7803      	ldrb	r3, [r0, #0]
 8006f96:	2b30      	cmp	r3, #48	@ 0x30
 8006f98:	d107      	bne.n	8006faa <__cvt+0x9a>
 8006f9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa2:	bf1c      	itt	ne
 8006fa4:	f1c4 0401 	rsbne	r4, r4, #1
 8006fa8:	6034      	strne	r4, [r6, #0]
 8006faa:	6833      	ldr	r3, [r6, #0]
 8006fac:	441a      	add	r2, r3
 8006fae:	e7db      	b.n	8006f68 <__cvt+0x58>
 8006fb0:	1c5c      	adds	r4, r3, #1
 8006fb2:	9403      	str	r4, [sp, #12]
 8006fb4:	7019      	strb	r1, [r3, #0]
 8006fb6:	e7de      	b.n	8006f76 <__cvt+0x66>

08006fb8 <__exponent>:
 8006fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fba:	2900      	cmp	r1, #0
 8006fbc:	bfba      	itte	lt
 8006fbe:	4249      	neglt	r1, r1
 8006fc0:	232d      	movlt	r3, #45	@ 0x2d
 8006fc2:	232b      	movge	r3, #43	@ 0x2b
 8006fc4:	2909      	cmp	r1, #9
 8006fc6:	7002      	strb	r2, [r0, #0]
 8006fc8:	7043      	strb	r3, [r0, #1]
 8006fca:	dd29      	ble.n	8007020 <__exponent+0x68>
 8006fcc:	f10d 0307 	add.w	r3, sp, #7
 8006fd0:	461d      	mov	r5, r3
 8006fd2:	270a      	movs	r7, #10
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fda:	fb07 1416 	mls	r4, r7, r6, r1
 8006fde:	3430      	adds	r4, #48	@ 0x30
 8006fe0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	2c63      	cmp	r4, #99	@ 0x63
 8006fe8:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fec:	4631      	mov	r1, r6
 8006fee:	dcf1      	bgt.n	8006fd4 <__exponent+0x1c>
 8006ff0:	3130      	adds	r1, #48	@ 0x30
 8006ff2:	1e94      	subs	r4, r2, #2
 8006ff4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ff8:	1c41      	adds	r1, r0, #1
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	42ab      	cmp	r3, r5
 8006ffe:	d30a      	bcc.n	8007016 <__exponent+0x5e>
 8007000:	f10d 0309 	add.w	r3, sp, #9
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	42ac      	cmp	r4, r5
 8007008:	bf88      	it	hi
 800700a:	2300      	movhi	r3, #0
 800700c:	3302      	adds	r3, #2
 800700e:	4403      	add	r3, r0
 8007010:	1a18      	subs	r0, r3, r0
 8007012:	b003      	add	sp, #12
 8007014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007016:	f813 6b01 	ldrb.w	r6, [r3], #1
 800701a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800701e:	e7ed      	b.n	8006ffc <__exponent+0x44>
 8007020:	2330      	movs	r3, #48	@ 0x30
 8007022:	3130      	adds	r1, #48	@ 0x30
 8007024:	7083      	strb	r3, [r0, #2]
 8007026:	70c1      	strb	r1, [r0, #3]
 8007028:	1d03      	adds	r3, r0, #4
 800702a:	e7f1      	b.n	8007010 <__exponent+0x58>
 800702c:	0000      	movs	r0, r0
	...

08007030 <_printf_float>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	b08d      	sub	sp, #52	@ 0x34
 8007036:	460c      	mov	r4, r1
 8007038:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800703c:	4616      	mov	r6, r2
 800703e:	461f      	mov	r7, r3
 8007040:	4605      	mov	r5, r0
 8007042:	f000 fee9 	bl	8007e18 <_localeconv_r>
 8007046:	f8d0 b000 	ldr.w	fp, [r0]
 800704a:	4658      	mov	r0, fp
 800704c:	f7f9 f998 	bl	8000380 <strlen>
 8007050:	2300      	movs	r3, #0
 8007052:	930a      	str	r3, [sp, #40]	@ 0x28
 8007054:	f8d8 3000 	ldr.w	r3, [r8]
 8007058:	f894 9018 	ldrb.w	r9, [r4, #24]
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	9005      	str	r0, [sp, #20]
 8007060:	3307      	adds	r3, #7
 8007062:	f023 0307 	bic.w	r3, r3, #7
 8007066:	f103 0108 	add.w	r1, r3, #8
 800706a:	f8c8 1000 	str.w	r1, [r8]
 800706e:	ed93 0b00 	vldr	d0, [r3]
 8007072:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80072d0 <_printf_float+0x2a0>
 8007076:	eeb0 7bc0 	vabs.f64	d7, d0
 800707a:	eeb4 7b46 	vcmp.f64	d7, d6
 800707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007082:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007086:	dd24      	ble.n	80070d2 <_printf_float+0xa2>
 8007088:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	d502      	bpl.n	8007098 <_printf_float+0x68>
 8007092:	232d      	movs	r3, #45	@ 0x2d
 8007094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007098:	498f      	ldr	r1, [pc, #572]	@ (80072d8 <_printf_float+0x2a8>)
 800709a:	4b90      	ldr	r3, [pc, #576]	@ (80072dc <_printf_float+0x2ac>)
 800709c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80070a0:	bf94      	ite	ls
 80070a2:	4688      	movls	r8, r1
 80070a4:	4698      	movhi	r8, r3
 80070a6:	f022 0204 	bic.w	r2, r2, #4
 80070aa:	2303      	movs	r3, #3
 80070ac:	6123      	str	r3, [r4, #16]
 80070ae:	6022      	str	r2, [r4, #0]
 80070b0:	f04f 0a00 	mov.w	sl, #0
 80070b4:	9700      	str	r7, [sp, #0]
 80070b6:	4633      	mov	r3, r6
 80070b8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80070ba:	4621      	mov	r1, r4
 80070bc:	4628      	mov	r0, r5
 80070be:	f000 f9d1 	bl	8007464 <_printf_common>
 80070c2:	3001      	adds	r0, #1
 80070c4:	f040 8089 	bne.w	80071da <_printf_float+0x1aa>
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	b00d      	add	sp, #52	@ 0x34
 80070ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80070d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070da:	d709      	bvc.n	80070f0 <_printf_float+0xc0>
 80070dc:	ee10 3a90 	vmov	r3, s1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bfbc      	itt	lt
 80070e4:	232d      	movlt	r3, #45	@ 0x2d
 80070e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070ea:	497d      	ldr	r1, [pc, #500]	@ (80072e0 <_printf_float+0x2b0>)
 80070ec:	4b7d      	ldr	r3, [pc, #500]	@ (80072e4 <_printf_float+0x2b4>)
 80070ee:	e7d5      	b.n	800709c <_printf_float+0x6c>
 80070f0:	6863      	ldr	r3, [r4, #4]
 80070f2:	1c59      	adds	r1, r3, #1
 80070f4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80070f8:	d139      	bne.n	800716e <_printf_float+0x13e>
 80070fa:	2306      	movs	r3, #6
 80070fc:	6063      	str	r3, [r4, #4]
 80070fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007102:	2300      	movs	r3, #0
 8007104:	6022      	str	r2, [r4, #0]
 8007106:	9303      	str	r3, [sp, #12]
 8007108:	ab0a      	add	r3, sp, #40	@ 0x28
 800710a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800710e:	ab09      	add	r3, sp, #36	@ 0x24
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	6861      	ldr	r1, [r4, #4]
 8007114:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007118:	4628      	mov	r0, r5
 800711a:	f7ff fef9 	bl	8006f10 <__cvt>
 800711e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007122:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007124:	4680      	mov	r8, r0
 8007126:	d129      	bne.n	800717c <_printf_float+0x14c>
 8007128:	1cc8      	adds	r0, r1, #3
 800712a:	db02      	blt.n	8007132 <_printf_float+0x102>
 800712c:	6863      	ldr	r3, [r4, #4]
 800712e:	4299      	cmp	r1, r3
 8007130:	dd41      	ble.n	80071b6 <_printf_float+0x186>
 8007132:	f1a9 0902 	sub.w	r9, r9, #2
 8007136:	fa5f f989 	uxtb.w	r9, r9
 800713a:	3901      	subs	r1, #1
 800713c:	464a      	mov	r2, r9
 800713e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007142:	9109      	str	r1, [sp, #36]	@ 0x24
 8007144:	f7ff ff38 	bl	8006fb8 <__exponent>
 8007148:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800714a:	1813      	adds	r3, r2, r0
 800714c:	2a01      	cmp	r2, #1
 800714e:	4682      	mov	sl, r0
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	dc02      	bgt.n	800715a <_printf_float+0x12a>
 8007154:	6822      	ldr	r2, [r4, #0]
 8007156:	07d2      	lsls	r2, r2, #31
 8007158:	d501      	bpl.n	800715e <_printf_float+0x12e>
 800715a:	3301      	adds	r3, #1
 800715c:	6123      	str	r3, [r4, #16]
 800715e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0a6      	beq.n	80070b4 <_printf_float+0x84>
 8007166:	232d      	movs	r3, #45	@ 0x2d
 8007168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800716c:	e7a2      	b.n	80070b4 <_printf_float+0x84>
 800716e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007172:	d1c4      	bne.n	80070fe <_printf_float+0xce>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1c2      	bne.n	80070fe <_printf_float+0xce>
 8007178:	2301      	movs	r3, #1
 800717a:	e7bf      	b.n	80070fc <_printf_float+0xcc>
 800717c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007180:	d9db      	bls.n	800713a <_printf_float+0x10a>
 8007182:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007186:	d118      	bne.n	80071ba <_printf_float+0x18a>
 8007188:	2900      	cmp	r1, #0
 800718a:	6863      	ldr	r3, [r4, #4]
 800718c:	dd0b      	ble.n	80071a6 <_printf_float+0x176>
 800718e:	6121      	str	r1, [r4, #16]
 8007190:	b913      	cbnz	r3, 8007198 <_printf_float+0x168>
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	07d0      	lsls	r0, r2, #31
 8007196:	d502      	bpl.n	800719e <_printf_float+0x16e>
 8007198:	3301      	adds	r3, #1
 800719a:	440b      	add	r3, r1
 800719c:	6123      	str	r3, [r4, #16]
 800719e:	65a1      	str	r1, [r4, #88]	@ 0x58
 80071a0:	f04f 0a00 	mov.w	sl, #0
 80071a4:	e7db      	b.n	800715e <_printf_float+0x12e>
 80071a6:	b913      	cbnz	r3, 80071ae <_printf_float+0x17e>
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	07d2      	lsls	r2, r2, #31
 80071ac:	d501      	bpl.n	80071b2 <_printf_float+0x182>
 80071ae:	3302      	adds	r3, #2
 80071b0:	e7f4      	b.n	800719c <_printf_float+0x16c>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e7f2      	b.n	800719c <_printf_float+0x16c>
 80071b6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80071ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071bc:	4299      	cmp	r1, r3
 80071be:	db05      	blt.n	80071cc <_printf_float+0x19c>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	6121      	str	r1, [r4, #16]
 80071c4:	07d8      	lsls	r0, r3, #31
 80071c6:	d5ea      	bpl.n	800719e <_printf_float+0x16e>
 80071c8:	1c4b      	adds	r3, r1, #1
 80071ca:	e7e7      	b.n	800719c <_printf_float+0x16c>
 80071cc:	2900      	cmp	r1, #0
 80071ce:	bfd4      	ite	le
 80071d0:	f1c1 0202 	rsble	r2, r1, #2
 80071d4:	2201      	movgt	r2, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	e7e0      	b.n	800719c <_printf_float+0x16c>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	055a      	lsls	r2, r3, #21
 80071de:	d407      	bmi.n	80071f0 <_printf_float+0x1c0>
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	4642      	mov	r2, r8
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	d12a      	bne.n	8007244 <_printf_float+0x214>
 80071ee:	e76b      	b.n	80070c8 <_printf_float+0x98>
 80071f0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80071f4:	f240 80e0 	bls.w	80073b8 <_printf_float+0x388>
 80071f8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80071fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007204:	d133      	bne.n	800726e <_printf_float+0x23e>
 8007206:	4a38      	ldr	r2, [pc, #224]	@ (80072e8 <_printf_float+0x2b8>)
 8007208:	2301      	movs	r3, #1
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f af59 	beq.w	80070c8 <_printf_float+0x98>
 8007216:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800721a:	4543      	cmp	r3, r8
 800721c:	db02      	blt.n	8007224 <_printf_float+0x1f4>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	07d8      	lsls	r0, r3, #31
 8007222:	d50f      	bpl.n	8007244 <_printf_float+0x214>
 8007224:	9b05      	ldr	r3, [sp, #20]
 8007226:	465a      	mov	r2, fp
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f af4a 	beq.w	80070c8 <_printf_float+0x98>
 8007234:	f04f 0900 	mov.w	r9, #0
 8007238:	f108 38ff 	add.w	r8, r8, #4294967295
 800723c:	f104 0a1a 	add.w	sl, r4, #26
 8007240:	45c8      	cmp	r8, r9
 8007242:	dc09      	bgt.n	8007258 <_printf_float+0x228>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	079b      	lsls	r3, r3, #30
 8007248:	f100 8107 	bmi.w	800745a <_printf_float+0x42a>
 800724c:	68e0      	ldr	r0, [r4, #12]
 800724e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007250:	4298      	cmp	r0, r3
 8007252:	bfb8      	it	lt
 8007254:	4618      	movlt	r0, r3
 8007256:	e739      	b.n	80070cc <_printf_float+0x9c>
 8007258:	2301      	movs	r3, #1
 800725a:	4652      	mov	r2, sl
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	f43f af30 	beq.w	80070c8 <_printf_float+0x98>
 8007268:	f109 0901 	add.w	r9, r9, #1
 800726c:	e7e8      	b.n	8007240 <_printf_float+0x210>
 800726e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	dc3b      	bgt.n	80072ec <_printf_float+0x2bc>
 8007274:	4a1c      	ldr	r2, [pc, #112]	@ (80072e8 <_printf_float+0x2b8>)
 8007276:	2301      	movs	r3, #1
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af22 	beq.w	80070c8 <_printf_float+0x98>
 8007284:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007288:	ea59 0303 	orrs.w	r3, r9, r3
 800728c:	d102      	bne.n	8007294 <_printf_float+0x264>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	07d9      	lsls	r1, r3, #31
 8007292:	d5d7      	bpl.n	8007244 <_printf_float+0x214>
 8007294:	9b05      	ldr	r3, [sp, #20]
 8007296:	465a      	mov	r2, fp
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f af12 	beq.w	80070c8 <_printf_float+0x98>
 80072a4:	f04f 0a00 	mov.w	sl, #0
 80072a8:	f104 0b1a 	add.w	fp, r4, #26
 80072ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ae:	425b      	negs	r3, r3
 80072b0:	4553      	cmp	r3, sl
 80072b2:	dc01      	bgt.n	80072b8 <_printf_float+0x288>
 80072b4:	464b      	mov	r3, r9
 80072b6:	e794      	b.n	80071e2 <_printf_float+0x1b2>
 80072b8:	2301      	movs	r3, #1
 80072ba:	465a      	mov	r2, fp
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f af00 	beq.w	80070c8 <_printf_float+0x98>
 80072c8:	f10a 0a01 	add.w	sl, sl, #1
 80072cc:	e7ee      	b.n	80072ac <_printf_float+0x27c>
 80072ce:	bf00      	nop
 80072d0:	ffffffff 	.word	0xffffffff
 80072d4:	7fefffff 	.word	0x7fefffff
 80072d8:	0800ceb4 	.word	0x0800ceb4
 80072dc:	0800ceb8 	.word	0x0800ceb8
 80072e0:	0800cebc 	.word	0x0800cebc
 80072e4:	0800cec0 	.word	0x0800cec0
 80072e8:	0800cec4 	.word	0x0800cec4
 80072ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072f2:	4553      	cmp	r3, sl
 80072f4:	bfa8      	it	ge
 80072f6:	4653      	movge	r3, sl
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	4699      	mov	r9, r3
 80072fc:	dc37      	bgt.n	800736e <_printf_float+0x33e>
 80072fe:	2300      	movs	r3, #0
 8007300:	9307      	str	r3, [sp, #28]
 8007302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007306:	f104 021a 	add.w	r2, r4, #26
 800730a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800730c:	9907      	ldr	r1, [sp, #28]
 800730e:	9306      	str	r3, [sp, #24]
 8007310:	eba3 0309 	sub.w	r3, r3, r9
 8007314:	428b      	cmp	r3, r1
 8007316:	dc31      	bgt.n	800737c <_printf_float+0x34c>
 8007318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731a:	459a      	cmp	sl, r3
 800731c:	dc3b      	bgt.n	8007396 <_printf_float+0x366>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	07da      	lsls	r2, r3, #31
 8007322:	d438      	bmi.n	8007396 <_printf_float+0x366>
 8007324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007326:	ebaa 0903 	sub.w	r9, sl, r3
 800732a:	9b06      	ldr	r3, [sp, #24]
 800732c:	ebaa 0303 	sub.w	r3, sl, r3
 8007330:	4599      	cmp	r9, r3
 8007332:	bfa8      	it	ge
 8007334:	4699      	movge	r9, r3
 8007336:	f1b9 0f00 	cmp.w	r9, #0
 800733a:	dc34      	bgt.n	80073a6 <_printf_float+0x376>
 800733c:	f04f 0800 	mov.w	r8, #0
 8007340:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007344:	f104 0b1a 	add.w	fp, r4, #26
 8007348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734a:	ebaa 0303 	sub.w	r3, sl, r3
 800734e:	eba3 0309 	sub.w	r3, r3, r9
 8007352:	4543      	cmp	r3, r8
 8007354:	f77f af76 	ble.w	8007244 <_printf_float+0x214>
 8007358:	2301      	movs	r3, #1
 800735a:	465a      	mov	r2, fp
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f aeb0 	beq.w	80070c8 <_printf_float+0x98>
 8007368:	f108 0801 	add.w	r8, r8, #1
 800736c:	e7ec      	b.n	8007348 <_printf_float+0x318>
 800736e:	4642      	mov	r2, r8
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	d1c1      	bne.n	80072fe <_printf_float+0x2ce>
 800737a:	e6a5      	b.n	80070c8 <_printf_float+0x98>
 800737c:	2301      	movs	r3, #1
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	9206      	str	r2, [sp, #24]
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	f43f ae9e 	beq.w	80070c8 <_printf_float+0x98>
 800738c:	9b07      	ldr	r3, [sp, #28]
 800738e:	9a06      	ldr	r2, [sp, #24]
 8007390:	3301      	adds	r3, #1
 8007392:	9307      	str	r3, [sp, #28]
 8007394:	e7b9      	b.n	800730a <_printf_float+0x2da>
 8007396:	9b05      	ldr	r3, [sp, #20]
 8007398:	465a      	mov	r2, fp
 800739a:	4631      	mov	r1, r6
 800739c:	4628      	mov	r0, r5
 800739e:	47b8      	blx	r7
 80073a0:	3001      	adds	r0, #1
 80073a2:	d1bf      	bne.n	8007324 <_printf_float+0x2f4>
 80073a4:	e690      	b.n	80070c8 <_printf_float+0x98>
 80073a6:	9a06      	ldr	r2, [sp, #24]
 80073a8:	464b      	mov	r3, r9
 80073aa:	4442      	add	r2, r8
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	d1c2      	bne.n	800733c <_printf_float+0x30c>
 80073b6:	e687      	b.n	80070c8 <_printf_float+0x98>
 80073b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80073bc:	f1b9 0f01 	cmp.w	r9, #1
 80073c0:	dc01      	bgt.n	80073c6 <_printf_float+0x396>
 80073c2:	07db      	lsls	r3, r3, #31
 80073c4:	d536      	bpl.n	8007434 <_printf_float+0x404>
 80073c6:	2301      	movs	r3, #1
 80073c8:	4642      	mov	r2, r8
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b8      	blx	r7
 80073d0:	3001      	adds	r0, #1
 80073d2:	f43f ae79 	beq.w	80070c8 <_printf_float+0x98>
 80073d6:	9b05      	ldr	r3, [sp, #20]
 80073d8:	465a      	mov	r2, fp
 80073da:	4631      	mov	r1, r6
 80073dc:	4628      	mov	r0, r5
 80073de:	47b8      	blx	r7
 80073e0:	3001      	adds	r0, #1
 80073e2:	f43f ae71 	beq.w	80070c8 <_printf_float+0x98>
 80073e6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80073ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80073f6:	d018      	beq.n	800742a <_printf_float+0x3fa>
 80073f8:	464b      	mov	r3, r9
 80073fa:	f108 0201 	add.w	r2, r8, #1
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	d10c      	bne.n	8007422 <_printf_float+0x3f2>
 8007408:	e65e      	b.n	80070c8 <_printf_float+0x98>
 800740a:	2301      	movs	r3, #1
 800740c:	465a      	mov	r2, fp
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f ae57 	beq.w	80070c8 <_printf_float+0x98>
 800741a:	f108 0801 	add.w	r8, r8, #1
 800741e:	45c8      	cmp	r8, r9
 8007420:	dbf3      	blt.n	800740a <_printf_float+0x3da>
 8007422:	4653      	mov	r3, sl
 8007424:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007428:	e6dc      	b.n	80071e4 <_printf_float+0x1b4>
 800742a:	f04f 0800 	mov.w	r8, #0
 800742e:	f104 0b1a 	add.w	fp, r4, #26
 8007432:	e7f4      	b.n	800741e <_printf_float+0x3ee>
 8007434:	2301      	movs	r3, #1
 8007436:	4642      	mov	r2, r8
 8007438:	e7e1      	b.n	80073fe <_printf_float+0x3ce>
 800743a:	2301      	movs	r3, #1
 800743c:	464a      	mov	r2, r9
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	f43f ae3f 	beq.w	80070c8 <_printf_float+0x98>
 800744a:	f108 0801 	add.w	r8, r8, #1
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007452:	1a5b      	subs	r3, r3, r1
 8007454:	4543      	cmp	r3, r8
 8007456:	dcf0      	bgt.n	800743a <_printf_float+0x40a>
 8007458:	e6f8      	b.n	800724c <_printf_float+0x21c>
 800745a:	f04f 0800 	mov.w	r8, #0
 800745e:	f104 0919 	add.w	r9, r4, #25
 8007462:	e7f4      	b.n	800744e <_printf_float+0x41e>

08007464 <_printf_common>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	4616      	mov	r6, r2
 800746a:	4698      	mov	r8, r3
 800746c:	688a      	ldr	r2, [r1, #8]
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007474:	4293      	cmp	r3, r2
 8007476:	bfb8      	it	lt
 8007478:	4613      	movlt	r3, r2
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007480:	4607      	mov	r7, r0
 8007482:	460c      	mov	r4, r1
 8007484:	b10a      	cbz	r2, 800748a <_printf_common+0x26>
 8007486:	3301      	adds	r3, #1
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	0699      	lsls	r1, r3, #26
 800748e:	bf42      	ittt	mi
 8007490:	6833      	ldrmi	r3, [r6, #0]
 8007492:	3302      	addmi	r3, #2
 8007494:	6033      	strmi	r3, [r6, #0]
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	f015 0506 	ands.w	r5, r5, #6
 800749c:	d106      	bne.n	80074ac <_printf_common+0x48>
 800749e:	f104 0a19 	add.w	sl, r4, #25
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	6832      	ldr	r2, [r6, #0]
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	42ab      	cmp	r3, r5
 80074aa:	dc26      	bgt.n	80074fa <_printf_common+0x96>
 80074ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	3b00      	subs	r3, #0
 80074b4:	bf18      	it	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	0692      	lsls	r2, r2, #26
 80074ba:	d42b      	bmi.n	8007514 <_printf_common+0xb0>
 80074bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c8      	blx	r9
 80074c6:	3001      	adds	r0, #1
 80074c8:	d01e      	beq.n	8007508 <_printf_common+0xa4>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	6922      	ldr	r2, [r4, #16]
 80074ce:	f003 0306 	and.w	r3, r3, #6
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	bf02      	ittt	eq
 80074d6:	68e5      	ldreq	r5, [r4, #12]
 80074d8:	6833      	ldreq	r3, [r6, #0]
 80074da:	1aed      	subeq	r5, r5, r3
 80074dc:	68a3      	ldr	r3, [r4, #8]
 80074de:	bf0c      	ite	eq
 80074e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074e4:	2500      	movne	r5, #0
 80074e6:	4293      	cmp	r3, r2
 80074e8:	bfc4      	itt	gt
 80074ea:	1a9b      	subgt	r3, r3, r2
 80074ec:	18ed      	addgt	r5, r5, r3
 80074ee:	2600      	movs	r6, #0
 80074f0:	341a      	adds	r4, #26
 80074f2:	42b5      	cmp	r5, r6
 80074f4:	d11a      	bne.n	800752c <_printf_common+0xc8>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e008      	b.n	800750c <_printf_common+0xa8>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4652      	mov	r2, sl
 80074fe:	4641      	mov	r1, r8
 8007500:	4638      	mov	r0, r7
 8007502:	47c8      	blx	r9
 8007504:	3001      	adds	r0, #1
 8007506:	d103      	bne.n	8007510 <_printf_common+0xac>
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007510:	3501      	adds	r5, #1
 8007512:	e7c6      	b.n	80074a2 <_printf_common+0x3e>
 8007514:	18e1      	adds	r1, r4, r3
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	2030      	movs	r0, #48	@ 0x30
 800751a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800751e:	4422      	add	r2, r4
 8007520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007528:	3302      	adds	r3, #2
 800752a:	e7c7      	b.n	80074bc <_printf_common+0x58>
 800752c:	2301      	movs	r3, #1
 800752e:	4622      	mov	r2, r4
 8007530:	4641      	mov	r1, r8
 8007532:	4638      	mov	r0, r7
 8007534:	47c8      	blx	r9
 8007536:	3001      	adds	r0, #1
 8007538:	d0e6      	beq.n	8007508 <_printf_common+0xa4>
 800753a:	3601      	adds	r6, #1
 800753c:	e7d9      	b.n	80074f2 <_printf_common+0x8e>
	...

08007540 <_printf_i>:
 8007540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	7e0f      	ldrb	r7, [r1, #24]
 8007546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007548:	2f78      	cmp	r7, #120	@ 0x78
 800754a:	4691      	mov	r9, r2
 800754c:	4680      	mov	r8, r0
 800754e:	460c      	mov	r4, r1
 8007550:	469a      	mov	sl, r3
 8007552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007556:	d807      	bhi.n	8007568 <_printf_i+0x28>
 8007558:	2f62      	cmp	r7, #98	@ 0x62
 800755a:	d80a      	bhi.n	8007572 <_printf_i+0x32>
 800755c:	2f00      	cmp	r7, #0
 800755e:	f000 80d2 	beq.w	8007706 <_printf_i+0x1c6>
 8007562:	2f58      	cmp	r7, #88	@ 0x58
 8007564:	f000 80b9 	beq.w	80076da <_printf_i+0x19a>
 8007568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800756c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007570:	e03a      	b.n	80075e8 <_printf_i+0xa8>
 8007572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007576:	2b15      	cmp	r3, #21
 8007578:	d8f6      	bhi.n	8007568 <_printf_i+0x28>
 800757a:	a101      	add	r1, pc, #4	@ (adr r1, 8007580 <_printf_i+0x40>)
 800757c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007580:	080075d9 	.word	0x080075d9
 8007584:	080075ed 	.word	0x080075ed
 8007588:	08007569 	.word	0x08007569
 800758c:	08007569 	.word	0x08007569
 8007590:	08007569 	.word	0x08007569
 8007594:	08007569 	.word	0x08007569
 8007598:	080075ed 	.word	0x080075ed
 800759c:	08007569 	.word	0x08007569
 80075a0:	08007569 	.word	0x08007569
 80075a4:	08007569 	.word	0x08007569
 80075a8:	08007569 	.word	0x08007569
 80075ac:	080076ed 	.word	0x080076ed
 80075b0:	08007617 	.word	0x08007617
 80075b4:	080076a7 	.word	0x080076a7
 80075b8:	08007569 	.word	0x08007569
 80075bc:	08007569 	.word	0x08007569
 80075c0:	0800770f 	.word	0x0800770f
 80075c4:	08007569 	.word	0x08007569
 80075c8:	08007617 	.word	0x08007617
 80075cc:	08007569 	.word	0x08007569
 80075d0:	08007569 	.word	0x08007569
 80075d4:	080076af 	.word	0x080076af
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	1d1a      	adds	r2, r3, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6032      	str	r2, [r6, #0]
 80075e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075e8:	2301      	movs	r3, #1
 80075ea:	e09d      	b.n	8007728 <_printf_i+0x1e8>
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	1d19      	adds	r1, r3, #4
 80075f2:	6031      	str	r1, [r6, #0]
 80075f4:	0606      	lsls	r6, r0, #24
 80075f6:	d501      	bpl.n	80075fc <_printf_i+0xbc>
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	e003      	b.n	8007604 <_printf_i+0xc4>
 80075fc:	0645      	lsls	r5, r0, #25
 80075fe:	d5fb      	bpl.n	80075f8 <_printf_i+0xb8>
 8007600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007604:	2d00      	cmp	r5, #0
 8007606:	da03      	bge.n	8007610 <_printf_i+0xd0>
 8007608:	232d      	movs	r3, #45	@ 0x2d
 800760a:	426d      	negs	r5, r5
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007610:	4859      	ldr	r0, [pc, #356]	@ (8007778 <_printf_i+0x238>)
 8007612:	230a      	movs	r3, #10
 8007614:	e011      	b.n	800763a <_printf_i+0xfa>
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	0608      	lsls	r0, r1, #24
 800761c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007620:	d402      	bmi.n	8007628 <_printf_i+0xe8>
 8007622:	0649      	lsls	r1, r1, #25
 8007624:	bf48      	it	mi
 8007626:	b2ad      	uxthmi	r5, r5
 8007628:	2f6f      	cmp	r7, #111	@ 0x6f
 800762a:	4853      	ldr	r0, [pc, #332]	@ (8007778 <_printf_i+0x238>)
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	bf14      	ite	ne
 8007630:	230a      	movne	r3, #10
 8007632:	2308      	moveq	r3, #8
 8007634:	2100      	movs	r1, #0
 8007636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800763a:	6866      	ldr	r6, [r4, #4]
 800763c:	60a6      	str	r6, [r4, #8]
 800763e:	2e00      	cmp	r6, #0
 8007640:	bfa2      	ittt	ge
 8007642:	6821      	ldrge	r1, [r4, #0]
 8007644:	f021 0104 	bicge.w	r1, r1, #4
 8007648:	6021      	strge	r1, [r4, #0]
 800764a:	b90d      	cbnz	r5, 8007650 <_printf_i+0x110>
 800764c:	2e00      	cmp	r6, #0
 800764e:	d04b      	beq.n	80076e8 <_printf_i+0x1a8>
 8007650:	4616      	mov	r6, r2
 8007652:	fbb5 f1f3 	udiv	r1, r5, r3
 8007656:	fb03 5711 	mls	r7, r3, r1, r5
 800765a:	5dc7      	ldrb	r7, [r0, r7]
 800765c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007660:	462f      	mov	r7, r5
 8007662:	42bb      	cmp	r3, r7
 8007664:	460d      	mov	r5, r1
 8007666:	d9f4      	bls.n	8007652 <_printf_i+0x112>
 8007668:	2b08      	cmp	r3, #8
 800766a:	d10b      	bne.n	8007684 <_printf_i+0x144>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	07df      	lsls	r7, r3, #31
 8007670:	d508      	bpl.n	8007684 <_printf_i+0x144>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	6861      	ldr	r1, [r4, #4]
 8007676:	4299      	cmp	r1, r3
 8007678:	bfde      	ittt	le
 800767a:	2330      	movle	r3, #48	@ 0x30
 800767c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007684:	1b92      	subs	r2, r2, r6
 8007686:	6122      	str	r2, [r4, #16]
 8007688:	f8cd a000 	str.w	sl, [sp]
 800768c:	464b      	mov	r3, r9
 800768e:	aa03      	add	r2, sp, #12
 8007690:	4621      	mov	r1, r4
 8007692:	4640      	mov	r0, r8
 8007694:	f7ff fee6 	bl	8007464 <_printf_common>
 8007698:	3001      	adds	r0, #1
 800769a:	d14a      	bne.n	8007732 <_printf_i+0x1f2>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	b004      	add	sp, #16
 80076a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	f043 0320 	orr.w	r3, r3, #32
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	4833      	ldr	r0, [pc, #204]	@ (800777c <_printf_i+0x23c>)
 80076b0:	2778      	movs	r7, #120	@ 0x78
 80076b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	6831      	ldr	r1, [r6, #0]
 80076ba:	061f      	lsls	r7, r3, #24
 80076bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80076c0:	d402      	bmi.n	80076c8 <_printf_i+0x188>
 80076c2:	065f      	lsls	r7, r3, #25
 80076c4:	bf48      	it	mi
 80076c6:	b2ad      	uxthmi	r5, r5
 80076c8:	6031      	str	r1, [r6, #0]
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	bf44      	itt	mi
 80076ce:	f043 0320 	orrmi.w	r3, r3, #32
 80076d2:	6023      	strmi	r3, [r4, #0]
 80076d4:	b11d      	cbz	r5, 80076de <_printf_i+0x19e>
 80076d6:	2310      	movs	r3, #16
 80076d8:	e7ac      	b.n	8007634 <_printf_i+0xf4>
 80076da:	4827      	ldr	r0, [pc, #156]	@ (8007778 <_printf_i+0x238>)
 80076dc:	e7e9      	b.n	80076b2 <_printf_i+0x172>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f023 0320 	bic.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	e7f6      	b.n	80076d6 <_printf_i+0x196>
 80076e8:	4616      	mov	r6, r2
 80076ea:	e7bd      	b.n	8007668 <_printf_i+0x128>
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	6825      	ldr	r5, [r4, #0]
 80076f0:	6961      	ldr	r1, [r4, #20]
 80076f2:	1d18      	adds	r0, r3, #4
 80076f4:	6030      	str	r0, [r6, #0]
 80076f6:	062e      	lsls	r6, r5, #24
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	d501      	bpl.n	8007700 <_printf_i+0x1c0>
 80076fc:	6019      	str	r1, [r3, #0]
 80076fe:	e002      	b.n	8007706 <_printf_i+0x1c6>
 8007700:	0668      	lsls	r0, r5, #25
 8007702:	d5fb      	bpl.n	80076fc <_printf_i+0x1bc>
 8007704:	8019      	strh	r1, [r3, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	4616      	mov	r6, r2
 800770c:	e7bc      	b.n	8007688 <_printf_i+0x148>
 800770e:	6833      	ldr	r3, [r6, #0]
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	6032      	str	r2, [r6, #0]
 8007714:	681e      	ldr	r6, [r3, #0]
 8007716:	6862      	ldr	r2, [r4, #4]
 8007718:	2100      	movs	r1, #0
 800771a:	4630      	mov	r0, r6
 800771c:	f7f8 fde0 	bl	80002e0 <memchr>
 8007720:	b108      	cbz	r0, 8007726 <_printf_i+0x1e6>
 8007722:	1b80      	subs	r0, r0, r6
 8007724:	6060      	str	r0, [r4, #4]
 8007726:	6863      	ldr	r3, [r4, #4]
 8007728:	6123      	str	r3, [r4, #16]
 800772a:	2300      	movs	r3, #0
 800772c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007730:	e7aa      	b.n	8007688 <_printf_i+0x148>
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	4632      	mov	r2, r6
 8007736:	4649      	mov	r1, r9
 8007738:	4640      	mov	r0, r8
 800773a:	47d0      	blx	sl
 800773c:	3001      	adds	r0, #1
 800773e:	d0ad      	beq.n	800769c <_printf_i+0x15c>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	079b      	lsls	r3, r3, #30
 8007744:	d413      	bmi.n	800776e <_printf_i+0x22e>
 8007746:	68e0      	ldr	r0, [r4, #12]
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	4298      	cmp	r0, r3
 800774c:	bfb8      	it	lt
 800774e:	4618      	movlt	r0, r3
 8007750:	e7a6      	b.n	80076a0 <_printf_i+0x160>
 8007752:	2301      	movs	r3, #1
 8007754:	4632      	mov	r2, r6
 8007756:	4649      	mov	r1, r9
 8007758:	4640      	mov	r0, r8
 800775a:	47d0      	blx	sl
 800775c:	3001      	adds	r0, #1
 800775e:	d09d      	beq.n	800769c <_printf_i+0x15c>
 8007760:	3501      	adds	r5, #1
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	9903      	ldr	r1, [sp, #12]
 8007766:	1a5b      	subs	r3, r3, r1
 8007768:	42ab      	cmp	r3, r5
 800776a:	dcf2      	bgt.n	8007752 <_printf_i+0x212>
 800776c:	e7eb      	b.n	8007746 <_printf_i+0x206>
 800776e:	2500      	movs	r5, #0
 8007770:	f104 0619 	add.w	r6, r4, #25
 8007774:	e7f5      	b.n	8007762 <_printf_i+0x222>
 8007776:	bf00      	nop
 8007778:	0800cec6 	.word	0x0800cec6
 800777c:	0800ced7 	.word	0x0800ced7

08007780 <_scanf_float>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	b087      	sub	sp, #28
 8007786:	4617      	mov	r7, r2
 8007788:	9303      	str	r3, [sp, #12]
 800778a:	688b      	ldr	r3, [r1, #8]
 800778c:	1e5a      	subs	r2, r3, #1
 800778e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007792:	bf81      	itttt	hi
 8007794:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007798:	eb03 0b05 	addhi.w	fp, r3, r5
 800779c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80077a0:	608b      	strhi	r3, [r1, #8]
 80077a2:	680b      	ldr	r3, [r1, #0]
 80077a4:	460a      	mov	r2, r1
 80077a6:	f04f 0500 	mov.w	r5, #0
 80077aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80077ae:	f842 3b1c 	str.w	r3, [r2], #28
 80077b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077b6:	4680      	mov	r8, r0
 80077b8:	460c      	mov	r4, r1
 80077ba:	bf98      	it	ls
 80077bc:	f04f 0b00 	movls.w	fp, #0
 80077c0:	9201      	str	r2, [sp, #4]
 80077c2:	4616      	mov	r6, r2
 80077c4:	46aa      	mov	sl, r5
 80077c6:	46a9      	mov	r9, r5
 80077c8:	9502      	str	r5, [sp, #8]
 80077ca:	68a2      	ldr	r2, [r4, #8]
 80077cc:	b152      	cbz	r2, 80077e4 <_scanf_float+0x64>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80077d4:	d864      	bhi.n	80078a0 <_scanf_float+0x120>
 80077d6:	2b40      	cmp	r3, #64	@ 0x40
 80077d8:	d83c      	bhi.n	8007854 <_scanf_float+0xd4>
 80077da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80077de:	b2c8      	uxtb	r0, r1
 80077e0:	280e      	cmp	r0, #14
 80077e2:	d93a      	bls.n	800785a <_scanf_float+0xda>
 80077e4:	f1b9 0f00 	cmp.w	r9, #0
 80077e8:	d003      	beq.n	80077f2 <_scanf_float+0x72>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077f6:	f1ba 0f01 	cmp.w	sl, #1
 80077fa:	f200 8117 	bhi.w	8007a2c <_scanf_float+0x2ac>
 80077fe:	9b01      	ldr	r3, [sp, #4]
 8007800:	429e      	cmp	r6, r3
 8007802:	f200 8108 	bhi.w	8007a16 <_scanf_float+0x296>
 8007806:	2001      	movs	r0, #1
 8007808:	b007      	add	sp, #28
 800780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007812:	2a0d      	cmp	r2, #13
 8007814:	d8e6      	bhi.n	80077e4 <_scanf_float+0x64>
 8007816:	a101      	add	r1, pc, #4	@ (adr r1, 800781c <_scanf_float+0x9c>)
 8007818:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800781c:	08007963 	.word	0x08007963
 8007820:	080077e5 	.word	0x080077e5
 8007824:	080077e5 	.word	0x080077e5
 8007828:	080077e5 	.word	0x080077e5
 800782c:	080079c3 	.word	0x080079c3
 8007830:	0800799b 	.word	0x0800799b
 8007834:	080077e5 	.word	0x080077e5
 8007838:	080077e5 	.word	0x080077e5
 800783c:	08007971 	.word	0x08007971
 8007840:	080077e5 	.word	0x080077e5
 8007844:	080077e5 	.word	0x080077e5
 8007848:	080077e5 	.word	0x080077e5
 800784c:	080077e5 	.word	0x080077e5
 8007850:	08007929 	.word	0x08007929
 8007854:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007858:	e7db      	b.n	8007812 <_scanf_float+0x92>
 800785a:	290e      	cmp	r1, #14
 800785c:	d8c2      	bhi.n	80077e4 <_scanf_float+0x64>
 800785e:	a001      	add	r0, pc, #4	@ (adr r0, 8007864 <_scanf_float+0xe4>)
 8007860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007864:	08007919 	.word	0x08007919
 8007868:	080077e5 	.word	0x080077e5
 800786c:	08007919 	.word	0x08007919
 8007870:	080079af 	.word	0x080079af
 8007874:	080077e5 	.word	0x080077e5
 8007878:	080078c1 	.word	0x080078c1
 800787c:	080078ff 	.word	0x080078ff
 8007880:	080078ff 	.word	0x080078ff
 8007884:	080078ff 	.word	0x080078ff
 8007888:	080078ff 	.word	0x080078ff
 800788c:	080078ff 	.word	0x080078ff
 8007890:	080078ff 	.word	0x080078ff
 8007894:	080078ff 	.word	0x080078ff
 8007898:	080078ff 	.word	0x080078ff
 800789c:	080078ff 	.word	0x080078ff
 80078a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80078a2:	d809      	bhi.n	80078b8 <_scanf_float+0x138>
 80078a4:	2b60      	cmp	r3, #96	@ 0x60
 80078a6:	d8b2      	bhi.n	800780e <_scanf_float+0x8e>
 80078a8:	2b54      	cmp	r3, #84	@ 0x54
 80078aa:	d07b      	beq.n	80079a4 <_scanf_float+0x224>
 80078ac:	2b59      	cmp	r3, #89	@ 0x59
 80078ae:	d199      	bne.n	80077e4 <_scanf_float+0x64>
 80078b0:	2d07      	cmp	r5, #7
 80078b2:	d197      	bne.n	80077e4 <_scanf_float+0x64>
 80078b4:	2508      	movs	r5, #8
 80078b6:	e02c      	b.n	8007912 <_scanf_float+0x192>
 80078b8:	2b74      	cmp	r3, #116	@ 0x74
 80078ba:	d073      	beq.n	80079a4 <_scanf_float+0x224>
 80078bc:	2b79      	cmp	r3, #121	@ 0x79
 80078be:	e7f6      	b.n	80078ae <_scanf_float+0x12e>
 80078c0:	6821      	ldr	r1, [r4, #0]
 80078c2:	05c8      	lsls	r0, r1, #23
 80078c4:	d51b      	bpl.n	80078fe <_scanf_float+0x17e>
 80078c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80078ca:	6021      	str	r1, [r4, #0]
 80078cc:	f109 0901 	add.w	r9, r9, #1
 80078d0:	f1bb 0f00 	cmp.w	fp, #0
 80078d4:	d003      	beq.n	80078de <_scanf_float+0x15e>
 80078d6:	3201      	adds	r2, #1
 80078d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078dc:	60a2      	str	r2, [r4, #8]
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	60a3      	str	r3, [r4, #8]
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	3301      	adds	r3, #1
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	607b      	str	r3, [r7, #4]
 80078f2:	f340 8087 	ble.w	8007a04 <_scanf_float+0x284>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	e765      	b.n	80077ca <_scanf_float+0x4a>
 80078fe:	eb1a 0105 	adds.w	r1, sl, r5
 8007902:	f47f af6f 	bne.w	80077e4 <_scanf_float+0x64>
 8007906:	6822      	ldr	r2, [r4, #0]
 8007908:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	460d      	mov	r5, r1
 8007910:	468a      	mov	sl, r1
 8007912:	f806 3b01 	strb.w	r3, [r6], #1
 8007916:	e7e2      	b.n	80078de <_scanf_float+0x15e>
 8007918:	6822      	ldr	r2, [r4, #0]
 800791a:	0610      	lsls	r0, r2, #24
 800791c:	f57f af62 	bpl.w	80077e4 <_scanf_float+0x64>
 8007920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	e7f4      	b.n	8007912 <_scanf_float+0x192>
 8007928:	f1ba 0f00 	cmp.w	sl, #0
 800792c:	d10e      	bne.n	800794c <_scanf_float+0x1cc>
 800792e:	f1b9 0f00 	cmp.w	r9, #0
 8007932:	d10e      	bne.n	8007952 <_scanf_float+0x1d2>
 8007934:	6822      	ldr	r2, [r4, #0]
 8007936:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800793a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800793e:	d108      	bne.n	8007952 <_scanf_float+0x1d2>
 8007940:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007944:	6022      	str	r2, [r4, #0]
 8007946:	f04f 0a01 	mov.w	sl, #1
 800794a:	e7e2      	b.n	8007912 <_scanf_float+0x192>
 800794c:	f1ba 0f02 	cmp.w	sl, #2
 8007950:	d055      	beq.n	80079fe <_scanf_float+0x27e>
 8007952:	2d01      	cmp	r5, #1
 8007954:	d002      	beq.n	800795c <_scanf_float+0x1dc>
 8007956:	2d04      	cmp	r5, #4
 8007958:	f47f af44 	bne.w	80077e4 <_scanf_float+0x64>
 800795c:	3501      	adds	r5, #1
 800795e:	b2ed      	uxtb	r5, r5
 8007960:	e7d7      	b.n	8007912 <_scanf_float+0x192>
 8007962:	f1ba 0f01 	cmp.w	sl, #1
 8007966:	f47f af3d 	bne.w	80077e4 <_scanf_float+0x64>
 800796a:	f04f 0a02 	mov.w	sl, #2
 800796e:	e7d0      	b.n	8007912 <_scanf_float+0x192>
 8007970:	b97d      	cbnz	r5, 8007992 <_scanf_float+0x212>
 8007972:	f1b9 0f00 	cmp.w	r9, #0
 8007976:	f47f af38 	bne.w	80077ea <_scanf_float+0x6a>
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007980:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007984:	f040 8101 	bne.w	8007b8a <_scanf_float+0x40a>
 8007988:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800798c:	6022      	str	r2, [r4, #0]
 800798e:	2501      	movs	r5, #1
 8007990:	e7bf      	b.n	8007912 <_scanf_float+0x192>
 8007992:	2d03      	cmp	r5, #3
 8007994:	d0e2      	beq.n	800795c <_scanf_float+0x1dc>
 8007996:	2d05      	cmp	r5, #5
 8007998:	e7de      	b.n	8007958 <_scanf_float+0x1d8>
 800799a:	2d02      	cmp	r5, #2
 800799c:	f47f af22 	bne.w	80077e4 <_scanf_float+0x64>
 80079a0:	2503      	movs	r5, #3
 80079a2:	e7b6      	b.n	8007912 <_scanf_float+0x192>
 80079a4:	2d06      	cmp	r5, #6
 80079a6:	f47f af1d 	bne.w	80077e4 <_scanf_float+0x64>
 80079aa:	2507      	movs	r5, #7
 80079ac:	e7b1      	b.n	8007912 <_scanf_float+0x192>
 80079ae:	6822      	ldr	r2, [r4, #0]
 80079b0:	0591      	lsls	r1, r2, #22
 80079b2:	f57f af17 	bpl.w	80077e4 <_scanf_float+0x64>
 80079b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80079ba:	6022      	str	r2, [r4, #0]
 80079bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80079c0:	e7a7      	b.n	8007912 <_scanf_float+0x192>
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80079c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80079cc:	d006      	beq.n	80079dc <_scanf_float+0x25c>
 80079ce:	0550      	lsls	r0, r2, #21
 80079d0:	f57f af08 	bpl.w	80077e4 <_scanf_float+0x64>
 80079d4:	f1b9 0f00 	cmp.w	r9, #0
 80079d8:	f000 80d7 	beq.w	8007b8a <_scanf_float+0x40a>
 80079dc:	0591      	lsls	r1, r2, #22
 80079de:	bf58      	it	pl
 80079e0:	9902      	ldrpl	r1, [sp, #8]
 80079e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079e6:	bf58      	it	pl
 80079e8:	eba9 0101 	subpl.w	r1, r9, r1
 80079ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80079f0:	bf58      	it	pl
 80079f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80079f6:	6022      	str	r2, [r4, #0]
 80079f8:	f04f 0900 	mov.w	r9, #0
 80079fc:	e789      	b.n	8007912 <_scanf_float+0x192>
 80079fe:	f04f 0a03 	mov.w	sl, #3
 8007a02:	e786      	b.n	8007912 <_scanf_float+0x192>
 8007a04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a08:	4639      	mov	r1, r7
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4798      	blx	r3
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f43f aedb 	beq.w	80077ca <_scanf_float+0x4a>
 8007a14:	e6e6      	b.n	80077e4 <_scanf_float+0x64>
 8007a16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a1e:	463a      	mov	r2, r7
 8007a20:	4640      	mov	r0, r8
 8007a22:	4798      	blx	r3
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	6123      	str	r3, [r4, #16]
 8007a2a:	e6e8      	b.n	80077fe <_scanf_float+0x7e>
 8007a2c:	1e6b      	subs	r3, r5, #1
 8007a2e:	2b06      	cmp	r3, #6
 8007a30:	d824      	bhi.n	8007a7c <_scanf_float+0x2fc>
 8007a32:	2d02      	cmp	r5, #2
 8007a34:	d836      	bhi.n	8007aa4 <_scanf_float+0x324>
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	429e      	cmp	r6, r3
 8007a3a:	f67f aee4 	bls.w	8007806 <_scanf_float+0x86>
 8007a3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a46:	463a      	mov	r2, r7
 8007a48:	4640      	mov	r0, r8
 8007a4a:	4798      	blx	r3
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	e7f0      	b.n	8007a36 <_scanf_float+0x2b6>
 8007a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	4640      	mov	r0, r8
 8007a60:	4798      	blx	r3
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a6c:	fa5f fa8a 	uxtb.w	sl, sl
 8007a70:	f1ba 0f02 	cmp.w	sl, #2
 8007a74:	d1ee      	bne.n	8007a54 <_scanf_float+0x2d4>
 8007a76:	3d03      	subs	r5, #3
 8007a78:	b2ed      	uxtb	r5, r5
 8007a7a:	1b76      	subs	r6, r6, r5
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	05da      	lsls	r2, r3, #23
 8007a80:	d530      	bpl.n	8007ae4 <_scanf_float+0x364>
 8007a82:	055b      	lsls	r3, r3, #21
 8007a84:	d511      	bpl.n	8007aaa <_scanf_float+0x32a>
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	429e      	cmp	r6, r3
 8007a8a:	f67f aebc 	bls.w	8007806 <_scanf_float+0x86>
 8007a8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a96:	463a      	mov	r2, r7
 8007a98:	4640      	mov	r0, r8
 8007a9a:	4798      	blx	r3
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	e7f0      	b.n	8007a86 <_scanf_float+0x306>
 8007aa4:	46aa      	mov	sl, r5
 8007aa6:	46b3      	mov	fp, r6
 8007aa8:	e7de      	b.n	8007a68 <_scanf_float+0x2e8>
 8007aaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	2965      	cmp	r1, #101	@ 0x65
 8007ab2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ab6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	d00c      	beq.n	8007ad8 <_scanf_float+0x358>
 8007abe:	2945      	cmp	r1, #69	@ 0x45
 8007ac0:	d00a      	beq.n	8007ad8 <_scanf_float+0x358>
 8007ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ac6:	463a      	mov	r2, r7
 8007ac8:	4640      	mov	r0, r8
 8007aca:	4798      	blx	r3
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	1eb5      	subs	r5, r6, #2
 8007ad6:	6123      	str	r3, [r4, #16]
 8007ad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007adc:	463a      	mov	r2, r7
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4798      	blx	r3
 8007ae2:	462e      	mov	r6, r5
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	f012 0210 	ands.w	r2, r2, #16
 8007aea:	d001      	beq.n	8007af0 <_scanf_float+0x370>
 8007aec:	2000      	movs	r0, #0
 8007aee:	e68b      	b.n	8007808 <_scanf_float+0x88>
 8007af0:	7032      	strb	r2, [r6, #0]
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007afc:	d11a      	bne.n	8007b34 <_scanf_float+0x3b4>
 8007afe:	9b02      	ldr	r3, [sp, #8]
 8007b00:	454b      	cmp	r3, r9
 8007b02:	eba3 0209 	sub.w	r2, r3, r9
 8007b06:	d121      	bne.n	8007b4c <_scanf_float+0x3cc>
 8007b08:	9901      	ldr	r1, [sp, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	f002 fb41 	bl	800a194 <_strtod_r>
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	6821      	ldr	r1, [r4, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f011 0f02 	tst.w	r1, #2
 8007b1c:	f103 0204 	add.w	r2, r3, #4
 8007b20:	d01f      	beq.n	8007b62 <_scanf_float+0x3e2>
 8007b22:	9903      	ldr	r1, [sp, #12]
 8007b24:	600a      	str	r2, [r1, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	ed83 0b00 	vstr	d0, [r3]
 8007b2c:	68e3      	ldr	r3, [r4, #12]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	60e3      	str	r3, [r4, #12]
 8007b32:	e7db      	b.n	8007aec <_scanf_float+0x36c>
 8007b34:	9b04      	ldr	r3, [sp, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0e6      	beq.n	8007b08 <_scanf_float+0x388>
 8007b3a:	9905      	ldr	r1, [sp, #20]
 8007b3c:	230a      	movs	r3, #10
 8007b3e:	3101      	adds	r1, #1
 8007b40:	4640      	mov	r0, r8
 8007b42:	f002 fba7 	bl	800a294 <_strtol_r>
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	9e05      	ldr	r6, [sp, #20]
 8007b4a:	1ac2      	subs	r2, r0, r3
 8007b4c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007b50:	429e      	cmp	r6, r3
 8007b52:	bf28      	it	cs
 8007b54:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007b58:	490d      	ldr	r1, [pc, #52]	@ (8007b90 <_scanf_float+0x410>)
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f000 f8f0 	bl	8007d40 <siprintf>
 8007b60:	e7d2      	b.n	8007b08 <_scanf_float+0x388>
 8007b62:	f011 0f04 	tst.w	r1, #4
 8007b66:	9903      	ldr	r1, [sp, #12]
 8007b68:	600a      	str	r2, [r1, #0]
 8007b6a:	d1dc      	bne.n	8007b26 <_scanf_float+0x3a6>
 8007b6c:	eeb4 0b40 	vcmp.f64	d0, d0
 8007b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b74:	681d      	ldr	r5, [r3, #0]
 8007b76:	d705      	bvc.n	8007b84 <_scanf_float+0x404>
 8007b78:	4806      	ldr	r0, [pc, #24]	@ (8007b94 <_scanf_float+0x414>)
 8007b7a:	f000 f9c5 	bl	8007f08 <nanf>
 8007b7e:	ed85 0a00 	vstr	s0, [r5]
 8007b82:	e7d3      	b.n	8007b2c <_scanf_float+0x3ac>
 8007b84:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007b88:	e7f9      	b.n	8007b7e <_scanf_float+0x3fe>
 8007b8a:	f04f 0900 	mov.w	r9, #0
 8007b8e:	e630      	b.n	80077f2 <_scanf_float+0x72>
 8007b90:	0800cee8 	.word	0x0800cee8
 8007b94:	0800d27d 	.word	0x0800d27d

08007b98 <std>:
 8007b98:	2300      	movs	r3, #0
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ba6:	6083      	str	r3, [r0, #8]
 8007ba8:	8181      	strh	r1, [r0, #12]
 8007baa:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bac:	81c2      	strh	r2, [r0, #14]
 8007bae:	6183      	str	r3, [r0, #24]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	305c      	adds	r0, #92	@ 0x5c
 8007bb6:	f000 f926 	bl	8007e06 <memset>
 8007bba:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf0 <std+0x58>)
 8007bbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <std+0x5c>)
 8007bc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf8 <std+0x60>)
 8007bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bfc <std+0x64>)
 8007bc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bca:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <std+0x68>)
 8007bcc:	6224      	str	r4, [r4, #32]
 8007bce:	429c      	cmp	r4, r3
 8007bd0:	d006      	beq.n	8007be0 <std+0x48>
 8007bd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bd6:	4294      	cmp	r4, r2
 8007bd8:	d002      	beq.n	8007be0 <std+0x48>
 8007bda:	33d0      	adds	r3, #208	@ 0xd0
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	d105      	bne.n	8007bec <std+0x54>
 8007be0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be8:	f000 b98a 	b.w	8007f00 <__retarget_lock_init_recursive>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	bf00      	nop
 8007bf0:	08007d81 	.word	0x08007d81
 8007bf4:	08007da3 	.word	0x08007da3
 8007bf8:	08007ddb 	.word	0x08007ddb
 8007bfc:	08007dff 	.word	0x08007dff
 8007c00:	24000384 	.word	0x24000384

08007c04 <stdio_exit_handler>:
 8007c04:	4a02      	ldr	r2, [pc, #8]	@ (8007c10 <stdio_exit_handler+0xc>)
 8007c06:	4903      	ldr	r1, [pc, #12]	@ (8007c14 <stdio_exit_handler+0x10>)
 8007c08:	4803      	ldr	r0, [pc, #12]	@ (8007c18 <stdio_exit_handler+0x14>)
 8007c0a:	f000 b869 	b.w	8007ce0 <_fwalk_sglue>
 8007c0e:	bf00      	nop
 8007c10:	24000034 	.word	0x24000034
 8007c14:	0800a8d5 	.word	0x0800a8d5
 8007c18:	24000044 	.word	0x24000044

08007c1c <cleanup_stdio>:
 8007c1c:	6841      	ldr	r1, [r0, #4]
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c50 <cleanup_stdio+0x34>)
 8007c20:	4299      	cmp	r1, r3
 8007c22:	b510      	push	{r4, lr}
 8007c24:	4604      	mov	r4, r0
 8007c26:	d001      	beq.n	8007c2c <cleanup_stdio+0x10>
 8007c28:	f002 fe54 	bl	800a8d4 <_fflush_r>
 8007c2c:	68a1      	ldr	r1, [r4, #8]
 8007c2e:	4b09      	ldr	r3, [pc, #36]	@ (8007c54 <cleanup_stdio+0x38>)
 8007c30:	4299      	cmp	r1, r3
 8007c32:	d002      	beq.n	8007c3a <cleanup_stdio+0x1e>
 8007c34:	4620      	mov	r0, r4
 8007c36:	f002 fe4d 	bl	800a8d4 <_fflush_r>
 8007c3a:	68e1      	ldr	r1, [r4, #12]
 8007c3c:	4b06      	ldr	r3, [pc, #24]	@ (8007c58 <cleanup_stdio+0x3c>)
 8007c3e:	4299      	cmp	r1, r3
 8007c40:	d004      	beq.n	8007c4c <cleanup_stdio+0x30>
 8007c42:	4620      	mov	r0, r4
 8007c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c48:	f002 be44 	b.w	800a8d4 <_fflush_r>
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	bf00      	nop
 8007c50:	24000384 	.word	0x24000384
 8007c54:	240003ec 	.word	0x240003ec
 8007c58:	24000454 	.word	0x24000454

08007c5c <global_stdio_init.part.0>:
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c8c <global_stdio_init.part.0+0x30>)
 8007c60:	4c0b      	ldr	r4, [pc, #44]	@ (8007c90 <global_stdio_init.part.0+0x34>)
 8007c62:	4a0c      	ldr	r2, [pc, #48]	@ (8007c94 <global_stdio_init.part.0+0x38>)
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	4620      	mov	r0, r4
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2104      	movs	r1, #4
 8007c6c:	f7ff ff94 	bl	8007b98 <std>
 8007c70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c74:	2201      	movs	r2, #1
 8007c76:	2109      	movs	r1, #9
 8007c78:	f7ff ff8e 	bl	8007b98 <std>
 8007c7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c80:	2202      	movs	r2, #2
 8007c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c86:	2112      	movs	r1, #18
 8007c88:	f7ff bf86 	b.w	8007b98 <std>
 8007c8c:	240004bc 	.word	0x240004bc
 8007c90:	24000384 	.word	0x24000384
 8007c94:	08007c05 	.word	0x08007c05

08007c98 <__sfp_lock_acquire>:
 8007c98:	4801      	ldr	r0, [pc, #4]	@ (8007ca0 <__sfp_lock_acquire+0x8>)
 8007c9a:	f000 b932 	b.w	8007f02 <__retarget_lock_acquire_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	240004c5 	.word	0x240004c5

08007ca4 <__sfp_lock_release>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	@ (8007cac <__sfp_lock_release+0x8>)
 8007ca6:	f000 b92d 	b.w	8007f04 <__retarget_lock_release_recursive>
 8007caa:	bf00      	nop
 8007cac:	240004c5 	.word	0x240004c5

08007cb0 <__sinit>:
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	f7ff fff0 	bl	8007c98 <__sfp_lock_acquire>
 8007cb8:	6a23      	ldr	r3, [r4, #32]
 8007cba:	b11b      	cbz	r3, 8007cc4 <__sinit+0x14>
 8007cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc0:	f7ff bff0 	b.w	8007ca4 <__sfp_lock_release>
 8007cc4:	4b04      	ldr	r3, [pc, #16]	@ (8007cd8 <__sinit+0x28>)
 8007cc6:	6223      	str	r3, [r4, #32]
 8007cc8:	4b04      	ldr	r3, [pc, #16]	@ (8007cdc <__sinit+0x2c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1f5      	bne.n	8007cbc <__sinit+0xc>
 8007cd0:	f7ff ffc4 	bl	8007c5c <global_stdio_init.part.0>
 8007cd4:	e7f2      	b.n	8007cbc <__sinit+0xc>
 8007cd6:	bf00      	nop
 8007cd8:	08007c1d 	.word	0x08007c1d
 8007cdc:	240004bc 	.word	0x240004bc

08007ce0 <_fwalk_sglue>:
 8007ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	4688      	mov	r8, r1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	2600      	movs	r6, #0
 8007cec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cf0:	f1b9 0901 	subs.w	r9, r9, #1
 8007cf4:	d505      	bpl.n	8007d02 <_fwalk_sglue+0x22>
 8007cf6:	6824      	ldr	r4, [r4, #0]
 8007cf8:	2c00      	cmp	r4, #0
 8007cfa:	d1f7      	bne.n	8007cec <_fwalk_sglue+0xc>
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d907      	bls.n	8007d18 <_fwalk_sglue+0x38>
 8007d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	d003      	beq.n	8007d18 <_fwalk_sglue+0x38>
 8007d10:	4629      	mov	r1, r5
 8007d12:	4638      	mov	r0, r7
 8007d14:	47c0      	blx	r8
 8007d16:	4306      	orrs	r6, r0
 8007d18:	3568      	adds	r5, #104	@ 0x68
 8007d1a:	e7e9      	b.n	8007cf0 <_fwalk_sglue+0x10>

08007d1c <iprintf>:
 8007d1c:	b40f      	push	{r0, r1, r2, r3}
 8007d1e:	b507      	push	{r0, r1, r2, lr}
 8007d20:	4906      	ldr	r1, [pc, #24]	@ (8007d3c <iprintf+0x20>)
 8007d22:	ab04      	add	r3, sp, #16
 8007d24:	6808      	ldr	r0, [r1, #0]
 8007d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2a:	6881      	ldr	r1, [r0, #8]
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	f002 fc35 	bl	800a59c <_vfiprintf_r>
 8007d32:	b003      	add	sp, #12
 8007d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d38:	b004      	add	sp, #16
 8007d3a:	4770      	bx	lr
 8007d3c:	24000040 	.word	0x24000040

08007d40 <siprintf>:
 8007d40:	b40e      	push	{r1, r2, r3}
 8007d42:	b500      	push	{lr}
 8007d44:	b09c      	sub	sp, #112	@ 0x70
 8007d46:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d48:	9002      	str	r0, [sp, #8]
 8007d4a:	9006      	str	r0, [sp, #24]
 8007d4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d50:	4809      	ldr	r0, [pc, #36]	@ (8007d78 <siprintf+0x38>)
 8007d52:	9107      	str	r1, [sp, #28]
 8007d54:	9104      	str	r1, [sp, #16]
 8007d56:	4909      	ldr	r1, [pc, #36]	@ (8007d7c <siprintf+0x3c>)
 8007d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d5c:	9105      	str	r1, [sp, #20]
 8007d5e:	6800      	ldr	r0, [r0, #0]
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	a902      	add	r1, sp, #8
 8007d64:	f002 faf4 	bl	800a350 <_svfiprintf_r>
 8007d68:	9b02      	ldr	r3, [sp, #8]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	b01c      	add	sp, #112	@ 0x70
 8007d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d74:	b003      	add	sp, #12
 8007d76:	4770      	bx	lr
 8007d78:	24000040 	.word	0x24000040
 8007d7c:	ffff0208 	.word	0xffff0208

08007d80 <__sread>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	460c      	mov	r4, r1
 8007d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d88:	f000 f86c 	bl	8007e64 <_read_r>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	bfab      	itete	ge
 8007d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d92:	89a3      	ldrhlt	r3, [r4, #12]
 8007d94:	181b      	addge	r3, r3, r0
 8007d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d9a:	bfac      	ite	ge
 8007d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d9e:	81a3      	strhlt	r3, [r4, #12]
 8007da0:	bd10      	pop	{r4, pc}

08007da2 <__swrite>:
 8007da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	461f      	mov	r7, r3
 8007da8:	898b      	ldrh	r3, [r1, #12]
 8007daa:	05db      	lsls	r3, r3, #23
 8007dac:	4605      	mov	r5, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	4616      	mov	r6, r2
 8007db2:	d505      	bpl.n	8007dc0 <__swrite+0x1e>
 8007db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db8:	2302      	movs	r3, #2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f000 f840 	bl	8007e40 <_lseek_r>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	4632      	mov	r2, r6
 8007dce:	463b      	mov	r3, r7
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	f000 b857 	b.w	8007e88 <_write_r>

08007dda <__sseek>:
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	460c      	mov	r4, r1
 8007dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de2:	f000 f82d 	bl	8007e40 <_lseek_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	bf15      	itete	ne
 8007dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007df6:	81a3      	strheq	r3, [r4, #12]
 8007df8:	bf18      	it	ne
 8007dfa:	81a3      	strhne	r3, [r4, #12]
 8007dfc:	bd10      	pop	{r4, pc}

08007dfe <__sclose>:
 8007dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e02:	f000 b80d 	b.w	8007e20 <_close_r>

08007e06 <memset>:
 8007e06:	4402      	add	r2, r0
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d100      	bne.n	8007e10 <memset+0xa>
 8007e0e:	4770      	bx	lr
 8007e10:	f803 1b01 	strb.w	r1, [r3], #1
 8007e14:	e7f9      	b.n	8007e0a <memset+0x4>
	...

08007e18 <_localeconv_r>:
 8007e18:	4800      	ldr	r0, [pc, #0]	@ (8007e1c <_localeconv_r+0x4>)
 8007e1a:	4770      	bx	lr
 8007e1c:	24000180 	.word	0x24000180

08007e20 <_close_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d06      	ldr	r5, [pc, #24]	@ (8007e3c <_close_r+0x1c>)
 8007e24:	2300      	movs	r3, #0
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	602b      	str	r3, [r5, #0]
 8007e2c:	f7f9 fecf 	bl	8001bce <_close>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_close_r+0x1a>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_close_r+0x1a>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	240004c0 	.word	0x240004c0

08007e40 <_lseek_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d07      	ldr	r5, [pc, #28]	@ (8007e60 <_lseek_r+0x20>)
 8007e44:	4604      	mov	r4, r0
 8007e46:	4608      	mov	r0, r1
 8007e48:	4611      	mov	r1, r2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	602a      	str	r2, [r5, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f7f9 fee4 	bl	8001c1c <_lseek>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_lseek_r+0x1e>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_lseek_r+0x1e>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	240004c0 	.word	0x240004c0

08007e64 <_read_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	@ (8007e84 <_read_r+0x20>)
 8007e68:	4604      	mov	r4, r0
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	602a      	str	r2, [r5, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f7f9 fe72 	bl	8001b5c <_read>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_read_r+0x1e>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_read_r+0x1e>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	240004c0 	.word	0x240004c0

08007e88 <_write_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d07      	ldr	r5, [pc, #28]	@ (8007ea8 <_write_r+0x20>)
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	4608      	mov	r0, r1
 8007e90:	4611      	mov	r1, r2
 8007e92:	2200      	movs	r2, #0
 8007e94:	602a      	str	r2, [r5, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f7f9 fe7d 	bl	8001b96 <_write>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_write_r+0x1e>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_write_r+0x1e>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	240004c0 	.word	0x240004c0

08007eac <__errno>:
 8007eac:	4b01      	ldr	r3, [pc, #4]	@ (8007eb4 <__errno+0x8>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	24000040 	.word	0x24000040

08007eb8 <__libc_init_array>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4d0d      	ldr	r5, [pc, #52]	@ (8007ef0 <__libc_init_array+0x38>)
 8007ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8007ef4 <__libc_init_array+0x3c>)
 8007ebe:	1b64      	subs	r4, r4, r5
 8007ec0:	10a4      	asrs	r4, r4, #2
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	d109      	bne.n	8007edc <__libc_init_array+0x24>
 8007ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8007ef8 <__libc_init_array+0x40>)
 8007eca:	4c0c      	ldr	r4, [pc, #48]	@ (8007efc <__libc_init_array+0x44>)
 8007ecc:	f004 fb68 	bl	800c5a0 <_init>
 8007ed0:	1b64      	subs	r4, r4, r5
 8007ed2:	10a4      	asrs	r4, r4, #2
 8007ed4:	2600      	movs	r6, #0
 8007ed6:	42a6      	cmp	r6, r4
 8007ed8:	d105      	bne.n	8007ee6 <__libc_init_array+0x2e>
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee0:	4798      	blx	r3
 8007ee2:	3601      	adds	r6, #1
 8007ee4:	e7ee      	b.n	8007ec4 <__libc_init_array+0xc>
 8007ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eea:	4798      	blx	r3
 8007eec:	3601      	adds	r6, #1
 8007eee:	e7f2      	b.n	8007ed6 <__libc_init_array+0x1e>
 8007ef0:	0800d538 	.word	0x0800d538
 8007ef4:	0800d538 	.word	0x0800d538
 8007ef8:	0800d538 	.word	0x0800d538
 8007efc:	0800d53c 	.word	0x0800d53c

08007f00 <__retarget_lock_init_recursive>:
 8007f00:	4770      	bx	lr

08007f02 <__retarget_lock_acquire_recursive>:
 8007f02:	4770      	bx	lr

08007f04 <__retarget_lock_release_recursive>:
 8007f04:	4770      	bx	lr
	...

08007f08 <nanf>:
 8007f08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007f10 <nanf+0x8>
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	7fc00000 	.word	0x7fc00000

08007f14 <quorem>:
 8007f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	6903      	ldr	r3, [r0, #16]
 8007f1a:	690c      	ldr	r4, [r1, #16]
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	4607      	mov	r7, r0
 8007f20:	db7e      	blt.n	8008020 <quorem+0x10c>
 8007f22:	3c01      	subs	r4, #1
 8007f24:	f101 0814 	add.w	r8, r1, #20
 8007f28:	00a3      	lsls	r3, r4, #2
 8007f2a:	f100 0514 	add.w	r5, r0, #20
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	429a      	cmp	r2, r3
 8007f42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f46:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f4a:	d32e      	bcc.n	8007faa <quorem+0x96>
 8007f4c:	f04f 0a00 	mov.w	sl, #0
 8007f50:	46c4      	mov	ip, r8
 8007f52:	46ae      	mov	lr, r5
 8007f54:	46d3      	mov	fp, sl
 8007f56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f5a:	b298      	uxth	r0, r3
 8007f5c:	fb06 a000 	mla	r0, r6, r0, sl
 8007f60:	0c02      	lsrs	r2, r0, #16
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	fb06 2303 	mla	r3, r6, r3, r2
 8007f68:	f8de 2000 	ldr.w	r2, [lr]
 8007f6c:	b280      	uxth	r0, r0
 8007f6e:	b292      	uxth	r2, r2
 8007f70:	1a12      	subs	r2, r2, r0
 8007f72:	445a      	add	r2, fp
 8007f74:	f8de 0000 	ldr.w	r0, [lr]
 8007f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f86:	b292      	uxth	r2, r2
 8007f88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f8c:	45e1      	cmp	r9, ip
 8007f8e:	f84e 2b04 	str.w	r2, [lr], #4
 8007f92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f96:	d2de      	bcs.n	8007f56 <quorem+0x42>
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	58eb      	ldr	r3, [r5, r3]
 8007f9c:	b92b      	cbnz	r3, 8007faa <quorem+0x96>
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	3b04      	subs	r3, #4
 8007fa2:	429d      	cmp	r5, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	d32f      	bcc.n	8008008 <quorem+0xf4>
 8007fa8:	613c      	str	r4, [r7, #16]
 8007faa:	4638      	mov	r0, r7
 8007fac:	f001 f956 	bl	800925c <__mcmp>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	db25      	blt.n	8008000 <quorem+0xec>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fbc:	f8d1 c000 	ldr.w	ip, [r1]
 8007fc0:	fa1f fe82 	uxth.w	lr, r2
 8007fc4:	fa1f f38c 	uxth.w	r3, ip
 8007fc8:	eba3 030e 	sub.w	r3, r3, lr
 8007fcc:	4403      	add	r3, r0
 8007fce:	0c12      	lsrs	r2, r2, #16
 8007fd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007fd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fde:	45c1      	cmp	r9, r8
 8007fe0:	f841 3b04 	str.w	r3, [r1], #4
 8007fe4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007fe8:	d2e6      	bcs.n	8007fb8 <quorem+0xa4>
 8007fea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ff2:	b922      	cbnz	r2, 8007ffe <quorem+0xea>
 8007ff4:	3b04      	subs	r3, #4
 8007ff6:	429d      	cmp	r5, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	d30b      	bcc.n	8008014 <quorem+0x100>
 8007ffc:	613c      	str	r4, [r7, #16]
 8007ffe:	3601      	adds	r6, #1
 8008000:	4630      	mov	r0, r6
 8008002:	b003      	add	sp, #12
 8008004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	3b04      	subs	r3, #4
 800800c:	2a00      	cmp	r2, #0
 800800e:	d1cb      	bne.n	8007fa8 <quorem+0x94>
 8008010:	3c01      	subs	r4, #1
 8008012:	e7c6      	b.n	8007fa2 <quorem+0x8e>
 8008014:	6812      	ldr	r2, [r2, #0]
 8008016:	3b04      	subs	r3, #4
 8008018:	2a00      	cmp	r2, #0
 800801a:	d1ef      	bne.n	8007ffc <quorem+0xe8>
 800801c:	3c01      	subs	r4, #1
 800801e:	e7ea      	b.n	8007ff6 <quorem+0xe2>
 8008020:	2000      	movs	r0, #0
 8008022:	e7ee      	b.n	8008002 <quorem+0xee>
 8008024:	0000      	movs	r0, r0
	...

08008028 <_dtoa_r>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	ed2d 8b02 	vpush	{d8}
 8008030:	69c7      	ldr	r7, [r0, #28]
 8008032:	b091      	sub	sp, #68	@ 0x44
 8008034:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008038:	ec55 4b10 	vmov	r4, r5, d0
 800803c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800803e:	9107      	str	r1, [sp, #28]
 8008040:	4681      	mov	r9, r0
 8008042:	9209      	str	r2, [sp, #36]	@ 0x24
 8008044:	930d      	str	r3, [sp, #52]	@ 0x34
 8008046:	b97f      	cbnz	r7, 8008068 <_dtoa_r+0x40>
 8008048:	2010      	movs	r0, #16
 800804a:	f000 fd8d 	bl	8008b68 <malloc>
 800804e:	4602      	mov	r2, r0
 8008050:	f8c9 001c 	str.w	r0, [r9, #28]
 8008054:	b920      	cbnz	r0, 8008060 <_dtoa_r+0x38>
 8008056:	4ba0      	ldr	r3, [pc, #640]	@ (80082d8 <_dtoa_r+0x2b0>)
 8008058:	21ef      	movs	r1, #239	@ 0xef
 800805a:	48a0      	ldr	r0, [pc, #640]	@ (80082dc <_dtoa_r+0x2b4>)
 800805c:	f002 fd48 	bl	800aaf0 <__assert_func>
 8008060:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008064:	6007      	str	r7, [r0, #0]
 8008066:	60c7      	str	r7, [r0, #12]
 8008068:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	b159      	cbz	r1, 8008088 <_dtoa_r+0x60>
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	604a      	str	r2, [r1, #4]
 8008074:	2301      	movs	r3, #1
 8008076:	4093      	lsls	r3, r2
 8008078:	608b      	str	r3, [r1, #8]
 800807a:	4648      	mov	r0, r9
 800807c:	f000 fe6a 	bl	8008d54 <_Bfree>
 8008080:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	1e2b      	subs	r3, r5, #0
 800808a:	bfbb      	ittet	lt
 800808c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008090:	9303      	strlt	r3, [sp, #12]
 8008092:	2300      	movge	r3, #0
 8008094:	2201      	movlt	r2, #1
 8008096:	bfac      	ite	ge
 8008098:	6033      	strge	r3, [r6, #0]
 800809a:	6032      	strlt	r2, [r6, #0]
 800809c:	4b90      	ldr	r3, [pc, #576]	@ (80082e0 <_dtoa_r+0x2b8>)
 800809e:	9e03      	ldr	r6, [sp, #12]
 80080a0:	43b3      	bics	r3, r6
 80080a2:	d110      	bne.n	80080c6 <_dtoa_r+0x9e>
 80080a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80080a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80080b0:	4323      	orrs	r3, r4
 80080b2:	f000 84de 	beq.w	8008a72 <_dtoa_r+0xa4a>
 80080b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80080b8:	4f8a      	ldr	r7, [pc, #552]	@ (80082e4 <_dtoa_r+0x2bc>)
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 84e0 	beq.w	8008a80 <_dtoa_r+0xa58>
 80080c0:	1cfb      	adds	r3, r7, #3
 80080c2:	f000 bcdb 	b.w	8008a7c <_dtoa_r+0xa54>
 80080c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80080ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d2:	d10a      	bne.n	80080ea <_dtoa_r+0xc2>
 80080d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80080d6:	2301      	movs	r3, #1
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80080dc:	b113      	cbz	r3, 80080e4 <_dtoa_r+0xbc>
 80080de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80080e0:	4b81      	ldr	r3, [pc, #516]	@ (80082e8 <_dtoa_r+0x2c0>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	4f81      	ldr	r7, [pc, #516]	@ (80082ec <_dtoa_r+0x2c4>)
 80080e6:	f000 bccb 	b.w	8008a80 <_dtoa_r+0xa58>
 80080ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80080ec:	a90f      	add	r1, sp, #60	@ 0x3c
 80080ee:	4648      	mov	r0, r9
 80080f0:	eeb0 0b48 	vmov.f64	d0, d8
 80080f4:	f001 f9d2 	bl	800949c <__d2b>
 80080f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80080fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080fe:	9001      	str	r0, [sp, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d045      	beq.n	8008190 <_dtoa_r+0x168>
 8008104:	eeb0 7b48 	vmov.f64	d7, d8
 8008108:	ee18 1a90 	vmov	r1, s17
 800810c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008110:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008114:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008118:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800811c:	2500      	movs	r5, #0
 800811e:	ee07 1a90 	vmov	s15, r1
 8008122:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008126:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80082c0 <_dtoa_r+0x298>
 800812a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800812e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80082c8 <_dtoa_r+0x2a0>
 8008132:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008136:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80082d0 <_dtoa_r+0x2a8>
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008142:	eeb0 7b46 	vmov.f64	d7, d6
 8008146:	eea4 7b05 	vfma.f64	d7, d4, d5
 800814a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800814e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008156:	ee16 8a90 	vmov	r8, s13
 800815a:	d508      	bpl.n	800816e <_dtoa_r+0x146>
 800815c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008160:	eeb4 6b47 	vcmp.f64	d6, d7
 8008164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008168:	bf18      	it	ne
 800816a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800816e:	f1b8 0f16 	cmp.w	r8, #22
 8008172:	d82b      	bhi.n	80081cc <_dtoa_r+0x1a4>
 8008174:	495e      	ldr	r1, [pc, #376]	@ (80082f0 <_dtoa_r+0x2c8>)
 8008176:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800817a:	ed91 7b00 	vldr	d7, [r1]
 800817e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008186:	d501      	bpl.n	800818c <_dtoa_r+0x164>
 8008188:	f108 38ff 	add.w	r8, r8, #4294967295
 800818c:	2100      	movs	r1, #0
 800818e:	e01e      	b.n	80081ce <_dtoa_r+0x1a6>
 8008190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008192:	4413      	add	r3, r2
 8008194:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008198:	2920      	cmp	r1, #32
 800819a:	bfc1      	itttt	gt
 800819c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80081a0:	408e      	lslgt	r6, r1
 80081a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80081a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80081aa:	bfd6      	itet	le
 80081ac:	f1c1 0120 	rsble	r1, r1, #32
 80081b0:	4331      	orrgt	r1, r6
 80081b2:	fa04 f101 	lslle.w	r1, r4, r1
 80081b6:	ee07 1a90 	vmov	s15, r1
 80081ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80081be:	3b01      	subs	r3, #1
 80081c0:	ee17 1a90 	vmov	r1, s15
 80081c4:	2501      	movs	r5, #1
 80081c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80081ca:	e7a8      	b.n	800811e <_dtoa_r+0xf6>
 80081cc:	2101      	movs	r1, #1
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	1e53      	subs	r3, r2, #1
 80081d2:	9306      	str	r3, [sp, #24]
 80081d4:	bf45      	ittet	mi
 80081d6:	f1c2 0301 	rsbmi	r3, r2, #1
 80081da:	9305      	strmi	r3, [sp, #20]
 80081dc:	2300      	movpl	r3, #0
 80081de:	2300      	movmi	r3, #0
 80081e0:	bf4c      	ite	mi
 80081e2:	9306      	strmi	r3, [sp, #24]
 80081e4:	9305      	strpl	r3, [sp, #20]
 80081e6:	f1b8 0f00 	cmp.w	r8, #0
 80081ea:	910c      	str	r1, [sp, #48]	@ 0x30
 80081ec:	db18      	blt.n	8008220 <_dtoa_r+0x1f8>
 80081ee:	9b06      	ldr	r3, [sp, #24]
 80081f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80081f4:	4443      	add	r3, r8
 80081f6:	9306      	str	r3, [sp, #24]
 80081f8:	2300      	movs	r3, #0
 80081fa:	9a07      	ldr	r2, [sp, #28]
 80081fc:	2a09      	cmp	r2, #9
 80081fe:	d849      	bhi.n	8008294 <_dtoa_r+0x26c>
 8008200:	2a05      	cmp	r2, #5
 8008202:	bfc4      	itt	gt
 8008204:	3a04      	subgt	r2, #4
 8008206:	9207      	strgt	r2, [sp, #28]
 8008208:	9a07      	ldr	r2, [sp, #28]
 800820a:	f1a2 0202 	sub.w	r2, r2, #2
 800820e:	bfcc      	ite	gt
 8008210:	2400      	movgt	r4, #0
 8008212:	2401      	movle	r4, #1
 8008214:	2a03      	cmp	r2, #3
 8008216:	d848      	bhi.n	80082aa <_dtoa_r+0x282>
 8008218:	e8df f002 	tbb	[pc, r2]
 800821c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008220:	9b05      	ldr	r3, [sp, #20]
 8008222:	2200      	movs	r2, #0
 8008224:	eba3 0308 	sub.w	r3, r3, r8
 8008228:	9305      	str	r3, [sp, #20]
 800822a:	920a      	str	r2, [sp, #40]	@ 0x28
 800822c:	f1c8 0300 	rsb	r3, r8, #0
 8008230:	e7e3      	b.n	80081fa <_dtoa_r+0x1d2>
 8008232:	2200      	movs	r2, #0
 8008234:	9208      	str	r2, [sp, #32]
 8008236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008238:	2a00      	cmp	r2, #0
 800823a:	dc39      	bgt.n	80082b0 <_dtoa_r+0x288>
 800823c:	f04f 0b01 	mov.w	fp, #1
 8008240:	46da      	mov	sl, fp
 8008242:	465a      	mov	r2, fp
 8008244:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008248:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800824c:	2100      	movs	r1, #0
 800824e:	2004      	movs	r0, #4
 8008250:	f100 0614 	add.w	r6, r0, #20
 8008254:	4296      	cmp	r6, r2
 8008256:	d930      	bls.n	80082ba <_dtoa_r+0x292>
 8008258:	6079      	str	r1, [r7, #4]
 800825a:	4648      	mov	r0, r9
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	f000 fd39 	bl	8008cd4 <_Balloc>
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	4607      	mov	r7, r0
 8008266:	2800      	cmp	r0, #0
 8008268:	d146      	bne.n	80082f8 <_dtoa_r+0x2d0>
 800826a:	4b22      	ldr	r3, [pc, #136]	@ (80082f4 <_dtoa_r+0x2cc>)
 800826c:	4602      	mov	r2, r0
 800826e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008272:	e6f2      	b.n	800805a <_dtoa_r+0x32>
 8008274:	2201      	movs	r2, #1
 8008276:	e7dd      	b.n	8008234 <_dtoa_r+0x20c>
 8008278:	2200      	movs	r2, #0
 800827a:	9208      	str	r2, [sp, #32]
 800827c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800827e:	eb08 0b02 	add.w	fp, r8, r2
 8008282:	f10b 0a01 	add.w	sl, fp, #1
 8008286:	4652      	mov	r2, sl
 8008288:	2a01      	cmp	r2, #1
 800828a:	bfb8      	it	lt
 800828c:	2201      	movlt	r2, #1
 800828e:	e7db      	b.n	8008248 <_dtoa_r+0x220>
 8008290:	2201      	movs	r2, #1
 8008292:	e7f2      	b.n	800827a <_dtoa_r+0x252>
 8008294:	2401      	movs	r4, #1
 8008296:	2200      	movs	r2, #0
 8008298:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800829c:	f04f 3bff 	mov.w	fp, #4294967295
 80082a0:	2100      	movs	r1, #0
 80082a2:	46da      	mov	sl, fp
 80082a4:	2212      	movs	r2, #18
 80082a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80082a8:	e7ce      	b.n	8008248 <_dtoa_r+0x220>
 80082aa:	2201      	movs	r2, #1
 80082ac:	9208      	str	r2, [sp, #32]
 80082ae:	e7f5      	b.n	800829c <_dtoa_r+0x274>
 80082b0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80082b4:	46da      	mov	sl, fp
 80082b6:	465a      	mov	r2, fp
 80082b8:	e7c6      	b.n	8008248 <_dtoa_r+0x220>
 80082ba:	3101      	adds	r1, #1
 80082bc:	0040      	lsls	r0, r0, #1
 80082be:	e7c7      	b.n	8008250 <_dtoa_r+0x228>
 80082c0:	636f4361 	.word	0x636f4361
 80082c4:	3fd287a7 	.word	0x3fd287a7
 80082c8:	8b60c8b3 	.word	0x8b60c8b3
 80082cc:	3fc68a28 	.word	0x3fc68a28
 80082d0:	509f79fb 	.word	0x509f79fb
 80082d4:	3fd34413 	.word	0x3fd34413
 80082d8:	0800cefa 	.word	0x0800cefa
 80082dc:	0800cf11 	.word	0x0800cf11
 80082e0:	7ff00000 	.word	0x7ff00000
 80082e4:	0800cef6 	.word	0x0800cef6
 80082e8:	0800cec5 	.word	0x0800cec5
 80082ec:	0800cec4 	.word	0x0800cec4
 80082f0:	0800d008 	.word	0x0800d008
 80082f4:	0800cf69 	.word	0x0800cf69
 80082f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80082fc:	f1ba 0f0e 	cmp.w	sl, #14
 8008300:	6010      	str	r0, [r2, #0]
 8008302:	d86f      	bhi.n	80083e4 <_dtoa_r+0x3bc>
 8008304:	2c00      	cmp	r4, #0
 8008306:	d06d      	beq.n	80083e4 <_dtoa_r+0x3bc>
 8008308:	f1b8 0f00 	cmp.w	r8, #0
 800830c:	f340 80c2 	ble.w	8008494 <_dtoa_r+0x46c>
 8008310:	4aca      	ldr	r2, [pc, #808]	@ (800863c <_dtoa_r+0x614>)
 8008312:	f008 010f 	and.w	r1, r8, #15
 8008316:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800831a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800831e:	ed92 7b00 	vldr	d7, [r2]
 8008322:	ea4f 1128 	mov.w	r1, r8, asr #4
 8008326:	f000 80a9 	beq.w	800847c <_dtoa_r+0x454>
 800832a:	4ac5      	ldr	r2, [pc, #788]	@ (8008640 <_dtoa_r+0x618>)
 800832c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008330:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008334:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008338:	f001 010f 	and.w	r1, r1, #15
 800833c:	2203      	movs	r2, #3
 800833e:	48c0      	ldr	r0, [pc, #768]	@ (8008640 <_dtoa_r+0x618>)
 8008340:	2900      	cmp	r1, #0
 8008342:	f040 809d 	bne.w	8008480 <_dtoa_r+0x458>
 8008346:	ed9d 6b02 	vldr	d6, [sp, #8]
 800834a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800834e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008352:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008354:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008358:	2900      	cmp	r1, #0
 800835a:	f000 80c1 	beq.w	80084e0 <_dtoa_r+0x4b8>
 800835e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008362:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800836a:	f140 80b9 	bpl.w	80084e0 <_dtoa_r+0x4b8>
 800836e:	f1ba 0f00 	cmp.w	sl, #0
 8008372:	f000 80b5 	beq.w	80084e0 <_dtoa_r+0x4b8>
 8008376:	f1bb 0f00 	cmp.w	fp, #0
 800837a:	dd31      	ble.n	80083e0 <_dtoa_r+0x3b8>
 800837c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008380:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008384:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008388:	f108 31ff 	add.w	r1, r8, #4294967295
 800838c:	9104      	str	r1, [sp, #16]
 800838e:	3201      	adds	r2, #1
 8008390:	465c      	mov	r4, fp
 8008392:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008396:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800839a:	ee07 2a90 	vmov	s15, r2
 800839e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80083a6:	ee15 2a90 	vmov	r2, s11
 80083aa:	ec51 0b15 	vmov	r0, r1, d5
 80083ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80083b2:	2c00      	cmp	r4, #0
 80083b4:	f040 8098 	bne.w	80084e8 <_dtoa_r+0x4c0>
 80083b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80083bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80083c0:	ec41 0b17 	vmov	d7, r0, r1
 80083c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083cc:	f300 8261 	bgt.w	8008892 <_dtoa_r+0x86a>
 80083d0:	eeb1 7b47 	vneg.f64	d7, d7
 80083d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083dc:	f100 80f5 	bmi.w	80085ca <_dtoa_r+0x5a2>
 80083e0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80083e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80083e6:	2a00      	cmp	r2, #0
 80083e8:	f2c0 812c 	blt.w	8008644 <_dtoa_r+0x61c>
 80083ec:	f1b8 0f0e 	cmp.w	r8, #14
 80083f0:	f300 8128 	bgt.w	8008644 <_dtoa_r+0x61c>
 80083f4:	4b91      	ldr	r3, [pc, #580]	@ (800863c <_dtoa_r+0x614>)
 80083f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80083fa:	ed93 6b00 	vldr	d6, [r3]
 80083fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008400:	2b00      	cmp	r3, #0
 8008402:	da03      	bge.n	800840c <_dtoa_r+0x3e4>
 8008404:	f1ba 0f00 	cmp.w	sl, #0
 8008408:	f340 80d2 	ble.w	80085b0 <_dtoa_r+0x588>
 800840c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008410:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008414:	463e      	mov	r6, r7
 8008416:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800841a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800841e:	ee15 3a10 	vmov	r3, s10
 8008422:	3330      	adds	r3, #48	@ 0x30
 8008424:	f806 3b01 	strb.w	r3, [r6], #1
 8008428:	1bf3      	subs	r3, r6, r7
 800842a:	459a      	cmp	sl, r3
 800842c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008430:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008434:	f040 80f8 	bne.w	8008628 <_dtoa_r+0x600>
 8008438:	ee37 7b07 	vadd.f64	d7, d7, d7
 800843c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008444:	f300 80dd 	bgt.w	8008602 <_dtoa_r+0x5da>
 8008448:	eeb4 7b46 	vcmp.f64	d7, d6
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	d104      	bne.n	800845c <_dtoa_r+0x434>
 8008452:	ee15 3a10 	vmov	r3, s10
 8008456:	07db      	lsls	r3, r3, #31
 8008458:	f100 80d3 	bmi.w	8008602 <_dtoa_r+0x5da>
 800845c:	9901      	ldr	r1, [sp, #4]
 800845e:	4648      	mov	r0, r9
 8008460:	f000 fc78 	bl	8008d54 <_Bfree>
 8008464:	2300      	movs	r3, #0
 8008466:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008468:	7033      	strb	r3, [r6, #0]
 800846a:	f108 0301 	add.w	r3, r8, #1
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8304 	beq.w	8008a80 <_dtoa_r+0xa58>
 8008478:	601e      	str	r6, [r3, #0]
 800847a:	e301      	b.n	8008a80 <_dtoa_r+0xa58>
 800847c:	2202      	movs	r2, #2
 800847e:	e75e      	b.n	800833e <_dtoa_r+0x316>
 8008480:	07cc      	lsls	r4, r1, #31
 8008482:	d504      	bpl.n	800848e <_dtoa_r+0x466>
 8008484:	ed90 6b00 	vldr	d6, [r0]
 8008488:	3201      	adds	r2, #1
 800848a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800848e:	1049      	asrs	r1, r1, #1
 8008490:	3008      	adds	r0, #8
 8008492:	e755      	b.n	8008340 <_dtoa_r+0x318>
 8008494:	d022      	beq.n	80084dc <_dtoa_r+0x4b4>
 8008496:	f1c8 0100 	rsb	r1, r8, #0
 800849a:	4a68      	ldr	r2, [pc, #416]	@ (800863c <_dtoa_r+0x614>)
 800849c:	f001 000f 	and.w	r0, r1, #15
 80084a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80084a4:	ed92 7b00 	vldr	d7, [r2]
 80084a8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80084ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084b0:	4863      	ldr	r0, [pc, #396]	@ (8008640 <_dtoa_r+0x618>)
 80084b2:	1109      	asrs	r1, r1, #4
 80084b4:	2400      	movs	r4, #0
 80084b6:	2202      	movs	r2, #2
 80084b8:	b929      	cbnz	r1, 80084c6 <_dtoa_r+0x49e>
 80084ba:	2c00      	cmp	r4, #0
 80084bc:	f43f af49 	beq.w	8008352 <_dtoa_r+0x32a>
 80084c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084c4:	e745      	b.n	8008352 <_dtoa_r+0x32a>
 80084c6:	07ce      	lsls	r6, r1, #31
 80084c8:	d505      	bpl.n	80084d6 <_dtoa_r+0x4ae>
 80084ca:	ed90 6b00 	vldr	d6, [r0]
 80084ce:	3201      	adds	r2, #1
 80084d0:	2401      	movs	r4, #1
 80084d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084d6:	1049      	asrs	r1, r1, #1
 80084d8:	3008      	adds	r0, #8
 80084da:	e7ed      	b.n	80084b8 <_dtoa_r+0x490>
 80084dc:	2202      	movs	r2, #2
 80084de:	e738      	b.n	8008352 <_dtoa_r+0x32a>
 80084e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80084e4:	4654      	mov	r4, sl
 80084e6:	e754      	b.n	8008392 <_dtoa_r+0x36a>
 80084e8:	4a54      	ldr	r2, [pc, #336]	@ (800863c <_dtoa_r+0x614>)
 80084ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80084ee:	ed12 4b02 	vldr	d4, [r2, #-8]
 80084f2:	9a08      	ldr	r2, [sp, #32]
 80084f4:	ec41 0b17 	vmov	d7, r0, r1
 80084f8:	443c      	add	r4, r7
 80084fa:	b34a      	cbz	r2, 8008550 <_dtoa_r+0x528>
 80084fc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008500:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008504:	463e      	mov	r6, r7
 8008506:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800850a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800850e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008512:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008516:	ee14 2a90 	vmov	r2, s9
 800851a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800851e:	3230      	adds	r2, #48	@ 0x30
 8008520:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008524:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	f806 2b01 	strb.w	r2, [r6], #1
 8008530:	d438      	bmi.n	80085a4 <_dtoa_r+0x57c>
 8008532:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008536:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800853a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853e:	d462      	bmi.n	8008606 <_dtoa_r+0x5de>
 8008540:	42a6      	cmp	r6, r4
 8008542:	f43f af4d 	beq.w	80083e0 <_dtoa_r+0x3b8>
 8008546:	ee27 7b03 	vmul.f64	d7, d7, d3
 800854a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800854e:	e7e0      	b.n	8008512 <_dtoa_r+0x4ea>
 8008550:	4621      	mov	r1, r4
 8008552:	463e      	mov	r6, r7
 8008554:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008558:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800855c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008560:	ee14 2a90 	vmov	r2, s9
 8008564:	3230      	adds	r2, #48	@ 0x30
 8008566:	f806 2b01 	strb.w	r2, [r6], #1
 800856a:	42a6      	cmp	r6, r4
 800856c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008570:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008574:	d119      	bne.n	80085aa <_dtoa_r+0x582>
 8008576:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800857a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800857e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008586:	dc3e      	bgt.n	8008606 <_dtoa_r+0x5de>
 8008588:	ee35 5b47 	vsub.f64	d5, d5, d7
 800858c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008594:	f57f af24 	bpl.w	80083e0 <_dtoa_r+0x3b8>
 8008598:	460e      	mov	r6, r1
 800859a:	3901      	subs	r1, #1
 800859c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085a0:	2b30      	cmp	r3, #48	@ 0x30
 80085a2:	d0f9      	beq.n	8008598 <_dtoa_r+0x570>
 80085a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80085a8:	e758      	b.n	800845c <_dtoa_r+0x434>
 80085aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80085ae:	e7d5      	b.n	800855c <_dtoa_r+0x534>
 80085b0:	d10b      	bne.n	80085ca <_dtoa_r+0x5a2>
 80085b2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80085b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80085ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c6:	f2c0 8161 	blt.w	800888c <_dtoa_r+0x864>
 80085ca:	2400      	movs	r4, #0
 80085cc:	4625      	mov	r5, r4
 80085ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d0:	43db      	mvns	r3, r3
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	463e      	mov	r6, r7
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	4621      	mov	r1, r4
 80085dc:	4648      	mov	r0, r9
 80085de:	f000 fbb9 	bl	8008d54 <_Bfree>
 80085e2:	2d00      	cmp	r5, #0
 80085e4:	d0de      	beq.n	80085a4 <_dtoa_r+0x57c>
 80085e6:	f1b8 0f00 	cmp.w	r8, #0
 80085ea:	d005      	beq.n	80085f8 <_dtoa_r+0x5d0>
 80085ec:	45a8      	cmp	r8, r5
 80085ee:	d003      	beq.n	80085f8 <_dtoa_r+0x5d0>
 80085f0:	4641      	mov	r1, r8
 80085f2:	4648      	mov	r0, r9
 80085f4:	f000 fbae 	bl	8008d54 <_Bfree>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4648      	mov	r0, r9
 80085fc:	f000 fbaa 	bl	8008d54 <_Bfree>
 8008600:	e7d0      	b.n	80085a4 <_dtoa_r+0x57c>
 8008602:	f8cd 8010 	str.w	r8, [sp, #16]
 8008606:	4633      	mov	r3, r6
 8008608:	461e      	mov	r6, r3
 800860a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800860e:	2a39      	cmp	r2, #57	@ 0x39
 8008610:	d106      	bne.n	8008620 <_dtoa_r+0x5f8>
 8008612:	429f      	cmp	r7, r3
 8008614:	d1f8      	bne.n	8008608 <_dtoa_r+0x5e0>
 8008616:	9a04      	ldr	r2, [sp, #16]
 8008618:	3201      	adds	r2, #1
 800861a:	9204      	str	r2, [sp, #16]
 800861c:	2230      	movs	r2, #48	@ 0x30
 800861e:	703a      	strb	r2, [r7, #0]
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	3201      	adds	r2, #1
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	e7bd      	b.n	80085a4 <_dtoa_r+0x57c>
 8008628:	ee27 7b04 	vmul.f64	d7, d7, d4
 800862c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008634:	f47f aeef 	bne.w	8008416 <_dtoa_r+0x3ee>
 8008638:	e710      	b.n	800845c <_dtoa_r+0x434>
 800863a:	bf00      	nop
 800863c:	0800d008 	.word	0x0800d008
 8008640:	0800cfe0 	.word	0x0800cfe0
 8008644:	9908      	ldr	r1, [sp, #32]
 8008646:	2900      	cmp	r1, #0
 8008648:	f000 80e3 	beq.w	8008812 <_dtoa_r+0x7ea>
 800864c:	9907      	ldr	r1, [sp, #28]
 800864e:	2901      	cmp	r1, #1
 8008650:	f300 80c8 	bgt.w	80087e4 <_dtoa_r+0x7bc>
 8008654:	2d00      	cmp	r5, #0
 8008656:	f000 80c1 	beq.w	80087dc <_dtoa_r+0x7b4>
 800865a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800865e:	9e05      	ldr	r6, [sp, #20]
 8008660:	461c      	mov	r4, r3
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	9b05      	ldr	r3, [sp, #20]
 8008666:	4413      	add	r3, r2
 8008668:	9305      	str	r3, [sp, #20]
 800866a:	9b06      	ldr	r3, [sp, #24]
 800866c:	2101      	movs	r1, #1
 800866e:	4413      	add	r3, r2
 8008670:	4648      	mov	r0, r9
 8008672:	9306      	str	r3, [sp, #24]
 8008674:	f000 fc6c 	bl	8008f50 <__i2b>
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	4605      	mov	r5, r0
 800867c:	b166      	cbz	r6, 8008698 <_dtoa_r+0x670>
 800867e:	9a06      	ldr	r2, [sp, #24]
 8008680:	2a00      	cmp	r2, #0
 8008682:	dd09      	ble.n	8008698 <_dtoa_r+0x670>
 8008684:	42b2      	cmp	r2, r6
 8008686:	9905      	ldr	r1, [sp, #20]
 8008688:	bfa8      	it	ge
 800868a:	4632      	movge	r2, r6
 800868c:	1a89      	subs	r1, r1, r2
 800868e:	9105      	str	r1, [sp, #20]
 8008690:	9906      	ldr	r1, [sp, #24]
 8008692:	1ab6      	subs	r6, r6, r2
 8008694:	1a8a      	subs	r2, r1, r2
 8008696:	9206      	str	r2, [sp, #24]
 8008698:	b1fb      	cbz	r3, 80086da <_dtoa_r+0x6b2>
 800869a:	9a08      	ldr	r2, [sp, #32]
 800869c:	2a00      	cmp	r2, #0
 800869e:	f000 80bc 	beq.w	800881a <_dtoa_r+0x7f2>
 80086a2:	b19c      	cbz	r4, 80086cc <_dtoa_r+0x6a4>
 80086a4:	4629      	mov	r1, r5
 80086a6:	4622      	mov	r2, r4
 80086a8:	4648      	mov	r0, r9
 80086aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ac:	f000 fd10 	bl	80090d0 <__pow5mult>
 80086b0:	9a01      	ldr	r2, [sp, #4]
 80086b2:	4601      	mov	r1, r0
 80086b4:	4605      	mov	r5, r0
 80086b6:	4648      	mov	r0, r9
 80086b8:	f000 fc60 	bl	8008f7c <__multiply>
 80086bc:	9901      	ldr	r1, [sp, #4]
 80086be:	9004      	str	r0, [sp, #16]
 80086c0:	4648      	mov	r0, r9
 80086c2:	f000 fb47 	bl	8008d54 <_Bfree>
 80086c6:	9a04      	ldr	r2, [sp, #16]
 80086c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ca:	9201      	str	r2, [sp, #4]
 80086cc:	1b1a      	subs	r2, r3, r4
 80086ce:	d004      	beq.n	80086da <_dtoa_r+0x6b2>
 80086d0:	9901      	ldr	r1, [sp, #4]
 80086d2:	4648      	mov	r0, r9
 80086d4:	f000 fcfc 	bl	80090d0 <__pow5mult>
 80086d8:	9001      	str	r0, [sp, #4]
 80086da:	2101      	movs	r1, #1
 80086dc:	4648      	mov	r0, r9
 80086de:	f000 fc37 	bl	8008f50 <__i2b>
 80086e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086e4:	4604      	mov	r4, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 81d0 	beq.w	8008a8c <_dtoa_r+0xa64>
 80086ec:	461a      	mov	r2, r3
 80086ee:	4601      	mov	r1, r0
 80086f0:	4648      	mov	r0, r9
 80086f2:	f000 fced 	bl	80090d0 <__pow5mult>
 80086f6:	9b07      	ldr	r3, [sp, #28]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	4604      	mov	r4, r0
 80086fc:	f300 8095 	bgt.w	800882a <_dtoa_r+0x802>
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 808b 	bne.w	800881e <_dtoa_r+0x7f6>
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800870e:	2a00      	cmp	r2, #0
 8008710:	f040 8087 	bne.w	8008822 <_dtoa_r+0x7fa>
 8008714:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008718:	0d12      	lsrs	r2, r2, #20
 800871a:	0512      	lsls	r2, r2, #20
 800871c:	2a00      	cmp	r2, #0
 800871e:	f000 8082 	beq.w	8008826 <_dtoa_r+0x7fe>
 8008722:	9b05      	ldr	r3, [sp, #20]
 8008724:	3301      	adds	r3, #1
 8008726:	9305      	str	r3, [sp, #20]
 8008728:	9b06      	ldr	r3, [sp, #24]
 800872a:	3301      	adds	r3, #1
 800872c:	9306      	str	r3, [sp, #24]
 800872e:	2301      	movs	r3, #1
 8008730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 81af 	beq.w	8008a98 <_dtoa_r+0xa70>
 800873a:	6922      	ldr	r2, [r4, #16]
 800873c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008740:	6910      	ldr	r0, [r2, #16]
 8008742:	f000 fbb9 	bl	8008eb8 <__hi0bits>
 8008746:	f1c0 0020 	rsb	r0, r0, #32
 800874a:	9b06      	ldr	r3, [sp, #24]
 800874c:	4418      	add	r0, r3
 800874e:	f010 001f 	ands.w	r0, r0, #31
 8008752:	d076      	beq.n	8008842 <_dtoa_r+0x81a>
 8008754:	f1c0 0220 	rsb	r2, r0, #32
 8008758:	2a04      	cmp	r2, #4
 800875a:	dd69      	ble.n	8008830 <_dtoa_r+0x808>
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	f1c0 001c 	rsb	r0, r0, #28
 8008762:	4403      	add	r3, r0
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	4406      	add	r6, r0
 800876a:	4403      	add	r3, r0
 800876c:	9306      	str	r3, [sp, #24]
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	dd05      	ble.n	8008780 <_dtoa_r+0x758>
 8008774:	9901      	ldr	r1, [sp, #4]
 8008776:	461a      	mov	r2, r3
 8008778:	4648      	mov	r0, r9
 800877a:	f000 fd03 	bl	8009184 <__lshift>
 800877e:	9001      	str	r0, [sp, #4]
 8008780:	9b06      	ldr	r3, [sp, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	dd05      	ble.n	8008792 <_dtoa_r+0x76a>
 8008786:	4621      	mov	r1, r4
 8008788:	461a      	mov	r2, r3
 800878a:	4648      	mov	r0, r9
 800878c:	f000 fcfa 	bl	8009184 <__lshift>
 8008790:	4604      	mov	r4, r0
 8008792:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008794:	2b00      	cmp	r3, #0
 8008796:	d056      	beq.n	8008846 <_dtoa_r+0x81e>
 8008798:	9801      	ldr	r0, [sp, #4]
 800879a:	4621      	mov	r1, r4
 800879c:	f000 fd5e 	bl	800925c <__mcmp>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	da50      	bge.n	8008846 <_dtoa_r+0x81e>
 80087a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80087a8:	9304      	str	r3, [sp, #16]
 80087aa:	9901      	ldr	r1, [sp, #4]
 80087ac:	2300      	movs	r3, #0
 80087ae:	220a      	movs	r2, #10
 80087b0:	4648      	mov	r0, r9
 80087b2:	f000 faf1 	bl	8008d98 <__multadd>
 80087b6:	9b08      	ldr	r3, [sp, #32]
 80087b8:	9001      	str	r0, [sp, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 816e 	beq.w	8008a9c <_dtoa_r+0xa74>
 80087c0:	4629      	mov	r1, r5
 80087c2:	2300      	movs	r3, #0
 80087c4:	220a      	movs	r2, #10
 80087c6:	4648      	mov	r0, r9
 80087c8:	f000 fae6 	bl	8008d98 <__multadd>
 80087cc:	f1bb 0f00 	cmp.w	fp, #0
 80087d0:	4605      	mov	r5, r0
 80087d2:	dc64      	bgt.n	800889e <_dtoa_r+0x876>
 80087d4:	9b07      	ldr	r3, [sp, #28]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	dc3e      	bgt.n	8008858 <_dtoa_r+0x830>
 80087da:	e060      	b.n	800889e <_dtoa_r+0x876>
 80087dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087e2:	e73c      	b.n	800865e <_dtoa_r+0x636>
 80087e4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	bfbf      	itttt	lt
 80087ec:	1ae2      	sublt	r2, r4, r3
 80087ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80087f0:	189b      	addlt	r3, r3, r2
 80087f2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80087f4:	bfae      	itee	ge
 80087f6:	1b1c      	subge	r4, r3, r4
 80087f8:	4623      	movlt	r3, r4
 80087fa:	2400      	movlt	r4, #0
 80087fc:	f1ba 0f00 	cmp.w	sl, #0
 8008800:	bfb5      	itete	lt
 8008802:	9a05      	ldrlt	r2, [sp, #20]
 8008804:	9e05      	ldrge	r6, [sp, #20]
 8008806:	eba2 060a 	sublt.w	r6, r2, sl
 800880a:	4652      	movge	r2, sl
 800880c:	bfb8      	it	lt
 800880e:	2200      	movlt	r2, #0
 8008810:	e727      	b.n	8008662 <_dtoa_r+0x63a>
 8008812:	9e05      	ldr	r6, [sp, #20]
 8008814:	9d08      	ldr	r5, [sp, #32]
 8008816:	461c      	mov	r4, r3
 8008818:	e730      	b.n	800867c <_dtoa_r+0x654>
 800881a:	461a      	mov	r2, r3
 800881c:	e758      	b.n	80086d0 <_dtoa_r+0x6a8>
 800881e:	2300      	movs	r3, #0
 8008820:	e786      	b.n	8008730 <_dtoa_r+0x708>
 8008822:	9b02      	ldr	r3, [sp, #8]
 8008824:	e784      	b.n	8008730 <_dtoa_r+0x708>
 8008826:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008828:	e783      	b.n	8008732 <_dtoa_r+0x70a>
 800882a:	2300      	movs	r3, #0
 800882c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800882e:	e784      	b.n	800873a <_dtoa_r+0x712>
 8008830:	d09d      	beq.n	800876e <_dtoa_r+0x746>
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	321c      	adds	r2, #28
 8008836:	4413      	add	r3, r2
 8008838:	9305      	str	r3, [sp, #20]
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	4416      	add	r6, r2
 800883e:	4413      	add	r3, r2
 8008840:	e794      	b.n	800876c <_dtoa_r+0x744>
 8008842:	4602      	mov	r2, r0
 8008844:	e7f5      	b.n	8008832 <_dtoa_r+0x80a>
 8008846:	f1ba 0f00 	cmp.w	sl, #0
 800884a:	f8cd 8010 	str.w	r8, [sp, #16]
 800884e:	46d3      	mov	fp, sl
 8008850:	dc21      	bgt.n	8008896 <_dtoa_r+0x86e>
 8008852:	9b07      	ldr	r3, [sp, #28]
 8008854:	2b02      	cmp	r3, #2
 8008856:	dd1e      	ble.n	8008896 <_dtoa_r+0x86e>
 8008858:	f1bb 0f00 	cmp.w	fp, #0
 800885c:	f47f aeb7 	bne.w	80085ce <_dtoa_r+0x5a6>
 8008860:	4621      	mov	r1, r4
 8008862:	465b      	mov	r3, fp
 8008864:	2205      	movs	r2, #5
 8008866:	4648      	mov	r0, r9
 8008868:	f000 fa96 	bl	8008d98 <__multadd>
 800886c:	4601      	mov	r1, r0
 800886e:	4604      	mov	r4, r0
 8008870:	9801      	ldr	r0, [sp, #4]
 8008872:	f000 fcf3 	bl	800925c <__mcmp>
 8008876:	2800      	cmp	r0, #0
 8008878:	f77f aea9 	ble.w	80085ce <_dtoa_r+0x5a6>
 800887c:	463e      	mov	r6, r7
 800887e:	2331      	movs	r3, #49	@ 0x31
 8008880:	f806 3b01 	strb.w	r3, [r6], #1
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	3301      	adds	r3, #1
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	e6a4      	b.n	80085d6 <_dtoa_r+0x5ae>
 800888c:	f8cd 8010 	str.w	r8, [sp, #16]
 8008890:	4654      	mov	r4, sl
 8008892:	4625      	mov	r5, r4
 8008894:	e7f2      	b.n	800887c <_dtoa_r+0x854>
 8008896:	9b08      	ldr	r3, [sp, #32]
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 8103 	beq.w	8008aa4 <_dtoa_r+0xa7c>
 800889e:	2e00      	cmp	r6, #0
 80088a0:	dd05      	ble.n	80088ae <_dtoa_r+0x886>
 80088a2:	4629      	mov	r1, r5
 80088a4:	4632      	mov	r2, r6
 80088a6:	4648      	mov	r0, r9
 80088a8:	f000 fc6c 	bl	8009184 <__lshift>
 80088ac:	4605      	mov	r5, r0
 80088ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d058      	beq.n	8008966 <_dtoa_r+0x93e>
 80088b4:	6869      	ldr	r1, [r5, #4]
 80088b6:	4648      	mov	r0, r9
 80088b8:	f000 fa0c 	bl	8008cd4 <_Balloc>
 80088bc:	4606      	mov	r6, r0
 80088be:	b928      	cbnz	r0, 80088cc <_dtoa_r+0x8a4>
 80088c0:	4b82      	ldr	r3, [pc, #520]	@ (8008acc <_dtoa_r+0xaa4>)
 80088c2:	4602      	mov	r2, r0
 80088c4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088c8:	f7ff bbc7 	b.w	800805a <_dtoa_r+0x32>
 80088cc:	692a      	ldr	r2, [r5, #16]
 80088ce:	3202      	adds	r2, #2
 80088d0:	0092      	lsls	r2, r2, #2
 80088d2:	f105 010c 	add.w	r1, r5, #12
 80088d6:	300c      	adds	r0, #12
 80088d8:	f002 f8f4 	bl	800aac4 <memcpy>
 80088dc:	2201      	movs	r2, #1
 80088de:	4631      	mov	r1, r6
 80088e0:	4648      	mov	r0, r9
 80088e2:	f000 fc4f 	bl	8009184 <__lshift>
 80088e6:	1c7b      	adds	r3, r7, #1
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	eb07 030b 	add.w	r3, r7, fp
 80088ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f0:	9b02      	ldr	r3, [sp, #8]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	46a8      	mov	r8, r5
 80088f8:	9308      	str	r3, [sp, #32]
 80088fa:	4605      	mov	r5, r0
 80088fc:	9b05      	ldr	r3, [sp, #20]
 80088fe:	9801      	ldr	r0, [sp, #4]
 8008900:	4621      	mov	r1, r4
 8008902:	f103 3bff 	add.w	fp, r3, #4294967295
 8008906:	f7ff fb05 	bl	8007f14 <quorem>
 800890a:	4641      	mov	r1, r8
 800890c:	9002      	str	r0, [sp, #8]
 800890e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008912:	9801      	ldr	r0, [sp, #4]
 8008914:	f000 fca2 	bl	800925c <__mcmp>
 8008918:	462a      	mov	r2, r5
 800891a:	9006      	str	r0, [sp, #24]
 800891c:	4621      	mov	r1, r4
 800891e:	4648      	mov	r0, r9
 8008920:	f000 fcb8 	bl	8009294 <__mdiff>
 8008924:	68c2      	ldr	r2, [r0, #12]
 8008926:	4606      	mov	r6, r0
 8008928:	b9fa      	cbnz	r2, 800896a <_dtoa_r+0x942>
 800892a:	4601      	mov	r1, r0
 800892c:	9801      	ldr	r0, [sp, #4]
 800892e:	f000 fc95 	bl	800925c <__mcmp>
 8008932:	4602      	mov	r2, r0
 8008934:	4631      	mov	r1, r6
 8008936:	4648      	mov	r0, r9
 8008938:	920a      	str	r2, [sp, #40]	@ 0x28
 800893a:	f000 fa0b 	bl	8008d54 <_Bfree>
 800893e:	9b07      	ldr	r3, [sp, #28]
 8008940:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008942:	9e05      	ldr	r6, [sp, #20]
 8008944:	ea43 0102 	orr.w	r1, r3, r2
 8008948:	9b08      	ldr	r3, [sp, #32]
 800894a:	4319      	orrs	r1, r3
 800894c:	d10f      	bne.n	800896e <_dtoa_r+0x946>
 800894e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008952:	d028      	beq.n	80089a6 <_dtoa_r+0x97e>
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	2b00      	cmp	r3, #0
 8008958:	dd02      	ble.n	8008960 <_dtoa_r+0x938>
 800895a:	9b02      	ldr	r3, [sp, #8]
 800895c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008960:	f88b a000 	strb.w	sl, [fp]
 8008964:	e639      	b.n	80085da <_dtoa_r+0x5b2>
 8008966:	4628      	mov	r0, r5
 8008968:	e7bd      	b.n	80088e6 <_dtoa_r+0x8be>
 800896a:	2201      	movs	r2, #1
 800896c:	e7e2      	b.n	8008934 <_dtoa_r+0x90c>
 800896e:	9b06      	ldr	r3, [sp, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	db04      	blt.n	800897e <_dtoa_r+0x956>
 8008974:	9907      	ldr	r1, [sp, #28]
 8008976:	430b      	orrs	r3, r1
 8008978:	9908      	ldr	r1, [sp, #32]
 800897a:	430b      	orrs	r3, r1
 800897c:	d120      	bne.n	80089c0 <_dtoa_r+0x998>
 800897e:	2a00      	cmp	r2, #0
 8008980:	ddee      	ble.n	8008960 <_dtoa_r+0x938>
 8008982:	9901      	ldr	r1, [sp, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	4648      	mov	r0, r9
 8008988:	f000 fbfc 	bl	8009184 <__lshift>
 800898c:	4621      	mov	r1, r4
 800898e:	9001      	str	r0, [sp, #4]
 8008990:	f000 fc64 	bl	800925c <__mcmp>
 8008994:	2800      	cmp	r0, #0
 8008996:	dc03      	bgt.n	80089a0 <_dtoa_r+0x978>
 8008998:	d1e2      	bne.n	8008960 <_dtoa_r+0x938>
 800899a:	f01a 0f01 	tst.w	sl, #1
 800899e:	d0df      	beq.n	8008960 <_dtoa_r+0x938>
 80089a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80089a4:	d1d9      	bne.n	800895a <_dtoa_r+0x932>
 80089a6:	2339      	movs	r3, #57	@ 0x39
 80089a8:	f88b 3000 	strb.w	r3, [fp]
 80089ac:	4633      	mov	r3, r6
 80089ae:	461e      	mov	r6, r3
 80089b0:	3b01      	subs	r3, #1
 80089b2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80089b6:	2a39      	cmp	r2, #57	@ 0x39
 80089b8:	d053      	beq.n	8008a62 <_dtoa_r+0xa3a>
 80089ba:	3201      	adds	r2, #1
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	e60c      	b.n	80085da <_dtoa_r+0x5b2>
 80089c0:	2a00      	cmp	r2, #0
 80089c2:	dd07      	ble.n	80089d4 <_dtoa_r+0x9ac>
 80089c4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80089c8:	d0ed      	beq.n	80089a6 <_dtoa_r+0x97e>
 80089ca:	f10a 0301 	add.w	r3, sl, #1
 80089ce:	f88b 3000 	strb.w	r3, [fp]
 80089d2:	e602      	b.n	80085da <_dtoa_r+0x5b2>
 80089d4:	9b05      	ldr	r3, [sp, #20]
 80089d6:	9a05      	ldr	r2, [sp, #20]
 80089d8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80089dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089de:	4293      	cmp	r3, r2
 80089e0:	d029      	beq.n	8008a36 <_dtoa_r+0xa0e>
 80089e2:	9901      	ldr	r1, [sp, #4]
 80089e4:	2300      	movs	r3, #0
 80089e6:	220a      	movs	r2, #10
 80089e8:	4648      	mov	r0, r9
 80089ea:	f000 f9d5 	bl	8008d98 <__multadd>
 80089ee:	45a8      	cmp	r8, r5
 80089f0:	9001      	str	r0, [sp, #4]
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	f04f 020a 	mov.w	r2, #10
 80089fa:	4641      	mov	r1, r8
 80089fc:	4648      	mov	r0, r9
 80089fe:	d107      	bne.n	8008a10 <_dtoa_r+0x9e8>
 8008a00:	f000 f9ca 	bl	8008d98 <__multadd>
 8008a04:	4680      	mov	r8, r0
 8008a06:	4605      	mov	r5, r0
 8008a08:	9b05      	ldr	r3, [sp, #20]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	9305      	str	r3, [sp, #20]
 8008a0e:	e775      	b.n	80088fc <_dtoa_r+0x8d4>
 8008a10:	f000 f9c2 	bl	8008d98 <__multadd>
 8008a14:	4629      	mov	r1, r5
 8008a16:	4680      	mov	r8, r0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	220a      	movs	r2, #10
 8008a1c:	4648      	mov	r0, r9
 8008a1e:	f000 f9bb 	bl	8008d98 <__multadd>
 8008a22:	4605      	mov	r5, r0
 8008a24:	e7f0      	b.n	8008a08 <_dtoa_r+0x9e0>
 8008a26:	f1bb 0f00 	cmp.w	fp, #0
 8008a2a:	bfcc      	ite	gt
 8008a2c:	465e      	movgt	r6, fp
 8008a2e:	2601      	movle	r6, #1
 8008a30:	443e      	add	r6, r7
 8008a32:	f04f 0800 	mov.w	r8, #0
 8008a36:	9901      	ldr	r1, [sp, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	4648      	mov	r0, r9
 8008a3c:	f000 fba2 	bl	8009184 <__lshift>
 8008a40:	4621      	mov	r1, r4
 8008a42:	9001      	str	r0, [sp, #4]
 8008a44:	f000 fc0a 	bl	800925c <__mcmp>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	dcaf      	bgt.n	80089ac <_dtoa_r+0x984>
 8008a4c:	d102      	bne.n	8008a54 <_dtoa_r+0xa2c>
 8008a4e:	f01a 0f01 	tst.w	sl, #1
 8008a52:	d1ab      	bne.n	80089ac <_dtoa_r+0x984>
 8008a54:	4633      	mov	r3, r6
 8008a56:	461e      	mov	r6, r3
 8008a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a5c:	2a30      	cmp	r2, #48	@ 0x30
 8008a5e:	d0fa      	beq.n	8008a56 <_dtoa_r+0xa2e>
 8008a60:	e5bb      	b.n	80085da <_dtoa_r+0x5b2>
 8008a62:	429f      	cmp	r7, r3
 8008a64:	d1a3      	bne.n	80089ae <_dtoa_r+0x986>
 8008a66:	9b04      	ldr	r3, [sp, #16]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	2331      	movs	r3, #49	@ 0x31
 8008a6e:	703b      	strb	r3, [r7, #0]
 8008a70:	e5b3      	b.n	80085da <_dtoa_r+0x5b2>
 8008a72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a74:	4f16      	ldr	r7, [pc, #88]	@ (8008ad0 <_dtoa_r+0xaa8>)
 8008a76:	b11b      	cbz	r3, 8008a80 <_dtoa_r+0xa58>
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	4638      	mov	r0, r7
 8008a82:	b011      	add	sp, #68	@ 0x44
 8008a84:	ecbd 8b02 	vpop	{d8}
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	f77f ae36 	ble.w	8008700 <_dtoa_r+0x6d8>
 8008a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a98:	2001      	movs	r0, #1
 8008a9a:	e656      	b.n	800874a <_dtoa_r+0x722>
 8008a9c:	f1bb 0f00 	cmp.w	fp, #0
 8008aa0:	f77f aed7 	ble.w	8008852 <_dtoa_r+0x82a>
 8008aa4:	463e      	mov	r6, r7
 8008aa6:	9801      	ldr	r0, [sp, #4]
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f7ff fa33 	bl	8007f14 <quorem>
 8008aae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008ab2:	f806 ab01 	strb.w	sl, [r6], #1
 8008ab6:	1bf2      	subs	r2, r6, r7
 8008ab8:	4593      	cmp	fp, r2
 8008aba:	ddb4      	ble.n	8008a26 <_dtoa_r+0x9fe>
 8008abc:	9901      	ldr	r1, [sp, #4]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	4648      	mov	r0, r9
 8008ac4:	f000 f968 	bl	8008d98 <__multadd>
 8008ac8:	9001      	str	r0, [sp, #4]
 8008aca:	e7ec      	b.n	8008aa6 <_dtoa_r+0xa7e>
 8008acc:	0800cf69 	.word	0x0800cf69
 8008ad0:	0800ceed 	.word	0x0800ceed

08008ad4 <_free_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	d041      	beq.n	8008b60 <_free_r+0x8c>
 8008adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ae0:	1f0c      	subs	r4, r1, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bfb8      	it	lt
 8008ae6:	18e4      	addlt	r4, r4, r3
 8008ae8:	f000 f8e8 	bl	8008cbc <__malloc_lock>
 8008aec:	4a1d      	ldr	r2, [pc, #116]	@ (8008b64 <_free_r+0x90>)
 8008aee:	6813      	ldr	r3, [r2, #0]
 8008af0:	b933      	cbnz	r3, 8008b00 <_free_r+0x2c>
 8008af2:	6063      	str	r3, [r4, #4]
 8008af4:	6014      	str	r4, [r2, #0]
 8008af6:	4628      	mov	r0, r5
 8008af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008afc:	f000 b8e4 	b.w	8008cc8 <__malloc_unlock>
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	d908      	bls.n	8008b16 <_free_r+0x42>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	1821      	adds	r1, r4, r0
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	bf01      	itttt	eq
 8008b0c:	6819      	ldreq	r1, [r3, #0]
 8008b0e:	685b      	ldreq	r3, [r3, #4]
 8008b10:	1809      	addeq	r1, r1, r0
 8008b12:	6021      	streq	r1, [r4, #0]
 8008b14:	e7ed      	b.n	8008af2 <_free_r+0x1e>
 8008b16:	461a      	mov	r2, r3
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	b10b      	cbz	r3, 8008b20 <_free_r+0x4c>
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	d9fa      	bls.n	8008b16 <_free_r+0x42>
 8008b20:	6811      	ldr	r1, [r2, #0]
 8008b22:	1850      	adds	r0, r2, r1
 8008b24:	42a0      	cmp	r0, r4
 8008b26:	d10b      	bne.n	8008b40 <_free_r+0x6c>
 8008b28:	6820      	ldr	r0, [r4, #0]
 8008b2a:	4401      	add	r1, r0
 8008b2c:	1850      	adds	r0, r2, r1
 8008b2e:	4283      	cmp	r3, r0
 8008b30:	6011      	str	r1, [r2, #0]
 8008b32:	d1e0      	bne.n	8008af6 <_free_r+0x22>
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	6053      	str	r3, [r2, #4]
 8008b3a:	4408      	add	r0, r1
 8008b3c:	6010      	str	r0, [r2, #0]
 8008b3e:	e7da      	b.n	8008af6 <_free_r+0x22>
 8008b40:	d902      	bls.n	8008b48 <_free_r+0x74>
 8008b42:	230c      	movs	r3, #12
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	e7d6      	b.n	8008af6 <_free_r+0x22>
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	1821      	adds	r1, r4, r0
 8008b4c:	428b      	cmp	r3, r1
 8008b4e:	bf04      	itt	eq
 8008b50:	6819      	ldreq	r1, [r3, #0]
 8008b52:	685b      	ldreq	r3, [r3, #4]
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	bf04      	itt	eq
 8008b58:	1809      	addeq	r1, r1, r0
 8008b5a:	6021      	streq	r1, [r4, #0]
 8008b5c:	6054      	str	r4, [r2, #4]
 8008b5e:	e7ca      	b.n	8008af6 <_free_r+0x22>
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	bf00      	nop
 8008b64:	240004cc 	.word	0x240004cc

08008b68 <malloc>:
 8008b68:	4b02      	ldr	r3, [pc, #8]	@ (8008b74 <malloc+0xc>)
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	f000 b825 	b.w	8008bbc <_malloc_r>
 8008b72:	bf00      	nop
 8008b74:	24000040 	.word	0x24000040

08008b78 <sbrk_aligned>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	4e0f      	ldr	r6, [pc, #60]	@ (8008bb8 <sbrk_aligned+0x40>)
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	6831      	ldr	r1, [r6, #0]
 8008b80:	4605      	mov	r5, r0
 8008b82:	b911      	cbnz	r1, 8008b8a <sbrk_aligned+0x12>
 8008b84:	f001 ff8e 	bl	800aaa4 <_sbrk_r>
 8008b88:	6030      	str	r0, [r6, #0]
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f001 ff89 	bl	800aaa4 <_sbrk_r>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d103      	bne.n	8008b9e <sbrk_aligned+0x26>
 8008b96:	f04f 34ff 	mov.w	r4, #4294967295
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	bd70      	pop	{r4, r5, r6, pc}
 8008b9e:	1cc4      	adds	r4, r0, #3
 8008ba0:	f024 0403 	bic.w	r4, r4, #3
 8008ba4:	42a0      	cmp	r0, r4
 8008ba6:	d0f8      	beq.n	8008b9a <sbrk_aligned+0x22>
 8008ba8:	1a21      	subs	r1, r4, r0
 8008baa:	4628      	mov	r0, r5
 8008bac:	f001 ff7a 	bl	800aaa4 <_sbrk_r>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d1f2      	bne.n	8008b9a <sbrk_aligned+0x22>
 8008bb4:	e7ef      	b.n	8008b96 <sbrk_aligned+0x1e>
 8008bb6:	bf00      	nop
 8008bb8:	240004c8 	.word	0x240004c8

08008bbc <_malloc_r>:
 8008bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc0:	1ccd      	adds	r5, r1, #3
 8008bc2:	f025 0503 	bic.w	r5, r5, #3
 8008bc6:	3508      	adds	r5, #8
 8008bc8:	2d0c      	cmp	r5, #12
 8008bca:	bf38      	it	cc
 8008bcc:	250c      	movcc	r5, #12
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	db01      	blt.n	8008bd8 <_malloc_r+0x1c>
 8008bd4:	42a9      	cmp	r1, r5
 8008bd6:	d904      	bls.n	8008be2 <_malloc_r+0x26>
 8008bd8:	230c      	movs	r3, #12
 8008bda:	6033      	str	r3, [r6, #0]
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cb8 <_malloc_r+0xfc>
 8008be6:	f000 f869 	bl	8008cbc <__malloc_lock>
 8008bea:	f8d8 3000 	ldr.w	r3, [r8]
 8008bee:	461c      	mov	r4, r3
 8008bf0:	bb44      	cbnz	r4, 8008c44 <_malloc_r+0x88>
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f7ff ffbf 	bl	8008b78 <sbrk_aligned>
 8008bfa:	1c43      	adds	r3, r0, #1
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	d158      	bne.n	8008cb2 <_malloc_r+0xf6>
 8008c00:	f8d8 4000 	ldr.w	r4, [r8]
 8008c04:	4627      	mov	r7, r4
 8008c06:	2f00      	cmp	r7, #0
 8008c08:	d143      	bne.n	8008c92 <_malloc_r+0xd6>
 8008c0a:	2c00      	cmp	r4, #0
 8008c0c:	d04b      	beq.n	8008ca6 <_malloc_r+0xea>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	4639      	mov	r1, r7
 8008c12:	4630      	mov	r0, r6
 8008c14:	eb04 0903 	add.w	r9, r4, r3
 8008c18:	f001 ff44 	bl	800aaa4 <_sbrk_r>
 8008c1c:	4581      	cmp	r9, r0
 8008c1e:	d142      	bne.n	8008ca6 <_malloc_r+0xea>
 8008c20:	6821      	ldr	r1, [r4, #0]
 8008c22:	1a6d      	subs	r5, r5, r1
 8008c24:	4629      	mov	r1, r5
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff ffa6 	bl	8008b78 <sbrk_aligned>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d03a      	beq.n	8008ca6 <_malloc_r+0xea>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	442b      	add	r3, r5
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	f8d8 3000 	ldr.w	r3, [r8]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	bb62      	cbnz	r2, 8008c98 <_malloc_r+0xdc>
 8008c3e:	f8c8 7000 	str.w	r7, [r8]
 8008c42:	e00f      	b.n	8008c64 <_malloc_r+0xa8>
 8008c44:	6822      	ldr	r2, [r4, #0]
 8008c46:	1b52      	subs	r2, r2, r5
 8008c48:	d420      	bmi.n	8008c8c <_malloc_r+0xd0>
 8008c4a:	2a0b      	cmp	r2, #11
 8008c4c:	d917      	bls.n	8008c7e <_malloc_r+0xc2>
 8008c4e:	1961      	adds	r1, r4, r5
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	6025      	str	r5, [r4, #0]
 8008c54:	bf18      	it	ne
 8008c56:	6059      	strne	r1, [r3, #4]
 8008c58:	6863      	ldr	r3, [r4, #4]
 8008c5a:	bf08      	it	eq
 8008c5c:	f8c8 1000 	streq.w	r1, [r8]
 8008c60:	5162      	str	r2, [r4, r5]
 8008c62:	604b      	str	r3, [r1, #4]
 8008c64:	4630      	mov	r0, r6
 8008c66:	f000 f82f 	bl	8008cc8 <__malloc_unlock>
 8008c6a:	f104 000b 	add.w	r0, r4, #11
 8008c6e:	1d23      	adds	r3, r4, #4
 8008c70:	f020 0007 	bic.w	r0, r0, #7
 8008c74:	1ac2      	subs	r2, r0, r3
 8008c76:	bf1c      	itt	ne
 8008c78:	1a1b      	subne	r3, r3, r0
 8008c7a:	50a3      	strne	r3, [r4, r2]
 8008c7c:	e7af      	b.n	8008bde <_malloc_r+0x22>
 8008c7e:	6862      	ldr	r2, [r4, #4]
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	bf0c      	ite	eq
 8008c84:	f8c8 2000 	streq.w	r2, [r8]
 8008c88:	605a      	strne	r2, [r3, #4]
 8008c8a:	e7eb      	b.n	8008c64 <_malloc_r+0xa8>
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	6864      	ldr	r4, [r4, #4]
 8008c90:	e7ae      	b.n	8008bf0 <_malloc_r+0x34>
 8008c92:	463c      	mov	r4, r7
 8008c94:	687f      	ldr	r7, [r7, #4]
 8008c96:	e7b6      	b.n	8008c06 <_malloc_r+0x4a>
 8008c98:	461a      	mov	r2, r3
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	d1fb      	bne.n	8008c98 <_malloc_r+0xdc>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	6053      	str	r3, [r2, #4]
 8008ca4:	e7de      	b.n	8008c64 <_malloc_r+0xa8>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	6033      	str	r3, [r6, #0]
 8008caa:	4630      	mov	r0, r6
 8008cac:	f000 f80c 	bl	8008cc8 <__malloc_unlock>
 8008cb0:	e794      	b.n	8008bdc <_malloc_r+0x20>
 8008cb2:	6005      	str	r5, [r0, #0]
 8008cb4:	e7d6      	b.n	8008c64 <_malloc_r+0xa8>
 8008cb6:	bf00      	nop
 8008cb8:	240004cc 	.word	0x240004cc

08008cbc <__malloc_lock>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	@ (8008cc4 <__malloc_lock+0x8>)
 8008cbe:	f7ff b920 	b.w	8007f02 <__retarget_lock_acquire_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	240004c4 	.word	0x240004c4

08008cc8 <__malloc_unlock>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	@ (8008cd0 <__malloc_unlock+0x8>)
 8008cca:	f7ff b91b 	b.w	8007f04 <__retarget_lock_release_recursive>
 8008cce:	bf00      	nop
 8008cd0:	240004c4 	.word	0x240004c4

08008cd4 <_Balloc>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	69c6      	ldr	r6, [r0, #28]
 8008cd8:	4604      	mov	r4, r0
 8008cda:	460d      	mov	r5, r1
 8008cdc:	b976      	cbnz	r6, 8008cfc <_Balloc+0x28>
 8008cde:	2010      	movs	r0, #16
 8008ce0:	f7ff ff42 	bl	8008b68 <malloc>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	61e0      	str	r0, [r4, #28]
 8008ce8:	b920      	cbnz	r0, 8008cf4 <_Balloc+0x20>
 8008cea:	4b18      	ldr	r3, [pc, #96]	@ (8008d4c <_Balloc+0x78>)
 8008cec:	4818      	ldr	r0, [pc, #96]	@ (8008d50 <_Balloc+0x7c>)
 8008cee:	216b      	movs	r1, #107	@ 0x6b
 8008cf0:	f001 fefe 	bl	800aaf0 <__assert_func>
 8008cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cf8:	6006      	str	r6, [r0, #0]
 8008cfa:	60c6      	str	r6, [r0, #12]
 8008cfc:	69e6      	ldr	r6, [r4, #28]
 8008cfe:	68f3      	ldr	r3, [r6, #12]
 8008d00:	b183      	cbz	r3, 8008d24 <_Balloc+0x50>
 8008d02:	69e3      	ldr	r3, [r4, #28]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d0a:	b9b8      	cbnz	r0, 8008d3c <_Balloc+0x68>
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d12:	1d72      	adds	r2, r6, #5
 8008d14:	0092      	lsls	r2, r2, #2
 8008d16:	4620      	mov	r0, r4
 8008d18:	f001 ff08 	bl	800ab2c <_calloc_r>
 8008d1c:	b160      	cbz	r0, 8008d38 <_Balloc+0x64>
 8008d1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d22:	e00e      	b.n	8008d42 <_Balloc+0x6e>
 8008d24:	2221      	movs	r2, #33	@ 0x21
 8008d26:	2104      	movs	r1, #4
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f001 feff 	bl	800ab2c <_calloc_r>
 8008d2e:	69e3      	ldr	r3, [r4, #28]
 8008d30:	60f0      	str	r0, [r6, #12]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e4      	bne.n	8008d02 <_Balloc+0x2e>
 8008d38:	2000      	movs	r0, #0
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	6802      	ldr	r2, [r0, #0]
 8008d3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d42:	2300      	movs	r3, #0
 8008d44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d48:	e7f7      	b.n	8008d3a <_Balloc+0x66>
 8008d4a:	bf00      	nop
 8008d4c:	0800cefa 	.word	0x0800cefa
 8008d50:	0800cf7a 	.word	0x0800cf7a

08008d54 <_Bfree>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	69c6      	ldr	r6, [r0, #28]
 8008d58:	4605      	mov	r5, r0
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	b976      	cbnz	r6, 8008d7c <_Bfree+0x28>
 8008d5e:	2010      	movs	r0, #16
 8008d60:	f7ff ff02 	bl	8008b68 <malloc>
 8008d64:	4602      	mov	r2, r0
 8008d66:	61e8      	str	r0, [r5, #28]
 8008d68:	b920      	cbnz	r0, 8008d74 <_Bfree+0x20>
 8008d6a:	4b09      	ldr	r3, [pc, #36]	@ (8008d90 <_Bfree+0x3c>)
 8008d6c:	4809      	ldr	r0, [pc, #36]	@ (8008d94 <_Bfree+0x40>)
 8008d6e:	218f      	movs	r1, #143	@ 0x8f
 8008d70:	f001 febe 	bl	800aaf0 <__assert_func>
 8008d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d78:	6006      	str	r6, [r0, #0]
 8008d7a:	60c6      	str	r6, [r0, #12]
 8008d7c:	b13c      	cbz	r4, 8008d8e <_Bfree+0x3a>
 8008d7e:	69eb      	ldr	r3, [r5, #28]
 8008d80:	6862      	ldr	r2, [r4, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d88:	6021      	str	r1, [r4, #0]
 8008d8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	0800cefa 	.word	0x0800cefa
 8008d94:	0800cf7a 	.word	0x0800cf7a

08008d98 <__multadd>:
 8008d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9c:	690d      	ldr	r5, [r1, #16]
 8008d9e:	4607      	mov	r7, r0
 8008da0:	460c      	mov	r4, r1
 8008da2:	461e      	mov	r6, r3
 8008da4:	f101 0c14 	add.w	ip, r1, #20
 8008da8:	2000      	movs	r0, #0
 8008daa:	f8dc 3000 	ldr.w	r3, [ip]
 8008dae:	b299      	uxth	r1, r3
 8008db0:	fb02 6101 	mla	r1, r2, r1, r6
 8008db4:	0c1e      	lsrs	r6, r3, #16
 8008db6:	0c0b      	lsrs	r3, r1, #16
 8008db8:	fb02 3306 	mla	r3, r2, r6, r3
 8008dbc:	b289      	uxth	r1, r1
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008dc4:	4285      	cmp	r5, r0
 8008dc6:	f84c 1b04 	str.w	r1, [ip], #4
 8008dca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dce:	dcec      	bgt.n	8008daa <__multadd+0x12>
 8008dd0:	b30e      	cbz	r6, 8008e16 <__multadd+0x7e>
 8008dd2:	68a3      	ldr	r3, [r4, #8]
 8008dd4:	42ab      	cmp	r3, r5
 8008dd6:	dc19      	bgt.n	8008e0c <__multadd+0x74>
 8008dd8:	6861      	ldr	r1, [r4, #4]
 8008dda:	4638      	mov	r0, r7
 8008ddc:	3101      	adds	r1, #1
 8008dde:	f7ff ff79 	bl	8008cd4 <_Balloc>
 8008de2:	4680      	mov	r8, r0
 8008de4:	b928      	cbnz	r0, 8008df2 <__multadd+0x5a>
 8008de6:	4602      	mov	r2, r0
 8008de8:	4b0c      	ldr	r3, [pc, #48]	@ (8008e1c <__multadd+0x84>)
 8008dea:	480d      	ldr	r0, [pc, #52]	@ (8008e20 <__multadd+0x88>)
 8008dec:	21ba      	movs	r1, #186	@ 0xba
 8008dee:	f001 fe7f 	bl	800aaf0 <__assert_func>
 8008df2:	6922      	ldr	r2, [r4, #16]
 8008df4:	3202      	adds	r2, #2
 8008df6:	f104 010c 	add.w	r1, r4, #12
 8008dfa:	0092      	lsls	r2, r2, #2
 8008dfc:	300c      	adds	r0, #12
 8008dfe:	f001 fe61 	bl	800aac4 <memcpy>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4638      	mov	r0, r7
 8008e06:	f7ff ffa5 	bl	8008d54 <_Bfree>
 8008e0a:	4644      	mov	r4, r8
 8008e0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e10:	3501      	adds	r5, #1
 8008e12:	615e      	str	r6, [r3, #20]
 8008e14:	6125      	str	r5, [r4, #16]
 8008e16:	4620      	mov	r0, r4
 8008e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1c:	0800cf69 	.word	0x0800cf69
 8008e20:	0800cf7a 	.word	0x0800cf7a

08008e24 <__s2b>:
 8008e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e28:	460c      	mov	r4, r1
 8008e2a:	4615      	mov	r5, r2
 8008e2c:	461f      	mov	r7, r3
 8008e2e:	2209      	movs	r2, #9
 8008e30:	3308      	adds	r3, #8
 8008e32:	4606      	mov	r6, r0
 8008e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e38:	2100      	movs	r1, #0
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	db09      	blt.n	8008e54 <__s2b+0x30>
 8008e40:	4630      	mov	r0, r6
 8008e42:	f7ff ff47 	bl	8008cd4 <_Balloc>
 8008e46:	b940      	cbnz	r0, 8008e5a <__s2b+0x36>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	4b19      	ldr	r3, [pc, #100]	@ (8008eb0 <__s2b+0x8c>)
 8008e4c:	4819      	ldr	r0, [pc, #100]	@ (8008eb4 <__s2b+0x90>)
 8008e4e:	21d3      	movs	r1, #211	@ 0xd3
 8008e50:	f001 fe4e 	bl	800aaf0 <__assert_func>
 8008e54:	0052      	lsls	r2, r2, #1
 8008e56:	3101      	adds	r1, #1
 8008e58:	e7f0      	b.n	8008e3c <__s2b+0x18>
 8008e5a:	9b08      	ldr	r3, [sp, #32]
 8008e5c:	6143      	str	r3, [r0, #20]
 8008e5e:	2d09      	cmp	r5, #9
 8008e60:	f04f 0301 	mov.w	r3, #1
 8008e64:	6103      	str	r3, [r0, #16]
 8008e66:	dd16      	ble.n	8008e96 <__s2b+0x72>
 8008e68:	f104 0909 	add.w	r9, r4, #9
 8008e6c:	46c8      	mov	r8, r9
 8008e6e:	442c      	add	r4, r5
 8008e70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008e74:	4601      	mov	r1, r0
 8008e76:	3b30      	subs	r3, #48	@ 0x30
 8008e78:	220a      	movs	r2, #10
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7ff ff8c 	bl	8008d98 <__multadd>
 8008e80:	45a0      	cmp	r8, r4
 8008e82:	d1f5      	bne.n	8008e70 <__s2b+0x4c>
 8008e84:	f1a5 0408 	sub.w	r4, r5, #8
 8008e88:	444c      	add	r4, r9
 8008e8a:	1b2d      	subs	r5, r5, r4
 8008e8c:	1963      	adds	r3, r4, r5
 8008e8e:	42bb      	cmp	r3, r7
 8008e90:	db04      	blt.n	8008e9c <__s2b+0x78>
 8008e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e96:	340a      	adds	r4, #10
 8008e98:	2509      	movs	r5, #9
 8008e9a:	e7f6      	b.n	8008e8a <__s2b+0x66>
 8008e9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ea0:	4601      	mov	r1, r0
 8008ea2:	3b30      	subs	r3, #48	@ 0x30
 8008ea4:	220a      	movs	r2, #10
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ff76 	bl	8008d98 <__multadd>
 8008eac:	e7ee      	b.n	8008e8c <__s2b+0x68>
 8008eae:	bf00      	nop
 8008eb0:	0800cf69 	.word	0x0800cf69
 8008eb4:	0800cf7a 	.word	0x0800cf7a

08008eb8 <__hi0bits>:
 8008eb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	bf36      	itet	cc
 8008ec0:	0403      	lslcc	r3, r0, #16
 8008ec2:	2000      	movcs	r0, #0
 8008ec4:	2010      	movcc	r0, #16
 8008ec6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008eca:	bf3c      	itt	cc
 8008ecc:	021b      	lslcc	r3, r3, #8
 8008ece:	3008      	addcc	r0, #8
 8008ed0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ed4:	bf3c      	itt	cc
 8008ed6:	011b      	lslcc	r3, r3, #4
 8008ed8:	3004      	addcc	r0, #4
 8008eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ede:	bf3c      	itt	cc
 8008ee0:	009b      	lslcc	r3, r3, #2
 8008ee2:	3002      	addcc	r0, #2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	db05      	blt.n	8008ef4 <__hi0bits+0x3c>
 8008ee8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008eec:	f100 0001 	add.w	r0, r0, #1
 8008ef0:	bf08      	it	eq
 8008ef2:	2020      	moveq	r0, #32
 8008ef4:	4770      	bx	lr

08008ef6 <__lo0bits>:
 8008ef6:	6803      	ldr	r3, [r0, #0]
 8008ef8:	4602      	mov	r2, r0
 8008efa:	f013 0007 	ands.w	r0, r3, #7
 8008efe:	d00b      	beq.n	8008f18 <__lo0bits+0x22>
 8008f00:	07d9      	lsls	r1, r3, #31
 8008f02:	d421      	bmi.n	8008f48 <__lo0bits+0x52>
 8008f04:	0798      	lsls	r0, r3, #30
 8008f06:	bf49      	itett	mi
 8008f08:	085b      	lsrmi	r3, r3, #1
 8008f0a:	089b      	lsrpl	r3, r3, #2
 8008f0c:	2001      	movmi	r0, #1
 8008f0e:	6013      	strmi	r3, [r2, #0]
 8008f10:	bf5c      	itt	pl
 8008f12:	6013      	strpl	r3, [r2, #0]
 8008f14:	2002      	movpl	r0, #2
 8008f16:	4770      	bx	lr
 8008f18:	b299      	uxth	r1, r3
 8008f1a:	b909      	cbnz	r1, 8008f20 <__lo0bits+0x2a>
 8008f1c:	0c1b      	lsrs	r3, r3, #16
 8008f1e:	2010      	movs	r0, #16
 8008f20:	b2d9      	uxtb	r1, r3
 8008f22:	b909      	cbnz	r1, 8008f28 <__lo0bits+0x32>
 8008f24:	3008      	adds	r0, #8
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	0719      	lsls	r1, r3, #28
 8008f2a:	bf04      	itt	eq
 8008f2c:	091b      	lsreq	r3, r3, #4
 8008f2e:	3004      	addeq	r0, #4
 8008f30:	0799      	lsls	r1, r3, #30
 8008f32:	bf04      	itt	eq
 8008f34:	089b      	lsreq	r3, r3, #2
 8008f36:	3002      	addeq	r0, #2
 8008f38:	07d9      	lsls	r1, r3, #31
 8008f3a:	d403      	bmi.n	8008f44 <__lo0bits+0x4e>
 8008f3c:	085b      	lsrs	r3, r3, #1
 8008f3e:	f100 0001 	add.w	r0, r0, #1
 8008f42:	d003      	beq.n	8008f4c <__lo0bits+0x56>
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	4770      	bx	lr
 8008f48:	2000      	movs	r0, #0
 8008f4a:	4770      	bx	lr
 8008f4c:	2020      	movs	r0, #32
 8008f4e:	4770      	bx	lr

08008f50 <__i2b>:
 8008f50:	b510      	push	{r4, lr}
 8008f52:	460c      	mov	r4, r1
 8008f54:	2101      	movs	r1, #1
 8008f56:	f7ff febd 	bl	8008cd4 <_Balloc>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	b928      	cbnz	r0, 8008f6a <__i2b+0x1a>
 8008f5e:	4b05      	ldr	r3, [pc, #20]	@ (8008f74 <__i2b+0x24>)
 8008f60:	4805      	ldr	r0, [pc, #20]	@ (8008f78 <__i2b+0x28>)
 8008f62:	f240 1145 	movw	r1, #325	@ 0x145
 8008f66:	f001 fdc3 	bl	800aaf0 <__assert_func>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	6144      	str	r4, [r0, #20]
 8008f6e:	6103      	str	r3, [r0, #16]
 8008f70:	bd10      	pop	{r4, pc}
 8008f72:	bf00      	nop
 8008f74:	0800cf69 	.word	0x0800cf69
 8008f78:	0800cf7a 	.word	0x0800cf7a

08008f7c <__multiply>:
 8008f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	4614      	mov	r4, r2
 8008f82:	690a      	ldr	r2, [r1, #16]
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	bfa8      	it	ge
 8008f8a:	4623      	movge	r3, r4
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	bfa4      	itt	ge
 8008f90:	460c      	movge	r4, r1
 8008f92:	461f      	movge	r7, r3
 8008f94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008f9c:	68a3      	ldr	r3, [r4, #8]
 8008f9e:	6861      	ldr	r1, [r4, #4]
 8008fa0:	eb0a 0609 	add.w	r6, sl, r9
 8008fa4:	42b3      	cmp	r3, r6
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	bfb8      	it	lt
 8008faa:	3101      	addlt	r1, #1
 8008fac:	f7ff fe92 	bl	8008cd4 <_Balloc>
 8008fb0:	b930      	cbnz	r0, 8008fc0 <__multiply+0x44>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	4b44      	ldr	r3, [pc, #272]	@ (80090c8 <__multiply+0x14c>)
 8008fb6:	4845      	ldr	r0, [pc, #276]	@ (80090cc <__multiply+0x150>)
 8008fb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008fbc:	f001 fd98 	bl	800aaf0 <__assert_func>
 8008fc0:	f100 0514 	add.w	r5, r0, #20
 8008fc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fc8:	462b      	mov	r3, r5
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4543      	cmp	r3, r8
 8008fce:	d321      	bcc.n	8009014 <__multiply+0x98>
 8008fd0:	f107 0114 	add.w	r1, r7, #20
 8008fd4:	f104 0214 	add.w	r2, r4, #20
 8008fd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008fdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008fe0:	9302      	str	r3, [sp, #8]
 8008fe2:	1b13      	subs	r3, r2, r4
 8008fe4:	3b15      	subs	r3, #21
 8008fe6:	f023 0303 	bic.w	r3, r3, #3
 8008fea:	3304      	adds	r3, #4
 8008fec:	f104 0715 	add.w	r7, r4, #21
 8008ff0:	42ba      	cmp	r2, r7
 8008ff2:	bf38      	it	cc
 8008ff4:	2304      	movcc	r3, #4
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	9103      	str	r1, [sp, #12]
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	d80c      	bhi.n	800901a <__multiply+0x9e>
 8009000:	2e00      	cmp	r6, #0
 8009002:	dd03      	ble.n	800900c <__multiply+0x90>
 8009004:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009008:	2b00      	cmp	r3, #0
 800900a:	d05b      	beq.n	80090c4 <__multiply+0x148>
 800900c:	6106      	str	r6, [r0, #16]
 800900e:	b005      	add	sp, #20
 8009010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009014:	f843 2b04 	str.w	r2, [r3], #4
 8009018:	e7d8      	b.n	8008fcc <__multiply+0x50>
 800901a:	f8b1 a000 	ldrh.w	sl, [r1]
 800901e:	f1ba 0f00 	cmp.w	sl, #0
 8009022:	d024      	beq.n	800906e <__multiply+0xf2>
 8009024:	f104 0e14 	add.w	lr, r4, #20
 8009028:	46a9      	mov	r9, r5
 800902a:	f04f 0c00 	mov.w	ip, #0
 800902e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009032:	f8d9 3000 	ldr.w	r3, [r9]
 8009036:	fa1f fb87 	uxth.w	fp, r7
 800903a:	b29b      	uxth	r3, r3
 800903c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009040:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009044:	f8d9 7000 	ldr.w	r7, [r9]
 8009048:	4463      	add	r3, ip
 800904a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800904e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009052:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009056:	b29b      	uxth	r3, r3
 8009058:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800905c:	4572      	cmp	r2, lr
 800905e:	f849 3b04 	str.w	r3, [r9], #4
 8009062:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009066:	d8e2      	bhi.n	800902e <__multiply+0xb2>
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	f845 c003 	str.w	ip, [r5, r3]
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009074:	3104      	adds	r1, #4
 8009076:	f1b9 0f00 	cmp.w	r9, #0
 800907a:	d021      	beq.n	80090c0 <__multiply+0x144>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	f104 0c14 	add.w	ip, r4, #20
 8009082:	46ae      	mov	lr, r5
 8009084:	f04f 0a00 	mov.w	sl, #0
 8009088:	f8bc b000 	ldrh.w	fp, [ip]
 800908c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009090:	fb09 770b 	mla	r7, r9, fp, r7
 8009094:	4457      	add	r7, sl
 8009096:	b29b      	uxth	r3, r3
 8009098:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800909c:	f84e 3b04 	str.w	r3, [lr], #4
 80090a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090a8:	f8be 3000 	ldrh.w	r3, [lr]
 80090ac:	fb09 330a 	mla	r3, r9, sl, r3
 80090b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80090b4:	4562      	cmp	r2, ip
 80090b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090ba:	d8e5      	bhi.n	8009088 <__multiply+0x10c>
 80090bc:	9f01      	ldr	r7, [sp, #4]
 80090be:	51eb      	str	r3, [r5, r7]
 80090c0:	3504      	adds	r5, #4
 80090c2:	e799      	b.n	8008ff8 <__multiply+0x7c>
 80090c4:	3e01      	subs	r6, #1
 80090c6:	e79b      	b.n	8009000 <__multiply+0x84>
 80090c8:	0800cf69 	.word	0x0800cf69
 80090cc:	0800cf7a 	.word	0x0800cf7a

080090d0 <__pow5mult>:
 80090d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d4:	4615      	mov	r5, r2
 80090d6:	f012 0203 	ands.w	r2, r2, #3
 80090da:	4607      	mov	r7, r0
 80090dc:	460e      	mov	r6, r1
 80090de:	d007      	beq.n	80090f0 <__pow5mult+0x20>
 80090e0:	4c25      	ldr	r4, [pc, #148]	@ (8009178 <__pow5mult+0xa8>)
 80090e2:	3a01      	subs	r2, #1
 80090e4:	2300      	movs	r3, #0
 80090e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090ea:	f7ff fe55 	bl	8008d98 <__multadd>
 80090ee:	4606      	mov	r6, r0
 80090f0:	10ad      	asrs	r5, r5, #2
 80090f2:	d03d      	beq.n	8009170 <__pow5mult+0xa0>
 80090f4:	69fc      	ldr	r4, [r7, #28]
 80090f6:	b97c      	cbnz	r4, 8009118 <__pow5mult+0x48>
 80090f8:	2010      	movs	r0, #16
 80090fa:	f7ff fd35 	bl	8008b68 <malloc>
 80090fe:	4602      	mov	r2, r0
 8009100:	61f8      	str	r0, [r7, #28]
 8009102:	b928      	cbnz	r0, 8009110 <__pow5mult+0x40>
 8009104:	4b1d      	ldr	r3, [pc, #116]	@ (800917c <__pow5mult+0xac>)
 8009106:	481e      	ldr	r0, [pc, #120]	@ (8009180 <__pow5mult+0xb0>)
 8009108:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800910c:	f001 fcf0 	bl	800aaf0 <__assert_func>
 8009110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009114:	6004      	str	r4, [r0, #0]
 8009116:	60c4      	str	r4, [r0, #12]
 8009118:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800911c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009120:	b94c      	cbnz	r4, 8009136 <__pow5mult+0x66>
 8009122:	f240 2171 	movw	r1, #625	@ 0x271
 8009126:	4638      	mov	r0, r7
 8009128:	f7ff ff12 	bl	8008f50 <__i2b>
 800912c:	2300      	movs	r3, #0
 800912e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009132:	4604      	mov	r4, r0
 8009134:	6003      	str	r3, [r0, #0]
 8009136:	f04f 0900 	mov.w	r9, #0
 800913a:	07eb      	lsls	r3, r5, #31
 800913c:	d50a      	bpl.n	8009154 <__pow5mult+0x84>
 800913e:	4631      	mov	r1, r6
 8009140:	4622      	mov	r2, r4
 8009142:	4638      	mov	r0, r7
 8009144:	f7ff ff1a 	bl	8008f7c <__multiply>
 8009148:	4631      	mov	r1, r6
 800914a:	4680      	mov	r8, r0
 800914c:	4638      	mov	r0, r7
 800914e:	f7ff fe01 	bl	8008d54 <_Bfree>
 8009152:	4646      	mov	r6, r8
 8009154:	106d      	asrs	r5, r5, #1
 8009156:	d00b      	beq.n	8009170 <__pow5mult+0xa0>
 8009158:	6820      	ldr	r0, [r4, #0]
 800915a:	b938      	cbnz	r0, 800916c <__pow5mult+0x9c>
 800915c:	4622      	mov	r2, r4
 800915e:	4621      	mov	r1, r4
 8009160:	4638      	mov	r0, r7
 8009162:	f7ff ff0b 	bl	8008f7c <__multiply>
 8009166:	6020      	str	r0, [r4, #0]
 8009168:	f8c0 9000 	str.w	r9, [r0]
 800916c:	4604      	mov	r4, r0
 800916e:	e7e4      	b.n	800913a <__pow5mult+0x6a>
 8009170:	4630      	mov	r0, r6
 8009172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009176:	bf00      	nop
 8009178:	0800cfd4 	.word	0x0800cfd4
 800917c:	0800cefa 	.word	0x0800cefa
 8009180:	0800cf7a 	.word	0x0800cf7a

08009184 <__lshift>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	460c      	mov	r4, r1
 800918a:	6849      	ldr	r1, [r1, #4]
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009192:	68a3      	ldr	r3, [r4, #8]
 8009194:	4607      	mov	r7, r0
 8009196:	4691      	mov	r9, r2
 8009198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800919c:	f108 0601 	add.w	r6, r8, #1
 80091a0:	42b3      	cmp	r3, r6
 80091a2:	db0b      	blt.n	80091bc <__lshift+0x38>
 80091a4:	4638      	mov	r0, r7
 80091a6:	f7ff fd95 	bl	8008cd4 <_Balloc>
 80091aa:	4605      	mov	r5, r0
 80091ac:	b948      	cbnz	r0, 80091c2 <__lshift+0x3e>
 80091ae:	4602      	mov	r2, r0
 80091b0:	4b28      	ldr	r3, [pc, #160]	@ (8009254 <__lshift+0xd0>)
 80091b2:	4829      	ldr	r0, [pc, #164]	@ (8009258 <__lshift+0xd4>)
 80091b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80091b8:	f001 fc9a 	bl	800aaf0 <__assert_func>
 80091bc:	3101      	adds	r1, #1
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	e7ee      	b.n	80091a0 <__lshift+0x1c>
 80091c2:	2300      	movs	r3, #0
 80091c4:	f100 0114 	add.w	r1, r0, #20
 80091c8:	f100 0210 	add.w	r2, r0, #16
 80091cc:	4618      	mov	r0, r3
 80091ce:	4553      	cmp	r3, sl
 80091d0:	db33      	blt.n	800923a <__lshift+0xb6>
 80091d2:	6920      	ldr	r0, [r4, #16]
 80091d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091d8:	f104 0314 	add.w	r3, r4, #20
 80091dc:	f019 091f 	ands.w	r9, r9, #31
 80091e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091e8:	d02b      	beq.n	8009242 <__lshift+0xbe>
 80091ea:	f1c9 0e20 	rsb	lr, r9, #32
 80091ee:	468a      	mov	sl, r1
 80091f0:	2200      	movs	r2, #0
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	fa00 f009 	lsl.w	r0, r0, r9
 80091f8:	4310      	orrs	r0, r2
 80091fa:	f84a 0b04 	str.w	r0, [sl], #4
 80091fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009202:	459c      	cmp	ip, r3
 8009204:	fa22 f20e 	lsr.w	r2, r2, lr
 8009208:	d8f3      	bhi.n	80091f2 <__lshift+0x6e>
 800920a:	ebac 0304 	sub.w	r3, ip, r4
 800920e:	3b15      	subs	r3, #21
 8009210:	f023 0303 	bic.w	r3, r3, #3
 8009214:	3304      	adds	r3, #4
 8009216:	f104 0015 	add.w	r0, r4, #21
 800921a:	4584      	cmp	ip, r0
 800921c:	bf38      	it	cc
 800921e:	2304      	movcc	r3, #4
 8009220:	50ca      	str	r2, [r1, r3]
 8009222:	b10a      	cbz	r2, 8009228 <__lshift+0xa4>
 8009224:	f108 0602 	add.w	r6, r8, #2
 8009228:	3e01      	subs	r6, #1
 800922a:	4638      	mov	r0, r7
 800922c:	612e      	str	r6, [r5, #16]
 800922e:	4621      	mov	r1, r4
 8009230:	f7ff fd90 	bl	8008d54 <_Bfree>
 8009234:	4628      	mov	r0, r5
 8009236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923a:	f842 0f04 	str.w	r0, [r2, #4]!
 800923e:	3301      	adds	r3, #1
 8009240:	e7c5      	b.n	80091ce <__lshift+0x4a>
 8009242:	3904      	subs	r1, #4
 8009244:	f853 2b04 	ldr.w	r2, [r3], #4
 8009248:	f841 2f04 	str.w	r2, [r1, #4]!
 800924c:	459c      	cmp	ip, r3
 800924e:	d8f9      	bhi.n	8009244 <__lshift+0xc0>
 8009250:	e7ea      	b.n	8009228 <__lshift+0xa4>
 8009252:	bf00      	nop
 8009254:	0800cf69 	.word	0x0800cf69
 8009258:	0800cf7a 	.word	0x0800cf7a

0800925c <__mcmp>:
 800925c:	690a      	ldr	r2, [r1, #16]
 800925e:	4603      	mov	r3, r0
 8009260:	6900      	ldr	r0, [r0, #16]
 8009262:	1a80      	subs	r0, r0, r2
 8009264:	b530      	push	{r4, r5, lr}
 8009266:	d10e      	bne.n	8009286 <__mcmp+0x2a>
 8009268:	3314      	adds	r3, #20
 800926a:	3114      	adds	r1, #20
 800926c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800927c:	4295      	cmp	r5, r2
 800927e:	d003      	beq.n	8009288 <__mcmp+0x2c>
 8009280:	d205      	bcs.n	800928e <__mcmp+0x32>
 8009282:	f04f 30ff 	mov.w	r0, #4294967295
 8009286:	bd30      	pop	{r4, r5, pc}
 8009288:	42a3      	cmp	r3, r4
 800928a:	d3f3      	bcc.n	8009274 <__mcmp+0x18>
 800928c:	e7fb      	b.n	8009286 <__mcmp+0x2a>
 800928e:	2001      	movs	r0, #1
 8009290:	e7f9      	b.n	8009286 <__mcmp+0x2a>
	...

08009294 <__mdiff>:
 8009294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	4689      	mov	r9, r1
 800929a:	4606      	mov	r6, r0
 800929c:	4611      	mov	r1, r2
 800929e:	4648      	mov	r0, r9
 80092a0:	4614      	mov	r4, r2
 80092a2:	f7ff ffdb 	bl	800925c <__mcmp>
 80092a6:	1e05      	subs	r5, r0, #0
 80092a8:	d112      	bne.n	80092d0 <__mdiff+0x3c>
 80092aa:	4629      	mov	r1, r5
 80092ac:	4630      	mov	r0, r6
 80092ae:	f7ff fd11 	bl	8008cd4 <_Balloc>
 80092b2:	4602      	mov	r2, r0
 80092b4:	b928      	cbnz	r0, 80092c2 <__mdiff+0x2e>
 80092b6:	4b3f      	ldr	r3, [pc, #252]	@ (80093b4 <__mdiff+0x120>)
 80092b8:	f240 2137 	movw	r1, #567	@ 0x237
 80092bc:	483e      	ldr	r0, [pc, #248]	@ (80093b8 <__mdiff+0x124>)
 80092be:	f001 fc17 	bl	800aaf0 <__assert_func>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092c8:	4610      	mov	r0, r2
 80092ca:	b003      	add	sp, #12
 80092cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d0:	bfbc      	itt	lt
 80092d2:	464b      	movlt	r3, r9
 80092d4:	46a1      	movlt	r9, r4
 80092d6:	4630      	mov	r0, r6
 80092d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80092dc:	bfba      	itte	lt
 80092de:	461c      	movlt	r4, r3
 80092e0:	2501      	movlt	r5, #1
 80092e2:	2500      	movge	r5, #0
 80092e4:	f7ff fcf6 	bl	8008cd4 <_Balloc>
 80092e8:	4602      	mov	r2, r0
 80092ea:	b918      	cbnz	r0, 80092f4 <__mdiff+0x60>
 80092ec:	4b31      	ldr	r3, [pc, #196]	@ (80093b4 <__mdiff+0x120>)
 80092ee:	f240 2145 	movw	r1, #581	@ 0x245
 80092f2:	e7e3      	b.n	80092bc <__mdiff+0x28>
 80092f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092f8:	6926      	ldr	r6, [r4, #16]
 80092fa:	60c5      	str	r5, [r0, #12]
 80092fc:	f109 0310 	add.w	r3, r9, #16
 8009300:	f109 0514 	add.w	r5, r9, #20
 8009304:	f104 0e14 	add.w	lr, r4, #20
 8009308:	f100 0b14 	add.w	fp, r0, #20
 800930c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009310:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	46d9      	mov	r9, fp
 8009318:	f04f 0c00 	mov.w	ip, #0
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009322:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	fa1f f38a 	uxth.w	r3, sl
 800932c:	4619      	mov	r1, r3
 800932e:	b283      	uxth	r3, r0
 8009330:	1acb      	subs	r3, r1, r3
 8009332:	0c00      	lsrs	r0, r0, #16
 8009334:	4463      	add	r3, ip
 8009336:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800933a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800933e:	b29b      	uxth	r3, r3
 8009340:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009344:	4576      	cmp	r6, lr
 8009346:	f849 3b04 	str.w	r3, [r9], #4
 800934a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800934e:	d8e5      	bhi.n	800931c <__mdiff+0x88>
 8009350:	1b33      	subs	r3, r6, r4
 8009352:	3b15      	subs	r3, #21
 8009354:	f023 0303 	bic.w	r3, r3, #3
 8009358:	3415      	adds	r4, #21
 800935a:	3304      	adds	r3, #4
 800935c:	42a6      	cmp	r6, r4
 800935e:	bf38      	it	cc
 8009360:	2304      	movcc	r3, #4
 8009362:	441d      	add	r5, r3
 8009364:	445b      	add	r3, fp
 8009366:	461e      	mov	r6, r3
 8009368:	462c      	mov	r4, r5
 800936a:	4544      	cmp	r4, r8
 800936c:	d30e      	bcc.n	800938c <__mdiff+0xf8>
 800936e:	f108 0103 	add.w	r1, r8, #3
 8009372:	1b49      	subs	r1, r1, r5
 8009374:	f021 0103 	bic.w	r1, r1, #3
 8009378:	3d03      	subs	r5, #3
 800937a:	45a8      	cmp	r8, r5
 800937c:	bf38      	it	cc
 800937e:	2100      	movcc	r1, #0
 8009380:	440b      	add	r3, r1
 8009382:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009386:	b191      	cbz	r1, 80093ae <__mdiff+0x11a>
 8009388:	6117      	str	r7, [r2, #16]
 800938a:	e79d      	b.n	80092c8 <__mdiff+0x34>
 800938c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009390:	46e6      	mov	lr, ip
 8009392:	0c08      	lsrs	r0, r1, #16
 8009394:	fa1c fc81 	uxtah	ip, ip, r1
 8009398:	4471      	add	r1, lr
 800939a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800939e:	b289      	uxth	r1, r1
 80093a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093a4:	f846 1b04 	str.w	r1, [r6], #4
 80093a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093ac:	e7dd      	b.n	800936a <__mdiff+0xd6>
 80093ae:	3f01      	subs	r7, #1
 80093b0:	e7e7      	b.n	8009382 <__mdiff+0xee>
 80093b2:	bf00      	nop
 80093b4:	0800cf69 	.word	0x0800cf69
 80093b8:	0800cf7a 	.word	0x0800cf7a

080093bc <__ulp>:
 80093bc:	b082      	sub	sp, #8
 80093be:	ed8d 0b00 	vstr	d0, [sp]
 80093c2:	9a01      	ldr	r2, [sp, #4]
 80093c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009404 <__ulp+0x48>)
 80093c6:	4013      	ands	r3, r2
 80093c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	dc08      	bgt.n	80093e2 <__ulp+0x26>
 80093d0:	425b      	negs	r3, r3
 80093d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80093d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80093da:	da04      	bge.n	80093e6 <__ulp+0x2a>
 80093dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80093e0:	4113      	asrs	r3, r2
 80093e2:	2200      	movs	r2, #0
 80093e4:	e008      	b.n	80093f8 <__ulp+0x3c>
 80093e6:	f1a2 0314 	sub.w	r3, r2, #20
 80093ea:	2b1e      	cmp	r3, #30
 80093ec:	bfda      	itte	le
 80093ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80093f2:	40da      	lsrle	r2, r3
 80093f4:	2201      	movgt	r2, #1
 80093f6:	2300      	movs	r3, #0
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	ec41 0b10 	vmov	d0, r0, r1
 8009400:	b002      	add	sp, #8
 8009402:	4770      	bx	lr
 8009404:	7ff00000 	.word	0x7ff00000

08009408 <__b2d>:
 8009408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940c:	6906      	ldr	r6, [r0, #16]
 800940e:	f100 0814 	add.w	r8, r0, #20
 8009412:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009416:	1f37      	subs	r7, r6, #4
 8009418:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800941c:	4610      	mov	r0, r2
 800941e:	f7ff fd4b 	bl	8008eb8 <__hi0bits>
 8009422:	f1c0 0320 	rsb	r3, r0, #32
 8009426:	280a      	cmp	r0, #10
 8009428:	600b      	str	r3, [r1, #0]
 800942a:	491b      	ldr	r1, [pc, #108]	@ (8009498 <__b2d+0x90>)
 800942c:	dc15      	bgt.n	800945a <__b2d+0x52>
 800942e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009432:	fa22 f30c 	lsr.w	r3, r2, ip
 8009436:	45b8      	cmp	r8, r7
 8009438:	ea43 0501 	orr.w	r5, r3, r1
 800943c:	bf34      	ite	cc
 800943e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009442:	2300      	movcs	r3, #0
 8009444:	3015      	adds	r0, #21
 8009446:	fa02 f000 	lsl.w	r0, r2, r0
 800944a:	fa23 f30c 	lsr.w	r3, r3, ip
 800944e:	4303      	orrs	r3, r0
 8009450:	461c      	mov	r4, r3
 8009452:	ec45 4b10 	vmov	d0, r4, r5
 8009456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945a:	45b8      	cmp	r8, r7
 800945c:	bf3a      	itte	cc
 800945e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009462:	f1a6 0708 	subcc.w	r7, r6, #8
 8009466:	2300      	movcs	r3, #0
 8009468:	380b      	subs	r0, #11
 800946a:	d012      	beq.n	8009492 <__b2d+0x8a>
 800946c:	f1c0 0120 	rsb	r1, r0, #32
 8009470:	fa23 f401 	lsr.w	r4, r3, r1
 8009474:	4082      	lsls	r2, r0
 8009476:	4322      	orrs	r2, r4
 8009478:	4547      	cmp	r7, r8
 800947a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800947e:	bf8c      	ite	hi
 8009480:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009484:	2200      	movls	r2, #0
 8009486:	4083      	lsls	r3, r0
 8009488:	40ca      	lsrs	r2, r1
 800948a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800948e:	4313      	orrs	r3, r2
 8009490:	e7de      	b.n	8009450 <__b2d+0x48>
 8009492:	ea42 0501 	orr.w	r5, r2, r1
 8009496:	e7db      	b.n	8009450 <__b2d+0x48>
 8009498:	3ff00000 	.word	0x3ff00000

0800949c <__d2b>:
 800949c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094a0:	460f      	mov	r7, r1
 80094a2:	2101      	movs	r1, #1
 80094a4:	ec59 8b10 	vmov	r8, r9, d0
 80094a8:	4616      	mov	r6, r2
 80094aa:	f7ff fc13 	bl	8008cd4 <_Balloc>
 80094ae:	4604      	mov	r4, r0
 80094b0:	b930      	cbnz	r0, 80094c0 <__d2b+0x24>
 80094b2:	4602      	mov	r2, r0
 80094b4:	4b23      	ldr	r3, [pc, #140]	@ (8009544 <__d2b+0xa8>)
 80094b6:	4824      	ldr	r0, [pc, #144]	@ (8009548 <__d2b+0xac>)
 80094b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80094bc:	f001 fb18 	bl	800aaf0 <__assert_func>
 80094c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094c8:	b10d      	cbz	r5, 80094ce <__d2b+0x32>
 80094ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	f1b8 0300 	subs.w	r3, r8, #0
 80094d4:	d023      	beq.n	800951e <__d2b+0x82>
 80094d6:	4668      	mov	r0, sp
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	f7ff fd0c 	bl	8008ef6 <__lo0bits>
 80094de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094e2:	b1d0      	cbz	r0, 800951a <__d2b+0x7e>
 80094e4:	f1c0 0320 	rsb	r3, r0, #32
 80094e8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ec:	430b      	orrs	r3, r1
 80094ee:	40c2      	lsrs	r2, r0
 80094f0:	6163      	str	r3, [r4, #20]
 80094f2:	9201      	str	r2, [sp, #4]
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	61a3      	str	r3, [r4, #24]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bf0c      	ite	eq
 80094fc:	2201      	moveq	r2, #1
 80094fe:	2202      	movne	r2, #2
 8009500:	6122      	str	r2, [r4, #16]
 8009502:	b1a5      	cbz	r5, 800952e <__d2b+0x92>
 8009504:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009508:	4405      	add	r5, r0
 800950a:	603d      	str	r5, [r7, #0]
 800950c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009510:	6030      	str	r0, [r6, #0]
 8009512:	4620      	mov	r0, r4
 8009514:	b003      	add	sp, #12
 8009516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800951a:	6161      	str	r1, [r4, #20]
 800951c:	e7ea      	b.n	80094f4 <__d2b+0x58>
 800951e:	a801      	add	r0, sp, #4
 8009520:	f7ff fce9 	bl	8008ef6 <__lo0bits>
 8009524:	9b01      	ldr	r3, [sp, #4]
 8009526:	6163      	str	r3, [r4, #20]
 8009528:	3020      	adds	r0, #32
 800952a:	2201      	movs	r2, #1
 800952c:	e7e8      	b.n	8009500 <__d2b+0x64>
 800952e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009532:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009536:	6038      	str	r0, [r7, #0]
 8009538:	6918      	ldr	r0, [r3, #16]
 800953a:	f7ff fcbd 	bl	8008eb8 <__hi0bits>
 800953e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009542:	e7e5      	b.n	8009510 <__d2b+0x74>
 8009544:	0800cf69 	.word	0x0800cf69
 8009548:	0800cf7a 	.word	0x0800cf7a

0800954c <__ratio>:
 800954c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009550:	4688      	mov	r8, r1
 8009552:	4669      	mov	r1, sp
 8009554:	4681      	mov	r9, r0
 8009556:	f7ff ff57 	bl	8009408 <__b2d>
 800955a:	a901      	add	r1, sp, #4
 800955c:	4640      	mov	r0, r8
 800955e:	ec55 4b10 	vmov	r4, r5, d0
 8009562:	f7ff ff51 	bl	8009408 <__b2d>
 8009566:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800956a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800956e:	1ad2      	subs	r2, r2, r3
 8009570:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009574:	1a5b      	subs	r3, r3, r1
 8009576:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800957a:	ec57 6b10 	vmov	r6, r7, d0
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfd6      	itet	le
 8009582:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009586:	462a      	movgt	r2, r5
 8009588:	463a      	movle	r2, r7
 800958a:	46ab      	mov	fp, r5
 800958c:	46a2      	mov	sl, r4
 800958e:	bfce      	itee	gt
 8009590:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009594:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009598:	ee00 3a90 	vmovle	s1, r3
 800959c:	ec4b ab17 	vmov	d7, sl, fp
 80095a0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80095a4:	b003      	add	sp, #12
 80095a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095aa <__copybits>:
 80095aa:	3901      	subs	r1, #1
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	1149      	asrs	r1, r1, #5
 80095b0:	6914      	ldr	r4, [r2, #16]
 80095b2:	3101      	adds	r1, #1
 80095b4:	f102 0314 	add.w	r3, r2, #20
 80095b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80095bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80095c0:	1f05      	subs	r5, r0, #4
 80095c2:	42a3      	cmp	r3, r4
 80095c4:	d30c      	bcc.n	80095e0 <__copybits+0x36>
 80095c6:	1aa3      	subs	r3, r4, r2
 80095c8:	3b11      	subs	r3, #17
 80095ca:	f023 0303 	bic.w	r3, r3, #3
 80095ce:	3211      	adds	r2, #17
 80095d0:	42a2      	cmp	r2, r4
 80095d2:	bf88      	it	hi
 80095d4:	2300      	movhi	r3, #0
 80095d6:	4418      	add	r0, r3
 80095d8:	2300      	movs	r3, #0
 80095da:	4288      	cmp	r0, r1
 80095dc:	d305      	bcc.n	80095ea <__copybits+0x40>
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80095e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80095e8:	e7eb      	b.n	80095c2 <__copybits+0x18>
 80095ea:	f840 3b04 	str.w	r3, [r0], #4
 80095ee:	e7f4      	b.n	80095da <__copybits+0x30>

080095f0 <__any_on>:
 80095f0:	f100 0214 	add.w	r2, r0, #20
 80095f4:	6900      	ldr	r0, [r0, #16]
 80095f6:	114b      	asrs	r3, r1, #5
 80095f8:	4298      	cmp	r0, r3
 80095fa:	b510      	push	{r4, lr}
 80095fc:	db11      	blt.n	8009622 <__any_on+0x32>
 80095fe:	dd0a      	ble.n	8009616 <__any_on+0x26>
 8009600:	f011 011f 	ands.w	r1, r1, #31
 8009604:	d007      	beq.n	8009616 <__any_on+0x26>
 8009606:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800960a:	fa24 f001 	lsr.w	r0, r4, r1
 800960e:	fa00 f101 	lsl.w	r1, r0, r1
 8009612:	428c      	cmp	r4, r1
 8009614:	d10b      	bne.n	800962e <__any_on+0x3e>
 8009616:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800961a:	4293      	cmp	r3, r2
 800961c:	d803      	bhi.n	8009626 <__any_on+0x36>
 800961e:	2000      	movs	r0, #0
 8009620:	bd10      	pop	{r4, pc}
 8009622:	4603      	mov	r3, r0
 8009624:	e7f7      	b.n	8009616 <__any_on+0x26>
 8009626:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800962a:	2900      	cmp	r1, #0
 800962c:	d0f5      	beq.n	800961a <__any_on+0x2a>
 800962e:	2001      	movs	r0, #1
 8009630:	e7f6      	b.n	8009620 <__any_on+0x30>

08009632 <sulp>:
 8009632:	b570      	push	{r4, r5, r6, lr}
 8009634:	4604      	mov	r4, r0
 8009636:	460d      	mov	r5, r1
 8009638:	4616      	mov	r6, r2
 800963a:	ec45 4b10 	vmov	d0, r4, r5
 800963e:	f7ff febd 	bl	80093bc <__ulp>
 8009642:	b17e      	cbz	r6, 8009664 <sulp+0x32>
 8009644:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009648:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800964c:	2b00      	cmp	r3, #0
 800964e:	dd09      	ble.n	8009664 <sulp+0x32>
 8009650:	051b      	lsls	r3, r3, #20
 8009652:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8009656:	2000      	movs	r0, #0
 8009658:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800965c:	ec41 0b17 	vmov	d7, r0, r1
 8009660:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009664:	bd70      	pop	{r4, r5, r6, pc}
	...

08009668 <_strtod_l>:
 8009668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	ed2d 8b0a 	vpush	{d8-d12}
 8009670:	b097      	sub	sp, #92	@ 0x5c
 8009672:	4688      	mov	r8, r1
 8009674:	920e      	str	r2, [sp, #56]	@ 0x38
 8009676:	2200      	movs	r2, #0
 8009678:	9212      	str	r2, [sp, #72]	@ 0x48
 800967a:	9005      	str	r0, [sp, #20]
 800967c:	f04f 0a00 	mov.w	sl, #0
 8009680:	f04f 0b00 	mov.w	fp, #0
 8009684:	460a      	mov	r2, r1
 8009686:	9211      	str	r2, [sp, #68]	@ 0x44
 8009688:	7811      	ldrb	r1, [r2, #0]
 800968a:	292b      	cmp	r1, #43	@ 0x2b
 800968c:	d04c      	beq.n	8009728 <_strtod_l+0xc0>
 800968e:	d839      	bhi.n	8009704 <_strtod_l+0x9c>
 8009690:	290d      	cmp	r1, #13
 8009692:	d833      	bhi.n	80096fc <_strtod_l+0x94>
 8009694:	2908      	cmp	r1, #8
 8009696:	d833      	bhi.n	8009700 <_strtod_l+0x98>
 8009698:	2900      	cmp	r1, #0
 800969a:	d03c      	beq.n	8009716 <_strtod_l+0xae>
 800969c:	2200      	movs	r2, #0
 800969e:	9208      	str	r2, [sp, #32]
 80096a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80096a2:	782a      	ldrb	r2, [r5, #0]
 80096a4:	2a30      	cmp	r2, #48	@ 0x30
 80096a6:	f040 80b5 	bne.w	8009814 <_strtod_l+0x1ac>
 80096aa:	786a      	ldrb	r2, [r5, #1]
 80096ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096b0:	2a58      	cmp	r2, #88	@ 0x58
 80096b2:	d170      	bne.n	8009796 <_strtod_l+0x12e>
 80096b4:	9302      	str	r3, [sp, #8]
 80096b6:	9b08      	ldr	r3, [sp, #32]
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	ab12      	add	r3, sp, #72	@ 0x48
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	4a8b      	ldr	r2, [pc, #556]	@ (80098ec <_strtod_l+0x284>)
 80096c0:	9805      	ldr	r0, [sp, #20]
 80096c2:	ab13      	add	r3, sp, #76	@ 0x4c
 80096c4:	a911      	add	r1, sp, #68	@ 0x44
 80096c6:	f001 faad 	bl	800ac24 <__gethex>
 80096ca:	f010 060f 	ands.w	r6, r0, #15
 80096ce:	4604      	mov	r4, r0
 80096d0:	d005      	beq.n	80096de <_strtod_l+0x76>
 80096d2:	2e06      	cmp	r6, #6
 80096d4:	d12a      	bne.n	800972c <_strtod_l+0xc4>
 80096d6:	3501      	adds	r5, #1
 80096d8:	2300      	movs	r3, #0
 80096da:	9511      	str	r5, [sp, #68]	@ 0x44
 80096dc:	9308      	str	r3, [sp, #32]
 80096de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f040 852f 	bne.w	800a144 <_strtod_l+0xadc>
 80096e6:	9b08      	ldr	r3, [sp, #32]
 80096e8:	ec4b ab10 	vmov	d0, sl, fp
 80096ec:	b1cb      	cbz	r3, 8009722 <_strtod_l+0xba>
 80096ee:	eeb1 0b40 	vneg.f64	d0, d0
 80096f2:	b017      	add	sp, #92	@ 0x5c
 80096f4:	ecbd 8b0a 	vpop	{d8-d12}
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	2920      	cmp	r1, #32
 80096fe:	d1cd      	bne.n	800969c <_strtod_l+0x34>
 8009700:	3201      	adds	r2, #1
 8009702:	e7c0      	b.n	8009686 <_strtod_l+0x1e>
 8009704:	292d      	cmp	r1, #45	@ 0x2d
 8009706:	d1c9      	bne.n	800969c <_strtod_l+0x34>
 8009708:	2101      	movs	r1, #1
 800970a:	9108      	str	r1, [sp, #32]
 800970c:	1c51      	adds	r1, r2, #1
 800970e:	9111      	str	r1, [sp, #68]	@ 0x44
 8009710:	7852      	ldrb	r2, [r2, #1]
 8009712:	2a00      	cmp	r2, #0
 8009714:	d1c4      	bne.n	80096a0 <_strtod_l+0x38>
 8009716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009718:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800971c:	2b00      	cmp	r3, #0
 800971e:	f040 850f 	bne.w	800a140 <_strtod_l+0xad8>
 8009722:	ec4b ab10 	vmov	d0, sl, fp
 8009726:	e7e4      	b.n	80096f2 <_strtod_l+0x8a>
 8009728:	2100      	movs	r1, #0
 800972a:	e7ee      	b.n	800970a <_strtod_l+0xa2>
 800972c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800972e:	b13a      	cbz	r2, 8009740 <_strtod_l+0xd8>
 8009730:	2135      	movs	r1, #53	@ 0x35
 8009732:	a814      	add	r0, sp, #80	@ 0x50
 8009734:	f7ff ff39 	bl	80095aa <__copybits>
 8009738:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800973a:	9805      	ldr	r0, [sp, #20]
 800973c:	f7ff fb0a 	bl	8008d54 <_Bfree>
 8009740:	1e73      	subs	r3, r6, #1
 8009742:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009744:	2b04      	cmp	r3, #4
 8009746:	d806      	bhi.n	8009756 <_strtod_l+0xee>
 8009748:	e8df f003 	tbb	[pc, r3]
 800974c:	201d0314 	.word	0x201d0314
 8009750:	14          	.byte	0x14
 8009751:	00          	.byte	0x00
 8009752:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8009756:	05e3      	lsls	r3, r4, #23
 8009758:	bf48      	it	mi
 800975a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800975e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009762:	0d1b      	lsrs	r3, r3, #20
 8009764:	051b      	lsls	r3, r3, #20
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1b9      	bne.n	80096de <_strtod_l+0x76>
 800976a:	f7fe fb9f 	bl	8007eac <__errno>
 800976e:	2322      	movs	r3, #34	@ 0x22
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	e7b4      	b.n	80096de <_strtod_l+0x76>
 8009774:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8009778:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800977c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009780:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009784:	e7e7      	b.n	8009756 <_strtod_l+0xee>
 8009786:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80098f4 <_strtod_l+0x28c>
 800978a:	e7e4      	b.n	8009756 <_strtod_l+0xee>
 800978c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009790:	f04f 3aff 	mov.w	sl, #4294967295
 8009794:	e7df      	b.n	8009756 <_strtod_l+0xee>
 8009796:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	9211      	str	r2, [sp, #68]	@ 0x44
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b30      	cmp	r3, #48	@ 0x30
 80097a0:	d0f9      	beq.n	8009796 <_strtod_l+0x12e>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d09b      	beq.n	80096de <_strtod_l+0x76>
 80097a6:	2301      	movs	r3, #1
 80097a8:	2600      	movs	r6, #0
 80097aa:	9307      	str	r3, [sp, #28]
 80097ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80097b0:	46b1      	mov	r9, r6
 80097b2:	4635      	mov	r5, r6
 80097b4:	220a      	movs	r2, #10
 80097b6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80097b8:	7804      	ldrb	r4, [r0, #0]
 80097ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80097be:	b2d9      	uxtb	r1, r3
 80097c0:	2909      	cmp	r1, #9
 80097c2:	d929      	bls.n	8009818 <_strtod_l+0x1b0>
 80097c4:	494a      	ldr	r1, [pc, #296]	@ (80098f0 <_strtod_l+0x288>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	f001 f95a 	bl	800aa80 <strncmp>
 80097cc:	b378      	cbz	r0, 800982e <_strtod_l+0x1c6>
 80097ce:	2000      	movs	r0, #0
 80097d0:	4622      	mov	r2, r4
 80097d2:	462b      	mov	r3, r5
 80097d4:	4607      	mov	r7, r0
 80097d6:	9006      	str	r0, [sp, #24]
 80097d8:	2a65      	cmp	r2, #101	@ 0x65
 80097da:	d001      	beq.n	80097e0 <_strtod_l+0x178>
 80097dc:	2a45      	cmp	r2, #69	@ 0x45
 80097de:	d117      	bne.n	8009810 <_strtod_l+0x1a8>
 80097e0:	b91b      	cbnz	r3, 80097ea <_strtod_l+0x182>
 80097e2:	9b07      	ldr	r3, [sp, #28]
 80097e4:	4303      	orrs	r3, r0
 80097e6:	d096      	beq.n	8009716 <_strtod_l+0xae>
 80097e8:	2300      	movs	r3, #0
 80097ea:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80097ee:	f108 0201 	add.w	r2, r8, #1
 80097f2:	9211      	str	r2, [sp, #68]	@ 0x44
 80097f4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80097f8:	2a2b      	cmp	r2, #43	@ 0x2b
 80097fa:	d06b      	beq.n	80098d4 <_strtod_l+0x26c>
 80097fc:	2a2d      	cmp	r2, #45	@ 0x2d
 80097fe:	d071      	beq.n	80098e4 <_strtod_l+0x27c>
 8009800:	f04f 0e00 	mov.w	lr, #0
 8009804:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8009808:	2c09      	cmp	r4, #9
 800980a:	d979      	bls.n	8009900 <_strtod_l+0x298>
 800980c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009810:	2400      	movs	r4, #0
 8009812:	e094      	b.n	800993e <_strtod_l+0x2d6>
 8009814:	2300      	movs	r3, #0
 8009816:	e7c7      	b.n	80097a8 <_strtod_l+0x140>
 8009818:	2d08      	cmp	r5, #8
 800981a:	f100 0001 	add.w	r0, r0, #1
 800981e:	bfd4      	ite	le
 8009820:	fb02 3909 	mlale	r9, r2, r9, r3
 8009824:	fb02 3606 	mlagt	r6, r2, r6, r3
 8009828:	3501      	adds	r5, #1
 800982a:	9011      	str	r0, [sp, #68]	@ 0x44
 800982c:	e7c3      	b.n	80097b6 <_strtod_l+0x14e>
 800982e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	9211      	str	r2, [sp, #68]	@ 0x44
 8009834:	785a      	ldrb	r2, [r3, #1]
 8009836:	b375      	cbz	r5, 8009896 <_strtod_l+0x22e>
 8009838:	4607      	mov	r7, r0
 800983a:	462b      	mov	r3, r5
 800983c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009840:	2909      	cmp	r1, #9
 8009842:	d913      	bls.n	800986c <_strtod_l+0x204>
 8009844:	2101      	movs	r1, #1
 8009846:	9106      	str	r1, [sp, #24]
 8009848:	e7c6      	b.n	80097d8 <_strtod_l+0x170>
 800984a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009850:	785a      	ldrb	r2, [r3, #1]
 8009852:	3001      	adds	r0, #1
 8009854:	2a30      	cmp	r2, #48	@ 0x30
 8009856:	d0f8      	beq.n	800984a <_strtod_l+0x1e2>
 8009858:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800985c:	2b08      	cmp	r3, #8
 800985e:	f200 8476 	bhi.w	800a14e <_strtod_l+0xae6>
 8009862:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009864:	930a      	str	r3, [sp, #40]	@ 0x28
 8009866:	4607      	mov	r7, r0
 8009868:	2000      	movs	r0, #0
 800986a:	4603      	mov	r3, r0
 800986c:	3a30      	subs	r2, #48	@ 0x30
 800986e:	f100 0101 	add.w	r1, r0, #1
 8009872:	d023      	beq.n	80098bc <_strtod_l+0x254>
 8009874:	440f      	add	r7, r1
 8009876:	eb00 0c03 	add.w	ip, r0, r3
 800987a:	4619      	mov	r1, r3
 800987c:	240a      	movs	r4, #10
 800987e:	4561      	cmp	r1, ip
 8009880:	d10b      	bne.n	800989a <_strtod_l+0x232>
 8009882:	1c5c      	adds	r4, r3, #1
 8009884:	4403      	add	r3, r0
 8009886:	2b08      	cmp	r3, #8
 8009888:	4404      	add	r4, r0
 800988a:	dc11      	bgt.n	80098b0 <_strtod_l+0x248>
 800988c:	230a      	movs	r3, #10
 800988e:	fb03 2909 	mla	r9, r3, r9, r2
 8009892:	2100      	movs	r1, #0
 8009894:	e013      	b.n	80098be <_strtod_l+0x256>
 8009896:	4628      	mov	r0, r5
 8009898:	e7dc      	b.n	8009854 <_strtod_l+0x1ec>
 800989a:	2908      	cmp	r1, #8
 800989c:	f101 0101 	add.w	r1, r1, #1
 80098a0:	dc02      	bgt.n	80098a8 <_strtod_l+0x240>
 80098a2:	fb04 f909 	mul.w	r9, r4, r9
 80098a6:	e7ea      	b.n	800987e <_strtod_l+0x216>
 80098a8:	2910      	cmp	r1, #16
 80098aa:	bfd8      	it	le
 80098ac:	4366      	mulle	r6, r4
 80098ae:	e7e6      	b.n	800987e <_strtod_l+0x216>
 80098b0:	2b0f      	cmp	r3, #15
 80098b2:	dcee      	bgt.n	8009892 <_strtod_l+0x22a>
 80098b4:	230a      	movs	r3, #10
 80098b6:	fb03 2606 	mla	r6, r3, r6, r2
 80098ba:	e7ea      	b.n	8009892 <_strtod_l+0x22a>
 80098bc:	461c      	mov	r4, r3
 80098be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	9211      	str	r2, [sp, #68]	@ 0x44
 80098c4:	785a      	ldrb	r2, [r3, #1]
 80098c6:	4608      	mov	r0, r1
 80098c8:	4623      	mov	r3, r4
 80098ca:	e7b7      	b.n	800983c <_strtod_l+0x1d4>
 80098cc:	2301      	movs	r3, #1
 80098ce:	2700      	movs	r7, #0
 80098d0:	9306      	str	r3, [sp, #24]
 80098d2:	e786      	b.n	80097e2 <_strtod_l+0x17a>
 80098d4:	f04f 0e00 	mov.w	lr, #0
 80098d8:	f108 0202 	add.w	r2, r8, #2
 80098dc:	9211      	str	r2, [sp, #68]	@ 0x44
 80098de:	f898 2002 	ldrb.w	r2, [r8, #2]
 80098e2:	e78f      	b.n	8009804 <_strtod_l+0x19c>
 80098e4:	f04f 0e01 	mov.w	lr, #1
 80098e8:	e7f6      	b.n	80098d8 <_strtod_l+0x270>
 80098ea:	bf00      	nop
 80098ec:	0800d0e8 	.word	0x0800d0e8
 80098f0:	0800d0d0 	.word	0x0800d0d0
 80098f4:	7ff00000 	.word	0x7ff00000
 80098f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80098fa:	1c54      	adds	r4, r2, #1
 80098fc:	9411      	str	r4, [sp, #68]	@ 0x44
 80098fe:	7852      	ldrb	r2, [r2, #1]
 8009900:	2a30      	cmp	r2, #48	@ 0x30
 8009902:	d0f9      	beq.n	80098f8 <_strtod_l+0x290>
 8009904:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8009908:	2c08      	cmp	r4, #8
 800990a:	d881      	bhi.n	8009810 <_strtod_l+0x1a8>
 800990c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8009910:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009912:	9209      	str	r2, [sp, #36]	@ 0x24
 8009914:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009916:	1c51      	adds	r1, r2, #1
 8009918:	9111      	str	r1, [sp, #68]	@ 0x44
 800991a:	7852      	ldrb	r2, [r2, #1]
 800991c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8009920:	2c09      	cmp	r4, #9
 8009922:	d938      	bls.n	8009996 <_strtod_l+0x32e>
 8009924:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8009926:	1b0c      	subs	r4, r1, r4
 8009928:	2c08      	cmp	r4, #8
 800992a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800992e:	dc02      	bgt.n	8009936 <_strtod_l+0x2ce>
 8009930:	4564      	cmp	r4, ip
 8009932:	bfa8      	it	ge
 8009934:	4664      	movge	r4, ip
 8009936:	f1be 0f00 	cmp.w	lr, #0
 800993a:	d000      	beq.n	800993e <_strtod_l+0x2d6>
 800993c:	4264      	negs	r4, r4
 800993e:	2b00      	cmp	r3, #0
 8009940:	d14e      	bne.n	80099e0 <_strtod_l+0x378>
 8009942:	9b07      	ldr	r3, [sp, #28]
 8009944:	4318      	orrs	r0, r3
 8009946:	f47f aeca 	bne.w	80096de <_strtod_l+0x76>
 800994a:	9b06      	ldr	r3, [sp, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f47f aee2 	bne.w	8009716 <_strtod_l+0xae>
 8009952:	2a69      	cmp	r2, #105	@ 0x69
 8009954:	d027      	beq.n	80099a6 <_strtod_l+0x33e>
 8009956:	dc24      	bgt.n	80099a2 <_strtod_l+0x33a>
 8009958:	2a49      	cmp	r2, #73	@ 0x49
 800995a:	d024      	beq.n	80099a6 <_strtod_l+0x33e>
 800995c:	2a4e      	cmp	r2, #78	@ 0x4e
 800995e:	f47f aeda 	bne.w	8009716 <_strtod_l+0xae>
 8009962:	4997      	ldr	r1, [pc, #604]	@ (8009bc0 <_strtod_l+0x558>)
 8009964:	a811      	add	r0, sp, #68	@ 0x44
 8009966:	f001 fb7f 	bl	800b068 <__match>
 800996a:	2800      	cmp	r0, #0
 800996c:	f43f aed3 	beq.w	8009716 <_strtod_l+0xae>
 8009970:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b28      	cmp	r3, #40	@ 0x28
 8009976:	d12d      	bne.n	80099d4 <_strtod_l+0x36c>
 8009978:	4992      	ldr	r1, [pc, #584]	@ (8009bc4 <_strtod_l+0x55c>)
 800997a:	aa14      	add	r2, sp, #80	@ 0x50
 800997c:	a811      	add	r0, sp, #68	@ 0x44
 800997e:	f001 fb87 	bl	800b090 <__hexnan>
 8009982:	2805      	cmp	r0, #5
 8009984:	d126      	bne.n	80099d4 <_strtod_l+0x36c>
 8009986:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009988:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800998c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009990:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009994:	e6a3      	b.n	80096de <_strtod_l+0x76>
 8009996:	240a      	movs	r4, #10
 8009998:	fb04 2c0c 	mla	ip, r4, ip, r2
 800999c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80099a0:	e7b8      	b.n	8009914 <_strtod_l+0x2ac>
 80099a2:	2a6e      	cmp	r2, #110	@ 0x6e
 80099a4:	e7db      	b.n	800995e <_strtod_l+0x2f6>
 80099a6:	4988      	ldr	r1, [pc, #544]	@ (8009bc8 <_strtod_l+0x560>)
 80099a8:	a811      	add	r0, sp, #68	@ 0x44
 80099aa:	f001 fb5d 	bl	800b068 <__match>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	f43f aeb1 	beq.w	8009716 <_strtod_l+0xae>
 80099b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099b6:	4985      	ldr	r1, [pc, #532]	@ (8009bcc <_strtod_l+0x564>)
 80099b8:	3b01      	subs	r3, #1
 80099ba:	a811      	add	r0, sp, #68	@ 0x44
 80099bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80099be:	f001 fb53 	bl	800b068 <__match>
 80099c2:	b910      	cbnz	r0, 80099ca <_strtod_l+0x362>
 80099c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099c6:	3301      	adds	r3, #1
 80099c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80099ca:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009be0 <_strtod_l+0x578>
 80099ce:	f04f 0a00 	mov.w	sl, #0
 80099d2:	e684      	b.n	80096de <_strtod_l+0x76>
 80099d4:	487e      	ldr	r0, [pc, #504]	@ (8009bd0 <_strtod_l+0x568>)
 80099d6:	f001 f883 	bl	800aae0 <nan>
 80099da:	ec5b ab10 	vmov	sl, fp, d0
 80099de:	e67e      	b.n	80096de <_strtod_l+0x76>
 80099e0:	ee07 9a90 	vmov	s15, r9
 80099e4:	1be2      	subs	r2, r4, r7
 80099e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	bf08      	it	eq
 80099ee:	461d      	moveq	r5, r3
 80099f0:	2b10      	cmp	r3, #16
 80099f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80099f4:	461a      	mov	r2, r3
 80099f6:	bfa8      	it	ge
 80099f8:	2210      	movge	r2, #16
 80099fa:	2b09      	cmp	r3, #9
 80099fc:	ec5b ab17 	vmov	sl, fp, d7
 8009a00:	dc15      	bgt.n	8009a2e <_strtod_l+0x3c6>
 8009a02:	1be1      	subs	r1, r4, r7
 8009a04:	2900      	cmp	r1, #0
 8009a06:	f43f ae6a 	beq.w	80096de <_strtod_l+0x76>
 8009a0a:	eba4 0107 	sub.w	r1, r4, r7
 8009a0e:	dd72      	ble.n	8009af6 <_strtod_l+0x48e>
 8009a10:	2916      	cmp	r1, #22
 8009a12:	dc59      	bgt.n	8009ac8 <_strtod_l+0x460>
 8009a14:	4b6f      	ldr	r3, [pc, #444]	@ (8009bd4 <_strtod_l+0x56c>)
 8009a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a1c:	ed93 7b00 	vldr	d7, [r3]
 8009a20:	ec4b ab16 	vmov	d6, sl, fp
 8009a24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a28:	ec5b ab17 	vmov	sl, fp, d7
 8009a2c:	e657      	b.n	80096de <_strtod_l+0x76>
 8009a2e:	4969      	ldr	r1, [pc, #420]	@ (8009bd4 <_strtod_l+0x56c>)
 8009a30:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009a34:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8009a38:	ee06 6a90 	vmov	s13, r6
 8009a3c:	2b0f      	cmp	r3, #15
 8009a3e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009a42:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009a46:	ec5b ab16 	vmov	sl, fp, d6
 8009a4a:	ddda      	ble.n	8009a02 <_strtod_l+0x39a>
 8009a4c:	1a9a      	subs	r2, r3, r2
 8009a4e:	1be1      	subs	r1, r4, r7
 8009a50:	440a      	add	r2, r1
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	f340 8094 	ble.w	8009b80 <_strtod_l+0x518>
 8009a58:	f012 000f 	ands.w	r0, r2, #15
 8009a5c:	d00a      	beq.n	8009a74 <_strtod_l+0x40c>
 8009a5e:	495d      	ldr	r1, [pc, #372]	@ (8009bd4 <_strtod_l+0x56c>)
 8009a60:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009a64:	ed91 7b00 	vldr	d7, [r1]
 8009a68:	ec4b ab16 	vmov	d6, sl, fp
 8009a6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a70:	ec5b ab17 	vmov	sl, fp, d7
 8009a74:	f032 020f 	bics.w	r2, r2, #15
 8009a78:	d073      	beq.n	8009b62 <_strtod_l+0x4fa>
 8009a7a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8009a7e:	dd47      	ble.n	8009b10 <_strtod_l+0x4a8>
 8009a80:	2400      	movs	r4, #0
 8009a82:	4625      	mov	r5, r4
 8009a84:	9407      	str	r4, [sp, #28]
 8009a86:	4626      	mov	r6, r4
 8009a88:	9a05      	ldr	r2, [sp, #20]
 8009a8a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009be0 <_strtod_l+0x578>
 8009a8e:	2322      	movs	r3, #34	@ 0x22
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	f04f 0a00 	mov.w	sl, #0
 8009a96:	9b07      	ldr	r3, [sp, #28]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f43f ae20 	beq.w	80096de <_strtod_l+0x76>
 8009a9e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009aa0:	9805      	ldr	r0, [sp, #20]
 8009aa2:	f7ff f957 	bl	8008d54 <_Bfree>
 8009aa6:	9805      	ldr	r0, [sp, #20]
 8009aa8:	4631      	mov	r1, r6
 8009aaa:	f7ff f953 	bl	8008d54 <_Bfree>
 8009aae:	9805      	ldr	r0, [sp, #20]
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7ff f94f 	bl	8008d54 <_Bfree>
 8009ab6:	9907      	ldr	r1, [sp, #28]
 8009ab8:	9805      	ldr	r0, [sp, #20]
 8009aba:	f7ff f94b 	bl	8008d54 <_Bfree>
 8009abe:	9805      	ldr	r0, [sp, #20]
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	f7ff f947 	bl	8008d54 <_Bfree>
 8009ac6:	e60a      	b.n	80096de <_strtod_l+0x76>
 8009ac8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8009acc:	1be0      	subs	r0, r4, r7
 8009ace:	4281      	cmp	r1, r0
 8009ad0:	dbbc      	blt.n	8009a4c <_strtod_l+0x3e4>
 8009ad2:	4a40      	ldr	r2, [pc, #256]	@ (8009bd4 <_strtod_l+0x56c>)
 8009ad4:	f1c3 030f 	rsb	r3, r3, #15
 8009ad8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009adc:	ed91 7b00 	vldr	d7, [r1]
 8009ae0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ae2:	ec4b ab16 	vmov	d6, sl, fp
 8009ae6:	1acb      	subs	r3, r1, r3
 8009ae8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009aec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009af0:	ed92 6b00 	vldr	d6, [r2]
 8009af4:	e796      	b.n	8009a24 <_strtod_l+0x3bc>
 8009af6:	3116      	adds	r1, #22
 8009af8:	dba8      	blt.n	8009a4c <_strtod_l+0x3e4>
 8009afa:	4b36      	ldr	r3, [pc, #216]	@ (8009bd4 <_strtod_l+0x56c>)
 8009afc:	1b3c      	subs	r4, r7, r4
 8009afe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009b02:	ed94 7b00 	vldr	d7, [r4]
 8009b06:	ec4b ab16 	vmov	d6, sl, fp
 8009b0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b0e:	e78b      	b.n	8009a28 <_strtod_l+0x3c0>
 8009b10:	2000      	movs	r0, #0
 8009b12:	ec4b ab17 	vmov	d7, sl, fp
 8009b16:	4e30      	ldr	r6, [pc, #192]	@ (8009bd8 <_strtod_l+0x570>)
 8009b18:	1112      	asrs	r2, r2, #4
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	2a01      	cmp	r2, #1
 8009b1e:	dc23      	bgt.n	8009b68 <_strtod_l+0x500>
 8009b20:	b108      	cbz	r0, 8009b26 <_strtod_l+0x4be>
 8009b22:	ec5b ab17 	vmov	sl, fp, d7
 8009b26:	4a2c      	ldr	r2, [pc, #176]	@ (8009bd8 <_strtod_l+0x570>)
 8009b28:	482c      	ldr	r0, [pc, #176]	@ (8009bdc <_strtod_l+0x574>)
 8009b2a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009b2e:	ed92 7b00 	vldr	d7, [r2]
 8009b32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009b36:	ec4b ab16 	vmov	d6, sl, fp
 8009b3a:	4a29      	ldr	r2, [pc, #164]	@ (8009be0 <_strtod_l+0x578>)
 8009b3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b40:	ee17 1a90 	vmov	r1, s15
 8009b44:	400a      	ands	r2, r1
 8009b46:	4282      	cmp	r2, r0
 8009b48:	ec5b ab17 	vmov	sl, fp, d7
 8009b4c:	d898      	bhi.n	8009a80 <_strtod_l+0x418>
 8009b4e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8009b52:	4282      	cmp	r2, r0
 8009b54:	bf86      	itte	hi
 8009b56:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009be4 <_strtod_l+0x57c>
 8009b5a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009b5e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8009b62:	2200      	movs	r2, #0
 8009b64:	9206      	str	r2, [sp, #24]
 8009b66:	e076      	b.n	8009c56 <_strtod_l+0x5ee>
 8009b68:	f012 0f01 	tst.w	r2, #1
 8009b6c:	d004      	beq.n	8009b78 <_strtod_l+0x510>
 8009b6e:	ed96 6b00 	vldr	d6, [r6]
 8009b72:	2001      	movs	r0, #1
 8009b74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b78:	3101      	adds	r1, #1
 8009b7a:	1052      	asrs	r2, r2, #1
 8009b7c:	3608      	adds	r6, #8
 8009b7e:	e7cd      	b.n	8009b1c <_strtod_l+0x4b4>
 8009b80:	d0ef      	beq.n	8009b62 <_strtod_l+0x4fa>
 8009b82:	4252      	negs	r2, r2
 8009b84:	f012 000f 	ands.w	r0, r2, #15
 8009b88:	d00a      	beq.n	8009ba0 <_strtod_l+0x538>
 8009b8a:	4912      	ldr	r1, [pc, #72]	@ (8009bd4 <_strtod_l+0x56c>)
 8009b8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009b90:	ed91 7b00 	vldr	d7, [r1]
 8009b94:	ec4b ab16 	vmov	d6, sl, fp
 8009b98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b9c:	ec5b ab17 	vmov	sl, fp, d7
 8009ba0:	1112      	asrs	r2, r2, #4
 8009ba2:	d0de      	beq.n	8009b62 <_strtod_l+0x4fa>
 8009ba4:	2a1f      	cmp	r2, #31
 8009ba6:	dd1f      	ble.n	8009be8 <_strtod_l+0x580>
 8009ba8:	2400      	movs	r4, #0
 8009baa:	4625      	mov	r5, r4
 8009bac:	9407      	str	r4, [sp, #28]
 8009bae:	4626      	mov	r6, r4
 8009bb0:	9a05      	ldr	r2, [sp, #20]
 8009bb2:	2322      	movs	r3, #34	@ 0x22
 8009bb4:	f04f 0a00 	mov.w	sl, #0
 8009bb8:	f04f 0b00 	mov.w	fp, #0
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	e76a      	b.n	8009a96 <_strtod_l+0x42e>
 8009bc0:	0800cec1 	.word	0x0800cec1
 8009bc4:	0800d0d4 	.word	0x0800d0d4
 8009bc8:	0800ceb9 	.word	0x0800ceb9
 8009bcc:	0800cef0 	.word	0x0800cef0
 8009bd0:	0800d27d 	.word	0x0800d27d
 8009bd4:	0800d008 	.word	0x0800d008
 8009bd8:	0800cfe0 	.word	0x0800cfe0
 8009bdc:	7ca00000 	.word	0x7ca00000
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	7fefffff 	.word	0x7fefffff
 8009be8:	f012 0110 	ands.w	r1, r2, #16
 8009bec:	bf18      	it	ne
 8009bee:	216a      	movne	r1, #106	@ 0x6a
 8009bf0:	9106      	str	r1, [sp, #24]
 8009bf2:	ec4b ab17 	vmov	d7, sl, fp
 8009bf6:	49b0      	ldr	r1, [pc, #704]	@ (8009eb8 <_strtod_l+0x850>)
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	07d6      	lsls	r6, r2, #31
 8009bfc:	d504      	bpl.n	8009c08 <_strtod_l+0x5a0>
 8009bfe:	ed91 6b00 	vldr	d6, [r1]
 8009c02:	2001      	movs	r0, #1
 8009c04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c08:	1052      	asrs	r2, r2, #1
 8009c0a:	f101 0108 	add.w	r1, r1, #8
 8009c0e:	d1f4      	bne.n	8009bfa <_strtod_l+0x592>
 8009c10:	b108      	cbz	r0, 8009c16 <_strtod_l+0x5ae>
 8009c12:	ec5b ab17 	vmov	sl, fp, d7
 8009c16:	9a06      	ldr	r2, [sp, #24]
 8009c18:	b1b2      	cbz	r2, 8009c48 <_strtod_l+0x5e0>
 8009c1a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8009c1e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	4658      	mov	r0, fp
 8009c26:	dd0f      	ble.n	8009c48 <_strtod_l+0x5e0>
 8009c28:	2a1f      	cmp	r2, #31
 8009c2a:	dd55      	ble.n	8009cd8 <_strtod_l+0x670>
 8009c2c:	2a34      	cmp	r2, #52	@ 0x34
 8009c2e:	bfde      	ittt	le
 8009c30:	f04f 32ff 	movle.w	r2, #4294967295
 8009c34:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8009c38:	408a      	lslle	r2, r1
 8009c3a:	f04f 0a00 	mov.w	sl, #0
 8009c3e:	bfcc      	ite	gt
 8009c40:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009c44:	ea02 0b00 	andle.w	fp, r2, r0
 8009c48:	ec4b ab17 	vmov	d7, sl, fp
 8009c4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c54:	d0a8      	beq.n	8009ba8 <_strtod_l+0x540>
 8009c56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c58:	9805      	ldr	r0, [sp, #20]
 8009c5a:	f8cd 9000 	str.w	r9, [sp]
 8009c5e:	462a      	mov	r2, r5
 8009c60:	f7ff f8e0 	bl	8008e24 <__s2b>
 8009c64:	9007      	str	r0, [sp, #28]
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f af0a 	beq.w	8009a80 <_strtod_l+0x418>
 8009c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6e:	1b3f      	subs	r7, r7, r4
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bfb4      	ite	lt
 8009c74:	463b      	movlt	r3, r7
 8009c76:	2300      	movge	r3, #0
 8009c78:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8009ea8 <_strtod_l+0x840>
 8009c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c84:	2400      	movs	r4, #0
 8009c86:	930d      	str	r3, [sp, #52]	@ 0x34
 8009c88:	4625      	mov	r5, r4
 8009c8a:	9b07      	ldr	r3, [sp, #28]
 8009c8c:	9805      	ldr	r0, [sp, #20]
 8009c8e:	6859      	ldr	r1, [r3, #4]
 8009c90:	f7ff f820 	bl	8008cd4 <_Balloc>
 8009c94:	4606      	mov	r6, r0
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f43f aef6 	beq.w	8009a88 <_strtod_l+0x420>
 8009c9c:	9b07      	ldr	r3, [sp, #28]
 8009c9e:	691a      	ldr	r2, [r3, #16]
 8009ca0:	ec4b ab19 	vmov	d9, sl, fp
 8009ca4:	3202      	adds	r2, #2
 8009ca6:	f103 010c 	add.w	r1, r3, #12
 8009caa:	0092      	lsls	r2, r2, #2
 8009cac:	300c      	adds	r0, #12
 8009cae:	f000 ff09 	bl	800aac4 <memcpy>
 8009cb2:	eeb0 0b49 	vmov.f64	d0, d9
 8009cb6:	9805      	ldr	r0, [sp, #20]
 8009cb8:	aa14      	add	r2, sp, #80	@ 0x50
 8009cba:	a913      	add	r1, sp, #76	@ 0x4c
 8009cbc:	f7ff fbee 	bl	800949c <__d2b>
 8009cc0:	9012      	str	r0, [sp, #72]	@ 0x48
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	f43f aee0 	beq.w	8009a88 <_strtod_l+0x420>
 8009cc8:	9805      	ldr	r0, [sp, #20]
 8009cca:	2101      	movs	r1, #1
 8009ccc:	f7ff f940 	bl	8008f50 <__i2b>
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	b940      	cbnz	r0, 8009ce6 <_strtod_l+0x67e>
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	e6d7      	b.n	8009a88 <_strtod_l+0x420>
 8009cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8009cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8009ce0:	ea02 0a0a 	and.w	sl, r2, sl
 8009ce4:	e7b0      	b.n	8009c48 <_strtod_l+0x5e0>
 8009ce6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009ce8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009cea:	2f00      	cmp	r7, #0
 8009cec:	bfab      	itete	ge
 8009cee:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8009cf0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8009cf2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8009cf6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8009cfa:	bfac      	ite	ge
 8009cfc:	eb07 0903 	addge.w	r9, r7, r3
 8009d00:	eba3 0807 	sublt.w	r8, r3, r7
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	1aff      	subs	r7, r7, r3
 8009d08:	4417      	add	r7, r2
 8009d0a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8009d0e:	4a6b      	ldr	r2, [pc, #428]	@ (8009ebc <_strtod_l+0x854>)
 8009d10:	3f01      	subs	r7, #1
 8009d12:	4297      	cmp	r7, r2
 8009d14:	da51      	bge.n	8009dba <_strtod_l+0x752>
 8009d16:	1bd1      	subs	r1, r2, r7
 8009d18:	291f      	cmp	r1, #31
 8009d1a:	eba3 0301 	sub.w	r3, r3, r1
 8009d1e:	f04f 0201 	mov.w	r2, #1
 8009d22:	dc3e      	bgt.n	8009da2 <_strtod_l+0x73a>
 8009d24:	408a      	lsls	r2, r1
 8009d26:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d28:	2200      	movs	r2, #0
 8009d2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d2c:	eb09 0703 	add.w	r7, r9, r3
 8009d30:	4498      	add	r8, r3
 8009d32:	9b06      	ldr	r3, [sp, #24]
 8009d34:	45b9      	cmp	r9, r7
 8009d36:	4498      	add	r8, r3
 8009d38:	464b      	mov	r3, r9
 8009d3a:	bfa8      	it	ge
 8009d3c:	463b      	movge	r3, r7
 8009d3e:	4543      	cmp	r3, r8
 8009d40:	bfa8      	it	ge
 8009d42:	4643      	movge	r3, r8
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bfc2      	ittt	gt
 8009d48:	1aff      	subgt	r7, r7, r3
 8009d4a:	eba8 0803 	subgt.w	r8, r8, r3
 8009d4e:	eba9 0903 	subgt.w	r9, r9, r3
 8009d52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dd16      	ble.n	8009d86 <_strtod_l+0x71e>
 8009d58:	4629      	mov	r1, r5
 8009d5a:	9805      	ldr	r0, [sp, #20]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	f7ff f9b7 	bl	80090d0 <__pow5mult>
 8009d62:	4605      	mov	r5, r0
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d0b5      	beq.n	8009cd4 <_strtod_l+0x66c>
 8009d68:	4601      	mov	r1, r0
 8009d6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009d6c:	9805      	ldr	r0, [sp, #20]
 8009d6e:	f7ff f905 	bl	8008f7c <__multiply>
 8009d72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009d74:	2800      	cmp	r0, #0
 8009d76:	f43f ae87 	beq.w	8009a88 <_strtod_l+0x420>
 8009d7a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009d7c:	9805      	ldr	r0, [sp, #20]
 8009d7e:	f7fe ffe9 	bl	8008d54 <_Bfree>
 8009d82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d84:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d86:	2f00      	cmp	r7, #0
 8009d88:	dc1b      	bgt.n	8009dc2 <_strtod_l+0x75a>
 8009d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dd21      	ble.n	8009dd4 <_strtod_l+0x76c>
 8009d90:	4631      	mov	r1, r6
 8009d92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d94:	9805      	ldr	r0, [sp, #20]
 8009d96:	f7ff f99b 	bl	80090d0 <__pow5mult>
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	b9d0      	cbnz	r0, 8009dd4 <_strtod_l+0x76c>
 8009d9e:	2600      	movs	r6, #0
 8009da0:	e672      	b.n	8009a88 <_strtod_l+0x420>
 8009da2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8009da6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009daa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8009dae:	37e2      	adds	r7, #226	@ 0xe2
 8009db0:	fa02 f107 	lsl.w	r1, r2, r7
 8009db4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009db6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009db8:	e7b8      	b.n	8009d2c <_strtod_l+0x6c4>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	e7f9      	b.n	8009db6 <_strtod_l+0x74e>
 8009dc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009dc4:	9805      	ldr	r0, [sp, #20]
 8009dc6:	463a      	mov	r2, r7
 8009dc8:	f7ff f9dc 	bl	8009184 <__lshift>
 8009dcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d1db      	bne.n	8009d8a <_strtod_l+0x722>
 8009dd2:	e659      	b.n	8009a88 <_strtod_l+0x420>
 8009dd4:	f1b8 0f00 	cmp.w	r8, #0
 8009dd8:	dd07      	ble.n	8009dea <_strtod_l+0x782>
 8009dda:	4631      	mov	r1, r6
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	4642      	mov	r2, r8
 8009de0:	f7ff f9d0 	bl	8009184 <__lshift>
 8009de4:	4606      	mov	r6, r0
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d0d9      	beq.n	8009d9e <_strtod_l+0x736>
 8009dea:	f1b9 0f00 	cmp.w	r9, #0
 8009dee:	dd08      	ble.n	8009e02 <_strtod_l+0x79a>
 8009df0:	4629      	mov	r1, r5
 8009df2:	9805      	ldr	r0, [sp, #20]
 8009df4:	464a      	mov	r2, r9
 8009df6:	f7ff f9c5 	bl	8009184 <__lshift>
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f43f ae43 	beq.w	8009a88 <_strtod_l+0x420>
 8009e02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009e04:	9805      	ldr	r0, [sp, #20]
 8009e06:	4632      	mov	r2, r6
 8009e08:	f7ff fa44 	bl	8009294 <__mdiff>
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f43f ae3a 	beq.w	8009a88 <_strtod_l+0x420>
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8009e1a:	60c3      	str	r3, [r0, #12]
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7ff fa1d 	bl	800925c <__mcmp>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	da4e      	bge.n	8009ec4 <_strtod_l+0x85c>
 8009e26:	ea58 080a 	orrs.w	r8, r8, sl
 8009e2a:	d174      	bne.n	8009f16 <_strtod_l+0x8ae>
 8009e2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d170      	bne.n	8009f16 <_strtod_l+0x8ae>
 8009e34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e38:	0d1b      	lsrs	r3, r3, #20
 8009e3a:	051b      	lsls	r3, r3, #20
 8009e3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e40:	d969      	bls.n	8009f16 <_strtod_l+0x8ae>
 8009e42:	6963      	ldr	r3, [r4, #20]
 8009e44:	b913      	cbnz	r3, 8009e4c <_strtod_l+0x7e4>
 8009e46:	6923      	ldr	r3, [r4, #16]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	dd64      	ble.n	8009f16 <_strtod_l+0x8ae>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	2201      	movs	r2, #1
 8009e50:	9805      	ldr	r0, [sp, #20]
 8009e52:	f7ff f997 	bl	8009184 <__lshift>
 8009e56:	4629      	mov	r1, r5
 8009e58:	4604      	mov	r4, r0
 8009e5a:	f7ff f9ff 	bl	800925c <__mcmp>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	dd59      	ble.n	8009f16 <_strtod_l+0x8ae>
 8009e62:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e66:	9a06      	ldr	r2, [sp, #24]
 8009e68:	0d1b      	lsrs	r3, r3, #20
 8009e6a:	051b      	lsls	r3, r3, #20
 8009e6c:	2a00      	cmp	r2, #0
 8009e6e:	d070      	beq.n	8009f52 <_strtod_l+0x8ea>
 8009e70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e74:	d86d      	bhi.n	8009f52 <_strtod_l+0x8ea>
 8009e76:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009e7a:	f67f ae99 	bls.w	8009bb0 <_strtod_l+0x548>
 8009e7e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009eb0 <_strtod_l+0x848>
 8009e82:	ec4b ab16 	vmov	d6, sl, fp
 8009e86:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec0 <_strtod_l+0x858>)
 8009e88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009e8c:	ee17 2a90 	vmov	r2, s15
 8009e90:	4013      	ands	r3, r2
 8009e92:	ec5b ab17 	vmov	sl, fp, d7
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f47f ae01 	bne.w	8009a9e <_strtod_l+0x436>
 8009e9c:	9a05      	ldr	r2, [sp, #20]
 8009e9e:	2322      	movs	r3, #34	@ 0x22
 8009ea0:	6013      	str	r3, [r2, #0]
 8009ea2:	e5fc      	b.n	8009a9e <_strtod_l+0x436>
 8009ea4:	f3af 8000 	nop.w
 8009ea8:	ffc00000 	.word	0xffc00000
 8009eac:	41dfffff 	.word	0x41dfffff
 8009eb0:	00000000 	.word	0x00000000
 8009eb4:	39500000 	.word	0x39500000
 8009eb8:	0800d100 	.word	0x0800d100
 8009ebc:	fffffc02 	.word	0xfffffc02
 8009ec0:	7ff00000 	.word	0x7ff00000
 8009ec4:	46d9      	mov	r9, fp
 8009ec6:	d15d      	bne.n	8009f84 <_strtod_l+0x91c>
 8009ec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ecc:	f1b8 0f00 	cmp.w	r8, #0
 8009ed0:	d02a      	beq.n	8009f28 <_strtod_l+0x8c0>
 8009ed2:	4aab      	ldr	r2, [pc, #684]	@ (800a180 <_strtod_l+0xb18>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d12a      	bne.n	8009f2e <_strtod_l+0x8c6>
 8009ed8:	9b06      	ldr	r3, [sp, #24]
 8009eda:	4652      	mov	r2, sl
 8009edc:	b1fb      	cbz	r3, 8009f1e <_strtod_l+0x8b6>
 8009ede:	4ba9      	ldr	r3, [pc, #676]	@ (800a184 <_strtod_l+0xb1c>)
 8009ee0:	ea0b 0303 	and.w	r3, fp, r3
 8009ee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8009eec:	d81a      	bhi.n	8009f24 <_strtod_l+0x8bc>
 8009eee:	0d1b      	lsrs	r3, r3, #20
 8009ef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d118      	bne.n	8009f2e <_strtod_l+0x8c6>
 8009efc:	4ba2      	ldr	r3, [pc, #648]	@ (800a188 <_strtod_l+0xb20>)
 8009efe:	4599      	cmp	r9, r3
 8009f00:	d102      	bne.n	8009f08 <_strtod_l+0x8a0>
 8009f02:	3201      	adds	r2, #1
 8009f04:	f43f adc0 	beq.w	8009a88 <_strtod_l+0x420>
 8009f08:	4b9e      	ldr	r3, [pc, #632]	@ (800a184 <_strtod_l+0xb1c>)
 8009f0a:	ea09 0303 	and.w	r3, r9, r3
 8009f0e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8009f12:	f04f 0a00 	mov.w	sl, #0
 8009f16:	9b06      	ldr	r3, [sp, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1b0      	bne.n	8009e7e <_strtod_l+0x816>
 8009f1c:	e5bf      	b.n	8009a9e <_strtod_l+0x436>
 8009f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f22:	e7e9      	b.n	8009ef8 <_strtod_l+0x890>
 8009f24:	460b      	mov	r3, r1
 8009f26:	e7e7      	b.n	8009ef8 <_strtod_l+0x890>
 8009f28:	ea53 030a 	orrs.w	r3, r3, sl
 8009f2c:	d099      	beq.n	8009e62 <_strtod_l+0x7fa>
 8009f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f30:	b1c3      	cbz	r3, 8009f64 <_strtod_l+0x8fc>
 8009f32:	ea13 0f09 	tst.w	r3, r9
 8009f36:	d0ee      	beq.n	8009f16 <_strtod_l+0x8ae>
 8009f38:	9a06      	ldr	r2, [sp, #24]
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	f1b8 0f00 	cmp.w	r8, #0
 8009f42:	d013      	beq.n	8009f6c <_strtod_l+0x904>
 8009f44:	f7ff fb75 	bl	8009632 <sulp>
 8009f48:	ee39 7b00 	vadd.f64	d7, d9, d0
 8009f4c:	ec5b ab17 	vmov	sl, fp, d7
 8009f50:	e7e1      	b.n	8009f16 <_strtod_l+0x8ae>
 8009f52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009f56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f5e:	f04f 3aff 	mov.w	sl, #4294967295
 8009f62:	e7d8      	b.n	8009f16 <_strtod_l+0x8ae>
 8009f64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f66:	ea13 0f0a 	tst.w	r3, sl
 8009f6a:	e7e4      	b.n	8009f36 <_strtod_l+0x8ce>
 8009f6c:	f7ff fb61 	bl	8009632 <sulp>
 8009f70:	ee39 0b40 	vsub.f64	d0, d9, d0
 8009f74:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7c:	ec5b ab10 	vmov	sl, fp, d0
 8009f80:	d1c9      	bne.n	8009f16 <_strtod_l+0x8ae>
 8009f82:	e615      	b.n	8009bb0 <_strtod_l+0x548>
 8009f84:	4629      	mov	r1, r5
 8009f86:	4620      	mov	r0, r4
 8009f88:	f7ff fae0 	bl	800954c <__ratio>
 8009f8c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8009f90:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f98:	d85d      	bhi.n	800a056 <_strtod_l+0x9ee>
 8009f9a:	f1b8 0f00 	cmp.w	r8, #0
 8009f9e:	d164      	bne.n	800a06a <_strtod_l+0xa02>
 8009fa0:	f1ba 0f00 	cmp.w	sl, #0
 8009fa4:	d14b      	bne.n	800a03e <_strtod_l+0x9d6>
 8009fa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009faa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d160      	bne.n	800a074 <_strtod_l+0xa0c>
 8009fb2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8009fb6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbe:	d401      	bmi.n	8009fc4 <_strtod_l+0x95c>
 8009fc0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009fc4:	eeb1 ab48 	vneg.f64	d10, d8
 8009fc8:	486e      	ldr	r0, [pc, #440]	@ (800a184 <_strtod_l+0xb1c>)
 8009fca:	4970      	ldr	r1, [pc, #448]	@ (800a18c <_strtod_l+0xb24>)
 8009fcc:	ea09 0700 	and.w	r7, r9, r0
 8009fd0:	428f      	cmp	r7, r1
 8009fd2:	ec53 2b1a 	vmov	r2, r3, d10
 8009fd6:	d17d      	bne.n	800a0d4 <_strtod_l+0xa6c>
 8009fd8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009fdc:	ec4b ab1c 	vmov	d12, sl, fp
 8009fe0:	eeb0 0b4c 	vmov.f64	d0, d12
 8009fe4:	f7ff f9ea 	bl	80093bc <__ulp>
 8009fe8:	4866      	ldr	r0, [pc, #408]	@ (800a184 <_strtod_l+0xb1c>)
 8009fea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009fee:	ee1c 3a90 	vmov	r3, s25
 8009ff2:	4a67      	ldr	r2, [pc, #412]	@ (800a190 <_strtod_l+0xb28>)
 8009ff4:	ea03 0100 	and.w	r1, r3, r0
 8009ff8:	4291      	cmp	r1, r2
 8009ffa:	ec5b ab1c 	vmov	sl, fp, d12
 8009ffe:	d93c      	bls.n	800a07a <_strtod_l+0xa12>
 800a000:	ee19 2a90 	vmov	r2, s19
 800a004:	4b60      	ldr	r3, [pc, #384]	@ (800a188 <_strtod_l+0xb20>)
 800a006:	429a      	cmp	r2, r3
 800a008:	d104      	bne.n	800a014 <_strtod_l+0x9ac>
 800a00a:	ee19 3a10 	vmov	r3, s18
 800a00e:	3301      	adds	r3, #1
 800a010:	f43f ad3a 	beq.w	8009a88 <_strtod_l+0x420>
 800a014:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800a188 <_strtod_l+0xb20>
 800a018:	f04f 3aff 	mov.w	sl, #4294967295
 800a01c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a01e:	9805      	ldr	r0, [sp, #20]
 800a020:	f7fe fe98 	bl	8008d54 <_Bfree>
 800a024:	9805      	ldr	r0, [sp, #20]
 800a026:	4631      	mov	r1, r6
 800a028:	f7fe fe94 	bl	8008d54 <_Bfree>
 800a02c:	9805      	ldr	r0, [sp, #20]
 800a02e:	4629      	mov	r1, r5
 800a030:	f7fe fe90 	bl	8008d54 <_Bfree>
 800a034:	9805      	ldr	r0, [sp, #20]
 800a036:	4621      	mov	r1, r4
 800a038:	f7fe fe8c 	bl	8008d54 <_Bfree>
 800a03c:	e625      	b.n	8009c8a <_strtod_l+0x622>
 800a03e:	f1ba 0f01 	cmp.w	sl, #1
 800a042:	d103      	bne.n	800a04c <_strtod_l+0x9e4>
 800a044:	f1bb 0f00 	cmp.w	fp, #0
 800a048:	f43f adb2 	beq.w	8009bb0 <_strtod_l+0x548>
 800a04c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a050:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a054:	e7b8      	b.n	8009fc8 <_strtod_l+0x960>
 800a056:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a05a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a05e:	f1b8 0f00 	cmp.w	r8, #0
 800a062:	d0af      	beq.n	8009fc4 <_strtod_l+0x95c>
 800a064:	eeb0 ab48 	vmov.f64	d10, d8
 800a068:	e7ae      	b.n	8009fc8 <_strtod_l+0x960>
 800a06a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800a06e:	eeb0 8b4a 	vmov.f64	d8, d10
 800a072:	e7a9      	b.n	8009fc8 <_strtod_l+0x960>
 800a074:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a078:	e7a6      	b.n	8009fc8 <_strtod_l+0x960>
 800a07a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a07e:	9b06      	ldr	r3, [sp, #24]
 800a080:	46d9      	mov	r9, fp
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1ca      	bne.n	800a01c <_strtod_l+0x9b4>
 800a086:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a08a:	0d1b      	lsrs	r3, r3, #20
 800a08c:	051b      	lsls	r3, r3, #20
 800a08e:	429f      	cmp	r7, r3
 800a090:	d1c4      	bne.n	800a01c <_strtod_l+0x9b4>
 800a092:	ec51 0b18 	vmov	r0, r1, d8
 800a096:	f7f6 fb4f 	bl	8000738 <__aeabi_d2lz>
 800a09a:	f7f6 fb07 	bl	80006ac <__aeabi_l2d>
 800a09e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800a0a2:	ec41 0b17 	vmov	d7, r0, r1
 800a0a6:	ea49 090a 	orr.w	r9, r9, sl
 800a0aa:	ea59 0908 	orrs.w	r9, r9, r8
 800a0ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a0b2:	d03c      	beq.n	800a12e <_strtod_l+0xac6>
 800a0b4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800a168 <_strtod_l+0xb00>
 800a0b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c0:	f53f aced 	bmi.w	8009a9e <_strtod_l+0x436>
 800a0c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800a170 <_strtod_l+0xb08>
 800a0c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d0:	dda4      	ble.n	800a01c <_strtod_l+0x9b4>
 800a0d2:	e4e4      	b.n	8009a9e <_strtod_l+0x436>
 800a0d4:	9906      	ldr	r1, [sp, #24]
 800a0d6:	b1e1      	cbz	r1, 800a112 <_strtod_l+0xaaa>
 800a0d8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800a0dc:	d819      	bhi.n	800a112 <_strtod_l+0xaaa>
 800a0de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e6:	d811      	bhi.n	800a10c <_strtod_l+0xaa4>
 800a0e8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800a0ec:	ee18 3a10 	vmov	r3, s16
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	bf38      	it	cc
 800a0f4:	2301      	movcc	r3, #1
 800a0f6:	ee08 3a10 	vmov	s16, r3
 800a0fa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a0fe:	f1b8 0f00 	cmp.w	r8, #0
 800a102:	d111      	bne.n	800a128 <_strtod_l+0xac0>
 800a104:	eeb1 7b48 	vneg.f64	d7, d8
 800a108:	ec53 2b17 	vmov	r2, r3, d7
 800a10c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800a110:	1bcb      	subs	r3, r1, r7
 800a112:	eeb0 0b49 	vmov.f64	d0, d9
 800a116:	ec43 2b1a 	vmov	d10, r2, r3
 800a11a:	f7ff f94f 	bl	80093bc <__ulp>
 800a11e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800a122:	ec5b ab19 	vmov	sl, fp, d9
 800a126:	e7aa      	b.n	800a07e <_strtod_l+0xa16>
 800a128:	eeb0 7b48 	vmov.f64	d7, d8
 800a12c:	e7ec      	b.n	800a108 <_strtod_l+0xaa0>
 800a12e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800a178 <_strtod_l+0xb10>
 800a132:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13a:	f57f af6f 	bpl.w	800a01c <_strtod_l+0x9b4>
 800a13e:	e4ae      	b.n	8009a9e <_strtod_l+0x436>
 800a140:	2300      	movs	r3, #0
 800a142:	9308      	str	r3, [sp, #32]
 800a144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a146:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	f7ff bacc 	b.w	80096e6 <_strtod_l+0x7e>
 800a14e:	2a65      	cmp	r2, #101	@ 0x65
 800a150:	f43f abbc 	beq.w	80098cc <_strtod_l+0x264>
 800a154:	2a45      	cmp	r2, #69	@ 0x45
 800a156:	f43f abb9 	beq.w	80098cc <_strtod_l+0x264>
 800a15a:	2301      	movs	r3, #1
 800a15c:	9306      	str	r3, [sp, #24]
 800a15e:	f7ff bbf0 	b.w	8009942 <_strtod_l+0x2da>
 800a162:	bf00      	nop
 800a164:	f3af 8000 	nop.w
 800a168:	94a03595 	.word	0x94a03595
 800a16c:	3fdfffff 	.word	0x3fdfffff
 800a170:	35afe535 	.word	0x35afe535
 800a174:	3fe00000 	.word	0x3fe00000
 800a178:	94a03595 	.word	0x94a03595
 800a17c:	3fcfffff 	.word	0x3fcfffff
 800a180:	000fffff 	.word	0x000fffff
 800a184:	7ff00000 	.word	0x7ff00000
 800a188:	7fefffff 	.word	0x7fefffff
 800a18c:	7fe00000 	.word	0x7fe00000
 800a190:	7c9fffff 	.word	0x7c9fffff

0800a194 <_strtod_r>:
 800a194:	4b01      	ldr	r3, [pc, #4]	@ (800a19c <_strtod_r+0x8>)
 800a196:	f7ff ba67 	b.w	8009668 <_strtod_l>
 800a19a:	bf00      	nop
 800a19c:	24000090 	.word	0x24000090

0800a1a0 <_strtol_l.constprop.0>:
 800a1a0:	2b24      	cmp	r3, #36	@ 0x24
 800a1a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a6:	4686      	mov	lr, r0
 800a1a8:	4690      	mov	r8, r2
 800a1aa:	d801      	bhi.n	800a1b0 <_strtol_l.constprop.0+0x10>
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d106      	bne.n	800a1be <_strtol_l.constprop.0+0x1e>
 800a1b0:	f7fd fe7c 	bl	8007eac <__errno>
 800a1b4:	2316      	movs	r3, #22
 800a1b6:	6003      	str	r3, [r0, #0]
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1be:	4834      	ldr	r0, [pc, #208]	@ (800a290 <_strtol_l.constprop.0+0xf0>)
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1c8:	5d06      	ldrb	r6, [r0, r4]
 800a1ca:	f016 0608 	ands.w	r6, r6, #8
 800a1ce:	d1f8      	bne.n	800a1c2 <_strtol_l.constprop.0+0x22>
 800a1d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a1d2:	d12d      	bne.n	800a230 <_strtol_l.constprop.0+0x90>
 800a1d4:	782c      	ldrb	r4, [r5, #0]
 800a1d6:	2601      	movs	r6, #1
 800a1d8:	1c95      	adds	r5, r2, #2
 800a1da:	f033 0210 	bics.w	r2, r3, #16
 800a1de:	d109      	bne.n	800a1f4 <_strtol_l.constprop.0+0x54>
 800a1e0:	2c30      	cmp	r4, #48	@ 0x30
 800a1e2:	d12a      	bne.n	800a23a <_strtol_l.constprop.0+0x9a>
 800a1e4:	782a      	ldrb	r2, [r5, #0]
 800a1e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a1ea:	2a58      	cmp	r2, #88	@ 0x58
 800a1ec:	d125      	bne.n	800a23a <_strtol_l.constprop.0+0x9a>
 800a1ee:	786c      	ldrb	r4, [r5, #1]
 800a1f0:	2310      	movs	r3, #16
 800a1f2:	3502      	adds	r5, #2
 800a1f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a1f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	fbbc f9f3 	udiv	r9, ip, r3
 800a202:	4610      	mov	r0, r2
 800a204:	fb03 ca19 	mls	sl, r3, r9, ip
 800a208:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a20c:	2f09      	cmp	r7, #9
 800a20e:	d81b      	bhi.n	800a248 <_strtol_l.constprop.0+0xa8>
 800a210:	463c      	mov	r4, r7
 800a212:	42a3      	cmp	r3, r4
 800a214:	dd27      	ble.n	800a266 <_strtol_l.constprop.0+0xc6>
 800a216:	1c57      	adds	r7, r2, #1
 800a218:	d007      	beq.n	800a22a <_strtol_l.constprop.0+0x8a>
 800a21a:	4581      	cmp	r9, r0
 800a21c:	d320      	bcc.n	800a260 <_strtol_l.constprop.0+0xc0>
 800a21e:	d101      	bne.n	800a224 <_strtol_l.constprop.0+0x84>
 800a220:	45a2      	cmp	sl, r4
 800a222:	db1d      	blt.n	800a260 <_strtol_l.constprop.0+0xc0>
 800a224:	fb00 4003 	mla	r0, r0, r3, r4
 800a228:	2201      	movs	r2, #1
 800a22a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a22e:	e7eb      	b.n	800a208 <_strtol_l.constprop.0+0x68>
 800a230:	2c2b      	cmp	r4, #43	@ 0x2b
 800a232:	bf04      	itt	eq
 800a234:	782c      	ldrbeq	r4, [r5, #0]
 800a236:	1c95      	addeq	r5, r2, #2
 800a238:	e7cf      	b.n	800a1da <_strtol_l.constprop.0+0x3a>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1da      	bne.n	800a1f4 <_strtol_l.constprop.0+0x54>
 800a23e:	2c30      	cmp	r4, #48	@ 0x30
 800a240:	bf0c      	ite	eq
 800a242:	2308      	moveq	r3, #8
 800a244:	230a      	movne	r3, #10
 800a246:	e7d5      	b.n	800a1f4 <_strtol_l.constprop.0+0x54>
 800a248:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a24c:	2f19      	cmp	r7, #25
 800a24e:	d801      	bhi.n	800a254 <_strtol_l.constprop.0+0xb4>
 800a250:	3c37      	subs	r4, #55	@ 0x37
 800a252:	e7de      	b.n	800a212 <_strtol_l.constprop.0+0x72>
 800a254:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a258:	2f19      	cmp	r7, #25
 800a25a:	d804      	bhi.n	800a266 <_strtol_l.constprop.0+0xc6>
 800a25c:	3c57      	subs	r4, #87	@ 0x57
 800a25e:	e7d8      	b.n	800a212 <_strtol_l.constprop.0+0x72>
 800a260:	f04f 32ff 	mov.w	r2, #4294967295
 800a264:	e7e1      	b.n	800a22a <_strtol_l.constprop.0+0x8a>
 800a266:	1c53      	adds	r3, r2, #1
 800a268:	d108      	bne.n	800a27c <_strtol_l.constprop.0+0xdc>
 800a26a:	2322      	movs	r3, #34	@ 0x22
 800a26c:	f8ce 3000 	str.w	r3, [lr]
 800a270:	4660      	mov	r0, ip
 800a272:	f1b8 0f00 	cmp.w	r8, #0
 800a276:	d0a0      	beq.n	800a1ba <_strtol_l.constprop.0+0x1a>
 800a278:	1e69      	subs	r1, r5, #1
 800a27a:	e006      	b.n	800a28a <_strtol_l.constprop.0+0xea>
 800a27c:	b106      	cbz	r6, 800a280 <_strtol_l.constprop.0+0xe0>
 800a27e:	4240      	negs	r0, r0
 800a280:	f1b8 0f00 	cmp.w	r8, #0
 800a284:	d099      	beq.n	800a1ba <_strtol_l.constprop.0+0x1a>
 800a286:	2a00      	cmp	r2, #0
 800a288:	d1f6      	bne.n	800a278 <_strtol_l.constprop.0+0xd8>
 800a28a:	f8c8 1000 	str.w	r1, [r8]
 800a28e:	e794      	b.n	800a1ba <_strtol_l.constprop.0+0x1a>
 800a290:	0800d129 	.word	0x0800d129

0800a294 <_strtol_r>:
 800a294:	f7ff bf84 	b.w	800a1a0 <_strtol_l.constprop.0>

0800a298 <__ssputs_r>:
 800a298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a29c:	688e      	ldr	r6, [r1, #8]
 800a29e:	461f      	mov	r7, r3
 800a2a0:	42be      	cmp	r6, r7
 800a2a2:	680b      	ldr	r3, [r1, #0]
 800a2a4:	4682      	mov	sl, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	4690      	mov	r8, r2
 800a2aa:	d82d      	bhi.n	800a308 <__ssputs_r+0x70>
 800a2ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a2b4:	d026      	beq.n	800a304 <__ssputs_r+0x6c>
 800a2b6:	6965      	ldr	r5, [r4, #20]
 800a2b8:	6909      	ldr	r1, [r1, #16]
 800a2ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2be:	eba3 0901 	sub.w	r9, r3, r1
 800a2c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2c6:	1c7b      	adds	r3, r7, #1
 800a2c8:	444b      	add	r3, r9
 800a2ca:	106d      	asrs	r5, r5, #1
 800a2cc:	429d      	cmp	r5, r3
 800a2ce:	bf38      	it	cc
 800a2d0:	461d      	movcc	r5, r3
 800a2d2:	0553      	lsls	r3, r2, #21
 800a2d4:	d527      	bpl.n	800a326 <__ssputs_r+0x8e>
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7fe fc70 	bl	8008bbc <_malloc_r>
 800a2dc:	4606      	mov	r6, r0
 800a2de:	b360      	cbz	r0, 800a33a <__ssputs_r+0xa2>
 800a2e0:	6921      	ldr	r1, [r4, #16]
 800a2e2:	464a      	mov	r2, r9
 800a2e4:	f000 fbee 	bl	800aac4 <memcpy>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a2ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	6126      	str	r6, [r4, #16]
 800a2f6:	6165      	str	r5, [r4, #20]
 800a2f8:	444e      	add	r6, r9
 800a2fa:	eba5 0509 	sub.w	r5, r5, r9
 800a2fe:	6026      	str	r6, [r4, #0]
 800a300:	60a5      	str	r5, [r4, #8]
 800a302:	463e      	mov	r6, r7
 800a304:	42be      	cmp	r6, r7
 800a306:	d900      	bls.n	800a30a <__ssputs_r+0x72>
 800a308:	463e      	mov	r6, r7
 800a30a:	6820      	ldr	r0, [r4, #0]
 800a30c:	4632      	mov	r2, r6
 800a30e:	4641      	mov	r1, r8
 800a310:	f000 fb9c 	bl	800aa4c <memmove>
 800a314:	68a3      	ldr	r3, [r4, #8]
 800a316:	1b9b      	subs	r3, r3, r6
 800a318:	60a3      	str	r3, [r4, #8]
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	4433      	add	r3, r6
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	2000      	movs	r0, #0
 800a322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a326:	462a      	mov	r2, r5
 800a328:	f000 ff5f 	bl	800b1ea <_realloc_r>
 800a32c:	4606      	mov	r6, r0
 800a32e:	2800      	cmp	r0, #0
 800a330:	d1e0      	bne.n	800a2f4 <__ssputs_r+0x5c>
 800a332:	6921      	ldr	r1, [r4, #16]
 800a334:	4650      	mov	r0, sl
 800a336:	f7fe fbcd 	bl	8008ad4 <_free_r>
 800a33a:	230c      	movs	r3, #12
 800a33c:	f8ca 3000 	str.w	r3, [sl]
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	f04f 30ff 	mov.w	r0, #4294967295
 800a34c:	e7e9      	b.n	800a322 <__ssputs_r+0x8a>
	...

0800a350 <_svfiprintf_r>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	4698      	mov	r8, r3
 800a356:	898b      	ldrh	r3, [r1, #12]
 800a358:	061b      	lsls	r3, r3, #24
 800a35a:	b09d      	sub	sp, #116	@ 0x74
 800a35c:	4607      	mov	r7, r0
 800a35e:	460d      	mov	r5, r1
 800a360:	4614      	mov	r4, r2
 800a362:	d510      	bpl.n	800a386 <_svfiprintf_r+0x36>
 800a364:	690b      	ldr	r3, [r1, #16]
 800a366:	b973      	cbnz	r3, 800a386 <_svfiprintf_r+0x36>
 800a368:	2140      	movs	r1, #64	@ 0x40
 800a36a:	f7fe fc27 	bl	8008bbc <_malloc_r>
 800a36e:	6028      	str	r0, [r5, #0]
 800a370:	6128      	str	r0, [r5, #16]
 800a372:	b930      	cbnz	r0, 800a382 <_svfiprintf_r+0x32>
 800a374:	230c      	movs	r3, #12
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	b01d      	add	sp, #116	@ 0x74
 800a37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a382:	2340      	movs	r3, #64	@ 0x40
 800a384:	616b      	str	r3, [r5, #20]
 800a386:	2300      	movs	r3, #0
 800a388:	9309      	str	r3, [sp, #36]	@ 0x24
 800a38a:	2320      	movs	r3, #32
 800a38c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a390:	f8cd 800c 	str.w	r8, [sp, #12]
 800a394:	2330      	movs	r3, #48	@ 0x30
 800a396:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a534 <_svfiprintf_r+0x1e4>
 800a39a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a39e:	f04f 0901 	mov.w	r9, #1
 800a3a2:	4623      	mov	r3, r4
 800a3a4:	469a      	mov	sl, r3
 800a3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3aa:	b10a      	cbz	r2, 800a3b0 <_svfiprintf_r+0x60>
 800a3ac:	2a25      	cmp	r2, #37	@ 0x25
 800a3ae:	d1f9      	bne.n	800a3a4 <_svfiprintf_r+0x54>
 800a3b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b4:	d00b      	beq.n	800a3ce <_svfiprintf_r+0x7e>
 800a3b6:	465b      	mov	r3, fp
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f7ff ff6b 	bl	800a298 <__ssputs_r>
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f000 80a7 	beq.w	800a516 <_svfiprintf_r+0x1c6>
 800a3c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3ca:	445a      	add	r2, fp
 800a3cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 809f 	beq.w	800a516 <_svfiprintf_r+0x1c6>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295
 800a3de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e2:	f10a 0a01 	add.w	sl, sl, #1
 800a3e6:	9304      	str	r3, [sp, #16]
 800a3e8:	9307      	str	r3, [sp, #28]
 800a3ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3f0:	4654      	mov	r4, sl
 800a3f2:	2205      	movs	r2, #5
 800a3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f8:	484e      	ldr	r0, [pc, #312]	@ (800a534 <_svfiprintf_r+0x1e4>)
 800a3fa:	f7f5 ff71 	bl	80002e0 <memchr>
 800a3fe:	9a04      	ldr	r2, [sp, #16]
 800a400:	b9d8      	cbnz	r0, 800a43a <_svfiprintf_r+0xea>
 800a402:	06d0      	lsls	r0, r2, #27
 800a404:	bf44      	itt	mi
 800a406:	2320      	movmi	r3, #32
 800a408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a40c:	0711      	lsls	r1, r2, #28
 800a40e:	bf44      	itt	mi
 800a410:	232b      	movmi	r3, #43	@ 0x2b
 800a412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a416:	f89a 3000 	ldrb.w	r3, [sl]
 800a41a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a41c:	d015      	beq.n	800a44a <_svfiprintf_r+0xfa>
 800a41e:	9a07      	ldr	r2, [sp, #28]
 800a420:	4654      	mov	r4, sl
 800a422:	2000      	movs	r0, #0
 800a424:	f04f 0c0a 	mov.w	ip, #10
 800a428:	4621      	mov	r1, r4
 800a42a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a42e:	3b30      	subs	r3, #48	@ 0x30
 800a430:	2b09      	cmp	r3, #9
 800a432:	d94b      	bls.n	800a4cc <_svfiprintf_r+0x17c>
 800a434:	b1b0      	cbz	r0, 800a464 <_svfiprintf_r+0x114>
 800a436:	9207      	str	r2, [sp, #28]
 800a438:	e014      	b.n	800a464 <_svfiprintf_r+0x114>
 800a43a:	eba0 0308 	sub.w	r3, r0, r8
 800a43e:	fa09 f303 	lsl.w	r3, r9, r3
 800a442:	4313      	orrs	r3, r2
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	46a2      	mov	sl, r4
 800a448:	e7d2      	b.n	800a3f0 <_svfiprintf_r+0xa0>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	1d19      	adds	r1, r3, #4
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	9103      	str	r1, [sp, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	bfbb      	ittet	lt
 800a456:	425b      	neglt	r3, r3
 800a458:	f042 0202 	orrlt.w	r2, r2, #2
 800a45c:	9307      	strge	r3, [sp, #28]
 800a45e:	9307      	strlt	r3, [sp, #28]
 800a460:	bfb8      	it	lt
 800a462:	9204      	strlt	r2, [sp, #16]
 800a464:	7823      	ldrb	r3, [r4, #0]
 800a466:	2b2e      	cmp	r3, #46	@ 0x2e
 800a468:	d10a      	bne.n	800a480 <_svfiprintf_r+0x130>
 800a46a:	7863      	ldrb	r3, [r4, #1]
 800a46c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a46e:	d132      	bne.n	800a4d6 <_svfiprintf_r+0x186>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	9203      	str	r2, [sp, #12]
 800a478:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a47c:	3402      	adds	r4, #2
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a544 <_svfiprintf_r+0x1f4>
 800a484:	7821      	ldrb	r1, [r4, #0]
 800a486:	2203      	movs	r2, #3
 800a488:	4650      	mov	r0, sl
 800a48a:	f7f5 ff29 	bl	80002e0 <memchr>
 800a48e:	b138      	cbz	r0, 800a4a0 <_svfiprintf_r+0x150>
 800a490:	9b04      	ldr	r3, [sp, #16]
 800a492:	eba0 000a 	sub.w	r0, r0, sl
 800a496:	2240      	movs	r2, #64	@ 0x40
 800a498:	4082      	lsls	r2, r0
 800a49a:	4313      	orrs	r3, r2
 800a49c:	3401      	adds	r4, #1
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a4:	4824      	ldr	r0, [pc, #144]	@ (800a538 <_svfiprintf_r+0x1e8>)
 800a4a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4aa:	2206      	movs	r2, #6
 800a4ac:	f7f5 ff18 	bl	80002e0 <memchr>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d036      	beq.n	800a522 <_svfiprintf_r+0x1d2>
 800a4b4:	4b21      	ldr	r3, [pc, #132]	@ (800a53c <_svfiprintf_r+0x1ec>)
 800a4b6:	bb1b      	cbnz	r3, 800a500 <_svfiprintf_r+0x1b0>
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	3307      	adds	r3, #7
 800a4bc:	f023 0307 	bic.w	r3, r3, #7
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	9303      	str	r3, [sp, #12]
 800a4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c6:	4433      	add	r3, r6
 800a4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4ca:	e76a      	b.n	800a3a2 <_svfiprintf_r+0x52>
 800a4cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	e7a8      	b.n	800a428 <_svfiprintf_r+0xd8>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	3401      	adds	r4, #1
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	f04f 0c0a 	mov.w	ip, #10
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4e8:	3a30      	subs	r2, #48	@ 0x30
 800a4ea:	2a09      	cmp	r2, #9
 800a4ec:	d903      	bls.n	800a4f6 <_svfiprintf_r+0x1a6>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0c6      	beq.n	800a480 <_svfiprintf_r+0x130>
 800a4f2:	9105      	str	r1, [sp, #20]
 800a4f4:	e7c4      	b.n	800a480 <_svfiprintf_r+0x130>
 800a4f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e7f0      	b.n	800a4e2 <_svfiprintf_r+0x192>
 800a500:	ab03      	add	r3, sp, #12
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	462a      	mov	r2, r5
 800a506:	4b0e      	ldr	r3, [pc, #56]	@ (800a540 <_svfiprintf_r+0x1f0>)
 800a508:	a904      	add	r1, sp, #16
 800a50a:	4638      	mov	r0, r7
 800a50c:	f7fc fd90 	bl	8007030 <_printf_float>
 800a510:	1c42      	adds	r2, r0, #1
 800a512:	4606      	mov	r6, r0
 800a514:	d1d6      	bne.n	800a4c4 <_svfiprintf_r+0x174>
 800a516:	89ab      	ldrh	r3, [r5, #12]
 800a518:	065b      	lsls	r3, r3, #25
 800a51a:	f53f af2d 	bmi.w	800a378 <_svfiprintf_r+0x28>
 800a51e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a520:	e72c      	b.n	800a37c <_svfiprintf_r+0x2c>
 800a522:	ab03      	add	r3, sp, #12
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	462a      	mov	r2, r5
 800a528:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <_svfiprintf_r+0x1f0>)
 800a52a:	a904      	add	r1, sp, #16
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7fd f807 	bl	8007540 <_printf_i>
 800a532:	e7ed      	b.n	800a510 <_svfiprintf_r+0x1c0>
 800a534:	0800d229 	.word	0x0800d229
 800a538:	0800d233 	.word	0x0800d233
 800a53c:	08007031 	.word	0x08007031
 800a540:	0800a299 	.word	0x0800a299
 800a544:	0800d22f 	.word	0x0800d22f

0800a548 <__sfputc_r>:
 800a548:	6893      	ldr	r3, [r2, #8]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	b410      	push	{r4}
 800a550:	6093      	str	r3, [r2, #8]
 800a552:	da08      	bge.n	800a566 <__sfputc_r+0x1e>
 800a554:	6994      	ldr	r4, [r2, #24]
 800a556:	42a3      	cmp	r3, r4
 800a558:	db01      	blt.n	800a55e <__sfputc_r+0x16>
 800a55a:	290a      	cmp	r1, #10
 800a55c:	d103      	bne.n	800a566 <__sfputc_r+0x1e>
 800a55e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a562:	f000 b9df 	b.w	800a924 <__swbuf_r>
 800a566:	6813      	ldr	r3, [r2, #0]
 800a568:	1c58      	adds	r0, r3, #1
 800a56a:	6010      	str	r0, [r2, #0]
 800a56c:	7019      	strb	r1, [r3, #0]
 800a56e:	4608      	mov	r0, r1
 800a570:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <__sfputs_r>:
 800a576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a578:	4606      	mov	r6, r0
 800a57a:	460f      	mov	r7, r1
 800a57c:	4614      	mov	r4, r2
 800a57e:	18d5      	adds	r5, r2, r3
 800a580:	42ac      	cmp	r4, r5
 800a582:	d101      	bne.n	800a588 <__sfputs_r+0x12>
 800a584:	2000      	movs	r0, #0
 800a586:	e007      	b.n	800a598 <__sfputs_r+0x22>
 800a588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58c:	463a      	mov	r2, r7
 800a58e:	4630      	mov	r0, r6
 800a590:	f7ff ffda 	bl	800a548 <__sfputc_r>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d1f3      	bne.n	800a580 <__sfputs_r+0xa>
 800a598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a59c <_vfiprintf_r>:
 800a59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a0:	460d      	mov	r5, r1
 800a5a2:	b09d      	sub	sp, #116	@ 0x74
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	4698      	mov	r8, r3
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	b118      	cbz	r0, 800a5b4 <_vfiprintf_r+0x18>
 800a5ac:	6a03      	ldr	r3, [r0, #32]
 800a5ae:	b90b      	cbnz	r3, 800a5b4 <_vfiprintf_r+0x18>
 800a5b0:	f7fd fb7e 	bl	8007cb0 <__sinit>
 800a5b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5b6:	07d9      	lsls	r1, r3, #31
 800a5b8:	d405      	bmi.n	800a5c6 <_vfiprintf_r+0x2a>
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	059a      	lsls	r2, r3, #22
 800a5be:	d402      	bmi.n	800a5c6 <_vfiprintf_r+0x2a>
 800a5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5c2:	f7fd fc9e 	bl	8007f02 <__retarget_lock_acquire_recursive>
 800a5c6:	89ab      	ldrh	r3, [r5, #12]
 800a5c8:	071b      	lsls	r3, r3, #28
 800a5ca:	d501      	bpl.n	800a5d0 <_vfiprintf_r+0x34>
 800a5cc:	692b      	ldr	r3, [r5, #16]
 800a5ce:	b99b      	cbnz	r3, 800a5f8 <_vfiprintf_r+0x5c>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f000 f9e4 	bl	800a9a0 <__swsetup_r>
 800a5d8:	b170      	cbz	r0, 800a5f8 <_vfiprintf_r+0x5c>
 800a5da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5dc:	07dc      	lsls	r4, r3, #31
 800a5de:	d504      	bpl.n	800a5ea <_vfiprintf_r+0x4e>
 800a5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e4:	b01d      	add	sp, #116	@ 0x74
 800a5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ea:	89ab      	ldrh	r3, [r5, #12]
 800a5ec:	0598      	lsls	r0, r3, #22
 800a5ee:	d4f7      	bmi.n	800a5e0 <_vfiprintf_r+0x44>
 800a5f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5f2:	f7fd fc87 	bl	8007f04 <__retarget_lock_release_recursive>
 800a5f6:	e7f3      	b.n	800a5e0 <_vfiprintf_r+0x44>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5fc:	2320      	movs	r3, #32
 800a5fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a602:	f8cd 800c 	str.w	r8, [sp, #12]
 800a606:	2330      	movs	r3, #48	@ 0x30
 800a608:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7b8 <_vfiprintf_r+0x21c>
 800a60c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a610:	f04f 0901 	mov.w	r9, #1
 800a614:	4623      	mov	r3, r4
 800a616:	469a      	mov	sl, r3
 800a618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a61c:	b10a      	cbz	r2, 800a622 <_vfiprintf_r+0x86>
 800a61e:	2a25      	cmp	r2, #37	@ 0x25
 800a620:	d1f9      	bne.n	800a616 <_vfiprintf_r+0x7a>
 800a622:	ebba 0b04 	subs.w	fp, sl, r4
 800a626:	d00b      	beq.n	800a640 <_vfiprintf_r+0xa4>
 800a628:	465b      	mov	r3, fp
 800a62a:	4622      	mov	r2, r4
 800a62c:	4629      	mov	r1, r5
 800a62e:	4630      	mov	r0, r6
 800a630:	f7ff ffa1 	bl	800a576 <__sfputs_r>
 800a634:	3001      	adds	r0, #1
 800a636:	f000 80a7 	beq.w	800a788 <_vfiprintf_r+0x1ec>
 800a63a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a63c:	445a      	add	r2, fp
 800a63e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a640:	f89a 3000 	ldrb.w	r3, [sl]
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 809f 	beq.w	800a788 <_vfiprintf_r+0x1ec>
 800a64a:	2300      	movs	r3, #0
 800a64c:	f04f 32ff 	mov.w	r2, #4294967295
 800a650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a654:	f10a 0a01 	add.w	sl, sl, #1
 800a658:	9304      	str	r3, [sp, #16]
 800a65a:	9307      	str	r3, [sp, #28]
 800a65c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a660:	931a      	str	r3, [sp, #104]	@ 0x68
 800a662:	4654      	mov	r4, sl
 800a664:	2205      	movs	r2, #5
 800a666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66a:	4853      	ldr	r0, [pc, #332]	@ (800a7b8 <_vfiprintf_r+0x21c>)
 800a66c:	f7f5 fe38 	bl	80002e0 <memchr>
 800a670:	9a04      	ldr	r2, [sp, #16]
 800a672:	b9d8      	cbnz	r0, 800a6ac <_vfiprintf_r+0x110>
 800a674:	06d1      	lsls	r1, r2, #27
 800a676:	bf44      	itt	mi
 800a678:	2320      	movmi	r3, #32
 800a67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a67e:	0713      	lsls	r3, r2, #28
 800a680:	bf44      	itt	mi
 800a682:	232b      	movmi	r3, #43	@ 0x2b
 800a684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a688:	f89a 3000 	ldrb.w	r3, [sl]
 800a68c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a68e:	d015      	beq.n	800a6bc <_vfiprintf_r+0x120>
 800a690:	9a07      	ldr	r2, [sp, #28]
 800a692:	4654      	mov	r4, sl
 800a694:	2000      	movs	r0, #0
 800a696:	f04f 0c0a 	mov.w	ip, #10
 800a69a:	4621      	mov	r1, r4
 800a69c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a0:	3b30      	subs	r3, #48	@ 0x30
 800a6a2:	2b09      	cmp	r3, #9
 800a6a4:	d94b      	bls.n	800a73e <_vfiprintf_r+0x1a2>
 800a6a6:	b1b0      	cbz	r0, 800a6d6 <_vfiprintf_r+0x13a>
 800a6a8:	9207      	str	r2, [sp, #28]
 800a6aa:	e014      	b.n	800a6d6 <_vfiprintf_r+0x13a>
 800a6ac:	eba0 0308 	sub.w	r3, r0, r8
 800a6b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	9304      	str	r3, [sp, #16]
 800a6b8:	46a2      	mov	sl, r4
 800a6ba:	e7d2      	b.n	800a662 <_vfiprintf_r+0xc6>
 800a6bc:	9b03      	ldr	r3, [sp, #12]
 800a6be:	1d19      	adds	r1, r3, #4
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	9103      	str	r1, [sp, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bfbb      	ittet	lt
 800a6c8:	425b      	neglt	r3, r3
 800a6ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a6ce:	9307      	strge	r3, [sp, #28]
 800a6d0:	9307      	strlt	r3, [sp, #28]
 800a6d2:	bfb8      	it	lt
 800a6d4:	9204      	strlt	r2, [sp, #16]
 800a6d6:	7823      	ldrb	r3, [r4, #0]
 800a6d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6da:	d10a      	bne.n	800a6f2 <_vfiprintf_r+0x156>
 800a6dc:	7863      	ldrb	r3, [r4, #1]
 800a6de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6e0:	d132      	bne.n	800a748 <_vfiprintf_r+0x1ac>
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	1d1a      	adds	r2, r3, #4
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	9203      	str	r2, [sp, #12]
 800a6ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6ee:	3402      	adds	r4, #2
 800a6f0:	9305      	str	r3, [sp, #20]
 800a6f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a7c8 <_vfiprintf_r+0x22c>
 800a6f6:	7821      	ldrb	r1, [r4, #0]
 800a6f8:	2203      	movs	r2, #3
 800a6fa:	4650      	mov	r0, sl
 800a6fc:	f7f5 fdf0 	bl	80002e0 <memchr>
 800a700:	b138      	cbz	r0, 800a712 <_vfiprintf_r+0x176>
 800a702:	9b04      	ldr	r3, [sp, #16]
 800a704:	eba0 000a 	sub.w	r0, r0, sl
 800a708:	2240      	movs	r2, #64	@ 0x40
 800a70a:	4082      	lsls	r2, r0
 800a70c:	4313      	orrs	r3, r2
 800a70e:	3401      	adds	r4, #1
 800a710:	9304      	str	r3, [sp, #16]
 800a712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a716:	4829      	ldr	r0, [pc, #164]	@ (800a7bc <_vfiprintf_r+0x220>)
 800a718:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a71c:	2206      	movs	r2, #6
 800a71e:	f7f5 fddf 	bl	80002e0 <memchr>
 800a722:	2800      	cmp	r0, #0
 800a724:	d03f      	beq.n	800a7a6 <_vfiprintf_r+0x20a>
 800a726:	4b26      	ldr	r3, [pc, #152]	@ (800a7c0 <_vfiprintf_r+0x224>)
 800a728:	bb1b      	cbnz	r3, 800a772 <_vfiprintf_r+0x1d6>
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	3307      	adds	r3, #7
 800a72e:	f023 0307 	bic.w	r3, r3, #7
 800a732:	3308      	adds	r3, #8
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a738:	443b      	add	r3, r7
 800a73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73c:	e76a      	b.n	800a614 <_vfiprintf_r+0x78>
 800a73e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a742:	460c      	mov	r4, r1
 800a744:	2001      	movs	r0, #1
 800a746:	e7a8      	b.n	800a69a <_vfiprintf_r+0xfe>
 800a748:	2300      	movs	r3, #0
 800a74a:	3401      	adds	r4, #1
 800a74c:	9305      	str	r3, [sp, #20]
 800a74e:	4619      	mov	r1, r3
 800a750:	f04f 0c0a 	mov.w	ip, #10
 800a754:	4620      	mov	r0, r4
 800a756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a75a:	3a30      	subs	r2, #48	@ 0x30
 800a75c:	2a09      	cmp	r2, #9
 800a75e:	d903      	bls.n	800a768 <_vfiprintf_r+0x1cc>
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0c6      	beq.n	800a6f2 <_vfiprintf_r+0x156>
 800a764:	9105      	str	r1, [sp, #20]
 800a766:	e7c4      	b.n	800a6f2 <_vfiprintf_r+0x156>
 800a768:	fb0c 2101 	mla	r1, ip, r1, r2
 800a76c:	4604      	mov	r4, r0
 800a76e:	2301      	movs	r3, #1
 800a770:	e7f0      	b.n	800a754 <_vfiprintf_r+0x1b8>
 800a772:	ab03      	add	r3, sp, #12
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	462a      	mov	r2, r5
 800a778:	4b12      	ldr	r3, [pc, #72]	@ (800a7c4 <_vfiprintf_r+0x228>)
 800a77a:	a904      	add	r1, sp, #16
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7fc fc57 	bl	8007030 <_printf_float>
 800a782:	4607      	mov	r7, r0
 800a784:	1c78      	adds	r0, r7, #1
 800a786:	d1d6      	bne.n	800a736 <_vfiprintf_r+0x19a>
 800a788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a78a:	07d9      	lsls	r1, r3, #31
 800a78c:	d405      	bmi.n	800a79a <_vfiprintf_r+0x1fe>
 800a78e:	89ab      	ldrh	r3, [r5, #12]
 800a790:	059a      	lsls	r2, r3, #22
 800a792:	d402      	bmi.n	800a79a <_vfiprintf_r+0x1fe>
 800a794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a796:	f7fd fbb5 	bl	8007f04 <__retarget_lock_release_recursive>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	065b      	lsls	r3, r3, #25
 800a79e:	f53f af1f 	bmi.w	800a5e0 <_vfiprintf_r+0x44>
 800a7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7a4:	e71e      	b.n	800a5e4 <_vfiprintf_r+0x48>
 800a7a6:	ab03      	add	r3, sp, #12
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	462a      	mov	r2, r5
 800a7ac:	4b05      	ldr	r3, [pc, #20]	@ (800a7c4 <_vfiprintf_r+0x228>)
 800a7ae:	a904      	add	r1, sp, #16
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f7fc fec5 	bl	8007540 <_printf_i>
 800a7b6:	e7e4      	b.n	800a782 <_vfiprintf_r+0x1e6>
 800a7b8:	0800d229 	.word	0x0800d229
 800a7bc:	0800d233 	.word	0x0800d233
 800a7c0:	08007031 	.word	0x08007031
 800a7c4:	0800a577 	.word	0x0800a577
 800a7c8:	0800d22f 	.word	0x0800d22f

0800a7cc <__sflush_r>:
 800a7cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d4:	0716      	lsls	r6, r2, #28
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	460c      	mov	r4, r1
 800a7da:	d454      	bmi.n	800a886 <__sflush_r+0xba>
 800a7dc:	684b      	ldr	r3, [r1, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	dc02      	bgt.n	800a7e8 <__sflush_r+0x1c>
 800a7e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	dd48      	ble.n	800a87a <__sflush_r+0xae>
 800a7e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	d045      	beq.n	800a87a <__sflush_r+0xae>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7f4:	682f      	ldr	r7, [r5, #0]
 800a7f6:	6a21      	ldr	r1, [r4, #32]
 800a7f8:	602b      	str	r3, [r5, #0]
 800a7fa:	d030      	beq.n	800a85e <__sflush_r+0x92>
 800a7fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	0759      	lsls	r1, r3, #29
 800a802:	d505      	bpl.n	800a810 <__sflush_r+0x44>
 800a804:	6863      	ldr	r3, [r4, #4]
 800a806:	1ad2      	subs	r2, r2, r3
 800a808:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a80a:	b10b      	cbz	r3, 800a810 <__sflush_r+0x44>
 800a80c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	2300      	movs	r3, #0
 800a812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a814:	6a21      	ldr	r1, [r4, #32]
 800a816:	4628      	mov	r0, r5
 800a818:	47b0      	blx	r6
 800a81a:	1c43      	adds	r3, r0, #1
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	d106      	bne.n	800a82e <__sflush_r+0x62>
 800a820:	6829      	ldr	r1, [r5, #0]
 800a822:	291d      	cmp	r1, #29
 800a824:	d82b      	bhi.n	800a87e <__sflush_r+0xb2>
 800a826:	4a2a      	ldr	r2, [pc, #168]	@ (800a8d0 <__sflush_r+0x104>)
 800a828:	410a      	asrs	r2, r1
 800a82a:	07d6      	lsls	r6, r2, #31
 800a82c:	d427      	bmi.n	800a87e <__sflush_r+0xb2>
 800a82e:	2200      	movs	r2, #0
 800a830:	6062      	str	r2, [r4, #4]
 800a832:	04d9      	lsls	r1, r3, #19
 800a834:	6922      	ldr	r2, [r4, #16]
 800a836:	6022      	str	r2, [r4, #0]
 800a838:	d504      	bpl.n	800a844 <__sflush_r+0x78>
 800a83a:	1c42      	adds	r2, r0, #1
 800a83c:	d101      	bne.n	800a842 <__sflush_r+0x76>
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	b903      	cbnz	r3, 800a844 <__sflush_r+0x78>
 800a842:	6560      	str	r0, [r4, #84]	@ 0x54
 800a844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a846:	602f      	str	r7, [r5, #0]
 800a848:	b1b9      	cbz	r1, 800a87a <__sflush_r+0xae>
 800a84a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a84e:	4299      	cmp	r1, r3
 800a850:	d002      	beq.n	800a858 <__sflush_r+0x8c>
 800a852:	4628      	mov	r0, r5
 800a854:	f7fe f93e 	bl	8008ad4 <_free_r>
 800a858:	2300      	movs	r3, #0
 800a85a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a85c:	e00d      	b.n	800a87a <__sflush_r+0xae>
 800a85e:	2301      	movs	r3, #1
 800a860:	4628      	mov	r0, r5
 800a862:	47b0      	blx	r6
 800a864:	4602      	mov	r2, r0
 800a866:	1c50      	adds	r0, r2, #1
 800a868:	d1c9      	bne.n	800a7fe <__sflush_r+0x32>
 800a86a:	682b      	ldr	r3, [r5, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d0c6      	beq.n	800a7fe <__sflush_r+0x32>
 800a870:	2b1d      	cmp	r3, #29
 800a872:	d001      	beq.n	800a878 <__sflush_r+0xac>
 800a874:	2b16      	cmp	r3, #22
 800a876:	d11e      	bne.n	800a8b6 <__sflush_r+0xea>
 800a878:	602f      	str	r7, [r5, #0]
 800a87a:	2000      	movs	r0, #0
 800a87c:	e022      	b.n	800a8c4 <__sflush_r+0xf8>
 800a87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a882:	b21b      	sxth	r3, r3
 800a884:	e01b      	b.n	800a8be <__sflush_r+0xf2>
 800a886:	690f      	ldr	r7, [r1, #16]
 800a888:	2f00      	cmp	r7, #0
 800a88a:	d0f6      	beq.n	800a87a <__sflush_r+0xae>
 800a88c:	0793      	lsls	r3, r2, #30
 800a88e:	680e      	ldr	r6, [r1, #0]
 800a890:	bf08      	it	eq
 800a892:	694b      	ldreq	r3, [r1, #20]
 800a894:	600f      	str	r7, [r1, #0]
 800a896:	bf18      	it	ne
 800a898:	2300      	movne	r3, #0
 800a89a:	eba6 0807 	sub.w	r8, r6, r7
 800a89e:	608b      	str	r3, [r1, #8]
 800a8a0:	f1b8 0f00 	cmp.w	r8, #0
 800a8a4:	dde9      	ble.n	800a87a <__sflush_r+0xae>
 800a8a6:	6a21      	ldr	r1, [r4, #32]
 800a8a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8aa:	4643      	mov	r3, r8
 800a8ac:	463a      	mov	r2, r7
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	47b0      	blx	r6
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	dc08      	bgt.n	800a8c8 <__sflush_r+0xfc>
 800a8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8be:	81a3      	strh	r3, [r4, #12]
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c8:	4407      	add	r7, r0
 800a8ca:	eba8 0800 	sub.w	r8, r8, r0
 800a8ce:	e7e7      	b.n	800a8a0 <__sflush_r+0xd4>
 800a8d0:	dfbffffe 	.word	0xdfbffffe

0800a8d4 <_fflush_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	690b      	ldr	r3, [r1, #16]
 800a8d8:	4605      	mov	r5, r0
 800a8da:	460c      	mov	r4, r1
 800a8dc:	b913      	cbnz	r3, 800a8e4 <_fflush_r+0x10>
 800a8de:	2500      	movs	r5, #0
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	b118      	cbz	r0, 800a8ee <_fflush_r+0x1a>
 800a8e6:	6a03      	ldr	r3, [r0, #32]
 800a8e8:	b90b      	cbnz	r3, 800a8ee <_fflush_r+0x1a>
 800a8ea:	f7fd f9e1 	bl	8007cb0 <__sinit>
 800a8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0f3      	beq.n	800a8de <_fflush_r+0xa>
 800a8f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8f8:	07d0      	lsls	r0, r2, #31
 800a8fa:	d404      	bmi.n	800a906 <_fflush_r+0x32>
 800a8fc:	0599      	lsls	r1, r3, #22
 800a8fe:	d402      	bmi.n	800a906 <_fflush_r+0x32>
 800a900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a902:	f7fd fafe 	bl	8007f02 <__retarget_lock_acquire_recursive>
 800a906:	4628      	mov	r0, r5
 800a908:	4621      	mov	r1, r4
 800a90a:	f7ff ff5f 	bl	800a7cc <__sflush_r>
 800a90e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a910:	07da      	lsls	r2, r3, #31
 800a912:	4605      	mov	r5, r0
 800a914:	d4e4      	bmi.n	800a8e0 <_fflush_r+0xc>
 800a916:	89a3      	ldrh	r3, [r4, #12]
 800a918:	059b      	lsls	r3, r3, #22
 800a91a:	d4e1      	bmi.n	800a8e0 <_fflush_r+0xc>
 800a91c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a91e:	f7fd faf1 	bl	8007f04 <__retarget_lock_release_recursive>
 800a922:	e7dd      	b.n	800a8e0 <_fflush_r+0xc>

0800a924 <__swbuf_r>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	460e      	mov	r6, r1
 800a928:	4614      	mov	r4, r2
 800a92a:	4605      	mov	r5, r0
 800a92c:	b118      	cbz	r0, 800a936 <__swbuf_r+0x12>
 800a92e:	6a03      	ldr	r3, [r0, #32]
 800a930:	b90b      	cbnz	r3, 800a936 <__swbuf_r+0x12>
 800a932:	f7fd f9bd 	bl	8007cb0 <__sinit>
 800a936:	69a3      	ldr	r3, [r4, #24]
 800a938:	60a3      	str	r3, [r4, #8]
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	071a      	lsls	r2, r3, #28
 800a93e:	d501      	bpl.n	800a944 <__swbuf_r+0x20>
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	b943      	cbnz	r3, 800a956 <__swbuf_r+0x32>
 800a944:	4621      	mov	r1, r4
 800a946:	4628      	mov	r0, r5
 800a948:	f000 f82a 	bl	800a9a0 <__swsetup_r>
 800a94c:	b118      	cbz	r0, 800a956 <__swbuf_r+0x32>
 800a94e:	f04f 37ff 	mov.w	r7, #4294967295
 800a952:	4638      	mov	r0, r7
 800a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	6922      	ldr	r2, [r4, #16]
 800a95a:	1a98      	subs	r0, r3, r2
 800a95c:	6963      	ldr	r3, [r4, #20]
 800a95e:	b2f6      	uxtb	r6, r6
 800a960:	4283      	cmp	r3, r0
 800a962:	4637      	mov	r7, r6
 800a964:	dc05      	bgt.n	800a972 <__swbuf_r+0x4e>
 800a966:	4621      	mov	r1, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	f7ff ffb3 	bl	800a8d4 <_fflush_r>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d1ed      	bne.n	800a94e <__swbuf_r+0x2a>
 800a972:	68a3      	ldr	r3, [r4, #8]
 800a974:	3b01      	subs	r3, #1
 800a976:	60a3      	str	r3, [r4, #8]
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	6022      	str	r2, [r4, #0]
 800a97e:	701e      	strb	r6, [r3, #0]
 800a980:	6962      	ldr	r2, [r4, #20]
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	429a      	cmp	r2, r3
 800a986:	d004      	beq.n	800a992 <__swbuf_r+0x6e>
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	07db      	lsls	r3, r3, #31
 800a98c:	d5e1      	bpl.n	800a952 <__swbuf_r+0x2e>
 800a98e:	2e0a      	cmp	r6, #10
 800a990:	d1df      	bne.n	800a952 <__swbuf_r+0x2e>
 800a992:	4621      	mov	r1, r4
 800a994:	4628      	mov	r0, r5
 800a996:	f7ff ff9d 	bl	800a8d4 <_fflush_r>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d0d9      	beq.n	800a952 <__swbuf_r+0x2e>
 800a99e:	e7d6      	b.n	800a94e <__swbuf_r+0x2a>

0800a9a0 <__swsetup_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4b29      	ldr	r3, [pc, #164]	@ (800aa48 <__swsetup_r+0xa8>)
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	b118      	cbz	r0, 800a9b4 <__swsetup_r+0x14>
 800a9ac:	6a03      	ldr	r3, [r0, #32]
 800a9ae:	b90b      	cbnz	r3, 800a9b4 <__swsetup_r+0x14>
 800a9b0:	f7fd f97e 	bl	8007cb0 <__sinit>
 800a9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b8:	0719      	lsls	r1, r3, #28
 800a9ba:	d422      	bmi.n	800aa02 <__swsetup_r+0x62>
 800a9bc:	06da      	lsls	r2, r3, #27
 800a9be:	d407      	bmi.n	800a9d0 <__swsetup_r+0x30>
 800a9c0:	2209      	movs	r2, #9
 800a9c2:	602a      	str	r2, [r5, #0]
 800a9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c8:	81a3      	strh	r3, [r4, #12]
 800a9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ce:	e033      	b.n	800aa38 <__swsetup_r+0x98>
 800a9d0:	0758      	lsls	r0, r3, #29
 800a9d2:	d512      	bpl.n	800a9fa <__swsetup_r+0x5a>
 800a9d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9d6:	b141      	cbz	r1, 800a9ea <__swsetup_r+0x4a>
 800a9d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d002      	beq.n	800a9e6 <__swsetup_r+0x46>
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f7fe f877 	bl	8008ad4 <_free_r>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	6063      	str	r3, [r4, #4]
 800a9f6:	6923      	ldr	r3, [r4, #16]
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f043 0308 	orr.w	r3, r3, #8
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	b94b      	cbnz	r3, 800aa1a <__swsetup_r+0x7a>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa10:	d003      	beq.n	800aa1a <__swsetup_r+0x7a>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4628      	mov	r0, r5
 800aa16:	f000 fc5b 	bl	800b2d0 <__smakebuf_r>
 800aa1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa1e:	f013 0201 	ands.w	r2, r3, #1
 800aa22:	d00a      	beq.n	800aa3a <__swsetup_r+0x9a>
 800aa24:	2200      	movs	r2, #0
 800aa26:	60a2      	str	r2, [r4, #8]
 800aa28:	6962      	ldr	r2, [r4, #20]
 800aa2a:	4252      	negs	r2, r2
 800aa2c:	61a2      	str	r2, [r4, #24]
 800aa2e:	6922      	ldr	r2, [r4, #16]
 800aa30:	b942      	cbnz	r2, 800aa44 <__swsetup_r+0xa4>
 800aa32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa36:	d1c5      	bne.n	800a9c4 <__swsetup_r+0x24>
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	0799      	lsls	r1, r3, #30
 800aa3c:	bf58      	it	pl
 800aa3e:	6962      	ldrpl	r2, [r4, #20]
 800aa40:	60a2      	str	r2, [r4, #8]
 800aa42:	e7f4      	b.n	800aa2e <__swsetup_r+0x8e>
 800aa44:	2000      	movs	r0, #0
 800aa46:	e7f7      	b.n	800aa38 <__swsetup_r+0x98>
 800aa48:	24000040 	.word	0x24000040

0800aa4c <memmove>:
 800aa4c:	4288      	cmp	r0, r1
 800aa4e:	b510      	push	{r4, lr}
 800aa50:	eb01 0402 	add.w	r4, r1, r2
 800aa54:	d902      	bls.n	800aa5c <memmove+0x10>
 800aa56:	4284      	cmp	r4, r0
 800aa58:	4623      	mov	r3, r4
 800aa5a:	d807      	bhi.n	800aa6c <memmove+0x20>
 800aa5c:	1e43      	subs	r3, r0, #1
 800aa5e:	42a1      	cmp	r1, r4
 800aa60:	d008      	beq.n	800aa74 <memmove+0x28>
 800aa62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa6a:	e7f8      	b.n	800aa5e <memmove+0x12>
 800aa6c:	4402      	add	r2, r0
 800aa6e:	4601      	mov	r1, r0
 800aa70:	428a      	cmp	r2, r1
 800aa72:	d100      	bne.n	800aa76 <memmove+0x2a>
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa7e:	e7f7      	b.n	800aa70 <memmove+0x24>

0800aa80 <strncmp>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	b16a      	cbz	r2, 800aaa0 <strncmp+0x20>
 800aa84:	3901      	subs	r1, #1
 800aa86:	1884      	adds	r4, r0, r2
 800aa88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d103      	bne.n	800aa9c <strncmp+0x1c>
 800aa94:	42a0      	cmp	r0, r4
 800aa96:	d001      	beq.n	800aa9c <strncmp+0x1c>
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	d1f5      	bne.n	800aa88 <strncmp+0x8>
 800aa9c:	1ad0      	subs	r0, r2, r3
 800aa9e:	bd10      	pop	{r4, pc}
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	e7fc      	b.n	800aa9e <strncmp+0x1e>

0800aaa4 <_sbrk_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d06      	ldr	r5, [pc, #24]	@ (800aac0 <_sbrk_r+0x1c>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	f7f7 f8c2 	bl	8001c38 <_sbrk>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_sbrk_r+0x1a>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_sbrk_r+0x1a>
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	240004c0 	.word	0x240004c0

0800aac4 <memcpy>:
 800aac4:	440a      	add	r2, r1
 800aac6:	4291      	cmp	r1, r2
 800aac8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aacc:	d100      	bne.n	800aad0 <memcpy+0xc>
 800aace:	4770      	bx	lr
 800aad0:	b510      	push	{r4, lr}
 800aad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aada:	4291      	cmp	r1, r2
 800aadc:	d1f9      	bne.n	800aad2 <memcpy+0xe>
 800aade:	bd10      	pop	{r4, pc}

0800aae0 <nan>:
 800aae0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aae8 <nan+0x8>
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	00000000 	.word	0x00000000
 800aaec:	7ff80000 	.word	0x7ff80000

0800aaf0 <__assert_func>:
 800aaf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaf2:	4614      	mov	r4, r2
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	4b09      	ldr	r3, [pc, #36]	@ (800ab1c <__assert_func+0x2c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4605      	mov	r5, r0
 800aafc:	68d8      	ldr	r0, [r3, #12]
 800aafe:	b954      	cbnz	r4, 800ab16 <__assert_func+0x26>
 800ab00:	4b07      	ldr	r3, [pc, #28]	@ (800ab20 <__assert_func+0x30>)
 800ab02:	461c      	mov	r4, r3
 800ab04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab08:	9100      	str	r1, [sp, #0]
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	4905      	ldr	r1, [pc, #20]	@ (800ab24 <__assert_func+0x34>)
 800ab0e:	f000 fba7 	bl	800b260 <fiprintf>
 800ab12:	f000 fc3b 	bl	800b38c <abort>
 800ab16:	4b04      	ldr	r3, [pc, #16]	@ (800ab28 <__assert_func+0x38>)
 800ab18:	e7f4      	b.n	800ab04 <__assert_func+0x14>
 800ab1a:	bf00      	nop
 800ab1c:	24000040 	.word	0x24000040
 800ab20:	0800d27d 	.word	0x0800d27d
 800ab24:	0800d24f 	.word	0x0800d24f
 800ab28:	0800d242 	.word	0x0800d242

0800ab2c <_calloc_r>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	fba1 5402 	umull	r5, r4, r1, r2
 800ab32:	b93c      	cbnz	r4, 800ab44 <_calloc_r+0x18>
 800ab34:	4629      	mov	r1, r5
 800ab36:	f7fe f841 	bl	8008bbc <_malloc_r>
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	b928      	cbnz	r0, 800ab4a <_calloc_r+0x1e>
 800ab3e:	2600      	movs	r6, #0
 800ab40:	4630      	mov	r0, r6
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	220c      	movs	r2, #12
 800ab46:	6002      	str	r2, [r0, #0]
 800ab48:	e7f9      	b.n	800ab3e <_calloc_r+0x12>
 800ab4a:	462a      	mov	r2, r5
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	f7fd f95a 	bl	8007e06 <memset>
 800ab52:	e7f5      	b.n	800ab40 <_calloc_r+0x14>

0800ab54 <rshift>:
 800ab54:	6903      	ldr	r3, [r0, #16]
 800ab56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab62:	f100 0414 	add.w	r4, r0, #20
 800ab66:	dd45      	ble.n	800abf4 <rshift+0xa0>
 800ab68:	f011 011f 	ands.w	r1, r1, #31
 800ab6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab74:	d10c      	bne.n	800ab90 <rshift+0x3c>
 800ab76:	f100 0710 	add.w	r7, r0, #16
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	42b1      	cmp	r1, r6
 800ab7e:	d334      	bcc.n	800abea <rshift+0x96>
 800ab80:	1a9b      	subs	r3, r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	1eea      	subs	r2, r5, #3
 800ab86:	4296      	cmp	r6, r2
 800ab88:	bf38      	it	cc
 800ab8a:	2300      	movcc	r3, #0
 800ab8c:	4423      	add	r3, r4
 800ab8e:	e015      	b.n	800abbc <rshift+0x68>
 800ab90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab94:	f1c1 0820 	rsb	r8, r1, #32
 800ab98:	40cf      	lsrs	r7, r1
 800ab9a:	f105 0e04 	add.w	lr, r5, #4
 800ab9e:	46a1      	mov	r9, r4
 800aba0:	4576      	cmp	r6, lr
 800aba2:	46f4      	mov	ip, lr
 800aba4:	d815      	bhi.n	800abd2 <rshift+0x7e>
 800aba6:	1a9a      	subs	r2, r3, r2
 800aba8:	0092      	lsls	r2, r2, #2
 800abaa:	3a04      	subs	r2, #4
 800abac:	3501      	adds	r5, #1
 800abae:	42ae      	cmp	r6, r5
 800abb0:	bf38      	it	cc
 800abb2:	2200      	movcc	r2, #0
 800abb4:	18a3      	adds	r3, r4, r2
 800abb6:	50a7      	str	r7, [r4, r2]
 800abb8:	b107      	cbz	r7, 800abbc <rshift+0x68>
 800abba:	3304      	adds	r3, #4
 800abbc:	1b1a      	subs	r2, r3, r4
 800abbe:	42a3      	cmp	r3, r4
 800abc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abc4:	bf08      	it	eq
 800abc6:	2300      	moveq	r3, #0
 800abc8:	6102      	str	r2, [r0, #16]
 800abca:	bf08      	it	eq
 800abcc:	6143      	streq	r3, [r0, #20]
 800abce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abd2:	f8dc c000 	ldr.w	ip, [ip]
 800abd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800abda:	ea4c 0707 	orr.w	r7, ip, r7
 800abde:	f849 7b04 	str.w	r7, [r9], #4
 800abe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abe6:	40cf      	lsrs	r7, r1
 800abe8:	e7da      	b.n	800aba0 <rshift+0x4c>
 800abea:	f851 cb04 	ldr.w	ip, [r1], #4
 800abee:	f847 cf04 	str.w	ip, [r7, #4]!
 800abf2:	e7c3      	b.n	800ab7c <rshift+0x28>
 800abf4:	4623      	mov	r3, r4
 800abf6:	e7e1      	b.n	800abbc <rshift+0x68>

0800abf8 <__hexdig_fun>:
 800abf8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800abfc:	2b09      	cmp	r3, #9
 800abfe:	d802      	bhi.n	800ac06 <__hexdig_fun+0xe>
 800ac00:	3820      	subs	r0, #32
 800ac02:	b2c0      	uxtb	r0, r0
 800ac04:	4770      	bx	lr
 800ac06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac0a:	2b05      	cmp	r3, #5
 800ac0c:	d801      	bhi.n	800ac12 <__hexdig_fun+0x1a>
 800ac0e:	3847      	subs	r0, #71	@ 0x47
 800ac10:	e7f7      	b.n	800ac02 <__hexdig_fun+0xa>
 800ac12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac16:	2b05      	cmp	r3, #5
 800ac18:	d801      	bhi.n	800ac1e <__hexdig_fun+0x26>
 800ac1a:	3827      	subs	r0, #39	@ 0x27
 800ac1c:	e7f1      	b.n	800ac02 <__hexdig_fun+0xa>
 800ac1e:	2000      	movs	r0, #0
 800ac20:	4770      	bx	lr
	...

0800ac24 <__gethex>:
 800ac24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	468a      	mov	sl, r1
 800ac2c:	9302      	str	r3, [sp, #8]
 800ac2e:	680b      	ldr	r3, [r1, #0]
 800ac30:	9001      	str	r0, [sp, #4]
 800ac32:	4690      	mov	r8, r2
 800ac34:	1c9c      	adds	r4, r3, #2
 800ac36:	46a1      	mov	r9, r4
 800ac38:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac3c:	2830      	cmp	r0, #48	@ 0x30
 800ac3e:	d0fa      	beq.n	800ac36 <__gethex+0x12>
 800ac40:	eba9 0303 	sub.w	r3, r9, r3
 800ac44:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac48:	f7ff ffd6 	bl	800abf8 <__hexdig_fun>
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d168      	bne.n	800ad24 <__gethex+0x100>
 800ac52:	49a0      	ldr	r1, [pc, #640]	@ (800aed4 <__gethex+0x2b0>)
 800ac54:	2201      	movs	r2, #1
 800ac56:	4648      	mov	r0, r9
 800ac58:	f7ff ff12 	bl	800aa80 <strncmp>
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d167      	bne.n	800ad32 <__gethex+0x10e>
 800ac62:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac66:	4626      	mov	r6, r4
 800ac68:	f7ff ffc6 	bl	800abf8 <__hexdig_fun>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d062      	beq.n	800ad36 <__gethex+0x112>
 800ac70:	4623      	mov	r3, r4
 800ac72:	7818      	ldrb	r0, [r3, #0]
 800ac74:	2830      	cmp	r0, #48	@ 0x30
 800ac76:	4699      	mov	r9, r3
 800ac78:	f103 0301 	add.w	r3, r3, #1
 800ac7c:	d0f9      	beq.n	800ac72 <__gethex+0x4e>
 800ac7e:	f7ff ffbb 	bl	800abf8 <__hexdig_fun>
 800ac82:	fab0 f580 	clz	r5, r0
 800ac86:	096d      	lsrs	r5, r5, #5
 800ac88:	f04f 0b01 	mov.w	fp, #1
 800ac8c:	464a      	mov	r2, r9
 800ac8e:	4616      	mov	r6, r2
 800ac90:	3201      	adds	r2, #1
 800ac92:	7830      	ldrb	r0, [r6, #0]
 800ac94:	f7ff ffb0 	bl	800abf8 <__hexdig_fun>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d1f8      	bne.n	800ac8e <__gethex+0x6a>
 800ac9c:	498d      	ldr	r1, [pc, #564]	@ (800aed4 <__gethex+0x2b0>)
 800ac9e:	2201      	movs	r2, #1
 800aca0:	4630      	mov	r0, r6
 800aca2:	f7ff feed 	bl	800aa80 <strncmp>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d13f      	bne.n	800ad2a <__gethex+0x106>
 800acaa:	b944      	cbnz	r4, 800acbe <__gethex+0x9a>
 800acac:	1c74      	adds	r4, r6, #1
 800acae:	4622      	mov	r2, r4
 800acb0:	4616      	mov	r6, r2
 800acb2:	3201      	adds	r2, #1
 800acb4:	7830      	ldrb	r0, [r6, #0]
 800acb6:	f7ff ff9f 	bl	800abf8 <__hexdig_fun>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d1f8      	bne.n	800acb0 <__gethex+0x8c>
 800acbe:	1ba4      	subs	r4, r4, r6
 800acc0:	00a7      	lsls	r7, r4, #2
 800acc2:	7833      	ldrb	r3, [r6, #0]
 800acc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acc8:	2b50      	cmp	r3, #80	@ 0x50
 800acca:	d13e      	bne.n	800ad4a <__gethex+0x126>
 800accc:	7873      	ldrb	r3, [r6, #1]
 800acce:	2b2b      	cmp	r3, #43	@ 0x2b
 800acd0:	d033      	beq.n	800ad3a <__gethex+0x116>
 800acd2:	2b2d      	cmp	r3, #45	@ 0x2d
 800acd4:	d034      	beq.n	800ad40 <__gethex+0x11c>
 800acd6:	1c71      	adds	r1, r6, #1
 800acd8:	2400      	movs	r4, #0
 800acda:	7808      	ldrb	r0, [r1, #0]
 800acdc:	f7ff ff8c 	bl	800abf8 <__hexdig_fun>
 800ace0:	1e43      	subs	r3, r0, #1
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b18      	cmp	r3, #24
 800ace6:	d830      	bhi.n	800ad4a <__gethex+0x126>
 800ace8:	f1a0 0210 	sub.w	r2, r0, #16
 800acec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acf0:	f7ff ff82 	bl	800abf8 <__hexdig_fun>
 800acf4:	f100 3cff 	add.w	ip, r0, #4294967295
 800acf8:	fa5f fc8c 	uxtb.w	ip, ip
 800acfc:	f1bc 0f18 	cmp.w	ip, #24
 800ad00:	f04f 030a 	mov.w	r3, #10
 800ad04:	d91e      	bls.n	800ad44 <__gethex+0x120>
 800ad06:	b104      	cbz	r4, 800ad0a <__gethex+0xe6>
 800ad08:	4252      	negs	r2, r2
 800ad0a:	4417      	add	r7, r2
 800ad0c:	f8ca 1000 	str.w	r1, [sl]
 800ad10:	b1ed      	cbz	r5, 800ad4e <__gethex+0x12a>
 800ad12:	f1bb 0f00 	cmp.w	fp, #0
 800ad16:	bf0c      	ite	eq
 800ad18:	2506      	moveq	r5, #6
 800ad1a:	2500      	movne	r5, #0
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	b005      	add	sp, #20
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	2500      	movs	r5, #0
 800ad26:	462c      	mov	r4, r5
 800ad28:	e7b0      	b.n	800ac8c <__gethex+0x68>
 800ad2a:	2c00      	cmp	r4, #0
 800ad2c:	d1c7      	bne.n	800acbe <__gethex+0x9a>
 800ad2e:	4627      	mov	r7, r4
 800ad30:	e7c7      	b.n	800acc2 <__gethex+0x9e>
 800ad32:	464e      	mov	r6, r9
 800ad34:	462f      	mov	r7, r5
 800ad36:	2501      	movs	r5, #1
 800ad38:	e7c3      	b.n	800acc2 <__gethex+0x9e>
 800ad3a:	2400      	movs	r4, #0
 800ad3c:	1cb1      	adds	r1, r6, #2
 800ad3e:	e7cc      	b.n	800acda <__gethex+0xb6>
 800ad40:	2401      	movs	r4, #1
 800ad42:	e7fb      	b.n	800ad3c <__gethex+0x118>
 800ad44:	fb03 0002 	mla	r0, r3, r2, r0
 800ad48:	e7ce      	b.n	800ace8 <__gethex+0xc4>
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	e7de      	b.n	800ad0c <__gethex+0xe8>
 800ad4e:	eba6 0309 	sub.w	r3, r6, r9
 800ad52:	3b01      	subs	r3, #1
 800ad54:	4629      	mov	r1, r5
 800ad56:	2b07      	cmp	r3, #7
 800ad58:	dc0a      	bgt.n	800ad70 <__gethex+0x14c>
 800ad5a:	9801      	ldr	r0, [sp, #4]
 800ad5c:	f7fd ffba 	bl	8008cd4 <_Balloc>
 800ad60:	4604      	mov	r4, r0
 800ad62:	b940      	cbnz	r0, 800ad76 <__gethex+0x152>
 800ad64:	4b5c      	ldr	r3, [pc, #368]	@ (800aed8 <__gethex+0x2b4>)
 800ad66:	4602      	mov	r2, r0
 800ad68:	21e4      	movs	r1, #228	@ 0xe4
 800ad6a:	485c      	ldr	r0, [pc, #368]	@ (800aedc <__gethex+0x2b8>)
 800ad6c:	f7ff fec0 	bl	800aaf0 <__assert_func>
 800ad70:	3101      	adds	r1, #1
 800ad72:	105b      	asrs	r3, r3, #1
 800ad74:	e7ef      	b.n	800ad56 <__gethex+0x132>
 800ad76:	f100 0a14 	add.w	sl, r0, #20
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4655      	mov	r5, sl
 800ad7e:	469b      	mov	fp, r3
 800ad80:	45b1      	cmp	r9, r6
 800ad82:	d337      	bcc.n	800adf4 <__gethex+0x1d0>
 800ad84:	f845 bb04 	str.w	fp, [r5], #4
 800ad88:	eba5 050a 	sub.w	r5, r5, sl
 800ad8c:	10ad      	asrs	r5, r5, #2
 800ad8e:	6125      	str	r5, [r4, #16]
 800ad90:	4658      	mov	r0, fp
 800ad92:	f7fe f891 	bl	8008eb8 <__hi0bits>
 800ad96:	016d      	lsls	r5, r5, #5
 800ad98:	f8d8 6000 	ldr.w	r6, [r8]
 800ad9c:	1a2d      	subs	r5, r5, r0
 800ad9e:	42b5      	cmp	r5, r6
 800ada0:	dd54      	ble.n	800ae4c <__gethex+0x228>
 800ada2:	1bad      	subs	r5, r5, r6
 800ada4:	4629      	mov	r1, r5
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7fe fc22 	bl	80095f0 <__any_on>
 800adac:	4681      	mov	r9, r0
 800adae:	b178      	cbz	r0, 800add0 <__gethex+0x1ac>
 800adb0:	1e6b      	subs	r3, r5, #1
 800adb2:	1159      	asrs	r1, r3, #5
 800adb4:	f003 021f 	and.w	r2, r3, #31
 800adb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800adbc:	f04f 0901 	mov.w	r9, #1
 800adc0:	fa09 f202 	lsl.w	r2, r9, r2
 800adc4:	420a      	tst	r2, r1
 800adc6:	d003      	beq.n	800add0 <__gethex+0x1ac>
 800adc8:	454b      	cmp	r3, r9
 800adca:	dc36      	bgt.n	800ae3a <__gethex+0x216>
 800adcc:	f04f 0902 	mov.w	r9, #2
 800add0:	4629      	mov	r1, r5
 800add2:	4620      	mov	r0, r4
 800add4:	f7ff febe 	bl	800ab54 <rshift>
 800add8:	442f      	add	r7, r5
 800adda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adde:	42bb      	cmp	r3, r7
 800ade0:	da42      	bge.n	800ae68 <__gethex+0x244>
 800ade2:	9801      	ldr	r0, [sp, #4]
 800ade4:	4621      	mov	r1, r4
 800ade6:	f7fd ffb5 	bl	8008d54 <_Bfree>
 800adea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adec:	2300      	movs	r3, #0
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	25a3      	movs	r5, #163	@ 0xa3
 800adf2:	e793      	b.n	800ad1c <__gethex+0xf8>
 800adf4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800adf8:	2a2e      	cmp	r2, #46	@ 0x2e
 800adfa:	d012      	beq.n	800ae22 <__gethex+0x1fe>
 800adfc:	2b20      	cmp	r3, #32
 800adfe:	d104      	bne.n	800ae0a <__gethex+0x1e6>
 800ae00:	f845 bb04 	str.w	fp, [r5], #4
 800ae04:	f04f 0b00 	mov.w	fp, #0
 800ae08:	465b      	mov	r3, fp
 800ae0a:	7830      	ldrb	r0, [r6, #0]
 800ae0c:	9303      	str	r3, [sp, #12]
 800ae0e:	f7ff fef3 	bl	800abf8 <__hexdig_fun>
 800ae12:	9b03      	ldr	r3, [sp, #12]
 800ae14:	f000 000f 	and.w	r0, r0, #15
 800ae18:	4098      	lsls	r0, r3
 800ae1a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae1e:	3304      	adds	r3, #4
 800ae20:	e7ae      	b.n	800ad80 <__gethex+0x15c>
 800ae22:	45b1      	cmp	r9, r6
 800ae24:	d8ea      	bhi.n	800adfc <__gethex+0x1d8>
 800ae26:	492b      	ldr	r1, [pc, #172]	@ (800aed4 <__gethex+0x2b0>)
 800ae28:	9303      	str	r3, [sp, #12]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff fe27 	bl	800aa80 <strncmp>
 800ae32:	9b03      	ldr	r3, [sp, #12]
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d1e1      	bne.n	800adfc <__gethex+0x1d8>
 800ae38:	e7a2      	b.n	800ad80 <__gethex+0x15c>
 800ae3a:	1ea9      	subs	r1, r5, #2
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f7fe fbd7 	bl	80095f0 <__any_on>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d0c2      	beq.n	800adcc <__gethex+0x1a8>
 800ae46:	f04f 0903 	mov.w	r9, #3
 800ae4a:	e7c1      	b.n	800add0 <__gethex+0x1ac>
 800ae4c:	da09      	bge.n	800ae62 <__gethex+0x23e>
 800ae4e:	1b75      	subs	r5, r6, r5
 800ae50:	4621      	mov	r1, r4
 800ae52:	9801      	ldr	r0, [sp, #4]
 800ae54:	462a      	mov	r2, r5
 800ae56:	f7fe f995 	bl	8009184 <__lshift>
 800ae5a:	1b7f      	subs	r7, r7, r5
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	f100 0a14 	add.w	sl, r0, #20
 800ae62:	f04f 0900 	mov.w	r9, #0
 800ae66:	e7b8      	b.n	800adda <__gethex+0x1b6>
 800ae68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae6c:	42bd      	cmp	r5, r7
 800ae6e:	dd6f      	ble.n	800af50 <__gethex+0x32c>
 800ae70:	1bed      	subs	r5, r5, r7
 800ae72:	42ae      	cmp	r6, r5
 800ae74:	dc34      	bgt.n	800aee0 <__gethex+0x2bc>
 800ae76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d022      	beq.n	800aec4 <__gethex+0x2a0>
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d024      	beq.n	800aecc <__gethex+0x2a8>
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d115      	bne.n	800aeb2 <__gethex+0x28e>
 800ae86:	42ae      	cmp	r6, r5
 800ae88:	d113      	bne.n	800aeb2 <__gethex+0x28e>
 800ae8a:	2e01      	cmp	r6, #1
 800ae8c:	d10b      	bne.n	800aea6 <__gethex+0x282>
 800ae8e:	9a02      	ldr	r2, [sp, #8]
 800ae90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	2301      	movs	r3, #1
 800ae98:	6123      	str	r3, [r4, #16]
 800ae9a:	f8ca 3000 	str.w	r3, [sl]
 800ae9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aea0:	2562      	movs	r5, #98	@ 0x62
 800aea2:	601c      	str	r4, [r3, #0]
 800aea4:	e73a      	b.n	800ad1c <__gethex+0xf8>
 800aea6:	1e71      	subs	r1, r6, #1
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7fe fba1 	bl	80095f0 <__any_on>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d1ed      	bne.n	800ae8e <__gethex+0x26a>
 800aeb2:	9801      	ldr	r0, [sp, #4]
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	f7fd ff4d 	bl	8008d54 <_Bfree>
 800aeba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aebc:	2300      	movs	r3, #0
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	2550      	movs	r5, #80	@ 0x50
 800aec2:	e72b      	b.n	800ad1c <__gethex+0xf8>
 800aec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1f3      	bne.n	800aeb2 <__gethex+0x28e>
 800aeca:	e7e0      	b.n	800ae8e <__gethex+0x26a>
 800aecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1dd      	bne.n	800ae8e <__gethex+0x26a>
 800aed2:	e7ee      	b.n	800aeb2 <__gethex+0x28e>
 800aed4:	0800d0d0 	.word	0x0800d0d0
 800aed8:	0800cf69 	.word	0x0800cf69
 800aedc:	0800d27e 	.word	0x0800d27e
 800aee0:	1e6f      	subs	r7, r5, #1
 800aee2:	f1b9 0f00 	cmp.w	r9, #0
 800aee6:	d130      	bne.n	800af4a <__gethex+0x326>
 800aee8:	b127      	cbz	r7, 800aef4 <__gethex+0x2d0>
 800aeea:	4639      	mov	r1, r7
 800aeec:	4620      	mov	r0, r4
 800aeee:	f7fe fb7f 	bl	80095f0 <__any_on>
 800aef2:	4681      	mov	r9, r0
 800aef4:	117a      	asrs	r2, r7, #5
 800aef6:	2301      	movs	r3, #1
 800aef8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aefc:	f007 071f 	and.w	r7, r7, #31
 800af00:	40bb      	lsls	r3, r7
 800af02:	4213      	tst	r3, r2
 800af04:	4629      	mov	r1, r5
 800af06:	4620      	mov	r0, r4
 800af08:	bf18      	it	ne
 800af0a:	f049 0902 	orrne.w	r9, r9, #2
 800af0e:	f7ff fe21 	bl	800ab54 <rshift>
 800af12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af16:	1b76      	subs	r6, r6, r5
 800af18:	2502      	movs	r5, #2
 800af1a:	f1b9 0f00 	cmp.w	r9, #0
 800af1e:	d047      	beq.n	800afb0 <__gethex+0x38c>
 800af20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af24:	2b02      	cmp	r3, #2
 800af26:	d015      	beq.n	800af54 <__gethex+0x330>
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d017      	beq.n	800af5c <__gethex+0x338>
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d109      	bne.n	800af44 <__gethex+0x320>
 800af30:	f019 0f02 	tst.w	r9, #2
 800af34:	d006      	beq.n	800af44 <__gethex+0x320>
 800af36:	f8da 3000 	ldr.w	r3, [sl]
 800af3a:	ea49 0903 	orr.w	r9, r9, r3
 800af3e:	f019 0f01 	tst.w	r9, #1
 800af42:	d10e      	bne.n	800af62 <__gethex+0x33e>
 800af44:	f045 0510 	orr.w	r5, r5, #16
 800af48:	e032      	b.n	800afb0 <__gethex+0x38c>
 800af4a:	f04f 0901 	mov.w	r9, #1
 800af4e:	e7d1      	b.n	800aef4 <__gethex+0x2d0>
 800af50:	2501      	movs	r5, #1
 800af52:	e7e2      	b.n	800af1a <__gethex+0x2f6>
 800af54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af56:	f1c3 0301 	rsb	r3, r3, #1
 800af5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0f0      	beq.n	800af44 <__gethex+0x320>
 800af62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af66:	f104 0314 	add.w	r3, r4, #20
 800af6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af72:	f04f 0c00 	mov.w	ip, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f853 2b04 	ldr.w	r2, [r3], #4
 800af7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af80:	d01b      	beq.n	800afba <__gethex+0x396>
 800af82:	3201      	adds	r2, #1
 800af84:	6002      	str	r2, [r0, #0]
 800af86:	2d02      	cmp	r5, #2
 800af88:	f104 0314 	add.w	r3, r4, #20
 800af8c:	d13c      	bne.n	800b008 <__gethex+0x3e4>
 800af8e:	f8d8 2000 	ldr.w	r2, [r8]
 800af92:	3a01      	subs	r2, #1
 800af94:	42b2      	cmp	r2, r6
 800af96:	d109      	bne.n	800afac <__gethex+0x388>
 800af98:	1171      	asrs	r1, r6, #5
 800af9a:	2201      	movs	r2, #1
 800af9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afa0:	f006 061f 	and.w	r6, r6, #31
 800afa4:	fa02 f606 	lsl.w	r6, r2, r6
 800afa8:	421e      	tst	r6, r3
 800afaa:	d13a      	bne.n	800b022 <__gethex+0x3fe>
 800afac:	f045 0520 	orr.w	r5, r5, #32
 800afb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afb2:	601c      	str	r4, [r3, #0]
 800afb4:	9b02      	ldr	r3, [sp, #8]
 800afb6:	601f      	str	r7, [r3, #0]
 800afb8:	e6b0      	b.n	800ad1c <__gethex+0xf8>
 800afba:	4299      	cmp	r1, r3
 800afbc:	f843 cc04 	str.w	ip, [r3, #-4]
 800afc0:	d8d9      	bhi.n	800af76 <__gethex+0x352>
 800afc2:	68a3      	ldr	r3, [r4, #8]
 800afc4:	459b      	cmp	fp, r3
 800afc6:	db17      	blt.n	800aff8 <__gethex+0x3d4>
 800afc8:	6861      	ldr	r1, [r4, #4]
 800afca:	9801      	ldr	r0, [sp, #4]
 800afcc:	3101      	adds	r1, #1
 800afce:	f7fd fe81 	bl	8008cd4 <_Balloc>
 800afd2:	4681      	mov	r9, r0
 800afd4:	b918      	cbnz	r0, 800afde <__gethex+0x3ba>
 800afd6:	4b1a      	ldr	r3, [pc, #104]	@ (800b040 <__gethex+0x41c>)
 800afd8:	4602      	mov	r2, r0
 800afda:	2184      	movs	r1, #132	@ 0x84
 800afdc:	e6c5      	b.n	800ad6a <__gethex+0x146>
 800afde:	6922      	ldr	r2, [r4, #16]
 800afe0:	3202      	adds	r2, #2
 800afe2:	f104 010c 	add.w	r1, r4, #12
 800afe6:	0092      	lsls	r2, r2, #2
 800afe8:	300c      	adds	r0, #12
 800afea:	f7ff fd6b 	bl	800aac4 <memcpy>
 800afee:	4621      	mov	r1, r4
 800aff0:	9801      	ldr	r0, [sp, #4]
 800aff2:	f7fd feaf 	bl	8008d54 <_Bfree>
 800aff6:	464c      	mov	r4, r9
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	1c5a      	adds	r2, r3, #1
 800affc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b000:	6122      	str	r2, [r4, #16]
 800b002:	2201      	movs	r2, #1
 800b004:	615a      	str	r2, [r3, #20]
 800b006:	e7be      	b.n	800af86 <__gethex+0x362>
 800b008:	6922      	ldr	r2, [r4, #16]
 800b00a:	455a      	cmp	r2, fp
 800b00c:	dd0b      	ble.n	800b026 <__gethex+0x402>
 800b00e:	2101      	movs	r1, #1
 800b010:	4620      	mov	r0, r4
 800b012:	f7ff fd9f 	bl	800ab54 <rshift>
 800b016:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b01a:	3701      	adds	r7, #1
 800b01c:	42bb      	cmp	r3, r7
 800b01e:	f6ff aee0 	blt.w	800ade2 <__gethex+0x1be>
 800b022:	2501      	movs	r5, #1
 800b024:	e7c2      	b.n	800afac <__gethex+0x388>
 800b026:	f016 061f 	ands.w	r6, r6, #31
 800b02a:	d0fa      	beq.n	800b022 <__gethex+0x3fe>
 800b02c:	4453      	add	r3, sl
 800b02e:	f1c6 0620 	rsb	r6, r6, #32
 800b032:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b036:	f7fd ff3f 	bl	8008eb8 <__hi0bits>
 800b03a:	42b0      	cmp	r0, r6
 800b03c:	dbe7      	blt.n	800b00e <__gethex+0x3ea>
 800b03e:	e7f0      	b.n	800b022 <__gethex+0x3fe>
 800b040:	0800cf69 	.word	0x0800cf69

0800b044 <L_shift>:
 800b044:	f1c2 0208 	rsb	r2, r2, #8
 800b048:	0092      	lsls	r2, r2, #2
 800b04a:	b570      	push	{r4, r5, r6, lr}
 800b04c:	f1c2 0620 	rsb	r6, r2, #32
 800b050:	6843      	ldr	r3, [r0, #4]
 800b052:	6804      	ldr	r4, [r0, #0]
 800b054:	fa03 f506 	lsl.w	r5, r3, r6
 800b058:	432c      	orrs	r4, r5
 800b05a:	40d3      	lsrs	r3, r2
 800b05c:	6004      	str	r4, [r0, #0]
 800b05e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b062:	4288      	cmp	r0, r1
 800b064:	d3f4      	bcc.n	800b050 <L_shift+0xc>
 800b066:	bd70      	pop	{r4, r5, r6, pc}

0800b068 <__match>:
 800b068:	b530      	push	{r4, r5, lr}
 800b06a:	6803      	ldr	r3, [r0, #0]
 800b06c:	3301      	adds	r3, #1
 800b06e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b072:	b914      	cbnz	r4, 800b07a <__match+0x12>
 800b074:	6003      	str	r3, [r0, #0]
 800b076:	2001      	movs	r0, #1
 800b078:	bd30      	pop	{r4, r5, pc}
 800b07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b07e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b082:	2d19      	cmp	r5, #25
 800b084:	bf98      	it	ls
 800b086:	3220      	addls	r2, #32
 800b088:	42a2      	cmp	r2, r4
 800b08a:	d0f0      	beq.n	800b06e <__match+0x6>
 800b08c:	2000      	movs	r0, #0
 800b08e:	e7f3      	b.n	800b078 <__match+0x10>

0800b090 <__hexnan>:
 800b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b094:	680b      	ldr	r3, [r1, #0]
 800b096:	6801      	ldr	r1, [r0, #0]
 800b098:	115e      	asrs	r6, r3, #5
 800b09a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b09e:	f013 031f 	ands.w	r3, r3, #31
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	bf18      	it	ne
 800b0a6:	3604      	addne	r6, #4
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	1f37      	subs	r7, r6, #4
 800b0ac:	4682      	mov	sl, r0
 800b0ae:	4690      	mov	r8, r2
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0b6:	46b9      	mov	r9, r7
 800b0b8:	463c      	mov	r4, r7
 800b0ba:	9502      	str	r5, [sp, #8]
 800b0bc:	46ab      	mov	fp, r5
 800b0be:	784a      	ldrb	r2, [r1, #1]
 800b0c0:	1c4b      	adds	r3, r1, #1
 800b0c2:	9303      	str	r3, [sp, #12]
 800b0c4:	b342      	cbz	r2, 800b118 <__hexnan+0x88>
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	9105      	str	r1, [sp, #20]
 800b0ca:	9204      	str	r2, [sp, #16]
 800b0cc:	f7ff fd94 	bl	800abf8 <__hexdig_fun>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d151      	bne.n	800b178 <__hexnan+0xe8>
 800b0d4:	9a04      	ldr	r2, [sp, #16]
 800b0d6:	9905      	ldr	r1, [sp, #20]
 800b0d8:	2a20      	cmp	r2, #32
 800b0da:	d818      	bhi.n	800b10e <__hexnan+0x7e>
 800b0dc:	9b02      	ldr	r3, [sp, #8]
 800b0de:	459b      	cmp	fp, r3
 800b0e0:	dd13      	ble.n	800b10a <__hexnan+0x7a>
 800b0e2:	454c      	cmp	r4, r9
 800b0e4:	d206      	bcs.n	800b0f4 <__hexnan+0x64>
 800b0e6:	2d07      	cmp	r5, #7
 800b0e8:	dc04      	bgt.n	800b0f4 <__hexnan+0x64>
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7ff ffa8 	bl	800b044 <L_shift>
 800b0f4:	4544      	cmp	r4, r8
 800b0f6:	d952      	bls.n	800b19e <__hexnan+0x10e>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f1a4 0904 	sub.w	r9, r4, #4
 800b0fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b102:	f8cd b008 	str.w	fp, [sp, #8]
 800b106:	464c      	mov	r4, r9
 800b108:	461d      	mov	r5, r3
 800b10a:	9903      	ldr	r1, [sp, #12]
 800b10c:	e7d7      	b.n	800b0be <__hexnan+0x2e>
 800b10e:	2a29      	cmp	r2, #41	@ 0x29
 800b110:	d157      	bne.n	800b1c2 <__hexnan+0x132>
 800b112:	3102      	adds	r1, #2
 800b114:	f8ca 1000 	str.w	r1, [sl]
 800b118:	f1bb 0f00 	cmp.w	fp, #0
 800b11c:	d051      	beq.n	800b1c2 <__hexnan+0x132>
 800b11e:	454c      	cmp	r4, r9
 800b120:	d206      	bcs.n	800b130 <__hexnan+0xa0>
 800b122:	2d07      	cmp	r5, #7
 800b124:	dc04      	bgt.n	800b130 <__hexnan+0xa0>
 800b126:	462a      	mov	r2, r5
 800b128:	4649      	mov	r1, r9
 800b12a:	4620      	mov	r0, r4
 800b12c:	f7ff ff8a 	bl	800b044 <L_shift>
 800b130:	4544      	cmp	r4, r8
 800b132:	d936      	bls.n	800b1a2 <__hexnan+0x112>
 800b134:	f1a8 0204 	sub.w	r2, r8, #4
 800b138:	4623      	mov	r3, r4
 800b13a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b13e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b142:	429f      	cmp	r7, r3
 800b144:	d2f9      	bcs.n	800b13a <__hexnan+0xaa>
 800b146:	1b3b      	subs	r3, r7, r4
 800b148:	f023 0303 	bic.w	r3, r3, #3
 800b14c:	3304      	adds	r3, #4
 800b14e:	3401      	adds	r4, #1
 800b150:	3e03      	subs	r6, #3
 800b152:	42b4      	cmp	r4, r6
 800b154:	bf88      	it	hi
 800b156:	2304      	movhi	r3, #4
 800b158:	4443      	add	r3, r8
 800b15a:	2200      	movs	r2, #0
 800b15c:	f843 2b04 	str.w	r2, [r3], #4
 800b160:	429f      	cmp	r7, r3
 800b162:	d2fb      	bcs.n	800b15c <__hexnan+0xcc>
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	b91b      	cbnz	r3, 800b170 <__hexnan+0xe0>
 800b168:	4547      	cmp	r7, r8
 800b16a:	d128      	bne.n	800b1be <__hexnan+0x12e>
 800b16c:	2301      	movs	r3, #1
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	2005      	movs	r0, #5
 800b172:	b007      	add	sp, #28
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	3501      	adds	r5, #1
 800b17a:	2d08      	cmp	r5, #8
 800b17c:	f10b 0b01 	add.w	fp, fp, #1
 800b180:	dd06      	ble.n	800b190 <__hexnan+0x100>
 800b182:	4544      	cmp	r4, r8
 800b184:	d9c1      	bls.n	800b10a <__hexnan+0x7a>
 800b186:	2300      	movs	r3, #0
 800b188:	f844 3c04 	str.w	r3, [r4, #-4]
 800b18c:	2501      	movs	r5, #1
 800b18e:	3c04      	subs	r4, #4
 800b190:	6822      	ldr	r2, [r4, #0]
 800b192:	f000 000f 	and.w	r0, r0, #15
 800b196:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b19a:	6020      	str	r0, [r4, #0]
 800b19c:	e7b5      	b.n	800b10a <__hexnan+0x7a>
 800b19e:	2508      	movs	r5, #8
 800b1a0:	e7b3      	b.n	800b10a <__hexnan+0x7a>
 800b1a2:	9b01      	ldr	r3, [sp, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0dd      	beq.n	800b164 <__hexnan+0xd4>
 800b1a8:	f1c3 0320 	rsb	r3, r3, #32
 800b1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b0:	40da      	lsrs	r2, r3
 800b1b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1bc:	e7d2      	b.n	800b164 <__hexnan+0xd4>
 800b1be:	3f04      	subs	r7, #4
 800b1c0:	e7d0      	b.n	800b164 <__hexnan+0xd4>
 800b1c2:	2004      	movs	r0, #4
 800b1c4:	e7d5      	b.n	800b172 <__hexnan+0xe2>

0800b1c6 <__ascii_mbtowc>:
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	b901      	cbnz	r1, 800b1cc <__ascii_mbtowc+0x6>
 800b1ca:	a901      	add	r1, sp, #4
 800b1cc:	b142      	cbz	r2, 800b1e0 <__ascii_mbtowc+0x1a>
 800b1ce:	b14b      	cbz	r3, 800b1e4 <__ascii_mbtowc+0x1e>
 800b1d0:	7813      	ldrb	r3, [r2, #0]
 800b1d2:	600b      	str	r3, [r1, #0]
 800b1d4:	7812      	ldrb	r2, [r2, #0]
 800b1d6:	1e10      	subs	r0, r2, #0
 800b1d8:	bf18      	it	ne
 800b1da:	2001      	movne	r0, #1
 800b1dc:	b002      	add	sp, #8
 800b1de:	4770      	bx	lr
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	e7fb      	b.n	800b1dc <__ascii_mbtowc+0x16>
 800b1e4:	f06f 0001 	mvn.w	r0, #1
 800b1e8:	e7f8      	b.n	800b1dc <__ascii_mbtowc+0x16>

0800b1ea <_realloc_r>:
 800b1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ee:	4680      	mov	r8, r0
 800b1f0:	4615      	mov	r5, r2
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	b921      	cbnz	r1, 800b200 <_realloc_r+0x16>
 800b1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	f7fd bcde 	b.w	8008bbc <_malloc_r>
 800b200:	b92a      	cbnz	r2, 800b20e <_realloc_r+0x24>
 800b202:	f7fd fc67 	bl	8008ad4 <_free_r>
 800b206:	2400      	movs	r4, #0
 800b208:	4620      	mov	r0, r4
 800b20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20e:	f000 f8c4 	bl	800b39a <_malloc_usable_size_r>
 800b212:	4285      	cmp	r5, r0
 800b214:	4606      	mov	r6, r0
 800b216:	d802      	bhi.n	800b21e <_realloc_r+0x34>
 800b218:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b21c:	d8f4      	bhi.n	800b208 <_realloc_r+0x1e>
 800b21e:	4629      	mov	r1, r5
 800b220:	4640      	mov	r0, r8
 800b222:	f7fd fccb 	bl	8008bbc <_malloc_r>
 800b226:	4607      	mov	r7, r0
 800b228:	2800      	cmp	r0, #0
 800b22a:	d0ec      	beq.n	800b206 <_realloc_r+0x1c>
 800b22c:	42b5      	cmp	r5, r6
 800b22e:	462a      	mov	r2, r5
 800b230:	4621      	mov	r1, r4
 800b232:	bf28      	it	cs
 800b234:	4632      	movcs	r2, r6
 800b236:	f7ff fc45 	bl	800aac4 <memcpy>
 800b23a:	4621      	mov	r1, r4
 800b23c:	4640      	mov	r0, r8
 800b23e:	f7fd fc49 	bl	8008ad4 <_free_r>
 800b242:	463c      	mov	r4, r7
 800b244:	e7e0      	b.n	800b208 <_realloc_r+0x1e>

0800b246 <__ascii_wctomb>:
 800b246:	4603      	mov	r3, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	b141      	cbz	r1, 800b25e <__ascii_wctomb+0x18>
 800b24c:	2aff      	cmp	r2, #255	@ 0xff
 800b24e:	d904      	bls.n	800b25a <__ascii_wctomb+0x14>
 800b250:	228a      	movs	r2, #138	@ 0x8a
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	4770      	bx	lr
 800b25a:	700a      	strb	r2, [r1, #0]
 800b25c:	2001      	movs	r0, #1
 800b25e:	4770      	bx	lr

0800b260 <fiprintf>:
 800b260:	b40e      	push	{r1, r2, r3}
 800b262:	b503      	push	{r0, r1, lr}
 800b264:	4601      	mov	r1, r0
 800b266:	ab03      	add	r3, sp, #12
 800b268:	4805      	ldr	r0, [pc, #20]	@ (800b280 <fiprintf+0x20>)
 800b26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b26e:	6800      	ldr	r0, [r0, #0]
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	f7ff f993 	bl	800a59c <_vfiprintf_r>
 800b276:	b002      	add	sp, #8
 800b278:	f85d eb04 	ldr.w	lr, [sp], #4
 800b27c:	b003      	add	sp, #12
 800b27e:	4770      	bx	lr
 800b280:	24000040 	.word	0x24000040

0800b284 <__swhatbuf_r>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	460c      	mov	r4, r1
 800b288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b28c:	2900      	cmp	r1, #0
 800b28e:	b096      	sub	sp, #88	@ 0x58
 800b290:	4615      	mov	r5, r2
 800b292:	461e      	mov	r6, r3
 800b294:	da0d      	bge.n	800b2b2 <__swhatbuf_r+0x2e>
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b29c:	f04f 0100 	mov.w	r1, #0
 800b2a0:	bf14      	ite	ne
 800b2a2:	2340      	movne	r3, #64	@ 0x40
 800b2a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	6031      	str	r1, [r6, #0]
 800b2ac:	602b      	str	r3, [r5, #0]
 800b2ae:	b016      	add	sp, #88	@ 0x58
 800b2b0:	bd70      	pop	{r4, r5, r6, pc}
 800b2b2:	466a      	mov	r2, sp
 800b2b4:	f000 f848 	bl	800b348 <_fstat_r>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	dbec      	blt.n	800b296 <__swhatbuf_r+0x12>
 800b2bc:	9901      	ldr	r1, [sp, #4]
 800b2be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2c6:	4259      	negs	r1, r3
 800b2c8:	4159      	adcs	r1, r3
 800b2ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2ce:	e7eb      	b.n	800b2a8 <__swhatbuf_r+0x24>

0800b2d0 <__smakebuf_r>:
 800b2d0:	898b      	ldrh	r3, [r1, #12]
 800b2d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2d4:	079d      	lsls	r5, r3, #30
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	460c      	mov	r4, r1
 800b2da:	d507      	bpl.n	800b2ec <__smakebuf_r+0x1c>
 800b2dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	6163      	str	r3, [r4, #20]
 800b2e8:	b003      	add	sp, #12
 800b2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ec:	ab01      	add	r3, sp, #4
 800b2ee:	466a      	mov	r2, sp
 800b2f0:	f7ff ffc8 	bl	800b284 <__swhatbuf_r>
 800b2f4:	9f00      	ldr	r7, [sp, #0]
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	4639      	mov	r1, r7
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7fd fc5e 	bl	8008bbc <_malloc_r>
 800b300:	b948      	cbnz	r0, 800b316 <__smakebuf_r+0x46>
 800b302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b306:	059a      	lsls	r2, r3, #22
 800b308:	d4ee      	bmi.n	800b2e8 <__smakebuf_r+0x18>
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	f043 0302 	orr.w	r3, r3, #2
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	e7e2      	b.n	800b2dc <__smakebuf_r+0xc>
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	6020      	str	r0, [r4, #0]
 800b31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b31e:	81a3      	strh	r3, [r4, #12]
 800b320:	9b01      	ldr	r3, [sp, #4]
 800b322:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b326:	b15b      	cbz	r3, 800b340 <__smakebuf_r+0x70>
 800b328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b32c:	4630      	mov	r0, r6
 800b32e:	f000 f81d 	bl	800b36c <_isatty_r>
 800b332:	b128      	cbz	r0, 800b340 <__smakebuf_r+0x70>
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	f023 0303 	bic.w	r3, r3, #3
 800b33a:	f043 0301 	orr.w	r3, r3, #1
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	89a3      	ldrh	r3, [r4, #12]
 800b342:	431d      	orrs	r5, r3
 800b344:	81a5      	strh	r5, [r4, #12]
 800b346:	e7cf      	b.n	800b2e8 <__smakebuf_r+0x18>

0800b348 <_fstat_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d07      	ldr	r5, [pc, #28]	@ (800b368 <_fstat_r+0x20>)
 800b34c:	2300      	movs	r3, #0
 800b34e:	4604      	mov	r4, r0
 800b350:	4608      	mov	r0, r1
 800b352:	4611      	mov	r1, r2
 800b354:	602b      	str	r3, [r5, #0]
 800b356:	f7f6 fc46 	bl	8001be6 <_fstat>
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	d102      	bne.n	800b364 <_fstat_r+0x1c>
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	b103      	cbz	r3, 800b364 <_fstat_r+0x1c>
 800b362:	6023      	str	r3, [r4, #0]
 800b364:	bd38      	pop	{r3, r4, r5, pc}
 800b366:	bf00      	nop
 800b368:	240004c0 	.word	0x240004c0

0800b36c <_isatty_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d06      	ldr	r5, [pc, #24]	@ (800b388 <_isatty_r+0x1c>)
 800b370:	2300      	movs	r3, #0
 800b372:	4604      	mov	r4, r0
 800b374:	4608      	mov	r0, r1
 800b376:	602b      	str	r3, [r5, #0]
 800b378:	f7f6 fc45 	bl	8001c06 <_isatty>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d102      	bne.n	800b386 <_isatty_r+0x1a>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	b103      	cbz	r3, 800b386 <_isatty_r+0x1a>
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	bd38      	pop	{r3, r4, r5, pc}
 800b388:	240004c0 	.word	0x240004c0

0800b38c <abort>:
 800b38c:	b508      	push	{r3, lr}
 800b38e:	2006      	movs	r0, #6
 800b390:	f000 f834 	bl	800b3fc <raise>
 800b394:	2001      	movs	r0, #1
 800b396:	f7f6 fbd6 	bl	8001b46 <_exit>

0800b39a <_malloc_usable_size_r>:
 800b39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b39e:	1f18      	subs	r0, r3, #4
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	bfbc      	itt	lt
 800b3a4:	580b      	ldrlt	r3, [r1, r0]
 800b3a6:	18c0      	addlt	r0, r0, r3
 800b3a8:	4770      	bx	lr

0800b3aa <_raise_r>:
 800b3aa:	291f      	cmp	r1, #31
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	d904      	bls.n	800b3be <_raise_r+0x14>
 800b3b4:	2316      	movs	r3, #22
 800b3b6:	6003      	str	r3, [r0, #0]
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}
 800b3be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b3c0:	b112      	cbz	r2, 800b3c8 <_raise_r+0x1e>
 800b3c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3c6:	b94b      	cbnz	r3, 800b3dc <_raise_r+0x32>
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f000 f831 	bl	800b430 <_getpid_r>
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	4601      	mov	r1, r0
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3d8:	f000 b818 	b.w	800b40c <_kill_r>
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d00a      	beq.n	800b3f6 <_raise_r+0x4c>
 800b3e0:	1c59      	adds	r1, r3, #1
 800b3e2:	d103      	bne.n	800b3ec <_raise_r+0x42>
 800b3e4:	2316      	movs	r3, #22
 800b3e6:	6003      	str	r3, [r0, #0]
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	e7e7      	b.n	800b3bc <_raise_r+0x12>
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	4798      	blx	r3
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e7e0      	b.n	800b3bc <_raise_r+0x12>
	...

0800b3fc <raise>:
 800b3fc:	4b02      	ldr	r3, [pc, #8]	@ (800b408 <raise+0xc>)
 800b3fe:	4601      	mov	r1, r0
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	f7ff bfd2 	b.w	800b3aa <_raise_r>
 800b406:	bf00      	nop
 800b408:	24000040 	.word	0x24000040

0800b40c <_kill_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4d07      	ldr	r5, [pc, #28]	@ (800b42c <_kill_r+0x20>)
 800b410:	2300      	movs	r3, #0
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	602b      	str	r3, [r5, #0]
 800b41a:	f7f6 fb84 	bl	8001b26 <_kill>
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	d102      	bne.n	800b428 <_kill_r+0x1c>
 800b422:	682b      	ldr	r3, [r5, #0]
 800b424:	b103      	cbz	r3, 800b428 <_kill_r+0x1c>
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	bd38      	pop	{r3, r4, r5, pc}
 800b42a:	bf00      	nop
 800b42c:	240004c0 	.word	0x240004c0

0800b430 <_getpid_r>:
 800b430:	f7f6 bb71 	b.w	8001b16 <_getpid>
 800b434:	0000      	movs	r0, r0
	...

0800b438 <atan>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	eeb0 7b40 	vmov.f64	d7, d0
 800b43e:	ee17 5a90 	vmov	r5, s15
 800b442:	4b73      	ldr	r3, [pc, #460]	@ (800b610 <atan+0x1d8>)
 800b444:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800b448:	429c      	cmp	r4, r3
 800b44a:	d913      	bls.n	800b474 <atan+0x3c>
 800b44c:	4b71      	ldr	r3, [pc, #452]	@ (800b614 <atan+0x1dc>)
 800b44e:	429c      	cmp	r4, r3
 800b450:	d803      	bhi.n	800b45a <atan+0x22>
 800b452:	d107      	bne.n	800b464 <atan+0x2c>
 800b454:	ee10 3a10 	vmov	r3, s0
 800b458:	b123      	cbz	r3, 800b464 <atan+0x2c>
 800b45a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b45e:	eeb0 0b47 	vmov.f64	d0, d7
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800b5a0 <atan+0x168>
 800b468:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800b5a8 <atan+0x170>
 800b46c:	2d00      	cmp	r5, #0
 800b46e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800b472:	e7f4      	b.n	800b45e <atan+0x26>
 800b474:	4b68      	ldr	r3, [pc, #416]	@ (800b618 <atan+0x1e0>)
 800b476:	429c      	cmp	r4, r3
 800b478:	d811      	bhi.n	800b49e <atan+0x66>
 800b47a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b47e:	429c      	cmp	r4, r3
 800b480:	d80a      	bhi.n	800b498 <atan+0x60>
 800b482:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800b486:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800b5b0 <atan+0x178>
 800b48a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800b48e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b496:	dce2      	bgt.n	800b45e <atan+0x26>
 800b498:	f04f 33ff 	mov.w	r3, #4294967295
 800b49c:	e013      	b.n	800b4c6 <atan+0x8e>
 800b49e:	f000 f913 	bl	800b6c8 <fabs>
 800b4a2:	4b5e      	ldr	r3, [pc, #376]	@ (800b61c <atan+0x1e4>)
 800b4a4:	429c      	cmp	r4, r3
 800b4a6:	d84f      	bhi.n	800b548 <atan+0x110>
 800b4a8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b4ac:	429c      	cmp	r4, r3
 800b4ae:	d841      	bhi.n	800b534 <atan+0xfc>
 800b4b0:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b4b4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	eea0 5b07 	vfma.f64	d5, d0, d7
 800b4be:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b4c2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800b4c6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800b5b8 <atan+0x180>
 800b4ca:	ee27 4b07 	vmul.f64	d4, d7, d7
 800b4ce:	ee24 5b04 	vmul.f64	d5, d4, d4
 800b4d2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800b5c0 <atan+0x188>
 800b4d6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800b4da:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800b5c8 <atan+0x190>
 800b4de:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b4e2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800b5d0 <atan+0x198>
 800b4e6:	eea6 3b05 	vfma.f64	d3, d6, d5
 800b4ea:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800b5d8 <atan+0x1a0>
 800b4ee:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b4f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800b5e0 <atan+0x1a8>
 800b4f6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800b5e8 <atan+0x1b0>
 800b4fa:	eea6 3b05 	vfma.f64	d3, d6, d5
 800b4fe:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800b5f0 <atan+0x1b8>
 800b502:	eea5 2b06 	vfma.f64	d2, d5, d6
 800b506:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800b5f8 <atan+0x1c0>
 800b50a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800b50e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800b600 <atan+0x1c8>
 800b512:	eea6 2b05 	vfma.f64	d2, d6, d5
 800b516:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800b608 <atan+0x1d0>
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800b520:	ee26 6b05 	vmul.f64	d6, d6, d5
 800b524:	eea3 6b04 	vfma.f64	d6, d3, d4
 800b528:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b52c:	d121      	bne.n	800b572 <atan+0x13a>
 800b52e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b532:	e794      	b.n	800b45e <atan+0x26>
 800b534:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800b538:	2301      	movs	r3, #1
 800b53a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800b53e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b542:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800b546:	e7be      	b.n	800b4c6 <atan+0x8e>
 800b548:	4b35      	ldr	r3, [pc, #212]	@ (800b620 <atan+0x1e8>)
 800b54a:	429c      	cmp	r4, r3
 800b54c:	d20b      	bcs.n	800b566 <atan+0x12e>
 800b54e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800b552:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b556:	ee30 5b47 	vsub.f64	d5, d0, d7
 800b55a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800b55e:	2302      	movs	r3, #2
 800b560:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b564:	e7af      	b.n	800b4c6 <atan+0x8e>
 800b566:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800b56a:	2303      	movs	r3, #3
 800b56c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800b570:	e7a9      	b.n	800b4c6 <atan+0x8e>
 800b572:	4a2c      	ldr	r2, [pc, #176]	@ (800b624 <atan+0x1ec>)
 800b574:	492c      	ldr	r1, [pc, #176]	@ (800b628 <atan+0x1f0>)
 800b576:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b57a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800b57e:	ed93 5b00 	vldr	d5, [r3]
 800b582:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b586:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b58a:	ed92 7b00 	vldr	d7, [r2]
 800b58e:	2d00      	cmp	r5, #0
 800b590:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b594:	bfb8      	it	lt
 800b596:	eeb1 7b47 	vneglt.f64	d7, d7
 800b59a:	e760      	b.n	800b45e <atan+0x26>
 800b59c:	f3af 8000 	nop.w
 800b5a0:	54442d18 	.word	0x54442d18
 800b5a4:	bff921fb 	.word	0xbff921fb
 800b5a8:	54442d18 	.word	0x54442d18
 800b5ac:	3ff921fb 	.word	0x3ff921fb
 800b5b0:	8800759c 	.word	0x8800759c
 800b5b4:	7e37e43c 	.word	0x7e37e43c
 800b5b8:	e322da11 	.word	0xe322da11
 800b5bc:	3f90ad3a 	.word	0x3f90ad3a
 800b5c0:	24760deb 	.word	0x24760deb
 800b5c4:	3fa97b4b 	.word	0x3fa97b4b
 800b5c8:	a0d03d51 	.word	0xa0d03d51
 800b5cc:	3fb10d66 	.word	0x3fb10d66
 800b5d0:	c54c206e 	.word	0xc54c206e
 800b5d4:	3fb745cd 	.word	0x3fb745cd
 800b5d8:	920083ff 	.word	0x920083ff
 800b5dc:	3fc24924 	.word	0x3fc24924
 800b5e0:	5555550d 	.word	0x5555550d
 800b5e4:	3fd55555 	.word	0x3fd55555
 800b5e8:	52defd9a 	.word	0x52defd9a
 800b5ec:	bfadde2d 	.word	0xbfadde2d
 800b5f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b5f4:	bfa2b444 	.word	0xbfa2b444
 800b5f8:	af749a6d 	.word	0xaf749a6d
 800b5fc:	bfb3b0f2 	.word	0xbfb3b0f2
 800b600:	fe231671 	.word	0xfe231671
 800b604:	bfbc71c6 	.word	0xbfbc71c6
 800b608:	9998ebc4 	.word	0x9998ebc4
 800b60c:	bfc99999 	.word	0xbfc99999
 800b610:	440fffff 	.word	0x440fffff
 800b614:	7ff00000 	.word	0x7ff00000
 800b618:	3fdbffff 	.word	0x3fdbffff
 800b61c:	3ff2ffff 	.word	0x3ff2ffff
 800b620:	40038000 	.word	0x40038000
 800b624:	0800d300 	.word	0x0800d300
 800b628:	0800d2e0 	.word	0x0800d2e0
 800b62c:	00000000 	.word	0x00000000

0800b630 <cos>:
 800b630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b632:	eeb0 7b40 	vmov.f64	d7, d0
 800b636:	ee17 3a90 	vmov	r3, s15
 800b63a:	4a21      	ldr	r2, [pc, #132]	@ (800b6c0 <cos+0x90>)
 800b63c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b640:	4293      	cmp	r3, r2
 800b642:	d806      	bhi.n	800b652 <cos+0x22>
 800b644:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800b6b8 <cos+0x88>
 800b648:	b005      	add	sp, #20
 800b64a:	f85d eb04 	ldr.w	lr, [sp], #4
 800b64e:	f000 b98f 	b.w	800b970 <__kernel_cos>
 800b652:	4a1c      	ldr	r2, [pc, #112]	@ (800b6c4 <cos+0x94>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d904      	bls.n	800b662 <cos+0x32>
 800b658:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b65c:	b005      	add	sp, #20
 800b65e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b662:	4668      	mov	r0, sp
 800b664:	f000 fa44 	bl	800baf0 <__ieee754_rem_pio2>
 800b668:	f000 0003 	and.w	r0, r0, #3
 800b66c:	2801      	cmp	r0, #1
 800b66e:	d009      	beq.n	800b684 <cos+0x54>
 800b670:	2802      	cmp	r0, #2
 800b672:	d010      	beq.n	800b696 <cos+0x66>
 800b674:	b9b0      	cbnz	r0, 800b6a4 <cos+0x74>
 800b676:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b67a:	ed9d 0b00 	vldr	d0, [sp]
 800b67e:	f000 f977 	bl	800b970 <__kernel_cos>
 800b682:	e7eb      	b.n	800b65c <cos+0x2c>
 800b684:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b688:	ed9d 0b00 	vldr	d0, [sp]
 800b68c:	f000 f9d8 	bl	800ba40 <__kernel_sin>
 800b690:	eeb1 0b40 	vneg.f64	d0, d0
 800b694:	e7e2      	b.n	800b65c <cos+0x2c>
 800b696:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b69a:	ed9d 0b00 	vldr	d0, [sp]
 800b69e:	f000 f967 	bl	800b970 <__kernel_cos>
 800b6a2:	e7f5      	b.n	800b690 <cos+0x60>
 800b6a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6a8:	ed9d 0b00 	vldr	d0, [sp]
 800b6ac:	2001      	movs	r0, #1
 800b6ae:	f000 f9c7 	bl	800ba40 <__kernel_sin>
 800b6b2:	e7d3      	b.n	800b65c <cos+0x2c>
 800b6b4:	f3af 8000 	nop.w
	...
 800b6c0:	3fe921fb 	.word	0x3fe921fb
 800b6c4:	7fefffff 	.word	0x7fefffff

0800b6c8 <fabs>:
 800b6c8:	ec51 0b10 	vmov	r0, r1, d0
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b6d2:	ec43 2b10 	vmov	d0, r2, r3
 800b6d6:	4770      	bx	lr

0800b6d8 <sin>:
 800b6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6da:	eeb0 7b40 	vmov.f64	d7, d0
 800b6de:	ee17 3a90 	vmov	r3, s15
 800b6e2:	4a21      	ldr	r2, [pc, #132]	@ (800b768 <sin+0x90>)
 800b6e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d807      	bhi.n	800b6fc <sin+0x24>
 800b6ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800b760 <sin+0x88>
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	b005      	add	sp, #20
 800b6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f8:	f000 b9a2 	b.w	800ba40 <__kernel_sin>
 800b6fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b76c <sin+0x94>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d904      	bls.n	800b70c <sin+0x34>
 800b702:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b706:	b005      	add	sp, #20
 800b708:	f85d fb04 	ldr.w	pc, [sp], #4
 800b70c:	4668      	mov	r0, sp
 800b70e:	f000 f9ef 	bl	800baf0 <__ieee754_rem_pio2>
 800b712:	f000 0003 	and.w	r0, r0, #3
 800b716:	2801      	cmp	r0, #1
 800b718:	d00a      	beq.n	800b730 <sin+0x58>
 800b71a:	2802      	cmp	r0, #2
 800b71c:	d00f      	beq.n	800b73e <sin+0x66>
 800b71e:	b9c0      	cbnz	r0, 800b752 <sin+0x7a>
 800b720:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b724:	ed9d 0b00 	vldr	d0, [sp]
 800b728:	2001      	movs	r0, #1
 800b72a:	f000 f989 	bl	800ba40 <__kernel_sin>
 800b72e:	e7ea      	b.n	800b706 <sin+0x2e>
 800b730:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b734:	ed9d 0b00 	vldr	d0, [sp]
 800b738:	f000 f91a 	bl	800b970 <__kernel_cos>
 800b73c:	e7e3      	b.n	800b706 <sin+0x2e>
 800b73e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b742:	ed9d 0b00 	vldr	d0, [sp]
 800b746:	2001      	movs	r0, #1
 800b748:	f000 f97a 	bl	800ba40 <__kernel_sin>
 800b74c:	eeb1 0b40 	vneg.f64	d0, d0
 800b750:	e7d9      	b.n	800b706 <sin+0x2e>
 800b752:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b756:	ed9d 0b00 	vldr	d0, [sp]
 800b75a:	f000 f909 	bl	800b970 <__kernel_cos>
 800b75e:	e7f5      	b.n	800b74c <sin+0x74>
	...
 800b768:	3fe921fb 	.word	0x3fe921fb
 800b76c:	7fefffff 	.word	0x7fefffff

0800b770 <atan2f>:
 800b770:	f000 bb02 	b.w	800bd78 <__ieee754_atan2f>

0800b774 <sqrtf>:
 800b774:	b508      	push	{r3, lr}
 800b776:	ed2d 8b02 	vpush	{d8}
 800b77a:	eeb0 8a40 	vmov.f32	s16, s0
 800b77e:	f000 f8f2 	bl	800b966 <__ieee754_sqrtf>
 800b782:	eeb4 8a48 	vcmp.f32	s16, s16
 800b786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b78a:	d60c      	bvs.n	800b7a6 <sqrtf+0x32>
 800b78c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b7ac <sqrtf+0x38>
 800b790:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b798:	d505      	bpl.n	800b7a6 <sqrtf+0x32>
 800b79a:	f7fc fb87 	bl	8007eac <__errno>
 800b79e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b7a2:	2321      	movs	r3, #33	@ 0x21
 800b7a4:	6003      	str	r3, [r0, #0]
 800b7a6:	ecbd 8b02 	vpop	{d8}
 800b7aa:	bd08      	pop	{r3, pc}
 800b7ac:	00000000 	.word	0x00000000

0800b7b0 <atanf>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	ee10 5a10 	vmov	r5, s0
 800b7b6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800b7ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800b7be:	eef0 7a40 	vmov.f32	s15, s0
 800b7c2:	d30f      	bcc.n	800b7e4 <atanf+0x34>
 800b7c4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800b7c8:	d904      	bls.n	800b7d4 <atanf+0x24>
 800b7ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b7ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b90c <atanf+0x15c>
 800b7d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800b910 <atanf+0x160>
 800b7dc:	2d00      	cmp	r5, #0
 800b7de:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800b7e2:	e7f4      	b.n	800b7ce <atanf+0x1e>
 800b7e4:	4b4b      	ldr	r3, [pc, #300]	@ (800b914 <atanf+0x164>)
 800b7e6:	429c      	cmp	r4, r3
 800b7e8:	d810      	bhi.n	800b80c <atanf+0x5c>
 800b7ea:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800b7ee:	d20a      	bcs.n	800b806 <atanf+0x56>
 800b7f0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800b918 <atanf+0x168>
 800b7f4:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b7f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b804:	dce3      	bgt.n	800b7ce <atanf+0x1e>
 800b806:	f04f 33ff 	mov.w	r3, #4294967295
 800b80a:	e013      	b.n	800b834 <atanf+0x84>
 800b80c:	f000 f8a4 	bl	800b958 <fabsf>
 800b810:	4b42      	ldr	r3, [pc, #264]	@ (800b91c <atanf+0x16c>)
 800b812:	429c      	cmp	r4, r3
 800b814:	d84f      	bhi.n	800b8b6 <atanf+0x106>
 800b816:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b81a:	429c      	cmp	r4, r3
 800b81c:	d841      	bhi.n	800b8a2 <atanf+0xf2>
 800b81e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b822:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b826:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b82a:	2300      	movs	r3, #0
 800b82c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b830:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b83a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800b920 <atanf+0x170>
 800b83e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800b924 <atanf+0x174>
 800b842:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800b928 <atanf+0x178>
 800b846:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b84a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b84e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800b92c <atanf+0x17c>
 800b852:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b856:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800b930 <atanf+0x180>
 800b85a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b85e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800b934 <atanf+0x184>
 800b862:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b866:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b938 <atanf+0x188>
 800b86a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b86e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800b93c <atanf+0x18c>
 800b872:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b876:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b940 <atanf+0x190>
 800b87a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b87e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800b944 <atanf+0x194>
 800b882:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b886:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b948 <atanf+0x198>
 800b88a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b88e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b892:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b896:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b89a:	d121      	bne.n	800b8e0 <atanf+0x130>
 800b89c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8a0:	e795      	b.n	800b7ce <atanf+0x1e>
 800b8a2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b8a6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b8aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b8b4:	e7be      	b.n	800b834 <atanf+0x84>
 800b8b6:	4b25      	ldr	r3, [pc, #148]	@ (800b94c <atanf+0x19c>)
 800b8b8:	429c      	cmp	r4, r3
 800b8ba:	d80b      	bhi.n	800b8d4 <atanf+0x124>
 800b8bc:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800b8c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8d2:	e7af      	b.n	800b834 <atanf+0x84>
 800b8d4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b8d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e7a9      	b.n	800b834 <atanf+0x84>
 800b8e0:	4a1b      	ldr	r2, [pc, #108]	@ (800b950 <atanf+0x1a0>)
 800b8e2:	491c      	ldr	r1, [pc, #112]	@ (800b954 <atanf+0x1a4>)
 800b8e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b8e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b8ec:	edd3 6a00 	vldr	s13, [r3]
 800b8f0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b8f4:	2d00      	cmp	r5, #0
 800b8f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8fa:	edd2 7a00 	vldr	s15, [r2]
 800b8fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b902:	bfb8      	it	lt
 800b904:	eef1 7a67 	vneglt.f32	s15, s15
 800b908:	e761      	b.n	800b7ce <atanf+0x1e>
 800b90a:	bf00      	nop
 800b90c:	bfc90fdb 	.word	0xbfc90fdb
 800b910:	3fc90fdb 	.word	0x3fc90fdb
 800b914:	3edfffff 	.word	0x3edfffff
 800b918:	7149f2ca 	.word	0x7149f2ca
 800b91c:	3f97ffff 	.word	0x3f97ffff
 800b920:	3c8569d7 	.word	0x3c8569d7
 800b924:	3d4bda59 	.word	0x3d4bda59
 800b928:	bd6ef16b 	.word	0xbd6ef16b
 800b92c:	3d886b35 	.word	0x3d886b35
 800b930:	3dba2e6e 	.word	0x3dba2e6e
 800b934:	3e124925 	.word	0x3e124925
 800b938:	3eaaaaab 	.word	0x3eaaaaab
 800b93c:	bd15a221 	.word	0xbd15a221
 800b940:	bd9d8795 	.word	0xbd9d8795
 800b944:	bde38e38 	.word	0xbde38e38
 800b948:	be4ccccd 	.word	0xbe4ccccd
 800b94c:	401bffff 	.word	0x401bffff
 800b950:	0800d330 	.word	0x0800d330
 800b954:	0800d320 	.word	0x0800d320

0800b958 <fabsf>:
 800b958:	ee10 3a10 	vmov	r3, s0
 800b95c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b960:	ee00 3a10 	vmov	s0, r3
 800b964:	4770      	bx	lr

0800b966 <__ieee754_sqrtf>:
 800b966:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b96a:	4770      	bx	lr
 800b96c:	0000      	movs	r0, r0
	...

0800b970 <__kernel_cos>:
 800b970:	eeb0 5b40 	vmov.f64	d5, d0
 800b974:	ee15 1a90 	vmov	r1, s11
 800b978:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800b97c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b980:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800b984:	d204      	bcs.n	800b990 <__kernel_cos+0x20>
 800b986:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800b98a:	ee17 3a90 	vmov	r3, s15
 800b98e:	b343      	cbz	r3, 800b9e2 <__kernel_cos+0x72>
 800b990:	ee25 6b05 	vmul.f64	d6, d5, d5
 800b994:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800b998:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800ba08 <__kernel_cos+0x98>
 800b99c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800ba10 <__kernel_cos+0xa0>
 800b9a0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b9a4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ba18 <__kernel_cos+0xa8>
 800b9a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b9ac:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800ba20 <__kernel_cos+0xb0>
 800b9b0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b9b4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ba28 <__kernel_cos+0xb8>
 800b9b8:	4b1f      	ldr	r3, [pc, #124]	@ (800ba38 <__kernel_cos+0xc8>)
 800b9ba:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b9be:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800ba30 <__kernel_cos+0xc0>
 800b9c2:	4299      	cmp	r1, r3
 800b9c4:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b9c8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800b9cc:	ee24 4b06 	vmul.f64	d4, d4, d6
 800b9d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b9d4:	eea6 1b04 	vfma.f64	d1, d6, d4
 800b9d8:	d804      	bhi.n	800b9e4 <__kernel_cos+0x74>
 800b9da:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b9de:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b9e2:	4770      	bx	lr
 800b9e4:	4b15      	ldr	r3, [pc, #84]	@ (800ba3c <__kernel_cos+0xcc>)
 800b9e6:	4299      	cmp	r1, r3
 800b9e8:	d809      	bhi.n	800b9fe <__kernel_cos+0x8e>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800b9f0:	ec43 2b16 	vmov	d6, r2, r3
 800b9f4:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b9f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b9fc:	e7ed      	b.n	800b9da <__kernel_cos+0x6a>
 800b9fe:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800ba02:	e7f7      	b.n	800b9f4 <__kernel_cos+0x84>
 800ba04:	f3af 8000 	nop.w
 800ba08:	be8838d4 	.word	0xbe8838d4
 800ba0c:	bda8fae9 	.word	0xbda8fae9
 800ba10:	bdb4b1c4 	.word	0xbdb4b1c4
 800ba14:	3e21ee9e 	.word	0x3e21ee9e
 800ba18:	809c52ad 	.word	0x809c52ad
 800ba1c:	be927e4f 	.word	0xbe927e4f
 800ba20:	19cb1590 	.word	0x19cb1590
 800ba24:	3efa01a0 	.word	0x3efa01a0
 800ba28:	16c15177 	.word	0x16c15177
 800ba2c:	bf56c16c 	.word	0xbf56c16c
 800ba30:	5555554c 	.word	0x5555554c
 800ba34:	3fa55555 	.word	0x3fa55555
 800ba38:	3fd33332 	.word	0x3fd33332
 800ba3c:	3fe90000 	.word	0x3fe90000

0800ba40 <__kernel_sin>:
 800ba40:	ee10 3a90 	vmov	r3, s1
 800ba44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba48:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ba4c:	d204      	bcs.n	800ba58 <__kernel_sin+0x18>
 800ba4e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ba52:	ee17 3a90 	vmov	r3, s15
 800ba56:	b35b      	cbz	r3, 800bab0 <__kernel_sin+0x70>
 800ba58:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ba5c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ba60:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800bab8 <__kernel_sin+0x78>
 800ba64:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800bac0 <__kernel_sin+0x80>
 800ba68:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ba6c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800bac8 <__kernel_sin+0x88>
 800ba70:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ba74:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800bad0 <__kernel_sin+0x90>
 800ba78:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ba7c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800bad8 <__kernel_sin+0x98>
 800ba80:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ba84:	b930      	cbnz	r0, 800ba94 <__kernel_sin+0x54>
 800ba86:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800bae0 <__kernel_sin+0xa0>
 800ba8a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ba8e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ba92:	4770      	bx	lr
 800ba94:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ba98:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800ba9c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800baa0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800baa4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800bae8 <__kernel_sin+0xa8>
 800baa8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800baac:	ee30 0b41 	vsub.f64	d0, d0, d1
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	f3af 8000 	nop.w
 800bab8:	5acfd57c 	.word	0x5acfd57c
 800babc:	3de5d93a 	.word	0x3de5d93a
 800bac0:	8a2b9ceb 	.word	0x8a2b9ceb
 800bac4:	be5ae5e6 	.word	0xbe5ae5e6
 800bac8:	57b1fe7d 	.word	0x57b1fe7d
 800bacc:	3ec71de3 	.word	0x3ec71de3
 800bad0:	19c161d5 	.word	0x19c161d5
 800bad4:	bf2a01a0 	.word	0xbf2a01a0
 800bad8:	1110f8a6 	.word	0x1110f8a6
 800badc:	3f811111 	.word	0x3f811111
 800bae0:	55555549 	.word	0x55555549
 800bae4:	bfc55555 	.word	0xbfc55555
 800bae8:	55555549 	.word	0x55555549
 800baec:	3fc55555 	.word	0x3fc55555

0800baf0 <__ieee754_rem_pio2>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	eeb0 7b40 	vmov.f64	d7, d0
 800baf6:	ee17 5a90 	vmov	r5, s15
 800bafa:	4b99      	ldr	r3, [pc, #612]	@ (800bd60 <__ieee754_rem_pio2+0x270>)
 800bafc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bb00:	429e      	cmp	r6, r3
 800bb02:	b088      	sub	sp, #32
 800bb04:	4604      	mov	r4, r0
 800bb06:	d807      	bhi.n	800bb18 <__ieee754_rem_pio2+0x28>
 800bb08:	2200      	movs	r2, #0
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	ed84 0b00 	vstr	d0, [r4]
 800bb10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bb14:	2000      	movs	r0, #0
 800bb16:	e01b      	b.n	800bb50 <__ieee754_rem_pio2+0x60>
 800bb18:	4b92      	ldr	r3, [pc, #584]	@ (800bd64 <__ieee754_rem_pio2+0x274>)
 800bb1a:	429e      	cmp	r6, r3
 800bb1c:	d83b      	bhi.n	800bb96 <__ieee754_rem_pio2+0xa6>
 800bb1e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800bb22:	2d00      	cmp	r5, #0
 800bb24:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800bd20 <__ieee754_rem_pio2+0x230>
 800bb28:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800bb2c:	dd19      	ble.n	800bb62 <__ieee754_rem_pio2+0x72>
 800bb2e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bb32:	429e      	cmp	r6, r3
 800bb34:	d00e      	beq.n	800bb54 <__ieee754_rem_pio2+0x64>
 800bb36:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800bd28 <__ieee754_rem_pio2+0x238>
 800bb3a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800bb3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb42:	ed84 6b00 	vstr	d6, [r4]
 800bb46:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bb4a:	ed84 7b02 	vstr	d7, [r4, #8]
 800bb4e:	2001      	movs	r0, #1
 800bb50:	b008      	add	sp, #32
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
 800bb54:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800bd30 <__ieee754_rem_pio2+0x240>
 800bb58:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800bd38 <__ieee754_rem_pio2+0x248>
 800bb5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb60:	e7eb      	b.n	800bb3a <__ieee754_rem_pio2+0x4a>
 800bb62:	429e      	cmp	r6, r3
 800bb64:	ee30 7b06 	vadd.f64	d7, d0, d6
 800bb68:	d00e      	beq.n	800bb88 <__ieee754_rem_pio2+0x98>
 800bb6a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800bd28 <__ieee754_rem_pio2+0x238>
 800bb6e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bb72:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb76:	ed84 6b00 	vstr	d6, [r4]
 800bb7a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb82:	ed84 7b02 	vstr	d7, [r4, #8]
 800bb86:	e7e3      	b.n	800bb50 <__ieee754_rem_pio2+0x60>
 800bb88:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800bd30 <__ieee754_rem_pio2+0x240>
 800bb8c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800bd38 <__ieee754_rem_pio2+0x248>
 800bb90:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bb94:	e7eb      	b.n	800bb6e <__ieee754_rem_pio2+0x7e>
 800bb96:	4b74      	ldr	r3, [pc, #464]	@ (800bd68 <__ieee754_rem_pio2+0x278>)
 800bb98:	429e      	cmp	r6, r3
 800bb9a:	d870      	bhi.n	800bc7e <__ieee754_rem_pio2+0x18e>
 800bb9c:	f7ff fd94 	bl	800b6c8 <fabs>
 800bba0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800bba4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bd40 <__ieee754_rem_pio2+0x250>
 800bba8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800bbac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bbb0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bbb4:	ee17 0a90 	vmov	r0, s15
 800bbb8:	eeb1 4b45 	vneg.f64	d4, d5
 800bbbc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800bd20 <__ieee754_rem_pio2+0x230>
 800bbc0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800bbc4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800bd28 <__ieee754_rem_pio2+0x238>
 800bbc8:	281f      	cmp	r0, #31
 800bbca:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bbce:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bbd2:	dc05      	bgt.n	800bbe0 <__ieee754_rem_pio2+0xf0>
 800bbd4:	4b65      	ldr	r3, [pc, #404]	@ (800bd6c <__ieee754_rem_pio2+0x27c>)
 800bbd6:	1e42      	subs	r2, r0, #1
 800bbd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbdc:	42b3      	cmp	r3, r6
 800bbde:	d109      	bne.n	800bbf4 <__ieee754_rem_pio2+0x104>
 800bbe0:	ee16 3a90 	vmov	r3, s13
 800bbe4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bbe8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	ea4f 5226 	mov.w	r2, r6, asr #20
 800bbf2:	dc02      	bgt.n	800bbfa <__ieee754_rem_pio2+0x10a>
 800bbf4:	ed84 6b00 	vstr	d6, [r4]
 800bbf8:	e01a      	b.n	800bc30 <__ieee754_rem_pio2+0x140>
 800bbfa:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800bd30 <__ieee754_rem_pio2+0x240>
 800bbfe:	eeb0 6b40 	vmov.f64	d6, d0
 800bc02:	eea4 6b03 	vfma.f64	d6, d4, d3
 800bc06:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bc0a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800bc0e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800bd38 <__ieee754_rem_pio2+0x248>
 800bc12:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800bc16:	ee36 3b47 	vsub.f64	d3, d6, d7
 800bc1a:	ee13 3a90 	vmov	r3, s7
 800bc1e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	2b31      	cmp	r3, #49	@ 0x31
 800bc26:	dc17      	bgt.n	800bc58 <__ieee754_rem_pio2+0x168>
 800bc28:	eeb0 0b46 	vmov.f64	d0, d6
 800bc2c:	ed84 3b00 	vstr	d3, [r4]
 800bc30:	ed94 6b00 	vldr	d6, [r4]
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	ee30 0b46 	vsub.f64	d0, d0, d6
 800bc3a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bc3e:	ed84 0b02 	vstr	d0, [r4, #8]
 800bc42:	da85      	bge.n	800bb50 <__ieee754_rem_pio2+0x60>
 800bc44:	eeb1 6b46 	vneg.f64	d6, d6
 800bc48:	eeb1 0b40 	vneg.f64	d0, d0
 800bc4c:	ed84 6b00 	vstr	d6, [r4]
 800bc50:	ed84 0b02 	vstr	d0, [r4, #8]
 800bc54:	4240      	negs	r0, r0
 800bc56:	e77b      	b.n	800bb50 <__ieee754_rem_pio2+0x60>
 800bc58:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800bd48 <__ieee754_rem_pio2+0x258>
 800bc5c:	eeb0 0b46 	vmov.f64	d0, d6
 800bc60:	eea4 0b07 	vfma.f64	d0, d4, d7
 800bc64:	ee36 6b40 	vsub.f64	d6, d6, d0
 800bc68:	eea4 6b07 	vfma.f64	d6, d4, d7
 800bc6c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800bd50 <__ieee754_rem_pio2+0x260>
 800bc70:	eeb0 7b46 	vmov.f64	d7, d6
 800bc74:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800bc78:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bc7c:	e7ba      	b.n	800bbf4 <__ieee754_rem_pio2+0x104>
 800bc7e:	4b3c      	ldr	r3, [pc, #240]	@ (800bd70 <__ieee754_rem_pio2+0x280>)
 800bc80:	429e      	cmp	r6, r3
 800bc82:	d906      	bls.n	800bc92 <__ieee754_rem_pio2+0x1a2>
 800bc84:	ee30 7b40 	vsub.f64	d7, d0, d0
 800bc88:	ed80 7b02 	vstr	d7, [r0, #8]
 800bc8c:	ed80 7b00 	vstr	d7, [r0]
 800bc90:	e740      	b.n	800bb14 <__ieee754_rem_pio2+0x24>
 800bc92:	ee10 3a10 	vmov	r3, s0
 800bc96:	1532      	asrs	r2, r6, #20
 800bc98:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800bca2:	ec41 0b17 	vmov	d7, r0, r1
 800bca6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800bcaa:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800bd58 <__ieee754_rem_pio2+0x268>
 800bcae:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800bcb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bcb6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bcba:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bcbe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800bcc2:	a808      	add	r0, sp, #32
 800bcc4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800bcc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bccc:	ed8d 6b04 	vstr	d6, [sp, #16]
 800bcd0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bcd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcd8:	2103      	movs	r1, #3
 800bcda:	ed30 7b02 	vldmdb	r0!, {d7}
 800bcde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce6:	460b      	mov	r3, r1
 800bce8:	f101 31ff 	add.w	r1, r1, #4294967295
 800bcec:	d0f5      	beq.n	800bcda <__ieee754_rem_pio2+0x1ea>
 800bcee:	4921      	ldr	r1, [pc, #132]	@ (800bd74 <__ieee754_rem_pio2+0x284>)
 800bcf0:	9101      	str	r1, [sp, #4]
 800bcf2:	2102      	movs	r1, #2
 800bcf4:	9100      	str	r1, [sp, #0]
 800bcf6:	a802      	add	r0, sp, #8
 800bcf8:	4621      	mov	r1, r4
 800bcfa:	f000 f8dd 	bl	800beb8 <__kernel_rem_pio2>
 800bcfe:	2d00      	cmp	r5, #0
 800bd00:	f6bf af26 	bge.w	800bb50 <__ieee754_rem_pio2+0x60>
 800bd04:	ed94 7b00 	vldr	d7, [r4]
 800bd08:	eeb1 7b47 	vneg.f64	d7, d7
 800bd0c:	ed84 7b00 	vstr	d7, [r4]
 800bd10:	ed94 7b02 	vldr	d7, [r4, #8]
 800bd14:	eeb1 7b47 	vneg.f64	d7, d7
 800bd18:	ed84 7b02 	vstr	d7, [r4, #8]
 800bd1c:	e79a      	b.n	800bc54 <__ieee754_rem_pio2+0x164>
 800bd1e:	bf00      	nop
 800bd20:	54400000 	.word	0x54400000
 800bd24:	3ff921fb 	.word	0x3ff921fb
 800bd28:	1a626331 	.word	0x1a626331
 800bd2c:	3dd0b461 	.word	0x3dd0b461
 800bd30:	1a600000 	.word	0x1a600000
 800bd34:	3dd0b461 	.word	0x3dd0b461
 800bd38:	2e037073 	.word	0x2e037073
 800bd3c:	3ba3198a 	.word	0x3ba3198a
 800bd40:	6dc9c883 	.word	0x6dc9c883
 800bd44:	3fe45f30 	.word	0x3fe45f30
 800bd48:	2e000000 	.word	0x2e000000
 800bd4c:	3ba3198a 	.word	0x3ba3198a
 800bd50:	252049c1 	.word	0x252049c1
 800bd54:	397b839a 	.word	0x397b839a
 800bd58:	00000000 	.word	0x00000000
 800bd5c:	41700000 	.word	0x41700000
 800bd60:	3fe921fb 	.word	0x3fe921fb
 800bd64:	4002d97b 	.word	0x4002d97b
 800bd68:	413921fb 	.word	0x413921fb
 800bd6c:	0800d340 	.word	0x0800d340
 800bd70:	7fefffff 	.word	0x7fefffff
 800bd74:	0800d3c0 	.word	0x0800d3c0

0800bd78 <__ieee754_atan2f>:
 800bd78:	ee10 2a90 	vmov	r2, s1
 800bd7c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800bd80:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bd84:	b510      	push	{r4, lr}
 800bd86:	eef0 7a40 	vmov.f32	s15, s0
 800bd8a:	d806      	bhi.n	800bd9a <__ieee754_atan2f+0x22>
 800bd8c:	ee10 0a10 	vmov	r0, s0
 800bd90:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bd94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bd98:	d904      	bls.n	800bda4 <__ieee754_atan2f+0x2c>
 800bd9a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bd9e:	eeb0 0a67 	vmov.f32	s0, s15
 800bda2:	bd10      	pop	{r4, pc}
 800bda4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800bda8:	d103      	bne.n	800bdb2 <__ieee754_atan2f+0x3a>
 800bdaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdae:	f7ff bcff 	b.w	800b7b0 <atanf>
 800bdb2:	1794      	asrs	r4, r2, #30
 800bdb4:	f004 0402 	and.w	r4, r4, #2
 800bdb8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bdbc:	b93b      	cbnz	r3, 800bdce <__ieee754_atan2f+0x56>
 800bdbe:	2c02      	cmp	r4, #2
 800bdc0:	d05c      	beq.n	800be7c <__ieee754_atan2f+0x104>
 800bdc2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800be90 <__ieee754_atan2f+0x118>
 800bdc6:	2c03      	cmp	r4, #3
 800bdc8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800bdcc:	e7e7      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800bdce:	b939      	cbnz	r1, 800bde0 <__ieee754_atan2f+0x68>
 800bdd0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800be94 <__ieee754_atan2f+0x11c>
 800bdd4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800be98 <__ieee754_atan2f+0x120>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	fe67 7a87 	vselge.f32	s15, s15, s14
 800bdde:	e7de      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800bde0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bde4:	d110      	bne.n	800be08 <__ieee754_atan2f+0x90>
 800bde6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bdea:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdee:	d107      	bne.n	800be00 <__ieee754_atan2f+0x88>
 800bdf0:	2c02      	cmp	r4, #2
 800bdf2:	d846      	bhi.n	800be82 <__ieee754_atan2f+0x10a>
 800bdf4:	4b29      	ldr	r3, [pc, #164]	@ (800be9c <__ieee754_atan2f+0x124>)
 800bdf6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bdfa:	edd3 7a00 	vldr	s15, [r3]
 800bdfe:	e7ce      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800be00:	2c02      	cmp	r4, #2
 800be02:	d841      	bhi.n	800be88 <__ieee754_atan2f+0x110>
 800be04:	4b26      	ldr	r3, [pc, #152]	@ (800bea0 <__ieee754_atan2f+0x128>)
 800be06:	e7f6      	b.n	800bdf6 <__ieee754_atan2f+0x7e>
 800be08:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be0c:	d0e0      	beq.n	800bdd0 <__ieee754_atan2f+0x58>
 800be0e:	1a5b      	subs	r3, r3, r1
 800be10:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800be14:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800be18:	da1a      	bge.n	800be50 <__ieee754_atan2f+0xd8>
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	da01      	bge.n	800be22 <__ieee754_atan2f+0xaa>
 800be1e:	313c      	adds	r1, #60	@ 0x3c
 800be20:	db19      	blt.n	800be56 <__ieee754_atan2f+0xde>
 800be22:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800be26:	f7ff fd97 	bl	800b958 <fabsf>
 800be2a:	f7ff fcc1 	bl	800b7b0 <atanf>
 800be2e:	eef0 7a40 	vmov.f32	s15, s0
 800be32:	2c01      	cmp	r4, #1
 800be34:	d012      	beq.n	800be5c <__ieee754_atan2f+0xe4>
 800be36:	2c02      	cmp	r4, #2
 800be38:	d017      	beq.n	800be6a <__ieee754_atan2f+0xf2>
 800be3a:	2c00      	cmp	r4, #0
 800be3c:	d0af      	beq.n	800bd9e <__ieee754_atan2f+0x26>
 800be3e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bea4 <__ieee754_atan2f+0x12c>
 800be42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be46:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bea8 <__ieee754_atan2f+0x130>
 800be4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be4e:	e7a6      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800be50:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800be94 <__ieee754_atan2f+0x11c>
 800be54:	e7ed      	b.n	800be32 <__ieee754_atan2f+0xba>
 800be56:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800beac <__ieee754_atan2f+0x134>
 800be5a:	e7ea      	b.n	800be32 <__ieee754_atan2f+0xba>
 800be5c:	ee17 3a90 	vmov	r3, s15
 800be60:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800be64:	ee07 3a90 	vmov	s15, r3
 800be68:	e799      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800be6a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bea4 <__ieee754_atan2f+0x12c>
 800be6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be72:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bea8 <__ieee754_atan2f+0x130>
 800be76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be7a:	e790      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800be7c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bea8 <__ieee754_atan2f+0x130>
 800be80:	e78d      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800be82:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800beb0 <__ieee754_atan2f+0x138>
 800be86:	e78a      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800be88:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800beac <__ieee754_atan2f+0x134>
 800be8c:	e787      	b.n	800bd9e <__ieee754_atan2f+0x26>
 800be8e:	bf00      	nop
 800be90:	c0490fdb 	.word	0xc0490fdb
 800be94:	3fc90fdb 	.word	0x3fc90fdb
 800be98:	bfc90fdb 	.word	0xbfc90fdb
 800be9c:	0800d4d4 	.word	0x0800d4d4
 800bea0:	0800d4c8 	.word	0x0800d4c8
 800bea4:	33bbbd2e 	.word	0x33bbbd2e
 800bea8:	40490fdb 	.word	0x40490fdb
 800beac:	00000000 	.word	0x00000000
 800beb0:	3f490fdb 	.word	0x3f490fdb
 800beb4:	00000000 	.word	0x00000000

0800beb8 <__kernel_rem_pio2>:
 800beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bebc:	ed2d 8b06 	vpush	{d8-d10}
 800bec0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800bec4:	469b      	mov	fp, r3
 800bec6:	9001      	str	r0, [sp, #4]
 800bec8:	4bbb      	ldr	r3, [pc, #748]	@ (800c1b8 <__kernel_rem_pio2+0x300>)
 800beca:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800becc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800bed0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800bed4:	f112 0f14 	cmn.w	r2, #20
 800bed8:	bfa8      	it	ge
 800beda:	1ed3      	subge	r3, r2, #3
 800bedc:	f10b 3aff 	add.w	sl, fp, #4294967295
 800bee0:	bfb8      	it	lt
 800bee2:	2300      	movlt	r3, #0
 800bee4:	f06f 0517 	mvn.w	r5, #23
 800bee8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800c1a0 <__kernel_rem_pio2+0x2e8>
 800beec:	bfa4      	itt	ge
 800beee:	2018      	movge	r0, #24
 800bef0:	fb93 f3f0 	sdivge	r3, r3, r0
 800bef4:	fb03 5505 	mla	r5, r3, r5, r5
 800bef8:	eba3 040a 	sub.w	r4, r3, sl
 800befc:	4415      	add	r5, r2
 800befe:	460f      	mov	r7, r1
 800bf00:	eb09 060a 	add.w	r6, r9, sl
 800bf04:	a81a      	add	r0, sp, #104	@ 0x68
 800bf06:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	42b2      	cmp	r2, r6
 800bf0e:	dd0e      	ble.n	800bf2e <__kernel_rem_pio2+0x76>
 800bf10:	aa1a      	add	r2, sp, #104	@ 0x68
 800bf12:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800bf16:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800bf1a:	2600      	movs	r6, #0
 800bf1c:	454e      	cmp	r6, r9
 800bf1e:	dc25      	bgt.n	800bf6c <__kernel_rem_pio2+0xb4>
 800bf20:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800c1a0 <__kernel_rem_pio2+0x2e8>
 800bf24:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bf28:	4614      	mov	r4, r2
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	e015      	b.n	800bf5a <__kernel_rem_pio2+0xa2>
 800bf2e:	42d4      	cmn	r4, r2
 800bf30:	d409      	bmi.n	800bf46 <__kernel_rem_pio2+0x8e>
 800bf32:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800bf36:	ee07 1a90 	vmov	s15, r1
 800bf3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bf3e:	eca0 7b02 	vstmia	r0!, {d7}
 800bf42:	3201      	adds	r2, #1
 800bf44:	e7e2      	b.n	800bf0c <__kernel_rem_pio2+0x54>
 800bf46:	eeb0 7b46 	vmov.f64	d7, d6
 800bf4a:	e7f8      	b.n	800bf3e <__kernel_rem_pio2+0x86>
 800bf4c:	ecbc 5b02 	vldmia	ip!, {d5}
 800bf50:	ed94 6b00 	vldr	d6, [r4]
 800bf54:	3001      	adds	r0, #1
 800bf56:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bf5a:	4550      	cmp	r0, sl
 800bf5c:	f1a4 0408 	sub.w	r4, r4, #8
 800bf60:	ddf4      	ble.n	800bf4c <__kernel_rem_pio2+0x94>
 800bf62:	ecae 7b02 	vstmia	lr!, {d7}
 800bf66:	3601      	adds	r6, #1
 800bf68:	3208      	adds	r2, #8
 800bf6a:	e7d7      	b.n	800bf1c <__kernel_rem_pio2+0x64>
 800bf6c:	aa06      	add	r2, sp, #24
 800bf6e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800c1a8 <__kernel_rem_pio2+0x2f0>
 800bf72:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800c1b0 <__kernel_rem_pio2+0x2f8>
 800bf76:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800bf7a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800bf7e:	9203      	str	r2, [sp, #12]
 800bf80:	9302      	str	r3, [sp, #8]
 800bf82:	464c      	mov	r4, r9
 800bf84:	00e3      	lsls	r3, r4, #3
 800bf86:	9304      	str	r3, [sp, #16]
 800bf88:	ab92      	add	r3, sp, #584	@ 0x248
 800bf8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf8e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800bf92:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800bf94:	ab06      	add	r3, sp, #24
 800bf96:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bf9a:	461e      	mov	r6, r3
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	f1a2 0208 	sub.w	r2, r2, #8
 800bfa4:	dc4a      	bgt.n	800c03c <__kernel_rem_pio2+0x184>
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	9305      	str	r3, [sp, #20]
 800bfaa:	f000 fa01 	bl	800c3b0 <scalbn>
 800bfae:	eeb0 8b40 	vmov.f64	d8, d0
 800bfb2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800bfb6:	ee28 0b00 	vmul.f64	d0, d8, d0
 800bfba:	f000 fa79 	bl	800c4b0 <floor>
 800bfbe:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800bfc2:	eea0 8b47 	vfms.f64	d8, d0, d7
 800bfc6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800bfca:	2d00      	cmp	r5, #0
 800bfcc:	ee17 8a90 	vmov	r8, s15
 800bfd0:	9b05      	ldr	r3, [sp, #20]
 800bfd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bfd6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800bfda:	dd41      	ble.n	800c060 <__kernel_rem_pio2+0x1a8>
 800bfdc:	1e60      	subs	r0, r4, #1
 800bfde:	aa06      	add	r2, sp, #24
 800bfe0:	f1c5 0c18 	rsb	ip, r5, #24
 800bfe4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800bfe8:	fa46 f20c 	asr.w	r2, r6, ip
 800bfec:	4490      	add	r8, r2
 800bfee:	fa02 f20c 	lsl.w	r2, r2, ip
 800bff2:	1ab6      	subs	r6, r6, r2
 800bff4:	aa06      	add	r2, sp, #24
 800bff6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800bffa:	f1c5 0217 	rsb	r2, r5, #23
 800bffe:	4116      	asrs	r6, r2
 800c000:	2e00      	cmp	r6, #0
 800c002:	dd3c      	ble.n	800c07e <__kernel_rem_pio2+0x1c6>
 800c004:	f04f 0c00 	mov.w	ip, #0
 800c008:	f108 0801 	add.w	r8, r8, #1
 800c00c:	4660      	mov	r0, ip
 800c00e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800c012:	4564      	cmp	r4, ip
 800c014:	dc66      	bgt.n	800c0e4 <__kernel_rem_pio2+0x22c>
 800c016:	2d00      	cmp	r5, #0
 800c018:	dd03      	ble.n	800c022 <__kernel_rem_pio2+0x16a>
 800c01a:	2d01      	cmp	r5, #1
 800c01c:	d072      	beq.n	800c104 <__kernel_rem_pio2+0x24c>
 800c01e:	2d02      	cmp	r5, #2
 800c020:	d07a      	beq.n	800c118 <__kernel_rem_pio2+0x260>
 800c022:	2e02      	cmp	r6, #2
 800c024:	d12b      	bne.n	800c07e <__kernel_rem_pio2+0x1c6>
 800c026:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c02a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c02e:	b330      	cbz	r0, 800c07e <__kernel_rem_pio2+0x1c6>
 800c030:	4628      	mov	r0, r5
 800c032:	f000 f9bd 	bl	800c3b0 <scalbn>
 800c036:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c03a:	e020      	b.n	800c07e <__kernel_rem_pio2+0x1c6>
 800c03c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c040:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c044:	3801      	subs	r0, #1
 800c046:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c04a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c04e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c052:	eca6 0a01 	vstmia	r6!, {s0}
 800c056:	ed92 0b00 	vldr	d0, [r2]
 800c05a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c05e:	e79e      	b.n	800bf9e <__kernel_rem_pio2+0xe6>
 800c060:	d105      	bne.n	800c06e <__kernel_rem_pio2+0x1b6>
 800c062:	1e62      	subs	r2, r4, #1
 800c064:	a906      	add	r1, sp, #24
 800c066:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800c06a:	15f6      	asrs	r6, r6, #23
 800c06c:	e7c8      	b.n	800c000 <__kernel_rem_pio2+0x148>
 800c06e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c072:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07a:	da31      	bge.n	800c0e0 <__kernel_rem_pio2+0x228>
 800c07c:	2600      	movs	r6, #0
 800c07e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c086:	f040 809b 	bne.w	800c1c0 <__kernel_rem_pio2+0x308>
 800c08a:	1e62      	subs	r2, r4, #1
 800c08c:	2000      	movs	r0, #0
 800c08e:	454a      	cmp	r2, r9
 800c090:	da49      	bge.n	800c126 <__kernel_rem_pio2+0x26e>
 800c092:	2800      	cmp	r0, #0
 800c094:	d062      	beq.n	800c15c <__kernel_rem_pio2+0x2a4>
 800c096:	3c01      	subs	r4, #1
 800c098:	ab06      	add	r3, sp, #24
 800c09a:	3d18      	subs	r5, #24
 800c09c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0f8      	beq.n	800c096 <__kernel_rem_pio2+0x1de>
 800c0a4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f000 f981 	bl	800c3b0 <scalbn>
 800c0ae:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800c1a8 <__kernel_rem_pio2+0x2f0>
 800c0b2:	1c62      	adds	r2, r4, #1
 800c0b4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800c0b6:	00d3      	lsls	r3, r2, #3
 800c0b8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c0bc:	4622      	mov	r2, r4
 800c0be:	2a00      	cmp	r2, #0
 800c0c0:	f280 80a8 	bge.w	800c214 <__kernel_rem_pio2+0x35c>
 800c0c4:	4622      	mov	r2, r4
 800c0c6:	2a00      	cmp	r2, #0
 800c0c8:	f2c0 80c6 	blt.w	800c258 <__kernel_rem_pio2+0x3a0>
 800c0cc:	a96a      	add	r1, sp, #424	@ 0x1a8
 800c0ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c0d2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800c1a0 <__kernel_rem_pio2+0x2e8>
 800c0d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800c1bc <__kernel_rem_pio2+0x304>
 800c0da:	2000      	movs	r0, #0
 800c0dc:	1aa1      	subs	r1, r4, r2
 800c0de:	e0b0      	b.n	800c242 <__kernel_rem_pio2+0x38a>
 800c0e0:	2602      	movs	r6, #2
 800c0e2:	e78f      	b.n	800c004 <__kernel_rem_pio2+0x14c>
 800c0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e8:	b948      	cbnz	r0, 800c0fe <__kernel_rem_pio2+0x246>
 800c0ea:	b122      	cbz	r2, 800c0f6 <__kernel_rem_pio2+0x23e>
 800c0ec:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800c0f0:	f843 2c04 	str.w	r2, [r3, #-4]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f10c 0c01 	add.w	ip, ip, #1
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	e789      	b.n	800c012 <__kernel_rem_pio2+0x15a>
 800c0fe:	ebae 0202 	sub.w	r2, lr, r2
 800c102:	e7f5      	b.n	800c0f0 <__kernel_rem_pio2+0x238>
 800c104:	1e62      	subs	r2, r4, #1
 800c106:	ab06      	add	r3, sp, #24
 800c108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c10c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c110:	a906      	add	r1, sp, #24
 800c112:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c116:	e784      	b.n	800c022 <__kernel_rem_pio2+0x16a>
 800c118:	1e62      	subs	r2, r4, #1
 800c11a:	ab06      	add	r3, sp, #24
 800c11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c120:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c124:	e7f4      	b.n	800c110 <__kernel_rem_pio2+0x258>
 800c126:	ab06      	add	r3, sp, #24
 800c128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12c:	3a01      	subs	r2, #1
 800c12e:	4318      	orrs	r0, r3
 800c130:	e7ad      	b.n	800c08e <__kernel_rem_pio2+0x1d6>
 800c132:	3301      	adds	r3, #1
 800c134:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800c138:	2800      	cmp	r0, #0
 800c13a:	d0fa      	beq.n	800c132 <__kernel_rem_pio2+0x27a>
 800c13c:	9a04      	ldr	r2, [sp, #16]
 800c13e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800c142:	446a      	add	r2, sp
 800c144:	eb04 000b 	add.w	r0, r4, fp
 800c148:	a91a      	add	r1, sp, #104	@ 0x68
 800c14a:	1c66      	adds	r6, r4, #1
 800c14c:	3a98      	subs	r2, #152	@ 0x98
 800c14e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800c152:	4423      	add	r3, r4
 800c154:	42b3      	cmp	r3, r6
 800c156:	da04      	bge.n	800c162 <__kernel_rem_pio2+0x2aa>
 800c158:	461c      	mov	r4, r3
 800c15a:	e713      	b.n	800bf84 <__kernel_rem_pio2+0xcc>
 800c15c:	9a03      	ldr	r2, [sp, #12]
 800c15e:	2301      	movs	r3, #1
 800c160:	e7e8      	b.n	800c134 <__kernel_rem_pio2+0x27c>
 800c162:	9902      	ldr	r1, [sp, #8]
 800c164:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c168:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800c16c:	9104      	str	r1, [sp, #16]
 800c16e:	ee07 1a90 	vmov	s15, r1
 800c172:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c176:	2400      	movs	r4, #0
 800c178:	eca0 7b02 	vstmia	r0!, {d7}
 800c17c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800c1a0 <__kernel_rem_pio2+0x2e8>
 800c180:	4686      	mov	lr, r0
 800c182:	4554      	cmp	r4, sl
 800c184:	dd03      	ble.n	800c18e <__kernel_rem_pio2+0x2d6>
 800c186:	eca2 7b02 	vstmia	r2!, {d7}
 800c18a:	3601      	adds	r6, #1
 800c18c:	e7e2      	b.n	800c154 <__kernel_rem_pio2+0x29c>
 800c18e:	ecbc 5b02 	vldmia	ip!, {d5}
 800c192:	ed3e 6b02 	vldmdb	lr!, {d6}
 800c196:	3401      	adds	r4, #1
 800c198:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c19c:	e7f1      	b.n	800c182 <__kernel_rem_pio2+0x2ca>
 800c19e:	bf00      	nop
	...
 800c1ac:	3e700000 	.word	0x3e700000
 800c1b0:	00000000 	.word	0x00000000
 800c1b4:	41700000 	.word	0x41700000
 800c1b8:	0800d520 	.word	0x0800d520
 800c1bc:	0800d4e0 	.word	0x0800d4e0
 800c1c0:	4268      	negs	r0, r5
 800c1c2:	eeb0 0b48 	vmov.f64	d0, d8
 800c1c6:	f000 f8f3 	bl	800c3b0 <scalbn>
 800c1ca:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800c398 <__kernel_rem_pio2+0x4e0>
 800c1ce:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d6:	db17      	blt.n	800c208 <__kernel_rem_pio2+0x350>
 800c1d8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800c3a0 <__kernel_rem_pio2+0x4e8>
 800c1dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c1e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c1e4:	aa06      	add	r2, sp, #24
 800c1e6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c1ea:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c1ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c1f2:	3518      	adds	r5, #24
 800c1f4:	ee10 3a10 	vmov	r3, s0
 800c1f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c1fc:	ee17 3a10 	vmov	r3, s14
 800c200:	3401      	adds	r4, #1
 800c202:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c206:	e74d      	b.n	800c0a4 <__kernel_rem_pio2+0x1ec>
 800c208:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c20c:	aa06      	add	r2, sp, #24
 800c20e:	ee10 3a10 	vmov	r3, s0
 800c212:	e7f6      	b.n	800c202 <__kernel_rem_pio2+0x34a>
 800c214:	a806      	add	r0, sp, #24
 800c216:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c21a:	9001      	str	r0, [sp, #4]
 800c21c:	ee07 0a90 	vmov	s15, r0
 800c220:	3a01      	subs	r2, #1
 800c222:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c226:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c22a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c22e:	ed21 7b02 	vstmdb	r1!, {d7}
 800c232:	e744      	b.n	800c0be <__kernel_rem_pio2+0x206>
 800c234:	ecbc 5b02 	vldmia	ip!, {d5}
 800c238:	ecb5 6b02 	vldmia	r5!, {d6}
 800c23c:	3001      	adds	r0, #1
 800c23e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c242:	4548      	cmp	r0, r9
 800c244:	dc01      	bgt.n	800c24a <__kernel_rem_pio2+0x392>
 800c246:	4281      	cmp	r1, r0
 800c248:	daf4      	bge.n	800c234 <__kernel_rem_pio2+0x37c>
 800c24a:	a842      	add	r0, sp, #264	@ 0x108
 800c24c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c250:	ed81 7b00 	vstr	d7, [r1]
 800c254:	3a01      	subs	r2, #1
 800c256:	e736      	b.n	800c0c6 <__kernel_rem_pio2+0x20e>
 800c258:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800c25a:	2a02      	cmp	r2, #2
 800c25c:	dc0a      	bgt.n	800c274 <__kernel_rem_pio2+0x3bc>
 800c25e:	2a00      	cmp	r2, #0
 800c260:	dc2d      	bgt.n	800c2be <__kernel_rem_pio2+0x406>
 800c262:	d046      	beq.n	800c2f2 <__kernel_rem_pio2+0x43a>
 800c264:	f008 0007 	and.w	r0, r8, #7
 800c268:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800c26c:	ecbd 8b06 	vpop	{d8-d10}
 800c270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c274:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800c276:	2a03      	cmp	r2, #3
 800c278:	d1f4      	bne.n	800c264 <__kernel_rem_pio2+0x3ac>
 800c27a:	a942      	add	r1, sp, #264	@ 0x108
 800c27c:	f1a3 0208 	sub.w	r2, r3, #8
 800c280:	440a      	add	r2, r1
 800c282:	4611      	mov	r1, r2
 800c284:	4620      	mov	r0, r4
 800c286:	2800      	cmp	r0, #0
 800c288:	f1a1 0108 	sub.w	r1, r1, #8
 800c28c:	dc52      	bgt.n	800c334 <__kernel_rem_pio2+0x47c>
 800c28e:	4621      	mov	r1, r4
 800c290:	2901      	cmp	r1, #1
 800c292:	f1a2 0208 	sub.w	r2, r2, #8
 800c296:	dc5d      	bgt.n	800c354 <__kernel_rem_pio2+0x49c>
 800c298:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800c3a8 <__kernel_rem_pio2+0x4f0>
 800c29c:	aa42      	add	r2, sp, #264	@ 0x108
 800c29e:	4413      	add	r3, r2
 800c2a0:	2c01      	cmp	r4, #1
 800c2a2:	dc67      	bgt.n	800c374 <__kernel_rem_pio2+0x4bc>
 800c2a4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800c2a8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800c2ac:	2e00      	cmp	r6, #0
 800c2ae:	d167      	bne.n	800c380 <__kernel_rem_pio2+0x4c8>
 800c2b0:	ed87 5b00 	vstr	d5, [r7]
 800c2b4:	ed87 6b02 	vstr	d6, [r7, #8]
 800c2b8:	ed87 7b04 	vstr	d7, [r7, #16]
 800c2bc:	e7d2      	b.n	800c264 <__kernel_rem_pio2+0x3ac>
 800c2be:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800c3a8 <__kernel_rem_pio2+0x4f0>
 800c2c2:	aa42      	add	r2, sp, #264	@ 0x108
 800c2c4:	4413      	add	r3, r2
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	da24      	bge.n	800c316 <__kernel_rem_pio2+0x45e>
 800c2cc:	b34e      	cbz	r6, 800c322 <__kernel_rem_pio2+0x46a>
 800c2ce:	eeb1 7b46 	vneg.f64	d7, d6
 800c2d2:	ed87 7b00 	vstr	d7, [r7]
 800c2d6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800c2da:	aa44      	add	r2, sp, #272	@ 0x110
 800c2dc:	2301      	movs	r3, #1
 800c2de:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c2e2:	429c      	cmp	r4, r3
 800c2e4:	da20      	bge.n	800c328 <__kernel_rem_pio2+0x470>
 800c2e6:	b10e      	cbz	r6, 800c2ec <__kernel_rem_pio2+0x434>
 800c2e8:	eeb1 7b47 	vneg.f64	d7, d7
 800c2ec:	ed87 7b02 	vstr	d7, [r7, #8]
 800c2f0:	e7b8      	b.n	800c264 <__kernel_rem_pio2+0x3ac>
 800c2f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800c3a8 <__kernel_rem_pio2+0x4f0>
 800c2f6:	aa42      	add	r2, sp, #264	@ 0x108
 800c2f8:	4413      	add	r3, r2
 800c2fa:	2c00      	cmp	r4, #0
 800c2fc:	da05      	bge.n	800c30a <__kernel_rem_pio2+0x452>
 800c2fe:	b10e      	cbz	r6, 800c304 <__kernel_rem_pio2+0x44c>
 800c300:	eeb1 7b47 	vneg.f64	d7, d7
 800c304:	ed87 7b00 	vstr	d7, [r7]
 800c308:	e7ac      	b.n	800c264 <__kernel_rem_pio2+0x3ac>
 800c30a:	ed33 6b02 	vldmdb	r3!, {d6}
 800c30e:	3c01      	subs	r4, #1
 800c310:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c314:	e7f1      	b.n	800c2fa <__kernel_rem_pio2+0x442>
 800c316:	ed33 7b02 	vldmdb	r3!, {d7}
 800c31a:	3a01      	subs	r2, #1
 800c31c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c320:	e7d2      	b.n	800c2c8 <__kernel_rem_pio2+0x410>
 800c322:	eeb0 7b46 	vmov.f64	d7, d6
 800c326:	e7d4      	b.n	800c2d2 <__kernel_rem_pio2+0x41a>
 800c328:	ecb2 6b02 	vldmia	r2!, {d6}
 800c32c:	3301      	adds	r3, #1
 800c32e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c332:	e7d6      	b.n	800c2e2 <__kernel_rem_pio2+0x42a>
 800c334:	ed91 7b00 	vldr	d7, [r1]
 800c338:	ed91 5b02 	vldr	d5, [r1, #8]
 800c33c:	3801      	subs	r0, #1
 800c33e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c342:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c346:	ed81 6b00 	vstr	d6, [r1]
 800c34a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c34e:	ed81 7b02 	vstr	d7, [r1, #8]
 800c352:	e798      	b.n	800c286 <__kernel_rem_pio2+0x3ce>
 800c354:	ed92 7b00 	vldr	d7, [r2]
 800c358:	ed92 5b02 	vldr	d5, [r2, #8]
 800c35c:	3901      	subs	r1, #1
 800c35e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c362:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c366:	ed82 6b00 	vstr	d6, [r2]
 800c36a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c36e:	ed82 7b02 	vstr	d7, [r2, #8]
 800c372:	e78d      	b.n	800c290 <__kernel_rem_pio2+0x3d8>
 800c374:	ed33 6b02 	vldmdb	r3!, {d6}
 800c378:	3c01      	subs	r4, #1
 800c37a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c37e:	e78f      	b.n	800c2a0 <__kernel_rem_pio2+0x3e8>
 800c380:	eeb1 5b45 	vneg.f64	d5, d5
 800c384:	eeb1 6b46 	vneg.f64	d6, d6
 800c388:	ed87 5b00 	vstr	d5, [r7]
 800c38c:	eeb1 7b47 	vneg.f64	d7, d7
 800c390:	ed87 6b02 	vstr	d6, [r7, #8]
 800c394:	e790      	b.n	800c2b8 <__kernel_rem_pio2+0x400>
 800c396:	bf00      	nop
 800c398:	00000000 	.word	0x00000000
 800c39c:	41700000 	.word	0x41700000
 800c3a0:	00000000 	.word	0x00000000
 800c3a4:	3e700000 	.word	0x3e700000
	...

0800c3b0 <scalbn>:
 800c3b0:	ee10 1a90 	vmov	r1, s1
 800c3b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c3b8:	b98b      	cbnz	r3, 800c3de <scalbn+0x2e>
 800c3ba:	ee10 3a10 	vmov	r3, s0
 800c3be:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c3c2:	4319      	orrs	r1, r3
 800c3c4:	d00a      	beq.n	800c3dc <scalbn+0x2c>
 800c3c6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c478 <scalbn+0xc8>
 800c3ca:	4b37      	ldr	r3, [pc, #220]	@ (800c4a8 <scalbn+0xf8>)
 800c3cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c3d0:	4298      	cmp	r0, r3
 800c3d2:	da0b      	bge.n	800c3ec <scalbn+0x3c>
 800c3d4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c480 <scalbn+0xd0>
 800c3d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c3dc:	4770      	bx	lr
 800c3de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d107      	bne.n	800c3f6 <scalbn+0x46>
 800c3e6:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c3ea:	4770      	bx	lr
 800c3ec:	ee10 1a90 	vmov	r1, s1
 800c3f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c3f4:	3b36      	subs	r3, #54	@ 0x36
 800c3f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c3fa:	4290      	cmp	r0, r2
 800c3fc:	dd0d      	ble.n	800c41a <scalbn+0x6a>
 800c3fe:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c488 <scalbn+0xd8>
 800c402:	ee10 3a90 	vmov	r3, s1
 800c406:	eeb0 6b47 	vmov.f64	d6, d7
 800c40a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800c490 <scalbn+0xe0>
 800c40e:	2b00      	cmp	r3, #0
 800c410:	fe27 7b05 	vselge.f64	d7, d7, d5
 800c414:	ee27 0b06 	vmul.f64	d0, d7, d6
 800c418:	4770      	bx	lr
 800c41a:	4418      	add	r0, r3
 800c41c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800c420:	4298      	cmp	r0, r3
 800c422:	dcec      	bgt.n	800c3fe <scalbn+0x4e>
 800c424:	2800      	cmp	r0, #0
 800c426:	dd0a      	ble.n	800c43e <scalbn+0x8e>
 800c428:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800c42c:	ec53 2b10 	vmov	r2, r3, d0
 800c430:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800c434:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c438:	ec43 2b10 	vmov	d0, r2, r3
 800c43c:	4770      	bx	lr
 800c43e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800c442:	da09      	bge.n	800c458 <scalbn+0xa8>
 800c444:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800c480 <scalbn+0xd0>
 800c448:	ee10 3a90 	vmov	r3, s1
 800c44c:	eeb0 6b47 	vmov.f64	d6, d7
 800c450:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800c498 <scalbn+0xe8>
 800c454:	2b00      	cmp	r3, #0
 800c456:	e7db      	b.n	800c410 <scalbn+0x60>
 800c458:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800c45c:	ec53 2b10 	vmov	r2, r3, d0
 800c460:	3036      	adds	r0, #54	@ 0x36
 800c462:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800c466:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c46a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c4a0 <scalbn+0xf0>
 800c46e:	ec43 2b10 	vmov	d0, r2, r3
 800c472:	e7b1      	b.n	800c3d8 <scalbn+0x28>
 800c474:	f3af 8000 	nop.w
 800c478:	00000000 	.word	0x00000000
 800c47c:	43500000 	.word	0x43500000
 800c480:	c2f8f359 	.word	0xc2f8f359
 800c484:	01a56e1f 	.word	0x01a56e1f
 800c488:	8800759c 	.word	0x8800759c
 800c48c:	7e37e43c 	.word	0x7e37e43c
 800c490:	8800759c 	.word	0x8800759c
 800c494:	fe37e43c 	.word	0xfe37e43c
 800c498:	c2f8f359 	.word	0xc2f8f359
 800c49c:	81a56e1f 	.word	0x81a56e1f
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	3c900000 	.word	0x3c900000
 800c4a8:	ffff3cb0 	.word	0xffff3cb0
 800c4ac:	00000000 	.word	0x00000000

0800c4b0 <floor>:
 800c4b0:	ee10 3a90 	vmov	r3, s1
 800c4b4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800c4b8:	ee10 2a10 	vmov	r2, s0
 800c4bc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800c4c0:	2913      	cmp	r1, #19
 800c4c2:	b530      	push	{r4, r5, lr}
 800c4c4:	4615      	mov	r5, r2
 800c4c6:	dc33      	bgt.n	800c530 <floor+0x80>
 800c4c8:	2900      	cmp	r1, #0
 800c4ca:	da18      	bge.n	800c4fe <floor+0x4e>
 800c4cc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800c590 <floor+0xe0>
 800c4d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c4d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4dc:	dd0a      	ble.n	800c4f4 <floor+0x44>
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	da50      	bge.n	800c584 <floor+0xd4>
 800c4e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	4b2a      	ldr	r3, [pc, #168]	@ (800c598 <floor+0xe8>)
 800c4ee:	bf08      	it	eq
 800c4f0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	ec41 0b10 	vmov	d0, r0, r1
 800c4fc:	e01f      	b.n	800c53e <floor+0x8e>
 800c4fe:	4827      	ldr	r0, [pc, #156]	@ (800c59c <floor+0xec>)
 800c500:	4108      	asrs	r0, r1
 800c502:	ea03 0400 	and.w	r4, r3, r0
 800c506:	4314      	orrs	r4, r2
 800c508:	d019      	beq.n	800c53e <floor+0x8e>
 800c50a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c590 <floor+0xe0>
 800c50e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c512:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51a:	ddeb      	ble.n	800c4f4 <floor+0x44>
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bfbe      	ittt	lt
 800c520:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800c524:	410a      	asrlt	r2, r1
 800c526:	189b      	addlt	r3, r3, r2
 800c528:	ea23 0300 	bic.w	r3, r3, r0
 800c52c:	2200      	movs	r2, #0
 800c52e:	e7e1      	b.n	800c4f4 <floor+0x44>
 800c530:	2933      	cmp	r1, #51	@ 0x33
 800c532:	dd05      	ble.n	800c540 <floor+0x90>
 800c534:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c538:	d101      	bne.n	800c53e <floor+0x8e>
 800c53a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c53e:	bd30      	pop	{r4, r5, pc}
 800c540:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	40e0      	lsrs	r0, r4
 800c54a:	4210      	tst	r0, r2
 800c54c:	d0f7      	beq.n	800c53e <floor+0x8e>
 800c54e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800c590 <floor+0xe0>
 800c552:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c556:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c55e:	ddc9      	ble.n	800c4f4 <floor+0x44>
 800c560:	2b00      	cmp	r3, #0
 800c562:	da02      	bge.n	800c56a <floor+0xba>
 800c564:	2914      	cmp	r1, #20
 800c566:	d103      	bne.n	800c570 <floor+0xc0>
 800c568:	3301      	adds	r3, #1
 800c56a:	ea22 0200 	bic.w	r2, r2, r0
 800c56e:	e7c1      	b.n	800c4f4 <floor+0x44>
 800c570:	2401      	movs	r4, #1
 800c572:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800c576:	fa04 f101 	lsl.w	r1, r4, r1
 800c57a:	440a      	add	r2, r1
 800c57c:	42aa      	cmp	r2, r5
 800c57e:	bf38      	it	cc
 800c580:	191b      	addcc	r3, r3, r4
 800c582:	e7f2      	b.n	800c56a <floor+0xba>
 800c584:	2200      	movs	r2, #0
 800c586:	4613      	mov	r3, r2
 800c588:	e7b4      	b.n	800c4f4 <floor+0x44>
 800c58a:	bf00      	nop
 800c58c:	f3af 8000 	nop.w
 800c590:	8800759c 	.word	0x8800759c
 800c594:	7e37e43c 	.word	0x7e37e43c
 800c598:	bff00000 	.word	0xbff00000
 800c59c:	000fffff 	.word	0x000fffff

0800c5a0 <_init>:
 800c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a2:	bf00      	nop
 800c5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5a6:	bc08      	pop	{r3}
 800c5a8:	469e      	mov	lr, r3
 800c5aa:	4770      	bx	lr

0800c5ac <_fini>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	bf00      	nop
 800c5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b2:	bc08      	pop	{r3}
 800c5b4:	469e      	mov	lr, r3
 800c5b6:	4770      	bx	lr
