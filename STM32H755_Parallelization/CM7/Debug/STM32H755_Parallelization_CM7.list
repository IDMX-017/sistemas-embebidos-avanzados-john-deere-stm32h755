
STM32H755_Parallelization_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b114  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800b3b8  0800b3b8  0000c3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7c8  0800b7c8  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7c8  0800b7c8  0000c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7d0  0800b7d0  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7d0  0800b7d0  0000c7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7d4  0800b7d4  0000c7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  24000000  0800b7d8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  240001dc  0800b9b4  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004e64  0800b9b4  0000de64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022564  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e0  00000000  00000000  0002f76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  00033850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e8  00000000  00000000  00035200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d1ed  00000000  00000000  000365e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe6b  00000000  00000000  000737d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00193802  00000000  00000000  00093640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00226e42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aac  00000000  00000000  00226e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  0022e934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b39c 	.word	0x0800b39c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800b39c 	.word	0x0800b39c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <main+0xb4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 faa9 	bl	8000d2c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fceb 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f847 	bl	8000870 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <main+0xb4>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <main+0xb4>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <main+0xb4>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f803 	bl	800180c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f001 f819 	bl	8001840 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <main+0xb4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 fa7b 	bl	8000d2c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f907 	bl	8000a48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083a:	f000 f8b9 	bl	80009b0 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 800083e:	f000 f891 	bl	8000964 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000842:	f005 fba1 	bl	8005f88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000846:	4a07      	ldr	r2, [pc, #28]	@ (8000864 <main+0xb8>)
 8000848:	2100      	movs	r1, #0
 800084a:	4807      	ldr	r0, [pc, #28]	@ (8000868 <main+0xbc>)
 800084c:	f005 fbe6 	bl	800601c <osThreadNew>
 8000850:	4603      	mov	r3, r0
 8000852:	4a06      	ldr	r2, [pc, #24]	@ (800086c <main+0xc0>)
 8000854:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000856:	f005 fbbb 	bl	8005fd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085a:	bf00      	nop
 800085c:	e7fd      	b.n	800085a <main+0xae>
 800085e:	bf00      	nop
 8000860:	58024400 	.word	0x58024400
 8000864:	0800b408 	.word	0x0800b408
 8000868:	08000c01 	.word	0x08000c01
 800086c:	240002d8 	.word	0x240002d8

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	@ 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	224c      	movs	r2, #76	@ 0x4c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f008 fe81 	bl	8009586 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fe7b 	bl	8009586 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000890:	2004      	movs	r0, #4
 8000892:	f000 ffe9 	bl	8001868 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b30      	ldr	r3, [pc, #192]	@ (800095c <SystemClock_Config+0xec>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a2f      	ldr	r2, [pc, #188]	@ (800095c <SystemClock_Config+0xec>)
 80008a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <SystemClock_Config+0xec>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <SystemClock_Config+0xf0>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000960 <SystemClock_Config+0xf0>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008bc:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <SystemClock_Config+0xf0>)
 80008be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c8:	bf00      	nop
 80008ca:	4b24      	ldr	r3, [pc, #144]	@ (800095c <SystemClock_Config+0xec>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008d6:	d1f8      	bne.n	80008ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008ee:	23f0      	movs	r3, #240	@ 0xf0
 80008f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008f6:	2305      	movs	r3, #5
 80008f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008fe:	2308      	movs	r3, #8
 8000900:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000902:	2300      	movs	r3, #0
 8000904:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f804 	bl	800191c <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800091a:	f000 fa07 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	233f      	movs	r3, #63	@ 0x3f
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800092a:	2308      	movs	r3, #8
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000932:	2340      	movs	r3, #64	@ 0x40
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093c:	2340      	movs	r3, #64	@ 0x40
 800093e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2104      	movs	r1, #4
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fc43 	bl	80021d0 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000950:	f000 f9ec 	bl	8000d2c <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3770      	adds	r7, #112	@ 0x70
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58024800 	.word	0x58024800
 8000960:	58000400 	.word	0x58000400

08000964 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_TIM17_Init+0x44>)
 800096a:	4a10      	ldr	r2, [pc, #64]	@ (80009ac <MX_TIM17_Init+0x48>)
 800096c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_TIM17_Init+0x44>)
 800097c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000980:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_TIM17_Init+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000996:	f003 fe15 	bl	80045c4 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009a0:	f000 f9c4 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	240001f8 	.word	0x240001f8
 80009ac:	40014800 	.word	0x40014800

080009b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009b6:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <MX_USART3_UART_Init+0x94>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f8:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009fa:	f004 f917 	bl	8004c2c <HAL_UART_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 f992 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 8000a0c:	f005 f9ad 	bl	8005d6a <HAL_UARTEx_SetTxFifoThreshold>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 f989 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 8000a1e:	f005 f9e2 	bl	8005de6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a28:	f000 f980 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 8000a2e:	f005 f963 	bl	8005cf8 <HAL_UARTEx_DisableFifoMode>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a38:	f000 f978 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000244 	.word	0x24000244
 8000a44:	40004800 	.word	0x40004800

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b62      	ldr	r3, [pc, #392]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	4a60      	ldr	r2, [pc, #384]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b5a      	ldr	r3, [pc, #360]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a82:	4a59      	ldr	r2, [pc, #356]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8c:	4b56      	ldr	r3, [pc, #344]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b53      	ldr	r3, [pc, #332]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa0:	4a51      	ldr	r2, [pc, #324]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	4a4a      	ldr	r2, [pc, #296]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac8:	4b47      	ldr	r3, [pc, #284]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	4b44      	ldr	r3, [pc, #272]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	4a42      	ldr	r2, [pc, #264]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae6:	4b40      	ldr	r3, [pc, #256]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000afa:	483c      	ldr	r0, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x1a4>)
 8000afc:	f000 fe52 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4836      	ldr	r0, [pc, #216]	@ (8000bf0 <MX_GPIO_Init+0x1a8>)
 8000b16:	f000 fc95 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b1a:	2332      	movs	r3, #50	@ 0x32
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2a:	230b      	movs	r3, #11
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	482e      	ldr	r0, [pc, #184]	@ (8000bf0 <MX_GPIO_Init+0x1a8>)
 8000b36:	f000 fc85 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b3a:	2386      	movs	r3, #134	@ 0x86
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4827      	ldr	r0, [pc, #156]	@ (8000bf4 <MX_GPIO_Init+0x1ac>)
 8000b56:	f000 fc75 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b5a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	481e      	ldr	r0, [pc, #120]	@ (8000bec <MX_GPIO_Init+0x1a4>)
 8000b74:	f000 fc66 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4815      	ldr	r0, [pc, #84]	@ (8000bec <MX_GPIO_Init+0x1a4>)
 8000b96:	f000 fc55 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b9a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bac:	230a      	movs	r3, #10
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480f      	ldr	r0, [pc, #60]	@ (8000bf4 <MX_GPIO_Init+0x1ac>)
 8000bb8:	f000 fc44 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bbc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bce:	230b      	movs	r3, #11
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <MX_GPIO_Init+0x1b0>)
 8000bda:	f000 fc33 	bl	8001444 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020400 	.word	0x58020400
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58020000 	.word	0x58020000
 8000bf8:	58021800 	.word	0x58021800
 8000bfc:	00000000 	.word	0x00000000

08000c00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	@ 0x40
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
		HAL_TIM_Base_Start(&htim17);
 8000c08:	483b      	ldr	r0, [pc, #236]	@ (8000cf8 <StartDefaultTask+0xf8>)
 8000c0a:	f003 fd33 	bl	8004674 <HAL_TIM_Base_Start>
		#define CANTIDAD_INTERVALOS 10000000
		double baseIntervalo, fdx, x;
		double acum = 0;
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		long i;

		baseIntervalo = 1.0 / CANTIDAD_INTERVALOS;
 8000c1a:	a331      	add	r3, pc, #196	@ (adr r3, 8000ce0 <StartDefaultTask+0xe0>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9c7 2306 	strd	r2, r3, [r7, #24]

		// Start timer counter
		uint16_t start_t = __HAL_TIM_GET_COUNTER(&htim17);
 8000c24:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <StartDefaultTask+0xf8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2a:	82fb      	strh	r3, [r7, #22]

		// Perform the calculation of Pi
		for( i = 0, x = 0.0; i < CANTIDAD_INTERVALOS; i++ ) {
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c30:	f04f 0200 	mov.w	r2, #0
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c3c:	e024      	b.n	8000c88 <StartDefaultTask+0x88>
			fdx = 4 / ( 1 + x * x );
 8000c3e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000c42:	ee27 7b07 	vmul.f64	d7, d7, d7
 8000c46:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000c4a:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000c4e:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 8000c52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c56:	ed87 7b02 	vstr	d7, [r7, #8]
			acum = acum + ( fdx * baseIntervalo );
 8000c5a:	ed97 6b02 	vldr	d6, [r7, #8]
 8000c5e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c66:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8000c6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c6e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
			x = x + baseIntervalo;
 8000c72:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8000c76:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c7e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		for( i = 0, x = 0.0; i < CANTIDAD_INTERVALOS; i++ ) {
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	3301      	adds	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <StartDefaultTask+0xfc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	dbd6      	blt.n	8000c3e <StartDefaultTask+0x3e>
		}
		//HAL_Delay(1000);
		// Stop timer and calculate the elapsed time
		uint16_t end_t = __HAL_TIM_GET_COUNTER(&htim17);
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <StartDefaultTask+0xf8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c96:	82bb      	strh	r3, [r7, #20]
		uint16_t total_t = end_t - start_t;
 8000c98:	8aba      	ldrh	r2, [r7, #20]
 8000c9a:	8afb      	ldrh	r3, [r7, #22]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	827b      	strh	r3, [r7, #18]
		printf("Resultado=%f (%f seconds)\r\n", acum, ((float)total_t * 65535.0)/240000000.0);
 8000ca0:	8a7b      	ldrh	r3, [r7, #18]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000caa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cae:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000ce8 <StartDefaultTask+0xe8>
 8000cb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cb6:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8000cf0 <StartDefaultTask+0xf0>
 8000cba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cbe:	ed8d 7b00 	vstr	d7, [sp]
 8000cc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000cc6:	480e      	ldr	r0, [pc, #56]	@ (8000d00 <StartDefaultTask+0x100>)
 8000cc8:	f008 fc08 	bl	80094dc <iprintf>

	  /* Infinite loop */
	  for(;;)
	  {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin );
 8000ccc:	2101      	movs	r1, #1
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <StartDefaultTask+0x104>)
 8000cd0:	f000 fd81 	bl	80017d6 <HAL_GPIO_TogglePin>
	    osDelay(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd8:	f005 fa32 	bl	8006140 <osDelay>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin );
 8000cdc:	bf00      	nop
 8000cde:	e7f5      	b.n	8000ccc <StartDefaultTask+0xcc>
 8000ce0:	9abcaf48 	.word	0x9abcaf48
 8000ce4:	3e7ad7f2 	.word	0x3e7ad7f2
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	40efffe0 	.word	0x40efffe0
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	41ac9c38 	.word	0x41ac9c38
 8000cf8:	240001f8 	.word	0x240001f8
 8000cfc:	00989680 	.word	0x00989680
 8000d00:	0800b3c4 	.word	0x0800b3c4
 8000d04:	58020400 	.word	0x58020400

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fa87 	bl	800122c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40001400 	.word	0x40001400

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d40:	1d39      	adds	r1, r7, #4
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	2201      	movs	r2, #1
 8000d48:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <__io_putchar+0x20>)
 8000d4a:	f003 ffbf 	bl	8004ccc <HAL_UART_Transmit>
  return ch;
 8000d4e:	687b      	ldr	r3, [r7, #4]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	24000244 	.word	0x24000244

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <HAL_MspInit+0x38>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d68:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_MspInit+0x38>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_MspInit+0x38>)
 8000d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	210f      	movs	r1, #15
 8000d84:	f06f 0001 	mvn.w	r0, #1
 8000d88:	f000 fb34 	bl	80013f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10e      	bne.n	8000dc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x40>)
 8000dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000db0:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x40>)
 8000db2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x40>)
 8000dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40014800 	.word	0x40014800
 8000dd8:	58024400 	.word	0x58024400

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0ba      	sub	sp, #232	@ 0xe8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	22c0      	movs	r2, #192	@ 0xc0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f008 fbc2 	bl	8009586 <memset>
  if(huart->Instance==USART3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a27      	ldr	r2, [pc, #156]	@ (8000ea4 <HAL_UART_MspInit+0xc8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d146      	bne.n	8000e9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e0c:	f04f 0202 	mov.w	r2, #2
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fda2 	bl	800296c <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e2e:	f7ff ff7d 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	4a14      	ldr	r2, [pc, #80]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_UART_MspInit+0xd0>)
 8000e96:	f000 fad5 	bl	8001444 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	37e8      	adds	r7, #232	@ 0xe8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004800 	.word	0x40004800
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	58020c00 	.word	0x58020c00

08000eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b090      	sub	sp, #64	@ 0x40
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	d827      	bhi.n	8000f0e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	2037      	movs	r0, #55	@ 0x37
 8000ec4:	f000 fa96 	bl	80013f4 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ec8:	2037      	movs	r0, #55	@ 0x37
 8000eca:	f000 faad 	bl	8001428 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000ece:	4a29      	ldr	r2, [pc, #164]	@ (8000f74 <HAL_InitTick+0xc4>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ed4:	4b28      	ldr	r3, [pc, #160]	@ (8000f78 <HAL_InitTick+0xc8>)
 8000ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eda:	4a27      	ldr	r2, [pc, #156]	@ (8000f78 <HAL_InitTick+0xc8>)
 8000edc:	f043 0320 	orr.w	r3, r3, #32
 8000ee0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ee4:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <HAL_InitTick+0xc8>)
 8000ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eea:	f003 0320 	and.w	r3, r3, #32
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef2:	f107 0210 	add.w	r2, r7, #16
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fcf3 	bl	80028e8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d106      	bne.n	8000f1a <HAL_InitTick+0x6a>
 8000f0c:	e001      	b.n	8000f12 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e02b      	b.n	8000f6a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f12:	f001 fcbd 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8000f16:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000f18:	e004      	b.n	8000f24 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f1a:	f001 fcb9 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f26:	4a15      	ldr	r2, [pc, #84]	@ (8000f7c <HAL_InitTick+0xcc>)
 8000f28:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2c:	0c9b      	lsrs	r3, r3, #18
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <HAL_InitTick+0xd0>)
 8000f34:	4a13      	ldr	r2, [pc, #76]	@ (8000f84 <HAL_InitTick+0xd4>)
 8000f36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_InitTick+0xd0>)
 8000f3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f3e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f40:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <HAL_InitTick+0xd0>)
 8000f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f44:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_InitTick+0xd0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <HAL_InitTick+0xd0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f52:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <HAL_InitTick+0xd0>)
 8000f54:	f003 fb36 	bl	80045c4 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f5e:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <HAL_InitTick+0xd0>)
 8000f60:	f003 fbf8 	bl	8004754 <HAL_TIM_Base_Start_IT>
 8000f64:	4603      	mov	r3, r0
 8000f66:	e000      	b.n	8000f6a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3740      	adds	r7, #64	@ 0x40
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000008 	.word	0x24000008
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	240002dc 	.word	0x240002dc
 8000f84:	40001400 	.word	0x40001400

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <NMI_Handler+0x4>

08000f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <MemManage_Handler+0x4>

08000fa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <UsageFault_Handler+0x4>

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <TIM7_IRQHandler+0x10>)
 8000fc6:	f003 fc3d 	bl	8004844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	240002dc 	.word	0x240002dc

08000fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return 1;
 8000fd8:	2301      	movs	r3, #1
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_kill>:

int _kill(int pid, int sig)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fee:	f008 fb73 	bl	80096d8 <__errno>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2216      	movs	r2, #22
 8000ff6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_exit>:

void _exit (int status)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ffe7 	bl	8000fe4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <_exit+0x12>

0800101a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e00a      	b.n	8001042 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102c:	f3af 8000 	nop.w
 8001030:	4601      	mov	r1, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	60ba      	str	r2, [r7, #8]
 8001038:	b2ca      	uxtb	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	dbf0      	blt.n	800102c <_read+0x12>
  }

  return len;
 800104a:	687b      	ldr	r3, [r7, #4]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e009      	b.n	800107a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	60ba      	str	r2, [r7, #8]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe62 	bl	8000d38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbf1      	blt.n	8001066 <_write+0x12>
  }
  return len;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_close>:

int _close(int file)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b4:	605a      	str	r2, [r3, #4]
  return 0;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_isatty>:

int _isatty(int file)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f008 fad8 	bl	80096d8 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24080000 	.word	0x24080000
 8001154:	00000400 	.word	0x00000400
 8001158:	24000328 	.word	0x24000328
 800115c:	24004e68 	.word	0x24004e68

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f7ff fa8c 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f008 faa9 	bl	80096e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fb0b 	bl	80007ac <main>
  bx  lr
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800119c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011a0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80011a4:	0800b7d8 	.word	0x0800b7d8
  ldr r2, =_sbss
 80011a8:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80011ac:	24004e64 	.word	0x24004e64

080011b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC3_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f90f 	bl	80013de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011c0:	f001 f9bc 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_Init+0x68>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	4913      	ldr	r1, [pc, #76]	@ (8001220 <HAL_Init+0x6c>)
 80011d2:	5ccb      	ldrb	r3, [r1, r3]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_Init+0x68>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <HAL_Init+0x6c>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_Init+0x70>)
 80011f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001228 <HAL_Init+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fe:	200f      	movs	r0, #15
 8001200:	f7ff fe56 	bl	8000eb0 <HAL_InitTick>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e002      	b.n	8001214 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800120e:	f7ff fda5 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400
 8001220:	0800b3f8 	.word	0x0800b3f8
 8001224:	24000004 	.word	0x24000004
 8001228:	24000000 	.word	0x24000000

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400000c 	.word	0x2400000c
 8001250:	2400032c 	.word	0x2400032c

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2400032c 	.word	0x2400032c

0800126c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_GetREVID+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0c1b      	lsrs	r3, r3, #16
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	5c001000 	.word	0x5c001000

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <__NVIC_SetPriorityGrouping+0x40>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	05fa0000 	.word	0x05fa0000

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	@ (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff4c 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001402:	f7ff ff63 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001406:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7ff ffb3 	bl	8001378 <NVIC_EncodePriority>
 8001412:	4602      	mov	r2, r0
 8001414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff82 	bl	8001324 <__NVIC_SetPriority>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff56 	bl	80012e8 <__NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001452:	4b89      	ldr	r3, [pc, #548]	@ (8001678 <HAL_GPIO_Init+0x234>)
 8001454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001456:	e194      	b.n	8001782 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8186 	beq.w	800177c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d005      	beq.n	8001488 <HAL_GPIO_Init+0x44>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d130      	bne.n	80014ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014be:	2201      	movs	r2, #1
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	f003 0201 	and.w	r2, r3, #1
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d017      	beq.n	8001526 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d123      	bne.n	800157a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3208      	adds	r2, #8
 800153a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	691a      	ldr	r2, [r3, #16]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	08da      	lsrs	r2, r3, #3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3208      	adds	r2, #8
 8001574:	69b9      	ldr	r1, [r7, #24]
 8001576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0203 	and.w	r2, r3, #3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80e0 	beq.w	800177c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015bc:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <HAL_GPIO_Init+0x238>)
 80015be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c2:	4a2e      	ldr	r2, [pc, #184]	@ (800167c <HAL_GPIO_Init+0x238>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <HAL_GPIO_Init+0x238>)
 80015ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015da:	4a29      	ldr	r2, [pc, #164]	@ (8001680 <HAL_GPIO_Init+0x23c>)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a20      	ldr	r2, [pc, #128]	@ (8001684 <HAL_GPIO_Init+0x240>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d052      	beq.n	80016ac <HAL_GPIO_Init+0x268>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a1f      	ldr	r2, [pc, #124]	@ (8001688 <HAL_GPIO_Init+0x244>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d031      	beq.n	8001672 <HAL_GPIO_Init+0x22e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a1e      	ldr	r2, [pc, #120]	@ (800168c <HAL_GPIO_Init+0x248>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d02b      	beq.n	800166e <HAL_GPIO_Init+0x22a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a1d      	ldr	r2, [pc, #116]	@ (8001690 <HAL_GPIO_Init+0x24c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d025      	beq.n	800166a <HAL_GPIO_Init+0x226>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <HAL_GPIO_Init+0x250>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01f      	beq.n	8001666 <HAL_GPIO_Init+0x222>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a1b      	ldr	r2, [pc, #108]	@ (8001698 <HAL_GPIO_Init+0x254>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0x21e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_GPIO_Init+0x258>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0x21a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a19      	ldr	r2, [pc, #100]	@ (80016a0 <HAL_GPIO_Init+0x25c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_Init+0x216>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a18      	ldr	r2, [pc, #96]	@ (80016a4 <HAL_GPIO_Init+0x260>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x212>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a17      	ldr	r2, [pc, #92]	@ (80016a8 <HAL_GPIO_Init+0x264>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_GPIO_Init+0x20e>
 800164e:	2309      	movs	r3, #9
 8001650:	e02d      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 8001652:	230a      	movs	r3, #10
 8001654:	e02b      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 8001656:	2308      	movs	r3, #8
 8001658:	e029      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 800165a:	2307      	movs	r3, #7
 800165c:	e027      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 800165e:	2306      	movs	r3, #6
 8001660:	e025      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 8001662:	2305      	movs	r3, #5
 8001664:	e023      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 8001666:	2304      	movs	r3, #4
 8001668:	e021      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 800166a:	2303      	movs	r3, #3
 800166c:	e01f      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 800166e:	2302      	movs	r3, #2
 8001670:	e01d      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 8001672:	2301      	movs	r3, #1
 8001674:	e01b      	b.n	80016ae <HAL_GPIO_Init+0x26a>
 8001676:	bf00      	nop
 8001678:	58000080 	.word	0x58000080
 800167c:	58024400 	.word	0x58024400
 8001680:	58000400 	.word	0x58000400
 8001684:	58020000 	.word	0x58020000
 8001688:	58020400 	.word	0x58020400
 800168c:	58020800 	.word	0x58020800
 8001690:	58020c00 	.word	0x58020c00
 8001694:	58021000 	.word	0x58021000
 8001698:	58021400 	.word	0x58021400
 800169c:	58021800 	.word	0x58021800
 80016a0:	58021c00 	.word	0x58021c00
 80016a4:	58022000 	.word	0x58022000
 80016a8:	58022400 	.word	0x58022400
 80016ac:	2300      	movs	r3, #0
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4093      	lsls	r3, r2
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016be:	4938      	ldr	r1, [pc, #224]	@ (80017a0 <HAL_GPIO_Init+0x35c>)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	3301      	adds	r3, #1
 8001780:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	f47f ae63 	bne.w	8001458 <HAL_GPIO_Init+0x14>
  }
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	3724      	adds	r7, #36	@ 0x24
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	58000400 	.word	0x58000400

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4013      	ands	r3, r2
 80017ee:	041a      	lsls	r2, r3, #16
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	400b      	ands	r3, r1
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001814:	4a08      	ldr	r2, [pc, #32]	@ (8001838 <HAL_HSEM_FastTake+0x2c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3320      	adds	r3, #32
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	4a07      	ldr	r2, [pc, #28]	@ (800183c <HAL_HSEM_FastTake+0x30>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e000      	b.n	800182a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	58026400 	.word	0x58026400
 800183c:	80000300 	.word	0x80000300

08001840 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800184a:	4906      	ldr	r1, [pc, #24]	@ (8001864 <HAL_HSEM_Release+0x24>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	58026400 	.word	0x58026400

08001868 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001870:	4b29      	ldr	r3, [pc, #164]	@ (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	2b06      	cmp	r3, #6
 800187a:	d00a      	beq.n	8001892 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800187c:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e040      	b.n	8001910 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e03e      	b.n	8001910 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001892:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800189a:	491f      	ldr	r1, [pc, #124]	@ (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018a2:	f7ff fcd7 	bl	8001254 <HAL_GetTick>
 80018a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018a8:	e009      	b.n	80018be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018aa:	f7ff fcd3 	bl	8001254 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018b8:	d901      	bls.n	80018be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e028      	b.n	8001910 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018ca:	d1ee      	bne.n	80018aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b1e      	cmp	r3, #30
 80018d0:	d008      	beq.n	80018e4 <HAL_PWREx_ConfigSupply+0x7c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80018d6:	d005      	beq.n	80018e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b1d      	cmp	r3, #29
 80018dc:	d002      	beq.n	80018e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80018e2:	d114      	bne.n	800190e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018e4:	f7ff fcb6 	bl	8001254 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018ea:	e009      	b.n	8001900 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018ec:	f7ff fcb2 	bl	8001254 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018fa:	d901      	bls.n	8001900 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e007      	b.n	8001910 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800190c:	d1ee      	bne.n	80018ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024800 	.word	0x58024800

0800191c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	@ 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	f000 bc48 	b.w	80021c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8088 	beq.w	8001a4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193e:	4b99      	ldr	r3, [pc, #612]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001948:	4b96      	ldr	r3, [pc, #600]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001950:	2b10      	cmp	r3, #16
 8001952:	d007      	beq.n	8001964 <HAL_RCC_OscConfig+0x48>
 8001954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001956:	2b18      	cmp	r3, #24
 8001958:	d111      	bne.n	800197e <HAL_RCC_OscConfig+0x62>
 800195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d10c      	bne.n	800197e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	4b8f      	ldr	r3, [pc, #572]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d06d      	beq.n	8001a4c <HAL_RCC_OscConfig+0x130>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d169      	bne.n	8001a4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	f000 bc21 	b.w	80021c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x7a>
 8001988:	4b86      	ldr	r3, [pc, #536]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a85      	ldr	r2, [pc, #532]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e02e      	b.n	80019f4 <HAL_RCC_OscConfig+0xd8>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x9c>
 800199e:	4b81      	ldr	r3, [pc, #516]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a80      	ldr	r2, [pc, #512]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a7d      	ldr	r2, [pc, #500]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e01d      	b.n	80019f4 <HAL_RCC_OscConfig+0xd8>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0xc0>
 80019c2:	4b78      	ldr	r3, [pc, #480]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a77      	ldr	r2, [pc, #476]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b75      	ldr	r3, [pc, #468]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a74      	ldr	r2, [pc, #464]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xd8>
 80019dc:	4b71      	ldr	r3, [pc, #452]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a70      	ldr	r2, [pc, #448]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a6d      	ldr	r2, [pc, #436]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc2a 	bl	8001254 <HAL_GetTick>
 8001a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fc26 	bl	8001254 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e3d4      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a16:	4b63      	ldr	r3, [pc, #396]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0xe8>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff fc16 	bl	8001254 <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fc12 	bl	8001254 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e3c0      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a3e:	4b59      	ldr	r3, [pc, #356]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x110>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80ca 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5c:	4b51      	ldr	r3, [pc, #324]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a66:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_RCC_OscConfig+0x166>
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	2b18      	cmp	r3, #24
 8001a76:	d156      	bne.n	8001b26 <HAL_RCC_OscConfig+0x20a>
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d151      	bne.n	8001b26 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a82:	4b48      	ldr	r3, [pc, #288]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x17e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e392      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a9a:	4b42      	ldr	r3, [pc, #264]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0219 	bic.w	r2, r3, #25
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	493f      	ldr	r1, [pc, #252]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fbd2 	bl	8001254 <HAL_GetTick>
 8001ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fbce 	bl	8001254 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e37c      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac6:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	f7ff fbcb 	bl	800126c <HAL_GetREVID>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d817      	bhi.n	8001b10 <HAL_RCC_OscConfig+0x1f4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	2b40      	cmp	r3, #64	@ 0x40
 8001ae6:	d108      	bne.n	8001afa <HAL_RCC_OscConfig+0x1de>
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001af0:	4a2c      	ldr	r2, [pc, #176]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af8:	e07a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	031b      	lsls	r3, r3, #12
 8001b08:	4926      	ldr	r1, [pc, #152]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0e:	e06f      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	4921      	ldr	r1, [pc, #132]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b24:	e064      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d047      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0219 	bic.w	r2, r3, #25
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	491a      	ldr	r1, [pc, #104]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb88 	bl	8001254 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fb84 	bl	8001254 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e332      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	f7ff fb81 	bl	800126c <HAL_GetREVID>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d819      	bhi.n	8001ba8 <HAL_RCC_OscConfig+0x28c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b40      	cmp	r3, #64	@ 0x40
 8001b7a:	d108      	bne.n	8001b8e <HAL_RCC_OscConfig+0x272>
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b84:	4a07      	ldr	r2, [pc, #28]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8a:	6053      	str	r3, [r2, #4]
 8001b8c:	e030      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2d4>
 8001b8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	031b      	lsls	r3, r3, #12
 8001b9c:	4901      	ldr	r1, [pc, #4]	@ (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
 8001ba2:	e025      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2d4>
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	4b9a      	ldr	r3, [pc, #616]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	4997      	ldr	r1, [pc, #604]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	e018      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b95      	ldr	r3, [pc, #596]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a94      	ldr	r2, [pc, #592]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff fb43 	bl	8001254 <HAL_GetTick>
 8001bce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fb3f 	bl	8001254 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e2ed      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001be4:	4b8b      	ldr	r3, [pc, #556]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a9 	beq.w	8001d50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfe:	4b85      	ldr	r3, [pc, #532]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c08:	4b82      	ldr	r3, [pc, #520]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d007      	beq.n	8001c24 <HAL_RCC_OscConfig+0x308>
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b18      	cmp	r3, #24
 8001c18:	d13a      	bne.n	8001c90 <HAL_RCC_OscConfig+0x374>
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d135      	bne.n	8001c90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c24:	4b7b      	ldr	r3, [pc, #492]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x320>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b80      	cmp	r3, #128	@ 0x80
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e2c1      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c3c:	f7ff fb16 	bl	800126c <HAL_GetREVID>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d817      	bhi.n	8001c7a <HAL_RCC_OscConfig+0x35e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_OscConfig+0x348>
 8001c52:	4b70      	ldr	r3, [pc, #448]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c62:	e075      	b.n	8001d50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c64:	4b6b      	ldr	r3, [pc, #428]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	069b      	lsls	r3, r3, #26
 8001c72:	4968      	ldr	r1, [pc, #416]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c78:	e06a      	b.n	8001d50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c7a:	4b66      	ldr	r3, [pc, #408]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	061b      	lsls	r3, r3, #24
 8001c88:	4962      	ldr	r1, [pc, #392]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c8e:	e05f      	b.n	8001d50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d042      	beq.n	8001d1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c98:	4b5e      	ldr	r3, [pc, #376]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fad6 	bl	8001254 <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cac:	f7ff fad2 	bl	8001254 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e280      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cbe:	4b55      	ldr	r3, [pc, #340]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cca:	f7ff facf 	bl	800126c <HAL_GetREVID>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d817      	bhi.n	8001d08 <HAL_RCC_OscConfig+0x3ec>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d108      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3d6>
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cee:	6053      	str	r3, [r2, #4]
 8001cf0:	e02e      	b.n	8001d50 <HAL_RCC_OscConfig+0x434>
 8001cf2:	4b48      	ldr	r3, [pc, #288]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	069b      	lsls	r3, r3, #26
 8001d00:	4944      	ldr	r1, [pc, #272]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
 8001d06:	e023      	b.n	8001d50 <HAL_RCC_OscConfig+0x434>
 8001d08:	4b42      	ldr	r3, [pc, #264]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	493f      	ldr	r1, [pc, #252]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
 8001d1c:	e018      	b.n	8001d50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a3c      	ldr	r2, [pc, #240]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fa93 	bl	8001254 <HAL_GetTick>
 8001d2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d32:	f7ff fa8f 	bl	8001254 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e23d      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d44:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d036      	beq.n	8001dca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d019      	beq.n	8001d98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d64:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d68:	4a2a      	ldr	r2, [pc, #168]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fa70 	bl	8001254 <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fa6c 	bl	8001254 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e21a      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x45c>
 8001d96:	e018      	b.n	8001dca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff fa56 	bl	8001254 <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dac:	f7ff fa52 	bl	8001254 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e200      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d039      	beq.n	8001e4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001de8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fa33 	bl	8001254 <HAL_GetTick>
 8001dee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df2:	f7ff fa2f 	bl	8001254 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1dd      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x4d6>
 8001e10:	e01b      	b.n	8001e4a <HAL_RCC_OscConfig+0x52e>
 8001e12:	bf00      	nop
 8001e14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e18:	4b9b      	ldr	r3, [pc, #620]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a9a      	ldr	r2, [pc, #616]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001e1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fa16 	bl	8001254 <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e2c:	f7ff fa12 	bl	8001254 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1c0      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e3e:	4b92      	ldr	r3, [pc, #584]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8081 	beq.w	8001f5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e58:	4b8c      	ldr	r3, [pc, #560]	@ (800208c <HAL_RCC_OscConfig+0x770>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a8b      	ldr	r2, [pc, #556]	@ (800208c <HAL_RCC_OscConfig+0x770>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e64:	f7ff f9f6 	bl	8001254 <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7ff f9f2 	bl	8001254 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1a0      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e7e:	4b83      	ldr	r3, [pc, #524]	@ (800208c <HAL_RCC_OscConfig+0x770>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x584>
 8001e92:	4b7d      	ldr	r3, [pc, #500]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e96:	4a7c      	ldr	r2, [pc, #496]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e9e:	e02d      	b.n	8001efc <HAL_RCC_OscConfig+0x5e0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5a6>
 8001ea8:	4b77      	ldr	r3, [pc, #476]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eac:	4a76      	ldr	r2, [pc, #472]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb4:	4b74      	ldr	r3, [pc, #464]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb8:	4a73      	ldr	r2, [pc, #460]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec0:	e01c      	b.n	8001efc <HAL_RCC_OscConfig+0x5e0>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c8>
 8001eca:	4b6f      	ldr	r3, [pc, #444]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ece:	4a6e      	ldr	r2, [pc, #440]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	4a6b      	ldr	r2, [pc, #428]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0x5e0>
 8001ee4:	4b68      	ldr	r3, [pc, #416]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee8:	4a67      	ldr	r2, [pc, #412]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef0:	4b65      	ldr	r3, [pc, #404]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef4:	4a64      	ldr	r2, [pc, #400]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d015      	beq.n	8001f30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff f9a6 	bl	8001254 <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f9a2 	bl	8001254 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e14e      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f22:	4b59      	ldr	r3, [pc, #356]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ee      	beq.n	8001f0c <HAL_RCC_OscConfig+0x5f0>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7ff f990 	bl	8001254 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7ff f98c 	bl	8001254 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e138      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ee      	bne.n	8001f38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 812d 	beq.w	80021be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f64:	4b48      	ldr	r3, [pc, #288]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f6c:	2b18      	cmp	r3, #24
 8001f6e:	f000 80bd 	beq.w	80020ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	f040 809e 	bne.w	80020b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4b42      	ldr	r3, [pc, #264]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a41      	ldr	r2, [pc, #260]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f964 	bl	8001254 <HAL_GetTick>
 8001f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff f960 	bl	8001254 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e10e      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fa2:	4b39      	ldr	r3, [pc, #228]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fae:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fb2:	4b37      	ldr	r3, [pc, #220]	@ (8002090 <HAL_RCC_OscConfig+0x774>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	4931      	ldr	r1, [pc, #196]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	025b      	lsls	r3, r3, #9
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	061b      	lsls	r3, r3, #24
 8001ff4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ff8:	4923      	ldr	r1, [pc, #140]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ffe:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800200a:	4b1f      	ldr	r3, [pc, #124]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 800200c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800200e:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <HAL_RCC_OscConfig+0x778>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002016:	00d2      	lsls	r2, r2, #3
 8002018:	491b      	ldr	r1, [pc, #108]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 800201a:	4313      	orrs	r3, r2
 800201c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800201e:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002022:	f023 020c 	bic.w	r2, r3, #12
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4917      	ldr	r1, [pc, #92]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002030:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f023 0202 	bic.w	r2, r3, #2
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203c:	4912      	ldr	r1, [pc, #72]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 800203e:	4313      	orrs	r3, r2
 8002040:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002042:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	4a07      	ldr	r2, [pc, #28]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002072:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <HAL_RCC_OscConfig+0x76c>)
 8002078:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff f8e9 	bl	8001254 <HAL_GetTick>
 8002082:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002084:	e011      	b.n	80020aa <HAL_RCC_OscConfig+0x78e>
 8002086:	bf00      	nop
 8002088:	58024400 	.word	0x58024400
 800208c:	58024800 	.word	0x58024800
 8002090:	fffffc0c 	.word	0xfffffc0c
 8002094:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff f8dc 	bl	8001254 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e08a      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020aa:	4b47      	ldr	r3, [pc, #284]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x77c>
 80020b6:	e082      	b.n	80021be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b43      	ldr	r3, [pc, #268]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a42      	ldr	r2, [pc, #264]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80020be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff f8c6 	bl	8001254 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f8c2 	bl	8001254 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e070      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020de:	4b3a      	ldr	r3, [pc, #232]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x7b0>
 80020ea:	e068      	b.n	80021be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020ec:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020f2:	4b35      	ldr	r3, [pc, #212]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d031      	beq.n	8002164 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f003 0203 	and.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d12a      	bne.n	8002164 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d122      	bne.n	8002164 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11a      	bne.n	8002164 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	0a5b      	lsrs	r3, r3, #9
 8002132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d111      	bne.n	8002164 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	0c1b      	lsrs	r3, r3, #16
 8002144:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d108      	bne.n	8002164 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0e1b      	lsrs	r3, r3, #24
 8002156:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e02b      	b.n	80021c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 800216a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216c:	08db      	lsrs	r3, r3, #3
 800216e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002172:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	429a      	cmp	r2, r3
 800217c:	d01f      	beq.n	80021be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	4a11      	ldr	r2, [pc, #68]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800218a:	f7ff f863 	bl	8001254 <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002190:	bf00      	nop
 8002192:	f7ff f85f 	bl	8001254 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219a:	4293      	cmp	r3, r2
 800219c:	d0f9      	beq.n	8002192 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80021a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_RCC_OscConfig+0x8b0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	4906      	ldr	r1, [pc, #24]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <HAL_RCC_OscConfig+0x8ac>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3730      	adds	r7, #48	@ 0x30
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	58024400 	.word	0x58024400
 80021cc:	ffff0007 	.word	0xffff0007

080021d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e19c      	b.n	800251e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002410 <HAL_RCC_ClockConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d910      	bls.n	8002214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b87      	ldr	r3, [pc, #540]	@ (8002410 <HAL_RCC_ClockConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 020f 	bic.w	r2, r3, #15
 80021fa:	4985      	ldr	r1, [pc, #532]	@ (8002410 <HAL_RCC_ClockConfig+0x240>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b83      	ldr	r3, [pc, #524]	@ (8002410 <HAL_RCC_ClockConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e184      	b.n	800251e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d010      	beq.n	8002242 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	4b7b      	ldr	r3, [pc, #492]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800222c:	429a      	cmp	r2, r3
 800222e:	d908      	bls.n	8002242 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002230:	4b78      	ldr	r3, [pc, #480]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	4975      	ldr	r1, [pc, #468]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 800223e:	4313      	orrs	r3, r2
 8002240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	4b70      	ldr	r3, [pc, #448]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800225a:	429a      	cmp	r2, r3
 800225c:	d908      	bls.n	8002270 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800225e:	4b6d      	ldr	r3, [pc, #436]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	496a      	ldr	r1, [pc, #424]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 800226c:	4313      	orrs	r3, r2
 800226e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	4b64      	ldr	r3, [pc, #400]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002288:	429a      	cmp	r2, r3
 800228a:	d908      	bls.n	800229e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800228c:	4b61      	ldr	r3, [pc, #388]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	495e      	ldr	r1, [pc, #376]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 800229a:	4313      	orrs	r3, r2
 800229c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d908      	bls.n	80022cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022ba:	4b56      	ldr	r3, [pc, #344]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	4953      	ldr	r1, [pc, #332]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d010      	beq.n	80022fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d908      	bls.n	80022fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f023 020f 	bic.w	r2, r3, #15
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4947      	ldr	r1, [pc, #284]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d055      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002306:	4b43      	ldr	r3, [pc, #268]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4940      	ldr	r1, [pc, #256]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002314:	4313      	orrs	r3, r2
 8002316:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d107      	bne.n	8002330 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002320:	4b3c      	ldr	r3, [pc, #240]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d121      	bne.n	8002370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0f6      	b.n	800251e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d107      	bne.n	8002348 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002338:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d115      	bne.n	8002370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0ea      	b.n	800251e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002350:	4b30      	ldr	r3, [pc, #192]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0de      	b.n	800251e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002360:	4b2c      	ldr	r3, [pc, #176]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d6      	b.n	800251e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f023 0207 	bic.w	r2, r3, #7
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4925      	ldr	r1, [pc, #148]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 800237e:	4313      	orrs	r3, r2
 8002380:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002382:	f7fe ff67 	bl	8001254 <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238a:	f7fe ff63 	bl	8001254 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0be      	b.n	800251e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d1eb      	bne.n	800238a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d208      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f023 020f 	bic.w	r2, r3, #15
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	490e      	ldr	r1, [pc, #56]	@ (8002414 <HAL_RCC_ClockConfig+0x244>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCC_ClockConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d214      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <HAL_RCC_ClockConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 020f 	bic.w	r2, r3, #15
 80023f6:	4906      	ldr	r1, [pc, #24]	@ (8002410 <HAL_RCC_ClockConfig+0x240>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <HAL_RCC_ClockConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e086      	b.n	800251e <HAL_RCC_ClockConfig+0x34e>
 8002410:	52002000 	.word	0x52002000
 8002414:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d010      	beq.n	8002446 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	4b3f      	ldr	r3, [pc, #252]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002430:	429a      	cmp	r2, r3
 8002432:	d208      	bcs.n	8002446 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002434:	4b3c      	ldr	r3, [pc, #240]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4939      	ldr	r1, [pc, #228]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 8002442:	4313      	orrs	r3, r2
 8002444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d010      	beq.n	8002474 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800245e:	429a      	cmp	r2, r3
 8002460:	d208      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002462:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	492e      	ldr	r1, [pc, #184]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 8002470:	4313      	orrs	r3, r2
 8002472:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d010      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	4b28      	ldr	r3, [pc, #160]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800248c:	429a      	cmp	r2, r3
 800248e:	d208      	bcs.n	80024a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4922      	ldr	r1, [pc, #136]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d208      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4917      	ldr	r1, [pc, #92]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024d0:	f000 f834 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	4912      	ldr	r1, [pc, #72]	@ (800252c <HAL_RCC_ClockConfig+0x35c>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_RCC_ClockConfig+0x358>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <HAL_RCC_ClockConfig+0x35c>)
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <HAL_RCC_ClockConfig+0x360>)
 8002506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002508:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <HAL_RCC_ClockConfig+0x364>)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_RCC_ClockConfig+0x368>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fccc 	bl	8000eb0 <HAL_InitTick>
 8002518:	4603      	mov	r3, r0
 800251a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	58024400 	.word	0x58024400
 800252c:	0800b3f8 	.word	0x0800b3f8
 8002530:	24000004 	.word	0x24000004
 8002534:	24000000 	.word	0x24000000
 8002538:	24000008 	.word	0x24000008

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	@ 0x24
 8002540:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002542:	4bb3      	ldr	r3, [pc, #716]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800254a:	2b18      	cmp	r3, #24
 800254c:	f200 8155 	bhi.w	80027fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002550:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002556:	bf00      	nop
 8002558:	080025bd 	.word	0x080025bd
 800255c:	080027fb 	.word	0x080027fb
 8002560:	080027fb 	.word	0x080027fb
 8002564:	080027fb 	.word	0x080027fb
 8002568:	080027fb 	.word	0x080027fb
 800256c:	080027fb 	.word	0x080027fb
 8002570:	080027fb 	.word	0x080027fb
 8002574:	080027fb 	.word	0x080027fb
 8002578:	080025e3 	.word	0x080025e3
 800257c:	080027fb 	.word	0x080027fb
 8002580:	080027fb 	.word	0x080027fb
 8002584:	080027fb 	.word	0x080027fb
 8002588:	080027fb 	.word	0x080027fb
 800258c:	080027fb 	.word	0x080027fb
 8002590:	080027fb 	.word	0x080027fb
 8002594:	080027fb 	.word	0x080027fb
 8002598:	080025e9 	.word	0x080025e9
 800259c:	080027fb 	.word	0x080027fb
 80025a0:	080027fb 	.word	0x080027fb
 80025a4:	080027fb 	.word	0x080027fb
 80025a8:	080027fb 	.word	0x080027fb
 80025ac:	080027fb 	.word	0x080027fb
 80025b0:	080027fb 	.word	0x080027fb
 80025b4:	080027fb 	.word	0x080027fb
 80025b8:	080025ef 	.word	0x080025ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025bc:	4b94      	ldr	r3, [pc, #592]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025c8:	4b91      	ldr	r3, [pc, #580]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	4a90      	ldr	r2, [pc, #576]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80025da:	e111      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025de:	61bb      	str	r3, [r7, #24]
      break;
 80025e0:	e10e      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80025e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025e4:	61bb      	str	r3, [r7, #24]
      break;
 80025e6:	e10b      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80025e8:	4b8c      	ldr	r3, [pc, #560]	@ (800281c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025ea:	61bb      	str	r3, [r7, #24]
      break;
 80025ec:	e108      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025ee:	4b88      	ldr	r3, [pc, #544]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80025f8:	4b85      	ldr	r3, [pc, #532]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002602:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002604:	4b82      	ldr	r3, [pc, #520]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800260e:	4b80      	ldr	r3, [pc, #512]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002612:	08db      	lsrs	r3, r3, #3
 8002614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002626:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80e1 	beq.w	80027f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b02      	cmp	r3, #2
 8002636:	f000 8083 	beq.w	8002740 <HAL_RCC_GetSysClockFreq+0x204>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b02      	cmp	r3, #2
 800263e:	f200 80a1 	bhi.w	8002784 <HAL_RCC_GetSysClockFreq+0x248>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x114>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d056      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800264e:	e099      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002650:	4b6f      	ldr	r3, [pc, #444]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d02d      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800265c:	4b6c      	ldr	r3, [pc, #432]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	08db      	lsrs	r3, r3, #3
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	4a6b      	ldr	r2, [pc, #428]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002686:	4b62      	ldr	r3, [pc, #392]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002696:	ed97 6a02 	vldr	s12, [r7, #8]
 800269a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x2e4>
 800269e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026b6:	e087      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002824 <HAL_RCC_GetSysClockFreq+0x2e8>
 80026c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ca:	4b51      	ldr	r3, [pc, #324]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026da:	ed97 6a02 	vldr	s12, [r7, #8]
 80026de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026fa:	e065      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002706:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x2ec>
 800270a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270e:	4b40      	ldr	r3, [pc, #256]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002722:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800273e:	e043      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800282c <HAL_RCC_GetSysClockFreq+0x2f0>
 800274e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002752:	4b2f      	ldr	r3, [pc, #188]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002762:	ed97 6a02 	vldr	s12, [r7, #8]
 8002766:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x2e4>
 800276a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002782:	e021      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002796:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80027c8:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	0a5b      	lsrs	r3, r3, #9
 80027ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027d2:	3301      	adds	r3, #1
 80027d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80027e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ec:	ee17 3a90 	vmov	r3, s15
 80027f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80027f2:	e005      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
      break;
 80027f8:	e002      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80027fa:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027fc:	61bb      	str	r3, [r7, #24]
      break;
 80027fe:	bf00      	nop
  }

  return sysclockfreq;
 8002800:	69bb      	ldr	r3, [r7, #24]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	58024400 	.word	0x58024400
 8002814:	03d09000 	.word	0x03d09000
 8002818:	003d0900 	.word	0x003d0900
 800281c:	007a1200 	.word	0x007a1200
 8002820:	46000000 	.word	0x46000000
 8002824:	4c742400 	.word	0x4c742400
 8002828:	4a742400 	.word	0x4a742400
 800282c:	4af42400 	.word	0x4af42400

08002830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002836:	f7ff fe81 	bl	800253c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <HAL_RCC_GetHCLKFreq+0x50>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490f      	ldr	r1, [pc, #60]	@ (8002884 <HAL_RCC_GetHCLKFreq+0x54>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	fa22 f303 	lsr.w	r3, r2, r3
 8002852:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002854:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_RCC_GetHCLKFreq+0x50>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	4a09      	ldr	r2, [pc, #36]	@ (8002884 <HAL_RCC_GetHCLKFreq+0x54>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <HAL_RCC_GetHCLKFreq+0x58>)
 800286c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800286e:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <HAL_RCC_GetHCLKFreq+0x58>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	58024400 	.word	0x58024400
 8002884:	0800b3f8 	.word	0x0800b3f8
 8002888:	24000004 	.word	0x24000004
 800288c:	24000000 	.word	0x24000000

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002894:	f7ff ffcc 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4904      	ldr	r1, [pc, #16]	@ (80028b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	58024400 	.word	0x58024400
 80028b8:	0800b3f8 	.word	0x0800b3f8

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80028c0:	f7ff ffb6 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4904      	ldr	r1, [pc, #16]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	58024400 	.word	0x58024400
 80028e4:	0800b3f8 	.word	0x0800b3f8

080028e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	223f      	movs	r2, #63	@ 0x3f
 80028f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <HAL_RCC_GetClockConfig+0x7c>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f003 0207 	and.w	r2, r3, #7
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002904:	4b17      	ldr	r3, [pc, #92]	@ (8002964 <HAL_RCC_GetClockConfig+0x7c>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <HAL_RCC_GetClockConfig+0x7c>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_RCC_GetClockConfig+0x7c>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_RCC_GetClockConfig+0x7c>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCC_GetClockConfig+0x7c>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_RCC_GetClockConfig+0x7c>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_RCC_GetClockConfig+0x80>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	601a      	str	r2, [r3, #0]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	58024400 	.word	0x58024400
 8002968:	52002000 	.word	0x52002000

0800296c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800296c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002970:	b0ca      	sub	sp, #296	@ 0x128
 8002972:	af00      	add	r7, sp, #0
 8002974:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800297e:	2300      	movs	r3, #0
 8002980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002990:	2500      	movs	r5, #0
 8002992:	ea54 0305 	orrs.w	r3, r4, r5
 8002996:	d049      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800299e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029a2:	d02f      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029a8:	d828      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029ae:	d01a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029b4:	d822      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029be:	d007      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029c0:	e01c      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4bb8      	ldr	r3, [pc, #736]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	4ab7      	ldr	r2, [pc, #732]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029ce:	e01a      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d4:	3308      	adds	r3, #8
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fc8f 	bl	80042fc <RCCEx_PLL2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029e4:	e00f      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ea:	3328      	adds	r3, #40	@ 0x28
 80029ec:	2102      	movs	r1, #2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 fd36 	bl	8004460 <RCCEx_PLL3_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029fa:	e004      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a02:	e000      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a0e:	4ba5      	ldr	r3, [pc, #660]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a1c:	4aa1      	ldr	r2, [pc, #644]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a22:	e003      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002a38:	f04f 0900 	mov.w	r9, #0
 8002a3c:	ea58 0309 	orrs.w	r3, r8, r9
 8002a40:	d047      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d82a      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a69 	.word	0x08002a69
 8002a58:	08002a77 	.word	0x08002a77
 8002a5c:	08002a8d 	.word	0x08002a8d
 8002a60:	08002aab 	.word	0x08002aab
 8002a64:	08002aab 	.word	0x08002aab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a68:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	4a8d      	ldr	r2, [pc, #564]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a74:	e01a      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 fc3c 	bl	80042fc <RCCEx_PLL2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a8a:	e00f      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a90:	3328      	adds	r3, #40	@ 0x28
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 fce3 	bl	8004460 <RCCEx_PLL3_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002aa0:	e004      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab8:	f023 0107 	bic.w	r1, r3, #7
 8002abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	4a78      	ldr	r2, [pc, #480]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ac8:	e003      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002ade:	f04f 0b00 	mov.w	fp, #0
 8002ae2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ae6:	d04c      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002af2:	d030      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002af8:	d829      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002afa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002afc:	d02d      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b00:	d825      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b02:	2b80      	cmp	r3, #128	@ 0x80
 8002b04:	d018      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b06:	2b80      	cmp	r3, #128	@ 0x80
 8002b08:	d821      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b0e:	2b40      	cmp	r3, #64	@ 0x40
 8002b10:	d007      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b12:	e01c      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b14:	4b63      	ldr	r3, [pc, #396]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	4a62      	ldr	r2, [pc, #392]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b20:	e01c      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b26:	3308      	adds	r3, #8
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 fbe6 	bl	80042fc <RCCEx_PLL2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b36:	e011      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3c:	3328      	adds	r3, #40	@ 0x28
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 fc8d 	bl	8004460 <RCCEx_PLL3_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b4c:	e006      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b54:	e002      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b64:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	4a4c      	ldr	r2, [pc, #304]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b78:	e003      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002b8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	d053      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002baa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bae:	d035      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002bb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bb4:	d82e      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bb6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002bba:	d031      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002bbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002bc0:	d828      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc6:	d01a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002bc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bcc:	d822      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bd6:	d007      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bda:	4b32      	ldr	r3, [pc, #200]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	4a31      	ldr	r2, [pc, #196]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002be6:	e01c      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	3308      	adds	r3, #8
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fb83 	bl	80042fc <RCCEx_PLL2_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bfc:	e011      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c02:	3328      	adds	r3, #40	@ 0x28
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fc2a 	bl	8004460 <RCCEx_PLL3_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c12:	e006      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c1a:	e002      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c1c:	bf00      	nop
 8002c1e:	e000      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c40:	e003      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002c56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002c64:	460b      	mov	r3, r1
 8002c66:	4313      	orrs	r3, r2
 8002c68:	d056      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c76:	d038      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c7c:	d831      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c82:	d034      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002c84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c88:	d82b      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c8e:	d01d      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c94:	d825      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ca0:	e01f      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ca2:	bf00      	nop
 8002ca4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca8:	4ba2      	ldr	r3, [pc, #648]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	4aa1      	ldr	r2, [pc, #644]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cba:	3308      	adds	r3, #8
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f001 fb1c 	bl	80042fc <RCCEx_PLL2_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002cca:	e011      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd0:	3328      	adds	r3, #40	@ 0x28
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 fbc3 	bl	8004460 <RCCEx_PLL3_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ce0:	e006      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ce8:	e002      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d08:	4a8a      	ldr	r2, [pc, #552]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d0e:	e003      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002d2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	d03a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	2b30      	cmp	r3, #48	@ 0x30
 8002d40:	d01f      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d42:	2b30      	cmp	r3, #48	@ 0x30
 8002d44:	d819      	bhi.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d815      	bhi.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d019      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d111      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d56:	4b77      	ldr	r3, [pc, #476]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	4a76      	ldr	r2, [pc, #472]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d62:	e011      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d68:	3308      	adds	r3, #8
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fac5 	bl	80042fc <RCCEx_PLL2_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d78:	e006      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d80:	e002      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d82:	bf00      	nop
 8002d84:	e000      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d90:	4b68      	ldr	r3, [pc, #416]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9e:	4a65      	ldr	r2, [pc, #404]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002da0:	430b      	orrs	r3, r1
 8002da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002da4:	e003      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002dba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002dc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	d051      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dd8:	d035      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dde:	d82e      	bhi.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002de0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002de4:	d031      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002de6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dea:	d828      	bhi.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df0:	d01a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df6:	d822      	bhi.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e00:	d007      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e02:	e01c      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e04:	4b4b      	ldr	r3, [pc, #300]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e08:	4a4a      	ldr	r2, [pc, #296]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e10:	e01c      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e16:	3308      	adds	r3, #8
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 fa6e 	bl	80042fc <RCCEx_PLL2_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e26:	e011      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e2c:	3328      	adds	r3, #40	@ 0x28
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 fb15 	bl	8004460 <RCCEx_PLL3_Config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e3c:	e006      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e44:	e002      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e54:	4b37      	ldr	r3, [pc, #220]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e62:	4a34      	ldr	r2, [pc, #208]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e68:	e003      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002e88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	d056      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9c:	d033      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ea2:	d82c      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ea4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ea8:	d02f      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002eaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002eae:	d826      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002eb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002eb4:	d02b      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002eb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002eba:	d820      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ec0:	d012      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ec6:	d81a      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d022      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed0:	d115      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 fa0e 	bl	80042fc <RCCEx_PLL2_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ee6:	e015      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eec:	3328      	adds	r3, #40	@ 0x28
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 fab5 	bl	8004460 <RCCEx_PLL3_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002efc:	e00a      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f04:	e006      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f06:	bf00      	nop
 8002f08:	e004      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10d      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f1c:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f2a:	4a02      	ldr	r2, [pc, #8]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f30:	e006      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f32:	bf00      	nop
 8002f34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	d055      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f6c:	d033      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f72:	d82c      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f78:	d02f      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7e:	d826      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f84:	d02b      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002f86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f8a:	d820      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f90:	d012      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f96:	d81a      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d022      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002f9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fa0:	d115      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 f9a6 	bl	80042fc <RCCEx_PLL2_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fb6:	e015      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbc:	3328      	adds	r3, #40	@ 0x28
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 fa4d 	bl	8004460 <RCCEx_PLL3_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fd4:	e006      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fd6:	bf00      	nop
 8002fd8:	e004      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fec:	4ba3      	ldr	r3, [pc, #652]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ffc:	4a9f      	ldr	r2, [pc, #636]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ffe:	430b      	orrs	r3, r1
 8003000:	6593      	str	r3, [r2, #88]	@ 0x58
 8003002:	e003      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800300c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003022:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003026:	460b      	mov	r3, r1
 8003028:	4313      	orrs	r3, r2
 800302a:	d037      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003036:	d00e      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800303c:	d816      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d018      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003046:	d111      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003048:	4b8c      	ldr	r3, [pc, #560]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	4a8b      	ldr	r2, [pc, #556]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800304e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003054:	e00f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	3308      	adds	r3, #8
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f94c 	bl	80042fc <RCCEx_PLL2_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800306a:	e004      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800307e:	4b7f      	ldr	r3, [pc, #508]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003082:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	4a7b      	ldr	r2, [pc, #492]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800308e:	430b      	orrs	r3, r1
 8003090:	6513      	str	r3, [r2, #80]	@ 0x50
 8003092:	e003      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80030a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80030b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4313      	orrs	r3, r2
 80030ba:	d039      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80030bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d81c      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80030c6:	a201      	add	r2, pc, #4	@ (adr r2, 80030cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	08003109 	.word	0x08003109
 80030d0:	080030dd 	.word	0x080030dd
 80030d4:	080030eb 	.word	0x080030eb
 80030d8:	08003109 	.word	0x08003109
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030dc:	4b67      	ldr	r3, [pc, #412]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	4a66      	ldr	r2, [pc, #408]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030e8:	e00f      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	3308      	adds	r3, #8
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 f902 	bl	80042fc <RCCEx_PLL2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030fe:	e004      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003106:	e000      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003112:	4b5a      	ldr	r3, [pc, #360]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003116:	f023 0103 	bic.w	r1, r3, #3
 800311a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003120:	4a56      	ldr	r2, [pc, #344]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003122:	430b      	orrs	r3, r1
 8003124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003126:	e003      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800313c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003146:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800314a:	460b      	mov	r3, r1
 800314c:	4313      	orrs	r3, r2
 800314e:	f000 809f 	beq.w	8003290 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003152:	4b4b      	ldr	r3, [pc, #300]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4a      	ldr	r2, [pc, #296]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800315e:	f7fe f879 	bl	8001254 <HAL_GetTick>
 8003162:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003166:	e00b      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003168:	f7fe f874 	bl	8001254 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b64      	cmp	r3, #100	@ 0x64
 8003176:	d903      	bls.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800317e:	e005      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003180:	4b3f      	ldr	r3, [pc, #252]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ed      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800318c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003190:	2b00      	cmp	r3, #0
 8003192:	d179      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003194:	4b39      	ldr	r3, [pc, #228]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003196:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031a0:	4053      	eors	r3, r2
 80031a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d015      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031aa:	4b34      	ldr	r3, [pc, #208]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031b6:	4b31      	ldr	r3, [pc, #196]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	4a30      	ldr	r2, [pc, #192]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c2:	4b2e      	ldr	r3, [pc, #184]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c6:	4a2d      	ldr	r2, [pc, #180]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031ce:	4a2b      	ldr	r2, [pc, #172]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e2:	d118      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe f836 	bl	8001254 <HAL_GetTick>
 80031e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ec:	e00d      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe f831 	bl	8001254 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031f8:	1ad2      	subs	r2, r2, r3
 80031fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80031fe:	429a      	cmp	r2, r3
 8003200:	d903      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003208:	e005      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800320a:	4b1c      	ldr	r3, [pc, #112]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0eb      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800321a:	2b00      	cmp	r3, #0
 800321c:	d129      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800321e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003222:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800322e:	d10e      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003230:	4b12      	ldr	r3, [pc, #72]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003240:	091a      	lsrs	r2, r3, #4
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003244:	4013      	ands	r3, r2
 8003246:	4a0d      	ldr	r2, [pc, #52]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003248:	430b      	orrs	r3, r1
 800324a:	6113      	str	r3, [r2, #16]
 800324c:	e005      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800324e:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003254:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003258:	6113      	str	r3, [r2, #16]
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800325c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326a:	4a04      	ldr	r2, [pc, #16]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800326c:	430b      	orrs	r3, r1
 800326e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003270:	e00e      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800327a:	e009      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800327c:	58024400 	.word	0x58024400
 8003280:	58024800 	.word	0x58024800
 8003284:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f002 0301 	and.w	r3, r2, #1
 800329c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f000 8089 	beq.w	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032b8:	2b28      	cmp	r3, #40	@ 0x28
 80032ba:	d86b      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80032bc:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	0800339d 	.word	0x0800339d
 80032c8:	08003395 	.word	0x08003395
 80032cc:	08003395 	.word	0x08003395
 80032d0:	08003395 	.word	0x08003395
 80032d4:	08003395 	.word	0x08003395
 80032d8:	08003395 	.word	0x08003395
 80032dc:	08003395 	.word	0x08003395
 80032e0:	08003395 	.word	0x08003395
 80032e4:	08003369 	.word	0x08003369
 80032e8:	08003395 	.word	0x08003395
 80032ec:	08003395 	.word	0x08003395
 80032f0:	08003395 	.word	0x08003395
 80032f4:	08003395 	.word	0x08003395
 80032f8:	08003395 	.word	0x08003395
 80032fc:	08003395 	.word	0x08003395
 8003300:	08003395 	.word	0x08003395
 8003304:	0800337f 	.word	0x0800337f
 8003308:	08003395 	.word	0x08003395
 800330c:	08003395 	.word	0x08003395
 8003310:	08003395 	.word	0x08003395
 8003314:	08003395 	.word	0x08003395
 8003318:	08003395 	.word	0x08003395
 800331c:	08003395 	.word	0x08003395
 8003320:	08003395 	.word	0x08003395
 8003324:	0800339d 	.word	0x0800339d
 8003328:	08003395 	.word	0x08003395
 800332c:	08003395 	.word	0x08003395
 8003330:	08003395 	.word	0x08003395
 8003334:	08003395 	.word	0x08003395
 8003338:	08003395 	.word	0x08003395
 800333c:	08003395 	.word	0x08003395
 8003340:	08003395 	.word	0x08003395
 8003344:	0800339d 	.word	0x0800339d
 8003348:	08003395 	.word	0x08003395
 800334c:	08003395 	.word	0x08003395
 8003350:	08003395 	.word	0x08003395
 8003354:	08003395 	.word	0x08003395
 8003358:	08003395 	.word	0x08003395
 800335c:	08003395 	.word	0x08003395
 8003360:	08003395 	.word	0x08003395
 8003364:	0800339d 	.word	0x0800339d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336c:	3308      	adds	r3, #8
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ffc3 	bl	80042fc <RCCEx_PLL2_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800337c:	e00f      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003382:	3328      	adds	r3, #40	@ 0x28
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f001 f86a 	bl	8004460 <RCCEx_PLL3_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003392:	e004      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800339c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80033a6:	4bbf      	ldr	r3, [pc, #764]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033b4:	4abb      	ldr	r2, [pc, #748]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033b6:	430b      	orrs	r3, r1
 80033b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80033ba:	e003      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f002 0302 	and.w	r3, r2, #2
 80033d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80033de:	460b      	mov	r3, r1
 80033e0:	4313      	orrs	r3, r2
 80033e2:	d041      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d824      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80033ee:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003441 	.word	0x08003441
 80033f8:	0800340d 	.word	0x0800340d
 80033fc:	08003423 	.word	0x08003423
 8003400:	08003441 	.word	0x08003441
 8003404:	08003441 	.word	0x08003441
 8003408:	08003441 	.word	0x08003441
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003410:	3308      	adds	r3, #8
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ff71 	bl	80042fc <RCCEx_PLL2_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003420:	e00f      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003426:	3328      	adds	r3, #40	@ 0x28
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f001 f818 	bl	8004460 <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003436:	e004      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800344a:	4b96      	ldr	r3, [pc, #600]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	f023 0107 	bic.w	r1, r3, #7
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003458:	4a92      	ldr	r2, [pc, #584]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800345a:	430b      	orrs	r3, r1
 800345c:	6553      	str	r3, [r2, #84]	@ 0x54
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f002 0304 	and.w	r3, r2, #4
 8003474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800347e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003482:	460b      	mov	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	d044      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003490:	2b05      	cmp	r3, #5
 8003492:	d825      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003494:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034e9 	.word	0x080034e9
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034cb 	.word	0x080034cb
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e9 	.word	0x080034e9
 80034b0:	080034e9 	.word	0x080034e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	3308      	adds	r3, #8
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 ff1d 	bl	80042fc <RCCEx_PLL2_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034c8:	e00f      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	3328      	adds	r3, #40	@ 0x28
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 ffc4 	bl	8004460 <RCCEx_PLL3_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034de:	e004      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034e6:	e000      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80034e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f2:	4b6c      	ldr	r3, [pc, #432]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	f023 0107 	bic.w	r1, r3, #7
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003502:	4a68      	ldr	r2, [pc, #416]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003504:	430b      	orrs	r3, r1
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
 8003508:	e003      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f002 0320 	and.w	r3, r2, #32
 800351e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800352c:	460b      	mov	r3, r1
 800352e:	4313      	orrs	r3, r2
 8003530:	d055      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800353e:	d033      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003544:	d82c      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354a:	d02f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003550:	d826      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003552:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003556:	d02b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003558:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800355c:	d820      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800355e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003562:	d012      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003568:	d81a      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d022      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800356e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003572:	d115      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003578:	3308      	adds	r3, #8
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f000 febd 	bl	80042fc <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003588:	e015      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	3328      	adds	r3, #40	@ 0x28
 8003590:	2102      	movs	r1, #2
 8003592:	4618      	mov	r0, r3
 8003594:	f000 ff64 	bl	8004460 <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800359e:	e00a      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035a6:	e006      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035a8:	bf00      	nop
 80035aa:	e004      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035ac:	bf00      	nop
 80035ae:	e002      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035be:	4b39      	ldr	r3, [pc, #228]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ce:	4a35      	ldr	r2, [pc, #212]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80035ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80035f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4313      	orrs	r3, r2
 80035fc:	d058      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003602:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003606:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800360a:	d033      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800360c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003610:	d82c      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003616:	d02f      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800361c:	d826      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800361e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003622:	d02b      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003624:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003628:	d820      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800362e:	d012      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003634:	d81a      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d022      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363e:	d115      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	3308      	adds	r3, #8
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fe57 	bl	80042fc <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003654:	e015      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365a:	3328      	adds	r3, #40	@ 0x28
 800365c:	2102      	movs	r1, #2
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fefe 	bl	8004460 <RCCEx_PLL3_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800366a:	e00a      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003672:	e006      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003674:	bf00      	nop
 8003676:	e004      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003678:	bf00      	nop
 800367a:	e002      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10e      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800368a:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800369a:	4a02      	ldr	r2, [pc, #8]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80036a2:	bf00      	nop
 80036a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80036bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80036ca:	460b      	mov	r3, r1
 80036cc:	4313      	orrs	r3, r2
 80036ce:	d055      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80036dc:	d033      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80036de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80036e2:	d82c      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e8:	d02f      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80036ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ee:	d826      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80036f4:	d02b      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80036f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80036fa:	d820      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003700:	d012      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003706:	d81a      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d022      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003710:	d115      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	3308      	adds	r3, #8
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fdee 	bl	80042fc <RCCEx_PLL2_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003726:	e015      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372c:	3328      	adds	r3, #40	@ 0x28
 800372e:	2102      	movs	r1, #2
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fe95 	bl	8004460 <RCCEx_PLL3_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800373c:	e00a      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003744:	e006      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003746:	bf00      	nop
 8003748:	e004      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800375c:	4ba1      	ldr	r3, [pc, #644]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800376c:	4a9d      	ldr	r2, [pc, #628]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800376e:	430b      	orrs	r3, r1
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
 8003772:	e003      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f002 0308 	and.w	r3, r2, #8
 8003788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003792:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d01e      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ae:	3328      	adds	r3, #40	@ 0x28
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fe54 	bl	8004460 <RCCEx_PLL3_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80037c4:	4b87      	ldr	r3, [pc, #540]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d4:	4a83      	ldr	r2, [pc, #524]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f002 0310 	and.w	r3, r2, #16
 80037e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d01e      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003806:	d10c      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	3328      	adds	r3, #40	@ 0x28
 800380e:	2102      	movs	r1, #2
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fe25 	bl	8004460 <RCCEx_PLL3_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003822:	4b70      	ldr	r3, [pc, #448]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003826:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003832:	4a6c      	ldr	r2, [pc, #432]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003834:	430b      	orrs	r3, r1
 8003836:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800384e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d03e      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003860:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003864:	d022      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800386a:	d81b      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003874:	d00b      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003876:	e015      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	3308      	adds	r3, #8
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fd3b 	bl	80042fc <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800388c:	e00f      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003892:	3328      	adds	r3, #40	@ 0x28
 8003894:	2102      	movs	r1, #2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fde2 	bl	8004460 <RCCEx_PLL3_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038a2:	e004      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038aa:	e000      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80038ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b6:	4b4b      	ldr	r3, [pc, #300]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038c6:	4a47      	ldr	r2, [pc, #284]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80038e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038e4:	2300      	movs	r3, #0
 80038e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038fe:	d01f      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003900:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003904:	d818      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800390c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003910:	d007      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003912:	e011      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003914:	4b33      	ldr	r3, [pc, #204]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	4a32      	ldr	r2, [pc, #200]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800391a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800391e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003920:	e00f      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	3328      	adds	r3, #40	@ 0x28
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fd98 	bl	8004460 <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003936:	e004      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800393e:	e000      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800394a:	4b26      	ldr	r3, [pc, #152]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800394c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	4a22      	ldr	r2, [pc, #136]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800395c:	430b      	orrs	r3, r1
 800395e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003960:	e003      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003976:	673b      	str	r3, [r7, #112]	@ 0x70
 8003978:	2300      	movs	r3, #0
 800397a:	677b      	str	r3, [r7, #116]	@ 0x74
 800397c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003980:	460b      	mov	r3, r1
 8003982:	4313      	orrs	r3, r2
 8003984:	d034      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003994:	d007      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003996:	e011      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003998:	4b12      	ldr	r3, [pc, #72]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	4a11      	ldr	r2, [pc, #68]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800399e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039a4:	e00e      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	3308      	adds	r3, #8
 80039ac:	2102      	movs	r1, #2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fca4 	bl	80042fc <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039ba:	e003      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039da:	4a02      	ldr	r2, [pc, #8]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039dc:	430b      	orrs	r3, r1
 80039de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039e0:	e006      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80039e2:	bf00      	nop
 80039e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80039fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039fe:	2300      	movs	r3, #0
 8003a00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	d00c      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a10:	3328      	adds	r3, #40	@ 0x28
 8003a12:	2102      	movs	r1, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fd23 	bl	8004460 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003a32:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a34:	2300      	movs	r3, #0
 8003a36:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	d038      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a4e:	d018      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a54:	d811      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a5a:	d014      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a60:	d80b      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d011      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6c:	4bc3      	ldr	r3, [pc, #780]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	4ac2      	ldr	r2, [pc, #776]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a78:	e008      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a80:	e004      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a82:	bf00      	nop
 8003a84:	e002      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a94:	4bb9      	ldr	r3, [pc, #740]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aa4:	4ab5      	ldr	r2, [pc, #724]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003aaa:	e003      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ac0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ac6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003aca:	460b      	mov	r3, r1
 8003acc:	4313      	orrs	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ad0:	4baa      	ldr	r3, [pc, #680]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ade:	4aa7      	ldr	r2, [pc, #668]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003af0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003af2:	2300      	movs	r3, #0
 8003af4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b00:	4b9e      	ldr	r3, [pc, #632]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b10:	4a9a      	ldr	r2, [pc, #616]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003b22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b24:	2300      	movs	r3, #0
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b32:	4b92      	ldr	r3, [pc, #584]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b40:	4a8e      	ldr	r2, [pc, #568]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b42:	430b      	orrs	r3, r1
 8003b44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003b52:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b54:	2300      	movs	r3, #0
 8003b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b62:	4b86      	ldr	r3, [pc, #536]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	4a85      	ldr	r2, [pc, #532]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b6c:	6113      	str	r3, [r2, #16]
 8003b6e:	4b83      	ldr	r3, [pc, #524]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b70:	6919      	ldr	r1, [r3, #16]
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003b7a:	4a80      	ldr	r2, [pc, #512]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b8e:	2300      	movs	r3, #0
 8003b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b9c:	4b77      	ldr	r3, [pc, #476]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003baa:	4a74      	ldr	r2, [pc, #464]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bac:	430b      	orrs	r3, r1
 8003bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bdc:	4a67      	ldr	r2, [pc, #412]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	2100      	movs	r1, #0
 8003bec:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	d011      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	3308      	adds	r3, #8
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fb78 	bl	80042fc <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	6239      	str	r1, [r7, #32]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	d011      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	3308      	adds	r3, #8
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fb58 	bl	80042fc <RCCEx_PLL2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	61b9      	str	r1, [r7, #24]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	d011      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	3308      	adds	r3, #8
 8003c84:	2102      	movs	r1, #2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fb38 	bl	80042fc <RCCEx_PLL2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	2100      	movs	r1, #0
 8003cac:	6139      	str	r1, [r7, #16]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d011      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	3328      	adds	r3, #40	@ 0x28
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fbca 	bl	8004460 <RCCEx_PLL3_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	2100      	movs	r1, #0
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	d011      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	3328      	adds	r3, #40	@ 0x28
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fbaa 	bl	8004460 <RCCEx_PLL3_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	d011      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d42:	3328      	adds	r3, #40	@ 0x28
 8003d44:	2102      	movs	r1, #2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fb8a 	bl	8004460 <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003d62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003d76:	46bd      	mov	sp, r7
 8003d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7c:	58024400 	.word	0x58024400

08003d80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003d84:	f7fe fd54 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4904      	ldr	r1, [pc, #16]	@ (8003da8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	58024400 	.word	0x58024400
 8003da8:	0800b3f8 	.word	0x0800b3f8

08003dac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	@ 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003db4:	4ba1      	ldr	r3, [pc, #644]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003dbe:	4b9f      	ldr	r3, [pc, #636]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc2:	0b1b      	lsrs	r3, r3, #12
 8003dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003dca:	4b9c      	ldr	r3, [pc, #624]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003dd6:	4b99      	ldr	r3, [pc, #612]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8111 	beq.w	800401c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	f000 8083 	beq.w	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	f200 80a1 	bhi.w	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d056      	beq.n	8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e16:	e099      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e18:	4b88      	ldr	r3, [pc, #544]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02d      	beq.n	8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e24:	4b85      	ldr	r3, [pc, #532]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	08db      	lsrs	r3, r3, #3
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	4a84      	ldr	r2, [pc, #528]	@ (8004040 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e7e:	e087      	b.n	8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004048 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec2:	e065      	b.n	8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800404c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b59      	ldr	r3, [pc, #356]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f06:	e043      	b.n	8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b48      	ldr	r3, [pc, #288]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4a:	e021      	b.n	8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800404c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b37      	ldr	r3, [pc, #220]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003f90:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	0a5b      	lsrs	r3, r3, #9
 8003f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb6:	ee17 2a90 	vmov	r2, s15
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe4:	ee17 2a90 	vmov	r2, s15
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003fec:	4b13      	ldr	r3, [pc, #76]	@ (800403c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff0:	0e1b      	lsrs	r3, r3, #24
 8003ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004006:	edd7 6a07 	vldr	s13, [r7, #28]
 800400a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800400e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004012:	ee17 2a90 	vmov	r2, s15
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800401a:	e008      	b.n	800402e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
}
 800402e:	bf00      	nop
 8004030:	3724      	adds	r7, #36	@ 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
 8004040:	03d09000 	.word	0x03d09000
 8004044:	46000000 	.word	0x46000000
 8004048:	4c742400 	.word	0x4c742400
 800404c:	4a742400 	.word	0x4a742400
 8004050:	4af42400 	.word	0x4af42400

08004054 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004054:	b480      	push	{r7}
 8004056:	b089      	sub	sp, #36	@ 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800405c:	4ba1      	ldr	r3, [pc, #644]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004066:	4b9f      	ldr	r3, [pc, #636]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	0d1b      	lsrs	r3, r3, #20
 800406c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004070:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004072:	4b9c      	ldr	r3, [pc, #624]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800407e:	4b99      	ldr	r3, [pc, #612]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	08db      	lsrs	r3, r3, #3
 8004084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8111 	beq.w	80042c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	f000 8083 	beq.w	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	f200 80a1 	bhi.w	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d056      	beq.n	800416c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80040be:	e099      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040c0:	4b88      	ldr	r3, [pc, #544]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02d      	beq.n	8004128 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040cc:	4b85      	ldr	r3, [pc, #532]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	08db      	lsrs	r3, r3, #3
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	4a84      	ldr	r2, [pc, #528]	@ (80042e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
 80040dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b7b      	ldr	r3, [pc, #492]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a03 	vldr	s12, [r7, #12]
 800410a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004126:	e087      	b.n	8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b6a      	ldr	r3, [pc, #424]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a03 	vldr	s12, [r7, #12]
 800414e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800416a:	e065      	b.n	8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b59      	ldr	r3, [pc, #356]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004192:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ae:	e043      	b.n	8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b48      	ldr	r3, [pc, #288]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041f2:	e021      	b.n	8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004206:	4b37      	ldr	r3, [pc, #220]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004216:	ed97 6a03 	vldr	s12, [r7, #12]
 800421a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800421e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800422a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004236:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004238:	4b2a      	ldr	r3, [pc, #168]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	0a5b      	lsrs	r3, r3, #9
 800423e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800424e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004252:	edd7 6a07 	vldr	s13, [r7, #28]
 8004256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800425a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425e:	ee17 2a90 	vmov	r2, s15
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004266:	4b1f      	ldr	r3, [pc, #124]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	0c1b      	lsrs	r3, r3, #16
 800426c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004278:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800427c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004280:	edd7 6a07 	vldr	s13, [r7, #28]
 8004284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428c:	ee17 2a90 	vmov	r2, s15
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004294:	4b13      	ldr	r3, [pc, #76]	@ (80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	0e1b      	lsrs	r3, r3, #24
 800429a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80042b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ba:	ee17 2a90 	vmov	r2, s15
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80042c2:	e008      	b.n	80042d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
}
 80042d6:	bf00      	nop
 80042d8:	3724      	adds	r7, #36	@ 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	58024400 	.word	0x58024400
 80042e8:	03d09000 	.word	0x03d09000
 80042ec:	46000000 	.word	0x46000000
 80042f0:	4c742400 	.word	0x4c742400
 80042f4:	4a742400 	.word	0x4a742400
 80042f8:	4af42400 	.word	0x4af42400

080042fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800430a:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b03      	cmp	r3, #3
 8004314:	d101      	bne.n	800431a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e099      	b.n	800444e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800431a:	4b4f      	ldr	r3, [pc, #316]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a4e      	ldr	r2, [pc, #312]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004320:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004326:	f7fc ff95 	bl	8001254 <HAL_GetTick>
 800432a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800432c:	e008      	b.n	8004340 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800432e:	f7fc ff91 	bl	8001254 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e086      	b.n	800444e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004340:	4b45      	ldr	r3, [pc, #276]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800434c:	4b42      	ldr	r3, [pc, #264]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	031b      	lsls	r3, r3, #12
 800435a:	493f      	ldr	r1, [pc, #252]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	3b01      	subs	r3, #1
 8004366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	3b01      	subs	r3, #1
 8004370:	025b      	lsls	r3, r3, #9
 8004372:	b29b      	uxth	r3, r3
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	3b01      	subs	r3, #1
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004390:	4931      	ldr	r1, [pc, #196]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004396:	4b30      	ldr	r3, [pc, #192]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	492d      	ldr	r1, [pc, #180]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	f023 0220 	bic.w	r2, r3, #32
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4928      	ldr	r1, [pc, #160]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043ba:	4b27      	ldr	r3, [pc, #156]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043c0:	f023 0310 	bic.w	r3, r3, #16
 80043c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043c6:	4b24      	ldr	r3, [pc, #144]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ca:	4b24      	ldr	r3, [pc, #144]	@ (800445c <RCCEx_PLL2_Config+0x160>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	69d2      	ldr	r2, [r2, #28]
 80043d2:	00d2      	lsls	r2, r2, #3
 80043d4:	4920      	ldr	r1, [pc, #128]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043da:	4b1f      	ldr	r3, [pc, #124]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a1e      	ldr	r2, [pc, #120]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043e0:	f043 0310 	orr.w	r3, r3, #16
 80043e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	4a19      	ldr	r2, [pc, #100]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 80043f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043f8:	e00f      	b.n	800441a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d106      	bne.n	800440e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004400:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	4a14      	ldr	r2, [pc, #80]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800440a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800440c:	e005      	b.n	800441a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800440e:	4b12      	ldr	r3, [pc, #72]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004412:	4a11      	ldr	r2, [pc, #68]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004418:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800441a:	4b0f      	ldr	r3, [pc, #60]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a0e      	ldr	r2, [pc, #56]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004420:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004426:	f7fc ff15 	bl	8001254 <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800442c:	e008      	b.n	8004440 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800442e:	f7fc ff11 	bl	8001254 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <RCCEx_PLL2_Config+0x15c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	ffff0007 	.word	0xffff0007

08004460 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800446e:	4b53      	ldr	r3, [pc, #332]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b03      	cmp	r3, #3
 8004478:	d101      	bne.n	800447e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e099      	b.n	80045b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800447e:	4b4f      	ldr	r3, [pc, #316]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a4e      	ldr	r2, [pc, #312]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448a:	f7fc fee3 	bl	8001254 <HAL_GetTick>
 800448e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004490:	e008      	b.n	80044a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004492:	f7fc fedf 	bl	8001254 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e086      	b.n	80045b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044a4:	4b45      	ldr	r3, [pc, #276]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044b0:	4b42      	ldr	r3, [pc, #264]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 80044b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	051b      	lsls	r3, r3, #20
 80044be:	493f      	ldr	r1, [pc, #252]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	025b      	lsls	r3, r3, #9
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044f4:	4931      	ldr	r1, [pc, #196]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044fa:	4b30      	ldr	r3, [pc, #192]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	492d      	ldr	r1, [pc, #180]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800450c:	4b2b      	ldr	r3, [pc, #172]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	4928      	ldr	r1, [pc, #160]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 800451a:	4313      	orrs	r3, r2
 800451c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800451e:	4b27      	ldr	r3, [pc, #156]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	4a26      	ldr	r2, [pc, #152]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004528:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800452a:	4b24      	ldr	r3, [pc, #144]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 800452c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800452e:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <RCCEx_PLL3_Config+0x160>)
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	69d2      	ldr	r2, [r2, #28]
 8004536:	00d2      	lsls	r2, r2, #3
 8004538:	4920      	ldr	r1, [pc, #128]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800453e:	4b1f      	ldr	r3, [pc, #124]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	4a1e      	ldr	r2, [pc, #120]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004548:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004550:	4b1a      	ldr	r3, [pc, #104]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	4a19      	ldr	r2, [pc, #100]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004556:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800455a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800455c:	e00f      	b.n	800457e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d106      	bne.n	8004572 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004564:	4b15      	ldr	r3, [pc, #84]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	4a14      	ldr	r2, [pc, #80]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 800456a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800456e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004570:	e005      	b.n	800457e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004572:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	4a11      	ldr	r2, [pc, #68]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004578:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800457c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800457e:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a0e      	ldr	r2, [pc, #56]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458a:	f7fc fe63 	bl	8001254 <HAL_GetTick>
 800458e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004590:	e008      	b.n	80045a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004592:	f7fc fe5f 	bl	8001254 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e006      	b.n	80045b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <RCCEx_PLL3_Config+0x15c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	58024400 	.word	0x58024400
 80045c0:	ffff0007 	.word	0xffff0007

080045c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e049      	b.n	800466a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fbd4 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f000 fa4e 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d001      	beq.n	800468c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e04c      	b.n	8004726 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a26      	ldr	r2, [pc, #152]	@ (8004734 <HAL_TIM_Base_Start+0xc0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d022      	beq.n	80046e4 <HAL_TIM_Base_Start+0x70>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a6:	d01d      	beq.n	80046e4 <HAL_TIM_Base_Start+0x70>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a22      	ldr	r2, [pc, #136]	@ (8004738 <HAL_TIM_Base_Start+0xc4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d018      	beq.n	80046e4 <HAL_TIM_Base_Start+0x70>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a21      	ldr	r2, [pc, #132]	@ (800473c <HAL_TIM_Base_Start+0xc8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <HAL_TIM_Base_Start+0x70>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004740 <HAL_TIM_Base_Start+0xcc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00e      	beq.n	80046e4 <HAL_TIM_Base_Start+0x70>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004744 <HAL_TIM_Base_Start+0xd0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d009      	beq.n	80046e4 <HAL_TIM_Base_Start+0x70>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004748 <HAL_TIM_Base_Start+0xd4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <HAL_TIM_Base_Start+0x70>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1b      	ldr	r2, [pc, #108]	@ (800474c <HAL_TIM_Base_Start+0xd8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d115      	bne.n	8004710 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	4b19      	ldr	r3, [pc, #100]	@ (8004750 <HAL_TIM_Base_Start+0xdc>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b06      	cmp	r3, #6
 80046f4:	d015      	beq.n	8004722 <HAL_TIM_Base_Start+0xae>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046fc:	d011      	beq.n	8004722 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470e:	e008      	b.n	8004722 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e000      	b.n	8004724 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40010000 	.word	0x40010000
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40000c00 	.word	0x40000c00
 8004744:	40010400 	.word	0x40010400
 8004748:	40001800 	.word	0x40001800
 800474c:	40014000 	.word	0x40014000
 8004750:	00010007 	.word	0x00010007

08004754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d001      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e054      	b.n	8004816 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a26      	ldr	r2, [pc, #152]	@ (8004824 <HAL_TIM_Base_Start_IT+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d022      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x80>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004796:	d01d      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x80>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a22      	ldr	r2, [pc, #136]	@ (8004828 <HAL_TIM_Base_Start_IT+0xd4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d018      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x80>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a21      	ldr	r2, [pc, #132]	@ (800482c <HAL_TIM_Base_Start_IT+0xd8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x80>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004830 <HAL_TIM_Base_Start_IT+0xdc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x80>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004834 <HAL_TIM_Base_Start_IT+0xe0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x80>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004838 <HAL_TIM_Base_Start_IT+0xe4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x80>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1b      	ldr	r2, [pc, #108]	@ (800483c <HAL_TIM_Base_Start_IT+0xe8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d115      	bne.n	8004800 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_TIM_Base_Start_IT+0xec>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b06      	cmp	r3, #6
 80047e4:	d015      	beq.n	8004812 <HAL_TIM_Base_Start_IT+0xbe>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ec:	d011      	beq.n	8004812 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	e008      	b.n	8004812 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e000      	b.n	8004814 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40010400 	.word	0x40010400
 8004838:	40001800 	.word	0x40001800
 800483c:	40014000 	.word	0x40014000
 8004840:	00010007 	.word	0x00010007

08004844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d020      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0202 	mvn.w	r2, #2
 8004878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f8e9 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8db 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f8ec 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d020      	beq.n	80048f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01b      	beq.n	80048f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0204 	mvn.w	r2, #4
 80048c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8c3 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f8b5 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8c6 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d020      	beq.n	8004940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0208 	mvn.w	r2, #8
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2204      	movs	r2, #4
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f89d 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f88f 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f8a0 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	d020      	beq.n	800498c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0210 	mvn.w	r2, #16
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2208      	movs	r2, #8
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f877 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f869 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f87a 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0201 	mvn.w	r2, #1
 80049a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc f9ac 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00c      	beq.n	80049de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f913 	bl	8004c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00c      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f90b 	bl	8004c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f834 	bl	8004a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00c      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0220 	mvn.w	r2, #32
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f8d3 	bl	8004bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a46      	ldr	r2, [pc, #280]	@ (8004bd0 <TIM_Base_SetConfig+0x12c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac2:	d00f      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a43      	ldr	r2, [pc, #268]	@ (8004bd4 <TIM_Base_SetConfig+0x130>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a42      	ldr	r2, [pc, #264]	@ (8004bd8 <TIM_Base_SetConfig+0x134>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a41      	ldr	r2, [pc, #260]	@ (8004bdc <TIM_Base_SetConfig+0x138>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a40      	ldr	r2, [pc, #256]	@ (8004be0 <TIM_Base_SetConfig+0x13c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a35      	ldr	r2, [pc, #212]	@ (8004bd0 <TIM_Base_SetConfig+0x12c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01f      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b04:	d01b      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a32      	ldr	r2, [pc, #200]	@ (8004bd4 <TIM_Base_SetConfig+0x130>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d017      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a31      	ldr	r2, [pc, #196]	@ (8004bd8 <TIM_Base_SetConfig+0x134>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a30      	ldr	r2, [pc, #192]	@ (8004bdc <TIM_Base_SetConfig+0x138>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00f      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2f      	ldr	r2, [pc, #188]	@ (8004be0 <TIM_Base_SetConfig+0x13c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2e      	ldr	r2, [pc, #184]	@ (8004be4 <TIM_Base_SetConfig+0x140>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2d      	ldr	r2, [pc, #180]	@ (8004be8 <TIM_Base_SetConfig+0x144>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a2c      	ldr	r2, [pc, #176]	@ (8004bec <TIM_Base_SetConfig+0x148>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a16      	ldr	r2, [pc, #88]	@ (8004bd0 <TIM_Base_SetConfig+0x12c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00f      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	@ (8004be0 <TIM_Base_SetConfig+0x13c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a17      	ldr	r2, [pc, #92]	@ (8004be4 <TIM_Base_SetConfig+0x140>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d007      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a16      	ldr	r2, [pc, #88]	@ (8004be8 <TIM_Base_SetConfig+0x144>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a15      	ldr	r2, [pc, #84]	@ (8004bec <TIM_Base_SetConfig+0x148>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d103      	bne.n	8004ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d105      	bne.n	8004bc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f023 0201 	bic.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	611a      	str	r2, [r3, #16]
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800
 8004bdc:	40000c00 	.word	0x40000c00
 8004be0:	40010400 	.word	0x40010400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400
 8004bec:	40014800 	.word	0x40014800

08004bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e042      	b.n	8004cc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fc f8c3 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2224      	movs	r2, #36	@ 0x24
 8004c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0201 	bic.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fe1e 	bl	80058b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f8b3 	bl	8004de8 <UART_SetConfig>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e01b      	b.n	8004cc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fe9d 	bl	80059fc <UART_CheckIdleState>
 8004cc2:	4603      	mov	r3, r0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d17b      	bne.n	8004dde <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Transmit+0x26>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e074      	b.n	8004de0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2221      	movs	r2, #33	@ 0x21
 8004d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d06:	f7fc faa5 	bl	8001254 <HAL_GetTick>
 8004d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d24:	d108      	bne.n	8004d38 <HAL_UART_Transmit+0x6c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e003      	b.n	8004d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d40:	e030      	b.n	8004da4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2180      	movs	r1, #128	@ 0x80
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 feff 	bl	8005b50 <UART_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e03d      	b.n	8004de0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e007      	b.n	8004d92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1c8      	bne.n	8004d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	2140      	movs	r1, #64	@ 0x40
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fec8 	bl	8005b50 <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e006      	b.n	8004de0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dec:	b092      	sub	sp, #72	@ 0x48
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4bbe      	ldr	r3, [pc, #760]	@ (8005110 <UART_SetConfig+0x328>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4ab3      	ldr	r2, [pc, #716]	@ (8005114 <UART_SetConfig+0x32c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e50:	4313      	orrs	r3, r2
 8004e52:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	4baf      	ldr	r3, [pc, #700]	@ (8005118 <UART_SetConfig+0x330>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	f023 010f 	bic.w	r1, r3, #15
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4aa6      	ldr	r2, [pc, #664]	@ (800511c <UART_SetConfig+0x334>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d177      	bne.n	8004f78 <UART_SetConfig+0x190>
 8004e88:	4ba5      	ldr	r3, [pc, #660]	@ (8005120 <UART_SetConfig+0x338>)
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e90:	2b28      	cmp	r3, #40	@ 0x28
 8004e92:	d86d      	bhi.n	8004f70 <UART_SetConfig+0x188>
 8004e94:	a201      	add	r2, pc, #4	@ (adr r2, 8004e9c <UART_SetConfig+0xb4>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004f41 	.word	0x08004f41
 8004ea0:	08004f71 	.word	0x08004f71
 8004ea4:	08004f71 	.word	0x08004f71
 8004ea8:	08004f71 	.word	0x08004f71
 8004eac:	08004f71 	.word	0x08004f71
 8004eb0:	08004f71 	.word	0x08004f71
 8004eb4:	08004f71 	.word	0x08004f71
 8004eb8:	08004f71 	.word	0x08004f71
 8004ebc:	08004f49 	.word	0x08004f49
 8004ec0:	08004f71 	.word	0x08004f71
 8004ec4:	08004f71 	.word	0x08004f71
 8004ec8:	08004f71 	.word	0x08004f71
 8004ecc:	08004f71 	.word	0x08004f71
 8004ed0:	08004f71 	.word	0x08004f71
 8004ed4:	08004f71 	.word	0x08004f71
 8004ed8:	08004f71 	.word	0x08004f71
 8004edc:	08004f51 	.word	0x08004f51
 8004ee0:	08004f71 	.word	0x08004f71
 8004ee4:	08004f71 	.word	0x08004f71
 8004ee8:	08004f71 	.word	0x08004f71
 8004eec:	08004f71 	.word	0x08004f71
 8004ef0:	08004f71 	.word	0x08004f71
 8004ef4:	08004f71 	.word	0x08004f71
 8004ef8:	08004f71 	.word	0x08004f71
 8004efc:	08004f59 	.word	0x08004f59
 8004f00:	08004f71 	.word	0x08004f71
 8004f04:	08004f71 	.word	0x08004f71
 8004f08:	08004f71 	.word	0x08004f71
 8004f0c:	08004f71 	.word	0x08004f71
 8004f10:	08004f71 	.word	0x08004f71
 8004f14:	08004f71 	.word	0x08004f71
 8004f18:	08004f71 	.word	0x08004f71
 8004f1c:	08004f61 	.word	0x08004f61
 8004f20:	08004f71 	.word	0x08004f71
 8004f24:	08004f71 	.word	0x08004f71
 8004f28:	08004f71 	.word	0x08004f71
 8004f2c:	08004f71 	.word	0x08004f71
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f71 	.word	0x08004f71
 8004f38:	08004f71 	.word	0x08004f71
 8004f3c:	08004f69 	.word	0x08004f69
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f46:	e222      	b.n	800538e <UART_SetConfig+0x5a6>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4e:	e21e      	b.n	800538e <UART_SetConfig+0x5a6>
 8004f50:	2308      	movs	r3, #8
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f56:	e21a      	b.n	800538e <UART_SetConfig+0x5a6>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5e:	e216      	b.n	800538e <UART_SetConfig+0x5a6>
 8004f60:	2320      	movs	r3, #32
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f66:	e212      	b.n	800538e <UART_SetConfig+0x5a6>
 8004f68:	2340      	movs	r3, #64	@ 0x40
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6e:	e20e      	b.n	800538e <UART_SetConfig+0x5a6>
 8004f70:	2380      	movs	r3, #128	@ 0x80
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f76:	e20a      	b.n	800538e <UART_SetConfig+0x5a6>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a69      	ldr	r2, [pc, #420]	@ (8005124 <UART_SetConfig+0x33c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d130      	bne.n	8004fe4 <UART_SetConfig+0x1fc>
 8004f82:	4b67      	ldr	r3, [pc, #412]	@ (8005120 <UART_SetConfig+0x338>)
 8004f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d826      	bhi.n	8004fdc <UART_SetConfig+0x1f4>
 8004f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <UART_SetConfig+0x1ac>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fad 	.word	0x08004fad
 8004f98:	08004fb5 	.word	0x08004fb5
 8004f9c:	08004fbd 	.word	0x08004fbd
 8004fa0:	08004fc5 	.word	0x08004fc5
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb2:	e1ec      	b.n	800538e <UART_SetConfig+0x5a6>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fba:	e1e8      	b.n	800538e <UART_SetConfig+0x5a6>
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc2:	e1e4      	b.n	800538e <UART_SetConfig+0x5a6>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fca:	e1e0      	b.n	800538e <UART_SetConfig+0x5a6>
 8004fcc:	2320      	movs	r3, #32
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd2:	e1dc      	b.n	800538e <UART_SetConfig+0x5a6>
 8004fd4:	2340      	movs	r3, #64	@ 0x40
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fda:	e1d8      	b.n	800538e <UART_SetConfig+0x5a6>
 8004fdc:	2380      	movs	r3, #128	@ 0x80
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe2:	e1d4      	b.n	800538e <UART_SetConfig+0x5a6>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8005128 <UART_SetConfig+0x340>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d130      	bne.n	8005050 <UART_SetConfig+0x268>
 8004fee:	4b4c      	ldr	r3, [pc, #304]	@ (8005120 <UART_SetConfig+0x338>)
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d826      	bhi.n	8005048 <UART_SetConfig+0x260>
 8004ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8005000 <UART_SetConfig+0x218>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	08005019 	.word	0x08005019
 8005004:	08005021 	.word	0x08005021
 8005008:	08005029 	.word	0x08005029
 800500c:	08005031 	.word	0x08005031
 8005010:	08005039 	.word	0x08005039
 8005014:	08005041 	.word	0x08005041
 8005018:	2300      	movs	r3, #0
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501e:	e1b6      	b.n	800538e <UART_SetConfig+0x5a6>
 8005020:	2304      	movs	r3, #4
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005026:	e1b2      	b.n	800538e <UART_SetConfig+0x5a6>
 8005028:	2308      	movs	r3, #8
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e1ae      	b.n	800538e <UART_SetConfig+0x5a6>
 8005030:	2310      	movs	r3, #16
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005036:	e1aa      	b.n	800538e <UART_SetConfig+0x5a6>
 8005038:	2320      	movs	r3, #32
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800503e:	e1a6      	b.n	800538e <UART_SetConfig+0x5a6>
 8005040:	2340      	movs	r3, #64	@ 0x40
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005046:	e1a2      	b.n	800538e <UART_SetConfig+0x5a6>
 8005048:	2380      	movs	r3, #128	@ 0x80
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e19e      	b.n	800538e <UART_SetConfig+0x5a6>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a35      	ldr	r2, [pc, #212]	@ (800512c <UART_SetConfig+0x344>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d130      	bne.n	80050bc <UART_SetConfig+0x2d4>
 800505a:	4b31      	ldr	r3, [pc, #196]	@ (8005120 <UART_SetConfig+0x338>)
 800505c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2b05      	cmp	r3, #5
 8005064:	d826      	bhi.n	80050b4 <UART_SetConfig+0x2cc>
 8005066:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <UART_SetConfig+0x284>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	08005085 	.word	0x08005085
 8005070:	0800508d 	.word	0x0800508d
 8005074:	08005095 	.word	0x08005095
 8005078:	0800509d 	.word	0x0800509d
 800507c:	080050a5 	.word	0x080050a5
 8005080:	080050ad 	.word	0x080050ad
 8005084:	2300      	movs	r3, #0
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e180      	b.n	800538e <UART_SetConfig+0x5a6>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e17c      	b.n	800538e <UART_SetConfig+0x5a6>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e178      	b.n	800538e <UART_SetConfig+0x5a6>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e174      	b.n	800538e <UART_SetConfig+0x5a6>
 80050a4:	2320      	movs	r3, #32
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e170      	b.n	800538e <UART_SetConfig+0x5a6>
 80050ac:	2340      	movs	r3, #64	@ 0x40
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e16c      	b.n	800538e <UART_SetConfig+0x5a6>
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e168      	b.n	800538e <UART_SetConfig+0x5a6>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <UART_SetConfig+0x348>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d142      	bne.n	800514c <UART_SetConfig+0x364>
 80050c6:	4b16      	ldr	r3, [pc, #88]	@ (8005120 <UART_SetConfig+0x338>)
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	2b05      	cmp	r3, #5
 80050d0:	d838      	bhi.n	8005144 <UART_SetConfig+0x35c>
 80050d2:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <UART_SetConfig+0x2f0>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050f1 	.word	0x080050f1
 80050dc:	080050f9 	.word	0x080050f9
 80050e0:	08005101 	.word	0x08005101
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005135 	.word	0x08005135
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e14a      	b.n	800538e <UART_SetConfig+0x5a6>
 80050f8:	2304      	movs	r3, #4
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e146      	b.n	800538e <UART_SetConfig+0x5a6>
 8005100:	2308      	movs	r3, #8
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e142      	b.n	800538e <UART_SetConfig+0x5a6>
 8005108:	2310      	movs	r3, #16
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e13e      	b.n	800538e <UART_SetConfig+0x5a6>
 8005110:	cfff69f3 	.word	0xcfff69f3
 8005114:	58000c00 	.word	0x58000c00
 8005118:	11fff4ff 	.word	0x11fff4ff
 800511c:	40011000 	.word	0x40011000
 8005120:	58024400 	.word	0x58024400
 8005124:	40004400 	.word	0x40004400
 8005128:	40004800 	.word	0x40004800
 800512c:	40004c00 	.word	0x40004c00
 8005130:	40005000 	.word	0x40005000
 8005134:	2320      	movs	r3, #32
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513a:	e128      	b.n	800538e <UART_SetConfig+0x5a6>
 800513c:	2340      	movs	r3, #64	@ 0x40
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e124      	b.n	800538e <UART_SetConfig+0x5a6>
 8005144:	2380      	movs	r3, #128	@ 0x80
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e120      	b.n	800538e <UART_SetConfig+0x5a6>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4acb      	ldr	r2, [pc, #812]	@ (8005480 <UART_SetConfig+0x698>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d176      	bne.n	8005244 <UART_SetConfig+0x45c>
 8005156:	4bcb      	ldr	r3, [pc, #812]	@ (8005484 <UART_SetConfig+0x69c>)
 8005158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800515e:	2b28      	cmp	r3, #40	@ 0x28
 8005160:	d86c      	bhi.n	800523c <UART_SetConfig+0x454>
 8005162:	a201      	add	r2, pc, #4	@ (adr r2, 8005168 <UART_SetConfig+0x380>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	0800520d 	.word	0x0800520d
 800516c:	0800523d 	.word	0x0800523d
 8005170:	0800523d 	.word	0x0800523d
 8005174:	0800523d 	.word	0x0800523d
 8005178:	0800523d 	.word	0x0800523d
 800517c:	0800523d 	.word	0x0800523d
 8005180:	0800523d 	.word	0x0800523d
 8005184:	0800523d 	.word	0x0800523d
 8005188:	08005215 	.word	0x08005215
 800518c:	0800523d 	.word	0x0800523d
 8005190:	0800523d 	.word	0x0800523d
 8005194:	0800523d 	.word	0x0800523d
 8005198:	0800523d 	.word	0x0800523d
 800519c:	0800523d 	.word	0x0800523d
 80051a0:	0800523d 	.word	0x0800523d
 80051a4:	0800523d 	.word	0x0800523d
 80051a8:	0800521d 	.word	0x0800521d
 80051ac:	0800523d 	.word	0x0800523d
 80051b0:	0800523d 	.word	0x0800523d
 80051b4:	0800523d 	.word	0x0800523d
 80051b8:	0800523d 	.word	0x0800523d
 80051bc:	0800523d 	.word	0x0800523d
 80051c0:	0800523d 	.word	0x0800523d
 80051c4:	0800523d 	.word	0x0800523d
 80051c8:	08005225 	.word	0x08005225
 80051cc:	0800523d 	.word	0x0800523d
 80051d0:	0800523d 	.word	0x0800523d
 80051d4:	0800523d 	.word	0x0800523d
 80051d8:	0800523d 	.word	0x0800523d
 80051dc:	0800523d 	.word	0x0800523d
 80051e0:	0800523d 	.word	0x0800523d
 80051e4:	0800523d 	.word	0x0800523d
 80051e8:	0800522d 	.word	0x0800522d
 80051ec:	0800523d 	.word	0x0800523d
 80051f0:	0800523d 	.word	0x0800523d
 80051f4:	0800523d 	.word	0x0800523d
 80051f8:	0800523d 	.word	0x0800523d
 80051fc:	0800523d 	.word	0x0800523d
 8005200:	0800523d 	.word	0x0800523d
 8005204:	0800523d 	.word	0x0800523d
 8005208:	08005235 	.word	0x08005235
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005212:	e0bc      	b.n	800538e <UART_SetConfig+0x5a6>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e0b8      	b.n	800538e <UART_SetConfig+0x5a6>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e0b4      	b.n	800538e <UART_SetConfig+0x5a6>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e0b0      	b.n	800538e <UART_SetConfig+0x5a6>
 800522c:	2320      	movs	r3, #32
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005232:	e0ac      	b.n	800538e <UART_SetConfig+0x5a6>
 8005234:	2340      	movs	r3, #64	@ 0x40
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523a:	e0a8      	b.n	800538e <UART_SetConfig+0x5a6>
 800523c:	2380      	movs	r3, #128	@ 0x80
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e0a4      	b.n	800538e <UART_SetConfig+0x5a6>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a8f      	ldr	r2, [pc, #572]	@ (8005488 <UART_SetConfig+0x6a0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d130      	bne.n	80052b0 <UART_SetConfig+0x4c8>
 800524e:	4b8d      	ldr	r3, [pc, #564]	@ (8005484 <UART_SetConfig+0x69c>)
 8005250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	2b05      	cmp	r3, #5
 8005258:	d826      	bhi.n	80052a8 <UART_SetConfig+0x4c0>
 800525a:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0x478>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005279 	.word	0x08005279
 8005264:	08005281 	.word	0x08005281
 8005268:	08005289 	.word	0x08005289
 800526c:	08005291 	.word	0x08005291
 8005270:	08005299 	.word	0x08005299
 8005274:	080052a1 	.word	0x080052a1
 8005278:	2300      	movs	r3, #0
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527e:	e086      	b.n	800538e <UART_SetConfig+0x5a6>
 8005280:	2304      	movs	r3, #4
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005286:	e082      	b.n	800538e <UART_SetConfig+0x5a6>
 8005288:	2308      	movs	r3, #8
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e07e      	b.n	800538e <UART_SetConfig+0x5a6>
 8005290:	2310      	movs	r3, #16
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005296:	e07a      	b.n	800538e <UART_SetConfig+0x5a6>
 8005298:	2320      	movs	r3, #32
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529e:	e076      	b.n	800538e <UART_SetConfig+0x5a6>
 80052a0:	2340      	movs	r3, #64	@ 0x40
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a6:	e072      	b.n	800538e <UART_SetConfig+0x5a6>
 80052a8:	2380      	movs	r3, #128	@ 0x80
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e06e      	b.n	800538e <UART_SetConfig+0x5a6>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a75      	ldr	r2, [pc, #468]	@ (800548c <UART_SetConfig+0x6a4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d130      	bne.n	800531c <UART_SetConfig+0x534>
 80052ba:	4b72      	ldr	r3, [pc, #456]	@ (8005484 <UART_SetConfig+0x69c>)
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d826      	bhi.n	8005314 <UART_SetConfig+0x52c>
 80052c6:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <UART_SetConfig+0x4e4>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052e5 	.word	0x080052e5
 80052d0:	080052ed 	.word	0x080052ed
 80052d4:	080052f5 	.word	0x080052f5
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	08005305 	.word	0x08005305
 80052e0:	0800530d 	.word	0x0800530d
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ea:	e050      	b.n	800538e <UART_SetConfig+0x5a6>
 80052ec:	2304      	movs	r3, #4
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f2:	e04c      	b.n	800538e <UART_SetConfig+0x5a6>
 80052f4:	2308      	movs	r3, #8
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e048      	b.n	800538e <UART_SetConfig+0x5a6>
 80052fc:	2310      	movs	r3, #16
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e044      	b.n	800538e <UART_SetConfig+0x5a6>
 8005304:	2320      	movs	r3, #32
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e040      	b.n	800538e <UART_SetConfig+0x5a6>
 800530c:	2340      	movs	r3, #64	@ 0x40
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e03c      	b.n	800538e <UART_SetConfig+0x5a6>
 8005314:	2380      	movs	r3, #128	@ 0x80
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e038      	b.n	800538e <UART_SetConfig+0x5a6>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a5b      	ldr	r2, [pc, #364]	@ (8005490 <UART_SetConfig+0x6a8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d130      	bne.n	8005388 <UART_SetConfig+0x5a0>
 8005326:	4b57      	ldr	r3, [pc, #348]	@ (8005484 <UART_SetConfig+0x69c>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	2b05      	cmp	r3, #5
 8005330:	d826      	bhi.n	8005380 <UART_SetConfig+0x598>
 8005332:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <UART_SetConfig+0x550>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	08005351 	.word	0x08005351
 800533c:	08005359 	.word	0x08005359
 8005340:	08005361 	.word	0x08005361
 8005344:	08005369 	.word	0x08005369
 8005348:	08005371 	.word	0x08005371
 800534c:	08005379 	.word	0x08005379
 8005350:	2302      	movs	r3, #2
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e01a      	b.n	800538e <UART_SetConfig+0x5a6>
 8005358:	2304      	movs	r3, #4
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e016      	b.n	800538e <UART_SetConfig+0x5a6>
 8005360:	2308      	movs	r3, #8
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e012      	b.n	800538e <UART_SetConfig+0x5a6>
 8005368:	2310      	movs	r3, #16
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e00e      	b.n	800538e <UART_SetConfig+0x5a6>
 8005370:	2320      	movs	r3, #32
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e00a      	b.n	800538e <UART_SetConfig+0x5a6>
 8005378:	2340      	movs	r3, #64	@ 0x40
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e006      	b.n	800538e <UART_SetConfig+0x5a6>
 8005380:	2380      	movs	r3, #128	@ 0x80
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e002      	b.n	800538e <UART_SetConfig+0x5a6>
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a3f      	ldr	r2, [pc, #252]	@ (8005490 <UART_SetConfig+0x6a8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	f040 80f8 	bne.w	800558a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800539a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800539e:	2b20      	cmp	r3, #32
 80053a0:	dc46      	bgt.n	8005430 <UART_SetConfig+0x648>
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	f2c0 8082 	blt.w	80054ac <UART_SetConfig+0x6c4>
 80053a8:	3b02      	subs	r3, #2
 80053aa:	2b1e      	cmp	r3, #30
 80053ac:	d87e      	bhi.n	80054ac <UART_SetConfig+0x6c4>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <UART_SetConfig+0x5cc>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	08005437 	.word	0x08005437
 80053b8:	080054ad 	.word	0x080054ad
 80053bc:	0800543f 	.word	0x0800543f
 80053c0:	080054ad 	.word	0x080054ad
 80053c4:	080054ad 	.word	0x080054ad
 80053c8:	080054ad 	.word	0x080054ad
 80053cc:	0800544f 	.word	0x0800544f
 80053d0:	080054ad 	.word	0x080054ad
 80053d4:	080054ad 	.word	0x080054ad
 80053d8:	080054ad 	.word	0x080054ad
 80053dc:	080054ad 	.word	0x080054ad
 80053e0:	080054ad 	.word	0x080054ad
 80053e4:	080054ad 	.word	0x080054ad
 80053e8:	080054ad 	.word	0x080054ad
 80053ec:	0800545f 	.word	0x0800545f
 80053f0:	080054ad 	.word	0x080054ad
 80053f4:	080054ad 	.word	0x080054ad
 80053f8:	080054ad 	.word	0x080054ad
 80053fc:	080054ad 	.word	0x080054ad
 8005400:	080054ad 	.word	0x080054ad
 8005404:	080054ad 	.word	0x080054ad
 8005408:	080054ad 	.word	0x080054ad
 800540c:	080054ad 	.word	0x080054ad
 8005410:	080054ad 	.word	0x080054ad
 8005414:	080054ad 	.word	0x080054ad
 8005418:	080054ad 	.word	0x080054ad
 800541c:	080054ad 	.word	0x080054ad
 8005420:	080054ad 	.word	0x080054ad
 8005424:	080054ad 	.word	0x080054ad
 8005428:	080054ad 	.word	0x080054ad
 800542c:	0800549f 	.word	0x0800549f
 8005430:	2b40      	cmp	r3, #64	@ 0x40
 8005432:	d037      	beq.n	80054a4 <UART_SetConfig+0x6bc>
 8005434:	e03a      	b.n	80054ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005436:	f7fe fca3 	bl	8003d80 <HAL_RCCEx_GetD3PCLK1Freq>
 800543a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800543c:	e03c      	b.n	80054b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800543e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe fcb2 	bl	8003dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800544c:	e034      	b.n	80054b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800544e:	f107 0318 	add.w	r3, r7, #24
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe fdfe 	bl	8004054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800545c:	e02c      	b.n	80054b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800545e:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <UART_SetConfig+0x69c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <UART_SetConfig+0x69c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	08db      	lsrs	r3, r3, #3
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	4a07      	ldr	r2, [pc, #28]	@ (8005494 <UART_SetConfig+0x6ac>)
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800547c:	e01c      	b.n	80054b8 <UART_SetConfig+0x6d0>
 800547e:	bf00      	nop
 8005480:	40011400 	.word	0x40011400
 8005484:	58024400 	.word	0x58024400
 8005488:	40007800 	.word	0x40007800
 800548c:	40007c00 	.word	0x40007c00
 8005490:	58000c00 	.word	0x58000c00
 8005494:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005498:	4b9d      	ldr	r3, [pc, #628]	@ (8005710 <UART_SetConfig+0x928>)
 800549a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800549c:	e00c      	b.n	80054b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800549e:	4b9d      	ldr	r3, [pc, #628]	@ (8005714 <UART_SetConfig+0x92c>)
 80054a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a2:	e009      	b.n	80054b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054aa:	e005      	b.n	80054b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80054b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 81de 	beq.w	800587c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	4a94      	ldr	r2, [pc, #592]	@ (8005718 <UART_SetConfig+0x930>)
 80054c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ca:	461a      	mov	r2, r3
 80054cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80054d2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4413      	add	r3, r2
 80054de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d305      	bcc.n	80054f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d903      	bls.n	80054f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80054f6:	e1c1      	b.n	800587c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fa:	2200      	movs	r2, #0
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	60fa      	str	r2, [r7, #12]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	4a84      	ldr	r2, [pc, #528]	@ (8005718 <UART_SetConfig+0x930>)
 8005506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800550a:	b29b      	uxth	r3, r3
 800550c:	2200      	movs	r2, #0
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005516:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800551a:	f7fa ff39 	bl	8000390 <__aeabi_uldivmod>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4610      	mov	r0, r2
 8005524:	4619      	mov	r1, r3
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	020b      	lsls	r3, r1, #8
 8005530:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005534:	0202      	lsls	r2, r0, #8
 8005536:	6979      	ldr	r1, [r7, #20]
 8005538:	6849      	ldr	r1, [r1, #4]
 800553a:	0849      	lsrs	r1, r1, #1
 800553c:	2000      	movs	r0, #0
 800553e:	460c      	mov	r4, r1
 8005540:	4605      	mov	r5, r0
 8005542:	eb12 0804 	adds.w	r8, r2, r4
 8005546:	eb43 0905 	adc.w	r9, r3, r5
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	469a      	mov	sl, r3
 8005552:	4693      	mov	fp, r2
 8005554:	4652      	mov	r2, sl
 8005556:	465b      	mov	r3, fp
 8005558:	4640      	mov	r0, r8
 800555a:	4649      	mov	r1, r9
 800555c:	f7fa ff18 	bl	8000390 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4613      	mov	r3, r2
 8005566:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800556e:	d308      	bcc.n	8005582 <UART_SetConfig+0x79a>
 8005570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005576:	d204      	bcs.n	8005582 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800557e:	60da      	str	r2, [r3, #12]
 8005580:	e17c      	b.n	800587c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005588:	e178      	b.n	800587c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005592:	f040 80c5 	bne.w	8005720 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005596:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800559a:	2b20      	cmp	r3, #32
 800559c:	dc48      	bgt.n	8005630 <UART_SetConfig+0x848>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	db7b      	blt.n	800569a <UART_SetConfig+0x8b2>
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d879      	bhi.n	800569a <UART_SetConfig+0x8b2>
 80055a6:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <UART_SetConfig+0x7c4>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	08005637 	.word	0x08005637
 80055b0:	0800563f 	.word	0x0800563f
 80055b4:	0800569b 	.word	0x0800569b
 80055b8:	0800569b 	.word	0x0800569b
 80055bc:	08005647 	.word	0x08005647
 80055c0:	0800569b 	.word	0x0800569b
 80055c4:	0800569b 	.word	0x0800569b
 80055c8:	0800569b 	.word	0x0800569b
 80055cc:	08005657 	.word	0x08005657
 80055d0:	0800569b 	.word	0x0800569b
 80055d4:	0800569b 	.word	0x0800569b
 80055d8:	0800569b 	.word	0x0800569b
 80055dc:	0800569b 	.word	0x0800569b
 80055e0:	0800569b 	.word	0x0800569b
 80055e4:	0800569b 	.word	0x0800569b
 80055e8:	0800569b 	.word	0x0800569b
 80055ec:	08005667 	.word	0x08005667
 80055f0:	0800569b 	.word	0x0800569b
 80055f4:	0800569b 	.word	0x0800569b
 80055f8:	0800569b 	.word	0x0800569b
 80055fc:	0800569b 	.word	0x0800569b
 8005600:	0800569b 	.word	0x0800569b
 8005604:	0800569b 	.word	0x0800569b
 8005608:	0800569b 	.word	0x0800569b
 800560c:	0800569b 	.word	0x0800569b
 8005610:	0800569b 	.word	0x0800569b
 8005614:	0800569b 	.word	0x0800569b
 8005618:	0800569b 	.word	0x0800569b
 800561c:	0800569b 	.word	0x0800569b
 8005620:	0800569b 	.word	0x0800569b
 8005624:	0800569b 	.word	0x0800569b
 8005628:	0800569b 	.word	0x0800569b
 800562c:	0800568d 	.word	0x0800568d
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	d02e      	beq.n	8005692 <UART_SetConfig+0x8aa>
 8005634:	e031      	b.n	800569a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005636:	f7fd f92b 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 800563a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800563c:	e033      	b.n	80056a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800563e:	f7fd f93d 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8005642:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005644:	e02f      	b.n	80056a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fbae 	bl	8003dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005654:	e027      	b.n	80056a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005656:	f107 0318 	add.w	r3, r7, #24
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fcfa 	bl	8004054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005664:	e01f      	b.n	80056a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005666:	4b2d      	ldr	r3, [pc, #180]	@ (800571c <UART_SetConfig+0x934>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005672:	4b2a      	ldr	r3, [pc, #168]	@ (800571c <UART_SetConfig+0x934>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	08db      	lsrs	r3, r3, #3
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	4a24      	ldr	r2, [pc, #144]	@ (8005710 <UART_SetConfig+0x928>)
 800567e:	fa22 f303 	lsr.w	r3, r2, r3
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005684:	e00f      	b.n	80056a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005686:	4b22      	ldr	r3, [pc, #136]	@ (8005710 <UART_SetConfig+0x928>)
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800568a:	e00c      	b.n	80056a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800568c:	4b21      	ldr	r3, [pc, #132]	@ (8005714 <UART_SetConfig+0x92c>)
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005690:	e009      	b.n	80056a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005698:	e005      	b.n	80056a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80e7 	beq.w	800587c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <UART_SetConfig+0x930>)
 80056b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c0:	005a      	lsls	r2, r3, #1
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	441a      	add	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d916      	bls.n	8005708 <UART_SetConfig+0x920>
 80056da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e0:	d212      	bcs.n	8005708 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f023 030f 	bic.w	r3, r3, #15
 80056ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056fa:	4313      	orrs	r3, r2
 80056fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	e0b9      	b.n	800587c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800570e:	e0b5      	b.n	800587c <UART_SetConfig+0xa94>
 8005710:	03d09000 	.word	0x03d09000
 8005714:	003d0900 	.word	0x003d0900
 8005718:	0800b42c 	.word	0x0800b42c
 800571c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005720:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005724:	2b20      	cmp	r3, #32
 8005726:	dc49      	bgt.n	80057bc <UART_SetConfig+0x9d4>
 8005728:	2b00      	cmp	r3, #0
 800572a:	db7c      	blt.n	8005826 <UART_SetConfig+0xa3e>
 800572c:	2b20      	cmp	r3, #32
 800572e:	d87a      	bhi.n	8005826 <UART_SetConfig+0xa3e>
 8005730:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <UART_SetConfig+0x950>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	080057c3 	.word	0x080057c3
 800573c:	080057cb 	.word	0x080057cb
 8005740:	08005827 	.word	0x08005827
 8005744:	08005827 	.word	0x08005827
 8005748:	080057d3 	.word	0x080057d3
 800574c:	08005827 	.word	0x08005827
 8005750:	08005827 	.word	0x08005827
 8005754:	08005827 	.word	0x08005827
 8005758:	080057e3 	.word	0x080057e3
 800575c:	08005827 	.word	0x08005827
 8005760:	08005827 	.word	0x08005827
 8005764:	08005827 	.word	0x08005827
 8005768:	08005827 	.word	0x08005827
 800576c:	08005827 	.word	0x08005827
 8005770:	08005827 	.word	0x08005827
 8005774:	08005827 	.word	0x08005827
 8005778:	080057f3 	.word	0x080057f3
 800577c:	08005827 	.word	0x08005827
 8005780:	08005827 	.word	0x08005827
 8005784:	08005827 	.word	0x08005827
 8005788:	08005827 	.word	0x08005827
 800578c:	08005827 	.word	0x08005827
 8005790:	08005827 	.word	0x08005827
 8005794:	08005827 	.word	0x08005827
 8005798:	08005827 	.word	0x08005827
 800579c:	08005827 	.word	0x08005827
 80057a0:	08005827 	.word	0x08005827
 80057a4:	08005827 	.word	0x08005827
 80057a8:	08005827 	.word	0x08005827
 80057ac:	08005827 	.word	0x08005827
 80057b0:	08005827 	.word	0x08005827
 80057b4:	08005827 	.word	0x08005827
 80057b8:	08005819 	.word	0x08005819
 80057bc:	2b40      	cmp	r3, #64	@ 0x40
 80057be:	d02e      	beq.n	800581e <UART_SetConfig+0xa36>
 80057c0:	e031      	b.n	8005826 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7fd f865 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80057c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057c8:	e033      	b.n	8005832 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ca:	f7fd f877 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 80057ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057d0:	e02f      	b.n	8005832 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fae8 	bl	8003dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e0:	e027      	b.n	8005832 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e2:	f107 0318 	add.w	r3, r7, #24
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fc34 	bl	8004054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f0:	e01f      	b.n	8005832 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057f2:	4b2d      	ldr	r3, [pc, #180]	@ (80058a8 <UART_SetConfig+0xac0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057fe:	4b2a      	ldr	r3, [pc, #168]	@ (80058a8 <UART_SetConfig+0xac0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	4a28      	ldr	r2, [pc, #160]	@ (80058ac <UART_SetConfig+0xac4>)
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005810:	e00f      	b.n	8005832 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005812:	4b26      	ldr	r3, [pc, #152]	@ (80058ac <UART_SetConfig+0xac4>)
 8005814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005816:	e00c      	b.n	8005832 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005818:	4b25      	ldr	r3, [pc, #148]	@ (80058b0 <UART_SetConfig+0xac8>)
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581c:	e009      	b.n	8005832 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005824:	e005      	b.n	8005832 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005830:	bf00      	nop
    }

    if (pclk != 0U)
 8005832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005834:	2b00      	cmp	r3, #0
 8005836:	d021      	beq.n	800587c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	4a1d      	ldr	r2, [pc, #116]	@ (80058b4 <UART_SetConfig+0xacc>)
 800583e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005842:	461a      	mov	r2, r3
 8005844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005846:	fbb3 f2f2 	udiv	r2, r3, r2
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	441a      	add	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	2b0f      	cmp	r3, #15
 8005860:	d909      	bls.n	8005876 <UART_SetConfig+0xa8e>
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005868:	d205      	bcs.n	8005876 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	b29a      	uxth	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60da      	str	r2, [r3, #12]
 8005874:	e002      	b.n	800587c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2201      	movs	r2, #1
 8005880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2201      	movs	r2, #1
 8005888:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2200      	movs	r2, #0
 8005896:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005898:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800589c:	4618      	mov	r0, r3
 800589e:	3748      	adds	r7, #72	@ 0x48
 80058a0:	46bd      	mov	sp, r7
 80058a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a6:	bf00      	nop
 80058a8:	58024400 	.word	0x58024400
 80058ac:	03d09000 	.word	0x03d09000
 80058b0:	003d0900 	.word	0x003d0900
 80058b4:	0800b42c 	.word	0x0800b42c

080058b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01a      	beq.n	80059ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059b6:	d10a      	bne.n	80059ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b098      	sub	sp, #96	@ 0x60
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a0c:	f7fb fc22 	bl	8001254 <HAL_GetTick>
 8005a10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d12f      	bne.n	8005a80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f88e 	bl	8005b50 <UART_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d022      	beq.n	8005a80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e063      	b.n	8005b48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d149      	bne.n	8005b22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a96:	2200      	movs	r2, #0
 8005a98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f857 	bl	8005b50 <UART_WaitOnFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d03c      	beq.n	8005b22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e6      	bne.n	8005aa8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3308      	adds	r3, #8
 8005af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005afa:	61fa      	str	r2, [r7, #28]
 8005afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	69b9      	ldr	r1, [r7, #24]
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	617b      	str	r3, [r7, #20]
   return(result);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e5      	bne.n	8005ada <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e012      	b.n	8005b48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3758      	adds	r7, #88	@ 0x58
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b60:	e04f      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d04b      	beq.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6a:	f7fb fb73 	bl	8001254 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d302      	bcc.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e04e      	b.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d037      	beq.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b80      	cmp	r3, #128	@ 0x80
 8005b96:	d034      	beq.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b40      	cmp	r3, #64	@ 0x40
 8005b9c:	d031      	beq.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d110      	bne.n	8005bce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f839 	bl	8005c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e029      	b.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bdc:	d111      	bne.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f81f 	bl	8005c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e00f      	b.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d0a0      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b095      	sub	sp, #84	@ 0x54
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf4 <UART_EndRxTransfer+0xc8>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d118      	bne.n	8005cd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f023 0310 	bic.w	r3, r3, #16
 8005cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6979      	ldr	r1, [r7, #20]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e6      	bne.n	8005ca2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ce8:	bf00      	nop
 8005cea:	3754      	adds	r7, #84	@ 0x54
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	effffffe 	.word	0xeffffffe

08005cf8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_UARTEx_DisableFifoMode+0x16>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e027      	b.n	8005d5e <HAL_UARTEx_DisableFifoMode+0x66>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2224      	movs	r2, #36	@ 0x24
 8005d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e02d      	b.n	8005dde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2224      	movs	r2, #36	@ 0x24
 8005d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f850 	bl	8005e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e02d      	b.n	8005e5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2224      	movs	r2, #36	@ 0x24
 8005e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f812 	bl	8005e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d108      	bne.n	8005e86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e84:	e031      	b.n	8005eea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e86:	2310      	movs	r3, #16
 8005e88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e8a:	2310      	movs	r3, #16
 8005e8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	0e5b      	lsrs	r3, r3, #25
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	0f5b      	lsrs	r3, r3, #29
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	7b3a      	ldrb	r2, [r7, #12]
 8005eb2:	4911      	ldr	r1, [pc, #68]	@ (8005ef8 <UARTEx_SetNbDataToProcess+0x94>)
 8005eb4:	5c8a      	ldrb	r2, [r1, r2]
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005eba:	7b3a      	ldrb	r2, [r7, #12]
 8005ebc:	490f      	ldr	r1, [pc, #60]	@ (8005efc <UARTEx_SetNbDataToProcess+0x98>)
 8005ebe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ec0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	7b7a      	ldrb	r2, [r7, #13]
 8005ed0:	4909      	ldr	r1, [pc, #36]	@ (8005ef8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ed2:	5c8a      	ldrb	r2, [r1, r2]
 8005ed4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ed8:	7b7a      	ldrb	r2, [r7, #13]
 8005eda:	4908      	ldr	r1, [pc, #32]	@ (8005efc <UARTEx_SetNbDataToProcess+0x98>)
 8005edc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ede:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005eea:	bf00      	nop
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	0800b444 	.word	0x0800b444
 8005efc:	0800b44c 	.word	0x0800b44c

08005f00 <__NVIC_SetPriority>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	6039      	str	r1, [r7, #0]
 8005f0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	db0a      	blt.n	8005f2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	490c      	ldr	r1, [pc, #48]	@ (8005f4c <__NVIC_SetPriority+0x4c>)
 8005f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f1e:	0112      	lsls	r2, r2, #4
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	440b      	add	r3, r1
 8005f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f28:	e00a      	b.n	8005f40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	4908      	ldr	r1, [pc, #32]	@ (8005f50 <__NVIC_SetPriority+0x50>)
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	3b04      	subs	r3, #4
 8005f38:	0112      	lsls	r2, r2, #4
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	761a      	strb	r2, [r3, #24]
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	e000e100 	.word	0xe000e100
 8005f50:	e000ed00 	.word	0xe000ed00

08005f54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f58:	4b05      	ldr	r3, [pc, #20]	@ (8005f70 <SysTick_Handler+0x1c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f5c:	f002 f988 	bl	8008270 <xTaskGetSchedulerState>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d001      	beq.n	8005f6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f66:	f000 fd9f 	bl	8006aa8 <xPortSysTickHandler>
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	e000e010 	.word	0xe000e010

08005f74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f78:	2100      	movs	r1, #0
 8005f7a:	f06f 0004 	mvn.w	r0, #4
 8005f7e:	f7ff ffbf 	bl	8005f00 <__NVIC_SetPriority>
#endif
}
 8005f82:	bf00      	nop
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8e:	f3ef 8305 	mrs	r3, IPSR
 8005f92:	603b      	str	r3, [r7, #0]
  return(result);
 8005f94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f9a:	f06f 0305 	mvn.w	r3, #5
 8005f9e:	607b      	str	r3, [r7, #4]
 8005fa0:	e00c      	b.n	8005fbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <osKernelInitialize+0x44>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005faa:	4b08      	ldr	r3, [pc, #32]	@ (8005fcc <osKernelInitialize+0x44>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	607b      	str	r3, [r7, #4]
 8005fb4:	e002      	b.n	8005fbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fbc:	687b      	ldr	r3, [r7, #4]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	24000330 	.word	0x24000330

08005fd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd6:	f3ef 8305 	mrs	r3, IPSR
 8005fda:	603b      	str	r3, [r7, #0]
  return(result);
 8005fdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <osKernelStart+0x1a>
    stat = osErrorISR;
 8005fe2:	f06f 0305 	mvn.w	r3, #5
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	e010      	b.n	800600c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fea:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <osKernelStart+0x48>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d109      	bne.n	8006006 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ff2:	f7ff ffbf 	bl	8005f74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ff6:	4b08      	ldr	r3, [pc, #32]	@ (8006018 <osKernelStart+0x48>)
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ffc:	f001 fcd4 	bl	80079a8 <vTaskStartScheduler>
      stat = osOK;
 8006000:	2300      	movs	r3, #0
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	e002      	b.n	800600c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006006:	f04f 33ff 	mov.w	r3, #4294967295
 800600a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800600c:	687b      	ldr	r3, [r7, #4]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	24000330 	.word	0x24000330

0800601c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b08e      	sub	sp, #56	@ 0x38
 8006020:	af04      	add	r7, sp, #16
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800602c:	f3ef 8305 	mrs	r3, IPSR
 8006030:	617b      	str	r3, [r7, #20]
  return(result);
 8006032:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006034:	2b00      	cmp	r3, #0
 8006036:	d17e      	bne.n	8006136 <osThreadNew+0x11a>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d07b      	beq.n	8006136 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800603e:	2380      	movs	r3, #128	@ 0x80
 8006040:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006042:	2318      	movs	r3, #24
 8006044:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800604a:	f04f 33ff 	mov.w	r3, #4294967295
 800604e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d045      	beq.n	80060e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <osThreadNew+0x48>
        name = attr->name;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <osThreadNew+0x6e>
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	2b38      	cmp	r3, #56	@ 0x38
 800607c:	d805      	bhi.n	800608a <osThreadNew+0x6e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <osThreadNew+0x72>
        return (NULL);
 800608a:	2300      	movs	r3, #0
 800608c:	e054      	b.n	8006138 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	089b      	lsrs	r3, r3, #2
 800609c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00e      	beq.n	80060c4 <osThreadNew+0xa8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2ba7      	cmp	r3, #167	@ 0xa7
 80060ac:	d90a      	bls.n	80060c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d006      	beq.n	80060c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <osThreadNew+0xa8>
        mem = 1;
 80060be:	2301      	movs	r3, #1
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e010      	b.n	80060e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10c      	bne.n	80060e6 <osThreadNew+0xca>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d108      	bne.n	80060e6 <osThreadNew+0xca>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <osThreadNew+0xca>
          mem = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	e001      	b.n	80060e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d110      	bne.n	800610e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060f4:	9202      	str	r2, [sp, #8]
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6a3a      	ldr	r2, [r7, #32]
 8006100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f001 fa5c 	bl	80075c0 <xTaskCreateStatic>
 8006108:	4603      	mov	r3, r0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e013      	b.n	8006136 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d110      	bne.n	8006136 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	b29a      	uxth	r2, r3
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f001 faaa 	bl	8007680 <xTaskCreate>
 800612c:	4603      	mov	r3, r0
 800612e:	2b01      	cmp	r3, #1
 8006130:	d001      	beq.n	8006136 <osThreadNew+0x11a>
            hTask = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006136:	693b      	ldr	r3, [r7, #16]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3728      	adds	r7, #40	@ 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006148:	f3ef 8305 	mrs	r3, IPSR
 800614c:	60bb      	str	r3, [r7, #8]
  return(result);
 800614e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <osDelay+0x1c>
    stat = osErrorISR;
 8006154:	f06f 0305 	mvn.w	r3, #5
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e007      	b.n	800616c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fbe8 	bl	800793c <vTaskDelay>
    }
  }

  return (stat);
 800616c:	68fb      	ldr	r3, [r7, #12]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a07      	ldr	r2, [pc, #28]	@ (80061a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4a06      	ldr	r2, [pc, #24]	@ (80061a8 <vApplicationGetIdleTaskMemory+0x30>)
 800618e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2280      	movs	r2, #128	@ 0x80
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	24000334 	.word	0x24000334
 80061a8:	240003dc 	.word	0x240003dc

080061ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a07      	ldr	r2, [pc, #28]	@ (80061d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80061bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4a06      	ldr	r2, [pc, #24]	@ (80061dc <vApplicationGetTimerTaskMemory+0x30>)
 80061c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061ca:	601a      	str	r2, [r3, #0]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	240005dc 	.word	0x240005dc
 80061dc:	24000684 	.word	0x24000684

080061e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	@ 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061ec:	f001 fc4c 	bl	8007a88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061f0:	4b5c      	ldr	r3, [pc, #368]	@ (8006364 <pvPortMalloc+0x184>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061f8:	f000 f924 	bl	8006444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006368 <pvPortMalloc+0x188>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4013      	ands	r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 8095 	bne.w	8006334 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01e      	beq.n	800624e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006210:	2208      	movs	r2, #8
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	2b00      	cmp	r3, #0
 8006220:	d015      	beq.n	800624e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f023 0307 	bic.w	r3, r3, #7
 8006228:	3308      	adds	r3, #8
 800622a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	e7fd      	b.n	800624a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d06f      	beq.n	8006334 <pvPortMalloc+0x154>
 8006254:	4b45      	ldr	r3, [pc, #276]	@ (800636c <pvPortMalloc+0x18c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d86a      	bhi.n	8006334 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800625e:	4b44      	ldr	r3, [pc, #272]	@ (8006370 <pvPortMalloc+0x190>)
 8006260:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006262:	4b43      	ldr	r3, [pc, #268]	@ (8006370 <pvPortMalloc+0x190>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006268:	e004      	b.n	8006274 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	429a      	cmp	r2, r3
 800627c:	d903      	bls.n	8006286 <pvPortMalloc+0xa6>
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f1      	bne.n	800626a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006286:	4b37      	ldr	r3, [pc, #220]	@ (8006364 <pvPortMalloc+0x184>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800628c:	429a      	cmp	r2, r3
 800628e:	d051      	beq.n	8006334 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2208      	movs	r2, #8
 8006296:	4413      	add	r3, r2
 8006298:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	1ad2      	subs	r2, r2, r3
 80062aa:	2308      	movs	r3, #8
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d920      	bls.n	80062f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4413      	add	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <pvPortMalloc+0xfc>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	613b      	str	r3, [r7, #16]
}
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
 80062da:	e7fd      	b.n	80062d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	1ad2      	subs	r2, r2, r3
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062ee:	69b8      	ldr	r0, [r7, #24]
 80062f0:	f000 f90a 	bl	8006508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062f4:	4b1d      	ldr	r3, [pc, #116]	@ (800636c <pvPortMalloc+0x18c>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	4a1b      	ldr	r2, [pc, #108]	@ (800636c <pvPortMalloc+0x18c>)
 8006300:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006302:	4b1a      	ldr	r3, [pc, #104]	@ (800636c <pvPortMalloc+0x18c>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b1b      	ldr	r3, [pc, #108]	@ (8006374 <pvPortMalloc+0x194>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d203      	bcs.n	8006316 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800630e:	4b17      	ldr	r3, [pc, #92]	@ (800636c <pvPortMalloc+0x18c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a18      	ldr	r2, [pc, #96]	@ (8006374 <pvPortMalloc+0x194>)
 8006314:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	4b13      	ldr	r3, [pc, #76]	@ (8006368 <pvPortMalloc+0x188>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	431a      	orrs	r2, r3
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800632a:	4b13      	ldr	r3, [pc, #76]	@ (8006378 <pvPortMalloc+0x198>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	4a11      	ldr	r2, [pc, #68]	@ (8006378 <pvPortMalloc+0x198>)
 8006332:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006334:	f001 fbb6 	bl	8007aa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <pvPortMalloc+0x17a>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60fb      	str	r3, [r7, #12]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <pvPortMalloc+0x176>
	return pvReturn;
 800635a:	69fb      	ldr	r3, [r7, #28]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3728      	adds	r7, #40	@ 0x28
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	2400468c 	.word	0x2400468c
 8006368:	240046a0 	.word	0x240046a0
 800636c:	24004690 	.word	0x24004690
 8006370:	24004684 	.word	0x24004684
 8006374:	24004694 	.word	0x24004694
 8006378:	24004698 	.word	0x24004698

0800637c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d04f      	beq.n	800642e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800638e:	2308      	movs	r3, #8
 8006390:	425b      	negs	r3, r3
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4413      	add	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	4b25      	ldr	r3, [pc, #148]	@ (8006438 <vPortFree+0xbc>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10b      	bne.n	80063c2 <vPortFree+0x46>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	60fb      	str	r3, [r7, #12]
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	e7fd      	b.n	80063be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <vPortFree+0x66>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	60bb      	str	r3, [r7, #8]
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	e7fd      	b.n	80063de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	4b14      	ldr	r3, [pc, #80]	@ (8006438 <vPortFree+0xbc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01e      	beq.n	800642e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11a      	bne.n	800642e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006438 <vPortFree+0xbc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	43db      	mvns	r3, r3
 8006402:	401a      	ands	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006408:	f001 fb3e 	bl	8007a88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	4b0a      	ldr	r3, [pc, #40]	@ (800643c <vPortFree+0xc0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4413      	add	r3, r2
 8006416:	4a09      	ldr	r2, [pc, #36]	@ (800643c <vPortFree+0xc0>)
 8006418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f000 f874 	bl	8006508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006420:	4b07      	ldr	r3, [pc, #28]	@ (8006440 <vPortFree+0xc4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	4a06      	ldr	r2, [pc, #24]	@ (8006440 <vPortFree+0xc4>)
 8006428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800642a:	f001 fb3b 	bl	8007aa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800642e:	bf00      	nop
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	240046a0 	.word	0x240046a0
 800643c:	24004690 	.word	0x24004690
 8006440:	2400469c 	.word	0x2400469c

08006444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800644a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800644e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006450:	4b27      	ldr	r3, [pc, #156]	@ (80064f0 <prvHeapInit+0xac>)
 8006452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00c      	beq.n	8006478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3307      	adds	r3, #7
 8006462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0307 	bic.w	r3, r3, #7
 800646a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	4a1f      	ldr	r2, [pc, #124]	@ (80064f0 <prvHeapInit+0xac>)
 8006474:	4413      	add	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800647c:	4a1d      	ldr	r2, [pc, #116]	@ (80064f4 <prvHeapInit+0xb0>)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006482:	4b1c      	ldr	r3, [pc, #112]	@ (80064f4 <prvHeapInit+0xb0>)
 8006484:	2200      	movs	r2, #0
 8006486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	4413      	add	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006490:	2208      	movs	r2, #8
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0307 	bic.w	r3, r3, #7
 800649e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a15      	ldr	r2, [pc, #84]	@ (80064f8 <prvHeapInit+0xb4>)
 80064a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064a6:	4b14      	ldr	r3, [pc, #80]	@ (80064f8 <prvHeapInit+0xb4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064ae:	4b12      	ldr	r3, [pc, #72]	@ (80064f8 <prvHeapInit+0xb4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	1ad2      	subs	r2, r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064c4:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <prvHeapInit+0xb4>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	@ (80064fc <prvHeapInit+0xb8>)
 80064d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	4a09      	ldr	r2, [pc, #36]	@ (8006500 <prvHeapInit+0xbc>)
 80064da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064dc:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <prvHeapInit+0xc0>)
 80064de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064e2:	601a      	str	r2, [r3, #0]
}
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	24000a84 	.word	0x24000a84
 80064f4:	24004684 	.word	0x24004684
 80064f8:	2400468c 	.word	0x2400468c
 80064fc:	24004694 	.word	0x24004694
 8006500:	24004690 	.word	0x24004690
 8006504:	240046a0 	.word	0x240046a0

08006508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006510:	4b28      	ldr	r3, [pc, #160]	@ (80065b4 <prvInsertBlockIntoFreeList+0xac>)
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	e002      	b.n	800651c <prvInsertBlockIntoFreeList+0x14>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	429a      	cmp	r2, r3
 8006524:	d8f7      	bhi.n	8006516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4413      	add	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d108      	bne.n	800654a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	441a      	add	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	441a      	add	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d118      	bne.n	8006590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b15      	ldr	r3, [pc, #84]	@ (80065b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d00d      	beq.n	8006586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	441a      	add	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e008      	b.n	8006598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006586:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e003      	b.n	8006598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	429a      	cmp	r2, r3
 800659e:	d002      	beq.n	80065a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	24004684 	.word	0x24004684
 80065b8:	2400468c 	.word	0x2400468c

080065bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f103 0208 	add.w	r2, r3, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f04f 32ff 	mov.w	r2, #4294967295
 80065d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f103 0208 	add.w	r2, r3, #8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f103 0208 	add.w	r2, r3, #8
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d103      	bne.n	800667e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e00c      	b.n	8006698 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3308      	adds	r3, #8
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e002      	b.n	800668c <vListInsert+0x2e>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	d2f6      	bcs.n	8006686 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]
}
 80066c4:	bf00      	nop
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6892      	ldr	r2, [r2, #8]
 80066e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6852      	ldr	r2, [r2, #4]
 80066f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d103      	bne.n	8006704 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	1e5a      	subs	r2, r3, #1
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3b04      	subs	r3, #4
 8006734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800673c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3b04      	subs	r3, #4
 8006742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f023 0201 	bic.w	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3b04      	subs	r3, #4
 8006752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006754:	4a0c      	ldr	r2, [pc, #48]	@ (8006788 <pxPortInitialiseStack+0x64>)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b14      	subs	r3, #20
 800675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3b04      	subs	r3, #4
 800676a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f06f 0202 	mvn.w	r2, #2
 8006772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3b20      	subs	r3, #32
 8006778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800677a:	68fb      	ldr	r3, [r7, #12]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	0800678d 	.word	0x0800678d

0800678c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <prvTaskExitError+0x58>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	d00b      	beq.n	80067b8 <prvTaskExitError+0x2c>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <prvTaskExitError+0x28>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60bb      	str	r3, [r7, #8]
}
 80067ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067cc:	bf00      	nop
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0fc      	beq.n	80067ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	24000010 	.word	0x24000010
	...

080067f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067f0:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <pxCurrentTCBConst2>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	f380 8809 	msr	PSP, r0
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	4770      	bx	lr
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst2>:
 8006810:	240046ec 	.word	0x240046ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006818:	4808      	ldr	r0, [pc, #32]	@ (800683c <prvPortStartFirstTask+0x24>)
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f380 8808 	msr	MSP, r0
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8814 	msr	CONTROL, r0
 800682a:	b662      	cpsie	i
 800682c:	b661      	cpsie	f
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	df00      	svc	0
 8006838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800683a:	bf00      	nop
 800683c:	e000ed08 	.word	0xe000ed08

08006840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006846:	4b47      	ldr	r3, [pc, #284]	@ (8006964 <xPortStartScheduler+0x124>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a47      	ldr	r2, [pc, #284]	@ (8006968 <xPortStartScheduler+0x128>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10b      	bne.n	8006868 <xPortStartScheduler+0x28>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	613b      	str	r3, [r7, #16]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006868:	4b3e      	ldr	r3, [pc, #248]	@ (8006964 <xPortStartScheduler+0x124>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a3f      	ldr	r2, [pc, #252]	@ (800696c <xPortStartScheduler+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d10b      	bne.n	800688a <xPortStartScheduler+0x4a>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	60fb      	str	r3, [r7, #12]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800688a:	4b39      	ldr	r3, [pc, #228]	@ (8006970 <xPortStartScheduler+0x130>)
 800688c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	22ff      	movs	r2, #255	@ 0xff
 800689a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4b31      	ldr	r3, [pc, #196]	@ (8006974 <xPortStartScheduler+0x134>)
 80068b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068b2:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <xPortStartScheduler+0x138>)
 80068b4:	2207      	movs	r2, #7
 80068b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b8:	e009      	b.n	80068ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80068ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006978 <xPortStartScheduler+0x138>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3b01      	subs	r3, #1
 80068c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006978 <xPortStartScheduler+0x138>)
 80068c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d6:	2b80      	cmp	r3, #128	@ 0x80
 80068d8:	d0ef      	beq.n	80068ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068da:	4b27      	ldr	r3, [pc, #156]	@ (8006978 <xPortStartScheduler+0x138>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1c3 0307 	rsb	r3, r3, #7
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d00b      	beq.n	80068fe <xPortStartScheduler+0xbe>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60bb      	str	r3, [r7, #8]
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	e7fd      	b.n	80068fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006978 <xPortStartScheduler+0x138>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	4a1c      	ldr	r2, [pc, #112]	@ (8006978 <xPortStartScheduler+0x138>)
 8006906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006908:	4b1b      	ldr	r3, [pc, #108]	@ (8006978 <xPortStartScheduler+0x138>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006910:	4a19      	ldr	r2, [pc, #100]	@ (8006978 <xPortStartScheduler+0x138>)
 8006912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800691c:	4b17      	ldr	r3, [pc, #92]	@ (800697c <xPortStartScheduler+0x13c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a16      	ldr	r2, [pc, #88]	@ (800697c <xPortStartScheduler+0x13c>)
 8006922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006928:	4b14      	ldr	r3, [pc, #80]	@ (800697c <xPortStartScheduler+0x13c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a13      	ldr	r2, [pc, #76]	@ (800697c <xPortStartScheduler+0x13c>)
 800692e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006934:	f000 f8da 	bl	8006aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006938:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <xPortStartScheduler+0x140>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800693e:	f000 f8f9 	bl	8006b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006942:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <xPortStartScheduler+0x144>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a0f      	ldr	r2, [pc, #60]	@ (8006984 <xPortStartScheduler+0x144>)
 8006948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800694c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800694e:	f7ff ff63 	bl	8006818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006952:	f001 fa0f 	bl	8007d74 <vTaskSwitchContext>
	prvTaskExitError();
 8006956:	f7ff ff19 	bl	800678c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	e000ed00 	.word	0xe000ed00
 8006968:	410fc271 	.word	0x410fc271
 800696c:	410fc270 	.word	0x410fc270
 8006970:	e000e400 	.word	0xe000e400
 8006974:	240046a4 	.word	0x240046a4
 8006978:	240046a8 	.word	0x240046a8
 800697c:	e000ed20 	.word	0xe000ed20
 8006980:	24000010 	.word	0x24000010
 8006984:	e000ef34 	.word	0xe000ef34

08006988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069a2:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a0e      	ldr	r2, [pc, #56]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ac:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d110      	bne.n	80069d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069b4:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <vPortEnterCritical+0x60>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	603b      	str	r3, [r7, #0]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <vPortEnterCritical+0x4a>
	}
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	24000010 	.word	0x24000010
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069f2:	4b12      	ldr	r3, [pc, #72]	@ (8006a3c <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <vPortExitCritical+0x26>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	607b      	str	r3, [r7, #4]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	4a08      	ldr	r2, [pc, #32]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a1c:	4b07      	ldr	r3, [pc, #28]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <vPortExitCritical+0x44>
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	24000010 	.word	0x24000010

08006a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a40:	f3ef 8009 	mrs	r0, PSP
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <pxCurrentTCBConst>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f01e 0f10 	tst.w	lr, #16
 8006a50:	bf08      	it	eq
 8006a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	6010      	str	r0, [r2, #0]
 8006a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a64:	f380 8811 	msr	BASEPRI, r0
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f001 f980 	bl	8007d74 <vTaskSwitchContext>
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f380 8811 	msr	BASEPRI, r0
 8006a7c:	bc09      	pop	{r0, r3}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a86:	f01e 0f10 	tst.w	lr, #16
 8006a8a:	bf08      	it	eq
 8006a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a90:	f380 8809 	msr	PSP, r0
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w

08006aa0 <pxCurrentTCBConst>:
 8006aa0:	240046ec 	.word	0x240046ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop

08006aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ac2:	f001 f89d 	bl	8007c00 <xTaskIncrementTick>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006acc:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <xPortSysTickHandler+0x40>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f383 8811 	msr	BASEPRI, r3
}
 8006ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006af0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b24 <vPortSetupTimerInterrupt+0x38>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <vPortSetupTimerInterrupt+0x3c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <vPortSetupTimerInterrupt+0x40>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	4a09      	ldr	r2, [pc, #36]	@ (8006b30 <vPortSetupTimerInterrupt+0x44>)
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b0e:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	e000e010 	.word	0xe000e010
 8006b24:	e000e018 	.word	0xe000e018
 8006b28:	24000000 	.word	0x24000000
 8006b2c:	10624dd3 	.word	0x10624dd3
 8006b30:	e000e014 	.word	0xe000e014

08006b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b44 <vPortEnableVFP+0x10>
 8006b38:	6801      	ldr	r1, [r0, #0]
 8006b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b3e:	6001      	str	r1, [r0, #0]
 8006b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b42:	bf00      	nop
 8006b44:	e000ed88 	.word	0xe000ed88

08006b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b4e:	f3ef 8305 	mrs	r3, IPSR
 8006b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d915      	bls.n	8006b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b5a:	4a18      	ldr	r2, [pc, #96]	@ (8006bbc <vPortValidateInterruptPriority+0x74>)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b64:	4b16      	ldr	r3, [pc, #88]	@ (8006bc0 <vPortValidateInterruptPriority+0x78>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	7afa      	ldrb	r2, [r7, #11]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d20b      	bcs.n	8006b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	607b      	str	r3, [r7, #4]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b86:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc4 <vPortValidateInterruptPriority+0x7c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc8 <vPortValidateInterruptPriority+0x80>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d90b      	bls.n	8006bae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	603b      	str	r3, [r7, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	e7fd      	b.n	8006baa <vPortValidateInterruptPriority+0x62>
	}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	e000e3f0 	.word	0xe000e3f0
 8006bc0:	240046a4 	.word	0x240046a4
 8006bc4:	e000ed0c 	.word	0xe000ed0c
 8006bc8:	240046a8 	.word	0x240046a8

08006bcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10b      	bne.n	8006bf8 <xQueueGenericReset+0x2c>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60bb      	str	r3, [r7, #8]
}
 8006bf2:	bf00      	nop
 8006bf4:	bf00      	nop
 8006bf6:	e7fd      	b.n	8006bf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006bf8:	f7ff fec6 	bl	8006988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c04:	68f9      	ldr	r1, [r7, #12]
 8006c06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c08:	fb01 f303 	mul.w	r3, r1, r3
 8006c0c:	441a      	add	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	441a      	add	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	22ff      	movs	r2, #255	@ 0xff
 8006c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	22ff      	movs	r2, #255	@ 0xff
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d114      	bne.n	8006c78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01a      	beq.n	8006c8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3310      	adds	r3, #16
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 f942 	bl	8007ee4 <xTaskRemoveFromEventList>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d012      	beq.n	8006c8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c66:	4b0d      	ldr	r3, [pc, #52]	@ (8006c9c <xQueueGenericReset+0xd0>)
 8006c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	e009      	b.n	8006c8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3310      	adds	r3, #16
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff fc9d 	bl	80065bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3324      	adds	r3, #36	@ 0x24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fc98 	bl	80065bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c8c:	f7ff feae 	bl	80069ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c90:	2301      	movs	r3, #1
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08e      	sub	sp, #56	@ 0x38
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10b      	bne.n	8006ccc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10b      	bne.n	8006cea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	e7fd      	b.n	8006ce6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <xQueueGenericCreateStatic+0x56>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <xQueueGenericCreateStatic+0x5a>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <xQueueGenericCreateStatic+0x5c>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	623b      	str	r3, [r7, #32]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d102      	bne.n	8006d24 <xQueueGenericCreateStatic+0x84>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <xQueueGenericCreateStatic+0x88>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <xQueueGenericCreateStatic+0x8a>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	61fb      	str	r3, [r7, #28]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d46:	2350      	movs	r3, #80	@ 0x50
 8006d48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b50      	cmp	r3, #80	@ 0x50
 8006d4e:	d00b      	beq.n	8006d68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	61bb      	str	r3, [r7, #24]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00d      	beq.n	8006d90 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d7c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f805 	bl	8006d9a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3730      	adds	r7, #48	@ 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	e002      	b.n	8006dbc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dc8:	2101      	movs	r1, #1
 8006dca:	69b8      	ldr	r0, [r7, #24]
 8006dcc:	f7ff fefe 	bl	8006bcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	78fa      	ldrb	r2, [r7, #3]
 8006dd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08e      	sub	sp, #56	@ 0x38
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006dee:	2300      	movs	r3, #0
 8006df0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <xQueueGenericSend+0x34>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <xQueueGenericSend+0x42>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <xQueueGenericSend+0x46>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <xQueueGenericSend+0x48>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <xQueueGenericSend+0x64>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d103      	bne.n	8006e52 <xQueueGenericSend+0x72>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <xQueueGenericSend+0x76>
 8006e52:	2301      	movs	r3, #1
 8006e54:	e000      	b.n	8006e58 <xQueueGenericSend+0x78>
 8006e56:	2300      	movs	r3, #0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10b      	bne.n	8006e74 <xQueueGenericSend+0x94>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	623b      	str	r3, [r7, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	bf00      	nop
 8006e72:	e7fd      	b.n	8006e70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e74:	f001 f9fc 	bl	8008270 <xTaskGetSchedulerState>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d102      	bne.n	8006e84 <xQueueGenericSend+0xa4>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <xQueueGenericSend+0xa8>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <xQueueGenericSend+0xaa>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <xQueueGenericSend+0xc6>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	61fb      	str	r3, [r7, #28]
}
 8006ea0:	bf00      	nop
 8006ea2:	bf00      	nop
 8006ea4:	e7fd      	b.n	8006ea2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ea6:	f7ff fd6f 	bl	8006988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <xQueueGenericSend+0xdc>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d129      	bne.n	8006f10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	68b9      	ldr	r1, [r7, #8]
 8006ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ec2:	f000 fa0f 	bl	80072e4 <prvCopyDataToQueue>
 8006ec6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d010      	beq.n	8006ef2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed2:	3324      	adds	r3, #36	@ 0x24
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f001 f805 	bl	8007ee4 <xTaskRemoveFromEventList>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d013      	beq.n	8006f08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe0 <xQueueGenericSend+0x200>)
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	e00a      	b.n	8006f08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d007      	beq.n	8006f08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ef8:	4b39      	ldr	r3, [pc, #228]	@ (8006fe0 <xQueueGenericSend+0x200>)
 8006efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f08:	f7ff fd70 	bl	80069ec <vPortExitCritical>
				return pdPASS;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e063      	b.n	8006fd8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f16:	f7ff fd69 	bl	80069ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e05c      	b.n	8006fd8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f24:	f107 0314 	add.w	r3, r7, #20
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 f83f 	bl	8007fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f32:	f7ff fd5b 	bl	80069ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f36:	f000 fda7 	bl	8007a88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f3a:	f7ff fd25 	bl	8006988 <vPortEnterCritical>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f44:	b25b      	sxtb	r3, r3
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	d103      	bne.n	8006f54 <xQueueGenericSend+0x174>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f5a:	b25b      	sxtb	r3, r3
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d103      	bne.n	8006f6a <xQueueGenericSend+0x18a>
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f6a:	f7ff fd3f 	bl	80069ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f6e:	1d3a      	adds	r2, r7, #4
 8006f70:	f107 0314 	add.w	r3, r7, #20
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 f82e 	bl	8007fd8 <xTaskCheckForTimeOut>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d124      	bne.n	8006fcc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f84:	f000 faa6 	bl	80074d4 <prvIsQueueFull>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d018      	beq.n	8006fc0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	3310      	adds	r3, #16
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4611      	mov	r1, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 ff52 	bl	8007e40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f9e:	f000 fa31 	bl	8007404 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fa2:	f000 fd7f 	bl	8007aa4 <xTaskResumeAll>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f47f af7c 	bne.w	8006ea6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006fae:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <xQueueGenericSend+0x200>)
 8006fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	e772      	b.n	8006ea6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fc2:	f000 fa1f 	bl	8007404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fc6:	f000 fd6d 	bl	8007aa4 <xTaskResumeAll>
 8006fca:	e76c      	b.n	8006ea6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fce:	f000 fa19 	bl	8007404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fd2:	f000 fd67 	bl	8007aa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3738      	adds	r7, #56	@ 0x38
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b090      	sub	sp, #64	@ 0x40
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <xQueueGenericSendFromISR+0x3e>
 800701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <xQueueGenericSendFromISR+0x42>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueGenericSendFromISR+0x44>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800703e:	bf00      	nop
 8007040:	bf00      	nop
 8007042:	e7fd      	b.n	8007040 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d103      	bne.n	8007052 <xQueueGenericSendFromISR+0x6e>
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <xQueueGenericSendFromISR+0x72>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueGenericSendFromISR+0x74>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
}
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	e7fd      	b.n	8007070 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007074:	f7ff fd68 	bl	8006b48 <vPortValidateInterruptPriority>
	__asm volatile
 8007078:	f3ef 8211 	mrs	r2, BASEPRI
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	61fa      	str	r2, [r7, #28]
 800708e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007090:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709c:	429a      	cmp	r2, r3
 800709e:	d302      	bcc.n	80070a6 <xQueueGenericSendFromISR+0xc2>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d12f      	bne.n	8007106 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070bc:	f000 f912 	bl	80072e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d112      	bne.n	80070f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d016      	beq.n	8007100 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d4:	3324      	adds	r3, #36	@ 0x24
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 ff04 	bl	8007ee4 <xTaskRemoveFromEventList>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	e007      	b.n	8007100 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80070f4:	3301      	adds	r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	b25a      	sxtb	r2, r3
 80070fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007100:	2301      	movs	r3, #1
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007104:	e001      	b.n	800710a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007106:	2300      	movs	r3, #0
 8007108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800710a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f383 8811 	msr	BASEPRI, r3
}
 8007114:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007118:	4618      	mov	r0, r3
 800711a:	3740      	adds	r7, #64	@ 0x40
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08c      	sub	sp, #48	@ 0x30
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800712c:	2300      	movs	r3, #0
 800712e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10b      	bne.n	8007152 <xQueueReceive+0x32>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	623b      	str	r3, [r7, #32]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <xQueueReceive+0x40>
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <xQueueReceive+0x44>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <xQueueReceive+0x46>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10b      	bne.n	8007182 <xQueueReceive+0x62>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	61fb      	str	r3, [r7, #28]
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	e7fd      	b.n	800717e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007182:	f001 f875 	bl	8008270 <xTaskGetSchedulerState>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <xQueueReceive+0x72>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <xQueueReceive+0x76>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <xQueueReceive+0x78>
 8007196:	2300      	movs	r3, #0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <xQueueReceive+0x94>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	61bb      	str	r3, [r7, #24]
}
 80071ae:	bf00      	nop
 80071b0:	bf00      	nop
 80071b2:	e7fd      	b.n	80071b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071b4:	f7ff fbe8 	bl	8006988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01f      	beq.n	8007204 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c8:	f000 f8f6 	bl	80073b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	1e5a      	subs	r2, r3, #1
 80071d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00f      	beq.n	80071fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	3310      	adds	r3, #16
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fe7f 	bl	8007ee4 <xTaskRemoveFromEventList>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071ec:	4b3c      	ldr	r3, [pc, #240]	@ (80072e0 <xQueueReceive+0x1c0>)
 80071ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071fc:	f7ff fbf6 	bl	80069ec <vPortExitCritical>
				return pdPASS;
 8007200:	2301      	movs	r3, #1
 8007202:	e069      	b.n	80072d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800720a:	f7ff fbef 	bl	80069ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800720e:	2300      	movs	r3, #0
 8007210:	e062      	b.n	80072d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007218:	f107 0310 	add.w	r3, r7, #16
 800721c:	4618      	mov	r0, r3
 800721e:	f000 fec5 	bl	8007fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007226:	f7ff fbe1 	bl	80069ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800722a:	f000 fc2d 	bl	8007a88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800722e:	f7ff fbab 	bl	8006988 <vPortEnterCritical>
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007238:	b25b      	sxtb	r3, r3
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d103      	bne.n	8007248 <xQueueReceive+0x128>
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800724e:	b25b      	sxtb	r3, r3
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d103      	bne.n	800725e <xQueueReceive+0x13e>
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800725e:	f7ff fbc5 	bl	80069ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007262:	1d3a      	adds	r2, r7, #4
 8007264:	f107 0310 	add.w	r3, r7, #16
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f000 feb4 	bl	8007fd8 <xTaskCheckForTimeOut>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d123      	bne.n	80072be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007278:	f000 f916 	bl	80074a8 <prvIsQueueEmpty>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d017      	beq.n	80072b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	3324      	adds	r3, #36	@ 0x24
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fdd8 	bl	8007e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007292:	f000 f8b7 	bl	8007404 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007296:	f000 fc05 	bl	8007aa4 <xTaskResumeAll>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d189      	bne.n	80071b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80072a0:	4b0f      	ldr	r3, [pc, #60]	@ (80072e0 <xQueueReceive+0x1c0>)
 80072a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	e780      	b.n	80071b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072b4:	f000 f8a6 	bl	8007404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072b8:	f000 fbf4 	bl	8007aa4 <xTaskResumeAll>
 80072bc:	e77a      	b.n	80071b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072c0:	f000 f8a0 	bl	8007404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c4:	f000 fbee 	bl	8007aa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072ca:	f000 f8ed 	bl	80074a8 <prvIsQueueEmpty>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f43f af6f 	beq.w	80071b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3730      	adds	r7, #48	@ 0x30
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10d      	bne.n	800731e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d14d      	bne.n	80073a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 ffcc 	bl	80082ac <xTaskPriorityDisinherit>
 8007314:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	e043      	b.n	80073a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d119      	bne.n	8007358 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6858      	ldr	r0, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732c:	461a      	mov	r2, r3
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	f002 f9ff 	bl	8009732 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733c:	441a      	add	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d32b      	bcc.n	80073a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	605a      	str	r2, [r3, #4]
 8007356:	e026      	b.n	80073a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68d8      	ldr	r0, [r3, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007360:	461a      	mov	r2, r3
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	f002 f9e5 	bl	8009732 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007370:	425b      	negs	r3, r3
 8007372:	441a      	add	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d207      	bcs.n	8007394 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738c:	425b      	negs	r3, r3
 800738e:	441a      	add	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d105      	bne.n	80073a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80073ae:	697b      	ldr	r3, [r7, #20]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d018      	beq.n	80073fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	441a      	add	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d303      	bcc.n	80073ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68d9      	ldr	r1, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	461a      	mov	r2, r3
 80073f6:	6838      	ldr	r0, [r7, #0]
 80073f8:	f002 f99b 	bl	8009732 <memcpy>
	}
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800740c:	f7ff fabc 	bl	8006988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007416:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007418:	e011      	b.n	800743e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741e:	2b00      	cmp	r3, #0
 8007420:	d012      	beq.n	8007448 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3324      	adds	r3, #36	@ 0x24
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fd5c 	bl	8007ee4 <xTaskRemoveFromEventList>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007432:	f000 fe35 	bl	80080a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	3b01      	subs	r3, #1
 800743a:	b2db      	uxtb	r3, r3
 800743c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800743e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	dce9      	bgt.n	800741a <prvUnlockQueue+0x16>
 8007446:	e000      	b.n	800744a <prvUnlockQueue+0x46>
					break;
 8007448:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	22ff      	movs	r2, #255	@ 0xff
 800744e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007452:	f7ff facb 	bl	80069ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007456:	f7ff fa97 	bl	8006988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007460:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007462:	e011      	b.n	8007488 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d012      	beq.n	8007492 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3310      	adds	r3, #16
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fd37 	bl	8007ee4 <xTaskRemoveFromEventList>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800747c:	f000 fe10 	bl	80080a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	3b01      	subs	r3, #1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	dce9      	bgt.n	8007464 <prvUnlockQueue+0x60>
 8007490:	e000      	b.n	8007494 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007492:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	22ff      	movs	r2, #255	@ 0xff
 8007498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800749c:	f7ff faa6 	bl	80069ec <vPortExitCritical>
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074b0:	f7ff fa6a 	bl	8006988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d102      	bne.n	80074c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074bc:	2301      	movs	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	e001      	b.n	80074c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074c6:	f7ff fa91 	bl	80069ec <vPortExitCritical>

	return xReturn;
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074dc:	f7ff fa54 	bl	8006988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d102      	bne.n	80074f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074ec:	2301      	movs	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e001      	b.n	80074f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074f6:	f7ff fa79 	bl	80069ec <vPortExitCritical>

	return xReturn;
 80074fa:	68fb      	ldr	r3, [r7, #12]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	e014      	b.n	800753e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007514:	4a0f      	ldr	r2, [pc, #60]	@ (8007554 <vQueueAddToRegistry+0x50>)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10b      	bne.n	8007538 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007520:	490c      	ldr	r1, [pc, #48]	@ (8007554 <vQueueAddToRegistry+0x50>)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800752a:	4a0a      	ldr	r2, [pc, #40]	@ (8007554 <vQueueAddToRegistry+0x50>)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	4413      	add	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007536:	e006      	b.n	8007546 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b07      	cmp	r3, #7
 8007542:	d9e7      	bls.n	8007514 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	240046ac 	.word	0x240046ac

08007558 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007568:	f7ff fa0e 	bl	8006988 <vPortEnterCritical>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007572:	b25b      	sxtb	r3, r3
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007578:	d103      	bne.n	8007582 <vQueueWaitForMessageRestricted+0x2a>
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007588:	b25b      	sxtb	r3, r3
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d103      	bne.n	8007598 <vQueueWaitForMessageRestricted+0x40>
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007598:	f7ff fa28 	bl	80069ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d106      	bne.n	80075b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	3324      	adds	r3, #36	@ 0x24
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fc6d 	bl	8007e8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075b2:	6978      	ldr	r0, [r7, #20]
 80075b4:	f7ff ff26 	bl	8007404 <prvUnlockQueue>
	}
 80075b8:	bf00      	nop
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08e      	sub	sp, #56	@ 0x38
 80075c4:	af04      	add	r7, sp, #16
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10b      	bne.n	80075ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	623b      	str	r3, [r7, #32]
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	e7fd      	b.n	80075e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10b      	bne.n	800760a <xTaskCreateStatic+0x4a>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	61fb      	str	r3, [r7, #28]
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	e7fd      	b.n	8007606 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800760a:	23a8      	movs	r3, #168	@ 0xa8
 800760c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2ba8      	cmp	r3, #168	@ 0xa8
 8007612:	d00b      	beq.n	800762c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	61bb      	str	r3, [r7, #24]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800762c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800762e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01e      	beq.n	8007672 <xTaskCreateStatic+0xb2>
 8007634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01b      	beq.n	8007672 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007642:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	2202      	movs	r2, #2
 8007648:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800764c:	2300      	movs	r3, #0
 800764e:	9303      	str	r3, [sp, #12]
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	9302      	str	r3, [sp, #8]
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 f851 	bl	800770c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800766a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800766c:	f000 f8f6 	bl	800785c <prvAddNewTaskToReadyList>
 8007670:	e001      	b.n	8007676 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007676:	697b      	ldr	r3, [r7, #20]
	}
 8007678:	4618      	mov	r0, r3
 800767a:	3728      	adds	r7, #40	@ 0x28
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08c      	sub	sp, #48	@ 0x30
 8007684:	af04      	add	r7, sp, #16
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	4613      	mov	r3, r2
 800768e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007690:	88fb      	ldrh	r3, [r7, #6]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe fda3 	bl	80061e0 <pvPortMalloc>
 800769a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076a2:	20a8      	movs	r0, #168	@ 0xa8
 80076a4:	f7fe fd9c 	bl	80061e0 <pvPortMalloc>
 80076a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80076b6:	e005      	b.n	80076c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076b8:	6978      	ldr	r0, [r7, #20]
 80076ba:	f7fe fe5f 	bl	800637c <vPortFree>
 80076be:	e001      	b.n	80076c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d017      	beq.n	80076fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076d2:	88fa      	ldrh	r2, [r7, #6]
 80076d4:	2300      	movs	r3, #0
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	9302      	str	r3, [sp, #8]
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f80f 	bl	800770c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ee:	69f8      	ldr	r0, [r7, #28]
 80076f0:	f000 f8b4 	bl	800785c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076f4:	2301      	movs	r3, #1
 80076f6:	61bb      	str	r3, [r7, #24]
 80076f8:	e002      	b.n	8007700 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295
 80076fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007700:	69bb      	ldr	r3, [r7, #24]
	}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	461a      	mov	r2, r3
 8007724:	21a5      	movs	r1, #165	@ 0xa5
 8007726:	f001 ff2e 	bl	8009586 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007734:	440b      	add	r3, r1
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f023 0307 	bic.w	r3, r3, #7
 8007742:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	617b      	str	r3, [r7, #20]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01f      	beq.n	80077ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e012      	b.n	8007798 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	7819      	ldrb	r1, [r3, #0]
 800777a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	4413      	add	r3, r2
 8007780:	3334      	adds	r3, #52	@ 0x34
 8007782:	460a      	mov	r2, r1
 8007784:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d006      	beq.n	80077a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	3301      	adds	r3, #1
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	2b0f      	cmp	r3, #15
 800779c:	d9e9      	bls.n	8007772 <prvInitialiseNewTask+0x66>
 800779e:	e000      	b.n	80077a2 <prvInitialiseNewTask+0x96>
			{
				break;
 80077a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077aa:	e003      	b.n	80077b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b6:	2b37      	cmp	r3, #55	@ 0x37
 80077b8:	d901      	bls.n	80077be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077ba:	2337      	movs	r3, #55	@ 0x37
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	2200      	movs	r2, #0
 80077ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	3304      	adds	r3, #4
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe ff11 	bl	80065fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	3318      	adds	r3, #24
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe ff0c 	bl	80065fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	2200      	movs	r2, #0
 8007806:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	3354      	adds	r3, #84	@ 0x54
 800780e:	224c      	movs	r2, #76	@ 0x4c
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f001 feb7 	bl	8009586 <memset>
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	4a0d      	ldr	r2, [pc, #52]	@ (8007850 <prvInitialiseNewTask+0x144>)
 800781c:	659a      	str	r2, [r3, #88]	@ 0x58
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	4a0c      	ldr	r2, [pc, #48]	@ (8007854 <prvInitialiseNewTask+0x148>)
 8007822:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	4a0c      	ldr	r2, [pc, #48]	@ (8007858 <prvInitialiseNewTask+0x14c>)
 8007828:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	68f9      	ldr	r1, [r7, #12]
 800782e:	69b8      	ldr	r0, [r7, #24]
 8007830:	f7fe ff78 	bl	8006724 <pxPortInitialiseStack>
 8007834:	4602      	mov	r2, r0
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800783a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007846:	bf00      	nop
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	24004d18 	.word	0x24004d18
 8007854:	24004d80 	.word	0x24004d80
 8007858:	24004de8 	.word	0x24004de8

0800785c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007864:	f7ff f890 	bl	8006988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007868:	4b2d      	ldr	r3, [pc, #180]	@ (8007920 <prvAddNewTaskToReadyList+0xc4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3301      	adds	r3, #1
 800786e:	4a2c      	ldr	r2, [pc, #176]	@ (8007920 <prvAddNewTaskToReadyList+0xc4>)
 8007870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007872:	4b2c      	ldr	r3, [pc, #176]	@ (8007924 <prvAddNewTaskToReadyList+0xc8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800787a:	4a2a      	ldr	r2, [pc, #168]	@ (8007924 <prvAddNewTaskToReadyList+0xc8>)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007880:	4b27      	ldr	r3, [pc, #156]	@ (8007920 <prvAddNewTaskToReadyList+0xc4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d110      	bne.n	80078aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007888:	f000 fc2e 	bl	80080e8 <prvInitialiseTaskLists>
 800788c:	e00d      	b.n	80078aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800788e:	4b26      	ldr	r3, [pc, #152]	@ (8007928 <prvAddNewTaskToReadyList+0xcc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007896:	4b23      	ldr	r3, [pc, #140]	@ (8007924 <prvAddNewTaskToReadyList+0xc8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d802      	bhi.n	80078aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007924 <prvAddNewTaskToReadyList+0xc8>)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078aa:	4b20      	ldr	r3, [pc, #128]	@ (800792c <prvAddNewTaskToReadyList+0xd0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3301      	adds	r3, #1
 80078b0:	4a1e      	ldr	r2, [pc, #120]	@ (800792c <prvAddNewTaskToReadyList+0xd0>)
 80078b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078b4:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <prvAddNewTaskToReadyList+0xd0>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007930 <prvAddNewTaskToReadyList+0xd4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d903      	bls.n	80078d0 <prvAddNewTaskToReadyList+0x74>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	4a18      	ldr	r2, [pc, #96]	@ (8007930 <prvAddNewTaskToReadyList+0xd4>)
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4a15      	ldr	r2, [pc, #84]	@ (8007934 <prvAddNewTaskToReadyList+0xd8>)
 80078de:	441a      	add	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f7fe fe95 	bl	8006616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078ec:	f7ff f87e 	bl	80069ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <prvAddNewTaskToReadyList+0xcc>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00e      	beq.n	8007916 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007924 <prvAddNewTaskToReadyList+0xc8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007902:	429a      	cmp	r2, r3
 8007904:	d207      	bcs.n	8007916 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007906:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <prvAddNewTaskToReadyList+0xdc>)
 8007908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	24004bc0 	.word	0x24004bc0
 8007924:	240046ec 	.word	0x240046ec
 8007928:	24004bcc 	.word	0x24004bcc
 800792c:	24004bdc 	.word	0x24004bdc
 8007930:	24004bc8 	.word	0x24004bc8
 8007934:	240046f0 	.word	0x240046f0
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d018      	beq.n	8007980 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800794e:	4b14      	ldr	r3, [pc, #80]	@ (80079a0 <vTaskDelay+0x64>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00b      	beq.n	800796e <vTaskDelay+0x32>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	60bb      	str	r3, [r7, #8]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800796e:	f000 f88b 	bl	8007a88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007972:	2100      	movs	r1, #0
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fd09 	bl	800838c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800797a:	f000 f893 	bl	8007aa4 <xTaskResumeAll>
 800797e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d107      	bne.n	8007996 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007986:	4b07      	ldr	r3, [pc, #28]	@ (80079a4 <vTaskDelay+0x68>)
 8007988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	24004be8 	.word	0x24004be8
 80079a4:	e000ed04 	.word	0xe000ed04

080079a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08a      	sub	sp, #40	@ 0x28
 80079ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079b6:	463a      	mov	r2, r7
 80079b8:	1d39      	adds	r1, r7, #4
 80079ba:	f107 0308 	add.w	r3, r7, #8
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fbda 	bl	8006178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	9202      	str	r2, [sp, #8]
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	2300      	movs	r3, #0
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	2300      	movs	r3, #0
 80079d4:	460a      	mov	r2, r1
 80079d6:	4924      	ldr	r1, [pc, #144]	@ (8007a68 <vTaskStartScheduler+0xc0>)
 80079d8:	4824      	ldr	r0, [pc, #144]	@ (8007a6c <vTaskStartScheduler+0xc4>)
 80079da:	f7ff fdf1 	bl	80075c0 <xTaskCreateStatic>
 80079de:	4603      	mov	r3, r0
 80079e0:	4a23      	ldr	r2, [pc, #140]	@ (8007a70 <vTaskStartScheduler+0xc8>)
 80079e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079e4:	4b22      	ldr	r3, [pc, #136]	@ (8007a70 <vTaskStartScheduler+0xc8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e001      	b.n	80079f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d102      	bne.n	8007a02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80079fc:	f000 fd1a 	bl	8008434 <xTimerCreateTimerTask>
 8007a00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d11b      	bne.n	8007a40 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	613b      	str	r3, [r7, #16]
}
 8007a1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a1c:	4b15      	ldr	r3, [pc, #84]	@ (8007a74 <vTaskStartScheduler+0xcc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3354      	adds	r3, #84	@ 0x54
 8007a22:	4a15      	ldr	r2, [pc, #84]	@ (8007a78 <vTaskStartScheduler+0xd0>)
 8007a24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a26:	4b15      	ldr	r3, [pc, #84]	@ (8007a7c <vTaskStartScheduler+0xd4>)
 8007a28:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a2e:	4b14      	ldr	r3, [pc, #80]	@ (8007a80 <vTaskStartScheduler+0xd8>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a34:	4b13      	ldr	r3, [pc, #76]	@ (8007a84 <vTaskStartScheduler+0xdc>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a3a:	f7fe ff01 	bl	8006840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a3e:	e00f      	b.n	8007a60 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d10b      	bne.n	8007a60 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	60fb      	str	r3, [r7, #12]
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <vTaskStartScheduler+0xb4>
}
 8007a60:	bf00      	nop
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	0800b3e0 	.word	0x0800b3e0
 8007a6c:	080080b9 	.word	0x080080b9
 8007a70:	24004be4 	.word	0x24004be4
 8007a74:	240046ec 	.word	0x240046ec
 8007a78:	24000020 	.word	0x24000020
 8007a7c:	24004be0 	.word	0x24004be0
 8007a80:	24004bcc 	.word	0x24004bcc
 8007a84:	24004bc4 	.word	0x24004bc4

08007a88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a8c:	4b04      	ldr	r3, [pc, #16]	@ (8007aa0 <vTaskSuspendAll+0x18>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3301      	adds	r3, #1
 8007a92:	4a03      	ldr	r2, [pc, #12]	@ (8007aa0 <vTaskSuspendAll+0x18>)
 8007a94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a96:	bf00      	nop
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	24004be8 	.word	0x24004be8

08007aa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ab2:	4b42      	ldr	r3, [pc, #264]	@ (8007bbc <xTaskResumeAll+0x118>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10b      	bne.n	8007ad2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	603b      	str	r3, [r7, #0]
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	e7fd      	b.n	8007ace <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ad2:	f7fe ff59 	bl	8006988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ad6:	4b39      	ldr	r3, [pc, #228]	@ (8007bbc <xTaskResumeAll+0x118>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	4a37      	ldr	r2, [pc, #220]	@ (8007bbc <xTaskResumeAll+0x118>)
 8007ade:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae0:	4b36      	ldr	r3, [pc, #216]	@ (8007bbc <xTaskResumeAll+0x118>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d162      	bne.n	8007bae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ae8:	4b35      	ldr	r3, [pc, #212]	@ (8007bc0 <xTaskResumeAll+0x11c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d05e      	beq.n	8007bae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007af0:	e02f      	b.n	8007b52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af2:	4b34      	ldr	r3, [pc, #208]	@ (8007bc4 <xTaskResumeAll+0x120>)
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3318      	adds	r3, #24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fde6 	bl	80066d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3304      	adds	r3, #4
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fe fde1 	bl	80066d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b12:	4b2d      	ldr	r3, [pc, #180]	@ (8007bc8 <xTaskResumeAll+0x124>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d903      	bls.n	8007b22 <xTaskResumeAll+0x7e>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8007bc8 <xTaskResumeAll+0x124>)
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4a27      	ldr	r2, [pc, #156]	@ (8007bcc <xTaskResumeAll+0x128>)
 8007b30:	441a      	add	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f7fe fd6c 	bl	8006616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b42:	4b23      	ldr	r3, [pc, #140]	@ (8007bd0 <xTaskResumeAll+0x12c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d302      	bcc.n	8007b52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007b4c:	4b21      	ldr	r3, [pc, #132]	@ (8007bd4 <xTaskResumeAll+0x130>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b52:	4b1c      	ldr	r3, [pc, #112]	@ (8007bc4 <xTaskResumeAll+0x120>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1cb      	bne.n	8007af2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b60:	f000 fb66 	bl	8008230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b64:	4b1c      	ldr	r3, [pc, #112]	@ (8007bd8 <xTaskResumeAll+0x134>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d010      	beq.n	8007b92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b70:	f000 f846 	bl	8007c00 <xTaskIncrementTick>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007b7a:	4b16      	ldr	r3, [pc, #88]	@ (8007bd4 <xTaskResumeAll+0x130>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f1      	bne.n	8007b70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007b8c:	4b12      	ldr	r3, [pc, #72]	@ (8007bd8 <xTaskResumeAll+0x134>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b92:	4b10      	ldr	r3, [pc, #64]	@ (8007bd4 <xTaskResumeAll+0x130>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007bdc <xTaskResumeAll+0x138>)
 8007ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bae:	f7fe ff1d 	bl	80069ec <vPortExitCritical>

	return xAlreadyYielded;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	24004be8 	.word	0x24004be8
 8007bc0:	24004bc0 	.word	0x24004bc0
 8007bc4:	24004b80 	.word	0x24004b80
 8007bc8:	24004bc8 	.word	0x24004bc8
 8007bcc:	240046f0 	.word	0x240046f0
 8007bd0:	240046ec 	.word	0x240046ec
 8007bd4:	24004bd4 	.word	0x24004bd4
 8007bd8:	24004bd0 	.word	0x24004bd0
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007be6:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <xTaskGetTickCount+0x1c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007bec:	687b      	ldr	r3, [r7, #4]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	24004bc4 	.word	0x24004bc4

08007c00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8007d48 <xTaskIncrementTick+0x148>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f040 8090 	bne.w	8007d34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c14:	4b4d      	ldr	r3, [pc, #308]	@ (8007d4c <xTaskIncrementTick+0x14c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8007d4c <xTaskIncrementTick+0x14c>)
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d121      	bne.n	8007c6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c28:	4b49      	ldr	r3, [pc, #292]	@ (8007d50 <xTaskIncrementTick+0x150>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00b      	beq.n	8007c4a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	603b      	str	r3, [r7, #0]
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	e7fd      	b.n	8007c46 <xTaskIncrementTick+0x46>
 8007c4a:	4b41      	ldr	r3, [pc, #260]	@ (8007d50 <xTaskIncrementTick+0x150>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	4b40      	ldr	r3, [pc, #256]	@ (8007d54 <xTaskIncrementTick+0x154>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a3e      	ldr	r2, [pc, #248]	@ (8007d50 <xTaskIncrementTick+0x150>)
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	4a3e      	ldr	r2, [pc, #248]	@ (8007d54 <xTaskIncrementTick+0x154>)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d58 <xTaskIncrementTick+0x158>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a3c      	ldr	r2, [pc, #240]	@ (8007d58 <xTaskIncrementTick+0x158>)
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	f000 fae2 	bl	8008230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8007d5c <xTaskIncrementTick+0x15c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d349      	bcc.n	8007d0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c76:	4b36      	ldr	r3, [pc, #216]	@ (8007d50 <xTaskIncrementTick+0x150>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d104      	bne.n	8007c8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c80:	4b36      	ldr	r3, [pc, #216]	@ (8007d5c <xTaskIncrementTick+0x15c>)
 8007c82:	f04f 32ff 	mov.w	r2, #4294967295
 8007c86:	601a      	str	r2, [r3, #0]
					break;
 8007c88:	e03f      	b.n	8007d0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c8a:	4b31      	ldr	r3, [pc, #196]	@ (8007d50 <xTaskIncrementTick+0x150>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d203      	bcs.n	8007caa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8007d5c <xTaskIncrementTick+0x15c>)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ca8:	e02f      	b.n	8007d0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fd0e 	bl	80066d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	3318      	adds	r3, #24
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fd05 	bl	80066d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cca:	4b25      	ldr	r3, [pc, #148]	@ (8007d60 <xTaskIncrementTick+0x160>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d903      	bls.n	8007cda <xTaskIncrementTick+0xda>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd6:	4a22      	ldr	r2, [pc, #136]	@ (8007d60 <xTaskIncrementTick+0x160>)
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8007d64 <xTaskIncrementTick+0x164>)
 8007ce8:	441a      	add	r2, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7fe fc90 	bl	8006616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8007d68 <xTaskIncrementTick+0x168>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d3b8      	bcc.n	8007c76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d04:	2301      	movs	r3, #1
 8007d06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d08:	e7b5      	b.n	8007c76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d0a:	4b17      	ldr	r3, [pc, #92]	@ (8007d68 <xTaskIncrementTick+0x168>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d10:	4914      	ldr	r1, [pc, #80]	@ (8007d64 <xTaskIncrementTick+0x164>)
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d901      	bls.n	8007d26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007d22:	2301      	movs	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d26:	4b11      	ldr	r3, [pc, #68]	@ (8007d6c <xTaskIncrementTick+0x16c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d007      	beq.n	8007d3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e004      	b.n	8007d3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d34:	4b0e      	ldr	r3, [pc, #56]	@ (8007d70 <xTaskIncrementTick+0x170>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8007d70 <xTaskIncrementTick+0x170>)
 8007d3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d3e:	697b      	ldr	r3, [r7, #20]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	24004be8 	.word	0x24004be8
 8007d4c:	24004bc4 	.word	0x24004bc4
 8007d50:	24004b78 	.word	0x24004b78
 8007d54:	24004b7c 	.word	0x24004b7c
 8007d58:	24004bd8 	.word	0x24004bd8
 8007d5c:	24004be0 	.word	0x24004be0
 8007d60:	24004bc8 	.word	0x24004bc8
 8007d64:	240046f0 	.word	0x240046f0
 8007d68:	240046ec 	.word	0x240046ec
 8007d6c:	24004bd4 	.word	0x24004bd4
 8007d70:	24004bd0 	.word	0x24004bd0

08007d74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8007e28 <vTaskSwitchContext+0xb4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d82:	4b2a      	ldr	r3, [pc, #168]	@ (8007e2c <vTaskSwitchContext+0xb8>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d88:	e047      	b.n	8007e1a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007d8a:	4b28      	ldr	r3, [pc, #160]	@ (8007e2c <vTaskSwitchContext+0xb8>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d90:	4b27      	ldr	r3, [pc, #156]	@ (8007e30 <vTaskSwitchContext+0xbc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e011      	b.n	8007dbc <vTaskSwitchContext+0x48>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10b      	bne.n	8007db6 <vTaskSwitchContext+0x42>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	607b      	str	r3, [r7, #4]
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	e7fd      	b.n	8007db2 <vTaskSwitchContext+0x3e>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	491d      	ldr	r1, [pc, #116]	@ (8007e34 <vTaskSwitchContext+0xc0>)
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0e3      	beq.n	8007d98 <vTaskSwitchContext+0x24>
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4a16      	ldr	r2, [pc, #88]	@ (8007e34 <vTaskSwitchContext+0xc0>)
 8007ddc:	4413      	add	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	3308      	adds	r3, #8
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d104      	bne.n	8007e00 <vTaskSwitchContext+0x8c>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	605a      	str	r2, [r3, #4]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	4a0c      	ldr	r2, [pc, #48]	@ (8007e38 <vTaskSwitchContext+0xc4>)
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	4a09      	ldr	r2, [pc, #36]	@ (8007e30 <vTaskSwitchContext+0xbc>)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e10:	4b09      	ldr	r3, [pc, #36]	@ (8007e38 <vTaskSwitchContext+0xc4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3354      	adds	r3, #84	@ 0x54
 8007e16:	4a09      	ldr	r2, [pc, #36]	@ (8007e3c <vTaskSwitchContext+0xc8>)
 8007e18:	6013      	str	r3, [r2, #0]
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	24004be8 	.word	0x24004be8
 8007e2c:	24004bd4 	.word	0x24004bd4
 8007e30:	24004bc8 	.word	0x24004bc8
 8007e34:	240046f0 	.word	0x240046f0
 8007e38:	240046ec 	.word	0x240046ec
 8007e3c:	24000020 	.word	0x24000020

08007e40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60fb      	str	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e68:	4b07      	ldr	r3, [pc, #28]	@ (8007e88 <vTaskPlaceOnEventList+0x48>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3318      	adds	r3, #24
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7fe fbf4 	bl	800665e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e76:	2101      	movs	r1, #1
 8007e78:	6838      	ldr	r0, [r7, #0]
 8007e7a:	f000 fa87 	bl	800838c <prvAddCurrentTaskToDelayedList>
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	240046ec 	.word	0x240046ec

08007e8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10b      	bne.n	8007eb6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	617b      	str	r3, [r7, #20]
}
 8007eb0:	bf00      	nop
 8007eb2:	bf00      	nop
 8007eb4:	e7fd      	b.n	8007eb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3318      	adds	r3, #24
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7fe fba9 	bl	8006616 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007eca:	f04f 33ff 	mov.w	r3, #4294967295
 8007ece:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	68b8      	ldr	r0, [r7, #8]
 8007ed4:	f000 fa5a 	bl	800838c <prvAddCurrentTaskToDelayedList>
	}
 8007ed8:	bf00      	nop
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	240046ec 	.word	0x240046ec

08007ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	60fb      	str	r3, [r7, #12]
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	e7fd      	b.n	8007f0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	3318      	adds	r3, #24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fbda 	bl	80066d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007f94 <xTaskRemoveFromEventList+0xb0>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d11d      	bne.n	8007f60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fbd1 	bl	80066d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f32:	4b19      	ldr	r3, [pc, #100]	@ (8007f98 <xTaskRemoveFromEventList+0xb4>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d903      	bls.n	8007f42 <xTaskRemoveFromEventList+0x5e>
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3e:	4a16      	ldr	r2, [pc, #88]	@ (8007f98 <xTaskRemoveFromEventList+0xb4>)
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4a13      	ldr	r2, [pc, #76]	@ (8007f9c <xTaskRemoveFromEventList+0xb8>)
 8007f50:	441a      	add	r2, r3
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7fe fb5c 	bl	8006616 <vListInsertEnd>
 8007f5e:	e005      	b.n	8007f6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	3318      	adds	r3, #24
 8007f64:	4619      	mov	r1, r3
 8007f66:	480e      	ldr	r0, [pc, #56]	@ (8007fa0 <xTaskRemoveFromEventList+0xbc>)
 8007f68:	f7fe fb55 	bl	8006616 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f70:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa4 <xTaskRemoveFromEventList+0xc0>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d905      	bls.n	8007f86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa8 <xTaskRemoveFromEventList+0xc4>)
 8007f80:	2201      	movs	r2, #1
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e001      	b.n	8007f8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f8a:	697b      	ldr	r3, [r7, #20]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	24004be8 	.word	0x24004be8
 8007f98:	24004bc8 	.word	0x24004bc8
 8007f9c:	240046f0 	.word	0x240046f0
 8007fa0:	24004b80 	.word	0x24004b80
 8007fa4:	240046ec 	.word	0x240046ec
 8007fa8:	24004bd4 	.word	0x24004bd4

08007fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fb4:	4b06      	ldr	r3, [pc, #24]	@ (8007fd0 <vTaskInternalSetTimeOutState+0x24>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fbc:	4b05      	ldr	r3, [pc, #20]	@ (8007fd4 <vTaskInternalSetTimeOutState+0x28>)
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	605a      	str	r2, [r3, #4]
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	24004bd8 	.word	0x24004bd8
 8007fd4:	24004bc4 	.word	0x24004bc4

08007fd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10b      	bne.n	8008000 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	613b      	str	r3, [r7, #16]
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	60fb      	str	r3, [r7, #12]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800801e:	f7fe fcb3 	bl	8006988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008022:	4b1d      	ldr	r3, [pc, #116]	@ (8008098 <xTaskCheckForTimeOut+0xc0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d102      	bne.n	8008042 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	e023      	b.n	800808a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	4b15      	ldr	r3, [pc, #84]	@ (800809c <xTaskCheckForTimeOut+0xc4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d007      	beq.n	800805e <xTaskCheckForTimeOut+0x86>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	429a      	cmp	r2, r3
 8008056:	d302      	bcc.n	800805e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008058:	2301      	movs	r3, #1
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	e015      	b.n	800808a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	429a      	cmp	r2, r3
 8008066:	d20b      	bcs.n	8008080 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ff99 	bl	8007fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	e004      	b.n	800808a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008086:	2301      	movs	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800808a:	f7fe fcaf 	bl	80069ec <vPortExitCritical>

	return xReturn;
 800808e:	69fb      	ldr	r3, [r7, #28]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3720      	adds	r7, #32
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	24004bc4 	.word	0x24004bc4
 800809c:	24004bd8 	.word	0x24004bd8

080080a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080a4:	4b03      	ldr	r3, [pc, #12]	@ (80080b4 <vTaskMissedYield+0x14>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	601a      	str	r2, [r3, #0]
}
 80080aa:	bf00      	nop
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	24004bd4 	.word	0x24004bd4

080080b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080c0:	f000 f852 	bl	8008168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080c4:	4b06      	ldr	r3, [pc, #24]	@ (80080e0 <prvIdleTask+0x28>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d9f9      	bls.n	80080c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080cc:	4b05      	ldr	r3, [pc, #20]	@ (80080e4 <prvIdleTask+0x2c>)
 80080ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080dc:	e7f0      	b.n	80080c0 <prvIdleTask+0x8>
 80080de:	bf00      	nop
 80080e0:	240046f0 	.word	0x240046f0
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080ee:	2300      	movs	r3, #0
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	e00c      	b.n	800810e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a12      	ldr	r2, [pc, #72]	@ (8008148 <prvInitialiseTaskLists+0x60>)
 8008100:	4413      	add	r3, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fa5a 	bl	80065bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3301      	adds	r3, #1
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b37      	cmp	r3, #55	@ 0x37
 8008112:	d9ef      	bls.n	80080f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008114:	480d      	ldr	r0, [pc, #52]	@ (800814c <prvInitialiseTaskLists+0x64>)
 8008116:	f7fe fa51 	bl	80065bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800811a:	480d      	ldr	r0, [pc, #52]	@ (8008150 <prvInitialiseTaskLists+0x68>)
 800811c:	f7fe fa4e 	bl	80065bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008120:	480c      	ldr	r0, [pc, #48]	@ (8008154 <prvInitialiseTaskLists+0x6c>)
 8008122:	f7fe fa4b 	bl	80065bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008126:	480c      	ldr	r0, [pc, #48]	@ (8008158 <prvInitialiseTaskLists+0x70>)
 8008128:	f7fe fa48 	bl	80065bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800812c:	480b      	ldr	r0, [pc, #44]	@ (800815c <prvInitialiseTaskLists+0x74>)
 800812e:	f7fe fa45 	bl	80065bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008132:	4b0b      	ldr	r3, [pc, #44]	@ (8008160 <prvInitialiseTaskLists+0x78>)
 8008134:	4a05      	ldr	r2, [pc, #20]	@ (800814c <prvInitialiseTaskLists+0x64>)
 8008136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008138:	4b0a      	ldr	r3, [pc, #40]	@ (8008164 <prvInitialiseTaskLists+0x7c>)
 800813a:	4a05      	ldr	r2, [pc, #20]	@ (8008150 <prvInitialiseTaskLists+0x68>)
 800813c:	601a      	str	r2, [r3, #0]
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	240046f0 	.word	0x240046f0
 800814c:	24004b50 	.word	0x24004b50
 8008150:	24004b64 	.word	0x24004b64
 8008154:	24004b80 	.word	0x24004b80
 8008158:	24004b94 	.word	0x24004b94
 800815c:	24004bac 	.word	0x24004bac
 8008160:	24004b78 	.word	0x24004b78
 8008164:	24004b7c 	.word	0x24004b7c

08008168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800816e:	e019      	b.n	80081a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008170:	f7fe fc0a 	bl	8006988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008174:	4b10      	ldr	r3, [pc, #64]	@ (80081b8 <prvCheckTasksWaitingTermination+0x50>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3304      	adds	r3, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe faa5 	bl	80066d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008186:	4b0d      	ldr	r3, [pc, #52]	@ (80081bc <prvCheckTasksWaitingTermination+0x54>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3b01      	subs	r3, #1
 800818c:	4a0b      	ldr	r2, [pc, #44]	@ (80081bc <prvCheckTasksWaitingTermination+0x54>)
 800818e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008190:	4b0b      	ldr	r3, [pc, #44]	@ (80081c0 <prvCheckTasksWaitingTermination+0x58>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3b01      	subs	r3, #1
 8008196:	4a0a      	ldr	r2, [pc, #40]	@ (80081c0 <prvCheckTasksWaitingTermination+0x58>)
 8008198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800819a:	f7fe fc27 	bl	80069ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f810 	bl	80081c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081a4:	4b06      	ldr	r3, [pc, #24]	@ (80081c0 <prvCheckTasksWaitingTermination+0x58>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e1      	bne.n	8008170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	24004b94 	.word	0x24004b94
 80081bc:	24004bc0 	.word	0x24004bc0
 80081c0:	24004ba8 	.word	0x24004ba8

080081c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3354      	adds	r3, #84	@ 0x54
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 f9f5 	bl	80095c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d108      	bne.n	80081f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe f8c9 	bl	800637c <vPortFree>
				vPortFree( pxTCB );
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fe f8c6 	bl	800637c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081f0:	e019      	b.n	8008226 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d103      	bne.n	8008204 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7fe f8bd 	bl	800637c <vPortFree>
	}
 8008202:	e010      	b.n	8008226 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800820a:	2b02      	cmp	r3, #2
 800820c:	d00b      	beq.n	8008226 <prvDeleteTCB+0x62>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60fb      	str	r3, [r7, #12]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <prvDeleteTCB+0x5e>
	}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008236:	4b0c      	ldr	r3, [pc, #48]	@ (8008268 <prvResetNextTaskUnblockTime+0x38>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d104      	bne.n	800824a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008240:	4b0a      	ldr	r3, [pc, #40]	@ (800826c <prvResetNextTaskUnblockTime+0x3c>)
 8008242:	f04f 32ff 	mov.w	r2, #4294967295
 8008246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008248:	e008      	b.n	800825c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824a:	4b07      	ldr	r3, [pc, #28]	@ (8008268 <prvResetNextTaskUnblockTime+0x38>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	4a04      	ldr	r2, [pc, #16]	@ (800826c <prvResetNextTaskUnblockTime+0x3c>)
 800825a:	6013      	str	r3, [r2, #0]
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	24004b78 	.word	0x24004b78
 800826c:	24004be0 	.word	0x24004be0

08008270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008276:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <xTaskGetSchedulerState+0x34>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800827e:	2301      	movs	r3, #1
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	e008      	b.n	8008296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008284:	4b08      	ldr	r3, [pc, #32]	@ (80082a8 <xTaskGetSchedulerState+0x38>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d102      	bne.n	8008292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800828c:	2302      	movs	r3, #2
 800828e:	607b      	str	r3, [r7, #4]
 8008290:	e001      	b.n	8008296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008292:	2300      	movs	r3, #0
 8008294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008296:	687b      	ldr	r3, [r7, #4]
	}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	24004bcc 	.word	0x24004bcc
 80082a8:	24004be8 	.word	0x24004be8

080082ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d058      	beq.n	8008374 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008380 <xTaskPriorityDisinherit+0xd4>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d00b      	beq.n	80082e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	60fb      	str	r3, [r7, #12]
}
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	e7fd      	b.n	80082e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10b      	bne.n	8008304 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60bb      	str	r3, [r7, #8]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008308:	1e5a      	subs	r2, r3, #1
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008316:	429a      	cmp	r2, r3
 8008318:	d02c      	beq.n	8008374 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800831e:	2b00      	cmp	r3, #0
 8008320:	d128      	bne.n	8008374 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	3304      	adds	r3, #4
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe f9d2 	bl	80066d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008338:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008344:	4b0f      	ldr	r3, [pc, #60]	@ (8008384 <xTaskPriorityDisinherit+0xd8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	429a      	cmp	r2, r3
 800834a:	d903      	bls.n	8008354 <xTaskPriorityDisinherit+0xa8>
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008350:	4a0c      	ldr	r2, [pc, #48]	@ (8008384 <xTaskPriorityDisinherit+0xd8>)
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4a09      	ldr	r2, [pc, #36]	@ (8008388 <xTaskPriorityDisinherit+0xdc>)
 8008362:	441a      	add	r2, r3
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	3304      	adds	r3, #4
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	f7fe f953 	bl	8006616 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008374:	697b      	ldr	r3, [r7, #20]
	}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	240046ec 	.word	0x240046ec
 8008384:	24004bc8 	.word	0x24004bc8
 8008388:	240046f0 	.word	0x240046f0

0800838c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008396:	4b21      	ldr	r3, [pc, #132]	@ (800841c <prvAddCurrentTaskToDelayedList+0x90>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800839c:	4b20      	ldr	r3, [pc, #128]	@ (8008420 <prvAddCurrentTaskToDelayedList+0x94>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3304      	adds	r3, #4
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe f994 	bl	80066d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ae:	d10a      	bne.n	80083c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008420 <prvAddCurrentTaskToDelayedList+0x94>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4819      	ldr	r0, [pc, #100]	@ (8008424 <prvAddCurrentTaskToDelayedList+0x98>)
 80083c0:	f7fe f929 	bl	8006616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083c4:	e026      	b.n	8008414 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4413      	add	r3, r2
 80083cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083ce:	4b14      	ldr	r3, [pc, #80]	@ (8008420 <prvAddCurrentTaskToDelayedList+0x94>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d209      	bcs.n	80083f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083de:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008420 <prvAddCurrentTaskToDelayedList+0x94>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f7fe f937 	bl	800665e <vListInsert>
}
 80083f0:	e010      	b.n	8008414 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083f2:	4b0e      	ldr	r3, [pc, #56]	@ (800842c <prvAddCurrentTaskToDelayedList+0xa0>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008420 <prvAddCurrentTaskToDelayedList+0x94>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7fe f92d 	bl	800665e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008404:	4b0a      	ldr	r3, [pc, #40]	@ (8008430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	429a      	cmp	r2, r3
 800840c:	d202      	bcs.n	8008414 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800840e:	4a08      	ldr	r2, [pc, #32]	@ (8008430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	6013      	str	r3, [r2, #0]
}
 8008414:	bf00      	nop
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	24004bc4 	.word	0x24004bc4
 8008420:	240046ec 	.word	0x240046ec
 8008424:	24004bac 	.word	0x24004bac
 8008428:	24004b7c 	.word	0x24004b7c
 800842c:	24004b78 	.word	0x24004b78
 8008430:	24004be0 	.word	0x24004be0

08008434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	@ 0x28
 8008438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800843a:	2300      	movs	r3, #0
 800843c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800843e:	f000 fb13 	bl	8008a68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008442:	4b1d      	ldr	r3, [pc, #116]	@ (80084b8 <xTimerCreateTimerTask+0x84>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d021      	beq.n	800848e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008452:	1d3a      	adds	r2, r7, #4
 8008454:	f107 0108 	add.w	r1, r7, #8
 8008458:	f107 030c 	add.w	r3, r7, #12
 800845c:	4618      	mov	r0, r3
 800845e:	f7fd fea5 	bl	80061ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	9202      	str	r2, [sp, #8]
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	2302      	movs	r3, #2
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	460a      	mov	r2, r1
 8008474:	4911      	ldr	r1, [pc, #68]	@ (80084bc <xTimerCreateTimerTask+0x88>)
 8008476:	4812      	ldr	r0, [pc, #72]	@ (80084c0 <xTimerCreateTimerTask+0x8c>)
 8008478:	f7ff f8a2 	bl	80075c0 <xTaskCreateStatic>
 800847c:	4603      	mov	r3, r0
 800847e:	4a11      	ldr	r2, [pc, #68]	@ (80084c4 <xTimerCreateTimerTask+0x90>)
 8008480:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008482:	4b10      	ldr	r3, [pc, #64]	@ (80084c4 <xTimerCreateTimerTask+0x90>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800848a:	2301      	movs	r3, #1
 800848c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	613b      	str	r3, [r7, #16]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084ac:	697b      	ldr	r3, [r7, #20]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	24004c1c 	.word	0x24004c1c
 80084bc:	0800b3e8 	.word	0x0800b3e8
 80084c0:	08008601 	.word	0x08008601
 80084c4:	24004c20 	.word	0x24004c20

080084c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	@ 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084d6:	2300      	movs	r3, #0
 80084d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10b      	bne.n	80084f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	623b      	str	r3, [r7, #32]
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084f8:	4b19      	ldr	r3, [pc, #100]	@ (8008560 <xTimerGenericCommand+0x98>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d02a      	beq.n	8008556 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b05      	cmp	r3, #5
 8008510:	dc18      	bgt.n	8008544 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008512:	f7ff fead 	bl	8008270 <xTaskGetSchedulerState>
 8008516:	4603      	mov	r3, r0
 8008518:	2b02      	cmp	r3, #2
 800851a:	d109      	bne.n	8008530 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800851c:	4b10      	ldr	r3, [pc, #64]	@ (8008560 <xTimerGenericCommand+0x98>)
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	f107 0110 	add.w	r1, r7, #16
 8008524:	2300      	movs	r3, #0
 8008526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008528:	f7fe fc5a 	bl	8006de0 <xQueueGenericSend>
 800852c:	6278      	str	r0, [r7, #36]	@ 0x24
 800852e:	e012      	b.n	8008556 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008530:	4b0b      	ldr	r3, [pc, #44]	@ (8008560 <xTimerGenericCommand+0x98>)
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	f107 0110 	add.w	r1, r7, #16
 8008538:	2300      	movs	r3, #0
 800853a:	2200      	movs	r2, #0
 800853c:	f7fe fc50 	bl	8006de0 <xQueueGenericSend>
 8008540:	6278      	str	r0, [r7, #36]	@ 0x24
 8008542:	e008      	b.n	8008556 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008544:	4b06      	ldr	r3, [pc, #24]	@ (8008560 <xTimerGenericCommand+0x98>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	f107 0110 	add.w	r1, r7, #16
 800854c:	2300      	movs	r3, #0
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	f7fe fd48 	bl	8006fe4 <xQueueGenericSendFromISR>
 8008554:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008558:	4618      	mov	r0, r3
 800855a:	3728      	adds	r7, #40	@ 0x28
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	24004c1c 	.word	0x24004c1c

08008564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af02      	add	r7, sp, #8
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856e:	4b23      	ldr	r3, [pc, #140]	@ (80085fc <prvProcessExpiredTimer+0x98>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	3304      	adds	r3, #4
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe f8a7 	bl	80066d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d023      	beq.n	80085d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	699a      	ldr	r2, [r3, #24]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	18d1      	adds	r1, r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	6978      	ldr	r0, [r7, #20]
 800859e:	f000 f8d5 	bl	800874c <prvInsertTimerInActiveList>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d020      	beq.n	80085ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085a8:	2300      	movs	r3, #0
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	2300      	movs	r3, #0
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	2100      	movs	r1, #0
 80085b2:	6978      	ldr	r0, [r7, #20]
 80085b4:	f7ff ff88 	bl	80084c8 <xTimerGenericCommand>
 80085b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d114      	bne.n	80085ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	60fb      	str	r3, [r7, #12]
}
 80085d2:	bf00      	nop
 80085d4:	bf00      	nop
 80085d6:	e7fd      	b.n	80085d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085de:	f023 0301 	bic.w	r3, r3, #1
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	6978      	ldr	r0, [r7, #20]
 80085f0:	4798      	blx	r3
}
 80085f2:	bf00      	nop
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	24004c14 	.word	0x24004c14

08008600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008608:	f107 0308 	add.w	r3, r7, #8
 800860c:	4618      	mov	r0, r3
 800860e:	f000 f859 	bl	80086c4 <prvGetNextExpireTime>
 8008612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4619      	mov	r1, r3
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 f805 	bl	8008628 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800861e:	f000 f8d7 	bl	80087d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008622:	bf00      	nop
 8008624:	e7f0      	b.n	8008608 <prvTimerTask+0x8>
	...

08008628 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008632:	f7ff fa29 	bl	8007a88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f866 	bl	800870c <prvSampleTimeNow>
 8008640:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d130      	bne.n	80086aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <prvProcessTimerOrBlockTask+0x3c>
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	429a      	cmp	r2, r3
 8008654:	d806      	bhi.n	8008664 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008656:	f7ff fa25 	bl	8007aa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7ff ff81 	bl	8008564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008662:	e024      	b.n	80086ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d008      	beq.n	800867c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800866a:	4b13      	ldr	r3, [pc, #76]	@ (80086b8 <prvProcessTimerOrBlockTask+0x90>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <prvProcessTimerOrBlockTask+0x50>
 8008674:	2301      	movs	r3, #1
 8008676:	e000      	b.n	800867a <prvProcessTimerOrBlockTask+0x52>
 8008678:	2300      	movs	r3, #0
 800867a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800867c:	4b0f      	ldr	r3, [pc, #60]	@ (80086bc <prvProcessTimerOrBlockTask+0x94>)
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	4619      	mov	r1, r3
 800868a:	f7fe ff65 	bl	8007558 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800868e:	f7ff fa09 	bl	8007aa4 <xTaskResumeAll>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008698:	4b09      	ldr	r3, [pc, #36]	@ (80086c0 <prvProcessTimerOrBlockTask+0x98>)
 800869a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	f3bf 8f6f 	isb	sy
}
 80086a8:	e001      	b.n	80086ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086aa:	f7ff f9fb 	bl	8007aa4 <xTaskResumeAll>
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	24004c18 	.word	0x24004c18
 80086bc:	24004c1c 	.word	0x24004c1c
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008708 <prvGetNextExpireTime+0x44>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <prvGetNextExpireTime+0x16>
 80086d6:	2201      	movs	r2, #1
 80086d8:	e000      	b.n	80086dc <prvGetNextExpireTime+0x18>
 80086da:	2200      	movs	r2, #0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d105      	bne.n	80086f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086e8:	4b07      	ldr	r3, [pc, #28]	@ (8008708 <prvGetNextExpireTime+0x44>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	e001      	b.n	80086f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086f8:	68fb      	ldr	r3, [r7, #12]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	24004c14 	.word	0x24004c14

0800870c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008714:	f7ff fa64 	bl	8007be0 <xTaskGetTickCount>
 8008718:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800871a:	4b0b      	ldr	r3, [pc, #44]	@ (8008748 <prvSampleTimeNow+0x3c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	429a      	cmp	r2, r3
 8008722:	d205      	bcs.n	8008730 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008724:	f000 f93a 	bl	800899c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e002      	b.n	8008736 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008736:	4a04      	ldr	r2, [pc, #16]	@ (8008748 <prvSampleTimeNow+0x3c>)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800873c:	68fb      	ldr	r3, [r7, #12]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	24004c24 	.word	0x24004c24

0800874c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800875a:	2300      	movs	r3, #0
 800875c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	429a      	cmp	r2, r3
 8008770:	d812      	bhi.n	8008798 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	429a      	cmp	r2, r3
 800877e:	d302      	bcc.n	8008786 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008780:	2301      	movs	r3, #1
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e01b      	b.n	80087be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008786:	4b10      	ldr	r3, [pc, #64]	@ (80087c8 <prvInsertTimerInActiveList+0x7c>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3304      	adds	r3, #4
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f7fd ff64 	bl	800665e <vListInsert>
 8008796:	e012      	b.n	80087be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d206      	bcs.n	80087ae <prvInsertTimerInActiveList+0x62>
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d302      	bcc.n	80087ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087a8:	2301      	movs	r3, #1
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	e007      	b.n	80087be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087ae:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <prvInsertTimerInActiveList+0x80>)
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3304      	adds	r3, #4
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fd ff50 	bl	800665e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087be:	697b      	ldr	r3, [r7, #20]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	24004c18 	.word	0x24004c18
 80087cc:	24004c14 	.word	0x24004c14

080087d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	@ 0x38
 80087d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087d6:	e0ce      	b.n	8008976 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	da19      	bge.n	8008812 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087de:	1d3b      	adds	r3, r7, #4
 80087e0:	3304      	adds	r3, #4
 80087e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80087e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	61fb      	str	r3, [r7, #28]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008808:	6850      	ldr	r0, [r2, #4]
 800880a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800880c:	6892      	ldr	r2, [r2, #8]
 800880e:	4611      	mov	r1, r2
 8008810:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f2c0 80ae 	blt.w	8008976 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008828:	3304      	adds	r3, #4
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd ff50 	bl	80066d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008830:	463b      	mov	r3, r7
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff ff6a 	bl	800870c <prvSampleTimeNow>
 8008838:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b09      	cmp	r3, #9
 800883e:	f200 8097 	bhi.w	8008970 <prvProcessReceivedCommands+0x1a0>
 8008842:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <prvProcessReceivedCommands+0x78>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	08008871 	.word	0x08008871
 800884c:	08008871 	.word	0x08008871
 8008850:	08008871 	.word	0x08008871
 8008854:	080088e7 	.word	0x080088e7
 8008858:	080088fb 	.word	0x080088fb
 800885c:	08008947 	.word	0x08008947
 8008860:	08008871 	.word	0x08008871
 8008864:	08008871 	.word	0x08008871
 8008868:	080088e7 	.word	0x080088e7
 800886c:	080088fb 	.word	0x080088fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008872:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	b2da      	uxtb	r2, r3
 800887c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	18d1      	adds	r1, r2, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800888e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008890:	f7ff ff5c 	bl	800874c <prvInsertTimerInActiveList>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d06c      	beq.n	8008974 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800889a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d061      	beq.n	8008974 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	441a      	add	r2, r3
 80088b8:	2300      	movs	r3, #0
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	2300      	movs	r3, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c2:	f7ff fe01 	bl	80084c8 <xTimerGenericCommand>
 80088c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d152      	bne.n	8008974 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	61bb      	str	r3, [r7, #24]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088ec:	f023 0301 	bic.w	r3, r3, #1
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80088f8:	e03d      	b.n	8008976 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	b2da      	uxtb	r2, r3
 8008906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008908:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008910:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	617b      	str	r3, [r7, #20]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008934:	699a      	ldr	r2, [r3, #24]
 8008936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008938:	18d1      	adds	r1, r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800893e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008940:	f7ff ff04 	bl	800874c <prvInsertTimerInActiveList>
					break;
 8008944:	e017      	b.n	8008976 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008956:	f7fd fd11 	bl	800637c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800895a:	e00c      	b.n	8008976 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	b2da      	uxtb	r2, r3
 8008968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800896e:	e002      	b.n	8008976 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008970:	bf00      	nop
 8008972:	e000      	b.n	8008976 <prvProcessReceivedCommands+0x1a6>
					break;
 8008974:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008976:	4b08      	ldr	r3, [pc, #32]	@ (8008998 <prvProcessReceivedCommands+0x1c8>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	1d39      	adds	r1, r7, #4
 800897c:	2200      	movs	r2, #0
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fbce 	bl	8007120 <xQueueReceive>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	f47f af26 	bne.w	80087d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800898c:	bf00      	nop
 800898e:	bf00      	nop
 8008990:	3730      	adds	r7, #48	@ 0x30
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	24004c1c 	.word	0x24004c1c

0800899c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089a2:	e049      	b.n	8008a38 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008a60 <prvSwitchTimerLists+0xc4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008a60 <prvSwitchTimerLists+0xc4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fd fe87 	bl	80066d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d02f      	beq.n	8008a38 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	4413      	add	r3, r2
 80089e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d90e      	bls.n	8008a08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a60 <prvSwitchTimerLists+0xc4>)
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4619      	mov	r1, r3
 8008a00:	4610      	mov	r0, r2
 8008a02:	f7fd fe2c 	bl	800665e <vListInsert>
 8008a06:	e017      	b.n	8008a38 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f7ff fd58 	bl	80084c8 <xTimerGenericCommand>
 8008a18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10b      	bne.n	8008a38 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	603b      	str	r3, [r7, #0]
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a38:	4b09      	ldr	r3, [pc, #36]	@ (8008a60 <prvSwitchTimerLists+0xc4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1b0      	bne.n	80089a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a42:	4b07      	ldr	r3, [pc, #28]	@ (8008a60 <prvSwitchTimerLists+0xc4>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a48:	4b06      	ldr	r3, [pc, #24]	@ (8008a64 <prvSwitchTimerLists+0xc8>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a04      	ldr	r2, [pc, #16]	@ (8008a60 <prvSwitchTimerLists+0xc4>)
 8008a4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a50:	4a04      	ldr	r2, [pc, #16]	@ (8008a64 <prvSwitchTimerLists+0xc8>)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6013      	str	r3, [r2, #0]
}
 8008a56:	bf00      	nop
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	24004c14 	.word	0x24004c14
 8008a64:	24004c18 	.word	0x24004c18

08008a68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a6e:	f7fd ff8b 	bl	8006988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a72:	4b15      	ldr	r3, [pc, #84]	@ (8008ac8 <prvCheckForValidListAndQueue+0x60>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d120      	bne.n	8008abc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a7a:	4814      	ldr	r0, [pc, #80]	@ (8008acc <prvCheckForValidListAndQueue+0x64>)
 8008a7c:	f7fd fd9e 	bl	80065bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a80:	4813      	ldr	r0, [pc, #76]	@ (8008ad0 <prvCheckForValidListAndQueue+0x68>)
 8008a82:	f7fd fd9b 	bl	80065bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a86:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <prvCheckForValidListAndQueue+0x6c>)
 8008a88:	4a10      	ldr	r2, [pc, #64]	@ (8008acc <prvCheckForValidListAndQueue+0x64>)
 8008a8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a8c:	4b12      	ldr	r3, [pc, #72]	@ (8008ad8 <prvCheckForValidListAndQueue+0x70>)
 8008a8e:	4a10      	ldr	r2, [pc, #64]	@ (8008ad0 <prvCheckForValidListAndQueue+0x68>)
 8008a90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a92:	2300      	movs	r3, #0
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	4b11      	ldr	r3, [pc, #68]	@ (8008adc <prvCheckForValidListAndQueue+0x74>)
 8008a98:	4a11      	ldr	r2, [pc, #68]	@ (8008ae0 <prvCheckForValidListAndQueue+0x78>)
 8008a9a:	2110      	movs	r1, #16
 8008a9c:	200a      	movs	r0, #10
 8008a9e:	f7fe f8ff 	bl	8006ca0 <xQueueGenericCreateStatic>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4a08      	ldr	r2, [pc, #32]	@ (8008ac8 <prvCheckForValidListAndQueue+0x60>)
 8008aa6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008aa8:	4b07      	ldr	r3, [pc, #28]	@ (8008ac8 <prvCheckForValidListAndQueue+0x60>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ab0:	4b05      	ldr	r3, [pc, #20]	@ (8008ac8 <prvCheckForValidListAndQueue+0x60>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	490b      	ldr	r1, [pc, #44]	@ (8008ae4 <prvCheckForValidListAndQueue+0x7c>)
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fd24 	bl	8007504 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008abc:	f7fd ff96 	bl	80069ec <vPortExitCritical>
}
 8008ac0:	bf00      	nop
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	24004c1c 	.word	0x24004c1c
 8008acc:	24004bec 	.word	0x24004bec
 8008ad0:	24004c00 	.word	0x24004c00
 8008ad4:	24004c14 	.word	0x24004c14
 8008ad8:	24004c18 	.word	0x24004c18
 8008adc:	24004cc8 	.word	0x24004cc8
 8008ae0:	24004c28 	.word	0x24004c28
 8008ae4:	0800b3f0 	.word	0x0800b3f0

08008ae8 <__cvt>:
 8008ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aea:	ed2d 8b02 	vpush	{d8}
 8008aee:	eeb0 8b40 	vmov.f64	d8, d0
 8008af2:	b085      	sub	sp, #20
 8008af4:	4617      	mov	r7, r2
 8008af6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008af8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008afa:	ee18 2a90 	vmov	r2, s17
 8008afe:	f025 0520 	bic.w	r5, r5, #32
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	bfb6      	itet	lt
 8008b06:	222d      	movlt	r2, #45	@ 0x2d
 8008b08:	2200      	movge	r2, #0
 8008b0a:	eeb1 8b40 	vneglt.f64	d8, d0
 8008b0e:	2d46      	cmp	r5, #70	@ 0x46
 8008b10:	460c      	mov	r4, r1
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	d004      	beq.n	8008b20 <__cvt+0x38>
 8008b16:	2d45      	cmp	r5, #69	@ 0x45
 8008b18:	d100      	bne.n	8008b1c <__cvt+0x34>
 8008b1a:	3401      	adds	r4, #1
 8008b1c:	2102      	movs	r1, #2
 8008b1e:	e000      	b.n	8008b22 <__cvt+0x3a>
 8008b20:	2103      	movs	r1, #3
 8008b22:	ab03      	add	r3, sp, #12
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	ab02      	add	r3, sp, #8
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	4633      	mov	r3, r6
 8008b2e:	eeb0 0b48 	vmov.f64	d0, d8
 8008b32:	f000 fe95 	bl	8009860 <_dtoa_r>
 8008b36:	2d47      	cmp	r5, #71	@ 0x47
 8008b38:	d114      	bne.n	8008b64 <__cvt+0x7c>
 8008b3a:	07fb      	lsls	r3, r7, #31
 8008b3c:	d50a      	bpl.n	8008b54 <__cvt+0x6c>
 8008b3e:	1902      	adds	r2, r0, r4
 8008b40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b48:	bf08      	it	eq
 8008b4a:	9203      	streq	r2, [sp, #12]
 8008b4c:	2130      	movs	r1, #48	@ 0x30
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d319      	bcc.n	8008b88 <__cvt+0xa0>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b58:	1a1b      	subs	r3, r3, r0
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	b005      	add	sp, #20
 8008b5e:	ecbd 8b02 	vpop	{d8}
 8008b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b64:	2d46      	cmp	r5, #70	@ 0x46
 8008b66:	eb00 0204 	add.w	r2, r0, r4
 8008b6a:	d1e9      	bne.n	8008b40 <__cvt+0x58>
 8008b6c:	7803      	ldrb	r3, [r0, #0]
 8008b6e:	2b30      	cmp	r3, #48	@ 0x30
 8008b70:	d107      	bne.n	8008b82 <__cvt+0x9a>
 8008b72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7a:	bf1c      	itt	ne
 8008b7c:	f1c4 0401 	rsbne	r4, r4, #1
 8008b80:	6034      	strne	r4, [r6, #0]
 8008b82:	6833      	ldr	r3, [r6, #0]
 8008b84:	441a      	add	r2, r3
 8008b86:	e7db      	b.n	8008b40 <__cvt+0x58>
 8008b88:	1c5c      	adds	r4, r3, #1
 8008b8a:	9403      	str	r4, [sp, #12]
 8008b8c:	7019      	strb	r1, [r3, #0]
 8008b8e:	e7de      	b.n	8008b4e <__cvt+0x66>

08008b90 <__exponent>:
 8008b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b92:	2900      	cmp	r1, #0
 8008b94:	bfba      	itte	lt
 8008b96:	4249      	neglt	r1, r1
 8008b98:	232d      	movlt	r3, #45	@ 0x2d
 8008b9a:	232b      	movge	r3, #43	@ 0x2b
 8008b9c:	2909      	cmp	r1, #9
 8008b9e:	7002      	strb	r2, [r0, #0]
 8008ba0:	7043      	strb	r3, [r0, #1]
 8008ba2:	dd29      	ble.n	8008bf8 <__exponent+0x68>
 8008ba4:	f10d 0307 	add.w	r3, sp, #7
 8008ba8:	461d      	mov	r5, r3
 8008baa:	270a      	movs	r7, #10
 8008bac:	461a      	mov	r2, r3
 8008bae:	fbb1 f6f7 	udiv	r6, r1, r7
 8008bb2:	fb07 1416 	mls	r4, r7, r6, r1
 8008bb6:	3430      	adds	r4, #48	@ 0x30
 8008bb8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	2c63      	cmp	r4, #99	@ 0x63
 8008bc0:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	dcf1      	bgt.n	8008bac <__exponent+0x1c>
 8008bc8:	3130      	adds	r1, #48	@ 0x30
 8008bca:	1e94      	subs	r4, r2, #2
 8008bcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bd0:	1c41      	adds	r1, r0, #1
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	42ab      	cmp	r3, r5
 8008bd6:	d30a      	bcc.n	8008bee <__exponent+0x5e>
 8008bd8:	f10d 0309 	add.w	r3, sp, #9
 8008bdc:	1a9b      	subs	r3, r3, r2
 8008bde:	42ac      	cmp	r4, r5
 8008be0:	bf88      	it	hi
 8008be2:	2300      	movhi	r3, #0
 8008be4:	3302      	adds	r3, #2
 8008be6:	4403      	add	r3, r0
 8008be8:	1a18      	subs	r0, r3, r0
 8008bea:	b003      	add	sp, #12
 8008bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bee:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008bf2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008bf6:	e7ed      	b.n	8008bd4 <__exponent+0x44>
 8008bf8:	2330      	movs	r3, #48	@ 0x30
 8008bfa:	3130      	adds	r1, #48	@ 0x30
 8008bfc:	7083      	strb	r3, [r0, #2]
 8008bfe:	70c1      	strb	r1, [r0, #3]
 8008c00:	1d03      	adds	r3, r0, #4
 8008c02:	e7f1      	b.n	8008be8 <__exponent+0x58>
 8008c04:	0000      	movs	r0, r0
	...

08008c08 <_printf_float>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	b08d      	sub	sp, #52	@ 0x34
 8008c0e:	460c      	mov	r4, r1
 8008c10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c14:	4616      	mov	r6, r2
 8008c16:	461f      	mov	r7, r3
 8008c18:	4605      	mov	r5, r0
 8008c1a:	f000 fcbd 	bl	8009598 <_localeconv_r>
 8008c1e:	f8d0 b000 	ldr.w	fp, [r0]
 8008c22:	4658      	mov	r0, fp
 8008c24:	f7f7 fbac 	bl	8000380 <strlen>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c30:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008c34:	6822      	ldr	r2, [r4, #0]
 8008c36:	9005      	str	r0, [sp, #20]
 8008c38:	3307      	adds	r3, #7
 8008c3a:	f023 0307 	bic.w	r3, r3, #7
 8008c3e:	f103 0108 	add.w	r1, r3, #8
 8008c42:	f8c8 1000 	str.w	r1, [r8]
 8008c46:	ed93 0b00 	vldr	d0, [r3]
 8008c4a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008ea8 <_printf_float+0x2a0>
 8008c4e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008c52:	eeb4 7b46 	vcmp.f64	d7, d6
 8008c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c5a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008c5e:	dd24      	ble.n	8008caa <_printf_float+0xa2>
 8008c60:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c68:	d502      	bpl.n	8008c70 <_printf_float+0x68>
 8008c6a:	232d      	movs	r3, #45	@ 0x2d
 8008c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c70:	498f      	ldr	r1, [pc, #572]	@ (8008eb0 <_printf_float+0x2a8>)
 8008c72:	4b90      	ldr	r3, [pc, #576]	@ (8008eb4 <_printf_float+0x2ac>)
 8008c74:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008c78:	bf94      	ite	ls
 8008c7a:	4688      	movls	r8, r1
 8008c7c:	4698      	movhi	r8, r3
 8008c7e:	f022 0204 	bic.w	r2, r2, #4
 8008c82:	2303      	movs	r3, #3
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	f04f 0a00 	mov.w	sl, #0
 8008c8c:	9700      	str	r7, [sp, #0]
 8008c8e:	4633      	mov	r3, r6
 8008c90:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c92:	4621      	mov	r1, r4
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 f9d1 	bl	800903c <_printf_common>
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	f040 8089 	bne.w	8008db2 <_printf_float+0x1aa>
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	b00d      	add	sp, #52	@ 0x34
 8008ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	eeb4 0b40 	vcmp.f64	d0, d0
 8008cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb2:	d709      	bvc.n	8008cc8 <_printf_float+0xc0>
 8008cb4:	ee10 3a90 	vmov	r3, s1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bfbc      	itt	lt
 8008cbc:	232d      	movlt	r3, #45	@ 0x2d
 8008cbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cc2:	497d      	ldr	r1, [pc, #500]	@ (8008eb8 <_printf_float+0x2b0>)
 8008cc4:	4b7d      	ldr	r3, [pc, #500]	@ (8008ebc <_printf_float+0x2b4>)
 8008cc6:	e7d5      	b.n	8008c74 <_printf_float+0x6c>
 8008cc8:	6863      	ldr	r3, [r4, #4]
 8008cca:	1c59      	adds	r1, r3, #1
 8008ccc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008cd0:	d139      	bne.n	8008d46 <_printf_float+0x13e>
 8008cd2:	2306      	movs	r3, #6
 8008cd4:	6063      	str	r3, [r4, #4]
 8008cd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6022      	str	r2, [r4, #0]
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ce2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008ce6:	ab09      	add	r3, sp, #36	@ 0x24
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	6861      	ldr	r1, [r4, #4]
 8008cec:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f7ff fef9 	bl	8008ae8 <__cvt>
 8008cf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	d129      	bne.n	8008d54 <_printf_float+0x14c>
 8008d00:	1cc8      	adds	r0, r1, #3
 8008d02:	db02      	blt.n	8008d0a <_printf_float+0x102>
 8008d04:	6863      	ldr	r3, [r4, #4]
 8008d06:	4299      	cmp	r1, r3
 8008d08:	dd41      	ble.n	8008d8e <_printf_float+0x186>
 8008d0a:	f1a9 0902 	sub.w	r9, r9, #2
 8008d0e:	fa5f f989 	uxtb.w	r9, r9
 8008d12:	3901      	subs	r1, #1
 8008d14:	464a      	mov	r2, r9
 8008d16:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d1c:	f7ff ff38 	bl	8008b90 <__exponent>
 8008d20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d22:	1813      	adds	r3, r2, r0
 8008d24:	2a01      	cmp	r2, #1
 8008d26:	4682      	mov	sl, r0
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	dc02      	bgt.n	8008d32 <_printf_float+0x12a>
 8008d2c:	6822      	ldr	r2, [r4, #0]
 8008d2e:	07d2      	lsls	r2, r2, #31
 8008d30:	d501      	bpl.n	8008d36 <_printf_float+0x12e>
 8008d32:	3301      	adds	r3, #1
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0a6      	beq.n	8008c8c <_printf_float+0x84>
 8008d3e:	232d      	movs	r3, #45	@ 0x2d
 8008d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d44:	e7a2      	b.n	8008c8c <_printf_float+0x84>
 8008d46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d4a:	d1c4      	bne.n	8008cd6 <_printf_float+0xce>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1c2      	bne.n	8008cd6 <_printf_float+0xce>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e7bf      	b.n	8008cd4 <_printf_float+0xcc>
 8008d54:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008d58:	d9db      	bls.n	8008d12 <_printf_float+0x10a>
 8008d5a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008d5e:	d118      	bne.n	8008d92 <_printf_float+0x18a>
 8008d60:	2900      	cmp	r1, #0
 8008d62:	6863      	ldr	r3, [r4, #4]
 8008d64:	dd0b      	ble.n	8008d7e <_printf_float+0x176>
 8008d66:	6121      	str	r1, [r4, #16]
 8008d68:	b913      	cbnz	r3, 8008d70 <_printf_float+0x168>
 8008d6a:	6822      	ldr	r2, [r4, #0]
 8008d6c:	07d0      	lsls	r0, r2, #31
 8008d6e:	d502      	bpl.n	8008d76 <_printf_float+0x16e>
 8008d70:	3301      	adds	r3, #1
 8008d72:	440b      	add	r3, r1
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d78:	f04f 0a00 	mov.w	sl, #0
 8008d7c:	e7db      	b.n	8008d36 <_printf_float+0x12e>
 8008d7e:	b913      	cbnz	r3, 8008d86 <_printf_float+0x17e>
 8008d80:	6822      	ldr	r2, [r4, #0]
 8008d82:	07d2      	lsls	r2, r2, #31
 8008d84:	d501      	bpl.n	8008d8a <_printf_float+0x182>
 8008d86:	3302      	adds	r3, #2
 8008d88:	e7f4      	b.n	8008d74 <_printf_float+0x16c>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e7f2      	b.n	8008d74 <_printf_float+0x16c>
 8008d8e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d94:	4299      	cmp	r1, r3
 8008d96:	db05      	blt.n	8008da4 <_printf_float+0x19c>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	6121      	str	r1, [r4, #16]
 8008d9c:	07d8      	lsls	r0, r3, #31
 8008d9e:	d5ea      	bpl.n	8008d76 <_printf_float+0x16e>
 8008da0:	1c4b      	adds	r3, r1, #1
 8008da2:	e7e7      	b.n	8008d74 <_printf_float+0x16c>
 8008da4:	2900      	cmp	r1, #0
 8008da6:	bfd4      	ite	le
 8008da8:	f1c1 0202 	rsble	r2, r1, #2
 8008dac:	2201      	movgt	r2, #1
 8008dae:	4413      	add	r3, r2
 8008db0:	e7e0      	b.n	8008d74 <_printf_float+0x16c>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	055a      	lsls	r2, r3, #21
 8008db6:	d407      	bmi.n	8008dc8 <_printf_float+0x1c0>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	4642      	mov	r2, r8
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b8      	blx	r7
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d12a      	bne.n	8008e1c <_printf_float+0x214>
 8008dc6:	e76b      	b.n	8008ca0 <_printf_float+0x98>
 8008dc8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008dcc:	f240 80e0 	bls.w	8008f90 <_printf_float+0x388>
 8008dd0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008dd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ddc:	d133      	bne.n	8008e46 <_printf_float+0x23e>
 8008dde:	4a38      	ldr	r2, [pc, #224]	@ (8008ec0 <_printf_float+0x2b8>)
 8008de0:	2301      	movs	r3, #1
 8008de2:	4631      	mov	r1, r6
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b8      	blx	r7
 8008de8:	3001      	adds	r0, #1
 8008dea:	f43f af59 	beq.w	8008ca0 <_printf_float+0x98>
 8008dee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008df2:	4543      	cmp	r3, r8
 8008df4:	db02      	blt.n	8008dfc <_printf_float+0x1f4>
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	07d8      	lsls	r0, r3, #31
 8008dfa:	d50f      	bpl.n	8008e1c <_printf_float+0x214>
 8008dfc:	9b05      	ldr	r3, [sp, #20]
 8008dfe:	465a      	mov	r2, fp
 8008e00:	4631      	mov	r1, r6
 8008e02:	4628      	mov	r0, r5
 8008e04:	47b8      	blx	r7
 8008e06:	3001      	adds	r0, #1
 8008e08:	f43f af4a 	beq.w	8008ca0 <_printf_float+0x98>
 8008e0c:	f04f 0900 	mov.w	r9, #0
 8008e10:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e14:	f104 0a1a 	add.w	sl, r4, #26
 8008e18:	45c8      	cmp	r8, r9
 8008e1a:	dc09      	bgt.n	8008e30 <_printf_float+0x228>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	079b      	lsls	r3, r3, #30
 8008e20:	f100 8107 	bmi.w	8009032 <_printf_float+0x42a>
 8008e24:	68e0      	ldr	r0, [r4, #12]
 8008e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e28:	4298      	cmp	r0, r3
 8008e2a:	bfb8      	it	lt
 8008e2c:	4618      	movlt	r0, r3
 8008e2e:	e739      	b.n	8008ca4 <_printf_float+0x9c>
 8008e30:	2301      	movs	r3, #1
 8008e32:	4652      	mov	r2, sl
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f43f af30 	beq.w	8008ca0 <_printf_float+0x98>
 8008e40:	f109 0901 	add.w	r9, r9, #1
 8008e44:	e7e8      	b.n	8008e18 <_printf_float+0x210>
 8008e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dc3b      	bgt.n	8008ec4 <_printf_float+0x2bc>
 8008e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec0 <_printf_float+0x2b8>)
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4631      	mov	r1, r6
 8008e52:	4628      	mov	r0, r5
 8008e54:	47b8      	blx	r7
 8008e56:	3001      	adds	r0, #1
 8008e58:	f43f af22 	beq.w	8008ca0 <_printf_float+0x98>
 8008e5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e60:	ea59 0303 	orrs.w	r3, r9, r3
 8008e64:	d102      	bne.n	8008e6c <_printf_float+0x264>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	07d9      	lsls	r1, r3, #31
 8008e6a:	d5d7      	bpl.n	8008e1c <_printf_float+0x214>
 8008e6c:	9b05      	ldr	r3, [sp, #20]
 8008e6e:	465a      	mov	r2, fp
 8008e70:	4631      	mov	r1, r6
 8008e72:	4628      	mov	r0, r5
 8008e74:	47b8      	blx	r7
 8008e76:	3001      	adds	r0, #1
 8008e78:	f43f af12 	beq.w	8008ca0 <_printf_float+0x98>
 8008e7c:	f04f 0a00 	mov.w	sl, #0
 8008e80:	f104 0b1a 	add.w	fp, r4, #26
 8008e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e86:	425b      	negs	r3, r3
 8008e88:	4553      	cmp	r3, sl
 8008e8a:	dc01      	bgt.n	8008e90 <_printf_float+0x288>
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	e794      	b.n	8008dba <_printf_float+0x1b2>
 8008e90:	2301      	movs	r3, #1
 8008e92:	465a      	mov	r2, fp
 8008e94:	4631      	mov	r1, r6
 8008e96:	4628      	mov	r0, r5
 8008e98:	47b8      	blx	r7
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	f43f af00 	beq.w	8008ca0 <_printf_float+0x98>
 8008ea0:	f10a 0a01 	add.w	sl, sl, #1
 8008ea4:	e7ee      	b.n	8008e84 <_printf_float+0x27c>
 8008ea6:	bf00      	nop
 8008ea8:	ffffffff 	.word	0xffffffff
 8008eac:	7fefffff 	.word	0x7fefffff
 8008eb0:	0800b454 	.word	0x0800b454
 8008eb4:	0800b458 	.word	0x0800b458
 8008eb8:	0800b45c 	.word	0x0800b45c
 8008ebc:	0800b460 	.word	0x0800b460
 8008ec0:	0800b464 	.word	0x0800b464
 8008ec4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ec6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008eca:	4553      	cmp	r3, sl
 8008ecc:	bfa8      	it	ge
 8008ece:	4653      	movge	r3, sl
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	4699      	mov	r9, r3
 8008ed4:	dc37      	bgt.n	8008f46 <_printf_float+0x33e>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	9307      	str	r3, [sp, #28]
 8008eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ede:	f104 021a 	add.w	r2, r4, #26
 8008ee2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ee4:	9907      	ldr	r1, [sp, #28]
 8008ee6:	9306      	str	r3, [sp, #24]
 8008ee8:	eba3 0309 	sub.w	r3, r3, r9
 8008eec:	428b      	cmp	r3, r1
 8008eee:	dc31      	bgt.n	8008f54 <_printf_float+0x34c>
 8008ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef2:	459a      	cmp	sl, r3
 8008ef4:	dc3b      	bgt.n	8008f6e <_printf_float+0x366>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	07da      	lsls	r2, r3, #31
 8008efa:	d438      	bmi.n	8008f6e <_printf_float+0x366>
 8008efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efe:	ebaa 0903 	sub.w	r9, sl, r3
 8008f02:	9b06      	ldr	r3, [sp, #24]
 8008f04:	ebaa 0303 	sub.w	r3, sl, r3
 8008f08:	4599      	cmp	r9, r3
 8008f0a:	bfa8      	it	ge
 8008f0c:	4699      	movge	r9, r3
 8008f0e:	f1b9 0f00 	cmp.w	r9, #0
 8008f12:	dc34      	bgt.n	8008f7e <_printf_float+0x376>
 8008f14:	f04f 0800 	mov.w	r8, #0
 8008f18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f1c:	f104 0b1a 	add.w	fp, r4, #26
 8008f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f22:	ebaa 0303 	sub.w	r3, sl, r3
 8008f26:	eba3 0309 	sub.w	r3, r3, r9
 8008f2a:	4543      	cmp	r3, r8
 8008f2c:	f77f af76 	ble.w	8008e1c <_printf_float+0x214>
 8008f30:	2301      	movs	r3, #1
 8008f32:	465a      	mov	r2, fp
 8008f34:	4631      	mov	r1, r6
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b8      	blx	r7
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	f43f aeb0 	beq.w	8008ca0 <_printf_float+0x98>
 8008f40:	f108 0801 	add.w	r8, r8, #1
 8008f44:	e7ec      	b.n	8008f20 <_printf_float+0x318>
 8008f46:	4642      	mov	r2, r8
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	47b8      	blx	r7
 8008f4e:	3001      	adds	r0, #1
 8008f50:	d1c1      	bne.n	8008ed6 <_printf_float+0x2ce>
 8008f52:	e6a5      	b.n	8008ca0 <_printf_float+0x98>
 8008f54:	2301      	movs	r3, #1
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	9206      	str	r2, [sp, #24]
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f43f ae9e 	beq.w	8008ca0 <_printf_float+0x98>
 8008f64:	9b07      	ldr	r3, [sp, #28]
 8008f66:	9a06      	ldr	r2, [sp, #24]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	9307      	str	r3, [sp, #28]
 8008f6c:	e7b9      	b.n	8008ee2 <_printf_float+0x2da>
 8008f6e:	9b05      	ldr	r3, [sp, #20]
 8008f70:	465a      	mov	r2, fp
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d1bf      	bne.n	8008efc <_printf_float+0x2f4>
 8008f7c:	e690      	b.n	8008ca0 <_printf_float+0x98>
 8008f7e:	9a06      	ldr	r2, [sp, #24]
 8008f80:	464b      	mov	r3, r9
 8008f82:	4442      	add	r2, r8
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b8      	blx	r7
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d1c2      	bne.n	8008f14 <_printf_float+0x30c>
 8008f8e:	e687      	b.n	8008ca0 <_printf_float+0x98>
 8008f90:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008f94:	f1b9 0f01 	cmp.w	r9, #1
 8008f98:	dc01      	bgt.n	8008f9e <_printf_float+0x396>
 8008f9a:	07db      	lsls	r3, r3, #31
 8008f9c:	d536      	bpl.n	800900c <_printf_float+0x404>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	f43f ae79 	beq.w	8008ca0 <_printf_float+0x98>
 8008fae:	9b05      	ldr	r3, [sp, #20]
 8008fb0:	465a      	mov	r2, fp
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f43f ae71 	beq.w	8008ca0 <_printf_float+0x98>
 8008fbe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008fc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fca:	f109 39ff 	add.w	r9, r9, #4294967295
 8008fce:	d018      	beq.n	8009002 <_printf_float+0x3fa>
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	f108 0201 	add.w	r2, r8, #1
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d10c      	bne.n	8008ffa <_printf_float+0x3f2>
 8008fe0:	e65e      	b.n	8008ca0 <_printf_float+0x98>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	465a      	mov	r2, fp
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b8      	blx	r7
 8008fec:	3001      	adds	r0, #1
 8008fee:	f43f ae57 	beq.w	8008ca0 <_printf_float+0x98>
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	45c8      	cmp	r8, r9
 8008ff8:	dbf3      	blt.n	8008fe2 <_printf_float+0x3da>
 8008ffa:	4653      	mov	r3, sl
 8008ffc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009000:	e6dc      	b.n	8008dbc <_printf_float+0x1b4>
 8009002:	f04f 0800 	mov.w	r8, #0
 8009006:	f104 0b1a 	add.w	fp, r4, #26
 800900a:	e7f4      	b.n	8008ff6 <_printf_float+0x3ee>
 800900c:	2301      	movs	r3, #1
 800900e:	4642      	mov	r2, r8
 8009010:	e7e1      	b.n	8008fd6 <_printf_float+0x3ce>
 8009012:	2301      	movs	r3, #1
 8009014:	464a      	mov	r2, r9
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	f43f ae3f 	beq.w	8008ca0 <_printf_float+0x98>
 8009022:	f108 0801 	add.w	r8, r8, #1
 8009026:	68e3      	ldr	r3, [r4, #12]
 8009028:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800902a:	1a5b      	subs	r3, r3, r1
 800902c:	4543      	cmp	r3, r8
 800902e:	dcf0      	bgt.n	8009012 <_printf_float+0x40a>
 8009030:	e6f8      	b.n	8008e24 <_printf_float+0x21c>
 8009032:	f04f 0800 	mov.w	r8, #0
 8009036:	f104 0919 	add.w	r9, r4, #25
 800903a:	e7f4      	b.n	8009026 <_printf_float+0x41e>

0800903c <_printf_common>:
 800903c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009040:	4616      	mov	r6, r2
 8009042:	4698      	mov	r8, r3
 8009044:	688a      	ldr	r2, [r1, #8]
 8009046:	690b      	ldr	r3, [r1, #16]
 8009048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800904c:	4293      	cmp	r3, r2
 800904e:	bfb8      	it	lt
 8009050:	4613      	movlt	r3, r2
 8009052:	6033      	str	r3, [r6, #0]
 8009054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009058:	4607      	mov	r7, r0
 800905a:	460c      	mov	r4, r1
 800905c:	b10a      	cbz	r2, 8009062 <_printf_common+0x26>
 800905e:	3301      	adds	r3, #1
 8009060:	6033      	str	r3, [r6, #0]
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	0699      	lsls	r1, r3, #26
 8009066:	bf42      	ittt	mi
 8009068:	6833      	ldrmi	r3, [r6, #0]
 800906a:	3302      	addmi	r3, #2
 800906c:	6033      	strmi	r3, [r6, #0]
 800906e:	6825      	ldr	r5, [r4, #0]
 8009070:	f015 0506 	ands.w	r5, r5, #6
 8009074:	d106      	bne.n	8009084 <_printf_common+0x48>
 8009076:	f104 0a19 	add.w	sl, r4, #25
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	6832      	ldr	r2, [r6, #0]
 800907e:	1a9b      	subs	r3, r3, r2
 8009080:	42ab      	cmp	r3, r5
 8009082:	dc26      	bgt.n	80090d2 <_printf_common+0x96>
 8009084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009088:	6822      	ldr	r2, [r4, #0]
 800908a:	3b00      	subs	r3, #0
 800908c:	bf18      	it	ne
 800908e:	2301      	movne	r3, #1
 8009090:	0692      	lsls	r2, r2, #26
 8009092:	d42b      	bmi.n	80090ec <_printf_common+0xb0>
 8009094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009098:	4641      	mov	r1, r8
 800909a:	4638      	mov	r0, r7
 800909c:	47c8      	blx	r9
 800909e:	3001      	adds	r0, #1
 80090a0:	d01e      	beq.n	80090e0 <_printf_common+0xa4>
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	6922      	ldr	r2, [r4, #16]
 80090a6:	f003 0306 	and.w	r3, r3, #6
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	bf02      	ittt	eq
 80090ae:	68e5      	ldreq	r5, [r4, #12]
 80090b0:	6833      	ldreq	r3, [r6, #0]
 80090b2:	1aed      	subeq	r5, r5, r3
 80090b4:	68a3      	ldr	r3, [r4, #8]
 80090b6:	bf0c      	ite	eq
 80090b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090bc:	2500      	movne	r5, #0
 80090be:	4293      	cmp	r3, r2
 80090c0:	bfc4      	itt	gt
 80090c2:	1a9b      	subgt	r3, r3, r2
 80090c4:	18ed      	addgt	r5, r5, r3
 80090c6:	2600      	movs	r6, #0
 80090c8:	341a      	adds	r4, #26
 80090ca:	42b5      	cmp	r5, r6
 80090cc:	d11a      	bne.n	8009104 <_printf_common+0xc8>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e008      	b.n	80090e4 <_printf_common+0xa8>
 80090d2:	2301      	movs	r3, #1
 80090d4:	4652      	mov	r2, sl
 80090d6:	4641      	mov	r1, r8
 80090d8:	4638      	mov	r0, r7
 80090da:	47c8      	blx	r9
 80090dc:	3001      	adds	r0, #1
 80090de:	d103      	bne.n	80090e8 <_printf_common+0xac>
 80090e0:	f04f 30ff 	mov.w	r0, #4294967295
 80090e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e8:	3501      	adds	r5, #1
 80090ea:	e7c6      	b.n	800907a <_printf_common+0x3e>
 80090ec:	18e1      	adds	r1, r4, r3
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	2030      	movs	r0, #48	@ 0x30
 80090f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090f6:	4422      	add	r2, r4
 80090f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009100:	3302      	adds	r3, #2
 8009102:	e7c7      	b.n	8009094 <_printf_common+0x58>
 8009104:	2301      	movs	r3, #1
 8009106:	4622      	mov	r2, r4
 8009108:	4641      	mov	r1, r8
 800910a:	4638      	mov	r0, r7
 800910c:	47c8      	blx	r9
 800910e:	3001      	adds	r0, #1
 8009110:	d0e6      	beq.n	80090e0 <_printf_common+0xa4>
 8009112:	3601      	adds	r6, #1
 8009114:	e7d9      	b.n	80090ca <_printf_common+0x8e>
	...

08009118 <_printf_i>:
 8009118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800911c:	7e0f      	ldrb	r7, [r1, #24]
 800911e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009120:	2f78      	cmp	r7, #120	@ 0x78
 8009122:	4691      	mov	r9, r2
 8009124:	4680      	mov	r8, r0
 8009126:	460c      	mov	r4, r1
 8009128:	469a      	mov	sl, r3
 800912a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800912e:	d807      	bhi.n	8009140 <_printf_i+0x28>
 8009130:	2f62      	cmp	r7, #98	@ 0x62
 8009132:	d80a      	bhi.n	800914a <_printf_i+0x32>
 8009134:	2f00      	cmp	r7, #0
 8009136:	f000 80d2 	beq.w	80092de <_printf_i+0x1c6>
 800913a:	2f58      	cmp	r7, #88	@ 0x58
 800913c:	f000 80b9 	beq.w	80092b2 <_printf_i+0x19a>
 8009140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009148:	e03a      	b.n	80091c0 <_printf_i+0xa8>
 800914a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800914e:	2b15      	cmp	r3, #21
 8009150:	d8f6      	bhi.n	8009140 <_printf_i+0x28>
 8009152:	a101      	add	r1, pc, #4	@ (adr r1, 8009158 <_printf_i+0x40>)
 8009154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009158:	080091b1 	.word	0x080091b1
 800915c:	080091c5 	.word	0x080091c5
 8009160:	08009141 	.word	0x08009141
 8009164:	08009141 	.word	0x08009141
 8009168:	08009141 	.word	0x08009141
 800916c:	08009141 	.word	0x08009141
 8009170:	080091c5 	.word	0x080091c5
 8009174:	08009141 	.word	0x08009141
 8009178:	08009141 	.word	0x08009141
 800917c:	08009141 	.word	0x08009141
 8009180:	08009141 	.word	0x08009141
 8009184:	080092c5 	.word	0x080092c5
 8009188:	080091ef 	.word	0x080091ef
 800918c:	0800927f 	.word	0x0800927f
 8009190:	08009141 	.word	0x08009141
 8009194:	08009141 	.word	0x08009141
 8009198:	080092e7 	.word	0x080092e7
 800919c:	08009141 	.word	0x08009141
 80091a0:	080091ef 	.word	0x080091ef
 80091a4:	08009141 	.word	0x08009141
 80091a8:	08009141 	.word	0x08009141
 80091ac:	08009287 	.word	0x08009287
 80091b0:	6833      	ldr	r3, [r6, #0]
 80091b2:	1d1a      	adds	r2, r3, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6032      	str	r2, [r6, #0]
 80091b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091c0:	2301      	movs	r3, #1
 80091c2:	e09d      	b.n	8009300 <_printf_i+0x1e8>
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	1d19      	adds	r1, r3, #4
 80091ca:	6031      	str	r1, [r6, #0]
 80091cc:	0606      	lsls	r6, r0, #24
 80091ce:	d501      	bpl.n	80091d4 <_printf_i+0xbc>
 80091d0:	681d      	ldr	r5, [r3, #0]
 80091d2:	e003      	b.n	80091dc <_printf_i+0xc4>
 80091d4:	0645      	lsls	r5, r0, #25
 80091d6:	d5fb      	bpl.n	80091d0 <_printf_i+0xb8>
 80091d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091dc:	2d00      	cmp	r5, #0
 80091de:	da03      	bge.n	80091e8 <_printf_i+0xd0>
 80091e0:	232d      	movs	r3, #45	@ 0x2d
 80091e2:	426d      	negs	r5, r5
 80091e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091e8:	4859      	ldr	r0, [pc, #356]	@ (8009350 <_printf_i+0x238>)
 80091ea:	230a      	movs	r3, #10
 80091ec:	e011      	b.n	8009212 <_printf_i+0xfa>
 80091ee:	6821      	ldr	r1, [r4, #0]
 80091f0:	6833      	ldr	r3, [r6, #0]
 80091f2:	0608      	lsls	r0, r1, #24
 80091f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80091f8:	d402      	bmi.n	8009200 <_printf_i+0xe8>
 80091fa:	0649      	lsls	r1, r1, #25
 80091fc:	bf48      	it	mi
 80091fe:	b2ad      	uxthmi	r5, r5
 8009200:	2f6f      	cmp	r7, #111	@ 0x6f
 8009202:	4853      	ldr	r0, [pc, #332]	@ (8009350 <_printf_i+0x238>)
 8009204:	6033      	str	r3, [r6, #0]
 8009206:	bf14      	ite	ne
 8009208:	230a      	movne	r3, #10
 800920a:	2308      	moveq	r3, #8
 800920c:	2100      	movs	r1, #0
 800920e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009212:	6866      	ldr	r6, [r4, #4]
 8009214:	60a6      	str	r6, [r4, #8]
 8009216:	2e00      	cmp	r6, #0
 8009218:	bfa2      	ittt	ge
 800921a:	6821      	ldrge	r1, [r4, #0]
 800921c:	f021 0104 	bicge.w	r1, r1, #4
 8009220:	6021      	strge	r1, [r4, #0]
 8009222:	b90d      	cbnz	r5, 8009228 <_printf_i+0x110>
 8009224:	2e00      	cmp	r6, #0
 8009226:	d04b      	beq.n	80092c0 <_printf_i+0x1a8>
 8009228:	4616      	mov	r6, r2
 800922a:	fbb5 f1f3 	udiv	r1, r5, r3
 800922e:	fb03 5711 	mls	r7, r3, r1, r5
 8009232:	5dc7      	ldrb	r7, [r0, r7]
 8009234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009238:	462f      	mov	r7, r5
 800923a:	42bb      	cmp	r3, r7
 800923c:	460d      	mov	r5, r1
 800923e:	d9f4      	bls.n	800922a <_printf_i+0x112>
 8009240:	2b08      	cmp	r3, #8
 8009242:	d10b      	bne.n	800925c <_printf_i+0x144>
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	07df      	lsls	r7, r3, #31
 8009248:	d508      	bpl.n	800925c <_printf_i+0x144>
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	6861      	ldr	r1, [r4, #4]
 800924e:	4299      	cmp	r1, r3
 8009250:	bfde      	ittt	le
 8009252:	2330      	movle	r3, #48	@ 0x30
 8009254:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009258:	f106 36ff 	addle.w	r6, r6, #4294967295
 800925c:	1b92      	subs	r2, r2, r6
 800925e:	6122      	str	r2, [r4, #16]
 8009260:	f8cd a000 	str.w	sl, [sp]
 8009264:	464b      	mov	r3, r9
 8009266:	aa03      	add	r2, sp, #12
 8009268:	4621      	mov	r1, r4
 800926a:	4640      	mov	r0, r8
 800926c:	f7ff fee6 	bl	800903c <_printf_common>
 8009270:	3001      	adds	r0, #1
 8009272:	d14a      	bne.n	800930a <_printf_i+0x1f2>
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	b004      	add	sp, #16
 800927a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	f043 0320 	orr.w	r3, r3, #32
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	4833      	ldr	r0, [pc, #204]	@ (8009354 <_printf_i+0x23c>)
 8009288:	2778      	movs	r7, #120	@ 0x78
 800928a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	6831      	ldr	r1, [r6, #0]
 8009292:	061f      	lsls	r7, r3, #24
 8009294:	f851 5b04 	ldr.w	r5, [r1], #4
 8009298:	d402      	bmi.n	80092a0 <_printf_i+0x188>
 800929a:	065f      	lsls	r7, r3, #25
 800929c:	bf48      	it	mi
 800929e:	b2ad      	uxthmi	r5, r5
 80092a0:	6031      	str	r1, [r6, #0]
 80092a2:	07d9      	lsls	r1, r3, #31
 80092a4:	bf44      	itt	mi
 80092a6:	f043 0320 	orrmi.w	r3, r3, #32
 80092aa:	6023      	strmi	r3, [r4, #0]
 80092ac:	b11d      	cbz	r5, 80092b6 <_printf_i+0x19e>
 80092ae:	2310      	movs	r3, #16
 80092b0:	e7ac      	b.n	800920c <_printf_i+0xf4>
 80092b2:	4827      	ldr	r0, [pc, #156]	@ (8009350 <_printf_i+0x238>)
 80092b4:	e7e9      	b.n	800928a <_printf_i+0x172>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	f023 0320 	bic.w	r3, r3, #32
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	e7f6      	b.n	80092ae <_printf_i+0x196>
 80092c0:	4616      	mov	r6, r2
 80092c2:	e7bd      	b.n	8009240 <_printf_i+0x128>
 80092c4:	6833      	ldr	r3, [r6, #0]
 80092c6:	6825      	ldr	r5, [r4, #0]
 80092c8:	6961      	ldr	r1, [r4, #20]
 80092ca:	1d18      	adds	r0, r3, #4
 80092cc:	6030      	str	r0, [r6, #0]
 80092ce:	062e      	lsls	r6, r5, #24
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	d501      	bpl.n	80092d8 <_printf_i+0x1c0>
 80092d4:	6019      	str	r1, [r3, #0]
 80092d6:	e002      	b.n	80092de <_printf_i+0x1c6>
 80092d8:	0668      	lsls	r0, r5, #25
 80092da:	d5fb      	bpl.n	80092d4 <_printf_i+0x1bc>
 80092dc:	8019      	strh	r1, [r3, #0]
 80092de:	2300      	movs	r3, #0
 80092e0:	6123      	str	r3, [r4, #16]
 80092e2:	4616      	mov	r6, r2
 80092e4:	e7bc      	b.n	8009260 <_printf_i+0x148>
 80092e6:	6833      	ldr	r3, [r6, #0]
 80092e8:	1d1a      	adds	r2, r3, #4
 80092ea:	6032      	str	r2, [r6, #0]
 80092ec:	681e      	ldr	r6, [r3, #0]
 80092ee:	6862      	ldr	r2, [r4, #4]
 80092f0:	2100      	movs	r1, #0
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7f6 fff4 	bl	80002e0 <memchr>
 80092f8:	b108      	cbz	r0, 80092fe <_printf_i+0x1e6>
 80092fa:	1b80      	subs	r0, r0, r6
 80092fc:	6060      	str	r0, [r4, #4]
 80092fe:	6863      	ldr	r3, [r4, #4]
 8009300:	6123      	str	r3, [r4, #16]
 8009302:	2300      	movs	r3, #0
 8009304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009308:	e7aa      	b.n	8009260 <_printf_i+0x148>
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	4632      	mov	r2, r6
 800930e:	4649      	mov	r1, r9
 8009310:	4640      	mov	r0, r8
 8009312:	47d0      	blx	sl
 8009314:	3001      	adds	r0, #1
 8009316:	d0ad      	beq.n	8009274 <_printf_i+0x15c>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	079b      	lsls	r3, r3, #30
 800931c:	d413      	bmi.n	8009346 <_printf_i+0x22e>
 800931e:	68e0      	ldr	r0, [r4, #12]
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	4298      	cmp	r0, r3
 8009324:	bfb8      	it	lt
 8009326:	4618      	movlt	r0, r3
 8009328:	e7a6      	b.n	8009278 <_printf_i+0x160>
 800932a:	2301      	movs	r3, #1
 800932c:	4632      	mov	r2, r6
 800932e:	4649      	mov	r1, r9
 8009330:	4640      	mov	r0, r8
 8009332:	47d0      	blx	sl
 8009334:	3001      	adds	r0, #1
 8009336:	d09d      	beq.n	8009274 <_printf_i+0x15c>
 8009338:	3501      	adds	r5, #1
 800933a:	68e3      	ldr	r3, [r4, #12]
 800933c:	9903      	ldr	r1, [sp, #12]
 800933e:	1a5b      	subs	r3, r3, r1
 8009340:	42ab      	cmp	r3, r5
 8009342:	dcf2      	bgt.n	800932a <_printf_i+0x212>
 8009344:	e7eb      	b.n	800931e <_printf_i+0x206>
 8009346:	2500      	movs	r5, #0
 8009348:	f104 0619 	add.w	r6, r4, #25
 800934c:	e7f5      	b.n	800933a <_printf_i+0x222>
 800934e:	bf00      	nop
 8009350:	0800b466 	.word	0x0800b466
 8009354:	0800b477 	.word	0x0800b477

08009358 <std>:
 8009358:	2300      	movs	r3, #0
 800935a:	b510      	push	{r4, lr}
 800935c:	4604      	mov	r4, r0
 800935e:	e9c0 3300 	strd	r3, r3, [r0]
 8009362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009366:	6083      	str	r3, [r0, #8]
 8009368:	8181      	strh	r1, [r0, #12]
 800936a:	6643      	str	r3, [r0, #100]	@ 0x64
 800936c:	81c2      	strh	r2, [r0, #14]
 800936e:	6183      	str	r3, [r0, #24]
 8009370:	4619      	mov	r1, r3
 8009372:	2208      	movs	r2, #8
 8009374:	305c      	adds	r0, #92	@ 0x5c
 8009376:	f000 f906 	bl	8009586 <memset>
 800937a:	4b0d      	ldr	r3, [pc, #52]	@ (80093b0 <std+0x58>)
 800937c:	6263      	str	r3, [r4, #36]	@ 0x24
 800937e:	4b0d      	ldr	r3, [pc, #52]	@ (80093b4 <std+0x5c>)
 8009380:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009382:	4b0d      	ldr	r3, [pc, #52]	@ (80093b8 <std+0x60>)
 8009384:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009386:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <std+0x64>)
 8009388:	6323      	str	r3, [r4, #48]	@ 0x30
 800938a:	4b0d      	ldr	r3, [pc, #52]	@ (80093c0 <std+0x68>)
 800938c:	6224      	str	r4, [r4, #32]
 800938e:	429c      	cmp	r4, r3
 8009390:	d006      	beq.n	80093a0 <std+0x48>
 8009392:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009396:	4294      	cmp	r4, r2
 8009398:	d002      	beq.n	80093a0 <std+0x48>
 800939a:	33d0      	adds	r3, #208	@ 0xd0
 800939c:	429c      	cmp	r4, r3
 800939e:	d105      	bne.n	80093ac <std+0x54>
 80093a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a8:	f000 b9c0 	b.w	800972c <__retarget_lock_init_recursive>
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	bf00      	nop
 80093b0:	08009501 	.word	0x08009501
 80093b4:	08009523 	.word	0x08009523
 80093b8:	0800955b 	.word	0x0800955b
 80093bc:	0800957f 	.word	0x0800957f
 80093c0:	24004d18 	.word	0x24004d18

080093c4 <stdio_exit_handler>:
 80093c4:	4a02      	ldr	r2, [pc, #8]	@ (80093d0 <stdio_exit_handler+0xc>)
 80093c6:	4903      	ldr	r1, [pc, #12]	@ (80093d4 <stdio_exit_handler+0x10>)
 80093c8:	4803      	ldr	r0, [pc, #12]	@ (80093d8 <stdio_exit_handler+0x14>)
 80093ca:	f000 b869 	b.w	80094a0 <_fwalk_sglue>
 80093ce:	bf00      	nop
 80093d0:	24000014 	.word	0x24000014
 80093d4:	0800af9d 	.word	0x0800af9d
 80093d8:	24000024 	.word	0x24000024

080093dc <cleanup_stdio>:
 80093dc:	6841      	ldr	r1, [r0, #4]
 80093de:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <cleanup_stdio+0x34>)
 80093e0:	4299      	cmp	r1, r3
 80093e2:	b510      	push	{r4, lr}
 80093e4:	4604      	mov	r4, r0
 80093e6:	d001      	beq.n	80093ec <cleanup_stdio+0x10>
 80093e8:	f001 fdd8 	bl	800af9c <_fflush_r>
 80093ec:	68a1      	ldr	r1, [r4, #8]
 80093ee:	4b09      	ldr	r3, [pc, #36]	@ (8009414 <cleanup_stdio+0x38>)
 80093f0:	4299      	cmp	r1, r3
 80093f2:	d002      	beq.n	80093fa <cleanup_stdio+0x1e>
 80093f4:	4620      	mov	r0, r4
 80093f6:	f001 fdd1 	bl	800af9c <_fflush_r>
 80093fa:	68e1      	ldr	r1, [r4, #12]
 80093fc:	4b06      	ldr	r3, [pc, #24]	@ (8009418 <cleanup_stdio+0x3c>)
 80093fe:	4299      	cmp	r1, r3
 8009400:	d004      	beq.n	800940c <cleanup_stdio+0x30>
 8009402:	4620      	mov	r0, r4
 8009404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009408:	f001 bdc8 	b.w	800af9c <_fflush_r>
 800940c:	bd10      	pop	{r4, pc}
 800940e:	bf00      	nop
 8009410:	24004d18 	.word	0x24004d18
 8009414:	24004d80 	.word	0x24004d80
 8009418:	24004de8 	.word	0x24004de8

0800941c <global_stdio_init.part.0>:
 800941c:	b510      	push	{r4, lr}
 800941e:	4b0b      	ldr	r3, [pc, #44]	@ (800944c <global_stdio_init.part.0+0x30>)
 8009420:	4c0b      	ldr	r4, [pc, #44]	@ (8009450 <global_stdio_init.part.0+0x34>)
 8009422:	4a0c      	ldr	r2, [pc, #48]	@ (8009454 <global_stdio_init.part.0+0x38>)
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	4620      	mov	r0, r4
 8009428:	2200      	movs	r2, #0
 800942a:	2104      	movs	r1, #4
 800942c:	f7ff ff94 	bl	8009358 <std>
 8009430:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009434:	2201      	movs	r2, #1
 8009436:	2109      	movs	r1, #9
 8009438:	f7ff ff8e 	bl	8009358 <std>
 800943c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009440:	2202      	movs	r2, #2
 8009442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009446:	2112      	movs	r1, #18
 8009448:	f7ff bf86 	b.w	8009358 <std>
 800944c:	24004e50 	.word	0x24004e50
 8009450:	24004d18 	.word	0x24004d18
 8009454:	080093c5 	.word	0x080093c5

08009458 <__sfp_lock_acquire>:
 8009458:	4801      	ldr	r0, [pc, #4]	@ (8009460 <__sfp_lock_acquire+0x8>)
 800945a:	f000 b968 	b.w	800972e <__retarget_lock_acquire_recursive>
 800945e:	bf00      	nop
 8009460:	24004e59 	.word	0x24004e59

08009464 <__sfp_lock_release>:
 8009464:	4801      	ldr	r0, [pc, #4]	@ (800946c <__sfp_lock_release+0x8>)
 8009466:	f000 b963 	b.w	8009730 <__retarget_lock_release_recursive>
 800946a:	bf00      	nop
 800946c:	24004e59 	.word	0x24004e59

08009470 <__sinit>:
 8009470:	b510      	push	{r4, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	f7ff fff0 	bl	8009458 <__sfp_lock_acquire>
 8009478:	6a23      	ldr	r3, [r4, #32]
 800947a:	b11b      	cbz	r3, 8009484 <__sinit+0x14>
 800947c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009480:	f7ff bff0 	b.w	8009464 <__sfp_lock_release>
 8009484:	4b04      	ldr	r3, [pc, #16]	@ (8009498 <__sinit+0x28>)
 8009486:	6223      	str	r3, [r4, #32]
 8009488:	4b04      	ldr	r3, [pc, #16]	@ (800949c <__sinit+0x2c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1f5      	bne.n	800947c <__sinit+0xc>
 8009490:	f7ff ffc4 	bl	800941c <global_stdio_init.part.0>
 8009494:	e7f2      	b.n	800947c <__sinit+0xc>
 8009496:	bf00      	nop
 8009498:	080093dd 	.word	0x080093dd
 800949c:	24004e50 	.word	0x24004e50

080094a0 <_fwalk_sglue>:
 80094a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a4:	4607      	mov	r7, r0
 80094a6:	4688      	mov	r8, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	2600      	movs	r6, #0
 80094ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094b0:	f1b9 0901 	subs.w	r9, r9, #1
 80094b4:	d505      	bpl.n	80094c2 <_fwalk_sglue+0x22>
 80094b6:	6824      	ldr	r4, [r4, #0]
 80094b8:	2c00      	cmp	r4, #0
 80094ba:	d1f7      	bne.n	80094ac <_fwalk_sglue+0xc>
 80094bc:	4630      	mov	r0, r6
 80094be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d907      	bls.n	80094d8 <_fwalk_sglue+0x38>
 80094c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094cc:	3301      	adds	r3, #1
 80094ce:	d003      	beq.n	80094d8 <_fwalk_sglue+0x38>
 80094d0:	4629      	mov	r1, r5
 80094d2:	4638      	mov	r0, r7
 80094d4:	47c0      	blx	r8
 80094d6:	4306      	orrs	r6, r0
 80094d8:	3568      	adds	r5, #104	@ 0x68
 80094da:	e7e9      	b.n	80094b0 <_fwalk_sglue+0x10>

080094dc <iprintf>:
 80094dc:	b40f      	push	{r0, r1, r2, r3}
 80094de:	b507      	push	{r0, r1, r2, lr}
 80094e0:	4906      	ldr	r1, [pc, #24]	@ (80094fc <iprintf+0x20>)
 80094e2:	ab04      	add	r3, sp, #16
 80094e4:	6808      	ldr	r0, [r1, #0]
 80094e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ea:	6881      	ldr	r1, [r0, #8]
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	f001 fbb9 	bl	800ac64 <_vfiprintf_r>
 80094f2:	b003      	add	sp, #12
 80094f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094f8:	b004      	add	sp, #16
 80094fa:	4770      	bx	lr
 80094fc:	24000020 	.word	0x24000020

08009500 <__sread>:
 8009500:	b510      	push	{r4, lr}
 8009502:	460c      	mov	r4, r1
 8009504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009508:	f000 f8c2 	bl	8009690 <_read_r>
 800950c:	2800      	cmp	r0, #0
 800950e:	bfab      	itete	ge
 8009510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009512:	89a3      	ldrhlt	r3, [r4, #12]
 8009514:	181b      	addge	r3, r3, r0
 8009516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800951a:	bfac      	ite	ge
 800951c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800951e:	81a3      	strhlt	r3, [r4, #12]
 8009520:	bd10      	pop	{r4, pc}

08009522 <__swrite>:
 8009522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	461f      	mov	r7, r3
 8009528:	898b      	ldrh	r3, [r1, #12]
 800952a:	05db      	lsls	r3, r3, #23
 800952c:	4605      	mov	r5, r0
 800952e:	460c      	mov	r4, r1
 8009530:	4616      	mov	r6, r2
 8009532:	d505      	bpl.n	8009540 <__swrite+0x1e>
 8009534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009538:	2302      	movs	r3, #2
 800953a:	2200      	movs	r2, #0
 800953c:	f000 f896 	bl	800966c <_lseek_r>
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800954a:	81a3      	strh	r3, [r4, #12]
 800954c:	4632      	mov	r2, r6
 800954e:	463b      	mov	r3, r7
 8009550:	4628      	mov	r0, r5
 8009552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009556:	f000 b8ad 	b.w	80096b4 <_write_r>

0800955a <__sseek>:
 800955a:	b510      	push	{r4, lr}
 800955c:	460c      	mov	r4, r1
 800955e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009562:	f000 f883 	bl	800966c <_lseek_r>
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	bf15      	itete	ne
 800956c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800956e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009576:	81a3      	strheq	r3, [r4, #12]
 8009578:	bf18      	it	ne
 800957a:	81a3      	strhne	r3, [r4, #12]
 800957c:	bd10      	pop	{r4, pc}

0800957e <__sclose>:
 800957e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009582:	f000 b80d 	b.w	80095a0 <_close_r>

08009586 <memset>:
 8009586:	4402      	add	r2, r0
 8009588:	4603      	mov	r3, r0
 800958a:	4293      	cmp	r3, r2
 800958c:	d100      	bne.n	8009590 <memset+0xa>
 800958e:	4770      	bx	lr
 8009590:	f803 1b01 	strb.w	r1, [r3], #1
 8009594:	e7f9      	b.n	800958a <memset+0x4>
	...

08009598 <_localeconv_r>:
 8009598:	4800      	ldr	r0, [pc, #0]	@ (800959c <_localeconv_r+0x4>)
 800959a:	4770      	bx	lr
 800959c:	24000160 	.word	0x24000160

080095a0 <_close_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d06      	ldr	r5, [pc, #24]	@ (80095bc <_close_r+0x1c>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	f7f7 fd6e 	bl	800108c <_close>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_close_r+0x1a>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_close_r+0x1a>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	24004e54 	.word	0x24004e54

080095c0 <_reclaim_reent>:
 80095c0:	4b29      	ldr	r3, [pc, #164]	@ (8009668 <_reclaim_reent+0xa8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4283      	cmp	r3, r0
 80095c6:	b570      	push	{r4, r5, r6, lr}
 80095c8:	4604      	mov	r4, r0
 80095ca:	d04b      	beq.n	8009664 <_reclaim_reent+0xa4>
 80095cc:	69c3      	ldr	r3, [r0, #28]
 80095ce:	b1ab      	cbz	r3, 80095fc <_reclaim_reent+0x3c>
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	b16b      	cbz	r3, 80095f0 <_reclaim_reent+0x30>
 80095d4:	2500      	movs	r5, #0
 80095d6:	69e3      	ldr	r3, [r4, #28]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	5959      	ldr	r1, [r3, r5]
 80095dc:	2900      	cmp	r1, #0
 80095de:	d13b      	bne.n	8009658 <_reclaim_reent+0x98>
 80095e0:	3504      	adds	r5, #4
 80095e2:	2d80      	cmp	r5, #128	@ 0x80
 80095e4:	d1f7      	bne.n	80095d6 <_reclaim_reent+0x16>
 80095e6:	69e3      	ldr	r3, [r4, #28]
 80095e8:	4620      	mov	r0, r4
 80095ea:	68d9      	ldr	r1, [r3, #12]
 80095ec:	f000 fe8e 	bl	800a30c <_free_r>
 80095f0:	69e3      	ldr	r3, [r4, #28]
 80095f2:	6819      	ldr	r1, [r3, #0]
 80095f4:	b111      	cbz	r1, 80095fc <_reclaim_reent+0x3c>
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 fe88 	bl	800a30c <_free_r>
 80095fc:	6961      	ldr	r1, [r4, #20]
 80095fe:	b111      	cbz	r1, 8009606 <_reclaim_reent+0x46>
 8009600:	4620      	mov	r0, r4
 8009602:	f000 fe83 	bl	800a30c <_free_r>
 8009606:	69e1      	ldr	r1, [r4, #28]
 8009608:	b111      	cbz	r1, 8009610 <_reclaim_reent+0x50>
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fe7e 	bl	800a30c <_free_r>
 8009610:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009612:	b111      	cbz	r1, 800961a <_reclaim_reent+0x5a>
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fe79 	bl	800a30c <_free_r>
 800961a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800961c:	b111      	cbz	r1, 8009624 <_reclaim_reent+0x64>
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fe74 	bl	800a30c <_free_r>
 8009624:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009626:	b111      	cbz	r1, 800962e <_reclaim_reent+0x6e>
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fe6f 	bl	800a30c <_free_r>
 800962e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009630:	b111      	cbz	r1, 8009638 <_reclaim_reent+0x78>
 8009632:	4620      	mov	r0, r4
 8009634:	f000 fe6a 	bl	800a30c <_free_r>
 8009638:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800963a:	b111      	cbz	r1, 8009642 <_reclaim_reent+0x82>
 800963c:	4620      	mov	r0, r4
 800963e:	f000 fe65 	bl	800a30c <_free_r>
 8009642:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009644:	b111      	cbz	r1, 800964c <_reclaim_reent+0x8c>
 8009646:	4620      	mov	r0, r4
 8009648:	f000 fe60 	bl	800a30c <_free_r>
 800964c:	6a23      	ldr	r3, [r4, #32]
 800964e:	b14b      	cbz	r3, 8009664 <_reclaim_reent+0xa4>
 8009650:	4620      	mov	r0, r4
 8009652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009656:	4718      	bx	r3
 8009658:	680e      	ldr	r6, [r1, #0]
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fe56 	bl	800a30c <_free_r>
 8009660:	4631      	mov	r1, r6
 8009662:	e7bb      	b.n	80095dc <_reclaim_reent+0x1c>
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	bf00      	nop
 8009668:	24000020 	.word	0x24000020

0800966c <_lseek_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d07      	ldr	r5, [pc, #28]	@ (800968c <_lseek_r+0x20>)
 8009670:	4604      	mov	r4, r0
 8009672:	4608      	mov	r0, r1
 8009674:	4611      	mov	r1, r2
 8009676:	2200      	movs	r2, #0
 8009678:	602a      	str	r2, [r5, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	f7f7 fd2d 	bl	80010da <_lseek>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_lseek_r+0x1e>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_lseek_r+0x1e>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	24004e54 	.word	0x24004e54

08009690 <_read_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	@ (80096b0 <_read_r+0x20>)
 8009694:	4604      	mov	r4, r0
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f7 fcbb 	bl	800101a <_read>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_read_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_read_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	24004e54 	.word	0x24004e54

080096b4 <_write_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d07      	ldr	r5, [pc, #28]	@ (80096d4 <_write_r+0x20>)
 80096b8:	4604      	mov	r4, r0
 80096ba:	4608      	mov	r0, r1
 80096bc:	4611      	mov	r1, r2
 80096be:	2200      	movs	r2, #0
 80096c0:	602a      	str	r2, [r5, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f7f7 fcc6 	bl	8001054 <_write>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_write_r+0x1e>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_write_r+0x1e>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	24004e54 	.word	0x24004e54

080096d8 <__errno>:
 80096d8:	4b01      	ldr	r3, [pc, #4]	@ (80096e0 <__errno+0x8>)
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	24000020 	.word	0x24000020

080096e4 <__libc_init_array>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	4d0d      	ldr	r5, [pc, #52]	@ (800971c <__libc_init_array+0x38>)
 80096e8:	4c0d      	ldr	r4, [pc, #52]	@ (8009720 <__libc_init_array+0x3c>)
 80096ea:	1b64      	subs	r4, r4, r5
 80096ec:	10a4      	asrs	r4, r4, #2
 80096ee:	2600      	movs	r6, #0
 80096f0:	42a6      	cmp	r6, r4
 80096f2:	d109      	bne.n	8009708 <__libc_init_array+0x24>
 80096f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009724 <__libc_init_array+0x40>)
 80096f6:	4c0c      	ldr	r4, [pc, #48]	@ (8009728 <__libc_init_array+0x44>)
 80096f8:	f001 fe50 	bl	800b39c <_init>
 80096fc:	1b64      	subs	r4, r4, r5
 80096fe:	10a4      	asrs	r4, r4, #2
 8009700:	2600      	movs	r6, #0
 8009702:	42a6      	cmp	r6, r4
 8009704:	d105      	bne.n	8009712 <__libc_init_array+0x2e>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	f855 3b04 	ldr.w	r3, [r5], #4
 800970c:	4798      	blx	r3
 800970e:	3601      	adds	r6, #1
 8009710:	e7ee      	b.n	80096f0 <__libc_init_array+0xc>
 8009712:	f855 3b04 	ldr.w	r3, [r5], #4
 8009716:	4798      	blx	r3
 8009718:	3601      	adds	r6, #1
 800971a:	e7f2      	b.n	8009702 <__libc_init_array+0x1e>
 800971c:	0800b7d0 	.word	0x0800b7d0
 8009720:	0800b7d0 	.word	0x0800b7d0
 8009724:	0800b7d0 	.word	0x0800b7d0
 8009728:	0800b7d4 	.word	0x0800b7d4

0800972c <__retarget_lock_init_recursive>:
 800972c:	4770      	bx	lr

0800972e <__retarget_lock_acquire_recursive>:
 800972e:	4770      	bx	lr

08009730 <__retarget_lock_release_recursive>:
 8009730:	4770      	bx	lr

08009732 <memcpy>:
 8009732:	440a      	add	r2, r1
 8009734:	4291      	cmp	r1, r2
 8009736:	f100 33ff 	add.w	r3, r0, #4294967295
 800973a:	d100      	bne.n	800973e <memcpy+0xc>
 800973c:	4770      	bx	lr
 800973e:	b510      	push	{r4, lr}
 8009740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009748:	4291      	cmp	r1, r2
 800974a:	d1f9      	bne.n	8009740 <memcpy+0xe>
 800974c:	bd10      	pop	{r4, pc}

0800974e <quorem>:
 800974e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009752:	6903      	ldr	r3, [r0, #16]
 8009754:	690c      	ldr	r4, [r1, #16]
 8009756:	42a3      	cmp	r3, r4
 8009758:	4607      	mov	r7, r0
 800975a:	db7e      	blt.n	800985a <quorem+0x10c>
 800975c:	3c01      	subs	r4, #1
 800975e:	f101 0814 	add.w	r8, r1, #20
 8009762:	00a3      	lsls	r3, r4, #2
 8009764:	f100 0514 	add.w	r5, r0, #20
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009778:	3301      	adds	r3, #1
 800977a:	429a      	cmp	r2, r3
 800977c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009780:	fbb2 f6f3 	udiv	r6, r2, r3
 8009784:	d32e      	bcc.n	80097e4 <quorem+0x96>
 8009786:	f04f 0a00 	mov.w	sl, #0
 800978a:	46c4      	mov	ip, r8
 800978c:	46ae      	mov	lr, r5
 800978e:	46d3      	mov	fp, sl
 8009790:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009794:	b298      	uxth	r0, r3
 8009796:	fb06 a000 	mla	r0, r6, r0, sl
 800979a:	0c02      	lsrs	r2, r0, #16
 800979c:	0c1b      	lsrs	r3, r3, #16
 800979e:	fb06 2303 	mla	r3, r6, r3, r2
 80097a2:	f8de 2000 	ldr.w	r2, [lr]
 80097a6:	b280      	uxth	r0, r0
 80097a8:	b292      	uxth	r2, r2
 80097aa:	1a12      	subs	r2, r2, r0
 80097ac:	445a      	add	r2, fp
 80097ae:	f8de 0000 	ldr.w	r0, [lr]
 80097b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80097bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80097c0:	b292      	uxth	r2, r2
 80097c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80097c6:	45e1      	cmp	r9, ip
 80097c8:	f84e 2b04 	str.w	r2, [lr], #4
 80097cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80097d0:	d2de      	bcs.n	8009790 <quorem+0x42>
 80097d2:	9b00      	ldr	r3, [sp, #0]
 80097d4:	58eb      	ldr	r3, [r5, r3]
 80097d6:	b92b      	cbnz	r3, 80097e4 <quorem+0x96>
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	3b04      	subs	r3, #4
 80097dc:	429d      	cmp	r5, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	d32f      	bcc.n	8009842 <quorem+0xf4>
 80097e2:	613c      	str	r4, [r7, #16]
 80097e4:	4638      	mov	r0, r7
 80097e6:	f001 f90b 	bl	800aa00 <__mcmp>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	db25      	blt.n	800983a <quorem+0xec>
 80097ee:	4629      	mov	r1, r5
 80097f0:	2000      	movs	r0, #0
 80097f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80097f6:	f8d1 c000 	ldr.w	ip, [r1]
 80097fa:	fa1f fe82 	uxth.w	lr, r2
 80097fe:	fa1f f38c 	uxth.w	r3, ip
 8009802:	eba3 030e 	sub.w	r3, r3, lr
 8009806:	4403      	add	r3, r0
 8009808:	0c12      	lsrs	r2, r2, #16
 800980a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800980e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009812:	b29b      	uxth	r3, r3
 8009814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009818:	45c1      	cmp	r9, r8
 800981a:	f841 3b04 	str.w	r3, [r1], #4
 800981e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009822:	d2e6      	bcs.n	80097f2 <quorem+0xa4>
 8009824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800982c:	b922      	cbnz	r2, 8009838 <quorem+0xea>
 800982e:	3b04      	subs	r3, #4
 8009830:	429d      	cmp	r5, r3
 8009832:	461a      	mov	r2, r3
 8009834:	d30b      	bcc.n	800984e <quorem+0x100>
 8009836:	613c      	str	r4, [r7, #16]
 8009838:	3601      	adds	r6, #1
 800983a:	4630      	mov	r0, r6
 800983c:	b003      	add	sp, #12
 800983e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009842:	6812      	ldr	r2, [r2, #0]
 8009844:	3b04      	subs	r3, #4
 8009846:	2a00      	cmp	r2, #0
 8009848:	d1cb      	bne.n	80097e2 <quorem+0x94>
 800984a:	3c01      	subs	r4, #1
 800984c:	e7c6      	b.n	80097dc <quorem+0x8e>
 800984e:	6812      	ldr	r2, [r2, #0]
 8009850:	3b04      	subs	r3, #4
 8009852:	2a00      	cmp	r2, #0
 8009854:	d1ef      	bne.n	8009836 <quorem+0xe8>
 8009856:	3c01      	subs	r4, #1
 8009858:	e7ea      	b.n	8009830 <quorem+0xe2>
 800985a:	2000      	movs	r0, #0
 800985c:	e7ee      	b.n	800983c <quorem+0xee>
	...

08009860 <_dtoa_r>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	ed2d 8b02 	vpush	{d8}
 8009868:	69c7      	ldr	r7, [r0, #28]
 800986a:	b091      	sub	sp, #68	@ 0x44
 800986c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009870:	ec55 4b10 	vmov	r4, r5, d0
 8009874:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009876:	9107      	str	r1, [sp, #28]
 8009878:	4681      	mov	r9, r0
 800987a:	9209      	str	r2, [sp, #36]	@ 0x24
 800987c:	930d      	str	r3, [sp, #52]	@ 0x34
 800987e:	b97f      	cbnz	r7, 80098a0 <_dtoa_r+0x40>
 8009880:	2010      	movs	r0, #16
 8009882:	f000 fd8d 	bl	800a3a0 <malloc>
 8009886:	4602      	mov	r2, r0
 8009888:	f8c9 001c 	str.w	r0, [r9, #28]
 800988c:	b920      	cbnz	r0, 8009898 <_dtoa_r+0x38>
 800988e:	4ba0      	ldr	r3, [pc, #640]	@ (8009b10 <_dtoa_r+0x2b0>)
 8009890:	21ef      	movs	r1, #239	@ 0xef
 8009892:	48a0      	ldr	r0, [pc, #640]	@ (8009b14 <_dtoa_r+0x2b4>)
 8009894:	f001 fc4e 	bl	800b134 <__assert_func>
 8009898:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800989c:	6007      	str	r7, [r0, #0]
 800989e:	60c7      	str	r7, [r0, #12]
 80098a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098a4:	6819      	ldr	r1, [r3, #0]
 80098a6:	b159      	cbz	r1, 80098c0 <_dtoa_r+0x60>
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	604a      	str	r2, [r1, #4]
 80098ac:	2301      	movs	r3, #1
 80098ae:	4093      	lsls	r3, r2
 80098b0:	608b      	str	r3, [r1, #8]
 80098b2:	4648      	mov	r0, r9
 80098b4:	f000 fe6a 	bl	800a58c <_Bfree>
 80098b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	1e2b      	subs	r3, r5, #0
 80098c2:	bfbb      	ittet	lt
 80098c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80098c8:	9303      	strlt	r3, [sp, #12]
 80098ca:	2300      	movge	r3, #0
 80098cc:	2201      	movlt	r2, #1
 80098ce:	bfac      	ite	ge
 80098d0:	6033      	strge	r3, [r6, #0]
 80098d2:	6032      	strlt	r2, [r6, #0]
 80098d4:	4b90      	ldr	r3, [pc, #576]	@ (8009b18 <_dtoa_r+0x2b8>)
 80098d6:	9e03      	ldr	r6, [sp, #12]
 80098d8:	43b3      	bics	r3, r6
 80098da:	d110      	bne.n	80098fe <_dtoa_r+0x9e>
 80098dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098de:	f242 730f 	movw	r3, #9999	@ 0x270f
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80098e8:	4323      	orrs	r3, r4
 80098ea:	f000 84de 	beq.w	800a2aa <_dtoa_r+0xa4a>
 80098ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098f0:	4f8a      	ldr	r7, [pc, #552]	@ (8009b1c <_dtoa_r+0x2bc>)
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 84e0 	beq.w	800a2b8 <_dtoa_r+0xa58>
 80098f8:	1cfb      	adds	r3, r7, #3
 80098fa:	f000 bcdb 	b.w	800a2b4 <_dtoa_r+0xa54>
 80098fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009902:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990a:	d10a      	bne.n	8009922 <_dtoa_r+0xc2>
 800990c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800990e:	2301      	movs	r3, #1
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009914:	b113      	cbz	r3, 800991c <_dtoa_r+0xbc>
 8009916:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009918:	4b81      	ldr	r3, [pc, #516]	@ (8009b20 <_dtoa_r+0x2c0>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	4f81      	ldr	r7, [pc, #516]	@ (8009b24 <_dtoa_r+0x2c4>)
 800991e:	f000 bccb 	b.w	800a2b8 <_dtoa_r+0xa58>
 8009922:	aa0e      	add	r2, sp, #56	@ 0x38
 8009924:	a90f      	add	r1, sp, #60	@ 0x3c
 8009926:	4648      	mov	r0, r9
 8009928:	eeb0 0b48 	vmov.f64	d0, d8
 800992c:	f001 f918 	bl	800ab60 <__d2b>
 8009930:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009936:	9001      	str	r0, [sp, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d045      	beq.n	80099c8 <_dtoa_r+0x168>
 800993c:	eeb0 7b48 	vmov.f64	d7, d8
 8009940:	ee18 1a90 	vmov	r1, s17
 8009944:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009948:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800994c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009950:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009954:	2500      	movs	r5, #0
 8009956:	ee07 1a90 	vmov	s15, r1
 800995a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800995e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009af8 <_dtoa_r+0x298>
 8009962:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009966:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009b00 <_dtoa_r+0x2a0>
 800996a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800996e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009b08 <_dtoa_r+0x2a8>
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800997a:	eeb0 7b46 	vmov.f64	d7, d6
 800997e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009982:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009986:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800998a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998e:	ee16 8a90 	vmov	r8, s13
 8009992:	d508      	bpl.n	80099a6 <_dtoa_r+0x146>
 8009994:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009998:	eeb4 6b47 	vcmp.f64	d6, d7
 800999c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a0:	bf18      	it	ne
 80099a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80099a6:	f1b8 0f16 	cmp.w	r8, #22
 80099aa:	d82b      	bhi.n	8009a04 <_dtoa_r+0x1a4>
 80099ac:	495e      	ldr	r1, [pc, #376]	@ (8009b28 <_dtoa_r+0x2c8>)
 80099ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80099b2:	ed91 7b00 	vldr	d7, [r1]
 80099b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80099ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099be:	d501      	bpl.n	80099c4 <_dtoa_r+0x164>
 80099c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80099c4:	2100      	movs	r1, #0
 80099c6:	e01e      	b.n	8009a06 <_dtoa_r+0x1a6>
 80099c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ca:	4413      	add	r3, r2
 80099cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80099d0:	2920      	cmp	r1, #32
 80099d2:	bfc1      	itttt	gt
 80099d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80099d8:	408e      	lslgt	r6, r1
 80099da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80099de:	fa24 f101 	lsrgt.w	r1, r4, r1
 80099e2:	bfd6      	itet	le
 80099e4:	f1c1 0120 	rsble	r1, r1, #32
 80099e8:	4331      	orrgt	r1, r6
 80099ea:	fa04 f101 	lslle.w	r1, r4, r1
 80099ee:	ee07 1a90 	vmov	s15, r1
 80099f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80099f6:	3b01      	subs	r3, #1
 80099f8:	ee17 1a90 	vmov	r1, s15
 80099fc:	2501      	movs	r5, #1
 80099fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009a02:	e7a8      	b.n	8009956 <_dtoa_r+0xf6>
 8009a04:	2101      	movs	r1, #1
 8009a06:	1ad2      	subs	r2, r2, r3
 8009a08:	1e53      	subs	r3, r2, #1
 8009a0a:	9306      	str	r3, [sp, #24]
 8009a0c:	bf45      	ittet	mi
 8009a0e:	f1c2 0301 	rsbmi	r3, r2, #1
 8009a12:	9305      	strmi	r3, [sp, #20]
 8009a14:	2300      	movpl	r3, #0
 8009a16:	2300      	movmi	r3, #0
 8009a18:	bf4c      	ite	mi
 8009a1a:	9306      	strmi	r3, [sp, #24]
 8009a1c:	9305      	strpl	r3, [sp, #20]
 8009a1e:	f1b8 0f00 	cmp.w	r8, #0
 8009a22:	910c      	str	r1, [sp, #48]	@ 0x30
 8009a24:	db18      	blt.n	8009a58 <_dtoa_r+0x1f8>
 8009a26:	9b06      	ldr	r3, [sp, #24]
 8009a28:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009a2c:	4443      	add	r3, r8
 8009a2e:	9306      	str	r3, [sp, #24]
 8009a30:	2300      	movs	r3, #0
 8009a32:	9a07      	ldr	r2, [sp, #28]
 8009a34:	2a09      	cmp	r2, #9
 8009a36:	d849      	bhi.n	8009acc <_dtoa_r+0x26c>
 8009a38:	2a05      	cmp	r2, #5
 8009a3a:	bfc4      	itt	gt
 8009a3c:	3a04      	subgt	r2, #4
 8009a3e:	9207      	strgt	r2, [sp, #28]
 8009a40:	9a07      	ldr	r2, [sp, #28]
 8009a42:	f1a2 0202 	sub.w	r2, r2, #2
 8009a46:	bfcc      	ite	gt
 8009a48:	2400      	movgt	r4, #0
 8009a4a:	2401      	movle	r4, #1
 8009a4c:	2a03      	cmp	r2, #3
 8009a4e:	d848      	bhi.n	8009ae2 <_dtoa_r+0x282>
 8009a50:	e8df f002 	tbb	[pc, r2]
 8009a54:	3a2c2e0b 	.word	0x3a2c2e0b
 8009a58:	9b05      	ldr	r3, [sp, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	eba3 0308 	sub.w	r3, r3, r8
 8009a60:	9305      	str	r3, [sp, #20]
 8009a62:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a64:	f1c8 0300 	rsb	r3, r8, #0
 8009a68:	e7e3      	b.n	8009a32 <_dtoa_r+0x1d2>
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	9208      	str	r2, [sp, #32]
 8009a6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a70:	2a00      	cmp	r2, #0
 8009a72:	dc39      	bgt.n	8009ae8 <_dtoa_r+0x288>
 8009a74:	f04f 0b01 	mov.w	fp, #1
 8009a78:	46da      	mov	sl, fp
 8009a7a:	465a      	mov	r2, fp
 8009a7c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009a80:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009a84:	2100      	movs	r1, #0
 8009a86:	2004      	movs	r0, #4
 8009a88:	f100 0614 	add.w	r6, r0, #20
 8009a8c:	4296      	cmp	r6, r2
 8009a8e:	d930      	bls.n	8009af2 <_dtoa_r+0x292>
 8009a90:	6079      	str	r1, [r7, #4]
 8009a92:	4648      	mov	r0, r9
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	f000 fd39 	bl	800a50c <_Balloc>
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d146      	bne.n	8009b30 <_dtoa_r+0x2d0>
 8009aa2:	4b22      	ldr	r3, [pc, #136]	@ (8009b2c <_dtoa_r+0x2cc>)
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8009aaa:	e6f2      	b.n	8009892 <_dtoa_r+0x32>
 8009aac:	2201      	movs	r2, #1
 8009aae:	e7dd      	b.n	8009a6c <_dtoa_r+0x20c>
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	9208      	str	r2, [sp, #32]
 8009ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ab6:	eb08 0b02 	add.w	fp, r8, r2
 8009aba:	f10b 0a01 	add.w	sl, fp, #1
 8009abe:	4652      	mov	r2, sl
 8009ac0:	2a01      	cmp	r2, #1
 8009ac2:	bfb8      	it	lt
 8009ac4:	2201      	movlt	r2, #1
 8009ac6:	e7db      	b.n	8009a80 <_dtoa_r+0x220>
 8009ac8:	2201      	movs	r2, #1
 8009aca:	e7f2      	b.n	8009ab2 <_dtoa_r+0x252>
 8009acc:	2401      	movs	r4, #1
 8009ace:	2200      	movs	r2, #0
 8009ad0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009ad4:	f04f 3bff 	mov.w	fp, #4294967295
 8009ad8:	2100      	movs	r1, #0
 8009ada:	46da      	mov	sl, fp
 8009adc:	2212      	movs	r2, #18
 8009ade:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ae0:	e7ce      	b.n	8009a80 <_dtoa_r+0x220>
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	9208      	str	r2, [sp, #32]
 8009ae6:	e7f5      	b.n	8009ad4 <_dtoa_r+0x274>
 8009ae8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8009aec:	46da      	mov	sl, fp
 8009aee:	465a      	mov	r2, fp
 8009af0:	e7c6      	b.n	8009a80 <_dtoa_r+0x220>
 8009af2:	3101      	adds	r1, #1
 8009af4:	0040      	lsls	r0, r0, #1
 8009af6:	e7c7      	b.n	8009a88 <_dtoa_r+0x228>
 8009af8:	636f4361 	.word	0x636f4361
 8009afc:	3fd287a7 	.word	0x3fd287a7
 8009b00:	8b60c8b3 	.word	0x8b60c8b3
 8009b04:	3fc68a28 	.word	0x3fc68a28
 8009b08:	509f79fb 	.word	0x509f79fb
 8009b0c:	3fd34413 	.word	0x3fd34413
 8009b10:	0800b495 	.word	0x0800b495
 8009b14:	0800b4ac 	.word	0x0800b4ac
 8009b18:	7ff00000 	.word	0x7ff00000
 8009b1c:	0800b491 	.word	0x0800b491
 8009b20:	0800b465 	.word	0x0800b465
 8009b24:	0800b464 	.word	0x0800b464
 8009b28:	0800b5a8 	.word	0x0800b5a8
 8009b2c:	0800b504 	.word	0x0800b504
 8009b30:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009b34:	f1ba 0f0e 	cmp.w	sl, #14
 8009b38:	6010      	str	r0, [r2, #0]
 8009b3a:	d86f      	bhi.n	8009c1c <_dtoa_r+0x3bc>
 8009b3c:	2c00      	cmp	r4, #0
 8009b3e:	d06d      	beq.n	8009c1c <_dtoa_r+0x3bc>
 8009b40:	f1b8 0f00 	cmp.w	r8, #0
 8009b44:	f340 80c2 	ble.w	8009ccc <_dtoa_r+0x46c>
 8009b48:	4aca      	ldr	r2, [pc, #808]	@ (8009e74 <_dtoa_r+0x614>)
 8009b4a:	f008 010f 	and.w	r1, r8, #15
 8009b4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009b52:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009b56:	ed92 7b00 	vldr	d7, [r2]
 8009b5a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009b5e:	f000 80a9 	beq.w	8009cb4 <_dtoa_r+0x454>
 8009b62:	4ac5      	ldr	r2, [pc, #788]	@ (8009e78 <_dtoa_r+0x618>)
 8009b64:	ed92 6b08 	vldr	d6, [r2, #32]
 8009b68:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009b6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009b70:	f001 010f 	and.w	r1, r1, #15
 8009b74:	2203      	movs	r2, #3
 8009b76:	48c0      	ldr	r0, [pc, #768]	@ (8009e78 <_dtoa_r+0x618>)
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	f040 809d 	bne.w	8009cb8 <_dtoa_r+0x458>
 8009b7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b90:	2900      	cmp	r1, #0
 8009b92:	f000 80c1 	beq.w	8009d18 <_dtoa_r+0x4b8>
 8009b96:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009b9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba2:	f140 80b9 	bpl.w	8009d18 <_dtoa_r+0x4b8>
 8009ba6:	f1ba 0f00 	cmp.w	sl, #0
 8009baa:	f000 80b5 	beq.w	8009d18 <_dtoa_r+0x4b8>
 8009bae:	f1bb 0f00 	cmp.w	fp, #0
 8009bb2:	dd31      	ble.n	8009c18 <_dtoa_r+0x3b8>
 8009bb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009bb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bc0:	f108 31ff 	add.w	r1, r8, #4294967295
 8009bc4:	9104      	str	r1, [sp, #16]
 8009bc6:	3201      	adds	r2, #1
 8009bc8:	465c      	mov	r4, fp
 8009bca:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009bce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009bd2:	ee07 2a90 	vmov	s15, r2
 8009bd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009bda:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009bde:	ee15 2a90 	vmov	r2, s11
 8009be2:	ec51 0b15 	vmov	r0, r1, d5
 8009be6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009bea:	2c00      	cmp	r4, #0
 8009bec:	f040 8098 	bne.w	8009d20 <_dtoa_r+0x4c0>
 8009bf0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009bf4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009bf8:	ec41 0b17 	vmov	d7, r0, r1
 8009bfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c04:	f300 8261 	bgt.w	800a0ca <_dtoa_r+0x86a>
 8009c08:	eeb1 7b47 	vneg.f64	d7, d7
 8009c0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c14:	f100 80f5 	bmi.w	8009e02 <_dtoa_r+0x5a2>
 8009c18:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009c1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	f2c0 812c 	blt.w	8009e7c <_dtoa_r+0x61c>
 8009c24:	f1b8 0f0e 	cmp.w	r8, #14
 8009c28:	f300 8128 	bgt.w	8009e7c <_dtoa_r+0x61c>
 8009c2c:	4b91      	ldr	r3, [pc, #580]	@ (8009e74 <_dtoa_r+0x614>)
 8009c2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009c32:	ed93 6b00 	vldr	d6, [r3]
 8009c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	da03      	bge.n	8009c44 <_dtoa_r+0x3e4>
 8009c3c:	f1ba 0f00 	cmp.w	sl, #0
 8009c40:	f340 80d2 	ble.w	8009de8 <_dtoa_r+0x588>
 8009c44:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009c48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c4c:	463e      	mov	r6, r7
 8009c4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009c52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009c56:	ee15 3a10 	vmov	r3, s10
 8009c5a:	3330      	adds	r3, #48	@ 0x30
 8009c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8009c60:	1bf3      	subs	r3, r6, r7
 8009c62:	459a      	cmp	sl, r3
 8009c64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009c68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009c6c:	f040 80f8 	bne.w	8009e60 <_dtoa_r+0x600>
 8009c70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009c74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7c:	f300 80dd 	bgt.w	8009e3a <_dtoa_r+0x5da>
 8009c80:	eeb4 7b46 	vcmp.f64	d7, d6
 8009c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c88:	d104      	bne.n	8009c94 <_dtoa_r+0x434>
 8009c8a:	ee15 3a10 	vmov	r3, s10
 8009c8e:	07db      	lsls	r3, r3, #31
 8009c90:	f100 80d3 	bmi.w	8009e3a <_dtoa_r+0x5da>
 8009c94:	9901      	ldr	r1, [sp, #4]
 8009c96:	4648      	mov	r0, r9
 8009c98:	f000 fc78 	bl	800a58c <_Bfree>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ca0:	7033      	strb	r3, [r6, #0]
 8009ca2:	f108 0301 	add.w	r3, r8, #1
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 8304 	beq.w	800a2b8 <_dtoa_r+0xa58>
 8009cb0:	601e      	str	r6, [r3, #0]
 8009cb2:	e301      	b.n	800a2b8 <_dtoa_r+0xa58>
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	e75e      	b.n	8009b76 <_dtoa_r+0x316>
 8009cb8:	07cc      	lsls	r4, r1, #31
 8009cba:	d504      	bpl.n	8009cc6 <_dtoa_r+0x466>
 8009cbc:	ed90 6b00 	vldr	d6, [r0]
 8009cc0:	3201      	adds	r2, #1
 8009cc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009cc6:	1049      	asrs	r1, r1, #1
 8009cc8:	3008      	adds	r0, #8
 8009cca:	e755      	b.n	8009b78 <_dtoa_r+0x318>
 8009ccc:	d022      	beq.n	8009d14 <_dtoa_r+0x4b4>
 8009cce:	f1c8 0100 	rsb	r1, r8, #0
 8009cd2:	4a68      	ldr	r2, [pc, #416]	@ (8009e74 <_dtoa_r+0x614>)
 8009cd4:	f001 000f 	and.w	r0, r1, #15
 8009cd8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009cdc:	ed92 7b00 	vldr	d7, [r2]
 8009ce0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009ce4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ce8:	4863      	ldr	r0, [pc, #396]	@ (8009e78 <_dtoa_r+0x618>)
 8009cea:	1109      	asrs	r1, r1, #4
 8009cec:	2400      	movs	r4, #0
 8009cee:	2202      	movs	r2, #2
 8009cf0:	b929      	cbnz	r1, 8009cfe <_dtoa_r+0x49e>
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	f43f af49 	beq.w	8009b8a <_dtoa_r+0x32a>
 8009cf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cfc:	e745      	b.n	8009b8a <_dtoa_r+0x32a>
 8009cfe:	07ce      	lsls	r6, r1, #31
 8009d00:	d505      	bpl.n	8009d0e <_dtoa_r+0x4ae>
 8009d02:	ed90 6b00 	vldr	d6, [r0]
 8009d06:	3201      	adds	r2, #1
 8009d08:	2401      	movs	r4, #1
 8009d0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d0e:	1049      	asrs	r1, r1, #1
 8009d10:	3008      	adds	r0, #8
 8009d12:	e7ed      	b.n	8009cf0 <_dtoa_r+0x490>
 8009d14:	2202      	movs	r2, #2
 8009d16:	e738      	b.n	8009b8a <_dtoa_r+0x32a>
 8009d18:	f8cd 8010 	str.w	r8, [sp, #16]
 8009d1c:	4654      	mov	r4, sl
 8009d1e:	e754      	b.n	8009bca <_dtoa_r+0x36a>
 8009d20:	4a54      	ldr	r2, [pc, #336]	@ (8009e74 <_dtoa_r+0x614>)
 8009d22:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009d26:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009d2a:	9a08      	ldr	r2, [sp, #32]
 8009d2c:	ec41 0b17 	vmov	d7, r0, r1
 8009d30:	443c      	add	r4, r7
 8009d32:	b34a      	cbz	r2, 8009d88 <_dtoa_r+0x528>
 8009d34:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009d38:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009d3c:	463e      	mov	r6, r7
 8009d3e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009d42:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009d46:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d4a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d4e:	ee14 2a90 	vmov	r2, s9
 8009d52:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d56:	3230      	adds	r2, #48	@ 0x30
 8009d58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d64:	f806 2b01 	strb.w	r2, [r6], #1
 8009d68:	d438      	bmi.n	8009ddc <_dtoa_r+0x57c>
 8009d6a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009d6e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d76:	d462      	bmi.n	8009e3e <_dtoa_r+0x5de>
 8009d78:	42a6      	cmp	r6, r4
 8009d7a:	f43f af4d 	beq.w	8009c18 <_dtoa_r+0x3b8>
 8009d7e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009d82:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d86:	e7e0      	b.n	8009d4a <_dtoa_r+0x4ea>
 8009d88:	4621      	mov	r1, r4
 8009d8a:	463e      	mov	r6, r7
 8009d8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d90:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009d94:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d98:	ee14 2a90 	vmov	r2, s9
 8009d9c:	3230      	adds	r2, #48	@ 0x30
 8009d9e:	f806 2b01 	strb.w	r2, [r6], #1
 8009da2:	42a6      	cmp	r6, r4
 8009da4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009da8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009dac:	d119      	bne.n	8009de2 <_dtoa_r+0x582>
 8009dae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009db2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009db6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbe:	dc3e      	bgt.n	8009e3e <_dtoa_r+0x5de>
 8009dc0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009dc4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dcc:	f57f af24 	bpl.w	8009c18 <_dtoa_r+0x3b8>
 8009dd0:	460e      	mov	r6, r1
 8009dd2:	3901      	subs	r1, #1
 8009dd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009dd8:	2b30      	cmp	r3, #48	@ 0x30
 8009dda:	d0f9      	beq.n	8009dd0 <_dtoa_r+0x570>
 8009ddc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009de0:	e758      	b.n	8009c94 <_dtoa_r+0x434>
 8009de2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009de6:	e7d5      	b.n	8009d94 <_dtoa_r+0x534>
 8009de8:	d10b      	bne.n	8009e02 <_dtoa_r+0x5a2>
 8009dea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009dee:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009df2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009df6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfe:	f2c0 8161 	blt.w	800a0c4 <_dtoa_r+0x864>
 8009e02:	2400      	movs	r4, #0
 8009e04:	4625      	mov	r5, r4
 8009e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e08:	43db      	mvns	r3, r3
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	463e      	mov	r6, r7
 8009e0e:	f04f 0800 	mov.w	r8, #0
 8009e12:	4621      	mov	r1, r4
 8009e14:	4648      	mov	r0, r9
 8009e16:	f000 fbb9 	bl	800a58c <_Bfree>
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	d0de      	beq.n	8009ddc <_dtoa_r+0x57c>
 8009e1e:	f1b8 0f00 	cmp.w	r8, #0
 8009e22:	d005      	beq.n	8009e30 <_dtoa_r+0x5d0>
 8009e24:	45a8      	cmp	r8, r5
 8009e26:	d003      	beq.n	8009e30 <_dtoa_r+0x5d0>
 8009e28:	4641      	mov	r1, r8
 8009e2a:	4648      	mov	r0, r9
 8009e2c:	f000 fbae 	bl	800a58c <_Bfree>
 8009e30:	4629      	mov	r1, r5
 8009e32:	4648      	mov	r0, r9
 8009e34:	f000 fbaa 	bl	800a58c <_Bfree>
 8009e38:	e7d0      	b.n	8009ddc <_dtoa_r+0x57c>
 8009e3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8009e3e:	4633      	mov	r3, r6
 8009e40:	461e      	mov	r6, r3
 8009e42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e46:	2a39      	cmp	r2, #57	@ 0x39
 8009e48:	d106      	bne.n	8009e58 <_dtoa_r+0x5f8>
 8009e4a:	429f      	cmp	r7, r3
 8009e4c:	d1f8      	bne.n	8009e40 <_dtoa_r+0x5e0>
 8009e4e:	9a04      	ldr	r2, [sp, #16]
 8009e50:	3201      	adds	r2, #1
 8009e52:	9204      	str	r2, [sp, #16]
 8009e54:	2230      	movs	r2, #48	@ 0x30
 8009e56:	703a      	strb	r2, [r7, #0]
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	3201      	adds	r2, #1
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	e7bd      	b.n	8009ddc <_dtoa_r+0x57c>
 8009e60:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6c:	f47f aeef 	bne.w	8009c4e <_dtoa_r+0x3ee>
 8009e70:	e710      	b.n	8009c94 <_dtoa_r+0x434>
 8009e72:	bf00      	nop
 8009e74:	0800b5a8 	.word	0x0800b5a8
 8009e78:	0800b580 	.word	0x0800b580
 8009e7c:	9908      	ldr	r1, [sp, #32]
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	f000 80e3 	beq.w	800a04a <_dtoa_r+0x7ea>
 8009e84:	9907      	ldr	r1, [sp, #28]
 8009e86:	2901      	cmp	r1, #1
 8009e88:	f300 80c8 	bgt.w	800a01c <_dtoa_r+0x7bc>
 8009e8c:	2d00      	cmp	r5, #0
 8009e8e:	f000 80c1 	beq.w	800a014 <_dtoa_r+0x7b4>
 8009e92:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009e96:	9e05      	ldr	r6, [sp, #20]
 8009e98:	461c      	mov	r4, r3
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	9b05      	ldr	r3, [sp, #20]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	9305      	str	r3, [sp, #20]
 8009ea2:	9b06      	ldr	r3, [sp, #24]
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	4413      	add	r3, r2
 8009ea8:	4648      	mov	r0, r9
 8009eaa:	9306      	str	r3, [sp, #24]
 8009eac:	f000 fc22 	bl	800a6f4 <__i2b>
 8009eb0:	9b04      	ldr	r3, [sp, #16]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	b166      	cbz	r6, 8009ed0 <_dtoa_r+0x670>
 8009eb6:	9a06      	ldr	r2, [sp, #24]
 8009eb8:	2a00      	cmp	r2, #0
 8009eba:	dd09      	ble.n	8009ed0 <_dtoa_r+0x670>
 8009ebc:	42b2      	cmp	r2, r6
 8009ebe:	9905      	ldr	r1, [sp, #20]
 8009ec0:	bfa8      	it	ge
 8009ec2:	4632      	movge	r2, r6
 8009ec4:	1a89      	subs	r1, r1, r2
 8009ec6:	9105      	str	r1, [sp, #20]
 8009ec8:	9906      	ldr	r1, [sp, #24]
 8009eca:	1ab6      	subs	r6, r6, r2
 8009ecc:	1a8a      	subs	r2, r1, r2
 8009ece:	9206      	str	r2, [sp, #24]
 8009ed0:	b1fb      	cbz	r3, 8009f12 <_dtoa_r+0x6b2>
 8009ed2:	9a08      	ldr	r2, [sp, #32]
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	f000 80bc 	beq.w	800a052 <_dtoa_r+0x7f2>
 8009eda:	b19c      	cbz	r4, 8009f04 <_dtoa_r+0x6a4>
 8009edc:	4629      	mov	r1, r5
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4648      	mov	r0, r9
 8009ee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ee4:	f000 fcc6 	bl	800a874 <__pow5mult>
 8009ee8:	9a01      	ldr	r2, [sp, #4]
 8009eea:	4601      	mov	r1, r0
 8009eec:	4605      	mov	r5, r0
 8009eee:	4648      	mov	r0, r9
 8009ef0:	f000 fc16 	bl	800a720 <__multiply>
 8009ef4:	9901      	ldr	r1, [sp, #4]
 8009ef6:	9004      	str	r0, [sp, #16]
 8009ef8:	4648      	mov	r0, r9
 8009efa:	f000 fb47 	bl	800a58c <_Bfree>
 8009efe:	9a04      	ldr	r2, [sp, #16]
 8009f00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f02:	9201      	str	r2, [sp, #4]
 8009f04:	1b1a      	subs	r2, r3, r4
 8009f06:	d004      	beq.n	8009f12 <_dtoa_r+0x6b2>
 8009f08:	9901      	ldr	r1, [sp, #4]
 8009f0a:	4648      	mov	r0, r9
 8009f0c:	f000 fcb2 	bl	800a874 <__pow5mult>
 8009f10:	9001      	str	r0, [sp, #4]
 8009f12:	2101      	movs	r1, #1
 8009f14:	4648      	mov	r0, r9
 8009f16:	f000 fbed 	bl	800a6f4 <__i2b>
 8009f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 81d0 	beq.w	800a2c4 <_dtoa_r+0xa64>
 8009f24:	461a      	mov	r2, r3
 8009f26:	4601      	mov	r1, r0
 8009f28:	4648      	mov	r0, r9
 8009f2a:	f000 fca3 	bl	800a874 <__pow5mult>
 8009f2e:	9b07      	ldr	r3, [sp, #28]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	4604      	mov	r4, r0
 8009f34:	f300 8095 	bgt.w	800a062 <_dtoa_r+0x802>
 8009f38:	9b02      	ldr	r3, [sp, #8]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f040 808b 	bne.w	800a056 <_dtoa_r+0x7f6>
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009f46:	2a00      	cmp	r2, #0
 8009f48:	f040 8087 	bne.w	800a05a <_dtoa_r+0x7fa>
 8009f4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009f50:	0d12      	lsrs	r2, r2, #20
 8009f52:	0512      	lsls	r2, r2, #20
 8009f54:	2a00      	cmp	r2, #0
 8009f56:	f000 8082 	beq.w	800a05e <_dtoa_r+0x7fe>
 8009f5a:	9b05      	ldr	r3, [sp, #20]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	9305      	str	r3, [sp, #20]
 8009f60:	9b06      	ldr	r3, [sp, #24]
 8009f62:	3301      	adds	r3, #1
 8009f64:	9306      	str	r3, [sp, #24]
 8009f66:	2301      	movs	r3, #1
 8009f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 81af 	beq.w	800a2d0 <_dtoa_r+0xa70>
 8009f72:	6922      	ldr	r2, [r4, #16]
 8009f74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009f78:	6910      	ldr	r0, [r2, #16]
 8009f7a:	f000 fb6f 	bl	800a65c <__hi0bits>
 8009f7e:	f1c0 0020 	rsb	r0, r0, #32
 8009f82:	9b06      	ldr	r3, [sp, #24]
 8009f84:	4418      	add	r0, r3
 8009f86:	f010 001f 	ands.w	r0, r0, #31
 8009f8a:	d076      	beq.n	800a07a <_dtoa_r+0x81a>
 8009f8c:	f1c0 0220 	rsb	r2, r0, #32
 8009f90:	2a04      	cmp	r2, #4
 8009f92:	dd69      	ble.n	800a068 <_dtoa_r+0x808>
 8009f94:	9b05      	ldr	r3, [sp, #20]
 8009f96:	f1c0 001c 	rsb	r0, r0, #28
 8009f9a:	4403      	add	r3, r0
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	9b06      	ldr	r3, [sp, #24]
 8009fa0:	4406      	add	r6, r0
 8009fa2:	4403      	add	r3, r0
 8009fa4:	9306      	str	r3, [sp, #24]
 8009fa6:	9b05      	ldr	r3, [sp, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dd05      	ble.n	8009fb8 <_dtoa_r+0x758>
 8009fac:	9901      	ldr	r1, [sp, #4]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	4648      	mov	r0, r9
 8009fb2:	f000 fcb9 	bl	800a928 <__lshift>
 8009fb6:	9001      	str	r0, [sp, #4]
 8009fb8:	9b06      	ldr	r3, [sp, #24]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	dd05      	ble.n	8009fca <_dtoa_r+0x76a>
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	4648      	mov	r0, r9
 8009fc4:	f000 fcb0 	bl	800a928 <__lshift>
 8009fc8:	4604      	mov	r4, r0
 8009fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d056      	beq.n	800a07e <_dtoa_r+0x81e>
 8009fd0:	9801      	ldr	r0, [sp, #4]
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	f000 fd14 	bl	800aa00 <__mcmp>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	da50      	bge.n	800a07e <_dtoa_r+0x81e>
 8009fdc:	f108 33ff 	add.w	r3, r8, #4294967295
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	9901      	ldr	r1, [sp, #4]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	220a      	movs	r2, #10
 8009fe8:	4648      	mov	r0, r9
 8009fea:	f000 faf1 	bl	800a5d0 <__multadd>
 8009fee:	9b08      	ldr	r3, [sp, #32]
 8009ff0:	9001      	str	r0, [sp, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 816e 	beq.w	800a2d4 <_dtoa_r+0xa74>
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	220a      	movs	r2, #10
 8009ffe:	4648      	mov	r0, r9
 800a000:	f000 fae6 	bl	800a5d0 <__multadd>
 800a004:	f1bb 0f00 	cmp.w	fp, #0
 800a008:	4605      	mov	r5, r0
 800a00a:	dc64      	bgt.n	800a0d6 <_dtoa_r+0x876>
 800a00c:	9b07      	ldr	r3, [sp, #28]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	dc3e      	bgt.n	800a090 <_dtoa_r+0x830>
 800a012:	e060      	b.n	800a0d6 <_dtoa_r+0x876>
 800a014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a016:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a01a:	e73c      	b.n	8009e96 <_dtoa_r+0x636>
 800a01c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a020:	42a3      	cmp	r3, r4
 800a022:	bfbf      	itttt	lt
 800a024:	1ae2      	sublt	r2, r4, r3
 800a026:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a028:	189b      	addlt	r3, r3, r2
 800a02a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a02c:	bfae      	itee	ge
 800a02e:	1b1c      	subge	r4, r3, r4
 800a030:	4623      	movlt	r3, r4
 800a032:	2400      	movlt	r4, #0
 800a034:	f1ba 0f00 	cmp.w	sl, #0
 800a038:	bfb5      	itete	lt
 800a03a:	9a05      	ldrlt	r2, [sp, #20]
 800a03c:	9e05      	ldrge	r6, [sp, #20]
 800a03e:	eba2 060a 	sublt.w	r6, r2, sl
 800a042:	4652      	movge	r2, sl
 800a044:	bfb8      	it	lt
 800a046:	2200      	movlt	r2, #0
 800a048:	e727      	b.n	8009e9a <_dtoa_r+0x63a>
 800a04a:	9e05      	ldr	r6, [sp, #20]
 800a04c:	9d08      	ldr	r5, [sp, #32]
 800a04e:	461c      	mov	r4, r3
 800a050:	e730      	b.n	8009eb4 <_dtoa_r+0x654>
 800a052:	461a      	mov	r2, r3
 800a054:	e758      	b.n	8009f08 <_dtoa_r+0x6a8>
 800a056:	2300      	movs	r3, #0
 800a058:	e786      	b.n	8009f68 <_dtoa_r+0x708>
 800a05a:	9b02      	ldr	r3, [sp, #8]
 800a05c:	e784      	b.n	8009f68 <_dtoa_r+0x708>
 800a05e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a060:	e783      	b.n	8009f6a <_dtoa_r+0x70a>
 800a062:	2300      	movs	r3, #0
 800a064:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a066:	e784      	b.n	8009f72 <_dtoa_r+0x712>
 800a068:	d09d      	beq.n	8009fa6 <_dtoa_r+0x746>
 800a06a:	9b05      	ldr	r3, [sp, #20]
 800a06c:	321c      	adds	r2, #28
 800a06e:	4413      	add	r3, r2
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	9b06      	ldr	r3, [sp, #24]
 800a074:	4416      	add	r6, r2
 800a076:	4413      	add	r3, r2
 800a078:	e794      	b.n	8009fa4 <_dtoa_r+0x744>
 800a07a:	4602      	mov	r2, r0
 800a07c:	e7f5      	b.n	800a06a <_dtoa_r+0x80a>
 800a07e:	f1ba 0f00 	cmp.w	sl, #0
 800a082:	f8cd 8010 	str.w	r8, [sp, #16]
 800a086:	46d3      	mov	fp, sl
 800a088:	dc21      	bgt.n	800a0ce <_dtoa_r+0x86e>
 800a08a:	9b07      	ldr	r3, [sp, #28]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	dd1e      	ble.n	800a0ce <_dtoa_r+0x86e>
 800a090:	f1bb 0f00 	cmp.w	fp, #0
 800a094:	f47f aeb7 	bne.w	8009e06 <_dtoa_r+0x5a6>
 800a098:	4621      	mov	r1, r4
 800a09a:	465b      	mov	r3, fp
 800a09c:	2205      	movs	r2, #5
 800a09e:	4648      	mov	r0, r9
 800a0a0:	f000 fa96 	bl	800a5d0 <__multadd>
 800a0a4:	4601      	mov	r1, r0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	9801      	ldr	r0, [sp, #4]
 800a0aa:	f000 fca9 	bl	800aa00 <__mcmp>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f77f aea9 	ble.w	8009e06 <_dtoa_r+0x5a6>
 800a0b4:	463e      	mov	r6, r7
 800a0b6:	2331      	movs	r3, #49	@ 0x31
 800a0b8:	f806 3b01 	strb.w	r3, [r6], #1
 800a0bc:	9b04      	ldr	r3, [sp, #16]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	e6a4      	b.n	8009e0e <_dtoa_r+0x5ae>
 800a0c4:	f8cd 8010 	str.w	r8, [sp, #16]
 800a0c8:	4654      	mov	r4, sl
 800a0ca:	4625      	mov	r5, r4
 800a0cc:	e7f2      	b.n	800a0b4 <_dtoa_r+0x854>
 800a0ce:	9b08      	ldr	r3, [sp, #32]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 8103 	beq.w	800a2dc <_dtoa_r+0xa7c>
 800a0d6:	2e00      	cmp	r6, #0
 800a0d8:	dd05      	ble.n	800a0e6 <_dtoa_r+0x886>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4648      	mov	r0, r9
 800a0e0:	f000 fc22 	bl	800a928 <__lshift>
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d058      	beq.n	800a19e <_dtoa_r+0x93e>
 800a0ec:	6869      	ldr	r1, [r5, #4]
 800a0ee:	4648      	mov	r0, r9
 800a0f0:	f000 fa0c 	bl	800a50c <_Balloc>
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	b928      	cbnz	r0, 800a104 <_dtoa_r+0x8a4>
 800a0f8:	4b82      	ldr	r3, [pc, #520]	@ (800a304 <_dtoa_r+0xaa4>)
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a100:	f7ff bbc7 	b.w	8009892 <_dtoa_r+0x32>
 800a104:	692a      	ldr	r2, [r5, #16]
 800a106:	3202      	adds	r2, #2
 800a108:	0092      	lsls	r2, r2, #2
 800a10a:	f105 010c 	add.w	r1, r5, #12
 800a10e:	300c      	adds	r0, #12
 800a110:	f7ff fb0f 	bl	8009732 <memcpy>
 800a114:	2201      	movs	r2, #1
 800a116:	4631      	mov	r1, r6
 800a118:	4648      	mov	r0, r9
 800a11a:	f000 fc05 	bl	800a928 <__lshift>
 800a11e:	1c7b      	adds	r3, r7, #1
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	eb07 030b 	add.w	r3, r7, fp
 800a126:	9309      	str	r3, [sp, #36]	@ 0x24
 800a128:	9b02      	ldr	r3, [sp, #8]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	46a8      	mov	r8, r5
 800a130:	9308      	str	r3, [sp, #32]
 800a132:	4605      	mov	r5, r0
 800a134:	9b05      	ldr	r3, [sp, #20]
 800a136:	9801      	ldr	r0, [sp, #4]
 800a138:	4621      	mov	r1, r4
 800a13a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a13e:	f7ff fb06 	bl	800974e <quorem>
 800a142:	4641      	mov	r1, r8
 800a144:	9002      	str	r0, [sp, #8]
 800a146:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a14a:	9801      	ldr	r0, [sp, #4]
 800a14c:	f000 fc58 	bl	800aa00 <__mcmp>
 800a150:	462a      	mov	r2, r5
 800a152:	9006      	str	r0, [sp, #24]
 800a154:	4621      	mov	r1, r4
 800a156:	4648      	mov	r0, r9
 800a158:	f000 fc6e 	bl	800aa38 <__mdiff>
 800a15c:	68c2      	ldr	r2, [r0, #12]
 800a15e:	4606      	mov	r6, r0
 800a160:	b9fa      	cbnz	r2, 800a1a2 <_dtoa_r+0x942>
 800a162:	4601      	mov	r1, r0
 800a164:	9801      	ldr	r0, [sp, #4]
 800a166:	f000 fc4b 	bl	800aa00 <__mcmp>
 800a16a:	4602      	mov	r2, r0
 800a16c:	4631      	mov	r1, r6
 800a16e:	4648      	mov	r0, r9
 800a170:	920a      	str	r2, [sp, #40]	@ 0x28
 800a172:	f000 fa0b 	bl	800a58c <_Bfree>
 800a176:	9b07      	ldr	r3, [sp, #28]
 800a178:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a17a:	9e05      	ldr	r6, [sp, #20]
 800a17c:	ea43 0102 	orr.w	r1, r3, r2
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	4319      	orrs	r1, r3
 800a184:	d10f      	bne.n	800a1a6 <_dtoa_r+0x946>
 800a186:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a18a:	d028      	beq.n	800a1de <_dtoa_r+0x97e>
 800a18c:	9b06      	ldr	r3, [sp, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dd02      	ble.n	800a198 <_dtoa_r+0x938>
 800a192:	9b02      	ldr	r3, [sp, #8]
 800a194:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a198:	f88b a000 	strb.w	sl, [fp]
 800a19c:	e639      	b.n	8009e12 <_dtoa_r+0x5b2>
 800a19e:	4628      	mov	r0, r5
 800a1a0:	e7bd      	b.n	800a11e <_dtoa_r+0x8be>
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	e7e2      	b.n	800a16c <_dtoa_r+0x90c>
 800a1a6:	9b06      	ldr	r3, [sp, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	db04      	blt.n	800a1b6 <_dtoa_r+0x956>
 800a1ac:	9907      	ldr	r1, [sp, #28]
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	9908      	ldr	r1, [sp, #32]
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	d120      	bne.n	800a1f8 <_dtoa_r+0x998>
 800a1b6:	2a00      	cmp	r2, #0
 800a1b8:	ddee      	ble.n	800a198 <_dtoa_r+0x938>
 800a1ba:	9901      	ldr	r1, [sp, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	4648      	mov	r0, r9
 800a1c0:	f000 fbb2 	bl	800a928 <__lshift>
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	9001      	str	r0, [sp, #4]
 800a1c8:	f000 fc1a 	bl	800aa00 <__mcmp>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	dc03      	bgt.n	800a1d8 <_dtoa_r+0x978>
 800a1d0:	d1e2      	bne.n	800a198 <_dtoa_r+0x938>
 800a1d2:	f01a 0f01 	tst.w	sl, #1
 800a1d6:	d0df      	beq.n	800a198 <_dtoa_r+0x938>
 800a1d8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a1dc:	d1d9      	bne.n	800a192 <_dtoa_r+0x932>
 800a1de:	2339      	movs	r3, #57	@ 0x39
 800a1e0:	f88b 3000 	strb.w	r3, [fp]
 800a1e4:	4633      	mov	r3, r6
 800a1e6:	461e      	mov	r6, r3
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a1ee:	2a39      	cmp	r2, #57	@ 0x39
 800a1f0:	d053      	beq.n	800a29a <_dtoa_r+0xa3a>
 800a1f2:	3201      	adds	r2, #1
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	e60c      	b.n	8009e12 <_dtoa_r+0x5b2>
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	dd07      	ble.n	800a20c <_dtoa_r+0x9ac>
 800a1fc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a200:	d0ed      	beq.n	800a1de <_dtoa_r+0x97e>
 800a202:	f10a 0301 	add.w	r3, sl, #1
 800a206:	f88b 3000 	strb.w	r3, [fp]
 800a20a:	e602      	b.n	8009e12 <_dtoa_r+0x5b2>
 800a20c:	9b05      	ldr	r3, [sp, #20]
 800a20e:	9a05      	ldr	r2, [sp, #20]
 800a210:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a216:	4293      	cmp	r3, r2
 800a218:	d029      	beq.n	800a26e <_dtoa_r+0xa0e>
 800a21a:	9901      	ldr	r1, [sp, #4]
 800a21c:	2300      	movs	r3, #0
 800a21e:	220a      	movs	r2, #10
 800a220:	4648      	mov	r0, r9
 800a222:	f000 f9d5 	bl	800a5d0 <__multadd>
 800a226:	45a8      	cmp	r8, r5
 800a228:	9001      	str	r0, [sp, #4]
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	f04f 020a 	mov.w	r2, #10
 800a232:	4641      	mov	r1, r8
 800a234:	4648      	mov	r0, r9
 800a236:	d107      	bne.n	800a248 <_dtoa_r+0x9e8>
 800a238:	f000 f9ca 	bl	800a5d0 <__multadd>
 800a23c:	4680      	mov	r8, r0
 800a23e:	4605      	mov	r5, r0
 800a240:	9b05      	ldr	r3, [sp, #20]
 800a242:	3301      	adds	r3, #1
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	e775      	b.n	800a134 <_dtoa_r+0x8d4>
 800a248:	f000 f9c2 	bl	800a5d0 <__multadd>
 800a24c:	4629      	mov	r1, r5
 800a24e:	4680      	mov	r8, r0
 800a250:	2300      	movs	r3, #0
 800a252:	220a      	movs	r2, #10
 800a254:	4648      	mov	r0, r9
 800a256:	f000 f9bb 	bl	800a5d0 <__multadd>
 800a25a:	4605      	mov	r5, r0
 800a25c:	e7f0      	b.n	800a240 <_dtoa_r+0x9e0>
 800a25e:	f1bb 0f00 	cmp.w	fp, #0
 800a262:	bfcc      	ite	gt
 800a264:	465e      	movgt	r6, fp
 800a266:	2601      	movle	r6, #1
 800a268:	443e      	add	r6, r7
 800a26a:	f04f 0800 	mov.w	r8, #0
 800a26e:	9901      	ldr	r1, [sp, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	4648      	mov	r0, r9
 800a274:	f000 fb58 	bl	800a928 <__lshift>
 800a278:	4621      	mov	r1, r4
 800a27a:	9001      	str	r0, [sp, #4]
 800a27c:	f000 fbc0 	bl	800aa00 <__mcmp>
 800a280:	2800      	cmp	r0, #0
 800a282:	dcaf      	bgt.n	800a1e4 <_dtoa_r+0x984>
 800a284:	d102      	bne.n	800a28c <_dtoa_r+0xa2c>
 800a286:	f01a 0f01 	tst.w	sl, #1
 800a28a:	d1ab      	bne.n	800a1e4 <_dtoa_r+0x984>
 800a28c:	4633      	mov	r3, r6
 800a28e:	461e      	mov	r6, r3
 800a290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a294:	2a30      	cmp	r2, #48	@ 0x30
 800a296:	d0fa      	beq.n	800a28e <_dtoa_r+0xa2e>
 800a298:	e5bb      	b.n	8009e12 <_dtoa_r+0x5b2>
 800a29a:	429f      	cmp	r7, r3
 800a29c:	d1a3      	bne.n	800a1e6 <_dtoa_r+0x986>
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	2331      	movs	r3, #49	@ 0x31
 800a2a6:	703b      	strb	r3, [r7, #0]
 800a2a8:	e5b3      	b.n	8009e12 <_dtoa_r+0x5b2>
 800a2aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a2ac:	4f16      	ldr	r7, [pc, #88]	@ (800a308 <_dtoa_r+0xaa8>)
 800a2ae:	b11b      	cbz	r3, 800a2b8 <_dtoa_r+0xa58>
 800a2b0:	f107 0308 	add.w	r3, r7, #8
 800a2b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	b011      	add	sp, #68	@ 0x44
 800a2bc:	ecbd 8b02 	vpop	{d8}
 800a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c4:	9b07      	ldr	r3, [sp, #28]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	f77f ae36 	ble.w	8009f38 <_dtoa_r+0x6d8>
 800a2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	e656      	b.n	8009f82 <_dtoa_r+0x722>
 800a2d4:	f1bb 0f00 	cmp.w	fp, #0
 800a2d8:	f77f aed7 	ble.w	800a08a <_dtoa_r+0x82a>
 800a2dc:	463e      	mov	r6, r7
 800a2de:	9801      	ldr	r0, [sp, #4]
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	f7ff fa34 	bl	800974e <quorem>
 800a2e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a2ea:	f806 ab01 	strb.w	sl, [r6], #1
 800a2ee:	1bf2      	subs	r2, r6, r7
 800a2f0:	4593      	cmp	fp, r2
 800a2f2:	ddb4      	ble.n	800a25e <_dtoa_r+0x9fe>
 800a2f4:	9901      	ldr	r1, [sp, #4]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	220a      	movs	r2, #10
 800a2fa:	4648      	mov	r0, r9
 800a2fc:	f000 f968 	bl	800a5d0 <__multadd>
 800a300:	9001      	str	r0, [sp, #4]
 800a302:	e7ec      	b.n	800a2de <_dtoa_r+0xa7e>
 800a304:	0800b504 	.word	0x0800b504
 800a308:	0800b488 	.word	0x0800b488

0800a30c <_free_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4605      	mov	r5, r0
 800a310:	2900      	cmp	r1, #0
 800a312:	d041      	beq.n	800a398 <_free_r+0x8c>
 800a314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a318:	1f0c      	subs	r4, r1, #4
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	bfb8      	it	lt
 800a31e:	18e4      	addlt	r4, r4, r3
 800a320:	f000 f8e8 	bl	800a4f4 <__malloc_lock>
 800a324:	4a1d      	ldr	r2, [pc, #116]	@ (800a39c <_free_r+0x90>)
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	b933      	cbnz	r3, 800a338 <_free_r+0x2c>
 800a32a:	6063      	str	r3, [r4, #4]
 800a32c:	6014      	str	r4, [r2, #0]
 800a32e:	4628      	mov	r0, r5
 800a330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a334:	f000 b8e4 	b.w	800a500 <__malloc_unlock>
 800a338:	42a3      	cmp	r3, r4
 800a33a:	d908      	bls.n	800a34e <_free_r+0x42>
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	1821      	adds	r1, r4, r0
 800a340:	428b      	cmp	r3, r1
 800a342:	bf01      	itttt	eq
 800a344:	6819      	ldreq	r1, [r3, #0]
 800a346:	685b      	ldreq	r3, [r3, #4]
 800a348:	1809      	addeq	r1, r1, r0
 800a34a:	6021      	streq	r1, [r4, #0]
 800a34c:	e7ed      	b.n	800a32a <_free_r+0x1e>
 800a34e:	461a      	mov	r2, r3
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	b10b      	cbz	r3, 800a358 <_free_r+0x4c>
 800a354:	42a3      	cmp	r3, r4
 800a356:	d9fa      	bls.n	800a34e <_free_r+0x42>
 800a358:	6811      	ldr	r1, [r2, #0]
 800a35a:	1850      	adds	r0, r2, r1
 800a35c:	42a0      	cmp	r0, r4
 800a35e:	d10b      	bne.n	800a378 <_free_r+0x6c>
 800a360:	6820      	ldr	r0, [r4, #0]
 800a362:	4401      	add	r1, r0
 800a364:	1850      	adds	r0, r2, r1
 800a366:	4283      	cmp	r3, r0
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	d1e0      	bne.n	800a32e <_free_r+0x22>
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	6053      	str	r3, [r2, #4]
 800a372:	4408      	add	r0, r1
 800a374:	6010      	str	r0, [r2, #0]
 800a376:	e7da      	b.n	800a32e <_free_r+0x22>
 800a378:	d902      	bls.n	800a380 <_free_r+0x74>
 800a37a:	230c      	movs	r3, #12
 800a37c:	602b      	str	r3, [r5, #0]
 800a37e:	e7d6      	b.n	800a32e <_free_r+0x22>
 800a380:	6820      	ldr	r0, [r4, #0]
 800a382:	1821      	adds	r1, r4, r0
 800a384:	428b      	cmp	r3, r1
 800a386:	bf04      	itt	eq
 800a388:	6819      	ldreq	r1, [r3, #0]
 800a38a:	685b      	ldreq	r3, [r3, #4]
 800a38c:	6063      	str	r3, [r4, #4]
 800a38e:	bf04      	itt	eq
 800a390:	1809      	addeq	r1, r1, r0
 800a392:	6021      	streq	r1, [r4, #0]
 800a394:	6054      	str	r4, [r2, #4]
 800a396:	e7ca      	b.n	800a32e <_free_r+0x22>
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	bf00      	nop
 800a39c:	24004e60 	.word	0x24004e60

0800a3a0 <malloc>:
 800a3a0:	4b02      	ldr	r3, [pc, #8]	@ (800a3ac <malloc+0xc>)
 800a3a2:	4601      	mov	r1, r0
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	f000 b825 	b.w	800a3f4 <_malloc_r>
 800a3aa:	bf00      	nop
 800a3ac:	24000020 	.word	0x24000020

0800a3b0 <sbrk_aligned>:
 800a3b0:	b570      	push	{r4, r5, r6, lr}
 800a3b2:	4e0f      	ldr	r6, [pc, #60]	@ (800a3f0 <sbrk_aligned+0x40>)
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	6831      	ldr	r1, [r6, #0]
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	b911      	cbnz	r1, 800a3c2 <sbrk_aligned+0x12>
 800a3bc:	f000 feaa 	bl	800b114 <_sbrk_r>
 800a3c0:	6030      	str	r0, [r6, #0]
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f000 fea5 	bl	800b114 <_sbrk_r>
 800a3ca:	1c43      	adds	r3, r0, #1
 800a3cc:	d103      	bne.n	800a3d6 <sbrk_aligned+0x26>
 800a3ce:	f04f 34ff 	mov.w	r4, #4294967295
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	bd70      	pop	{r4, r5, r6, pc}
 800a3d6:	1cc4      	adds	r4, r0, #3
 800a3d8:	f024 0403 	bic.w	r4, r4, #3
 800a3dc:	42a0      	cmp	r0, r4
 800a3de:	d0f8      	beq.n	800a3d2 <sbrk_aligned+0x22>
 800a3e0:	1a21      	subs	r1, r4, r0
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f000 fe96 	bl	800b114 <_sbrk_r>
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d1f2      	bne.n	800a3d2 <sbrk_aligned+0x22>
 800a3ec:	e7ef      	b.n	800a3ce <sbrk_aligned+0x1e>
 800a3ee:	bf00      	nop
 800a3f0:	24004e5c 	.word	0x24004e5c

0800a3f4 <_malloc_r>:
 800a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f8:	1ccd      	adds	r5, r1, #3
 800a3fa:	f025 0503 	bic.w	r5, r5, #3
 800a3fe:	3508      	adds	r5, #8
 800a400:	2d0c      	cmp	r5, #12
 800a402:	bf38      	it	cc
 800a404:	250c      	movcc	r5, #12
 800a406:	2d00      	cmp	r5, #0
 800a408:	4606      	mov	r6, r0
 800a40a:	db01      	blt.n	800a410 <_malloc_r+0x1c>
 800a40c:	42a9      	cmp	r1, r5
 800a40e:	d904      	bls.n	800a41a <_malloc_r+0x26>
 800a410:	230c      	movs	r3, #12
 800a412:	6033      	str	r3, [r6, #0]
 800a414:	2000      	movs	r0, #0
 800a416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a41a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4f0 <_malloc_r+0xfc>
 800a41e:	f000 f869 	bl	800a4f4 <__malloc_lock>
 800a422:	f8d8 3000 	ldr.w	r3, [r8]
 800a426:	461c      	mov	r4, r3
 800a428:	bb44      	cbnz	r4, 800a47c <_malloc_r+0x88>
 800a42a:	4629      	mov	r1, r5
 800a42c:	4630      	mov	r0, r6
 800a42e:	f7ff ffbf 	bl	800a3b0 <sbrk_aligned>
 800a432:	1c43      	adds	r3, r0, #1
 800a434:	4604      	mov	r4, r0
 800a436:	d158      	bne.n	800a4ea <_malloc_r+0xf6>
 800a438:	f8d8 4000 	ldr.w	r4, [r8]
 800a43c:	4627      	mov	r7, r4
 800a43e:	2f00      	cmp	r7, #0
 800a440:	d143      	bne.n	800a4ca <_malloc_r+0xd6>
 800a442:	2c00      	cmp	r4, #0
 800a444:	d04b      	beq.n	800a4de <_malloc_r+0xea>
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	4639      	mov	r1, r7
 800a44a:	4630      	mov	r0, r6
 800a44c:	eb04 0903 	add.w	r9, r4, r3
 800a450:	f000 fe60 	bl	800b114 <_sbrk_r>
 800a454:	4581      	cmp	r9, r0
 800a456:	d142      	bne.n	800a4de <_malloc_r+0xea>
 800a458:	6821      	ldr	r1, [r4, #0]
 800a45a:	1a6d      	subs	r5, r5, r1
 800a45c:	4629      	mov	r1, r5
 800a45e:	4630      	mov	r0, r6
 800a460:	f7ff ffa6 	bl	800a3b0 <sbrk_aligned>
 800a464:	3001      	adds	r0, #1
 800a466:	d03a      	beq.n	800a4de <_malloc_r+0xea>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	442b      	add	r3, r5
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	f8d8 3000 	ldr.w	r3, [r8]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	bb62      	cbnz	r2, 800a4d0 <_malloc_r+0xdc>
 800a476:	f8c8 7000 	str.w	r7, [r8]
 800a47a:	e00f      	b.n	800a49c <_malloc_r+0xa8>
 800a47c:	6822      	ldr	r2, [r4, #0]
 800a47e:	1b52      	subs	r2, r2, r5
 800a480:	d420      	bmi.n	800a4c4 <_malloc_r+0xd0>
 800a482:	2a0b      	cmp	r2, #11
 800a484:	d917      	bls.n	800a4b6 <_malloc_r+0xc2>
 800a486:	1961      	adds	r1, r4, r5
 800a488:	42a3      	cmp	r3, r4
 800a48a:	6025      	str	r5, [r4, #0]
 800a48c:	bf18      	it	ne
 800a48e:	6059      	strne	r1, [r3, #4]
 800a490:	6863      	ldr	r3, [r4, #4]
 800a492:	bf08      	it	eq
 800a494:	f8c8 1000 	streq.w	r1, [r8]
 800a498:	5162      	str	r2, [r4, r5]
 800a49a:	604b      	str	r3, [r1, #4]
 800a49c:	4630      	mov	r0, r6
 800a49e:	f000 f82f 	bl	800a500 <__malloc_unlock>
 800a4a2:	f104 000b 	add.w	r0, r4, #11
 800a4a6:	1d23      	adds	r3, r4, #4
 800a4a8:	f020 0007 	bic.w	r0, r0, #7
 800a4ac:	1ac2      	subs	r2, r0, r3
 800a4ae:	bf1c      	itt	ne
 800a4b0:	1a1b      	subne	r3, r3, r0
 800a4b2:	50a3      	strne	r3, [r4, r2]
 800a4b4:	e7af      	b.n	800a416 <_malloc_r+0x22>
 800a4b6:	6862      	ldr	r2, [r4, #4]
 800a4b8:	42a3      	cmp	r3, r4
 800a4ba:	bf0c      	ite	eq
 800a4bc:	f8c8 2000 	streq.w	r2, [r8]
 800a4c0:	605a      	strne	r2, [r3, #4]
 800a4c2:	e7eb      	b.n	800a49c <_malloc_r+0xa8>
 800a4c4:	4623      	mov	r3, r4
 800a4c6:	6864      	ldr	r4, [r4, #4]
 800a4c8:	e7ae      	b.n	800a428 <_malloc_r+0x34>
 800a4ca:	463c      	mov	r4, r7
 800a4cc:	687f      	ldr	r7, [r7, #4]
 800a4ce:	e7b6      	b.n	800a43e <_malloc_r+0x4a>
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d1fb      	bne.n	800a4d0 <_malloc_r+0xdc>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	6053      	str	r3, [r2, #4]
 800a4dc:	e7de      	b.n	800a49c <_malloc_r+0xa8>
 800a4de:	230c      	movs	r3, #12
 800a4e0:	6033      	str	r3, [r6, #0]
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f000 f80c 	bl	800a500 <__malloc_unlock>
 800a4e8:	e794      	b.n	800a414 <_malloc_r+0x20>
 800a4ea:	6005      	str	r5, [r0, #0]
 800a4ec:	e7d6      	b.n	800a49c <_malloc_r+0xa8>
 800a4ee:	bf00      	nop
 800a4f0:	24004e60 	.word	0x24004e60

0800a4f4 <__malloc_lock>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	@ (800a4fc <__malloc_lock+0x8>)
 800a4f6:	f7ff b91a 	b.w	800972e <__retarget_lock_acquire_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	24004e58 	.word	0x24004e58

0800a500 <__malloc_unlock>:
 800a500:	4801      	ldr	r0, [pc, #4]	@ (800a508 <__malloc_unlock+0x8>)
 800a502:	f7ff b915 	b.w	8009730 <__retarget_lock_release_recursive>
 800a506:	bf00      	nop
 800a508:	24004e58 	.word	0x24004e58

0800a50c <_Balloc>:
 800a50c:	b570      	push	{r4, r5, r6, lr}
 800a50e:	69c6      	ldr	r6, [r0, #28]
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	b976      	cbnz	r6, 800a534 <_Balloc+0x28>
 800a516:	2010      	movs	r0, #16
 800a518:	f7ff ff42 	bl	800a3a0 <malloc>
 800a51c:	4602      	mov	r2, r0
 800a51e:	61e0      	str	r0, [r4, #28]
 800a520:	b920      	cbnz	r0, 800a52c <_Balloc+0x20>
 800a522:	4b18      	ldr	r3, [pc, #96]	@ (800a584 <_Balloc+0x78>)
 800a524:	4818      	ldr	r0, [pc, #96]	@ (800a588 <_Balloc+0x7c>)
 800a526:	216b      	movs	r1, #107	@ 0x6b
 800a528:	f000 fe04 	bl	800b134 <__assert_func>
 800a52c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a530:	6006      	str	r6, [r0, #0]
 800a532:	60c6      	str	r6, [r0, #12]
 800a534:	69e6      	ldr	r6, [r4, #28]
 800a536:	68f3      	ldr	r3, [r6, #12]
 800a538:	b183      	cbz	r3, 800a55c <_Balloc+0x50>
 800a53a:	69e3      	ldr	r3, [r4, #28]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a542:	b9b8      	cbnz	r0, 800a574 <_Balloc+0x68>
 800a544:	2101      	movs	r1, #1
 800a546:	fa01 f605 	lsl.w	r6, r1, r5
 800a54a:	1d72      	adds	r2, r6, #5
 800a54c:	0092      	lsls	r2, r2, #2
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 fe0e 	bl	800b170 <_calloc_r>
 800a554:	b160      	cbz	r0, 800a570 <_Balloc+0x64>
 800a556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a55a:	e00e      	b.n	800a57a <_Balloc+0x6e>
 800a55c:	2221      	movs	r2, #33	@ 0x21
 800a55e:	2104      	movs	r1, #4
 800a560:	4620      	mov	r0, r4
 800a562:	f000 fe05 	bl	800b170 <_calloc_r>
 800a566:	69e3      	ldr	r3, [r4, #28]
 800a568:	60f0      	str	r0, [r6, #12]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e4      	bne.n	800a53a <_Balloc+0x2e>
 800a570:	2000      	movs	r0, #0
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	6802      	ldr	r2, [r0, #0]
 800a576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a57a:	2300      	movs	r3, #0
 800a57c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a580:	e7f7      	b.n	800a572 <_Balloc+0x66>
 800a582:	bf00      	nop
 800a584:	0800b495 	.word	0x0800b495
 800a588:	0800b515 	.word	0x0800b515

0800a58c <_Bfree>:
 800a58c:	b570      	push	{r4, r5, r6, lr}
 800a58e:	69c6      	ldr	r6, [r0, #28]
 800a590:	4605      	mov	r5, r0
 800a592:	460c      	mov	r4, r1
 800a594:	b976      	cbnz	r6, 800a5b4 <_Bfree+0x28>
 800a596:	2010      	movs	r0, #16
 800a598:	f7ff ff02 	bl	800a3a0 <malloc>
 800a59c:	4602      	mov	r2, r0
 800a59e:	61e8      	str	r0, [r5, #28]
 800a5a0:	b920      	cbnz	r0, 800a5ac <_Bfree+0x20>
 800a5a2:	4b09      	ldr	r3, [pc, #36]	@ (800a5c8 <_Bfree+0x3c>)
 800a5a4:	4809      	ldr	r0, [pc, #36]	@ (800a5cc <_Bfree+0x40>)
 800a5a6:	218f      	movs	r1, #143	@ 0x8f
 800a5a8:	f000 fdc4 	bl	800b134 <__assert_func>
 800a5ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5b0:	6006      	str	r6, [r0, #0]
 800a5b2:	60c6      	str	r6, [r0, #12]
 800a5b4:	b13c      	cbz	r4, 800a5c6 <_Bfree+0x3a>
 800a5b6:	69eb      	ldr	r3, [r5, #28]
 800a5b8:	6862      	ldr	r2, [r4, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5c0:	6021      	str	r1, [r4, #0]
 800a5c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	0800b495 	.word	0x0800b495
 800a5cc:	0800b515 	.word	0x0800b515

0800a5d0 <__multadd>:
 800a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	690d      	ldr	r5, [r1, #16]
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	460c      	mov	r4, r1
 800a5da:	461e      	mov	r6, r3
 800a5dc:	f101 0c14 	add.w	ip, r1, #20
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a5e6:	b299      	uxth	r1, r3
 800a5e8:	fb02 6101 	mla	r1, r2, r1, r6
 800a5ec:	0c1e      	lsrs	r6, r3, #16
 800a5ee:	0c0b      	lsrs	r3, r1, #16
 800a5f0:	fb02 3306 	mla	r3, r2, r6, r3
 800a5f4:	b289      	uxth	r1, r1
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5fc:	4285      	cmp	r5, r0
 800a5fe:	f84c 1b04 	str.w	r1, [ip], #4
 800a602:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a606:	dcec      	bgt.n	800a5e2 <__multadd+0x12>
 800a608:	b30e      	cbz	r6, 800a64e <__multadd+0x7e>
 800a60a:	68a3      	ldr	r3, [r4, #8]
 800a60c:	42ab      	cmp	r3, r5
 800a60e:	dc19      	bgt.n	800a644 <__multadd+0x74>
 800a610:	6861      	ldr	r1, [r4, #4]
 800a612:	4638      	mov	r0, r7
 800a614:	3101      	adds	r1, #1
 800a616:	f7ff ff79 	bl	800a50c <_Balloc>
 800a61a:	4680      	mov	r8, r0
 800a61c:	b928      	cbnz	r0, 800a62a <__multadd+0x5a>
 800a61e:	4602      	mov	r2, r0
 800a620:	4b0c      	ldr	r3, [pc, #48]	@ (800a654 <__multadd+0x84>)
 800a622:	480d      	ldr	r0, [pc, #52]	@ (800a658 <__multadd+0x88>)
 800a624:	21ba      	movs	r1, #186	@ 0xba
 800a626:	f000 fd85 	bl	800b134 <__assert_func>
 800a62a:	6922      	ldr	r2, [r4, #16]
 800a62c:	3202      	adds	r2, #2
 800a62e:	f104 010c 	add.w	r1, r4, #12
 800a632:	0092      	lsls	r2, r2, #2
 800a634:	300c      	adds	r0, #12
 800a636:	f7ff f87c 	bl	8009732 <memcpy>
 800a63a:	4621      	mov	r1, r4
 800a63c:	4638      	mov	r0, r7
 800a63e:	f7ff ffa5 	bl	800a58c <_Bfree>
 800a642:	4644      	mov	r4, r8
 800a644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a648:	3501      	adds	r5, #1
 800a64a:	615e      	str	r6, [r3, #20]
 800a64c:	6125      	str	r5, [r4, #16]
 800a64e:	4620      	mov	r0, r4
 800a650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a654:	0800b504 	.word	0x0800b504
 800a658:	0800b515 	.word	0x0800b515

0800a65c <__hi0bits>:
 800a65c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a660:	4603      	mov	r3, r0
 800a662:	bf36      	itet	cc
 800a664:	0403      	lslcc	r3, r0, #16
 800a666:	2000      	movcs	r0, #0
 800a668:	2010      	movcc	r0, #16
 800a66a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a66e:	bf3c      	itt	cc
 800a670:	021b      	lslcc	r3, r3, #8
 800a672:	3008      	addcc	r0, #8
 800a674:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a678:	bf3c      	itt	cc
 800a67a:	011b      	lslcc	r3, r3, #4
 800a67c:	3004      	addcc	r0, #4
 800a67e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a682:	bf3c      	itt	cc
 800a684:	009b      	lslcc	r3, r3, #2
 800a686:	3002      	addcc	r0, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	db05      	blt.n	800a698 <__hi0bits+0x3c>
 800a68c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a690:	f100 0001 	add.w	r0, r0, #1
 800a694:	bf08      	it	eq
 800a696:	2020      	moveq	r0, #32
 800a698:	4770      	bx	lr

0800a69a <__lo0bits>:
 800a69a:	6803      	ldr	r3, [r0, #0]
 800a69c:	4602      	mov	r2, r0
 800a69e:	f013 0007 	ands.w	r0, r3, #7
 800a6a2:	d00b      	beq.n	800a6bc <__lo0bits+0x22>
 800a6a4:	07d9      	lsls	r1, r3, #31
 800a6a6:	d421      	bmi.n	800a6ec <__lo0bits+0x52>
 800a6a8:	0798      	lsls	r0, r3, #30
 800a6aa:	bf49      	itett	mi
 800a6ac:	085b      	lsrmi	r3, r3, #1
 800a6ae:	089b      	lsrpl	r3, r3, #2
 800a6b0:	2001      	movmi	r0, #1
 800a6b2:	6013      	strmi	r3, [r2, #0]
 800a6b4:	bf5c      	itt	pl
 800a6b6:	6013      	strpl	r3, [r2, #0]
 800a6b8:	2002      	movpl	r0, #2
 800a6ba:	4770      	bx	lr
 800a6bc:	b299      	uxth	r1, r3
 800a6be:	b909      	cbnz	r1, 800a6c4 <__lo0bits+0x2a>
 800a6c0:	0c1b      	lsrs	r3, r3, #16
 800a6c2:	2010      	movs	r0, #16
 800a6c4:	b2d9      	uxtb	r1, r3
 800a6c6:	b909      	cbnz	r1, 800a6cc <__lo0bits+0x32>
 800a6c8:	3008      	adds	r0, #8
 800a6ca:	0a1b      	lsrs	r3, r3, #8
 800a6cc:	0719      	lsls	r1, r3, #28
 800a6ce:	bf04      	itt	eq
 800a6d0:	091b      	lsreq	r3, r3, #4
 800a6d2:	3004      	addeq	r0, #4
 800a6d4:	0799      	lsls	r1, r3, #30
 800a6d6:	bf04      	itt	eq
 800a6d8:	089b      	lsreq	r3, r3, #2
 800a6da:	3002      	addeq	r0, #2
 800a6dc:	07d9      	lsls	r1, r3, #31
 800a6de:	d403      	bmi.n	800a6e8 <__lo0bits+0x4e>
 800a6e0:	085b      	lsrs	r3, r3, #1
 800a6e2:	f100 0001 	add.w	r0, r0, #1
 800a6e6:	d003      	beq.n	800a6f0 <__lo0bits+0x56>
 800a6e8:	6013      	str	r3, [r2, #0]
 800a6ea:	4770      	bx	lr
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	4770      	bx	lr
 800a6f0:	2020      	movs	r0, #32
 800a6f2:	4770      	bx	lr

0800a6f4 <__i2b>:
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	f7ff ff07 	bl	800a50c <_Balloc>
 800a6fe:	4602      	mov	r2, r0
 800a700:	b928      	cbnz	r0, 800a70e <__i2b+0x1a>
 800a702:	4b05      	ldr	r3, [pc, #20]	@ (800a718 <__i2b+0x24>)
 800a704:	4805      	ldr	r0, [pc, #20]	@ (800a71c <__i2b+0x28>)
 800a706:	f240 1145 	movw	r1, #325	@ 0x145
 800a70a:	f000 fd13 	bl	800b134 <__assert_func>
 800a70e:	2301      	movs	r3, #1
 800a710:	6144      	str	r4, [r0, #20]
 800a712:	6103      	str	r3, [r0, #16]
 800a714:	bd10      	pop	{r4, pc}
 800a716:	bf00      	nop
 800a718:	0800b504 	.word	0x0800b504
 800a71c:	0800b515 	.word	0x0800b515

0800a720 <__multiply>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	4614      	mov	r4, r2
 800a726:	690a      	ldr	r2, [r1, #16]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	bfa8      	it	ge
 800a72e:	4623      	movge	r3, r4
 800a730:	460f      	mov	r7, r1
 800a732:	bfa4      	itt	ge
 800a734:	460c      	movge	r4, r1
 800a736:	461f      	movge	r7, r3
 800a738:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a73c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a740:	68a3      	ldr	r3, [r4, #8]
 800a742:	6861      	ldr	r1, [r4, #4]
 800a744:	eb0a 0609 	add.w	r6, sl, r9
 800a748:	42b3      	cmp	r3, r6
 800a74a:	b085      	sub	sp, #20
 800a74c:	bfb8      	it	lt
 800a74e:	3101      	addlt	r1, #1
 800a750:	f7ff fedc 	bl	800a50c <_Balloc>
 800a754:	b930      	cbnz	r0, 800a764 <__multiply+0x44>
 800a756:	4602      	mov	r2, r0
 800a758:	4b44      	ldr	r3, [pc, #272]	@ (800a86c <__multiply+0x14c>)
 800a75a:	4845      	ldr	r0, [pc, #276]	@ (800a870 <__multiply+0x150>)
 800a75c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a760:	f000 fce8 	bl	800b134 <__assert_func>
 800a764:	f100 0514 	add.w	r5, r0, #20
 800a768:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a76c:	462b      	mov	r3, r5
 800a76e:	2200      	movs	r2, #0
 800a770:	4543      	cmp	r3, r8
 800a772:	d321      	bcc.n	800a7b8 <__multiply+0x98>
 800a774:	f107 0114 	add.w	r1, r7, #20
 800a778:	f104 0214 	add.w	r2, r4, #20
 800a77c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a780:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a784:	9302      	str	r3, [sp, #8]
 800a786:	1b13      	subs	r3, r2, r4
 800a788:	3b15      	subs	r3, #21
 800a78a:	f023 0303 	bic.w	r3, r3, #3
 800a78e:	3304      	adds	r3, #4
 800a790:	f104 0715 	add.w	r7, r4, #21
 800a794:	42ba      	cmp	r2, r7
 800a796:	bf38      	it	cc
 800a798:	2304      	movcc	r3, #4
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	9b02      	ldr	r3, [sp, #8]
 800a79e:	9103      	str	r1, [sp, #12]
 800a7a0:	428b      	cmp	r3, r1
 800a7a2:	d80c      	bhi.n	800a7be <__multiply+0x9e>
 800a7a4:	2e00      	cmp	r6, #0
 800a7a6:	dd03      	ble.n	800a7b0 <__multiply+0x90>
 800a7a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d05b      	beq.n	800a868 <__multiply+0x148>
 800a7b0:	6106      	str	r6, [r0, #16]
 800a7b2:	b005      	add	sp, #20
 800a7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b8:	f843 2b04 	str.w	r2, [r3], #4
 800a7bc:	e7d8      	b.n	800a770 <__multiply+0x50>
 800a7be:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7c2:	f1ba 0f00 	cmp.w	sl, #0
 800a7c6:	d024      	beq.n	800a812 <__multiply+0xf2>
 800a7c8:	f104 0e14 	add.w	lr, r4, #20
 800a7cc:	46a9      	mov	r9, r5
 800a7ce:	f04f 0c00 	mov.w	ip, #0
 800a7d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7d6:	f8d9 3000 	ldr.w	r3, [r9]
 800a7da:	fa1f fb87 	uxth.w	fp, r7
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a7e8:	f8d9 7000 	ldr.w	r7, [r9]
 800a7ec:	4463      	add	r3, ip
 800a7ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7f2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a7f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a800:	4572      	cmp	r2, lr
 800a802:	f849 3b04 	str.w	r3, [r9], #4
 800a806:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a80a:	d8e2      	bhi.n	800a7d2 <__multiply+0xb2>
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	f845 c003 	str.w	ip, [r5, r3]
 800a812:	9b03      	ldr	r3, [sp, #12]
 800a814:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a818:	3104      	adds	r1, #4
 800a81a:	f1b9 0f00 	cmp.w	r9, #0
 800a81e:	d021      	beq.n	800a864 <__multiply+0x144>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	f104 0c14 	add.w	ip, r4, #20
 800a826:	46ae      	mov	lr, r5
 800a828:	f04f 0a00 	mov.w	sl, #0
 800a82c:	f8bc b000 	ldrh.w	fp, [ip]
 800a830:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a834:	fb09 770b 	mla	r7, r9, fp, r7
 800a838:	4457      	add	r7, sl
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a840:	f84e 3b04 	str.w	r3, [lr], #4
 800a844:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a848:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a84c:	f8be 3000 	ldrh.w	r3, [lr]
 800a850:	fb09 330a 	mla	r3, r9, sl, r3
 800a854:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a858:	4562      	cmp	r2, ip
 800a85a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a85e:	d8e5      	bhi.n	800a82c <__multiply+0x10c>
 800a860:	9f01      	ldr	r7, [sp, #4]
 800a862:	51eb      	str	r3, [r5, r7]
 800a864:	3504      	adds	r5, #4
 800a866:	e799      	b.n	800a79c <__multiply+0x7c>
 800a868:	3e01      	subs	r6, #1
 800a86a:	e79b      	b.n	800a7a4 <__multiply+0x84>
 800a86c:	0800b504 	.word	0x0800b504
 800a870:	0800b515 	.word	0x0800b515

0800a874 <__pow5mult>:
 800a874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a878:	4615      	mov	r5, r2
 800a87a:	f012 0203 	ands.w	r2, r2, #3
 800a87e:	4607      	mov	r7, r0
 800a880:	460e      	mov	r6, r1
 800a882:	d007      	beq.n	800a894 <__pow5mult+0x20>
 800a884:	4c25      	ldr	r4, [pc, #148]	@ (800a91c <__pow5mult+0xa8>)
 800a886:	3a01      	subs	r2, #1
 800a888:	2300      	movs	r3, #0
 800a88a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a88e:	f7ff fe9f 	bl	800a5d0 <__multadd>
 800a892:	4606      	mov	r6, r0
 800a894:	10ad      	asrs	r5, r5, #2
 800a896:	d03d      	beq.n	800a914 <__pow5mult+0xa0>
 800a898:	69fc      	ldr	r4, [r7, #28]
 800a89a:	b97c      	cbnz	r4, 800a8bc <__pow5mult+0x48>
 800a89c:	2010      	movs	r0, #16
 800a89e:	f7ff fd7f 	bl	800a3a0 <malloc>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	61f8      	str	r0, [r7, #28]
 800a8a6:	b928      	cbnz	r0, 800a8b4 <__pow5mult+0x40>
 800a8a8:	4b1d      	ldr	r3, [pc, #116]	@ (800a920 <__pow5mult+0xac>)
 800a8aa:	481e      	ldr	r0, [pc, #120]	@ (800a924 <__pow5mult+0xb0>)
 800a8ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8b0:	f000 fc40 	bl	800b134 <__assert_func>
 800a8b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8b8:	6004      	str	r4, [r0, #0]
 800a8ba:	60c4      	str	r4, [r0, #12]
 800a8bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8c4:	b94c      	cbnz	r4, 800a8da <__pow5mult+0x66>
 800a8c6:	f240 2171 	movw	r1, #625	@ 0x271
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	f7ff ff12 	bl	800a6f4 <__i2b>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	6003      	str	r3, [r0, #0]
 800a8da:	f04f 0900 	mov.w	r9, #0
 800a8de:	07eb      	lsls	r3, r5, #31
 800a8e0:	d50a      	bpl.n	800a8f8 <__pow5mult+0x84>
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4622      	mov	r2, r4
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	f7ff ff1a 	bl	800a720 <__multiply>
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7ff fe4b 	bl	800a58c <_Bfree>
 800a8f6:	4646      	mov	r6, r8
 800a8f8:	106d      	asrs	r5, r5, #1
 800a8fa:	d00b      	beq.n	800a914 <__pow5mult+0xa0>
 800a8fc:	6820      	ldr	r0, [r4, #0]
 800a8fe:	b938      	cbnz	r0, 800a910 <__pow5mult+0x9c>
 800a900:	4622      	mov	r2, r4
 800a902:	4621      	mov	r1, r4
 800a904:	4638      	mov	r0, r7
 800a906:	f7ff ff0b 	bl	800a720 <__multiply>
 800a90a:	6020      	str	r0, [r4, #0]
 800a90c:	f8c0 9000 	str.w	r9, [r0]
 800a910:	4604      	mov	r4, r0
 800a912:	e7e4      	b.n	800a8de <__pow5mult+0x6a>
 800a914:	4630      	mov	r0, r6
 800a916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a91a:	bf00      	nop
 800a91c:	0800b570 	.word	0x0800b570
 800a920:	0800b495 	.word	0x0800b495
 800a924:	0800b515 	.word	0x0800b515

0800a928 <__lshift>:
 800a928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a92c:	460c      	mov	r4, r1
 800a92e:	6849      	ldr	r1, [r1, #4]
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a936:	68a3      	ldr	r3, [r4, #8]
 800a938:	4607      	mov	r7, r0
 800a93a:	4691      	mov	r9, r2
 800a93c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a940:	f108 0601 	add.w	r6, r8, #1
 800a944:	42b3      	cmp	r3, r6
 800a946:	db0b      	blt.n	800a960 <__lshift+0x38>
 800a948:	4638      	mov	r0, r7
 800a94a:	f7ff fddf 	bl	800a50c <_Balloc>
 800a94e:	4605      	mov	r5, r0
 800a950:	b948      	cbnz	r0, 800a966 <__lshift+0x3e>
 800a952:	4602      	mov	r2, r0
 800a954:	4b28      	ldr	r3, [pc, #160]	@ (800a9f8 <__lshift+0xd0>)
 800a956:	4829      	ldr	r0, [pc, #164]	@ (800a9fc <__lshift+0xd4>)
 800a958:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a95c:	f000 fbea 	bl	800b134 <__assert_func>
 800a960:	3101      	adds	r1, #1
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	e7ee      	b.n	800a944 <__lshift+0x1c>
 800a966:	2300      	movs	r3, #0
 800a968:	f100 0114 	add.w	r1, r0, #20
 800a96c:	f100 0210 	add.w	r2, r0, #16
 800a970:	4618      	mov	r0, r3
 800a972:	4553      	cmp	r3, sl
 800a974:	db33      	blt.n	800a9de <__lshift+0xb6>
 800a976:	6920      	ldr	r0, [r4, #16]
 800a978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a97c:	f104 0314 	add.w	r3, r4, #20
 800a980:	f019 091f 	ands.w	r9, r9, #31
 800a984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a988:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a98c:	d02b      	beq.n	800a9e6 <__lshift+0xbe>
 800a98e:	f1c9 0e20 	rsb	lr, r9, #32
 800a992:	468a      	mov	sl, r1
 800a994:	2200      	movs	r2, #0
 800a996:	6818      	ldr	r0, [r3, #0]
 800a998:	fa00 f009 	lsl.w	r0, r0, r9
 800a99c:	4310      	orrs	r0, r2
 800a99e:	f84a 0b04 	str.w	r0, [sl], #4
 800a9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9a6:	459c      	cmp	ip, r3
 800a9a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9ac:	d8f3      	bhi.n	800a996 <__lshift+0x6e>
 800a9ae:	ebac 0304 	sub.w	r3, ip, r4
 800a9b2:	3b15      	subs	r3, #21
 800a9b4:	f023 0303 	bic.w	r3, r3, #3
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	f104 0015 	add.w	r0, r4, #21
 800a9be:	4584      	cmp	ip, r0
 800a9c0:	bf38      	it	cc
 800a9c2:	2304      	movcc	r3, #4
 800a9c4:	50ca      	str	r2, [r1, r3]
 800a9c6:	b10a      	cbz	r2, 800a9cc <__lshift+0xa4>
 800a9c8:	f108 0602 	add.w	r6, r8, #2
 800a9cc:	3e01      	subs	r6, #1
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	612e      	str	r6, [r5, #16]
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	f7ff fdda 	bl	800a58c <_Bfree>
 800a9d8:	4628      	mov	r0, r5
 800a9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9de:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	e7c5      	b.n	800a972 <__lshift+0x4a>
 800a9e6:	3904      	subs	r1, #4
 800a9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9f0:	459c      	cmp	ip, r3
 800a9f2:	d8f9      	bhi.n	800a9e8 <__lshift+0xc0>
 800a9f4:	e7ea      	b.n	800a9cc <__lshift+0xa4>
 800a9f6:	bf00      	nop
 800a9f8:	0800b504 	.word	0x0800b504
 800a9fc:	0800b515 	.word	0x0800b515

0800aa00 <__mcmp>:
 800aa00:	690a      	ldr	r2, [r1, #16]
 800aa02:	4603      	mov	r3, r0
 800aa04:	6900      	ldr	r0, [r0, #16]
 800aa06:	1a80      	subs	r0, r0, r2
 800aa08:	b530      	push	{r4, r5, lr}
 800aa0a:	d10e      	bne.n	800aa2a <__mcmp+0x2a>
 800aa0c:	3314      	adds	r3, #20
 800aa0e:	3114      	adds	r1, #20
 800aa10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa20:	4295      	cmp	r5, r2
 800aa22:	d003      	beq.n	800aa2c <__mcmp+0x2c>
 800aa24:	d205      	bcs.n	800aa32 <__mcmp+0x32>
 800aa26:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2a:	bd30      	pop	{r4, r5, pc}
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	d3f3      	bcc.n	800aa18 <__mcmp+0x18>
 800aa30:	e7fb      	b.n	800aa2a <__mcmp+0x2a>
 800aa32:	2001      	movs	r0, #1
 800aa34:	e7f9      	b.n	800aa2a <__mcmp+0x2a>
	...

0800aa38 <__mdiff>:
 800aa38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	4689      	mov	r9, r1
 800aa3e:	4606      	mov	r6, r0
 800aa40:	4611      	mov	r1, r2
 800aa42:	4648      	mov	r0, r9
 800aa44:	4614      	mov	r4, r2
 800aa46:	f7ff ffdb 	bl	800aa00 <__mcmp>
 800aa4a:	1e05      	subs	r5, r0, #0
 800aa4c:	d112      	bne.n	800aa74 <__mdiff+0x3c>
 800aa4e:	4629      	mov	r1, r5
 800aa50:	4630      	mov	r0, r6
 800aa52:	f7ff fd5b 	bl	800a50c <_Balloc>
 800aa56:	4602      	mov	r2, r0
 800aa58:	b928      	cbnz	r0, 800aa66 <__mdiff+0x2e>
 800aa5a:	4b3f      	ldr	r3, [pc, #252]	@ (800ab58 <__mdiff+0x120>)
 800aa5c:	f240 2137 	movw	r1, #567	@ 0x237
 800aa60:	483e      	ldr	r0, [pc, #248]	@ (800ab5c <__mdiff+0x124>)
 800aa62:	f000 fb67 	bl	800b134 <__assert_func>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	b003      	add	sp, #12
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	bfbc      	itt	lt
 800aa76:	464b      	movlt	r3, r9
 800aa78:	46a1      	movlt	r9, r4
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa80:	bfba      	itte	lt
 800aa82:	461c      	movlt	r4, r3
 800aa84:	2501      	movlt	r5, #1
 800aa86:	2500      	movge	r5, #0
 800aa88:	f7ff fd40 	bl	800a50c <_Balloc>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	b918      	cbnz	r0, 800aa98 <__mdiff+0x60>
 800aa90:	4b31      	ldr	r3, [pc, #196]	@ (800ab58 <__mdiff+0x120>)
 800aa92:	f240 2145 	movw	r1, #581	@ 0x245
 800aa96:	e7e3      	b.n	800aa60 <__mdiff+0x28>
 800aa98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa9c:	6926      	ldr	r6, [r4, #16]
 800aa9e:	60c5      	str	r5, [r0, #12]
 800aaa0:	f109 0310 	add.w	r3, r9, #16
 800aaa4:	f109 0514 	add.w	r5, r9, #20
 800aaa8:	f104 0e14 	add.w	lr, r4, #20
 800aaac:	f100 0b14 	add.w	fp, r0, #20
 800aab0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aab4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aab8:	9301      	str	r3, [sp, #4]
 800aaba:	46d9      	mov	r9, fp
 800aabc:	f04f 0c00 	mov.w	ip, #0
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aac6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	fa1f f38a 	uxth.w	r3, sl
 800aad0:	4619      	mov	r1, r3
 800aad2:	b283      	uxth	r3, r0
 800aad4:	1acb      	subs	r3, r1, r3
 800aad6:	0c00      	lsrs	r0, r0, #16
 800aad8:	4463      	add	r3, ip
 800aada:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aade:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aae8:	4576      	cmp	r6, lr
 800aaea:	f849 3b04 	str.w	r3, [r9], #4
 800aaee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaf2:	d8e5      	bhi.n	800aac0 <__mdiff+0x88>
 800aaf4:	1b33      	subs	r3, r6, r4
 800aaf6:	3b15      	subs	r3, #21
 800aaf8:	f023 0303 	bic.w	r3, r3, #3
 800aafc:	3415      	adds	r4, #21
 800aafe:	3304      	adds	r3, #4
 800ab00:	42a6      	cmp	r6, r4
 800ab02:	bf38      	it	cc
 800ab04:	2304      	movcc	r3, #4
 800ab06:	441d      	add	r5, r3
 800ab08:	445b      	add	r3, fp
 800ab0a:	461e      	mov	r6, r3
 800ab0c:	462c      	mov	r4, r5
 800ab0e:	4544      	cmp	r4, r8
 800ab10:	d30e      	bcc.n	800ab30 <__mdiff+0xf8>
 800ab12:	f108 0103 	add.w	r1, r8, #3
 800ab16:	1b49      	subs	r1, r1, r5
 800ab18:	f021 0103 	bic.w	r1, r1, #3
 800ab1c:	3d03      	subs	r5, #3
 800ab1e:	45a8      	cmp	r8, r5
 800ab20:	bf38      	it	cc
 800ab22:	2100      	movcc	r1, #0
 800ab24:	440b      	add	r3, r1
 800ab26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab2a:	b191      	cbz	r1, 800ab52 <__mdiff+0x11a>
 800ab2c:	6117      	str	r7, [r2, #16]
 800ab2e:	e79d      	b.n	800aa6c <__mdiff+0x34>
 800ab30:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab34:	46e6      	mov	lr, ip
 800ab36:	0c08      	lsrs	r0, r1, #16
 800ab38:	fa1c fc81 	uxtah	ip, ip, r1
 800ab3c:	4471      	add	r1, lr
 800ab3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab42:	b289      	uxth	r1, r1
 800ab44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab48:	f846 1b04 	str.w	r1, [r6], #4
 800ab4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab50:	e7dd      	b.n	800ab0e <__mdiff+0xd6>
 800ab52:	3f01      	subs	r7, #1
 800ab54:	e7e7      	b.n	800ab26 <__mdiff+0xee>
 800ab56:	bf00      	nop
 800ab58:	0800b504 	.word	0x0800b504
 800ab5c:	0800b515 	.word	0x0800b515

0800ab60 <__d2b>:
 800ab60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab64:	460f      	mov	r7, r1
 800ab66:	2101      	movs	r1, #1
 800ab68:	ec59 8b10 	vmov	r8, r9, d0
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	f7ff fccd 	bl	800a50c <_Balloc>
 800ab72:	4604      	mov	r4, r0
 800ab74:	b930      	cbnz	r0, 800ab84 <__d2b+0x24>
 800ab76:	4602      	mov	r2, r0
 800ab78:	4b23      	ldr	r3, [pc, #140]	@ (800ac08 <__d2b+0xa8>)
 800ab7a:	4824      	ldr	r0, [pc, #144]	@ (800ac0c <__d2b+0xac>)
 800ab7c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab80:	f000 fad8 	bl	800b134 <__assert_func>
 800ab84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab8c:	b10d      	cbz	r5, 800ab92 <__d2b+0x32>
 800ab8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab92:	9301      	str	r3, [sp, #4]
 800ab94:	f1b8 0300 	subs.w	r3, r8, #0
 800ab98:	d023      	beq.n	800abe2 <__d2b+0x82>
 800ab9a:	4668      	mov	r0, sp
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	f7ff fd7c 	bl	800a69a <__lo0bits>
 800aba2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aba6:	b1d0      	cbz	r0, 800abde <__d2b+0x7e>
 800aba8:	f1c0 0320 	rsb	r3, r0, #32
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	430b      	orrs	r3, r1
 800abb2:	40c2      	lsrs	r2, r0
 800abb4:	6163      	str	r3, [r4, #20]
 800abb6:	9201      	str	r2, [sp, #4]
 800abb8:	9b01      	ldr	r3, [sp, #4]
 800abba:	61a3      	str	r3, [r4, #24]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bf0c      	ite	eq
 800abc0:	2201      	moveq	r2, #1
 800abc2:	2202      	movne	r2, #2
 800abc4:	6122      	str	r2, [r4, #16]
 800abc6:	b1a5      	cbz	r5, 800abf2 <__d2b+0x92>
 800abc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abcc:	4405      	add	r5, r0
 800abce:	603d      	str	r5, [r7, #0]
 800abd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abd4:	6030      	str	r0, [r6, #0]
 800abd6:	4620      	mov	r0, r4
 800abd8:	b003      	add	sp, #12
 800abda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abde:	6161      	str	r1, [r4, #20]
 800abe0:	e7ea      	b.n	800abb8 <__d2b+0x58>
 800abe2:	a801      	add	r0, sp, #4
 800abe4:	f7ff fd59 	bl	800a69a <__lo0bits>
 800abe8:	9b01      	ldr	r3, [sp, #4]
 800abea:	6163      	str	r3, [r4, #20]
 800abec:	3020      	adds	r0, #32
 800abee:	2201      	movs	r2, #1
 800abf0:	e7e8      	b.n	800abc4 <__d2b+0x64>
 800abf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abfa:	6038      	str	r0, [r7, #0]
 800abfc:	6918      	ldr	r0, [r3, #16]
 800abfe:	f7ff fd2d 	bl	800a65c <__hi0bits>
 800ac02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac06:	e7e5      	b.n	800abd4 <__d2b+0x74>
 800ac08:	0800b504 	.word	0x0800b504
 800ac0c:	0800b515 	.word	0x0800b515

0800ac10 <__sfputc_r>:
 800ac10:	6893      	ldr	r3, [r2, #8]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	b410      	push	{r4}
 800ac18:	6093      	str	r3, [r2, #8]
 800ac1a:	da08      	bge.n	800ac2e <__sfputc_r+0x1e>
 800ac1c:	6994      	ldr	r4, [r2, #24]
 800ac1e:	42a3      	cmp	r3, r4
 800ac20:	db01      	blt.n	800ac26 <__sfputc_r+0x16>
 800ac22:	290a      	cmp	r1, #10
 800ac24:	d103      	bne.n	800ac2e <__sfputc_r+0x1e>
 800ac26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac2a:	f000 b9df 	b.w	800afec <__swbuf_r>
 800ac2e:	6813      	ldr	r3, [r2, #0]
 800ac30:	1c58      	adds	r0, r3, #1
 800ac32:	6010      	str	r0, [r2, #0]
 800ac34:	7019      	strb	r1, [r3, #0]
 800ac36:	4608      	mov	r0, r1
 800ac38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <__sfputs_r>:
 800ac3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac40:	4606      	mov	r6, r0
 800ac42:	460f      	mov	r7, r1
 800ac44:	4614      	mov	r4, r2
 800ac46:	18d5      	adds	r5, r2, r3
 800ac48:	42ac      	cmp	r4, r5
 800ac4a:	d101      	bne.n	800ac50 <__sfputs_r+0x12>
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	e007      	b.n	800ac60 <__sfputs_r+0x22>
 800ac50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac54:	463a      	mov	r2, r7
 800ac56:	4630      	mov	r0, r6
 800ac58:	f7ff ffda 	bl	800ac10 <__sfputc_r>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d1f3      	bne.n	800ac48 <__sfputs_r+0xa>
 800ac60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac64 <_vfiprintf_r>:
 800ac64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	460d      	mov	r5, r1
 800ac6a:	b09d      	sub	sp, #116	@ 0x74
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	4698      	mov	r8, r3
 800ac70:	4606      	mov	r6, r0
 800ac72:	b118      	cbz	r0, 800ac7c <_vfiprintf_r+0x18>
 800ac74:	6a03      	ldr	r3, [r0, #32]
 800ac76:	b90b      	cbnz	r3, 800ac7c <_vfiprintf_r+0x18>
 800ac78:	f7fe fbfa 	bl	8009470 <__sinit>
 800ac7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac7e:	07d9      	lsls	r1, r3, #31
 800ac80:	d405      	bmi.n	800ac8e <_vfiprintf_r+0x2a>
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	059a      	lsls	r2, r3, #22
 800ac86:	d402      	bmi.n	800ac8e <_vfiprintf_r+0x2a>
 800ac88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac8a:	f7fe fd50 	bl	800972e <__retarget_lock_acquire_recursive>
 800ac8e:	89ab      	ldrh	r3, [r5, #12]
 800ac90:	071b      	lsls	r3, r3, #28
 800ac92:	d501      	bpl.n	800ac98 <_vfiprintf_r+0x34>
 800ac94:	692b      	ldr	r3, [r5, #16]
 800ac96:	b99b      	cbnz	r3, 800acc0 <_vfiprintf_r+0x5c>
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f000 f9e4 	bl	800b068 <__swsetup_r>
 800aca0:	b170      	cbz	r0, 800acc0 <_vfiprintf_r+0x5c>
 800aca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aca4:	07dc      	lsls	r4, r3, #31
 800aca6:	d504      	bpl.n	800acb2 <_vfiprintf_r+0x4e>
 800aca8:	f04f 30ff 	mov.w	r0, #4294967295
 800acac:	b01d      	add	sp, #116	@ 0x74
 800acae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	0598      	lsls	r0, r3, #22
 800acb6:	d4f7      	bmi.n	800aca8 <_vfiprintf_r+0x44>
 800acb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acba:	f7fe fd39 	bl	8009730 <__retarget_lock_release_recursive>
 800acbe:	e7f3      	b.n	800aca8 <_vfiprintf_r+0x44>
 800acc0:	2300      	movs	r3, #0
 800acc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800acc4:	2320      	movs	r3, #32
 800acc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acca:	f8cd 800c 	str.w	r8, [sp, #12]
 800acce:	2330      	movs	r3, #48	@ 0x30
 800acd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae80 <_vfiprintf_r+0x21c>
 800acd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acd8:	f04f 0901 	mov.w	r9, #1
 800acdc:	4623      	mov	r3, r4
 800acde:	469a      	mov	sl, r3
 800ace0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace4:	b10a      	cbz	r2, 800acea <_vfiprintf_r+0x86>
 800ace6:	2a25      	cmp	r2, #37	@ 0x25
 800ace8:	d1f9      	bne.n	800acde <_vfiprintf_r+0x7a>
 800acea:	ebba 0b04 	subs.w	fp, sl, r4
 800acee:	d00b      	beq.n	800ad08 <_vfiprintf_r+0xa4>
 800acf0:	465b      	mov	r3, fp
 800acf2:	4622      	mov	r2, r4
 800acf4:	4629      	mov	r1, r5
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7ff ffa1 	bl	800ac3e <__sfputs_r>
 800acfc:	3001      	adds	r0, #1
 800acfe:	f000 80a7 	beq.w	800ae50 <_vfiprintf_r+0x1ec>
 800ad02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad04:	445a      	add	r2, fp
 800ad06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad08:	f89a 3000 	ldrb.w	r3, [sl]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 809f 	beq.w	800ae50 <_vfiprintf_r+0x1ec>
 800ad12:	2300      	movs	r3, #0
 800ad14:	f04f 32ff 	mov.w	r2, #4294967295
 800ad18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad1c:	f10a 0a01 	add.w	sl, sl, #1
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	9307      	str	r3, [sp, #28]
 800ad24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad28:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad2a:	4654      	mov	r4, sl
 800ad2c:	2205      	movs	r2, #5
 800ad2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad32:	4853      	ldr	r0, [pc, #332]	@ (800ae80 <_vfiprintf_r+0x21c>)
 800ad34:	f7f5 fad4 	bl	80002e0 <memchr>
 800ad38:	9a04      	ldr	r2, [sp, #16]
 800ad3a:	b9d8      	cbnz	r0, 800ad74 <_vfiprintf_r+0x110>
 800ad3c:	06d1      	lsls	r1, r2, #27
 800ad3e:	bf44      	itt	mi
 800ad40:	2320      	movmi	r3, #32
 800ad42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad46:	0713      	lsls	r3, r2, #28
 800ad48:	bf44      	itt	mi
 800ad4a:	232b      	movmi	r3, #43	@ 0x2b
 800ad4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad50:	f89a 3000 	ldrb.w	r3, [sl]
 800ad54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad56:	d015      	beq.n	800ad84 <_vfiprintf_r+0x120>
 800ad58:	9a07      	ldr	r2, [sp, #28]
 800ad5a:	4654      	mov	r4, sl
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	f04f 0c0a 	mov.w	ip, #10
 800ad62:	4621      	mov	r1, r4
 800ad64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad68:	3b30      	subs	r3, #48	@ 0x30
 800ad6a:	2b09      	cmp	r3, #9
 800ad6c:	d94b      	bls.n	800ae06 <_vfiprintf_r+0x1a2>
 800ad6e:	b1b0      	cbz	r0, 800ad9e <_vfiprintf_r+0x13a>
 800ad70:	9207      	str	r2, [sp, #28]
 800ad72:	e014      	b.n	800ad9e <_vfiprintf_r+0x13a>
 800ad74:	eba0 0308 	sub.w	r3, r0, r8
 800ad78:	fa09 f303 	lsl.w	r3, r9, r3
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	9304      	str	r3, [sp, #16]
 800ad80:	46a2      	mov	sl, r4
 800ad82:	e7d2      	b.n	800ad2a <_vfiprintf_r+0xc6>
 800ad84:	9b03      	ldr	r3, [sp, #12]
 800ad86:	1d19      	adds	r1, r3, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	9103      	str	r1, [sp, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	bfbb      	ittet	lt
 800ad90:	425b      	neglt	r3, r3
 800ad92:	f042 0202 	orrlt.w	r2, r2, #2
 800ad96:	9307      	strge	r3, [sp, #28]
 800ad98:	9307      	strlt	r3, [sp, #28]
 800ad9a:	bfb8      	it	lt
 800ad9c:	9204      	strlt	r2, [sp, #16]
 800ad9e:	7823      	ldrb	r3, [r4, #0]
 800ada0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ada2:	d10a      	bne.n	800adba <_vfiprintf_r+0x156>
 800ada4:	7863      	ldrb	r3, [r4, #1]
 800ada6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ada8:	d132      	bne.n	800ae10 <_vfiprintf_r+0x1ac>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	1d1a      	adds	r2, r3, #4
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	9203      	str	r2, [sp, #12]
 800adb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adb6:	3402      	adds	r4, #2
 800adb8:	9305      	str	r3, [sp, #20]
 800adba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae90 <_vfiprintf_r+0x22c>
 800adbe:	7821      	ldrb	r1, [r4, #0]
 800adc0:	2203      	movs	r2, #3
 800adc2:	4650      	mov	r0, sl
 800adc4:	f7f5 fa8c 	bl	80002e0 <memchr>
 800adc8:	b138      	cbz	r0, 800adda <_vfiprintf_r+0x176>
 800adca:	9b04      	ldr	r3, [sp, #16]
 800adcc:	eba0 000a 	sub.w	r0, r0, sl
 800add0:	2240      	movs	r2, #64	@ 0x40
 800add2:	4082      	lsls	r2, r0
 800add4:	4313      	orrs	r3, r2
 800add6:	3401      	adds	r4, #1
 800add8:	9304      	str	r3, [sp, #16]
 800adda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adde:	4829      	ldr	r0, [pc, #164]	@ (800ae84 <_vfiprintf_r+0x220>)
 800ade0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ade4:	2206      	movs	r2, #6
 800ade6:	f7f5 fa7b 	bl	80002e0 <memchr>
 800adea:	2800      	cmp	r0, #0
 800adec:	d03f      	beq.n	800ae6e <_vfiprintf_r+0x20a>
 800adee:	4b26      	ldr	r3, [pc, #152]	@ (800ae88 <_vfiprintf_r+0x224>)
 800adf0:	bb1b      	cbnz	r3, 800ae3a <_vfiprintf_r+0x1d6>
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	3307      	adds	r3, #7
 800adf6:	f023 0307 	bic.w	r3, r3, #7
 800adfa:	3308      	adds	r3, #8
 800adfc:	9303      	str	r3, [sp, #12]
 800adfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae00:	443b      	add	r3, r7
 800ae02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae04:	e76a      	b.n	800acdc <_vfiprintf_r+0x78>
 800ae06:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	2001      	movs	r0, #1
 800ae0e:	e7a8      	b.n	800ad62 <_vfiprintf_r+0xfe>
 800ae10:	2300      	movs	r3, #0
 800ae12:	3401      	adds	r4, #1
 800ae14:	9305      	str	r3, [sp, #20]
 800ae16:	4619      	mov	r1, r3
 800ae18:	f04f 0c0a 	mov.w	ip, #10
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae22:	3a30      	subs	r2, #48	@ 0x30
 800ae24:	2a09      	cmp	r2, #9
 800ae26:	d903      	bls.n	800ae30 <_vfiprintf_r+0x1cc>
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d0c6      	beq.n	800adba <_vfiprintf_r+0x156>
 800ae2c:	9105      	str	r1, [sp, #20]
 800ae2e:	e7c4      	b.n	800adba <_vfiprintf_r+0x156>
 800ae30:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae34:	4604      	mov	r4, r0
 800ae36:	2301      	movs	r3, #1
 800ae38:	e7f0      	b.n	800ae1c <_vfiprintf_r+0x1b8>
 800ae3a:	ab03      	add	r3, sp, #12
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	462a      	mov	r2, r5
 800ae40:	4b12      	ldr	r3, [pc, #72]	@ (800ae8c <_vfiprintf_r+0x228>)
 800ae42:	a904      	add	r1, sp, #16
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7fd fedf 	bl	8008c08 <_printf_float>
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	1c78      	adds	r0, r7, #1
 800ae4e:	d1d6      	bne.n	800adfe <_vfiprintf_r+0x19a>
 800ae50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae52:	07d9      	lsls	r1, r3, #31
 800ae54:	d405      	bmi.n	800ae62 <_vfiprintf_r+0x1fe>
 800ae56:	89ab      	ldrh	r3, [r5, #12]
 800ae58:	059a      	lsls	r2, r3, #22
 800ae5a:	d402      	bmi.n	800ae62 <_vfiprintf_r+0x1fe>
 800ae5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae5e:	f7fe fc67 	bl	8009730 <__retarget_lock_release_recursive>
 800ae62:	89ab      	ldrh	r3, [r5, #12]
 800ae64:	065b      	lsls	r3, r3, #25
 800ae66:	f53f af1f 	bmi.w	800aca8 <_vfiprintf_r+0x44>
 800ae6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae6c:	e71e      	b.n	800acac <_vfiprintf_r+0x48>
 800ae6e:	ab03      	add	r3, sp, #12
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	462a      	mov	r2, r5
 800ae74:	4b05      	ldr	r3, [pc, #20]	@ (800ae8c <_vfiprintf_r+0x228>)
 800ae76:	a904      	add	r1, sp, #16
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f7fe f94d 	bl	8009118 <_printf_i>
 800ae7e:	e7e4      	b.n	800ae4a <_vfiprintf_r+0x1e6>
 800ae80:	0800b670 	.word	0x0800b670
 800ae84:	0800b67a 	.word	0x0800b67a
 800ae88:	08008c09 	.word	0x08008c09
 800ae8c:	0800ac3f 	.word	0x0800ac3f
 800ae90:	0800b676 	.word	0x0800b676

0800ae94 <__sflush_r>:
 800ae94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9c:	0716      	lsls	r6, r2, #28
 800ae9e:	4605      	mov	r5, r0
 800aea0:	460c      	mov	r4, r1
 800aea2:	d454      	bmi.n	800af4e <__sflush_r+0xba>
 800aea4:	684b      	ldr	r3, [r1, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	dc02      	bgt.n	800aeb0 <__sflush_r+0x1c>
 800aeaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dd48      	ble.n	800af42 <__sflush_r+0xae>
 800aeb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aeb2:	2e00      	cmp	r6, #0
 800aeb4:	d045      	beq.n	800af42 <__sflush_r+0xae>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aebc:	682f      	ldr	r7, [r5, #0]
 800aebe:	6a21      	ldr	r1, [r4, #32]
 800aec0:	602b      	str	r3, [r5, #0]
 800aec2:	d030      	beq.n	800af26 <__sflush_r+0x92>
 800aec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	0759      	lsls	r1, r3, #29
 800aeca:	d505      	bpl.n	800aed8 <__sflush_r+0x44>
 800aecc:	6863      	ldr	r3, [r4, #4]
 800aece:	1ad2      	subs	r2, r2, r3
 800aed0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aed2:	b10b      	cbz	r3, 800aed8 <__sflush_r+0x44>
 800aed4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aed6:	1ad2      	subs	r2, r2, r3
 800aed8:	2300      	movs	r3, #0
 800aeda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aedc:	6a21      	ldr	r1, [r4, #32]
 800aede:	4628      	mov	r0, r5
 800aee0:	47b0      	blx	r6
 800aee2:	1c43      	adds	r3, r0, #1
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	d106      	bne.n	800aef6 <__sflush_r+0x62>
 800aee8:	6829      	ldr	r1, [r5, #0]
 800aeea:	291d      	cmp	r1, #29
 800aeec:	d82b      	bhi.n	800af46 <__sflush_r+0xb2>
 800aeee:	4a2a      	ldr	r2, [pc, #168]	@ (800af98 <__sflush_r+0x104>)
 800aef0:	410a      	asrs	r2, r1
 800aef2:	07d6      	lsls	r6, r2, #31
 800aef4:	d427      	bmi.n	800af46 <__sflush_r+0xb2>
 800aef6:	2200      	movs	r2, #0
 800aef8:	6062      	str	r2, [r4, #4]
 800aefa:	04d9      	lsls	r1, r3, #19
 800aefc:	6922      	ldr	r2, [r4, #16]
 800aefe:	6022      	str	r2, [r4, #0]
 800af00:	d504      	bpl.n	800af0c <__sflush_r+0x78>
 800af02:	1c42      	adds	r2, r0, #1
 800af04:	d101      	bne.n	800af0a <__sflush_r+0x76>
 800af06:	682b      	ldr	r3, [r5, #0]
 800af08:	b903      	cbnz	r3, 800af0c <__sflush_r+0x78>
 800af0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800af0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af0e:	602f      	str	r7, [r5, #0]
 800af10:	b1b9      	cbz	r1, 800af42 <__sflush_r+0xae>
 800af12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af16:	4299      	cmp	r1, r3
 800af18:	d002      	beq.n	800af20 <__sflush_r+0x8c>
 800af1a:	4628      	mov	r0, r5
 800af1c:	f7ff f9f6 	bl	800a30c <_free_r>
 800af20:	2300      	movs	r3, #0
 800af22:	6363      	str	r3, [r4, #52]	@ 0x34
 800af24:	e00d      	b.n	800af42 <__sflush_r+0xae>
 800af26:	2301      	movs	r3, #1
 800af28:	4628      	mov	r0, r5
 800af2a:	47b0      	blx	r6
 800af2c:	4602      	mov	r2, r0
 800af2e:	1c50      	adds	r0, r2, #1
 800af30:	d1c9      	bne.n	800aec6 <__sflush_r+0x32>
 800af32:	682b      	ldr	r3, [r5, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0c6      	beq.n	800aec6 <__sflush_r+0x32>
 800af38:	2b1d      	cmp	r3, #29
 800af3a:	d001      	beq.n	800af40 <__sflush_r+0xac>
 800af3c:	2b16      	cmp	r3, #22
 800af3e:	d11e      	bne.n	800af7e <__sflush_r+0xea>
 800af40:	602f      	str	r7, [r5, #0]
 800af42:	2000      	movs	r0, #0
 800af44:	e022      	b.n	800af8c <__sflush_r+0xf8>
 800af46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af4a:	b21b      	sxth	r3, r3
 800af4c:	e01b      	b.n	800af86 <__sflush_r+0xf2>
 800af4e:	690f      	ldr	r7, [r1, #16]
 800af50:	2f00      	cmp	r7, #0
 800af52:	d0f6      	beq.n	800af42 <__sflush_r+0xae>
 800af54:	0793      	lsls	r3, r2, #30
 800af56:	680e      	ldr	r6, [r1, #0]
 800af58:	bf08      	it	eq
 800af5a:	694b      	ldreq	r3, [r1, #20]
 800af5c:	600f      	str	r7, [r1, #0]
 800af5e:	bf18      	it	ne
 800af60:	2300      	movne	r3, #0
 800af62:	eba6 0807 	sub.w	r8, r6, r7
 800af66:	608b      	str	r3, [r1, #8]
 800af68:	f1b8 0f00 	cmp.w	r8, #0
 800af6c:	dde9      	ble.n	800af42 <__sflush_r+0xae>
 800af6e:	6a21      	ldr	r1, [r4, #32]
 800af70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af72:	4643      	mov	r3, r8
 800af74:	463a      	mov	r2, r7
 800af76:	4628      	mov	r0, r5
 800af78:	47b0      	blx	r6
 800af7a:	2800      	cmp	r0, #0
 800af7c:	dc08      	bgt.n	800af90 <__sflush_r+0xfc>
 800af7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af86:	81a3      	strh	r3, [r4, #12]
 800af88:	f04f 30ff 	mov.w	r0, #4294967295
 800af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af90:	4407      	add	r7, r0
 800af92:	eba8 0800 	sub.w	r8, r8, r0
 800af96:	e7e7      	b.n	800af68 <__sflush_r+0xd4>
 800af98:	dfbffffe 	.word	0xdfbffffe

0800af9c <_fflush_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	690b      	ldr	r3, [r1, #16]
 800afa0:	4605      	mov	r5, r0
 800afa2:	460c      	mov	r4, r1
 800afa4:	b913      	cbnz	r3, 800afac <_fflush_r+0x10>
 800afa6:	2500      	movs	r5, #0
 800afa8:	4628      	mov	r0, r5
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	b118      	cbz	r0, 800afb6 <_fflush_r+0x1a>
 800afae:	6a03      	ldr	r3, [r0, #32]
 800afb0:	b90b      	cbnz	r3, 800afb6 <_fflush_r+0x1a>
 800afb2:	f7fe fa5d 	bl	8009470 <__sinit>
 800afb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0f3      	beq.n	800afa6 <_fflush_r+0xa>
 800afbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afc0:	07d0      	lsls	r0, r2, #31
 800afc2:	d404      	bmi.n	800afce <_fflush_r+0x32>
 800afc4:	0599      	lsls	r1, r3, #22
 800afc6:	d402      	bmi.n	800afce <_fflush_r+0x32>
 800afc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afca:	f7fe fbb0 	bl	800972e <__retarget_lock_acquire_recursive>
 800afce:	4628      	mov	r0, r5
 800afd0:	4621      	mov	r1, r4
 800afd2:	f7ff ff5f 	bl	800ae94 <__sflush_r>
 800afd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afd8:	07da      	lsls	r2, r3, #31
 800afda:	4605      	mov	r5, r0
 800afdc:	d4e4      	bmi.n	800afa8 <_fflush_r+0xc>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	059b      	lsls	r3, r3, #22
 800afe2:	d4e1      	bmi.n	800afa8 <_fflush_r+0xc>
 800afe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afe6:	f7fe fba3 	bl	8009730 <__retarget_lock_release_recursive>
 800afea:	e7dd      	b.n	800afa8 <_fflush_r+0xc>

0800afec <__swbuf_r>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	460e      	mov	r6, r1
 800aff0:	4614      	mov	r4, r2
 800aff2:	4605      	mov	r5, r0
 800aff4:	b118      	cbz	r0, 800affe <__swbuf_r+0x12>
 800aff6:	6a03      	ldr	r3, [r0, #32]
 800aff8:	b90b      	cbnz	r3, 800affe <__swbuf_r+0x12>
 800affa:	f7fe fa39 	bl	8009470 <__sinit>
 800affe:	69a3      	ldr	r3, [r4, #24]
 800b000:	60a3      	str	r3, [r4, #8]
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	071a      	lsls	r2, r3, #28
 800b006:	d501      	bpl.n	800b00c <__swbuf_r+0x20>
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	b943      	cbnz	r3, 800b01e <__swbuf_r+0x32>
 800b00c:	4621      	mov	r1, r4
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 f82a 	bl	800b068 <__swsetup_r>
 800b014:	b118      	cbz	r0, 800b01e <__swbuf_r+0x32>
 800b016:	f04f 37ff 	mov.w	r7, #4294967295
 800b01a:	4638      	mov	r0, r7
 800b01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	6922      	ldr	r2, [r4, #16]
 800b022:	1a98      	subs	r0, r3, r2
 800b024:	6963      	ldr	r3, [r4, #20]
 800b026:	b2f6      	uxtb	r6, r6
 800b028:	4283      	cmp	r3, r0
 800b02a:	4637      	mov	r7, r6
 800b02c:	dc05      	bgt.n	800b03a <__swbuf_r+0x4e>
 800b02e:	4621      	mov	r1, r4
 800b030:	4628      	mov	r0, r5
 800b032:	f7ff ffb3 	bl	800af9c <_fflush_r>
 800b036:	2800      	cmp	r0, #0
 800b038:	d1ed      	bne.n	800b016 <__swbuf_r+0x2a>
 800b03a:	68a3      	ldr	r3, [r4, #8]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	60a3      	str	r3, [r4, #8]
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	6022      	str	r2, [r4, #0]
 800b046:	701e      	strb	r6, [r3, #0]
 800b048:	6962      	ldr	r2, [r4, #20]
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d004      	beq.n	800b05a <__swbuf_r+0x6e>
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	07db      	lsls	r3, r3, #31
 800b054:	d5e1      	bpl.n	800b01a <__swbuf_r+0x2e>
 800b056:	2e0a      	cmp	r6, #10
 800b058:	d1df      	bne.n	800b01a <__swbuf_r+0x2e>
 800b05a:	4621      	mov	r1, r4
 800b05c:	4628      	mov	r0, r5
 800b05e:	f7ff ff9d 	bl	800af9c <_fflush_r>
 800b062:	2800      	cmp	r0, #0
 800b064:	d0d9      	beq.n	800b01a <__swbuf_r+0x2e>
 800b066:	e7d6      	b.n	800b016 <__swbuf_r+0x2a>

0800b068 <__swsetup_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4b29      	ldr	r3, [pc, #164]	@ (800b110 <__swsetup_r+0xa8>)
 800b06c:	4605      	mov	r5, r0
 800b06e:	6818      	ldr	r0, [r3, #0]
 800b070:	460c      	mov	r4, r1
 800b072:	b118      	cbz	r0, 800b07c <__swsetup_r+0x14>
 800b074:	6a03      	ldr	r3, [r0, #32]
 800b076:	b90b      	cbnz	r3, 800b07c <__swsetup_r+0x14>
 800b078:	f7fe f9fa 	bl	8009470 <__sinit>
 800b07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b080:	0719      	lsls	r1, r3, #28
 800b082:	d422      	bmi.n	800b0ca <__swsetup_r+0x62>
 800b084:	06da      	lsls	r2, r3, #27
 800b086:	d407      	bmi.n	800b098 <__swsetup_r+0x30>
 800b088:	2209      	movs	r2, #9
 800b08a:	602a      	str	r2, [r5, #0]
 800b08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	f04f 30ff 	mov.w	r0, #4294967295
 800b096:	e033      	b.n	800b100 <__swsetup_r+0x98>
 800b098:	0758      	lsls	r0, r3, #29
 800b09a:	d512      	bpl.n	800b0c2 <__swsetup_r+0x5a>
 800b09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b09e:	b141      	cbz	r1, 800b0b2 <__swsetup_r+0x4a>
 800b0a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0a4:	4299      	cmp	r1, r3
 800b0a6:	d002      	beq.n	800b0ae <__swsetup_r+0x46>
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	f7ff f92f 	bl	800a30c <_free_r>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	6063      	str	r3, [r4, #4]
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f043 0308 	orr.w	r3, r3, #8
 800b0c8:	81a3      	strh	r3, [r4, #12]
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	b94b      	cbnz	r3, 800b0e2 <__swsetup_r+0x7a>
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0d8:	d003      	beq.n	800b0e2 <__swsetup_r+0x7a>
 800b0da:	4621      	mov	r1, r4
 800b0dc:	4628      	mov	r0, r5
 800b0de:	f000 f8b3 	bl	800b248 <__smakebuf_r>
 800b0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e6:	f013 0201 	ands.w	r2, r3, #1
 800b0ea:	d00a      	beq.n	800b102 <__swsetup_r+0x9a>
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	60a2      	str	r2, [r4, #8]
 800b0f0:	6962      	ldr	r2, [r4, #20]
 800b0f2:	4252      	negs	r2, r2
 800b0f4:	61a2      	str	r2, [r4, #24]
 800b0f6:	6922      	ldr	r2, [r4, #16]
 800b0f8:	b942      	cbnz	r2, 800b10c <__swsetup_r+0xa4>
 800b0fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0fe:	d1c5      	bne.n	800b08c <__swsetup_r+0x24>
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	0799      	lsls	r1, r3, #30
 800b104:	bf58      	it	pl
 800b106:	6962      	ldrpl	r2, [r4, #20]
 800b108:	60a2      	str	r2, [r4, #8]
 800b10a:	e7f4      	b.n	800b0f6 <__swsetup_r+0x8e>
 800b10c:	2000      	movs	r0, #0
 800b10e:	e7f7      	b.n	800b100 <__swsetup_r+0x98>
 800b110:	24000020 	.word	0x24000020

0800b114 <_sbrk_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4d06      	ldr	r5, [pc, #24]	@ (800b130 <_sbrk_r+0x1c>)
 800b118:	2300      	movs	r3, #0
 800b11a:	4604      	mov	r4, r0
 800b11c:	4608      	mov	r0, r1
 800b11e:	602b      	str	r3, [r5, #0]
 800b120:	f7f5 ffe8 	bl	80010f4 <_sbrk>
 800b124:	1c43      	adds	r3, r0, #1
 800b126:	d102      	bne.n	800b12e <_sbrk_r+0x1a>
 800b128:	682b      	ldr	r3, [r5, #0]
 800b12a:	b103      	cbz	r3, 800b12e <_sbrk_r+0x1a>
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	24004e54 	.word	0x24004e54

0800b134 <__assert_func>:
 800b134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b136:	4614      	mov	r4, r2
 800b138:	461a      	mov	r2, r3
 800b13a:	4b09      	ldr	r3, [pc, #36]	@ (800b160 <__assert_func+0x2c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4605      	mov	r5, r0
 800b140:	68d8      	ldr	r0, [r3, #12]
 800b142:	b954      	cbnz	r4, 800b15a <__assert_func+0x26>
 800b144:	4b07      	ldr	r3, [pc, #28]	@ (800b164 <__assert_func+0x30>)
 800b146:	461c      	mov	r4, r3
 800b148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b14c:	9100      	str	r1, [sp, #0]
 800b14e:	462b      	mov	r3, r5
 800b150:	4905      	ldr	r1, [pc, #20]	@ (800b168 <__assert_func+0x34>)
 800b152:	f000 f841 	bl	800b1d8 <fiprintf>
 800b156:	f000 f8d5 	bl	800b304 <abort>
 800b15a:	4b04      	ldr	r3, [pc, #16]	@ (800b16c <__assert_func+0x38>)
 800b15c:	e7f4      	b.n	800b148 <__assert_func+0x14>
 800b15e:	bf00      	nop
 800b160:	24000020 	.word	0x24000020
 800b164:	0800b6c6 	.word	0x0800b6c6
 800b168:	0800b698 	.word	0x0800b698
 800b16c:	0800b68b 	.word	0x0800b68b

0800b170 <_calloc_r>:
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	fba1 5402 	umull	r5, r4, r1, r2
 800b176:	b93c      	cbnz	r4, 800b188 <_calloc_r+0x18>
 800b178:	4629      	mov	r1, r5
 800b17a:	f7ff f93b 	bl	800a3f4 <_malloc_r>
 800b17e:	4606      	mov	r6, r0
 800b180:	b928      	cbnz	r0, 800b18e <_calloc_r+0x1e>
 800b182:	2600      	movs	r6, #0
 800b184:	4630      	mov	r0, r6
 800b186:	bd70      	pop	{r4, r5, r6, pc}
 800b188:	220c      	movs	r2, #12
 800b18a:	6002      	str	r2, [r0, #0]
 800b18c:	e7f9      	b.n	800b182 <_calloc_r+0x12>
 800b18e:	462a      	mov	r2, r5
 800b190:	4621      	mov	r1, r4
 800b192:	f7fe f9f8 	bl	8009586 <memset>
 800b196:	e7f5      	b.n	800b184 <_calloc_r+0x14>

0800b198 <__ascii_mbtowc>:
 800b198:	b082      	sub	sp, #8
 800b19a:	b901      	cbnz	r1, 800b19e <__ascii_mbtowc+0x6>
 800b19c:	a901      	add	r1, sp, #4
 800b19e:	b142      	cbz	r2, 800b1b2 <__ascii_mbtowc+0x1a>
 800b1a0:	b14b      	cbz	r3, 800b1b6 <__ascii_mbtowc+0x1e>
 800b1a2:	7813      	ldrb	r3, [r2, #0]
 800b1a4:	600b      	str	r3, [r1, #0]
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	1e10      	subs	r0, r2, #0
 800b1aa:	bf18      	it	ne
 800b1ac:	2001      	movne	r0, #1
 800b1ae:	b002      	add	sp, #8
 800b1b0:	4770      	bx	lr
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	e7fb      	b.n	800b1ae <__ascii_mbtowc+0x16>
 800b1b6:	f06f 0001 	mvn.w	r0, #1
 800b1ba:	e7f8      	b.n	800b1ae <__ascii_mbtowc+0x16>

0800b1bc <__ascii_wctomb>:
 800b1bc:	4603      	mov	r3, r0
 800b1be:	4608      	mov	r0, r1
 800b1c0:	b141      	cbz	r1, 800b1d4 <__ascii_wctomb+0x18>
 800b1c2:	2aff      	cmp	r2, #255	@ 0xff
 800b1c4:	d904      	bls.n	800b1d0 <__ascii_wctomb+0x14>
 800b1c6:	228a      	movs	r2, #138	@ 0x8a
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ce:	4770      	bx	lr
 800b1d0:	700a      	strb	r2, [r1, #0]
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	4770      	bx	lr
	...

0800b1d8 <fiprintf>:
 800b1d8:	b40e      	push	{r1, r2, r3}
 800b1da:	b503      	push	{r0, r1, lr}
 800b1dc:	4601      	mov	r1, r0
 800b1de:	ab03      	add	r3, sp, #12
 800b1e0:	4805      	ldr	r0, [pc, #20]	@ (800b1f8 <fiprintf+0x20>)
 800b1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e6:	6800      	ldr	r0, [r0, #0]
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	f7ff fd3b 	bl	800ac64 <_vfiprintf_r>
 800b1ee:	b002      	add	sp, #8
 800b1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1f4:	b003      	add	sp, #12
 800b1f6:	4770      	bx	lr
 800b1f8:	24000020 	.word	0x24000020

0800b1fc <__swhatbuf_r>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	460c      	mov	r4, r1
 800b200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b204:	2900      	cmp	r1, #0
 800b206:	b096      	sub	sp, #88	@ 0x58
 800b208:	4615      	mov	r5, r2
 800b20a:	461e      	mov	r6, r3
 800b20c:	da0d      	bge.n	800b22a <__swhatbuf_r+0x2e>
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b214:	f04f 0100 	mov.w	r1, #0
 800b218:	bf14      	ite	ne
 800b21a:	2340      	movne	r3, #64	@ 0x40
 800b21c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b220:	2000      	movs	r0, #0
 800b222:	6031      	str	r1, [r6, #0]
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	b016      	add	sp, #88	@ 0x58
 800b228:	bd70      	pop	{r4, r5, r6, pc}
 800b22a:	466a      	mov	r2, sp
 800b22c:	f000 f848 	bl	800b2c0 <_fstat_r>
 800b230:	2800      	cmp	r0, #0
 800b232:	dbec      	blt.n	800b20e <__swhatbuf_r+0x12>
 800b234:	9901      	ldr	r1, [sp, #4]
 800b236:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b23a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b23e:	4259      	negs	r1, r3
 800b240:	4159      	adcs	r1, r3
 800b242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b246:	e7eb      	b.n	800b220 <__swhatbuf_r+0x24>

0800b248 <__smakebuf_r>:
 800b248:	898b      	ldrh	r3, [r1, #12]
 800b24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b24c:	079d      	lsls	r5, r3, #30
 800b24e:	4606      	mov	r6, r0
 800b250:	460c      	mov	r4, r1
 800b252:	d507      	bpl.n	800b264 <__smakebuf_r+0x1c>
 800b254:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	2301      	movs	r3, #1
 800b25e:	6163      	str	r3, [r4, #20]
 800b260:	b003      	add	sp, #12
 800b262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b264:	ab01      	add	r3, sp, #4
 800b266:	466a      	mov	r2, sp
 800b268:	f7ff ffc8 	bl	800b1fc <__swhatbuf_r>
 800b26c:	9f00      	ldr	r7, [sp, #0]
 800b26e:	4605      	mov	r5, r0
 800b270:	4639      	mov	r1, r7
 800b272:	4630      	mov	r0, r6
 800b274:	f7ff f8be 	bl	800a3f4 <_malloc_r>
 800b278:	b948      	cbnz	r0, 800b28e <__smakebuf_r+0x46>
 800b27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27e:	059a      	lsls	r2, r3, #22
 800b280:	d4ee      	bmi.n	800b260 <__smakebuf_r+0x18>
 800b282:	f023 0303 	bic.w	r3, r3, #3
 800b286:	f043 0302 	orr.w	r3, r3, #2
 800b28a:	81a3      	strh	r3, [r4, #12]
 800b28c:	e7e2      	b.n	800b254 <__smakebuf_r+0xc>
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	6020      	str	r0, [r4, #0]
 800b292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	9b01      	ldr	r3, [sp, #4]
 800b29a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b29e:	b15b      	cbz	r3, 800b2b8 <__smakebuf_r+0x70>
 800b2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f000 f81d 	bl	800b2e4 <_isatty_r>
 800b2aa:	b128      	cbz	r0, 800b2b8 <__smakebuf_r+0x70>
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	f023 0303 	bic.w	r3, r3, #3
 800b2b2:	f043 0301 	orr.w	r3, r3, #1
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	431d      	orrs	r5, r3
 800b2bc:	81a5      	strh	r5, [r4, #12]
 800b2be:	e7cf      	b.n	800b260 <__smakebuf_r+0x18>

0800b2c0 <_fstat_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4d07      	ldr	r5, [pc, #28]	@ (800b2e0 <_fstat_r+0x20>)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	602b      	str	r3, [r5, #0]
 800b2ce:	f7f5 fee9 	bl	80010a4 <_fstat>
 800b2d2:	1c43      	adds	r3, r0, #1
 800b2d4:	d102      	bne.n	800b2dc <_fstat_r+0x1c>
 800b2d6:	682b      	ldr	r3, [r5, #0]
 800b2d8:	b103      	cbz	r3, 800b2dc <_fstat_r+0x1c>
 800b2da:	6023      	str	r3, [r4, #0]
 800b2dc:	bd38      	pop	{r3, r4, r5, pc}
 800b2de:	bf00      	nop
 800b2e0:	24004e54 	.word	0x24004e54

0800b2e4 <_isatty_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4d06      	ldr	r5, [pc, #24]	@ (800b300 <_isatty_r+0x1c>)
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	4608      	mov	r0, r1
 800b2ee:	602b      	str	r3, [r5, #0]
 800b2f0:	f7f5 fee8 	bl	80010c4 <_isatty>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d102      	bne.n	800b2fe <_isatty_r+0x1a>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	b103      	cbz	r3, 800b2fe <_isatty_r+0x1a>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	24004e54 	.word	0x24004e54

0800b304 <abort>:
 800b304:	b508      	push	{r3, lr}
 800b306:	2006      	movs	r0, #6
 800b308:	f000 f82c 	bl	800b364 <raise>
 800b30c:	2001      	movs	r0, #1
 800b30e:	f7f5 fe79 	bl	8001004 <_exit>

0800b312 <_raise_r>:
 800b312:	291f      	cmp	r1, #31
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4605      	mov	r5, r0
 800b318:	460c      	mov	r4, r1
 800b31a:	d904      	bls.n	800b326 <_raise_r+0x14>
 800b31c:	2316      	movs	r3, #22
 800b31e:	6003      	str	r3, [r0, #0]
 800b320:	f04f 30ff 	mov.w	r0, #4294967295
 800b324:	bd38      	pop	{r3, r4, r5, pc}
 800b326:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b328:	b112      	cbz	r2, 800b330 <_raise_r+0x1e>
 800b32a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b32e:	b94b      	cbnz	r3, 800b344 <_raise_r+0x32>
 800b330:	4628      	mov	r0, r5
 800b332:	f000 f831 	bl	800b398 <_getpid_r>
 800b336:	4622      	mov	r2, r4
 800b338:	4601      	mov	r1, r0
 800b33a:	4628      	mov	r0, r5
 800b33c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b340:	f000 b818 	b.w	800b374 <_kill_r>
 800b344:	2b01      	cmp	r3, #1
 800b346:	d00a      	beq.n	800b35e <_raise_r+0x4c>
 800b348:	1c59      	adds	r1, r3, #1
 800b34a:	d103      	bne.n	800b354 <_raise_r+0x42>
 800b34c:	2316      	movs	r3, #22
 800b34e:	6003      	str	r3, [r0, #0]
 800b350:	2001      	movs	r0, #1
 800b352:	e7e7      	b.n	800b324 <_raise_r+0x12>
 800b354:	2100      	movs	r1, #0
 800b356:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b35a:	4620      	mov	r0, r4
 800b35c:	4798      	blx	r3
 800b35e:	2000      	movs	r0, #0
 800b360:	e7e0      	b.n	800b324 <_raise_r+0x12>
	...

0800b364 <raise>:
 800b364:	4b02      	ldr	r3, [pc, #8]	@ (800b370 <raise+0xc>)
 800b366:	4601      	mov	r1, r0
 800b368:	6818      	ldr	r0, [r3, #0]
 800b36a:	f7ff bfd2 	b.w	800b312 <_raise_r>
 800b36e:	bf00      	nop
 800b370:	24000020 	.word	0x24000020

0800b374 <_kill_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d07      	ldr	r5, [pc, #28]	@ (800b394 <_kill_r+0x20>)
 800b378:	2300      	movs	r3, #0
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	4611      	mov	r1, r2
 800b380:	602b      	str	r3, [r5, #0]
 800b382:	f7f5 fe2f 	bl	8000fe4 <_kill>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d102      	bne.n	800b390 <_kill_r+0x1c>
 800b38a:	682b      	ldr	r3, [r5, #0]
 800b38c:	b103      	cbz	r3, 800b390 <_kill_r+0x1c>
 800b38e:	6023      	str	r3, [r4, #0]
 800b390:	bd38      	pop	{r3, r4, r5, pc}
 800b392:	bf00      	nop
 800b394:	24004e54 	.word	0x24004e54

0800b398 <_getpid_r>:
 800b398:	f7f5 be1c 	b.w	8000fd4 <_getpid>

0800b39c <_init>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	bf00      	nop
 800b3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a2:	bc08      	pop	{r3}
 800b3a4:	469e      	mov	lr, r3
 800b3a6:	4770      	bx	lr

0800b3a8 <_fini>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	bf00      	nop
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr
