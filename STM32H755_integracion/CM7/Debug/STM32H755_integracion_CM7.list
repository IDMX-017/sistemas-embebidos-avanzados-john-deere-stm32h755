
STM32H755_integracion_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e64  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080060fc  080060fc  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006134  08006134  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006134  08006134  00007134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800613c  0800613c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800613c  0800613c  0000713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006140  08006140  00007140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08006144  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  24000010  08006154  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400015c  08006154  0000815c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fb3  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002167  00000000  00000000  0001aff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc8  00000000  00000000  0001e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039f8d  00000000  00000000  0001ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137d5  00000000  00000000  00058bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185c07  00000000  00000000  0006c39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f1fa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000402c  00000000  00000000  001f1fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  001f6010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080060e4 	.word	0x080060e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080060e4 	.word	0x080060e4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <TurningSetAngle>:
void SetMotorSpeed(float speed);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TurningSetAngle(float angle) {
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ajustar el ángulo al rango permitido
    if (angle < -90.0f) angle = -90.0f;
 80006fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000702:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000794 <TurningSetAngle+0xa0>
 8000706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070e:	d501      	bpl.n	8000714 <TurningSetAngle+0x20>
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <TurningSetAngle+0xa4>)
 8000712:	607b      	str	r3, [r7, #4]
    if (angle > 90.0f)  angle = 90.0f;
 8000714:	edd7 7a01 	vldr	s15, [r7, #4]
 8000718:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800079c <TurningSetAngle+0xa8>
 800071c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000724:	dd01      	ble.n	800072a <TurningSetAngle+0x36>
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <TurningSetAngle+0xac>)
 8000728:	607b      	str	r3, [r7, #4]

    int pulse;
    if (angle <= 0.0f) {
 800072a:	edd7 7a01 	vldr	s15, [r7, #4]
 800072e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000736:	d813      	bhi.n	8000760 <TurningSetAngle+0x6c>
        // Mapear ángulos de -90 a 0 grados
        pulse = (int)((80.0f / 90.0f) * (angle + 90.0f) + 130.0f);
 8000738:	edd7 7a01 	vldr	s15, [r7, #4]
 800073c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800079c <TurningSetAngle+0xa8>
 8000740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000744:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80007a4 <TurningSetAngle+0xb0>
 8000748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800074c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80007a8 <TurningSetAngle+0xb4>
 8000750:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000758:	ee17 3a90 	vmov	r3, s15
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	e00e      	b.n	800077e <TurningSetAngle+0x8a>
    } else {
        // Mapear ángulos de 0 a 90 grados
        pulse = (int)((50.0f / 90.0f) * angle + 210.0f);
 8000760:	edd7 7a01 	vldr	s15, [r7, #4]
 8000764:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80007ac <TurningSetAngle+0xb8>
 8000768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800076c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80007b0 <TurningSetAngle+0xbc>
 8000770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000778:	ee17 3a90 	vmov	r3, s15
 800077c:	60fb      	str	r3, [r7, #12]
    }
    __HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, pulse);
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <TurningSetAngle+0xc0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	c2b40000 	.word	0xc2b40000
 8000798:	c2b40000 	.word	0xc2b40000
 800079c:	42b40000 	.word	0x42b40000
 80007a0:	42b40000 	.word	0x42b40000
 80007a4:	3f638e39 	.word	0x3f638e39
 80007a8:	43020000 	.word	0x43020000
 80007ac:	3f0e38e4 	.word	0x3f0e38e4
 80007b0:	43520000 	.word	0x43520000
 80007b4:	2400002c 	.word	0x2400002c

080007b8 <SetMotorSpeed>:

void SetMotorSpeed(float speed)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	ed87 0a01 	vstr	s0, [r7, #4]
	//Limitar el valor de speed
	if (speed < 0.0f) speed = 0.0f;
 80007c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	d502      	bpl.n	80007d6 <SetMotorSpeed+0x1e>
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
	if (speed > 1.0f) speed = 1.0f;
 80007d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80007da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80007de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e6:	dd02      	ble.n	80007ee <SetMotorSpeed+0x36>
 80007e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80007ec:	607b      	str	r3, [r7, #4]

    // Ajusta el valor de CCR1 en función de la velocidad deseada
    TIM14->CCR1 = (uint32_t)((63999 * 0.05f) + (63999 * 0.05f * speed));
 80007ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80007f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800081c <SetMotorSpeed+0x64>
 80007f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800081c <SetMotorSpeed+0x64>
 80007fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <SetMotorSpeed+0x68>)
 8000804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000808:	ee17 2a90 	vmov	r2, s15
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	4547ff33 	.word	0x4547ff33
 8000820:	40002000 	.word	0x40002000

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800082a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000830:	bf00      	nop
 8000832:	4b34      	ldr	r3, [pc, #208]	@ (8000904 <main+0xe0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <main+0x24>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dcf4      	bgt.n	8000832 <main+0xe>
  if ( timeout < 0 )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	da01      	bge.n	8000852 <main+0x2e>
  {
  Error_Handler();
 800084e:	f000 fa87 	bl	8000d60 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f000 fc07 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f85b 	bl	8000910 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800085a:	4b2a      	ldr	r3, [pc, #168]	@ (8000904 <main+0xe0>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000860:	4a28      	ldr	r2, [pc, #160]	@ (8000904 <main+0xe0>)
 8000862:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800086a:	4b26      	ldr	r3, [pc, #152]	@ (8000904 <main+0xe0>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 ff49 	bl	8001710 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f000 ff5f 	bl	8001744 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800088a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800088c:	bf00      	nop
 800088e:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <main+0xe0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d104      	bne.n	80008a4 <main+0x80>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	dcf4      	bgt.n	800088e <main+0x6a>
if ( timeout < 0 )
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	da01      	bge.n	80008ae <main+0x8a>
{
Error_Handler();
 80008aa:	f000 fa59 	bl	8000d60 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f000 f991 	bl	8000bd4 <MX_GPIO_Init>
  MX_TIM13_Init();
 80008b2:	f000 f8a7 	bl	8000a04 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 80008b6:	f000 f941 	bl	8000b3c <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80008ba:	f000 f8f1 	bl	8000aa0 <MX_TIM14_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	// Controlar el servo
	TurningSetAngle(45.0f);  // Gira el servo a 45 grados
 80008be:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8000908 <main+0xe4>
 80008c2:	f7ff ff17 	bl	80006f4 <TurningSetAngle>
	HAL_Delay(1000);
 80008c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ca:	f000 fc5d 	bl	8001188 <HAL_Delay>

	// Controlar el motor con ESC
	SetMotorSpeed(0.75);
 80008ce:	eeb6 0a08 	vmov.f32	s0, #104	@ 0x3f400000  0.750
 80008d2:	f7ff ff71 	bl	80007b8 <SetMotorSpeed>
	HAL_Delay(2000);
 80008d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008da:	f000 fc55 	bl	8001188 <HAL_Delay>

	// Change Servo angle
	TurningSetAngle(-45.0f);  // Gira el servo a -45 grados
 80008de:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800090c <main+0xe8>
 80008e2:	f7ff ff07 	bl	80006f4 <TurningSetAngle>
	HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ea:	f000 fc4d 	bl	8001188 <HAL_Delay>

	// Change motor speed and direction
	SetMotorSpeed(0.25);
 80008ee:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80008f2:	f7ff ff61 	bl	80007b8 <SetMotorSpeed>
	HAL_Delay(2000);
 80008f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008fa:	f000 fc45 	bl	8001188 <HAL_Delay>
	TurningSetAngle(45.0f);  // Gira el servo a 45 grados
 80008fe:	bf00      	nop
 8000900:	e7dd      	b.n	80008be <main+0x9a>
 8000902:	bf00      	nop
 8000904:	58024400 	.word	0x58024400
 8000908:	42340000 	.word	0x42340000
 800090c:	c2340000 	.word	0xc2340000

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	@ 0x70
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	224c      	movs	r2, #76	@ 0x4c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f005 fbb4 	bl	800608c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f005 fbae 	bl	800608c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000930:	2004      	movs	r0, #4
 8000932:	f000 ff1b 	bl	800176c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <SystemClock_Config+0xec>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a2f      	ldr	r2, [pc, #188]	@ (80009fc <SystemClock_Config+0xec>)
 8000940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b2d      	ldr	r3, [pc, #180]	@ (80009fc <SystemClock_Config+0xec>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <SystemClock_Config+0xf0>)
 8000952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000954:	4a2a      	ldr	r2, [pc, #168]	@ (8000a00 <SystemClock_Config+0xf0>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800095c:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <SystemClock_Config+0xf0>)
 800095e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000968:	bf00      	nop
 800096a:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <SystemClock_Config+0xec>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000976:	d1f8      	bne.n	800096a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800097c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	2302      	movs	r3, #2
 8000988:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800098e:	23f0      	movs	r3, #240	@ 0xf0
 8000990:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000996:	2305      	movs	r3, #5
 8000998:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800099e:	2308      	movs	r3, #8
 80009a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 ff36 	bl	8001820 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009ba:	f000 f9d1 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	233f      	movs	r3, #63	@ 0x3f
 80009c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2303      	movs	r3, #3
 80009c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ca:	2308      	movs	r3, #8
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ce:	2340      	movs	r3, #64	@ 0x40
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d2:	2340      	movs	r3, #64	@ 0x40
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009dc:	2340      	movs	r3, #64	@ 0x40
 80009de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2104      	movs	r1, #4
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fb75 	bl	80020d4 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009f0:	f000 f9b6 	bl	8000d60 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3770      	adds	r7, #112	@ 0x70
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58024800 	.word	0x58024800
 8000a00:	58000400 	.word	0x58000400

08000a04 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a9c <MX_TIM13_Init+0x98>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2399;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a24:	f640 125f 	movw	r2, #2399	@ 0x95f
 8000a28:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1999;
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a32:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000a36:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000a44:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a46:	f003 fcfd 	bl	8004444 <HAL_TIM_Base_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8000a50:	f000 f986 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000a54:	4810      	ldr	r0, [pc, #64]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a56:	f003 fd4c 	bl	80044f2 <HAL_TIM_PWM_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8000a60:	f000 f97e 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a64:	2360      	movs	r3, #96	@ 0x60
 8000a66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a7c:	f003 fd9a 	bl	80045b4 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8000a86:	f000 f96b 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000a8a:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <MX_TIM13_Init+0x94>)
 8000a8c:	f000 f9c2 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2400002c 	.word	0x2400002c
 8000a9c:	40001c00 	.word	0x40001c00

08000aa0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000aba:	4a1f      	ldr	r2, [pc, #124]	@ (8000b38 <MX_TIM14_Init+0x98>)
 8000abc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 74;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000ac0:	224a      	movs	r2, #74	@ 0x4a
 8000ac2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 63999;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000acc:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000ad0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ade:	4815      	ldr	r0, [pc, #84]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000ae0:	f003 fcb0 	bl	8004444 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000aea:	f000 f939 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000af0:	f003 fcff 	bl	80044f2 <HAL_TIM_PWM_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000afa:	f000 f931 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afe:	2360      	movs	r3, #96	@ 0x60
 8000b00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000b16:	f003 fd4d 	bl	80045b4 <HAL_TIM_PWM_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000b20:	f000 f91e 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <MX_TIM14_Init+0x94>)
 8000b26:	f000 f975 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000b2a:	bf00      	nop
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	24000078 	.word	0x24000078
 8000b38:	40002000 	.word	0x40002000

08000b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b42:	4a23      	ldr	r2, [pc, #140]	@ (8000bd0 <MX_USART3_UART_Init+0x94>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b84:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b86:	f004 f9a5 	bl	8004ed4 <HAL_UART_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b90:	f000 f8e6 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b98:	f005 f9ad 	bl	8005ef6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 f8dd 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000baa:	f005 f9e2 	bl	8005f72 <HAL_UARTEx_SetRxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 f8d4 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000bba:	f005 f963 	bl	8005e84 <HAL_UARTEx_DisableFifoMode>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 f8cc 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	240000c4 	.word	0x240000c4
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	@ 0x30
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bea:	4b58      	ldr	r3, [pc, #352]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf0:	4a56      	ldr	r2, [pc, #344]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000bf2:	f043 0320 	orr.w	r3, r3, #32
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfa:	4b54      	ldr	r3, [pc, #336]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	f003 0320 	and.w	r3, r3, #32
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b50      	ldr	r3, [pc, #320]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0e:	4a4f      	ldr	r2, [pc, #316]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c18:	4b4c      	ldr	r3, [pc, #304]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b49      	ldr	r3, [pc, #292]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2c:	4a47      	ldr	r2, [pc, #284]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c36:	4b45      	ldr	r3, [pc, #276]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b41      	ldr	r3, [pc, #260]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4a:	4a40      	ldr	r2, [pc, #256]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c54:	4b3d      	ldr	r3, [pc, #244]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	4b3a      	ldr	r3, [pc, #232]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c68:	4a38      	ldr	r2, [pc, #224]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c72:	4b36      	ldr	r3, [pc, #216]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	f003 0308 	and.w	r3, r3, #8
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c80:	4b32      	ldr	r3, [pc, #200]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c86:	4a31      	ldr	r2, [pc, #196]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c90:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <MX_GPIO_Init+0x178>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c9e:	2332      	movs	r3, #50	@ 0x32
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4825      	ldr	r0, [pc, #148]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000cba:	f000 fb79 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cbe:	2386      	movs	r3, #134	@ 0x86
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cce:	230b      	movs	r3, #11
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	481e      	ldr	r0, [pc, #120]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000cda:	f000 fb69 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <MX_GPIO_Init+0x184>)
 8000cfc:	f000 fb58 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d00:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d12:	230a      	movs	r3, #10
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000d1e:	f000 fb47 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d22:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d34:	230b      	movs	r3, #11
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <MX_GPIO_Init+0x188>)
 8000d40:	f000 fb36 	bl	80013b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d44:	bf00      	nop
 8000d46:	3730      	adds	r7, #48	@ 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020800 	.word	0x58020800
 8000d54:	58020000 	.word	0x58020000
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	58021800 	.word	0x58021800

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_MspInit+0x30>)
 8000d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d78:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <HAL_MspInit+0x30>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_MspInit+0x30>)
 8000d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	58024400 	.word	0x58024400

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <HAL_TIM_Base_MspInit+0x68>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10f      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_TIM_Base_MspInit+0x6c>)
 8000db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <HAL_TIM_Base_MspInit+0x6c>)
 8000dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_TIM_Base_MspInit+0x6c>)
 8000dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000dd0:	e013      	b.n	8000dfa <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <HAL_TIM_Base_MspInit+0x70>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d10e      	bne.n	8000dfa <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_TIM_Base_MspInit+0x6c>)
 8000dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_TIM_Base_MspInit+0x6c>)
 8000de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dec:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <HAL_TIM_Base_MspInit+0x6c>)
 8000dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40001c00 	.word	0x40001c00
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	40002000 	.word	0x40002000

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a26      	ldr	r2, [pc, #152]	@ (8000ecc <HAL_TIM_MspPostInit+0xb8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d120      	bne.n	8000e78 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <HAL_TIM_MspPostInit+0xbc>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3c:	4a24      	ldr	r2, [pc, #144]	@ (8000ed0 <HAL_TIM_MspPostInit+0xbc>)
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e46:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <HAL_TIM_MspPostInit+0xbc>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8000e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000e66:	2309      	movs	r3, #9
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4818      	ldr	r0, [pc, #96]	@ (8000ed4 <HAL_TIM_MspPostInit+0xc0>)
 8000e72:	f000 fa9d 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000e76:	e024      	b.n	8000ec2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a16      	ldr	r2, [pc, #88]	@ (8000ed8 <HAL_TIM_MspPostInit+0xc4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d11f      	bne.n	8000ec2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e82:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <HAL_TIM_MspPostInit+0xbc>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	4a11      	ldr	r2, [pc, #68]	@ (8000ed0 <HAL_TIM_MspPostInit+0xbc>)
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_TIM_MspPostInit+0xbc>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e98:	f003 0320 	and.w	r3, r3, #32
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Motor_Pin;
 8000ea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000eb2:	2309      	movs	r3, #9
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Motor_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_TIM_MspPostInit+0xc0>)
 8000ebe:	f000 fa77 	bl	80013b0 <HAL_GPIO_Init>
}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	@ 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40001c00 	.word	0x40001c00
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	58021400 	.word	0x58021400
 8000ed8:	40002000 	.word	0x40002000

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0ba      	sub	sp, #232	@ 0xe8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	22c0      	movs	r2, #192	@ 0xc0
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 f8c5 	bl	800608c <memset>
  if(huart->Instance==USART3)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a27      	ldr	r2, [pc, #156]	@ (8000fa4 <HAL_UART_MspInit+0xc8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d146      	bne.n	8000f9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f0c:	f04f 0202 	mov.w	r2, #2
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fc62 	bl	80027ec <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f2e:	f7ff ff17 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_UART_MspInit+0xcc>)
 8000f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <HAL_UART_MspInit+0xcc>)
 8000f3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_UART_MspInit+0xcc>)
 8000f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_UART_MspInit+0xcc>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <HAL_UART_MspInit+0xcc>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_UART_MspInit+0xcc>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_UART_MspInit+0xd0>)
 8000f96:	f000 fa0b 	bl	80013b0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f9a:	bf00      	nop
 8000f9c:	37e8      	adds	r7, #232	@ 0xe8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40004800 	.word	0x40004800
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	58020c00 	.word	0x58020c00

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f89f 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001014:	f7ff fad8 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f005 f82d 	bl	800609c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fbef 	bl	8000824 <main>
  bx  lr
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800104c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001050:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001054:	08006144 	.word	0x08006144
  ldr r2, =_sbss
 8001058:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800105c:	2400015c 	.word	0x2400015c

08001060 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC3_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f000 f96e 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001070:	f001 f9e6 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8001074:	4602      	mov	r2, r0
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	4913      	ldr	r1, [pc, #76]	@ (80010d0 <HAL_Init+0x6c>)
 8001082:	5ccb      	ldrb	r3, [r1, r3]
 8001084:	f003 031f 	and.w	r3, r3, #31
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_Init+0x68>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <HAL_Init+0x6c>)
 8001098:	5cd3      	ldrb	r3, [r2, r3]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_Init+0x70>)
 80010a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_Init+0x74>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f814 	bl	80010dc <HAL_InitTick>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e002      	b.n	80010c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010be:	f7ff fe55 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024400 	.word	0x58024400
 80010d0:	080060fc 	.word	0x080060fc
 80010d4:	24000004 	.word	0x24000004
 80010d8:	24000000 	.word	0x24000000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_InitTick+0x60>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e021      	b.n	8001134 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_InitTick+0x64>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_InitTick+0x60>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f945 	bl	8001396 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 f91d 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_InitTick+0x68>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2400000c 	.word	0x2400000c
 8001140:	24000000 	.word	0x24000000
 8001144:	24000008 	.word	0x24000008

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2400000c 	.word	0x2400000c
 800116c:	24000158 	.word	0x24000158

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	24000158 	.word	0x24000158

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2400000c 	.word	0x2400000c

080011d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_GetREVID+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0c1b      	lsrs	r3, r3, #16
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	5c001000 	.word	0x5c001000

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <__NVIC_SetPriorityGrouping+0x40>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	4313      	orrs	r3, r2
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <__NVIC_SetPriorityGrouping+0x40>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	05fa0000 	.word	0x05fa0000

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	@ (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	@ (800129c <__NVIC_SetPriority+0x50>)
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	@ 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	@ 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff47 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff5e 	bl	8001230 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff90 	bl	80012a0 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5f 	bl	800124c <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffb2 	bl	8001308 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013be:	4b89      	ldr	r3, [pc, #548]	@ (80015e4 <HAL_GPIO_Init+0x234>)
 80013c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013c2:	e194      	b.n	80016ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8186 	beq.w	80016e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_GPIO_Init+0x44>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f003 0201 	and.w	r2, r3, #1
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b03      	cmp	r3, #3
 8001460:	d017      	beq.n	8001492 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d123      	bne.n	80014e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	69b9      	ldr	r1, [r7, #24]
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0203 	and.w	r2, r3, #3
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80e0 	beq.w	80016e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <HAL_GPIO_Init+0x238>)
 800152a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800152e:	4a2e      	ldr	r2, [pc, #184]	@ (80015e8 <HAL_GPIO_Init+0x238>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001538:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <HAL_GPIO_Init+0x238>)
 800153a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001546:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <HAL_GPIO_Init+0x23c>)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a20      	ldr	r2, [pc, #128]	@ (80015f0 <HAL_GPIO_Init+0x240>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d052      	beq.n	8001618 <HAL_GPIO_Init+0x268>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a1f      	ldr	r2, [pc, #124]	@ (80015f4 <HAL_GPIO_Init+0x244>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d031      	beq.n	80015de <HAL_GPIO_Init+0x22e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a1e      	ldr	r2, [pc, #120]	@ (80015f8 <HAL_GPIO_Init+0x248>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d02b      	beq.n	80015da <HAL_GPIO_Init+0x22a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a1d      	ldr	r2, [pc, #116]	@ (80015fc <HAL_GPIO_Init+0x24c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d025      	beq.n	80015d6 <HAL_GPIO_Init+0x226>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <HAL_GPIO_Init+0x250>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01f      	beq.n	80015d2 <HAL_GPIO_Init+0x222>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <HAL_GPIO_Init+0x254>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x21e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1a      	ldr	r2, [pc, #104]	@ (8001608 <HAL_GPIO_Init+0x258>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x21a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a19      	ldr	r2, [pc, #100]	@ (800160c <HAL_GPIO_Init+0x25c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x216>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a18      	ldr	r2, [pc, #96]	@ (8001610 <HAL_GPIO_Init+0x260>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x212>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a17      	ldr	r2, [pc, #92]	@ (8001614 <HAL_GPIO_Init+0x264>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x20e>
 80015ba:	2309      	movs	r3, #9
 80015bc:	e02d      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015be:	230a      	movs	r3, #10
 80015c0:	e02b      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015c2:	2308      	movs	r3, #8
 80015c4:	e029      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015c6:	2307      	movs	r3, #7
 80015c8:	e027      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015ca:	2306      	movs	r3, #6
 80015cc:	e025      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e023      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e021      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e01f      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015da:	2302      	movs	r3, #2
 80015dc:	e01d      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015de:	2301      	movs	r3, #1
 80015e0:	e01b      	b.n	800161a <HAL_GPIO_Init+0x26a>
 80015e2:	bf00      	nop
 80015e4:	58000080 	.word	0x58000080
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58000400 	.word	0x58000400
 80015f0:	58020000 	.word	0x58020000
 80015f4:	58020400 	.word	0x58020400
 80015f8:	58020800 	.word	0x58020800
 80015fc:	58020c00 	.word	0x58020c00
 8001600:	58021000 	.word	0x58021000
 8001604:	58021400 	.word	0x58021400
 8001608:	58021800 	.word	0x58021800
 800160c:	58021c00 	.word	0x58021c00
 8001610:	58022000 	.word	0x58022000
 8001614:	58022400 	.word	0x58022400
 8001618:	2300      	movs	r3, #0
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f002 0203 	and.w	r2, r2, #3
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	4093      	lsls	r3, r2
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162a:	4938      	ldr	r1, [pc, #224]	@ (800170c <HAL_GPIO_Init+0x35c>)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800165e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800168c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	3301      	adds	r3, #1
 80016ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f47f ae63 	bne.w	80013c4 <HAL_GPIO_Init+0x14>
  }
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3724      	adds	r7, #36	@ 0x24
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	58000400 	.word	0x58000400

08001710 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001718:	4a08      	ldr	r2, [pc, #32]	@ (800173c <HAL_HSEM_FastTake+0x2c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3320      	adds	r3, #32
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_HSEM_FastTake+0x30>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e000      	b.n	800172e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	58026400 	.word	0x58026400
 8001740:	80000300 	.word	0x80000300

08001744 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800174e:	4906      	ldr	r1, [pc, #24]	@ (8001768 <HAL_HSEM_Release+0x24>)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	58026400 	.word	0x58026400

0800176c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <HAL_PWREx_ConfigSupply+0xb0>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	2b06      	cmp	r3, #6
 800177e:	d00a      	beq.n	8001796 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <HAL_PWREx_ConfigSupply+0xb0>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d001      	beq.n	8001792 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e040      	b.n	8001814 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e03e      	b.n	8001814 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <HAL_PWREx_ConfigSupply+0xb0>)
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800179e:	491f      	ldr	r1, [pc, #124]	@ (800181c <HAL_PWREx_ConfigSupply+0xb0>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017a6:	f7ff fce3 	bl	8001170 <HAL_GetTick>
 80017aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ac:	e009      	b.n	80017c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017ae:	f7ff fcdf 	bl	8001170 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017bc:	d901      	bls.n	80017c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e028      	b.n	8001814 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_PWREx_ConfigSupply+0xb0>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017ce:	d1ee      	bne.n	80017ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b1e      	cmp	r3, #30
 80017d4:	d008      	beq.n	80017e8 <HAL_PWREx_ConfigSupply+0x7c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80017da:	d005      	beq.n	80017e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b1d      	cmp	r3, #29
 80017e0:	d002      	beq.n	80017e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80017e6:	d114      	bne.n	8001812 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017e8:	f7ff fcc2 	bl	8001170 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017ee:	e009      	b.n	8001804 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017f0:	f7ff fcbe 	bl	8001170 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017fe:	d901      	bls.n	8001804 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e007      	b.n	8001814 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_PWREx_ConfigSupply+0xb0>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001810:	d1ee      	bne.n	80017f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	58024800 	.word	0x58024800

08001820 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	@ 0x30
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f000 bc48 	b.w	80020c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8088 	beq.w	8001952 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001842:	4b99      	ldr	r3, [pc, #612]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800184c:	4b96      	ldr	r3, [pc, #600]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001854:	2b10      	cmp	r3, #16
 8001856:	d007      	beq.n	8001868 <HAL_RCC_OscConfig+0x48>
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185a:	2b18      	cmp	r3, #24
 800185c:	d111      	bne.n	8001882 <HAL_RCC_OscConfig+0x62>
 800185e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d10c      	bne.n	8001882 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	4b8f      	ldr	r3, [pc, #572]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d06d      	beq.n	8001950 <HAL_RCC_OscConfig+0x130>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d169      	bne.n	8001950 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	f000 bc21 	b.w	80020c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x7a>
 800188c:	4b86      	ldr	r3, [pc, #536]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a85      	ldr	r2, [pc, #532]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e02e      	b.n	80018f8 <HAL_RCC_OscConfig+0xd8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x9c>
 80018a2:	4b81      	ldr	r3, [pc, #516]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a80      	ldr	r2, [pc, #512]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7d      	ldr	r2, [pc, #500]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xd8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0xc0>
 80018c6:	4b78      	ldr	r3, [pc, #480]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a77      	ldr	r2, [pc, #476]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b75      	ldr	r3, [pc, #468]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a74      	ldr	r2, [pc, #464]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xd8>
 80018e0:	4b71      	ldr	r3, [pc, #452]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a70      	ldr	r2, [pc, #448]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6d      	ldr	r2, [pc, #436]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fc36 	bl	8001170 <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fc32 	bl	8001170 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e3d4      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800191a:	4b63      	ldr	r3, [pc, #396]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xe8>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fc22 	bl	8001170 <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fc1e 	bl	8001170 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e3c0      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001942:	4b59      	ldr	r3, [pc, #356]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x110>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80ca 	beq.w	8001af4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001960:	4b51      	ldr	r3, [pc, #324]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001968:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800196a:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <HAL_RCC_OscConfig+0x166>
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	2b18      	cmp	r3, #24
 800197a:	d156      	bne.n	8001a2a <HAL_RCC_OscConfig+0x20a>
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d151      	bne.n	8001a2a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001986:	4b48      	ldr	r3, [pc, #288]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x17e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e392      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800199e:	4b42      	ldr	r3, [pc, #264]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 0219 	bic.w	r2, r3, #25
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	493f      	ldr	r1, [pc, #252]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fbde 	bl	8001170 <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff fbda 	bl	8001170 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e37c      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ca:	4b37      	ldr	r3, [pc, #220]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	f7ff fbfb 	bl	80011d0 <HAL_GetREVID>
 80019da:	4603      	mov	r3, r0
 80019dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d817      	bhi.n	8001a14 <HAL_RCC_OscConfig+0x1f4>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b40      	cmp	r3, #64	@ 0x40
 80019ea:	d108      	bne.n	80019fe <HAL_RCC_OscConfig+0x1de>
 80019ec:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80019f4:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 80019f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	e07a      	b.n	8001af4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	031b      	lsls	r3, r3, #12
 8001a0c:	4926      	ldr	r1, [pc, #152]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a12:	e06f      	b.n	8001af4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4921      	ldr	r1, [pc, #132]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a28:	e064      	b.n	8001af4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d047      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0219 	bic.w	r2, r3, #25
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	491a      	ldr	r1, [pc, #104]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fb94 	bl	8001170 <HAL_GetTick>
 8001a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fb90 	bl	8001170 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e332      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	f7ff fbb1 	bl	80011d0 <HAL_GetREVID>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d819      	bhi.n	8001aac <HAL_RCC_OscConfig+0x28c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2b40      	cmp	r3, #64	@ 0x40
 8001a7e:	d108      	bne.n	8001a92 <HAL_RCC_OscConfig+0x272>
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a88:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a8e:	6053      	str	r3, [r2, #4]
 8001a90:	e030      	b.n	8001af4 <HAL_RCC_OscConfig+0x2d4>
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	031b      	lsls	r3, r3, #12
 8001aa0:	4901      	ldr	r1, [pc, #4]	@ (8001aa8 <HAL_RCC_OscConfig+0x288>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
 8001aa6:	e025      	b.n	8001af4 <HAL_RCC_OscConfig+0x2d4>
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	4b9a      	ldr	r3, [pc, #616]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	061b      	lsls	r3, r3, #24
 8001aba:	4997      	ldr	r1, [pc, #604]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	e018      	b.n	8001af4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b95      	ldr	r3, [pc, #596]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a94      	ldr	r2, [pc, #592]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff fb4f 	bl	8001170 <HAL_GetTick>
 8001ad2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fb4b 	bl	8001170 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e2ed      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ae8:	4b8b      	ldr	r3, [pc, #556]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a9 	beq.w	8001c54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b02:	4b85      	ldr	r3, [pc, #532]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b0c:	4b82      	ldr	r3, [pc, #520]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d007      	beq.n	8001b28 <HAL_RCC_OscConfig+0x308>
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b18      	cmp	r3, #24
 8001b1c:	d13a      	bne.n	8001b94 <HAL_RCC_OscConfig+0x374>
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d135      	bne.n	8001b94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b28:	4b7b      	ldr	r3, [pc, #492]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_OscConfig+0x320>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b80      	cmp	r3, #128	@ 0x80
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e2c1      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b40:	f7ff fb46 	bl	80011d0 <HAL_GetREVID>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d817      	bhi.n	8001b7e <HAL_RCC_OscConfig+0x35e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d108      	bne.n	8001b68 <HAL_RCC_OscConfig+0x348>
 8001b56:	4b70      	ldr	r3, [pc, #448]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b66:	e075      	b.n	8001c54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b68:	4b6b      	ldr	r3, [pc, #428]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	069b      	lsls	r3, r3, #26
 8001b76:	4968      	ldr	r1, [pc, #416]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b7c:	e06a      	b.n	8001c54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b7e:	4b66      	ldr	r3, [pc, #408]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	061b      	lsls	r3, r3, #24
 8001b8c:	4962      	ldr	r1, [pc, #392]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b92:	e05f      	b.n	8001c54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d042      	beq.n	8001c22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fae2 	bl	8001170 <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fade 	bl	8001170 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e280      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bc2:	4b55      	ldr	r3, [pc, #340]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bce:	f7ff faff 	bl	80011d0 <HAL_GetREVID>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d817      	bhi.n	8001c0c <HAL_RCC_OscConfig+0x3ec>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d108      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3d6>
 8001be4:	4b4c      	ldr	r3, [pc, #304]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001bec:	4a4a      	ldr	r2, [pc, #296]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bf2:	6053      	str	r3, [r2, #4]
 8001bf4:	e02e      	b.n	8001c54 <HAL_RCC_OscConfig+0x434>
 8001bf6:	4b48      	ldr	r3, [pc, #288]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	069b      	lsls	r3, r3, #26
 8001c04:	4944      	ldr	r1, [pc, #272]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	e023      	b.n	8001c54 <HAL_RCC_OscConfig+0x434>
 8001c0c:	4b42      	ldr	r3, [pc, #264]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	061b      	lsls	r3, r3, #24
 8001c1a:	493f      	ldr	r1, [pc, #252]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
 8001c20:	e018      	b.n	8001c54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c22:	4b3d      	ldr	r3, [pc, #244]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a3c      	ldr	r2, [pc, #240]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fa9f 	bl	8001170 <HAL_GetTick>
 8001c32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c36:	f7ff fa9b 	bl	8001170 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e23d      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c48:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d036      	beq.n	8001cce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d019      	beq.n	8001c9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c68:	4b2b      	ldr	r3, [pc, #172]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff fa7c 	bl	8001170 <HAL_GetTick>
 8001c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fa78 	bl	8001170 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e21a      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x45c>
 8001c9a:	e018      	b.n	8001cce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fa62 	bl	8001170 <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fa5e 	bl	8001170 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e200      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d039      	beq.n	8001d4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cee:	f7ff fa3f 	bl	8001170 <HAL_GetTick>
 8001cf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cf6:	f7ff fa3b 	bl	8001170 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1dd      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d08:	4b03      	ldr	r3, [pc, #12]	@ (8001d18 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x4d6>
 8001d14:	e01b      	b.n	8001d4e <HAL_RCC_OscConfig+0x52e>
 8001d16:	bf00      	nop
 8001d18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d1c:	4b9b      	ldr	r3, [pc, #620]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a9a      	ldr	r2, [pc, #616]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001d22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d28:	f7ff fa22 	bl	8001170 <HAL_GetTick>
 8001d2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d30:	f7ff fa1e 	bl	8001170 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1c0      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d42:	4b92      	ldr	r3, [pc, #584]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8081 	beq.w	8001e5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001f90 <HAL_RCC_OscConfig+0x770>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a8b      	ldr	r2, [pc, #556]	@ (8001f90 <HAL_RCC_OscConfig+0x770>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d68:	f7ff fa02 	bl	8001170 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d70:	f7ff f9fe 	bl	8001170 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1a0      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d82:	4b83      	ldr	r3, [pc, #524]	@ (8001f90 <HAL_RCC_OscConfig+0x770>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x584>
 8001d96:	4b7d      	ldr	r3, [pc, #500]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da2:	e02d      	b.n	8001e00 <HAL_RCC_OscConfig+0x5e0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x5a6>
 8001dac:	4b77      	ldr	r3, [pc, #476]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	4a76      	ldr	r2, [pc, #472]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db8:	4b74      	ldr	r3, [pc, #464]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbc:	4a73      	ldr	r2, [pc, #460]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc4:	e01c      	b.n	8001e00 <HAL_RCC_OscConfig+0x5e0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c8>
 8001dce:	4b6f      	ldr	r3, [pc, #444]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dda:	4b6c      	ldr	r3, [pc, #432]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dde:	4a6b      	ldr	r2, [pc, #428]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0x5e0>
 8001de8:	4b68      	ldr	r3, [pc, #416]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dec:	4a67      	ldr	r2, [pc, #412]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df4:	4b65      	ldr	r3, [pc, #404]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df8:	4a64      	ldr	r2, [pc, #400]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001dfa:	f023 0304 	bic.w	r3, r3, #4
 8001dfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d015      	beq.n	8001e34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff f9b2 	bl	8001170 <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e10:	f7ff f9ae 	bl	8001170 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e14e      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e26:	4b59      	ldr	r3, [pc, #356]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0ee      	beq.n	8001e10 <HAL_RCC_OscConfig+0x5f0>
 8001e32:	e014      	b.n	8001e5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff f99c 	bl	8001170 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7ff f998 	bl	8001170 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e138      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e52:	4b4e      	ldr	r3, [pc, #312]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ee      	bne.n	8001e3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 812d 	beq.w	80020c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e68:	4b48      	ldr	r3, [pc, #288]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e70:	2b18      	cmp	r3, #24
 8001e72:	f000 80bd 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	f040 809e 	bne.w	8001fbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b42      	ldr	r3, [pc, #264]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a41      	ldr	r2, [pc, #260]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f970 	bl	8001170 <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f96c 	bl	8001170 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e10e      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ea6:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb2:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eb6:	4b37      	ldr	r3, [pc, #220]	@ (8001f94 <HAL_RCC_OscConfig+0x774>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	4931      	ldr	r1, [pc, #196]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eda:	3b01      	subs	r3, #1
 8001edc:	025b      	lsls	r3, r3, #9
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	061b      	lsls	r3, r3, #24
 8001ef8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001efc:	4923      	ldr	r1, [pc, #140]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	4a21      	ldr	r2, [pc, #132]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_RCC_OscConfig+0x778>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f1a:	00d2      	lsls	r2, r2, #3
 8001f1c:	491b      	ldr	r1, [pc, #108]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f26:	f023 020c 	bic.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4917      	ldr	r1, [pc, #92]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f34:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	f023 0202 	bic.w	r2, r3, #2
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f40:	4912      	ldr	r1, [pc, #72]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	4a0d      	ldr	r2, [pc, #52]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6e:	4a07      	ldr	r2, [pc, #28]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <HAL_RCC_OscConfig+0x76c>)
 8001f7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f8f5 	bl	8001170 <HAL_GetTick>
 8001f86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f88:	e011      	b.n	8001fae <HAL_RCC_OscConfig+0x78e>
 8001f8a:	bf00      	nop
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58024800 	.word	0x58024800
 8001f94:	fffffc0c 	.word	0xfffffc0c
 8001f98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f8e8 	bl	8001170 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e08a      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fae:	4b47      	ldr	r3, [pc, #284]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x77c>
 8001fba:	e082      	b.n	80020c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 8001fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f8d2 	bl	8001170 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f8ce 	bl	8001170 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e070      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x7b0>
 8001fee:	e068      	b.n	80020c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ff0:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ff6:	4b35      	ldr	r3, [pc, #212]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	2b01      	cmp	r3, #1
 8002002:	d031      	beq.n	8002068 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0203 	and.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d12a      	bne.n	8002068 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d122      	bne.n	8002068 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d11a      	bne.n	8002068 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	0a5b      	lsrs	r3, r3, #9
 8002036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d111      	bne.n	8002068 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	0c1b      	lsrs	r3, r3, #16
 8002048:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002050:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d108      	bne.n	8002068 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	0e1b      	lsrs	r3, r3, #24
 800205a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002062:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e02b      	b.n	80020c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800206c:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 800206e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002076:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	429a      	cmp	r2, r3
 8002080:	d01f      	beq.n	80020c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002082:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	4a11      	ldr	r2, [pc, #68]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800208e:	f7ff f86f 	bl	8001170 <HAL_GetTick>
 8002092:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002094:	bf00      	nop
 8002096:	f7ff f86b 	bl	8001170 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	4293      	cmp	r3, r2
 80020a0:	d0f9      	beq.n	8002096 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 80020a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_RCC_OscConfig+0x8b0>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020ae:	00d2      	lsls	r2, r2, #3
 80020b0:	4906      	ldr	r1, [pc, #24]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020b6:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ba:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <HAL_RCC_OscConfig+0x8ac>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	58024400 	.word	0x58024400
 80020d0:	ffff0007 	.word	0xffff0007

080020d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e19c      	b.n	8002422 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002314 <HAL_RCC_ClockConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d910      	bls.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b87      	ldr	r3, [pc, #540]	@ (8002314 <HAL_RCC_ClockConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 020f 	bic.w	r2, r3, #15
 80020fe:	4985      	ldr	r1, [pc, #532]	@ (8002314 <HAL_RCC_ClockConfig+0x240>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b83      	ldr	r3, [pc, #524]	@ (8002314 <HAL_RCC_ClockConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e184      	b.n	8002422 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	4b7b      	ldr	r3, [pc, #492]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002130:	429a      	cmp	r2, r3
 8002132:	d908      	bls.n	8002146 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002134:	4b78      	ldr	r3, [pc, #480]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	4975      	ldr	r1, [pc, #468]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002142:	4313      	orrs	r3, r2
 8002144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	4b70      	ldr	r3, [pc, #448]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800215e:	429a      	cmp	r2, r3
 8002160:	d908      	bls.n	8002174 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002162:	4b6d      	ldr	r3, [pc, #436]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	496a      	ldr	r1, [pc, #424]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002170:	4313      	orrs	r3, r2
 8002172:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d010      	beq.n	80021a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	4b64      	ldr	r3, [pc, #400]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800218c:	429a      	cmp	r2, r3
 800218e:	d908      	bls.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002190:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	495e      	ldr	r1, [pc, #376]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	4b59      	ldr	r3, [pc, #356]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d908      	bls.n	80021d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021be:	4b56      	ldr	r3, [pc, #344]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4953      	ldr	r1, [pc, #332]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d908      	bls.n	80021fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f023 020f 	bic.w	r2, r3, #15
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4947      	ldr	r1, [pc, #284]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d055      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800220a:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	4940      	ldr	r1, [pc, #256]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002218:	4313      	orrs	r3, r2
 800221a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002224:	4b3c      	ldr	r3, [pc, #240]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d121      	bne.n	8002274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0f6      	b.n	8002422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d107      	bne.n	800224c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800223c:	4b36      	ldr	r3, [pc, #216]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d115      	bne.n	8002274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0ea      	b.n	8002422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002254:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0de      	b.n	8002422 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002264:	4b2c      	ldr	r3, [pc, #176]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0d6      	b.n	8002422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002274:	4b28      	ldr	r3, [pc, #160]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f023 0207 	bic.w	r2, r3, #7
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4925      	ldr	r1, [pc, #148]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 8002282:	4313      	orrs	r3, r2
 8002284:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002286:	f7fe ff73 	bl	8001170 <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228e:	f7fe ff6f 	bl	8001170 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0be      	b.n	8002422 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d1eb      	bne.n	800228e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d208      	bcs.n	80022e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d2:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f023 020f 	bic.w	r2, r3, #15
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	490e      	ldr	r1, [pc, #56]	@ (8002318 <HAL_RCC_ClockConfig+0x244>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCC_ClockConfig+0x240>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d214      	bcs.n	800231c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <HAL_RCC_ClockConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 020f 	bic.w	r2, r3, #15
 80022fa:	4906      	ldr	r1, [pc, #24]	@ (8002314 <HAL_RCC_ClockConfig+0x240>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <HAL_RCC_ClockConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e086      	b.n	8002422 <HAL_RCC_ClockConfig+0x34e>
 8002314:	52002000 	.word	0x52002000
 8002318:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d010      	beq.n	800234a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	4b3f      	ldr	r3, [pc, #252]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002334:	429a      	cmp	r2, r3
 8002336:	d208      	bcs.n	800234a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002338:	4b3c      	ldr	r3, [pc, #240]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	4939      	ldr	r1, [pc, #228]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 8002346:	4313      	orrs	r3, r2
 8002348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	4b34      	ldr	r3, [pc, #208]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002362:	429a      	cmp	r2, r3
 8002364:	d208      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002366:	4b31      	ldr	r3, [pc, #196]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	492e      	ldr	r1, [pc, #184]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 8002374:	4313      	orrs	r3, r2
 8002376:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	d010      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	4b28      	ldr	r3, [pc, #160]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002390:	429a      	cmp	r2, r3
 8002392:	d208      	bcs.n	80023a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4922      	ldr	r1, [pc, #136]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d010      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023be:	429a      	cmp	r2, r3
 80023c0:	d208      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023c2:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4917      	ldr	r1, [pc, #92]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023d4:	f000 f834 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	4912      	ldr	r1, [pc, #72]	@ (8002430 <HAL_RCC_ClockConfig+0x35c>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_RCC_ClockConfig+0x358>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <HAL_RCC_ClockConfig+0x35c>)
 80023fc:	5cd3      	ldrb	r3, [r2, r3]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <HAL_RCC_ClockConfig+0x360>)
 800240a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800240c:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <HAL_RCC_ClockConfig+0x364>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_RCC_ClockConfig+0x368>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fe60 	bl	80010dc <HAL_InitTick>
 800241c:	4603      	mov	r3, r0
 800241e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	58024400 	.word	0x58024400
 8002430:	080060fc 	.word	0x080060fc
 8002434:	24000004 	.word	0x24000004
 8002438:	24000000 	.word	0x24000000
 800243c:	24000008 	.word	0x24000008

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002446:	4bb3      	ldr	r3, [pc, #716]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800244e:	2b18      	cmp	r3, #24
 8002450:	f200 8155 	bhi.w	80026fe <HAL_RCC_GetSysClockFreq+0x2be>
 8002454:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	080024c1 	.word	0x080024c1
 8002460:	080026ff 	.word	0x080026ff
 8002464:	080026ff 	.word	0x080026ff
 8002468:	080026ff 	.word	0x080026ff
 800246c:	080026ff 	.word	0x080026ff
 8002470:	080026ff 	.word	0x080026ff
 8002474:	080026ff 	.word	0x080026ff
 8002478:	080026ff 	.word	0x080026ff
 800247c:	080024e7 	.word	0x080024e7
 8002480:	080026ff 	.word	0x080026ff
 8002484:	080026ff 	.word	0x080026ff
 8002488:	080026ff 	.word	0x080026ff
 800248c:	080026ff 	.word	0x080026ff
 8002490:	080026ff 	.word	0x080026ff
 8002494:	080026ff 	.word	0x080026ff
 8002498:	080026ff 	.word	0x080026ff
 800249c:	080024ed 	.word	0x080024ed
 80024a0:	080026ff 	.word	0x080026ff
 80024a4:	080026ff 	.word	0x080026ff
 80024a8:	080026ff 	.word	0x080026ff
 80024ac:	080026ff 	.word	0x080026ff
 80024b0:	080026ff 	.word	0x080026ff
 80024b4:	080026ff 	.word	0x080026ff
 80024b8:	080026ff 	.word	0x080026ff
 80024bc:	080024f3 	.word	0x080024f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024c0:	4b94      	ldr	r3, [pc, #592]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024cc:	4b91      	ldr	r3, [pc, #580]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	4a90      	ldr	r2, [pc, #576]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80024de:	e111      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024e2:	61bb      	str	r3, [r7, #24]
      break;
 80024e4:	e10e      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80024e6:	4b8d      	ldr	r3, [pc, #564]	@ (800271c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024e8:	61bb      	str	r3, [r7, #24]
      break;
 80024ea:	e10b      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80024ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024ee:	61bb      	str	r3, [r7, #24]
      break;
 80024f0:	e108      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024f2:	4b88      	ldr	r3, [pc, #544]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80024fc:	4b85      	ldr	r3, [pc, #532]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002506:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002508:	4b82      	ldr	r3, [pc, #520]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002512:	4b80      	ldr	r3, [pc, #512]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002516:	08db      	lsrs	r3, r3, #3
 8002518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80e1 	beq.w	80026f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b02      	cmp	r3, #2
 800253a:	f000 8083 	beq.w	8002644 <HAL_RCC_GetSysClockFreq+0x204>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b02      	cmp	r3, #2
 8002542:	f200 80a1 	bhi.w	8002688 <HAL_RCC_GetSysClockFreq+0x248>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x114>
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d056      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002552:	e099      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002554:	4b6f      	ldr	r3, [pc, #444]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002560:	4b6c      	ldr	r3, [pc, #432]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	4a6b      	ldr	r2, [pc, #428]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
 8002570:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258a:	4b62      	ldr	r3, [pc, #392]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259a:	ed97 6a02 	vldr	s12, [r7, #8]
 800259e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025ba:	e087      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002728 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ce:	4b51      	ldr	r3, [pc, #324]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025de:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025fe:	e065      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800272c <HAL_RCC_GetSysClockFreq+0x2ec>
 800260e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002612:	4b40      	ldr	r3, [pc, #256]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002622:	ed97 6a02 	vldr	s12, [r7, #8]
 8002626:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800262a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800262e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002642:	e043      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002730 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002656:	4b2f      	ldr	r3, [pc, #188]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002666:	ed97 6a02 	vldr	s12, [r7, #8]
 800266a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800266e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800267a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800267e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002686:	e021      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800272c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	0a5b      	lsrs	r3, r3, #9
 80026d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026d6:	3301      	adds	r3, #1
 80026d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80026e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f0:	ee17 3a90 	vmov	r3, s15
 80026f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80026f6:	e005      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
      break;
 80026fc:	e002      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002700:	61bb      	str	r3, [r7, #24]
      break;
 8002702:	bf00      	nop
  }

  return sysclockfreq;
 8002704:	69bb      	ldr	r3, [r7, #24]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3724      	adds	r7, #36	@ 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	58024400 	.word	0x58024400
 8002718:	03d09000 	.word	0x03d09000
 800271c:	003d0900 	.word	0x003d0900
 8002720:	007a1200 	.word	0x007a1200
 8002724:	46000000 	.word	0x46000000
 8002728:	4c742400 	.word	0x4c742400
 800272c:	4a742400 	.word	0x4a742400
 8002730:	4af42400 	.word	0x4af42400

08002734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800273a:	f7ff fe81 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x50>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490f      	ldr	r1, [pc, #60]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x54>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002758:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x50>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	4a09      	ldr	r2, [pc, #36]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x54>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a07      	ldr	r2, [pc, #28]	@ (800278c <HAL_RCC_GetHCLKFreq+0x58>)
 8002770:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002772:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <HAL_RCC_GetHCLKFreq+0x58>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58024400 	.word	0x58024400
 8002788:	080060fc 	.word	0x080060fc
 800278c:	24000004 	.word	0x24000004
 8002790:	24000000 	.word	0x24000000

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002798:	f7ff ffcc 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4904      	ldr	r1, [pc, #16]	@ (80027bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	58024400 	.word	0x58024400
 80027bc:	080060fc 	.word	0x080060fc

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027c4:	f7ff ffb6 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	0a1b      	lsrs	r3, r3, #8
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4904      	ldr	r1, [pc, #16]	@ (80027e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	58024400 	.word	0x58024400
 80027e8:	080060fc 	.word	0x080060fc

080027ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b0ca      	sub	sp, #296	@ 0x128
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002810:	2500      	movs	r5, #0
 8002812:	ea54 0305 	orrs.w	r3, r4, r5
 8002816:	d049      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800281c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800281e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002822:	d02f      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002824:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002828:	d828      	bhi.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800282a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800282e:	d01a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002830:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002834:	d822      	bhi.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800283a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800283e:	d007      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002840:	e01c      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002842:	4bb8      	ldr	r3, [pc, #736]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	4ab7      	ldr	r2, [pc, #732]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800284e:	e01a      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002854:	3308      	adds	r3, #8
 8002856:	2102      	movs	r1, #2
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fc8f 	bl	800417c <RCCEx_PLL2_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002864:	e00f      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286a:	3328      	adds	r3, #40	@ 0x28
 800286c:	2102      	movs	r1, #2
 800286e:	4618      	mov	r0, r3
 8002870:	f001 fd36 	bl	80042e0 <RCCEx_PLL3_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800287a:	e004      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002882:	e000      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800288e:	4ba5      	ldr	r3, [pc, #660]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002892:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800289c:	4aa1      	ldr	r2, [pc, #644]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800289e:	430b      	orrs	r3, r1
 80028a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80028a2:	e003      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80028b8:	f04f 0900 	mov.w	r9, #0
 80028bc:	ea58 0309 	orrs.w	r3, r8, r9
 80028c0:	d047      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80028c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d82a      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80028cc:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e9 	.word	0x080028e9
 80028d8:	080028f7 	.word	0x080028f7
 80028dc:	0800290d 	.word	0x0800290d
 80028e0:	0800292b 	.word	0x0800292b
 80028e4:	0800292b 	.word	0x0800292b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	4a8d      	ldr	r2, [pc, #564]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028f4:	e01a      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fa:	3308      	adds	r3, #8
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 fc3c 	bl	800417c <RCCEx_PLL2_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800290a:	e00f      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800290c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002910:	3328      	adds	r3, #40	@ 0x28
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f001 fce3 	bl	80042e0 <RCCEx_PLL3_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002920:	e004      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002928:	e000      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800292a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800292c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002934:	4b7b      	ldr	r3, [pc, #492]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002938:	f023 0107 	bic.w	r1, r3, #7
 800293c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	4a78      	ldr	r2, [pc, #480]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002944:	430b      	orrs	r3, r1
 8002946:	6513      	str	r3, [r2, #80]	@ 0x50
 8002948:	e003      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800294e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800295e:	f04f 0b00 	mov.w	fp, #0
 8002962:	ea5a 030b 	orrs.w	r3, sl, fp
 8002966:	d04c      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002972:	d030      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002978:	d829      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800297a:	2bc0      	cmp	r3, #192	@ 0xc0
 800297c:	d02d      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800297e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002980:	d825      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002982:	2b80      	cmp	r3, #128	@ 0x80
 8002984:	d018      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d821      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800298e:	2b40      	cmp	r3, #64	@ 0x40
 8002990:	d007      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002992:	e01c      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002994:	4b63      	ldr	r3, [pc, #396]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	4a62      	ldr	r2, [pc, #392]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800299e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029a0:	e01c      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a6:	3308      	adds	r3, #8
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fbe6 	bl	800417c <RCCEx_PLL2_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029b6:	e011      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029bc:	3328      	adds	r3, #40	@ 0x28
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fc8d 	bl	80042e0 <RCCEx_PLL3_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029cc:	e006      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029d4:	e002      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80029d6:	bf00      	nop
 80029d8:	e000      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80029da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80029e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80029ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80029f8:	e003      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a0e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a18:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	d053      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a2e:	d035      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a34:	d82e      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a3a:	d031      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a40:	d828      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a46:	d01a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a4c:	d822      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a56:	d007      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002a58:	e01c      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5a:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	4a31      	ldr	r2, [pc, #196]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a66:	e01c      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 fb83 	bl	800417c <RCCEx_PLL2_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a7c:	e011      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a82:	3328      	adds	r3, #40	@ 0x28
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fc2a 	bl	80042e0 <RCCEx_PLL3_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a92:	e006      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002aba:	4a1a      	ldr	r2, [pc, #104]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac0:	e003      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002ad6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ae0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	d056      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002af2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002af6:	d038      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002afc:	d831      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002afe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b02:	d034      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b08:	d82b      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b0e:	d01d      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b14:	d825      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b20:	e01f      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b22:	bf00      	nop
 8002b24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b28:	4ba2      	ldr	r3, [pc, #648]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	4aa1      	ldr	r2, [pc, #644]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b34:	e01c      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 fb1c 	bl	800417c <RCCEx_PLL2_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b4a:	e011      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b50:	3328      	adds	r3, #40	@ 0x28
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 fbc3 	bl	80042e0 <RCCEx_PLL3_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b60:	e006      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b68:	e002      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b78:	4b8e      	ldr	r3, [pc, #568]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b88:	4a8a      	ldr	r2, [pc, #552]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b8e:	e003      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002bae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	d03a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbe:	2b30      	cmp	r3, #48	@ 0x30
 8002bc0:	d01f      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002bc2:	2b30      	cmp	r3, #48	@ 0x30
 8002bc4:	d819      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d00c      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d815      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d019      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d111      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd6:	4b77      	ldr	r3, [pc, #476]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	4a76      	ldr	r2, [pc, #472]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002be2:	e011      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be8:	3308      	adds	r3, #8
 8002bea:	2102      	movs	r1, #2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f001 fac5 	bl	800417c <RCCEx_PLL2_Config>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002bf8:	e006      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c00:	e002      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c10:	4b68      	ldr	r3, [pc, #416]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1e:	4a65      	ldr	r2, [pc, #404]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c20:	430b      	orrs	r3, r1
 8002c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c24:	e003      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	d051      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c58:	d035      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c5e:	d82e      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c64:	d031      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002c66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c6a:	d828      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c70:	d01a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c76:	d822      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c80:	d007      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002c82:	e01c      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c84:	4b4b      	ldr	r3, [pc, #300]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	4a4a      	ldr	r2, [pc, #296]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c90:	e01c      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c96:	3308      	adds	r3, #8
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 fa6e 	bl	800417c <RCCEx_PLL2_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ca6:	e011      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cac:	3328      	adds	r3, #40	@ 0x28
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 fb15 	bl	80042e0 <RCCEx_PLL3_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cbc:	e006      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cd4:	4b37      	ldr	r3, [pc, #220]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce2:	4a34      	ldr	r2, [pc, #208]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ce8:	e003      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002d08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	d056      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d1c:	d033      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d22:	d82c      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d28:	d02f      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d2e:	d826      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d34:	d02b      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d3a:	d820      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d40:	d012      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d46:	d81a      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d022      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d50:	d115      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d56:	3308      	adds	r3, #8
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 fa0e 	bl	800417c <RCCEx_PLL2_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d66:	e015      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6c:	3328      	adds	r3, #40	@ 0x28
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fab5 	bl	80042e0 <RCCEx_PLL3_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d84:	e006      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d86:	bf00      	nop
 8002d88:	e004      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10d      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002daa:	4a02      	ldr	r2, [pc, #8]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6513      	str	r3, [r2, #80]	@ 0x50
 8002db0:	e006      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002db2:	bf00      	nop
 8002db4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	d055      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dec:	d033      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002df2:	d82c      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df8:	d02f      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfe:	d826      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e04:	d02b      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e0a:	d820      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e10:	d012      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e16:	d81a      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d022      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e20:	d115      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e26:	3308      	adds	r3, #8
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 f9a6 	bl	800417c <RCCEx_PLL2_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e36:	e015      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	3328      	adds	r3, #40	@ 0x28
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fa4d 	bl	80042e0 <RCCEx_PLL3_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e54:	e006      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e56:	bf00      	nop
 8002e58:	e004      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e6c:	4ba3      	ldr	r3, [pc, #652]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e7c:	4a9f      	ldr	r2, [pc, #636]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	d037      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ebc:	d816      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002ec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ec6:	d111      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	4a8b      	ldr	r2, [pc, #556]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ed4:	e00f      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	3308      	adds	r3, #8
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 f94c 	bl	800417c <RCCEx_PLL2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002eea:	e004      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002efe:	4b7f      	ldr	r3, [pc, #508]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0c:	4a7b      	ldr	r2, [pc, #492]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f12:	e003      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	d039      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d81c      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f89 	.word	0x08002f89
 8002f50:	08002f5d 	.word	0x08002f5d
 8002f54:	08002f6b 	.word	0x08002f6b
 8002f58:	08002f89 	.word	0x08002f89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f5c:	4b67      	ldr	r3, [pc, #412]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	4a66      	ldr	r2, [pc, #408]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f68:	e00f      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6e:	3308      	adds	r3, #8
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f902 	bl	800417c <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f7e:	e004      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f86:	e000      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f92:	4b5a      	ldr	r3, [pc, #360]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	f023 0103 	bic.w	r1, r3, #3
 8002f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa0:	4a56      	ldr	r2, [pc, #344]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f000 809f 	beq.w	8003110 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a4a      	ldr	r2, [pc, #296]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fde:	f7fe f8c7 	bl	8001170 <HAL_GetTick>
 8002fe2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fe6:	e00b      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe8:	f7fe f8c2 	bl	8001170 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b64      	cmp	r3, #100	@ 0x64
 8002ff6:	d903      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ffe:	e005      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003000:	4b3f      	ldr	r3, [pc, #252]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ed      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800300c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003010:	2b00      	cmp	r3, #0
 8003012:	d179      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003014:	4b39      	ldr	r3, [pc, #228]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003016:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003020:	4053      	eors	r3, r2
 8003022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d015      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800302a:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003032:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003036:	4b31      	ldr	r3, [pc, #196]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	4a30      	ldr	r2, [pc, #192]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003040:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003042:	4b2e      	ldr	r3, [pc, #184]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	4a2d      	ldr	r2, [pc, #180]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800304c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800304e:	4a2b      	ldr	r2, [pc, #172]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003050:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003054:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800305e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003062:	d118      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe f884 	bl	8001170 <HAL_GetTick>
 8003068:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800306c:	e00d      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe f87f 	bl	8001170 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003078:	1ad2      	subs	r2, r2, r3
 800307a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800307e:	429a      	cmp	r2, r3
 8003080:	d903      	bls.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003088:	e005      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800308a:	4b1c      	ldr	r3, [pc, #112]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0eb      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800309a:	2b00      	cmp	r3, #0
 800309c:	d129      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ae:	d10e      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80030b0:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80030b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030c0:	091a      	lsrs	r2, r3, #4
 80030c2:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	4a0d      	ldr	r2, [pc, #52]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6113      	str	r3, [r2, #16]
 80030cc:	e005      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80030ce:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030d8:	6113      	str	r3, [r2, #16]
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80030de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ea:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f0:	e00e      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80030fa:	e009      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80030fc:	58024400 	.word	0x58024400
 8003100:	58024800 	.word	0x58024800
 8003104:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800310c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f002 0301 	and.w	r3, r2, #1
 800311c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003126:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800312a:	460b      	mov	r3, r1
 800312c:	4313      	orrs	r3, r2
 800312e:	f000 8089 	beq.w	8003244 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003138:	2b28      	cmp	r3, #40	@ 0x28
 800313a:	d86b      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	0800321d 	.word	0x0800321d
 8003148:	08003215 	.word	0x08003215
 800314c:	08003215 	.word	0x08003215
 8003150:	08003215 	.word	0x08003215
 8003154:	08003215 	.word	0x08003215
 8003158:	08003215 	.word	0x08003215
 800315c:	08003215 	.word	0x08003215
 8003160:	08003215 	.word	0x08003215
 8003164:	080031e9 	.word	0x080031e9
 8003168:	08003215 	.word	0x08003215
 800316c:	08003215 	.word	0x08003215
 8003170:	08003215 	.word	0x08003215
 8003174:	08003215 	.word	0x08003215
 8003178:	08003215 	.word	0x08003215
 800317c:	08003215 	.word	0x08003215
 8003180:	08003215 	.word	0x08003215
 8003184:	080031ff 	.word	0x080031ff
 8003188:	08003215 	.word	0x08003215
 800318c:	08003215 	.word	0x08003215
 8003190:	08003215 	.word	0x08003215
 8003194:	08003215 	.word	0x08003215
 8003198:	08003215 	.word	0x08003215
 800319c:	08003215 	.word	0x08003215
 80031a0:	08003215 	.word	0x08003215
 80031a4:	0800321d 	.word	0x0800321d
 80031a8:	08003215 	.word	0x08003215
 80031ac:	08003215 	.word	0x08003215
 80031b0:	08003215 	.word	0x08003215
 80031b4:	08003215 	.word	0x08003215
 80031b8:	08003215 	.word	0x08003215
 80031bc:	08003215 	.word	0x08003215
 80031c0:	08003215 	.word	0x08003215
 80031c4:	0800321d 	.word	0x0800321d
 80031c8:	08003215 	.word	0x08003215
 80031cc:	08003215 	.word	0x08003215
 80031d0:	08003215 	.word	0x08003215
 80031d4:	08003215 	.word	0x08003215
 80031d8:	08003215 	.word	0x08003215
 80031dc:	08003215 	.word	0x08003215
 80031e0:	08003215 	.word	0x08003215
 80031e4:	0800321d 	.word	0x0800321d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ec:	3308      	adds	r3, #8
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 ffc3 	bl	800417c <RCCEx_PLL2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80031fc:	e00f      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003202:	3328      	adds	r3, #40	@ 0x28
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f86a 	bl	80042e0 <RCCEx_PLL3_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003212:	e004      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800321a:	e000      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800321c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003226:	4bbf      	ldr	r3, [pc, #764]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800322e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003234:	4abb      	ldr	r2, [pc, #748]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003236:	430b      	orrs	r3, r1
 8003238:	6553      	str	r3, [r2, #84]	@ 0x54
 800323a:	e003      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003240:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f002 0302 	and.w	r3, r2, #2
 8003250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003254:	2300      	movs	r3, #0
 8003256:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800325a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800325e:	460b      	mov	r3, r1
 8003260:	4313      	orrs	r3, r2
 8003262:	d041      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800326a:	2b05      	cmp	r3, #5
 800326c:	d824      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800326e:	a201      	add	r2, pc, #4	@ (adr r2, 8003274 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080032c1 	.word	0x080032c1
 8003278:	0800328d 	.word	0x0800328d
 800327c:	080032a3 	.word	0x080032a3
 8003280:	080032c1 	.word	0x080032c1
 8003284:	080032c1 	.word	0x080032c1
 8003288:	080032c1 	.word	0x080032c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003290:	3308      	adds	r3, #8
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f000 ff71 	bl	800417c <RCCEx_PLL2_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032a0:	e00f      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a6:	3328      	adds	r3, #40	@ 0x28
 80032a8:	2101      	movs	r1, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 f818 	bl	80042e0 <RCCEx_PLL3_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032b6:	e004      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032be:	e000      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80032c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032ca:	4b96      	ldr	r3, [pc, #600]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	f023 0107 	bic.w	r1, r3, #7
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032d8:	4a92      	ldr	r2, [pc, #584]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032da:	430b      	orrs	r3, r1
 80032dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80032de:	e003      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f002 0304 	and.w	r3, r2, #4
 80032f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003302:	460b      	mov	r3, r1
 8003304:	4313      	orrs	r3, r2
 8003306:	d044      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003310:	2b05      	cmp	r3, #5
 8003312:	d825      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003314:	a201      	add	r2, pc, #4	@ (adr r2, 800331c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003369 	.word	0x08003369
 8003320:	08003335 	.word	0x08003335
 8003324:	0800334b 	.word	0x0800334b
 8003328:	08003369 	.word	0x08003369
 800332c:	08003369 	.word	0x08003369
 8003330:	08003369 	.word	0x08003369
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003338:	3308      	adds	r3, #8
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f000 ff1d 	bl	800417c <RCCEx_PLL2_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003348:	e00f      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334e:	3328      	adds	r3, #40	@ 0x28
 8003350:	2101      	movs	r1, #1
 8003352:	4618      	mov	r0, r3
 8003354:	f000 ffc4 	bl	80042e0 <RCCEx_PLL3_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800335e:	e004      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003366:	e000      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003372:	4b6c      	ldr	r3, [pc, #432]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	f023 0107 	bic.w	r1, r3, #7
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003382:	4a68      	ldr	r2, [pc, #416]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003384:	430b      	orrs	r3, r1
 8003386:	6593      	str	r3, [r2, #88]	@ 0x58
 8003388:	e003      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f002 0320 	and.w	r3, r2, #32
 800339e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033ac:	460b      	mov	r3, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	d055      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033be:	d033      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80033c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033c4:	d82c      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ca:	d02f      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d0:	d826      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033d6:	d02b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80033d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033dc:	d820      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e2:	d012      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80033e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e8:	d81a      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d022      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80033ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033f2:	d115      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f8:	3308      	adds	r3, #8
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 febd 	bl	800417c <RCCEx_PLL2_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003408:	e015      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340e:	3328      	adds	r3, #40	@ 0x28
 8003410:	2102      	movs	r1, #2
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ff64 	bl	80042e0 <RCCEx_PLL3_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800341e:	e00a      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003426:	e006      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003428:	bf00      	nop
 800342a:	e004      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800342c:	bf00      	nop
 800342e:	e002      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800343e:	4b39      	ldr	r3, [pc, #228]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003442:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	4a35      	ldr	r2, [pc, #212]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6553      	str	r3, [r2, #84]	@ 0x54
 8003454:	e003      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800345a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800346a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800346e:	2300      	movs	r3, #0
 8003470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003474:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003478:	460b      	mov	r3, r1
 800347a:	4313      	orrs	r3, r2
 800347c:	d058      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800347e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003482:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003486:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800348a:	d033      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800348c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003490:	d82c      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003496:	d02f      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349c:	d826      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800349e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034a2:	d02b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80034a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034a8:	d820      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ae:	d012      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b4:	d81a      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d022      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034be:	d115      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c4:	3308      	adds	r3, #8
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fe57 	bl	800417c <RCCEx_PLL2_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034d4:	e015      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034da:	3328      	adds	r3, #40	@ 0x28
 80034dc:	2102      	movs	r1, #2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fefe 	bl	80042e0 <RCCEx_PLL3_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034ea:	e00a      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034f2:	e006      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034f4:	bf00      	nop
 80034f6:	e004      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034f8:	bf00      	nop
 80034fa:	e002      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10e      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003516:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800351a:	4a02      	ldr	r2, [pc, #8]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003520:	e006      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003522:	bf00      	nop
 8003524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800353c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003546:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800354a:	460b      	mov	r3, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	d055      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003554:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003558:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800355c:	d033      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800355e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003562:	d82c      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003568:	d02f      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800356a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800356e:	d826      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003570:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003574:	d02b      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003576:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800357a:	d820      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800357c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003580:	d012      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003582:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003586:	d81a      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d022      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003590:	d115      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003596:	3308      	adds	r3, #8
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fdee 	bl	800417c <RCCEx_PLL2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035a6:	e015      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	3328      	adds	r3, #40	@ 0x28
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fe95 	bl	80042e0 <RCCEx_PLL3_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035bc:	e00a      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c4:	e006      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035c6:	bf00      	nop
 80035c8:	e004      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035dc:	4ba1      	ldr	r3, [pc, #644]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035ec:	4a9d      	ldr	r2, [pc, #628]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f2:	e003      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f002 0308 	and.w	r3, r2, #8
 8003608:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003612:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003616:	460b      	mov	r3, r1
 8003618:	4313      	orrs	r3, r2
 800361a:	d01e      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003628:	d10c      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	3328      	adds	r3, #40	@ 0x28
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fe54 	bl	80042e0 <RCCEx_PLL3_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003644:	4b87      	ldr	r3, [pc, #540]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003654:	4a83      	ldr	r2, [pc, #524]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003656:	430b      	orrs	r3, r1
 8003658:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f002 0310 	and.w	r3, r2, #16
 8003666:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003670:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003674:	460b      	mov	r3, r1
 8003676:	4313      	orrs	r3, r2
 8003678:	d01e      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003686:	d10c      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368c:	3328      	adds	r3, #40	@ 0x28
 800368e:	2102      	movs	r1, #2
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fe25 	bl	80042e0 <RCCEx_PLL3_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036a2:	4b70      	ldr	r3, [pc, #448]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036b2:	4a6c      	ldr	r2, [pc, #432]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80036c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80036d2:	460b      	mov	r3, r1
 80036d4:	4313      	orrs	r3, r2
 80036d6:	d03e      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036e4:	d022      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80036e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036ea:	d81b      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f4:	d00b      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80036f6:	e015      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	3308      	adds	r3, #8
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fd3b 	bl	800417c <RCCEx_PLL2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800370c:	e00f      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	3328      	adds	r3, #40	@ 0x28
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fde2 	bl	80042e0 <RCCEx_PLL3_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003722:	e004      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800372c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003736:	4b4b      	ldr	r3, [pc, #300]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003746:	4a47      	ldr	r2, [pc, #284]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003748:	430b      	orrs	r3, r1
 800374a:	6593      	str	r3, [r2, #88]	@ 0x58
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003762:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003764:	2300      	movs	r3, #0
 8003766:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003768:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800376c:	460b      	mov	r3, r1
 800376e:	4313      	orrs	r3, r2
 8003770:	d03b      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800377e:	d01f      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003780:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003784:	d818      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800378a:	d003      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800378c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003790:	d007      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003792:	e011      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003794:	4b33      	ldr	r3, [pc, #204]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	4a32      	ldr	r2, [pc, #200]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800379a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037a0:	e00f      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	3328      	adds	r3, #40	@ 0x28
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fd98 	bl	80042e0 <RCCEx_PLL3_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80037b6:	e004      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037be:	e000      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80037c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ca:	4b26      	ldr	r3, [pc, #152]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037da:	4a22      	ldr	r2, [pc, #136]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037dc:	430b      	orrs	r3, r1
 80037de:	6553      	str	r3, [r2, #84]	@ 0x54
 80037e0:	e003      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80037f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80037f8:	2300      	movs	r3, #0
 80037fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80037fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003800:	460b      	mov	r3, r1
 8003802:	4313      	orrs	r3, r2
 8003804:	d034      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003814:	d007      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003816:	e011      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003818:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	4a11      	ldr	r2, [pc, #68]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003824:	e00e      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	3308      	adds	r3, #8
 800382c:	2102      	movs	r1, #2
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fca4 	bl	800417c <RCCEx_PLL2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800383a:	e003      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10d      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800384c:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800384e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003850:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385a:	4a02      	ldr	r2, [pc, #8]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800385c:	430b      	orrs	r3, r1
 800385e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800387c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800387e:	2300      	movs	r3, #0
 8003880:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003882:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003886:	460b      	mov	r3, r1
 8003888:	4313      	orrs	r3, r2
 800388a:	d00c      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	3328      	adds	r3, #40	@ 0x28
 8003892:	2102      	movs	r1, #2
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fd23 	bl	80042e0 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80038b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80038b4:	2300      	movs	r3, #0
 80038b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80038b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80038bc:	460b      	mov	r3, r1
 80038be:	4313      	orrs	r3, r2
 80038c0:	d038      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ce:	d018      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80038d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038d4:	d811      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80038d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038da:	d014      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e0:	d80b      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d011      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80038e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ea:	d106      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4bc3      	ldr	r3, [pc, #780]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f0:	4ac2      	ldr	r2, [pc, #776]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003900:	e004      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800390a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003914:	4bb9      	ldr	r3, [pc, #740]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003918:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003924:	4ab5      	ldr	r2, [pc, #724]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003926:	430b      	orrs	r3, r1
 8003928:	6553      	str	r3, [r2, #84]	@ 0x54
 800392a:	e003      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003940:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003942:	2300      	movs	r3, #0
 8003944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003946:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800394a:	460b      	mov	r3, r1
 800394c:	4313      	orrs	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003950:	4baa      	ldr	r3, [pc, #680]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003954:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395e:	4aa7      	ldr	r2, [pc, #668]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003960:	430b      	orrs	r3, r1
 8003962:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003970:	653b      	str	r3, [r7, #80]	@ 0x50
 8003972:	2300      	movs	r3, #0
 8003974:	657b      	str	r3, [r7, #84]	@ 0x54
 8003976:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003980:	4b9e      	ldr	r3, [pc, #632]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003990:	4a9a      	ldr	r2, [pc, #616]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003992:	430b      	orrs	r3, r1
 8003994:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039a4:	2300      	movs	r3, #0
 80039a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039ac:	460b      	mov	r3, r1
 80039ae:	4313      	orrs	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039b2:	4b92      	ldr	r3, [pc, #584]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c0:	4a8e      	ldr	r2, [pc, #568]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039c2:	430b      	orrs	r3, r1
 80039c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80039d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80039d4:	2300      	movs	r3, #0
 80039d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80039dc:	460b      	mov	r3, r1
 80039de:	4313      	orrs	r3, r2
 80039e0:	d00e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039e2:	4b86      	ldr	r3, [pc, #536]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	4a85      	ldr	r2, [pc, #532]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80039ec:	6113      	str	r3, [r2, #16]
 80039ee:	4b83      	ldr	r3, [pc, #524]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039f0:	6919      	ldr	r1, [r3, #16]
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80039fa:	4a80      	ldr	r2, [pc, #512]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a0e:	2300      	movs	r3, #0
 8003a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a16:	460b      	mov	r3, r1
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	d009      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a1c:	4b77      	ldr	r3, [pc, #476]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a20:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2a:	4a74      	ldr	r2, [pc, #464]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a3e:	2300      	movs	r3, #0
 8003a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a42:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a46:	460b      	mov	r3, r1
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a4c:	4b6b      	ldr	r3, [pc, #428]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a50:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5c:	4a67      	ldr	r2, [pc, #412]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	3308      	adds	r3, #8
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fb78 	bl	800417c <RCCEx_PLL2_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6239      	str	r1, [r7, #32]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4313      	orrs	r3, r2
 8003abc:	d011      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fb58 	bl	800417c <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	2100      	movs	r1, #0
 8003aec:	61b9      	str	r1, [r7, #24]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003af8:	460b      	mov	r3, r1
 8003afa:	4313      	orrs	r3, r2
 8003afc:	d011      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	3308      	adds	r3, #8
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fb38 	bl	800417c <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	6139      	str	r1, [r7, #16]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	d011      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b42:	3328      	adds	r3, #40	@ 0x28
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fbca 	bl	80042e0 <RCCEx_PLL3_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	d011      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	3328      	adds	r3, #40	@ 0x28
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fbaa 	bl	80042e0 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	2100      	movs	r1, #0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	d011      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	3328      	adds	r3, #40	@ 0x28
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fb8a 	bl	80042e0 <RCCEx_PLL3_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003be2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bfc:	58024400 	.word	0x58024400

08003c00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c04:	f7fe fd96 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4904      	ldr	r1, [pc, #16]	@ (8003c28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	58024400 	.word	0x58024400
 8003c28:	080060fc 	.word	0x080060fc

08003c2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	@ 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c34:	4ba1      	ldr	r3, [pc, #644]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c3e:	4b9f      	ldr	r3, [pc, #636]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	0b1b      	lsrs	r3, r3, #12
 8003c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c4a:	4b9c      	ldr	r3, [pc, #624]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c56:	4b99      	ldr	r3, [pc, #612]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5a:	08db      	lsrs	r3, r3, #3
 8003c5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8111 	beq.w	8003e9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	f000 8083 	beq.w	8003d88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	f200 80a1 	bhi.w	8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d056      	beq.n	8003d44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c96:	e099      	b.n	8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c98:	4b88      	ldr	r3, [pc, #544]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02d      	beq.n	8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ca4:	4b85      	ldr	r3, [pc, #532]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	4a84      	ldr	r2, [pc, #528]	@ (8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	ee07 3a90 	vmov	s15, r3
 8003cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cce:	4b7b      	ldr	r3, [pc, #492]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003cfe:	e087      	b.n	8003e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d12:	4b6a      	ldr	r3, [pc, #424]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d42:	e065      	b.n	8003e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d56:	4b59      	ldr	r3, [pc, #356]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d86:	e043      	b.n	8003e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9a:	4b48      	ldr	r3, [pc, #288]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dca:	e021      	b.n	8003e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dde:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e10:	4b2a      	ldr	r3, [pc, #168]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e14:	0a5b      	lsrs	r3, r3, #9
 8003e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e36:	ee17 2a90 	vmov	r2, s15
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e64:	ee17 2a90 	vmov	r2, s15
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003e6c:	4b13      	ldr	r3, [pc, #76]	@ (8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	0e1b      	lsrs	r3, r3, #24
 8003e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e92:	ee17 2a90 	vmov	r2, s15
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e9a:	e008      	b.n	8003eae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
}
 8003eae:	bf00      	nop
 8003eb0:	3724      	adds	r7, #36	@ 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	58024400 	.word	0x58024400
 8003ec0:	03d09000 	.word	0x03d09000
 8003ec4:	46000000 	.word	0x46000000
 8003ec8:	4c742400 	.word	0x4c742400
 8003ecc:	4a742400 	.word	0x4a742400
 8003ed0:	4af42400 	.word	0x4af42400

08003ed4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b089      	sub	sp, #36	@ 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003edc:	4ba1      	ldr	r3, [pc, #644]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003ee6:	4b9f      	ldr	r3, [pc, #636]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eea:	0d1b      	lsrs	r3, r3, #20
 8003eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ef0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003efe:	4b99      	ldr	r3, [pc, #612]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	08db      	lsrs	r3, r3, #3
 8003f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8111 	beq.w	8004144 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	f000 8083 	beq.w	8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	f200 80a1 	bhi.w	8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d056      	beq.n	8003fec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f3e:	e099      	b.n	8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f40:	4b88      	ldr	r3, [pc, #544]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02d      	beq.n	8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f4c:	4b85      	ldr	r3, [pc, #532]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	08db      	lsrs	r3, r3, #3
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	4a84      	ldr	r2, [pc, #528]	@ (8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f76:	4b7b      	ldr	r3, [pc, #492]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800416c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fa6:	e087      	b.n	80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fba:	4b6a      	ldr	r3, [pc, #424]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800416c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fea:	e065      	b.n	80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffe:	4b59      	ldr	r3, [pc, #356]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004012:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800416c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800402e:	e043      	b.n	80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800403e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004042:	4b48      	ldr	r3, [pc, #288]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004052:	ed97 6a03 	vldr	s12, [r7, #12]
 8004056:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800416c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800405a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004072:	e021      	b.n	80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004086:	4b37      	ldr	r3, [pc, #220]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004096:	ed97 6a03 	vldr	s12, [r7, #12]
 800409a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800416c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800409e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80040b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	0a5b      	lsrs	r3, r3, #9
 80040be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040de:	ee17 2a90 	vmov	r2, s15
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80040e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004100:	edd7 6a07 	vldr	s13, [r7, #28]
 8004104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800410c:	ee17 2a90 	vmov	r2, s15
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004114:	4b13      	ldr	r3, [pc, #76]	@ (8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	0e1b      	lsrs	r3, r3, #24
 800411a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800412a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800412e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413a:	ee17 2a90 	vmov	r2, s15
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004142:	e008      	b.n	8004156 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
}
 8004156:	bf00      	nop
 8004158:	3724      	adds	r7, #36	@ 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	58024400 	.word	0x58024400
 8004168:	03d09000 	.word	0x03d09000
 800416c:	46000000 	.word	0x46000000
 8004170:	4c742400 	.word	0x4c742400
 8004174:	4a742400 	.word	0x4a742400
 8004178:	4af42400 	.word	0x4af42400

0800417c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800418a:	4b53      	ldr	r3, [pc, #332]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 800418c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b03      	cmp	r3, #3
 8004194:	d101      	bne.n	800419a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e099      	b.n	80042ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800419a:	4b4f      	ldr	r3, [pc, #316]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4e      	ldr	r2, [pc, #312]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 80041a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fc ffe3 	bl	8001170 <HAL_GetTick>
 80041aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041ae:	f7fc ffdf 	bl	8001170 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e086      	b.n	80042ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041c0:	4b45      	ldr	r3, [pc, #276]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041cc:	4b42      	ldr	r3, [pc, #264]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	031b      	lsls	r3, r3, #12
 80041da:	493f      	ldr	r1, [pc, #252]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	628b      	str	r3, [r1, #40]	@ 0x28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	025b      	lsls	r3, r3, #9
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	3b01      	subs	r3, #1
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004210:	4931      	ldr	r1, [pc, #196]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004216:	4b30      	ldr	r3, [pc, #192]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	492d      	ldr	r1, [pc, #180]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004224:	4313      	orrs	r3, r2
 8004226:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004228:	4b2b      	ldr	r3, [pc, #172]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	f023 0220 	bic.w	r2, r3, #32
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	4928      	ldr	r1, [pc, #160]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004236:	4313      	orrs	r3, r2
 8004238:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800423a:	4b27      	ldr	r3, [pc, #156]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423e:	4a26      	ldr	r2, [pc, #152]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004240:	f023 0310 	bic.w	r3, r3, #16
 8004244:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004246:	4b24      	ldr	r3, [pc, #144]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <RCCEx_PLL2_Config+0x160>)
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	69d2      	ldr	r2, [r2, #28]
 8004252:	00d2      	lsls	r2, r2, #3
 8004254:	4920      	ldr	r1, [pc, #128]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004256:	4313      	orrs	r3, r2
 8004258:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800425a:	4b1f      	ldr	r3, [pc, #124]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	4a1e      	ldr	r2, [pc, #120]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004260:	f043 0310 	orr.w	r3, r3, #16
 8004264:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800426c:	4b1a      	ldr	r3, [pc, #104]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	4a19      	ldr	r2, [pc, #100]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004272:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004276:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004278:	e00f      	b.n	800429a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d106      	bne.n	800428e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004280:	4b15      	ldr	r3, [pc, #84]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	4a14      	ldr	r2, [pc, #80]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800428a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800428c:	e005      	b.n	800429a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800428e:	4b12      	ldr	r3, [pc, #72]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	4a11      	ldr	r2, [pc, #68]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 8004294:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004298:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800429a:	4b0f      	ldr	r3, [pc, #60]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a0e      	ldr	r2, [pc, #56]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 80042a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a6:	f7fc ff63 	bl	8001170 <HAL_GetTick>
 80042aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042ac:	e008      	b.n	80042c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042ae:	f7fc ff5f 	bl	8001170 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e006      	b.n	80042ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <RCCEx_PLL2_Config+0x15c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	58024400 	.word	0x58024400
 80042dc:	ffff0007 	.word	0xffff0007

080042e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042ee:	4b53      	ldr	r3, [pc, #332]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d101      	bne.n	80042fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e099      	b.n	8004432 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042fe:	4b4f      	ldr	r3, [pc, #316]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a4e      	ldr	r2, [pc, #312]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004304:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430a:	f7fc ff31 	bl	8001170 <HAL_GetTick>
 800430e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004310:	e008      	b.n	8004324 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004312:	f7fc ff2d 	bl	8001170 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e086      	b.n	8004432 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004324:	4b45      	ldr	r3, [pc, #276]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004330:	4b42      	ldr	r3, [pc, #264]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	051b      	lsls	r3, r3, #20
 800433e:	493f      	ldr	r1, [pc, #252]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004340:	4313      	orrs	r3, r2
 8004342:	628b      	str	r3, [r1, #40]	@ 0x28
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	3b01      	subs	r3, #1
 800434a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	3b01      	subs	r3, #1
 8004354:	025b      	lsls	r3, r3, #9
 8004356:	b29b      	uxth	r3, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	3b01      	subs	r3, #1
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	3b01      	subs	r3, #1
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004374:	4931      	ldr	r1, [pc, #196]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800437a:	4b30      	ldr	r3, [pc, #192]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	492d      	ldr	r1, [pc, #180]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004388:	4313      	orrs	r3, r2
 800438a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800438c:	4b2b      	ldr	r3, [pc, #172]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	4928      	ldr	r1, [pc, #160]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800439e:	4b27      	ldr	r3, [pc, #156]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	4a26      	ldr	r2, [pc, #152]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043aa:	4b24      	ldr	r3, [pc, #144]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ae:	4b24      	ldr	r3, [pc, #144]	@ (8004440 <RCCEx_PLL3_Config+0x160>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	69d2      	ldr	r2, [r2, #28]
 80043b6:	00d2      	lsls	r2, r2, #3
 80043b8:	4920      	ldr	r1, [pc, #128]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043be:	4b1f      	ldr	r3, [pc, #124]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c2:	4a1e      	ldr	r2, [pc, #120]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043d0:	4b1a      	ldr	r3, [pc, #104]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	4a19      	ldr	r2, [pc, #100]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043dc:	e00f      	b.n	80043fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043e4:	4b15      	ldr	r3, [pc, #84]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	4a14      	ldr	r2, [pc, #80]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043f0:	e005      	b.n	80043fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043f2:	4b12      	ldr	r3, [pc, #72]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	4a11      	ldr	r2, [pc, #68]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 80043f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043fe:	4b0f      	ldr	r3, [pc, #60]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a0e      	ldr	r2, [pc, #56]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440a:	f7fc feb1 	bl	8001170 <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004410:	e008      	b.n	8004424 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004412:	f7fc fead 	bl	8001170 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e006      	b.n	8004432 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004424:	4b05      	ldr	r3, [pc, #20]	@ (800443c <RCCEx_PLL3_Config+0x15c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400
 8004440:	ffff0007 	.word	0xffff0007

08004444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e049      	b.n	80044ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fc fc98 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f000 f9aa 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e049      	b.n	8004598 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f841 	bl	80045a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f000 f953 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e0ff      	b.n	80047d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b14      	cmp	r3, #20
 80045de:	f200 80f0 	bhi.w	80047c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800463d 	.word	0x0800463d
 80045ec:	080047c3 	.word	0x080047c3
 80045f0:	080047c3 	.word	0x080047c3
 80045f4:	080047c3 	.word	0x080047c3
 80045f8:	0800467d 	.word	0x0800467d
 80045fc:	080047c3 	.word	0x080047c3
 8004600:	080047c3 	.word	0x080047c3
 8004604:	080047c3 	.word	0x080047c3
 8004608:	080046bf 	.word	0x080046bf
 800460c:	080047c3 	.word	0x080047c3
 8004610:	080047c3 	.word	0x080047c3
 8004614:	080047c3 	.word	0x080047c3
 8004618:	080046ff 	.word	0x080046ff
 800461c:	080047c3 	.word	0x080047c3
 8004620:	080047c3 	.word	0x080047c3
 8004624:	080047c3 	.word	0x080047c3
 8004628:	08004741 	.word	0x08004741
 800462c:	080047c3 	.word	0x080047c3
 8004630:	080047c3 	.word	0x080047c3
 8004634:	080047c3 	.word	0x080047c3
 8004638:	08004781 	.word	0x08004781
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f970 	bl	8004928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0208 	orr.w	r2, r2, #8
 8004656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0204 	bic.w	r2, r2, #4
 8004666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6999      	ldr	r1, [r3, #24]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	619a      	str	r2, [r3, #24]
      break;
 800467a:	e0a5      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f9e0 	bl	8004a48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6999      	ldr	r1, [r3, #24]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	021a      	lsls	r2, r3, #8
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	619a      	str	r2, [r3, #24]
      break;
 80046bc:	e084      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fa49 	bl	8004b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0208 	orr.w	r2, r2, #8
 80046d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0204 	bic.w	r2, r2, #4
 80046e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69d9      	ldr	r1, [r3, #28]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	61da      	str	r2, [r3, #28]
      break;
 80046fc:	e064      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fab1 	bl	8004c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69d9      	ldr	r1, [r3, #28]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	021a      	lsls	r2, r3, #8
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	61da      	str	r2, [r3, #28]
      break;
 800473e:	e043      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fafa 	bl	8004d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0208 	orr.w	r2, r2, #8
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0204 	bic.w	r2, r2, #4
 800476a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800477e:	e023      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fb3e 	bl	8004e08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800479a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	021a      	lsls	r2, r3, #8
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047c0:	e002      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
      break;
 80047c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop

080047dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a46      	ldr	r2, [pc, #280]	@ (8004908 <TIM_Base_SetConfig+0x12c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d00f      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a43      	ldr	r2, [pc, #268]	@ (800490c <TIM_Base_SetConfig+0x130>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00b      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a42      	ldr	r2, [pc, #264]	@ (8004910 <TIM_Base_SetConfig+0x134>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a41      	ldr	r2, [pc, #260]	@ (8004914 <TIM_Base_SetConfig+0x138>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a40      	ldr	r2, [pc, #256]	@ (8004918 <TIM_Base_SetConfig+0x13c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d108      	bne.n	800482e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a35      	ldr	r2, [pc, #212]	@ (8004908 <TIM_Base_SetConfig+0x12c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01f      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a32      	ldr	r2, [pc, #200]	@ (800490c <TIM_Base_SetConfig+0x130>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a31      	ldr	r2, [pc, #196]	@ (8004910 <TIM_Base_SetConfig+0x134>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a30      	ldr	r2, [pc, #192]	@ (8004914 <TIM_Base_SetConfig+0x138>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2f      	ldr	r2, [pc, #188]	@ (8004918 <TIM_Base_SetConfig+0x13c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2e      	ldr	r2, [pc, #184]	@ (800491c <TIM_Base_SetConfig+0x140>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2d      	ldr	r2, [pc, #180]	@ (8004920 <TIM_Base_SetConfig+0x144>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2c      	ldr	r2, [pc, #176]	@ (8004924 <TIM_Base_SetConfig+0x148>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a16      	ldr	r2, [pc, #88]	@ (8004908 <TIM_Base_SetConfig+0x12c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a18      	ldr	r2, [pc, #96]	@ (8004918 <TIM_Base_SetConfig+0x13c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a17      	ldr	r2, [pc, #92]	@ (800491c <TIM_Base_SetConfig+0x140>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a16      	ldr	r2, [pc, #88]	@ (8004920 <TIM_Base_SetConfig+0x144>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a15      	ldr	r2, [pc, #84]	@ (8004924 <TIM_Base_SetConfig+0x148>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d103      	bne.n	80048dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d105      	bne.n	80048fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	611a      	str	r2, [r3, #16]
  }
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40010400 	.word	0x40010400
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800

08004928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f023 0201 	bic.w	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <TIM_OC1_SetConfig+0x108>)
 8004954:	4013      	ands	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 0302 	bic.w	r3, r3, #2
 8004970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a34 <TIM_OC1_SetConfig+0x10c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00f      	beq.n	80049a4 <TIM_OC1_SetConfig+0x7c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a2c      	ldr	r2, [pc, #176]	@ (8004a38 <TIM_OC1_SetConfig+0x110>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_OC1_SetConfig+0x7c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a2b      	ldr	r2, [pc, #172]	@ (8004a3c <TIM_OC1_SetConfig+0x114>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_OC1_SetConfig+0x7c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a2a      	ldr	r2, [pc, #168]	@ (8004a40 <TIM_OC1_SetConfig+0x118>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC1_SetConfig+0x7c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a29      	ldr	r2, [pc, #164]	@ (8004a44 <TIM_OC1_SetConfig+0x11c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10c      	bne.n	80049be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0308 	bic.w	r3, r3, #8
 80049aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0304 	bic.w	r3, r3, #4
 80049bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a34 <TIM_OC1_SetConfig+0x10c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00f      	beq.n	80049e6 <TIM_OC1_SetConfig+0xbe>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a38 <TIM_OC1_SetConfig+0x110>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <TIM_OC1_SetConfig+0xbe>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a3c <TIM_OC1_SetConfig+0x114>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d007      	beq.n	80049e6 <TIM_OC1_SetConfig+0xbe>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a19      	ldr	r2, [pc, #100]	@ (8004a40 <TIM_OC1_SetConfig+0x118>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_OC1_SetConfig+0xbe>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a18      	ldr	r2, [pc, #96]	@ (8004a44 <TIM_OC1_SetConfig+0x11c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d111      	bne.n	8004a0a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	621a      	str	r2, [r3, #32]
}
 8004a24:	bf00      	nop
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	fffeff8f 	.word	0xfffeff8f
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f023 0210 	bic.w	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4b34      	ldr	r3, [pc, #208]	@ (8004b44 <TIM_OC2_SetConfig+0xfc>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0320 	bic.w	r3, r3, #32
 8004a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a29      	ldr	r2, [pc, #164]	@ (8004b48 <TIM_OC2_SetConfig+0x100>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC2_SetConfig+0x68>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a28      	ldr	r2, [pc, #160]	@ (8004b4c <TIM_OC2_SetConfig+0x104>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10d      	bne.n	8004acc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	@ (8004b48 <TIM_OC2_SetConfig+0x100>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00f      	beq.n	8004af4 <TIM_OC2_SetConfig+0xac>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b4c <TIM_OC2_SetConfig+0x104>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <TIM_OC2_SetConfig+0xac>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a1c      	ldr	r2, [pc, #112]	@ (8004b50 <TIM_OC2_SetConfig+0x108>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d007      	beq.n	8004af4 <TIM_OC2_SetConfig+0xac>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b54 <TIM_OC2_SetConfig+0x10c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC2_SetConfig+0xac>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <TIM_OC2_SetConfig+0x110>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d113      	bne.n	8004b1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	feff8fff 	.word	0xfeff8fff
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <TIM_OC3_SetConfig+0xf8>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0303 	bic.w	r3, r3, #3
 8004b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a28      	ldr	r2, [pc, #160]	@ (8004c58 <TIM_OC3_SetConfig+0xfc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC3_SetConfig+0x66>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a27      	ldr	r2, [pc, #156]	@ (8004c5c <TIM_OC3_SetConfig+0x100>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d10d      	bne.n	8004bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <TIM_OC3_SetConfig+0xfc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_OC3_SetConfig+0xaa>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c5c <TIM_OC3_SetConfig+0x100>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_OC3_SetConfig+0xaa>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c60 <TIM_OC3_SetConfig+0x104>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_OC3_SetConfig+0xaa>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c64 <TIM_OC3_SetConfig+0x108>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_OC3_SetConfig+0xaa>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <TIM_OC3_SetConfig+0x10c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d113      	bne.n	8004c2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	621a      	str	r2, [r3, #32]
}
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	fffeff8f 	.word	0xfffeff8f
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40010400 	.word	0x40010400
 8004c60:	40014000 	.word	0x40014000
 8004c64:	40014400 	.word	0x40014400
 8004c68:	40014800 	.word	0x40014800

08004c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4b24      	ldr	r3, [pc, #144]	@ (8004d28 <TIM_OC4_SetConfig+0xbc>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a19      	ldr	r2, [pc, #100]	@ (8004d2c <TIM_OC4_SetConfig+0xc0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00f      	beq.n	8004cec <TIM_OC4_SetConfig+0x80>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a18      	ldr	r2, [pc, #96]	@ (8004d30 <TIM_OC4_SetConfig+0xc4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_OC4_SetConfig+0x80>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a17      	ldr	r2, [pc, #92]	@ (8004d34 <TIM_OC4_SetConfig+0xc8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_OC4_SetConfig+0x80>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a16      	ldr	r2, [pc, #88]	@ (8004d38 <TIM_OC4_SetConfig+0xcc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_OC4_SetConfig+0x80>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a15      	ldr	r2, [pc, #84]	@ (8004d3c <TIM_OC4_SetConfig+0xd0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d109      	bne.n	8004d00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	019b      	lsls	r3, r3, #6
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	feff8fff 	.word	0xfeff8fff
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40010400 	.word	0x40010400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800

08004d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4b21      	ldr	r3, [pc, #132]	@ (8004df0 <TIM_OC5_SetConfig+0xb0>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a18      	ldr	r2, [pc, #96]	@ (8004df4 <TIM_OC5_SetConfig+0xb4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00f      	beq.n	8004db6 <TIM_OC5_SetConfig+0x76>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a17      	ldr	r2, [pc, #92]	@ (8004df8 <TIM_OC5_SetConfig+0xb8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00b      	beq.n	8004db6 <TIM_OC5_SetConfig+0x76>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a16      	ldr	r2, [pc, #88]	@ (8004dfc <TIM_OC5_SetConfig+0xbc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d007      	beq.n	8004db6 <TIM_OC5_SetConfig+0x76>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a15      	ldr	r2, [pc, #84]	@ (8004e00 <TIM_OC5_SetConfig+0xc0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_OC5_SetConfig+0x76>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a14      	ldr	r2, [pc, #80]	@ (8004e04 <TIM_OC5_SetConfig+0xc4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d109      	bne.n	8004dca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	fffeff8f 	.word	0xfffeff8f
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40010400 	.word	0x40010400
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800

08004e08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4b22      	ldr	r3, [pc, #136]	@ (8004ebc <TIM_OC6_SetConfig+0xb4>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	051b      	lsls	r3, r3, #20
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <TIM_OC6_SetConfig+0xb8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00f      	beq.n	8004e80 <TIM_OC6_SetConfig+0x78>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a18      	ldr	r2, [pc, #96]	@ (8004ec4 <TIM_OC6_SetConfig+0xbc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00b      	beq.n	8004e80 <TIM_OC6_SetConfig+0x78>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a17      	ldr	r2, [pc, #92]	@ (8004ec8 <TIM_OC6_SetConfig+0xc0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d007      	beq.n	8004e80 <TIM_OC6_SetConfig+0x78>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a16      	ldr	r2, [pc, #88]	@ (8004ecc <TIM_OC6_SetConfig+0xc4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_OC6_SetConfig+0x78>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a15      	ldr	r2, [pc, #84]	@ (8004ed0 <TIM_OC6_SetConfig+0xc8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d109      	bne.n	8004e94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	feff8fff 	.word	0xfeff8fff
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40010400 	.word	0x40010400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e042      	b.n	8004f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fb ffef 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2224      	movs	r2, #36	@ 0x24
 8004f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fd90 	bl	8005a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f825 	bl	8004f74 <UART_SetConfig>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e01b      	b.n	8004f6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fe0f 	bl	8005b88 <UART_CheckIdleState>
 8004f6a:	4603      	mov	r3, r0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f78:	b092      	sub	sp, #72	@ 0x48
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4bbe      	ldr	r3, [pc, #760]	@ (800529c <UART_SetConfig+0x328>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4ab3      	ldr	r2, [pc, #716]	@ (80052a0 <UART_SetConfig+0x32c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	4baf      	ldr	r3, [pc, #700]	@ (80052a4 <UART_SetConfig+0x330>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	f023 010f 	bic.w	r1, r3, #15
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4aa6      	ldr	r2, [pc, #664]	@ (80052a8 <UART_SetConfig+0x334>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d177      	bne.n	8005104 <UART_SetConfig+0x190>
 8005014:	4ba5      	ldr	r3, [pc, #660]	@ (80052ac <UART_SetConfig+0x338>)
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800501c:	2b28      	cmp	r3, #40	@ 0x28
 800501e:	d86d      	bhi.n	80050fc <UART_SetConfig+0x188>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <UART_SetConfig+0xb4>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	080050cd 	.word	0x080050cd
 800502c:	080050fd 	.word	0x080050fd
 8005030:	080050fd 	.word	0x080050fd
 8005034:	080050fd 	.word	0x080050fd
 8005038:	080050fd 	.word	0x080050fd
 800503c:	080050fd 	.word	0x080050fd
 8005040:	080050fd 	.word	0x080050fd
 8005044:	080050fd 	.word	0x080050fd
 8005048:	080050d5 	.word	0x080050d5
 800504c:	080050fd 	.word	0x080050fd
 8005050:	080050fd 	.word	0x080050fd
 8005054:	080050fd 	.word	0x080050fd
 8005058:	080050fd 	.word	0x080050fd
 800505c:	080050fd 	.word	0x080050fd
 8005060:	080050fd 	.word	0x080050fd
 8005064:	080050fd 	.word	0x080050fd
 8005068:	080050dd 	.word	0x080050dd
 800506c:	080050fd 	.word	0x080050fd
 8005070:	080050fd 	.word	0x080050fd
 8005074:	080050fd 	.word	0x080050fd
 8005078:	080050fd 	.word	0x080050fd
 800507c:	080050fd 	.word	0x080050fd
 8005080:	080050fd 	.word	0x080050fd
 8005084:	080050fd 	.word	0x080050fd
 8005088:	080050e5 	.word	0x080050e5
 800508c:	080050fd 	.word	0x080050fd
 8005090:	080050fd 	.word	0x080050fd
 8005094:	080050fd 	.word	0x080050fd
 8005098:	080050fd 	.word	0x080050fd
 800509c:	080050fd 	.word	0x080050fd
 80050a0:	080050fd 	.word	0x080050fd
 80050a4:	080050fd 	.word	0x080050fd
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	080050fd 	.word	0x080050fd
 80050b4:	080050fd 	.word	0x080050fd
 80050b8:	080050fd 	.word	0x080050fd
 80050bc:	080050fd 	.word	0x080050fd
 80050c0:	080050fd 	.word	0x080050fd
 80050c4:	080050fd 	.word	0x080050fd
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e222      	b.n	800551a <UART_SetConfig+0x5a6>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e21e      	b.n	800551a <UART_SetConfig+0x5a6>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e21a      	b.n	800551a <UART_SetConfig+0x5a6>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e216      	b.n	800551a <UART_SetConfig+0x5a6>
 80050ec:	2320      	movs	r3, #32
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f2:	e212      	b.n	800551a <UART_SetConfig+0x5a6>
 80050f4:	2340      	movs	r3, #64	@ 0x40
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fa:	e20e      	b.n	800551a <UART_SetConfig+0x5a6>
 80050fc:	2380      	movs	r3, #128	@ 0x80
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005102:	e20a      	b.n	800551a <UART_SetConfig+0x5a6>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a69      	ldr	r2, [pc, #420]	@ (80052b0 <UART_SetConfig+0x33c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d130      	bne.n	8005170 <UART_SetConfig+0x1fc>
 800510e:	4b67      	ldr	r3, [pc, #412]	@ (80052ac <UART_SetConfig+0x338>)
 8005110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b05      	cmp	r3, #5
 8005118:	d826      	bhi.n	8005168 <UART_SetConfig+0x1f4>
 800511a:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <UART_SetConfig+0x1ac>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005139 	.word	0x08005139
 8005124:	08005141 	.word	0x08005141
 8005128:	08005149 	.word	0x08005149
 800512c:	08005151 	.word	0x08005151
 8005130:	08005159 	.word	0x08005159
 8005134:	08005161 	.word	0x08005161
 8005138:	2300      	movs	r3, #0
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e1ec      	b.n	800551a <UART_SetConfig+0x5a6>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005146:	e1e8      	b.n	800551a <UART_SetConfig+0x5a6>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514e:	e1e4      	b.n	800551a <UART_SetConfig+0x5a6>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005156:	e1e0      	b.n	800551a <UART_SetConfig+0x5a6>
 8005158:	2320      	movs	r3, #32
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515e:	e1dc      	b.n	800551a <UART_SetConfig+0x5a6>
 8005160:	2340      	movs	r3, #64	@ 0x40
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005166:	e1d8      	b.n	800551a <UART_SetConfig+0x5a6>
 8005168:	2380      	movs	r3, #128	@ 0x80
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516e:	e1d4      	b.n	800551a <UART_SetConfig+0x5a6>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a4f      	ldr	r2, [pc, #316]	@ (80052b4 <UART_SetConfig+0x340>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d130      	bne.n	80051dc <UART_SetConfig+0x268>
 800517a:	4b4c      	ldr	r3, [pc, #304]	@ (80052ac <UART_SetConfig+0x338>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b05      	cmp	r3, #5
 8005184:	d826      	bhi.n	80051d4 <UART_SetConfig+0x260>
 8005186:	a201      	add	r2, pc, #4	@ (adr r2, 800518c <UART_SetConfig+0x218>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051a5 	.word	0x080051a5
 8005190:	080051ad 	.word	0x080051ad
 8005194:	080051b5 	.word	0x080051b5
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051aa:	e1b6      	b.n	800551a <UART_SetConfig+0x5a6>
 80051ac:	2304      	movs	r3, #4
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b2:	e1b2      	b.n	800551a <UART_SetConfig+0x5a6>
 80051b4:	2308      	movs	r3, #8
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ba:	e1ae      	b.n	800551a <UART_SetConfig+0x5a6>
 80051bc:	2310      	movs	r3, #16
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c2:	e1aa      	b.n	800551a <UART_SetConfig+0x5a6>
 80051c4:	2320      	movs	r3, #32
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ca:	e1a6      	b.n	800551a <UART_SetConfig+0x5a6>
 80051cc:	2340      	movs	r3, #64	@ 0x40
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d2:	e1a2      	b.n	800551a <UART_SetConfig+0x5a6>
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051da:	e19e      	b.n	800551a <UART_SetConfig+0x5a6>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a35      	ldr	r2, [pc, #212]	@ (80052b8 <UART_SetConfig+0x344>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d130      	bne.n	8005248 <UART_SetConfig+0x2d4>
 80051e6:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <UART_SetConfig+0x338>)
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	d826      	bhi.n	8005240 <UART_SetConfig+0x2cc>
 80051f2:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <UART_SetConfig+0x284>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005211 	.word	0x08005211
 80051fc:	08005219 	.word	0x08005219
 8005200:	08005221 	.word	0x08005221
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e180      	b.n	800551a <UART_SetConfig+0x5a6>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521e:	e17c      	b.n	800551a <UART_SetConfig+0x5a6>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005226:	e178      	b.n	800551a <UART_SetConfig+0x5a6>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522e:	e174      	b.n	800551a <UART_SetConfig+0x5a6>
 8005230:	2320      	movs	r3, #32
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005236:	e170      	b.n	800551a <UART_SetConfig+0x5a6>
 8005238:	2340      	movs	r3, #64	@ 0x40
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523e:	e16c      	b.n	800551a <UART_SetConfig+0x5a6>
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005246:	e168      	b.n	800551a <UART_SetConfig+0x5a6>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <UART_SetConfig+0x348>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d142      	bne.n	80052d8 <UART_SetConfig+0x364>
 8005252:	4b16      	ldr	r3, [pc, #88]	@ (80052ac <UART_SetConfig+0x338>)
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b05      	cmp	r3, #5
 800525c:	d838      	bhi.n	80052d0 <UART_SetConfig+0x35c>
 800525e:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <UART_SetConfig+0x2f0>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	0800527d 	.word	0x0800527d
 8005268:	08005285 	.word	0x08005285
 800526c:	0800528d 	.word	0x0800528d
 8005270:	08005295 	.word	0x08005295
 8005274:	080052c1 	.word	0x080052c1
 8005278:	080052c9 	.word	0x080052c9
 800527c:	2300      	movs	r3, #0
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005282:	e14a      	b.n	800551a <UART_SetConfig+0x5a6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528a:	e146      	b.n	800551a <UART_SetConfig+0x5a6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005292:	e142      	b.n	800551a <UART_SetConfig+0x5a6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529a:	e13e      	b.n	800551a <UART_SetConfig+0x5a6>
 800529c:	cfff69f3 	.word	0xcfff69f3
 80052a0:	58000c00 	.word	0x58000c00
 80052a4:	11fff4ff 	.word	0x11fff4ff
 80052a8:	40011000 	.word	0x40011000
 80052ac:	58024400 	.word	0x58024400
 80052b0:	40004400 	.word	0x40004400
 80052b4:	40004800 	.word	0x40004800
 80052b8:	40004c00 	.word	0x40004c00
 80052bc:	40005000 	.word	0x40005000
 80052c0:	2320      	movs	r3, #32
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e128      	b.n	800551a <UART_SetConfig+0x5a6>
 80052c8:	2340      	movs	r3, #64	@ 0x40
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e124      	b.n	800551a <UART_SetConfig+0x5a6>
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e120      	b.n	800551a <UART_SetConfig+0x5a6>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4acb      	ldr	r2, [pc, #812]	@ (800560c <UART_SetConfig+0x698>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d176      	bne.n	80053d0 <UART_SetConfig+0x45c>
 80052e2:	4bcb      	ldr	r3, [pc, #812]	@ (8005610 <UART_SetConfig+0x69c>)
 80052e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052ea:	2b28      	cmp	r3, #40	@ 0x28
 80052ec:	d86c      	bhi.n	80053c8 <UART_SetConfig+0x454>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0x380>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005399 	.word	0x08005399
 80052f8:	080053c9 	.word	0x080053c9
 80052fc:	080053c9 	.word	0x080053c9
 8005300:	080053c9 	.word	0x080053c9
 8005304:	080053c9 	.word	0x080053c9
 8005308:	080053c9 	.word	0x080053c9
 800530c:	080053c9 	.word	0x080053c9
 8005310:	080053c9 	.word	0x080053c9
 8005314:	080053a1 	.word	0x080053a1
 8005318:	080053c9 	.word	0x080053c9
 800531c:	080053c9 	.word	0x080053c9
 8005320:	080053c9 	.word	0x080053c9
 8005324:	080053c9 	.word	0x080053c9
 8005328:	080053c9 	.word	0x080053c9
 800532c:	080053c9 	.word	0x080053c9
 8005330:	080053c9 	.word	0x080053c9
 8005334:	080053a9 	.word	0x080053a9
 8005338:	080053c9 	.word	0x080053c9
 800533c:	080053c9 	.word	0x080053c9
 8005340:	080053c9 	.word	0x080053c9
 8005344:	080053c9 	.word	0x080053c9
 8005348:	080053c9 	.word	0x080053c9
 800534c:	080053c9 	.word	0x080053c9
 8005350:	080053c9 	.word	0x080053c9
 8005354:	080053b1 	.word	0x080053b1
 8005358:	080053c9 	.word	0x080053c9
 800535c:	080053c9 	.word	0x080053c9
 8005360:	080053c9 	.word	0x080053c9
 8005364:	080053c9 	.word	0x080053c9
 8005368:	080053c9 	.word	0x080053c9
 800536c:	080053c9 	.word	0x080053c9
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053b9 	.word	0x080053b9
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053c9 	.word	0x080053c9
 8005384:	080053c9 	.word	0x080053c9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053c9 	.word	0x080053c9
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	2301      	movs	r3, #1
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e0bc      	b.n	800551a <UART_SetConfig+0x5a6>
 80053a0:	2304      	movs	r3, #4
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e0b8      	b.n	800551a <UART_SetConfig+0x5a6>
 80053a8:	2308      	movs	r3, #8
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e0b4      	b.n	800551a <UART_SetConfig+0x5a6>
 80053b0:	2310      	movs	r3, #16
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e0b0      	b.n	800551a <UART_SetConfig+0x5a6>
 80053b8:	2320      	movs	r3, #32
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e0ac      	b.n	800551a <UART_SetConfig+0x5a6>
 80053c0:	2340      	movs	r3, #64	@ 0x40
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e0a8      	b.n	800551a <UART_SetConfig+0x5a6>
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e0a4      	b.n	800551a <UART_SetConfig+0x5a6>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a8f      	ldr	r2, [pc, #572]	@ (8005614 <UART_SetConfig+0x6a0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d130      	bne.n	800543c <UART_SetConfig+0x4c8>
 80053da:	4b8d      	ldr	r3, [pc, #564]	@ (8005610 <UART_SetConfig+0x69c>)
 80053dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d826      	bhi.n	8005434 <UART_SetConfig+0x4c0>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <UART_SetConfig+0x478>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005405 	.word	0x08005405
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	08005415 	.word	0x08005415
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	2300      	movs	r3, #0
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e086      	b.n	800551a <UART_SetConfig+0x5a6>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e082      	b.n	800551a <UART_SetConfig+0x5a6>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e07e      	b.n	800551a <UART_SetConfig+0x5a6>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e07a      	b.n	800551a <UART_SetConfig+0x5a6>
 8005424:	2320      	movs	r3, #32
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e076      	b.n	800551a <UART_SetConfig+0x5a6>
 800542c:	2340      	movs	r3, #64	@ 0x40
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e072      	b.n	800551a <UART_SetConfig+0x5a6>
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543a:	e06e      	b.n	800551a <UART_SetConfig+0x5a6>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a75      	ldr	r2, [pc, #468]	@ (8005618 <UART_SetConfig+0x6a4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d130      	bne.n	80054a8 <UART_SetConfig+0x534>
 8005446:	4b72      	ldr	r3, [pc, #456]	@ (8005610 <UART_SetConfig+0x69c>)
 8005448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b05      	cmp	r3, #5
 8005450:	d826      	bhi.n	80054a0 <UART_SetConfig+0x52c>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <UART_SetConfig+0x4e4>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	08005471 	.word	0x08005471
 800545c:	08005479 	.word	0x08005479
 8005460:	08005481 	.word	0x08005481
 8005464:	08005489 	.word	0x08005489
 8005468:	08005491 	.word	0x08005491
 800546c:	08005499 	.word	0x08005499
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e050      	b.n	800551a <UART_SetConfig+0x5a6>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e04c      	b.n	800551a <UART_SetConfig+0x5a6>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e048      	b.n	800551a <UART_SetConfig+0x5a6>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e044      	b.n	800551a <UART_SetConfig+0x5a6>
 8005490:	2320      	movs	r3, #32
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005496:	e040      	b.n	800551a <UART_SetConfig+0x5a6>
 8005498:	2340      	movs	r3, #64	@ 0x40
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549e:	e03c      	b.n	800551a <UART_SetConfig+0x5a6>
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a6:	e038      	b.n	800551a <UART_SetConfig+0x5a6>
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5b      	ldr	r2, [pc, #364]	@ (800561c <UART_SetConfig+0x6a8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d130      	bne.n	8005514 <UART_SetConfig+0x5a0>
 80054b2:	4b57      	ldr	r3, [pc, #348]	@ (8005610 <UART_SetConfig+0x69c>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d826      	bhi.n	800550c <UART_SetConfig+0x598>
 80054be:	a201      	add	r2, pc, #4	@ (adr r2, 80054c4 <UART_SetConfig+0x550>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054dd 	.word	0x080054dd
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	080054ed 	.word	0x080054ed
 80054d0:	080054f5 	.word	0x080054f5
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	08005505 	.word	0x08005505
 80054dc:	2302      	movs	r3, #2
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e01a      	b.n	800551a <UART_SetConfig+0x5a6>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ea:	e016      	b.n	800551a <UART_SetConfig+0x5a6>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e012      	b.n	800551a <UART_SetConfig+0x5a6>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fa:	e00e      	b.n	800551a <UART_SetConfig+0x5a6>
 80054fc:	2320      	movs	r3, #32
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005502:	e00a      	b.n	800551a <UART_SetConfig+0x5a6>
 8005504:	2340      	movs	r3, #64	@ 0x40
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550a:	e006      	b.n	800551a <UART_SetConfig+0x5a6>
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005512:	e002      	b.n	800551a <UART_SetConfig+0x5a6>
 8005514:	2380      	movs	r3, #128	@ 0x80
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a3f      	ldr	r2, [pc, #252]	@ (800561c <UART_SetConfig+0x6a8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	f040 80f8 	bne.w	8005716 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005526:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800552a:	2b20      	cmp	r3, #32
 800552c:	dc46      	bgt.n	80055bc <UART_SetConfig+0x648>
 800552e:	2b02      	cmp	r3, #2
 8005530:	f2c0 8082 	blt.w	8005638 <UART_SetConfig+0x6c4>
 8005534:	3b02      	subs	r3, #2
 8005536:	2b1e      	cmp	r3, #30
 8005538:	d87e      	bhi.n	8005638 <UART_SetConfig+0x6c4>
 800553a:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <UART_SetConfig+0x5cc>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	080055c3 	.word	0x080055c3
 8005544:	08005639 	.word	0x08005639
 8005548:	080055cb 	.word	0x080055cb
 800554c:	08005639 	.word	0x08005639
 8005550:	08005639 	.word	0x08005639
 8005554:	08005639 	.word	0x08005639
 8005558:	080055db 	.word	0x080055db
 800555c:	08005639 	.word	0x08005639
 8005560:	08005639 	.word	0x08005639
 8005564:	08005639 	.word	0x08005639
 8005568:	08005639 	.word	0x08005639
 800556c:	08005639 	.word	0x08005639
 8005570:	08005639 	.word	0x08005639
 8005574:	08005639 	.word	0x08005639
 8005578:	080055eb 	.word	0x080055eb
 800557c:	08005639 	.word	0x08005639
 8005580:	08005639 	.word	0x08005639
 8005584:	08005639 	.word	0x08005639
 8005588:	08005639 	.word	0x08005639
 800558c:	08005639 	.word	0x08005639
 8005590:	08005639 	.word	0x08005639
 8005594:	08005639 	.word	0x08005639
 8005598:	08005639 	.word	0x08005639
 800559c:	08005639 	.word	0x08005639
 80055a0:	08005639 	.word	0x08005639
 80055a4:	08005639 	.word	0x08005639
 80055a8:	08005639 	.word	0x08005639
 80055ac:	08005639 	.word	0x08005639
 80055b0:	08005639 	.word	0x08005639
 80055b4:	08005639 	.word	0x08005639
 80055b8:	0800562b 	.word	0x0800562b
 80055bc:	2b40      	cmp	r3, #64	@ 0x40
 80055be:	d037      	beq.n	8005630 <UART_SetConfig+0x6bc>
 80055c0:	e03a      	b.n	8005638 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055c2:	f7fe fb1d 	bl	8003c00 <HAL_RCCEx_GetD3PCLK1Freq>
 80055c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055c8:	e03c      	b.n	8005644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fb2c 	bl	8003c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055d8:	e034      	b.n	8005644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055da:	f107 0318 	add.w	r3, r7, #24
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe fc78 	bl	8003ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055e8:	e02c      	b.n	8005644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ea:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <UART_SetConfig+0x69c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055f6:	4b06      	ldr	r3, [pc, #24]	@ (8005610 <UART_SetConfig+0x69c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	08db      	lsrs	r3, r3, #3
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	4a07      	ldr	r2, [pc, #28]	@ (8005620 <UART_SetConfig+0x6ac>)
 8005602:	fa22 f303 	lsr.w	r3, r2, r3
 8005606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005608:	e01c      	b.n	8005644 <UART_SetConfig+0x6d0>
 800560a:	bf00      	nop
 800560c:	40011400 	.word	0x40011400
 8005610:	58024400 	.word	0x58024400
 8005614:	40007800 	.word	0x40007800
 8005618:	40007c00 	.word	0x40007c00
 800561c:	58000c00 	.word	0x58000c00
 8005620:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005624:	4b9d      	ldr	r3, [pc, #628]	@ (800589c <UART_SetConfig+0x928>)
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005628:	e00c      	b.n	8005644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800562a:	4b9d      	ldr	r3, [pc, #628]	@ (80058a0 <UART_SetConfig+0x92c>)
 800562c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800562e:	e009      	b.n	8005644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005630:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005636:	e005      	b.n	8005644 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005642:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 81de 	beq.w	8005a08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	4a94      	ldr	r2, [pc, #592]	@ (80058a4 <UART_SetConfig+0x930>)
 8005652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005656:	461a      	mov	r2, r3
 8005658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565a:	fbb3 f3f2 	udiv	r3, r3, r2
 800565e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800566c:	429a      	cmp	r2, r3
 800566e:	d305      	bcc.n	800567c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005678:	429a      	cmp	r2, r3
 800567a:	d903      	bls.n	8005684 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005682:	e1c1      	b.n	8005a08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005686:	2200      	movs	r2, #0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	60fa      	str	r2, [r7, #12]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	4a84      	ldr	r2, [pc, #528]	@ (80058a4 <UART_SetConfig+0x930>)
 8005692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005696:	b29b      	uxth	r3, r3
 8005698:	2200      	movs	r2, #0
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056a6:	f7fa fe17 	bl	80002d8 <__aeabi_uldivmod>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	020b      	lsls	r3, r1, #8
 80056bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056c0:	0202      	lsls	r2, r0, #8
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	6849      	ldr	r1, [r1, #4]
 80056c6:	0849      	lsrs	r1, r1, #1
 80056c8:	2000      	movs	r0, #0
 80056ca:	460c      	mov	r4, r1
 80056cc:	4605      	mov	r5, r0
 80056ce:	eb12 0804 	adds.w	r8, r2, r4
 80056d2:	eb43 0905 	adc.w	r9, r3, r5
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	469a      	mov	sl, r3
 80056de:	4693      	mov	fp, r2
 80056e0:	4652      	mov	r2, sl
 80056e2:	465b      	mov	r3, fp
 80056e4:	4640      	mov	r0, r8
 80056e6:	4649      	mov	r1, r9
 80056e8:	f7fa fdf6 	bl	80002d8 <__aeabi_uldivmod>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4613      	mov	r3, r2
 80056f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056fa:	d308      	bcc.n	800570e <UART_SetConfig+0x79a>
 80056fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005702:	d204      	bcs.n	800570e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	e17c      	b.n	8005a08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005714:	e178      	b.n	8005a08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571e:	f040 80c5 	bne.w	80058ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005722:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005726:	2b20      	cmp	r3, #32
 8005728:	dc48      	bgt.n	80057bc <UART_SetConfig+0x848>
 800572a:	2b00      	cmp	r3, #0
 800572c:	db7b      	blt.n	8005826 <UART_SetConfig+0x8b2>
 800572e:	2b20      	cmp	r3, #32
 8005730:	d879      	bhi.n	8005826 <UART_SetConfig+0x8b2>
 8005732:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <UART_SetConfig+0x7c4>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	080057c3 	.word	0x080057c3
 800573c:	080057cb 	.word	0x080057cb
 8005740:	08005827 	.word	0x08005827
 8005744:	08005827 	.word	0x08005827
 8005748:	080057d3 	.word	0x080057d3
 800574c:	08005827 	.word	0x08005827
 8005750:	08005827 	.word	0x08005827
 8005754:	08005827 	.word	0x08005827
 8005758:	080057e3 	.word	0x080057e3
 800575c:	08005827 	.word	0x08005827
 8005760:	08005827 	.word	0x08005827
 8005764:	08005827 	.word	0x08005827
 8005768:	08005827 	.word	0x08005827
 800576c:	08005827 	.word	0x08005827
 8005770:	08005827 	.word	0x08005827
 8005774:	08005827 	.word	0x08005827
 8005778:	080057f3 	.word	0x080057f3
 800577c:	08005827 	.word	0x08005827
 8005780:	08005827 	.word	0x08005827
 8005784:	08005827 	.word	0x08005827
 8005788:	08005827 	.word	0x08005827
 800578c:	08005827 	.word	0x08005827
 8005790:	08005827 	.word	0x08005827
 8005794:	08005827 	.word	0x08005827
 8005798:	08005827 	.word	0x08005827
 800579c:	08005827 	.word	0x08005827
 80057a0:	08005827 	.word	0x08005827
 80057a4:	08005827 	.word	0x08005827
 80057a8:	08005827 	.word	0x08005827
 80057ac:	08005827 	.word	0x08005827
 80057b0:	08005827 	.word	0x08005827
 80057b4:	08005827 	.word	0x08005827
 80057b8:	08005819 	.word	0x08005819
 80057bc:	2b40      	cmp	r3, #64	@ 0x40
 80057be:	d02e      	beq.n	800581e <UART_SetConfig+0x8aa>
 80057c0:	e031      	b.n	8005826 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7fc ffe7 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 80057c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057c8:	e033      	b.n	8005832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ca:	f7fc fff9 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 80057ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057d0:	e02f      	b.n	8005832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fa28 	bl	8003c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e0:	e027      	b.n	8005832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e2:	f107 0318 	add.w	r3, r7, #24
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fb74 	bl	8003ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f0:	e01f      	b.n	8005832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057f2:	4b2d      	ldr	r3, [pc, #180]	@ (80058a8 <UART_SetConfig+0x934>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057fe:	4b2a      	ldr	r3, [pc, #168]	@ (80058a8 <UART_SetConfig+0x934>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	4a24      	ldr	r2, [pc, #144]	@ (800589c <UART_SetConfig+0x928>)
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005810:	e00f      	b.n	8005832 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005812:	4b22      	ldr	r3, [pc, #136]	@ (800589c <UART_SetConfig+0x928>)
 8005814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005816:	e00c      	b.n	8005832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005818:	4b21      	ldr	r3, [pc, #132]	@ (80058a0 <UART_SetConfig+0x92c>)
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581c:	e009      	b.n	8005832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005824:	e005      	b.n	8005832 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80e7 	beq.w	8005a08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	4a19      	ldr	r2, [pc, #100]	@ (80058a4 <UART_SetConfig+0x930>)
 8005840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005844:	461a      	mov	r2, r3
 8005846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005848:	fbb3 f3f2 	udiv	r3, r3, r2
 800584c:	005a      	lsls	r2, r3, #1
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	441a      	add	r2, r3
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005862:	2b0f      	cmp	r3, #15
 8005864:	d916      	bls.n	8005894 <UART_SetConfig+0x920>
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586c:	d212      	bcs.n	8005894 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	b29b      	uxth	r3, r3
 8005872:	f023 030f 	bic.w	r3, r3, #15
 8005876:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	b29b      	uxth	r3, r3
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	b29a      	uxth	r2, r3
 8005884:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005886:	4313      	orrs	r3, r2
 8005888:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	e0b9      	b.n	8005a08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800589a:	e0b5      	b.n	8005a08 <UART_SetConfig+0xa94>
 800589c:	03d09000 	.word	0x03d09000
 80058a0:	003d0900 	.word	0x003d0900
 80058a4:	0800610c 	.word	0x0800610c
 80058a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	dc49      	bgt.n	8005948 <UART_SetConfig+0x9d4>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	db7c      	blt.n	80059b2 <UART_SetConfig+0xa3e>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d87a      	bhi.n	80059b2 <UART_SetConfig+0xa3e>
 80058bc:	a201      	add	r2, pc, #4	@ (adr r2, 80058c4 <UART_SetConfig+0x950>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	0800594f 	.word	0x0800594f
 80058c8:	08005957 	.word	0x08005957
 80058cc:	080059b3 	.word	0x080059b3
 80058d0:	080059b3 	.word	0x080059b3
 80058d4:	0800595f 	.word	0x0800595f
 80058d8:	080059b3 	.word	0x080059b3
 80058dc:	080059b3 	.word	0x080059b3
 80058e0:	080059b3 	.word	0x080059b3
 80058e4:	0800596f 	.word	0x0800596f
 80058e8:	080059b3 	.word	0x080059b3
 80058ec:	080059b3 	.word	0x080059b3
 80058f0:	080059b3 	.word	0x080059b3
 80058f4:	080059b3 	.word	0x080059b3
 80058f8:	080059b3 	.word	0x080059b3
 80058fc:	080059b3 	.word	0x080059b3
 8005900:	080059b3 	.word	0x080059b3
 8005904:	0800597f 	.word	0x0800597f
 8005908:	080059b3 	.word	0x080059b3
 800590c:	080059b3 	.word	0x080059b3
 8005910:	080059b3 	.word	0x080059b3
 8005914:	080059b3 	.word	0x080059b3
 8005918:	080059b3 	.word	0x080059b3
 800591c:	080059b3 	.word	0x080059b3
 8005920:	080059b3 	.word	0x080059b3
 8005924:	080059b3 	.word	0x080059b3
 8005928:	080059b3 	.word	0x080059b3
 800592c:	080059b3 	.word	0x080059b3
 8005930:	080059b3 	.word	0x080059b3
 8005934:	080059b3 	.word	0x080059b3
 8005938:	080059b3 	.word	0x080059b3
 800593c:	080059b3 	.word	0x080059b3
 8005940:	080059b3 	.word	0x080059b3
 8005944:	080059a5 	.word	0x080059a5
 8005948:	2b40      	cmp	r3, #64	@ 0x40
 800594a:	d02e      	beq.n	80059aa <UART_SetConfig+0xa36>
 800594c:	e031      	b.n	80059b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594e:	f7fc ff21 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8005952:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005954:	e033      	b.n	80059be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005956:	f7fc ff33 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 800595a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800595c:	e02f      	b.n	80059be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe f962 	bl	8003c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800596c:	e027      	b.n	80059be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800596e:	f107 0318 	add.w	r3, r7, #24
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe faae 	bl	8003ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800597c:	e01f      	b.n	80059be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a34 <UART_SetConfig+0xac0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800598a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a34 <UART_SetConfig+0xac0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	4a28      	ldr	r2, [pc, #160]	@ (8005a38 <UART_SetConfig+0xac4>)
 8005996:	fa22 f303 	lsr.w	r3, r2, r3
 800599a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800599c:	e00f      	b.n	80059be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800599e:	4b26      	ldr	r3, [pc, #152]	@ (8005a38 <UART_SetConfig+0xac4>)
 80059a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a2:	e00c      	b.n	80059be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059a4:	4b25      	ldr	r3, [pc, #148]	@ (8005a3c <UART_SetConfig+0xac8>)
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a8:	e009      	b.n	80059be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b0:	e005      	b.n	80059be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059bc:	bf00      	nop
    }

    if (pclk != 0U)
 80059be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d021      	beq.n	8005a08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a40 <UART_SetConfig+0xacc>)
 80059ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ce:	461a      	mov	r2, r3
 80059d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	441a      	add	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	2b0f      	cmp	r3, #15
 80059ec:	d909      	bls.n	8005a02 <UART_SetConfig+0xa8e>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f4:	d205      	bcs.n	8005a02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	e002      	b.n	8005a08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2200      	movs	r2, #0
 8005a22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a24:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3748      	adds	r7, #72	@ 0x48
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400
 8005a38:	03d09000 	.word	0x03d09000
 8005a3c:	003d0900 	.word	0x003d0900
 8005a40:	0800610c 	.word	0x0800610c

08005a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01a      	beq.n	8005b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b42:	d10a      	bne.n	8005b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b098      	sub	sp, #96	@ 0x60
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b98:	f7fb faea 	bl	8001170 <HAL_GetTick>
 8005b9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d12f      	bne.n	8005c0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f88e 	bl	8005cdc <UART_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d022      	beq.n	8005c0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e6      	bne.n	8005bc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e063      	b.n	8005cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d149      	bne.n	8005cae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c22:	2200      	movs	r2, #0
 8005c24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f857 	bl	8005cdc <UART_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d03c      	beq.n	8005cae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	623b      	str	r3, [r7, #32]
   return(result);
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c86:	61fa      	str	r2, [r7, #28]
 8005c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	69b9      	ldr	r1, [r7, #24]
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	617b      	str	r3, [r7, #20]
   return(result);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e012      	b.n	8005cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3758      	adds	r7, #88	@ 0x58
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cec:	e04f      	b.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d04b      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf6:	f7fb fa3b 	bl	8001170 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e04e      	b.n	8005dae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d037      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b80      	cmp	r3, #128	@ 0x80
 8005d22:	d034      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b40      	cmp	r3, #64	@ 0x40
 8005d28:	d031      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d110      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f839 	bl	8005db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2208      	movs	r2, #8
 8005d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e029      	b.n	8005dae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d68:	d111      	bne.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f81f 	bl	8005db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e00f      	b.n	8005dae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4013      	ands	r3, r2
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	bf0c      	ite	eq
 8005d9e:	2301      	moveq	r3, #1
 8005da0:	2300      	movne	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d0a0      	beq.n	8005cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b095      	sub	sp, #84	@ 0x54
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005de4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e6      	bne.n	8005dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	4b1e      	ldr	r3, [pc, #120]	@ (8005e80 <UART_EndRxTransfer+0xc8>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d118      	bne.n	8005e60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f023 0310 	bic.w	r3, r3, #16
 8005e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6979      	ldr	r1, [r7, #20]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e6      	bne.n	8005e2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e74:	bf00      	nop
 8005e76:	3754      	adds	r7, #84	@ 0x54
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	effffffe 	.word	0xeffffffe

08005e84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_UARTEx_DisableFifoMode+0x16>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e027      	b.n	8005eea <HAL_UARTEx_DisableFifoMode+0x66>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2224      	movs	r2, #36	@ 0x24
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ec8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e02d      	b.n	8005f6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2224      	movs	r2, #36	@ 0x24
 8005f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f850 	bl	8005ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e02d      	b.n	8005fe6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2224      	movs	r2, #36	@ 0x24
 8005f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f812 	bl	8005ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d108      	bne.n	8006012 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006010:	e031      	b.n	8006076 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006012:	2310      	movs	r3, #16
 8006014:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006016:	2310      	movs	r3, #16
 8006018:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	0e5b      	lsrs	r3, r3, #25
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	0f5b      	lsrs	r3, r3, #29
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	7b3a      	ldrb	r2, [r7, #12]
 800603e:	4911      	ldr	r1, [pc, #68]	@ (8006084 <UARTEx_SetNbDataToProcess+0x94>)
 8006040:	5c8a      	ldrb	r2, [r1, r2]
 8006042:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006046:	7b3a      	ldrb	r2, [r7, #12]
 8006048:	490f      	ldr	r1, [pc, #60]	@ (8006088 <UARTEx_SetNbDataToProcess+0x98>)
 800604a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800604c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006050:	b29a      	uxth	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	7b7a      	ldrb	r2, [r7, #13]
 800605c:	4909      	ldr	r1, [pc, #36]	@ (8006084 <UARTEx_SetNbDataToProcess+0x94>)
 800605e:	5c8a      	ldrb	r2, [r1, r2]
 8006060:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006064:	7b7a      	ldrb	r2, [r7, #13]
 8006066:	4908      	ldr	r1, [pc, #32]	@ (8006088 <UARTEx_SetNbDataToProcess+0x98>)
 8006068:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800606a:	fb93 f3f2 	sdiv	r3, r3, r2
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	08006124 	.word	0x08006124
 8006088:	0800612c 	.word	0x0800612c

0800608c <memset>:
 800608c:	4402      	add	r2, r0
 800608e:	4603      	mov	r3, r0
 8006090:	4293      	cmp	r3, r2
 8006092:	d100      	bne.n	8006096 <memset+0xa>
 8006094:	4770      	bx	lr
 8006096:	f803 1b01 	strb.w	r1, [r3], #1
 800609a:	e7f9      	b.n	8006090 <memset+0x4>

0800609c <__libc_init_array>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	4d0d      	ldr	r5, [pc, #52]	@ (80060d4 <__libc_init_array+0x38>)
 80060a0:	4c0d      	ldr	r4, [pc, #52]	@ (80060d8 <__libc_init_array+0x3c>)
 80060a2:	1b64      	subs	r4, r4, r5
 80060a4:	10a4      	asrs	r4, r4, #2
 80060a6:	2600      	movs	r6, #0
 80060a8:	42a6      	cmp	r6, r4
 80060aa:	d109      	bne.n	80060c0 <__libc_init_array+0x24>
 80060ac:	4d0b      	ldr	r5, [pc, #44]	@ (80060dc <__libc_init_array+0x40>)
 80060ae:	4c0c      	ldr	r4, [pc, #48]	@ (80060e0 <__libc_init_array+0x44>)
 80060b0:	f000 f818 	bl	80060e4 <_init>
 80060b4:	1b64      	subs	r4, r4, r5
 80060b6:	10a4      	asrs	r4, r4, #2
 80060b8:	2600      	movs	r6, #0
 80060ba:	42a6      	cmp	r6, r4
 80060bc:	d105      	bne.n	80060ca <__libc_init_array+0x2e>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c4:	4798      	blx	r3
 80060c6:	3601      	adds	r6, #1
 80060c8:	e7ee      	b.n	80060a8 <__libc_init_array+0xc>
 80060ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ce:	4798      	blx	r3
 80060d0:	3601      	adds	r6, #1
 80060d2:	e7f2      	b.n	80060ba <__libc_init_array+0x1e>
 80060d4:	0800613c 	.word	0x0800613c
 80060d8:	0800613c 	.word	0x0800613c
 80060dc:	0800613c 	.word	0x0800613c
 80060e0:	08006140 	.word	0x08006140

080060e4 <_init>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr

080060f0 <_fini>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr
