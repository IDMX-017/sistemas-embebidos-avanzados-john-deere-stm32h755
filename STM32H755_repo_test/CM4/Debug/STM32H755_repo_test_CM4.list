
STM32H755_repo_test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b0  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08104550  08104550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081045a8  081045a8  000055a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  081045ac  081045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000064  10000000  081045b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004b98  10000064  08104614  00006064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004bfc  08104614  00006bfc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019364  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003401  00000000  00000000  0001f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000014b8  00000000  00000000  00022800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000fee  00000000  00000000  00023cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003b18e  00000000  00000000  00024ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000176c4  00000000  00000000  0005fe34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018e9a6  00000000  00000000  000774f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00205e9e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000059d0  00000000  00000000  00205ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000009e  00000000  00000000  0020b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000064 	.word	0x10000064
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08104538 	.word	0x08104538

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000068 	.word	0x10000068
 81002dc:	08104538 	.word	0x08104538

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	@ (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	@ (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	@ (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	@ (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100316:	4b21      	ldr	r3, [pc, #132]	@ (810039c <main+0x8c>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810031c:	4a1f      	ldr	r2, [pc, #124]	@ (810039c <main+0x8c>)
 810031e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100326:	4b1d      	ldr	r3, [pc, #116]	@ (810039c <main+0x8c>)
 8100328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810032c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100330:	607b      	str	r3, [r7, #4]
 8100332:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100334:	2001      	movs	r0, #1
 8100336:	f000 fcb7 	bl	8100ca8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810033a:	f000 fd41 	bl	8100dc0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810033e:	2201      	movs	r2, #1
 8100340:	2102      	movs	r1, #2
 8100342:	2000      	movs	r0, #0
 8100344:	f000 fcc2 	bl	8100ccc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100348:	4b15      	ldr	r3, [pc, #84]	@ (81003a0 <main+0x90>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	091b      	lsrs	r3, r3, #4
 810034e:	f003 030f 	and.w	r3, r3, #15
 8100352:	2b07      	cmp	r3, #7
 8100354:	d108      	bne.n	8100368 <main+0x58>
 8100356:	4b13      	ldr	r3, [pc, #76]	@ (81003a4 <main+0x94>)
 8100358:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810035c:	4a11      	ldr	r2, [pc, #68]	@ (81003a4 <main+0x94>)
 810035e:	f043 0301 	orr.w	r3, r3, #1
 8100362:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100366:	e007      	b.n	8100378 <main+0x68>
 8100368:	4b0e      	ldr	r3, [pc, #56]	@ (81003a4 <main+0x94>)
 810036a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810036e:	4a0d      	ldr	r2, [pc, #52]	@ (81003a4 <main+0x94>)
 8100370:	f043 0301 	orr.w	r3, r3, #1
 8100374:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100378:	f000 f94c 	bl	8100614 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810037c:	f000 f81a 	bl	81003b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //*acum = 0;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100380:	f001 fa42 	bl	8101808 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100384:	4a08      	ldr	r2, [pc, #32]	@ (81003a8 <main+0x98>)
 8100386:	2100      	movs	r1, #0
 8100388:	4808      	ldr	r0, [pc, #32]	@ (81003ac <main+0x9c>)
 810038a:	f001 fa87 	bl	810189c <osThreadNew>
 810038e:	4603      	mov	r3, r0
 8100390:	4a07      	ldr	r2, [pc, #28]	@ (81003b0 <main+0xa0>)
 8100392:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100394:	f001 fa5c 	bl	8101850 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100398:	bf00      	nop
 810039a:	e7fd      	b.n	8100398 <main+0x88>
 810039c:	58024400 	.word	0x58024400
 81003a0:	e000ed00 	.word	0xe000ed00
 81003a4:	58026400 	.word	0x58026400
 81003a8:	08104584 	.word	0x08104584
 81003ac:	0810041d 	.word	0x0810041d
 81003b0:	10000080 	.word	0x10000080

081003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003b4:	b580      	push	{r7, lr}
 81003b6:	b086      	sub	sp, #24
 81003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003ba:	1d3b      	adds	r3, r7, #4
 81003bc:	2200      	movs	r2, #0
 81003be:	601a      	str	r2, [r3, #0]
 81003c0:	605a      	str	r2, [r3, #4]
 81003c2:	609a      	str	r2, [r3, #8]
 81003c4:	60da      	str	r2, [r3, #12]
 81003c6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81003c8:	4b12      	ldr	r3, [pc, #72]	@ (8100414 <MX_GPIO_Init+0x60>)
 81003ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003ce:	4a11      	ldr	r2, [pc, #68]	@ (8100414 <MX_GPIO_Init+0x60>)
 81003d0:	f043 0310 	orr.w	r3, r3, #16
 81003d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8100414 <MX_GPIO_Init+0x60>)
 81003da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003de:	f003 0310 	and.w	r3, r3, #16
 81003e2:	603b      	str	r3, [r7, #0]
 81003e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81003e6:	2200      	movs	r2, #0
 81003e8:	2102      	movs	r1, #2
 81003ea:	480b      	ldr	r0, [pc, #44]	@ (8100418 <MX_GPIO_Init+0x64>)
 81003ec:	f000 fc28 	bl	8100c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81003f0:	2302      	movs	r3, #2
 81003f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81003f4:	2301      	movs	r3, #1
 81003f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81003f8:	2300      	movs	r3, #0
 81003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81003fc:	2300      	movs	r3, #0
 81003fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100400:	1d3b      	adds	r3, r7, #4
 8100402:	4619      	mov	r1, r3
 8100404:	4804      	ldr	r0, [pc, #16]	@ (8100418 <MX_GPIO_Init+0x64>)
 8100406:	f000 fa6b 	bl	81008e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810040a:	bf00      	nop
 810040c:	3718      	adds	r7, #24
 810040e:	46bd      	mov	sp, r7
 8100410:	bd80      	pop	{r7, pc}
 8100412:	bf00      	nop
 8100414:	58024400 	.word	0x58024400
 8100418:	58021000 	.word	0x58021000

0810041c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810041c:	b580      	push	{r7, lr}
 810041e:	b082      	sub	sp, #8
 8100420:	af00      	add	r7, sp, #0
 8100422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin );
 8100424:	2102      	movs	r1, #2
 8100426:	4804      	ldr	r0, [pc, #16]	@ (8100438 <StartDefaultTask+0x1c>)
 8100428:	f000 fc23 	bl	8100c72 <HAL_GPIO_TogglePin>
    osDelay(2000);
 810042c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8100430:	f001 fac6 	bl	81019c0 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin );
 8100434:	bf00      	nop
 8100436:	e7f5      	b.n	8100424 <StartDefaultTask+0x8>
 8100438:	58021000 	.word	0x58021000

0810043c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810043c:	b580      	push	{r7, lr}
 810043e:	b082      	sub	sp, #8
 8100440:	af00      	add	r7, sp, #0
 8100442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100444:	687b      	ldr	r3, [r7, #4]
 8100446:	681b      	ldr	r3, [r3, #0]
 8100448:	4a04      	ldr	r2, [pc, #16]	@ (810045c <HAL_TIM_PeriodElapsedCallback+0x20>)
 810044a:	4293      	cmp	r3, r2
 810044c:	d101      	bne.n	8100452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810044e:	f000 f93f 	bl	81006d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100452:	bf00      	nop
 8100454:	3708      	adds	r7, #8
 8100456:	46bd      	mov	sp, r7
 8100458:	bd80      	pop	{r7, pc}
 810045a:	bf00      	nop
 810045c:	40001000 	.word	0x40001000

08100460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100460:	b580      	push	{r7, lr}
 8100462:	b082      	sub	sp, #8
 8100464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100466:	4b0c      	ldr	r3, [pc, #48]	@ (8100498 <HAL_MspInit+0x38>)
 8100468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810046c:	4a0a      	ldr	r2, [pc, #40]	@ (8100498 <HAL_MspInit+0x38>)
 810046e:	f043 0302 	orr.w	r3, r3, #2
 8100472:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100476:	4b08      	ldr	r3, [pc, #32]	@ (8100498 <HAL_MspInit+0x38>)
 8100478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810047c:	f003 0302 	and.w	r3, r3, #2
 8100480:	607b      	str	r3, [r7, #4]
 8100482:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100484:	2200      	movs	r2, #0
 8100486:	210f      	movs	r1, #15
 8100488:	f06f 0001 	mvn.w	r0, #1
 810048c:	f000 f9ec 	bl	8100868 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100490:	bf00      	nop
 8100492:	3708      	adds	r7, #8
 8100494:	46bd      	mov	sp, r7
 8100496:	bd80      	pop	{r7, pc}
 8100498:	58024400 	.word	0x58024400

0810049c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810049c:	b580      	push	{r7, lr}
 810049e:	b090      	sub	sp, #64	@ 0x40
 81004a0:	af00      	add	r7, sp, #0
 81004a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81004a4:	687b      	ldr	r3, [r7, #4]
 81004a6:	2b0f      	cmp	r3, #15
 81004a8:	d827      	bhi.n	81004fa <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 81004aa:	2200      	movs	r2, #0
 81004ac:	6879      	ldr	r1, [r7, #4]
 81004ae:	2036      	movs	r0, #54	@ 0x36
 81004b0:	f000 f9da 	bl	8100868 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 81004b4:	2036      	movs	r0, #54	@ 0x36
 81004b6:	f000 f9f1 	bl	810089c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81004ba:	4a29      	ldr	r2, [pc, #164]	@ (8100560 <HAL_InitTick+0xc4>)
 81004bc:	687b      	ldr	r3, [r7, #4]
 81004be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 81004c0:	4b28      	ldr	r3, [pc, #160]	@ (8100564 <HAL_InitTick+0xc8>)
 81004c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81004c6:	4a27      	ldr	r2, [pc, #156]	@ (8100564 <HAL_InitTick+0xc8>)
 81004c8:	f043 0310 	orr.w	r3, r3, #16
 81004cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81004d0:	4b24      	ldr	r3, [pc, #144]	@ (8100564 <HAL_InitTick+0xc8>)
 81004d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81004d6:	f003 0310 	and.w	r3, r3, #16
 81004da:	60fb      	str	r3, [r7, #12]
 81004dc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81004de:	f107 0210 	add.w	r2, r7, #16
 81004e2:	f107 0314 	add.w	r3, r7, #20
 81004e6:	4611      	mov	r1, r2
 81004e8:	4618      	mov	r0, r3
 81004ea:	f000 fe39 	bl	8101160 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81004ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81004f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81004f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81004f4:	2b00      	cmp	r3, #0
 81004f6:	d106      	bne.n	8100506 <HAL_InitTick+0x6a>
 81004f8:	e001      	b.n	81004fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 81004fa:	2301      	movs	r3, #1
 81004fc:	e02b      	b.n	8100556 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81004fe:	f000 fe19 	bl	8101134 <HAL_RCC_GetPCLK1Freq>
 8100502:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100504:	e004      	b.n	8100510 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100506:	f000 fe15 	bl	8101134 <HAL_RCC_GetPCLK1Freq>
 810050a:	4603      	mov	r3, r0
 810050c:	005b      	lsls	r3, r3, #1
 810050e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100512:	4a15      	ldr	r2, [pc, #84]	@ (8100568 <HAL_InitTick+0xcc>)
 8100514:	fba2 2303 	umull	r2, r3, r2, r3
 8100518:	0c9b      	lsrs	r3, r3, #18
 810051a:	3b01      	subs	r3, #1
 810051c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 810051e:	4b13      	ldr	r3, [pc, #76]	@ (810056c <HAL_InitTick+0xd0>)
 8100520:	4a13      	ldr	r2, [pc, #76]	@ (8100570 <HAL_InitTick+0xd4>)
 8100522:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100524:	4b11      	ldr	r3, [pc, #68]	@ (810056c <HAL_InitTick+0xd0>)
 8100526:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810052a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 810052c:	4a0f      	ldr	r2, [pc, #60]	@ (810056c <HAL_InitTick+0xd0>)
 810052e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100530:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100532:	4b0e      	ldr	r3, [pc, #56]	@ (810056c <HAL_InitTick+0xd0>)
 8100534:	2200      	movs	r2, #0
 8100536:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100538:	4b0c      	ldr	r3, [pc, #48]	@ (810056c <HAL_InitTick+0xd0>)
 810053a:	2200      	movs	r2, #0
 810053c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 810053e:	480b      	ldr	r0, [pc, #44]	@ (810056c <HAL_InitTick+0xd0>)
 8100540:	f000 fe50 	bl	81011e4 <HAL_TIM_Base_Init>
 8100544:	4603      	mov	r3, r0
 8100546:	2b00      	cmp	r3, #0
 8100548:	d104      	bne.n	8100554 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 810054a:	4808      	ldr	r0, [pc, #32]	@ (810056c <HAL_InitTick+0xd0>)
 810054c:	f000 feac 	bl	81012a8 <HAL_TIM_Base_Start_IT>
 8100550:	4603      	mov	r3, r0
 8100552:	e000      	b.n	8100556 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100554:	2301      	movs	r3, #1
}
 8100556:	4618      	mov	r0, r3
 8100558:	3740      	adds	r7, #64	@ 0x40
 810055a:	46bd      	mov	sp, r7
 810055c:	bd80      	pop	{r7, pc}
 810055e:	bf00      	nop
 8100560:	10000008 	.word	0x10000008
 8100564:	58024400 	.word	0x58024400
 8100568:	431bde83 	.word	0x431bde83
 810056c:	10000084 	.word	0x10000084
 8100570:	40001000 	.word	0x40001000

08100574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100574:	b480      	push	{r7}
 8100576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100578:	bf00      	nop
 810057a:	e7fd      	b.n	8100578 <NMI_Handler+0x4>

0810057c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810057c:	b480      	push	{r7}
 810057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100580:	bf00      	nop
 8100582:	e7fd      	b.n	8100580 <HardFault_Handler+0x4>

08100584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100584:	b480      	push	{r7}
 8100586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100588:	bf00      	nop
 810058a:	e7fd      	b.n	8100588 <MemManage_Handler+0x4>

0810058c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810058c:	b480      	push	{r7}
 810058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100590:	bf00      	nop
 8100592:	e7fd      	b.n	8100590 <BusFault_Handler+0x4>

08100594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100594:	b480      	push	{r7}
 8100596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100598:	bf00      	nop
 810059a:	e7fd      	b.n	8100598 <UsageFault_Handler+0x4>

0810059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810059c:	b480      	push	{r7}
 810059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81005a0:	bf00      	nop
 81005a2:	46bd      	mov	sp, r7
 81005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005a8:	4770      	bx	lr
	...

081005ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81005ac:	b580      	push	{r7, lr}
 81005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81005b0:	4802      	ldr	r0, [pc, #8]	@ (81005bc <TIM6_DAC_IRQHandler+0x10>)
 81005b2:	f000 fef1 	bl	8101398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81005b6:	bf00      	nop
 81005b8:	bd80      	pop	{r7, pc}
 81005ba:	bf00      	nop
 81005bc:	10000084 	.word	0x10000084

081005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81005f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81005c4:	f7ff fe8c 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005c8:	480c      	ldr	r0, [pc, #48]	@ (81005fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005ca:	490d      	ldr	r1, [pc, #52]	@ (8100600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8100604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81005d0:	e002      	b.n	81005d8 <LoopCopyDataInit>

081005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81005d6:	3304      	adds	r3, #4

081005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81005dc:	d3f9      	bcc.n	81005d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81005de:	4a0a      	ldr	r2, [pc, #40]	@ (8100608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81005e0:	4c0a      	ldr	r4, [pc, #40]	@ (810060c <LoopFillZerobss+0x22>)
  movs r3, #0
 81005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81005e4:	e001      	b.n	81005ea <LoopFillZerobss>

081005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81005e8:	3204      	adds	r2, #4

081005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81005ec:	d3fb      	bcc.n	81005e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81005ee:	f003 ff19 	bl	8104424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81005f2:	f7ff fe8d 	bl	8100310 <main>
  bx  lr
 81005f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81005f8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81005fc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100600:	10000064 	.word	0x10000064
  ldr r2, =_sidata
 8100604:	081045b0 	.word	0x081045b0
  ldr r2, =_sbss
 8100608:	10000064 	.word	0x10000064
  ldr r4, =_ebss
 810060c:	10004bfc 	.word	0x10004bfc

08100610 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100610:	e7fe      	b.n	8100610 <ADC3_IRQHandler>
	...

08100614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100614:	b580      	push	{r7, lr}
 8100616:	b082      	sub	sp, #8
 8100618:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810061a:	4b28      	ldr	r3, [pc, #160]	@ (81006bc <HAL_Init+0xa8>)
 810061c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100620:	4a26      	ldr	r2, [pc, #152]	@ (81006bc <HAL_Init+0xa8>)
 8100622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100626:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810062a:	4b24      	ldr	r3, [pc, #144]	@ (81006bc <HAL_Init+0xa8>)
 810062c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100634:	603b      	str	r3, [r7, #0]
 8100636:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100638:	4b21      	ldr	r3, [pc, #132]	@ (81006c0 <HAL_Init+0xac>)
 810063a:	681b      	ldr	r3, [r3, #0]
 810063c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100640:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100644:	4a1e      	ldr	r2, [pc, #120]	@ (81006c0 <HAL_Init+0xac>)
 8100646:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810064a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810064c:	4b1c      	ldr	r3, [pc, #112]	@ (81006c0 <HAL_Init+0xac>)
 810064e:	681b      	ldr	r3, [r3, #0]
 8100650:	4a1b      	ldr	r2, [pc, #108]	@ (81006c0 <HAL_Init+0xac>)
 8100652:	f043 0301 	orr.w	r3, r3, #1
 8100656:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100658:	2003      	movs	r0, #3
 810065a:	f000 f8fa 	bl	8100852 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810065e:	f000 fbbd 	bl	8100ddc <HAL_RCC_GetSysClockFreq>
 8100662:	4602      	mov	r2, r0
 8100664:	4b15      	ldr	r3, [pc, #84]	@ (81006bc <HAL_Init+0xa8>)
 8100666:	699b      	ldr	r3, [r3, #24]
 8100668:	0a1b      	lsrs	r3, r3, #8
 810066a:	f003 030f 	and.w	r3, r3, #15
 810066e:	4915      	ldr	r1, [pc, #84]	@ (81006c4 <HAL_Init+0xb0>)
 8100670:	5ccb      	ldrb	r3, [r1, r3]
 8100672:	f003 031f 	and.w	r3, r3, #31
 8100676:	fa22 f303 	lsr.w	r3, r2, r3
 810067a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810067c:	4b0f      	ldr	r3, [pc, #60]	@ (81006bc <HAL_Init+0xa8>)
 810067e:	699b      	ldr	r3, [r3, #24]
 8100680:	f003 030f 	and.w	r3, r3, #15
 8100684:	4a0f      	ldr	r2, [pc, #60]	@ (81006c4 <HAL_Init+0xb0>)
 8100686:	5cd3      	ldrb	r3, [r2, r3]
 8100688:	f003 031f 	and.w	r3, r3, #31
 810068c:	687a      	ldr	r2, [r7, #4]
 810068e:	fa22 f303 	lsr.w	r3, r2, r3
 8100692:	4a0d      	ldr	r2, [pc, #52]	@ (81006c8 <HAL_Init+0xb4>)
 8100694:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100696:	4b0c      	ldr	r3, [pc, #48]	@ (81006c8 <HAL_Init+0xb4>)
 8100698:	681b      	ldr	r3, [r3, #0]
 810069a:	4a0c      	ldr	r2, [pc, #48]	@ (81006cc <HAL_Init+0xb8>)
 810069c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810069e:	200f      	movs	r0, #15
 81006a0:	f7ff fefc 	bl	810049c <HAL_InitTick>
 81006a4:	4603      	mov	r3, r0
 81006a6:	2b00      	cmp	r3, #0
 81006a8:	d001      	beq.n	81006ae <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81006aa:	2301      	movs	r3, #1
 81006ac:	e002      	b.n	81006b4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81006ae:	f7ff fed7 	bl	8100460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81006b2:	2300      	movs	r3, #0
}
 81006b4:	4618      	mov	r0, r3
 81006b6:	3708      	adds	r7, #8
 81006b8:	46bd      	mov	sp, r7
 81006ba:	bd80      	pop	{r7, pc}
 81006bc:	58024400 	.word	0x58024400
 81006c0:	40024400 	.word	0x40024400
 81006c4:	08104574 	.word	0x08104574
 81006c8:	10000004 	.word	0x10000004
 81006cc:	10000000 	.word	0x10000000

081006d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81006d0:	b480      	push	{r7}
 81006d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81006d4:	4b06      	ldr	r3, [pc, #24]	@ (81006f0 <HAL_IncTick+0x20>)
 81006d6:	781b      	ldrb	r3, [r3, #0]
 81006d8:	461a      	mov	r2, r3
 81006da:	4b06      	ldr	r3, [pc, #24]	@ (81006f4 <HAL_IncTick+0x24>)
 81006dc:	681b      	ldr	r3, [r3, #0]
 81006de:	4413      	add	r3, r2
 81006e0:	4a04      	ldr	r2, [pc, #16]	@ (81006f4 <HAL_IncTick+0x24>)
 81006e2:	6013      	str	r3, [r2, #0]
}
 81006e4:	bf00      	nop
 81006e6:	46bd      	mov	sp, r7
 81006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ec:	4770      	bx	lr
 81006ee:	bf00      	nop
 81006f0:	1000000c 	.word	0x1000000c
 81006f4:	100000d0 	.word	0x100000d0

081006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006f8:	b480      	push	{r7}
 81006fa:	b085      	sub	sp, #20
 81006fc:	af00      	add	r7, sp, #0
 81006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100700:	687b      	ldr	r3, [r7, #4]
 8100702:	f003 0307 	and.w	r3, r3, #7
 8100706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100708:	4b0c      	ldr	r3, [pc, #48]	@ (810073c <__NVIC_SetPriorityGrouping+0x44>)
 810070a:	68db      	ldr	r3, [r3, #12]
 810070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810070e:	68ba      	ldr	r2, [r7, #8]
 8100710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100714:	4013      	ands	r3, r2
 8100716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100718:	68fb      	ldr	r3, [r7, #12]
 810071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810071c:	68bb      	ldr	r3, [r7, #8]
 810071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810072a:	4a04      	ldr	r2, [pc, #16]	@ (810073c <__NVIC_SetPriorityGrouping+0x44>)
 810072c:	68bb      	ldr	r3, [r7, #8]
 810072e:	60d3      	str	r3, [r2, #12]
}
 8100730:	bf00      	nop
 8100732:	3714      	adds	r7, #20
 8100734:	46bd      	mov	sp, r7
 8100736:	f85d 7b04 	ldr.w	r7, [sp], #4
 810073a:	4770      	bx	lr
 810073c:	e000ed00 	.word	0xe000ed00

08100740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100740:	b480      	push	{r7}
 8100742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100744:	4b04      	ldr	r3, [pc, #16]	@ (8100758 <__NVIC_GetPriorityGrouping+0x18>)
 8100746:	68db      	ldr	r3, [r3, #12]
 8100748:	0a1b      	lsrs	r3, r3, #8
 810074a:	f003 0307 	and.w	r3, r3, #7
}
 810074e:	4618      	mov	r0, r3
 8100750:	46bd      	mov	sp, r7
 8100752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100756:	4770      	bx	lr
 8100758:	e000ed00 	.word	0xe000ed00

0810075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810075c:	b480      	push	{r7}
 810075e:	b083      	sub	sp, #12
 8100760:	af00      	add	r7, sp, #0
 8100762:	4603      	mov	r3, r0
 8100764:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810076a:	2b00      	cmp	r3, #0
 810076c:	db0b      	blt.n	8100786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810076e:	88fb      	ldrh	r3, [r7, #6]
 8100770:	f003 021f 	and.w	r2, r3, #31
 8100774:	4907      	ldr	r1, [pc, #28]	@ (8100794 <__NVIC_EnableIRQ+0x38>)
 8100776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810077a:	095b      	lsrs	r3, r3, #5
 810077c:	2001      	movs	r0, #1
 810077e:	fa00 f202 	lsl.w	r2, r0, r2
 8100782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100786:	bf00      	nop
 8100788:	370c      	adds	r7, #12
 810078a:	46bd      	mov	sp, r7
 810078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100790:	4770      	bx	lr
 8100792:	bf00      	nop
 8100794:	e000e100 	.word	0xe000e100

08100798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100798:	b480      	push	{r7}
 810079a:	b083      	sub	sp, #12
 810079c:	af00      	add	r7, sp, #0
 810079e:	4603      	mov	r3, r0
 81007a0:	6039      	str	r1, [r7, #0]
 81007a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81007a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007a8:	2b00      	cmp	r3, #0
 81007aa:	db0a      	blt.n	81007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007ac:	683b      	ldr	r3, [r7, #0]
 81007ae:	b2da      	uxtb	r2, r3
 81007b0:	490c      	ldr	r1, [pc, #48]	@ (81007e4 <__NVIC_SetPriority+0x4c>)
 81007b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007b6:	0112      	lsls	r2, r2, #4
 81007b8:	b2d2      	uxtb	r2, r2
 81007ba:	440b      	add	r3, r1
 81007bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81007c0:	e00a      	b.n	81007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007c2:	683b      	ldr	r3, [r7, #0]
 81007c4:	b2da      	uxtb	r2, r3
 81007c6:	4908      	ldr	r1, [pc, #32]	@ (81007e8 <__NVIC_SetPriority+0x50>)
 81007c8:	88fb      	ldrh	r3, [r7, #6]
 81007ca:	f003 030f 	and.w	r3, r3, #15
 81007ce:	3b04      	subs	r3, #4
 81007d0:	0112      	lsls	r2, r2, #4
 81007d2:	b2d2      	uxtb	r2, r2
 81007d4:	440b      	add	r3, r1
 81007d6:	761a      	strb	r2, [r3, #24]
}
 81007d8:	bf00      	nop
 81007da:	370c      	adds	r7, #12
 81007dc:	46bd      	mov	sp, r7
 81007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007e2:	4770      	bx	lr
 81007e4:	e000e100 	.word	0xe000e100
 81007e8:	e000ed00 	.word	0xe000ed00

081007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007ec:	b480      	push	{r7}
 81007ee:	b089      	sub	sp, #36	@ 0x24
 81007f0:	af00      	add	r7, sp, #0
 81007f2:	60f8      	str	r0, [r7, #12]
 81007f4:	60b9      	str	r1, [r7, #8]
 81007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81007f8:	68fb      	ldr	r3, [r7, #12]
 81007fa:	f003 0307 	and.w	r3, r3, #7
 81007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100800:	69fb      	ldr	r3, [r7, #28]
 8100802:	f1c3 0307 	rsb	r3, r3, #7
 8100806:	2b04      	cmp	r3, #4
 8100808:	bf28      	it	cs
 810080a:	2304      	movcs	r3, #4
 810080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810080e:	69fb      	ldr	r3, [r7, #28]
 8100810:	3304      	adds	r3, #4
 8100812:	2b06      	cmp	r3, #6
 8100814:	d902      	bls.n	810081c <NVIC_EncodePriority+0x30>
 8100816:	69fb      	ldr	r3, [r7, #28]
 8100818:	3b03      	subs	r3, #3
 810081a:	e000      	b.n	810081e <NVIC_EncodePriority+0x32>
 810081c:	2300      	movs	r3, #0
 810081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100820:	f04f 32ff 	mov.w	r2, #4294967295
 8100824:	69bb      	ldr	r3, [r7, #24]
 8100826:	fa02 f303 	lsl.w	r3, r2, r3
 810082a:	43da      	mvns	r2, r3
 810082c:	68bb      	ldr	r3, [r7, #8]
 810082e:	401a      	ands	r2, r3
 8100830:	697b      	ldr	r3, [r7, #20]
 8100832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100834:	f04f 31ff 	mov.w	r1, #4294967295
 8100838:	697b      	ldr	r3, [r7, #20]
 810083a:	fa01 f303 	lsl.w	r3, r1, r3
 810083e:	43d9      	mvns	r1, r3
 8100840:	687b      	ldr	r3, [r7, #4]
 8100842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100844:	4313      	orrs	r3, r2
         );
}
 8100846:	4618      	mov	r0, r3
 8100848:	3724      	adds	r7, #36	@ 0x24
 810084a:	46bd      	mov	sp, r7
 810084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100850:	4770      	bx	lr

08100852 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100852:	b580      	push	{r7, lr}
 8100854:	b082      	sub	sp, #8
 8100856:	af00      	add	r7, sp, #0
 8100858:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810085a:	6878      	ldr	r0, [r7, #4]
 810085c:	f7ff ff4c 	bl	81006f8 <__NVIC_SetPriorityGrouping>
}
 8100860:	bf00      	nop
 8100862:	3708      	adds	r7, #8
 8100864:	46bd      	mov	sp, r7
 8100866:	bd80      	pop	{r7, pc}

08100868 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100868:	b580      	push	{r7, lr}
 810086a:	b086      	sub	sp, #24
 810086c:	af00      	add	r7, sp, #0
 810086e:	4603      	mov	r3, r0
 8100870:	60b9      	str	r1, [r7, #8]
 8100872:	607a      	str	r2, [r7, #4]
 8100874:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100876:	f7ff ff63 	bl	8100740 <__NVIC_GetPriorityGrouping>
 810087a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810087c:	687a      	ldr	r2, [r7, #4]
 810087e:	68b9      	ldr	r1, [r7, #8]
 8100880:	6978      	ldr	r0, [r7, #20]
 8100882:	f7ff ffb3 	bl	81007ec <NVIC_EncodePriority>
 8100886:	4602      	mov	r2, r0
 8100888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810088c:	4611      	mov	r1, r2
 810088e:	4618      	mov	r0, r3
 8100890:	f7ff ff82 	bl	8100798 <__NVIC_SetPriority>
}
 8100894:	bf00      	nop
 8100896:	3718      	adds	r7, #24
 8100898:	46bd      	mov	sp, r7
 810089a:	bd80      	pop	{r7, pc}

0810089c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810089c:	b580      	push	{r7, lr}
 810089e:	b082      	sub	sp, #8
 81008a0:	af00      	add	r7, sp, #0
 81008a2:	4603      	mov	r3, r0
 81008a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81008a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81008aa:	4618      	mov	r0, r3
 81008ac:	f7ff ff56 	bl	810075c <__NVIC_EnableIRQ>
}
 81008b0:	bf00      	nop
 81008b2:	3708      	adds	r7, #8
 81008b4:	46bd      	mov	sp, r7
 81008b6:	bd80      	pop	{r7, pc}

081008b8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81008b8:	b480      	push	{r7}
 81008ba:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81008bc:	4b07      	ldr	r3, [pc, #28]	@ (81008dc <HAL_GetCurrentCPUID+0x24>)
 81008be:	681b      	ldr	r3, [r3, #0]
 81008c0:	091b      	lsrs	r3, r3, #4
 81008c2:	f003 030f 	and.w	r3, r3, #15
 81008c6:	2b07      	cmp	r3, #7
 81008c8:	d101      	bne.n	81008ce <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81008ca:	2303      	movs	r3, #3
 81008cc:	e000      	b.n	81008d0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81008ce:	2301      	movs	r3, #1
  }
}
 81008d0:	4618      	mov	r0, r3
 81008d2:	46bd      	mov	sp, r7
 81008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008d8:	4770      	bx	lr
 81008da:	bf00      	nop
 81008dc:	e000ed00 	.word	0xe000ed00

081008e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81008e0:	b480      	push	{r7}
 81008e2:	b089      	sub	sp, #36	@ 0x24
 81008e4:	af00      	add	r7, sp, #0
 81008e6:	6078      	str	r0, [r7, #4]
 81008e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81008ea:	2300      	movs	r3, #0
 81008ec:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81008ee:	4b89      	ldr	r3, [pc, #548]	@ (8100b14 <HAL_GPIO_Init+0x234>)
 81008f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81008f2:	e194      	b.n	8100c1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81008f4:	683b      	ldr	r3, [r7, #0]
 81008f6:	681a      	ldr	r2, [r3, #0]
 81008f8:	2101      	movs	r1, #1
 81008fa:	69fb      	ldr	r3, [r7, #28]
 81008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8100900:	4013      	ands	r3, r2
 8100902:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100904:	693b      	ldr	r3, [r7, #16]
 8100906:	2b00      	cmp	r3, #0
 8100908:	f000 8186 	beq.w	8100c18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810090c:	683b      	ldr	r3, [r7, #0]
 810090e:	685b      	ldr	r3, [r3, #4]
 8100910:	f003 0303 	and.w	r3, r3, #3
 8100914:	2b01      	cmp	r3, #1
 8100916:	d005      	beq.n	8100924 <HAL_GPIO_Init+0x44>
 8100918:	683b      	ldr	r3, [r7, #0]
 810091a:	685b      	ldr	r3, [r3, #4]
 810091c:	f003 0303 	and.w	r3, r3, #3
 8100920:	2b02      	cmp	r3, #2
 8100922:	d130      	bne.n	8100986 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100924:	687b      	ldr	r3, [r7, #4]
 8100926:	689b      	ldr	r3, [r3, #8]
 8100928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810092a:	69fb      	ldr	r3, [r7, #28]
 810092c:	005b      	lsls	r3, r3, #1
 810092e:	2203      	movs	r2, #3
 8100930:	fa02 f303 	lsl.w	r3, r2, r3
 8100934:	43db      	mvns	r3, r3
 8100936:	69ba      	ldr	r2, [r7, #24]
 8100938:	4013      	ands	r3, r2
 810093a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810093c:	683b      	ldr	r3, [r7, #0]
 810093e:	68da      	ldr	r2, [r3, #12]
 8100940:	69fb      	ldr	r3, [r7, #28]
 8100942:	005b      	lsls	r3, r3, #1
 8100944:	fa02 f303 	lsl.w	r3, r2, r3
 8100948:	69ba      	ldr	r2, [r7, #24]
 810094a:	4313      	orrs	r3, r2
 810094c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810094e:	687b      	ldr	r3, [r7, #4]
 8100950:	69ba      	ldr	r2, [r7, #24]
 8100952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100954:	687b      	ldr	r3, [r7, #4]
 8100956:	685b      	ldr	r3, [r3, #4]
 8100958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810095a:	2201      	movs	r2, #1
 810095c:	69fb      	ldr	r3, [r7, #28]
 810095e:	fa02 f303 	lsl.w	r3, r2, r3
 8100962:	43db      	mvns	r3, r3
 8100964:	69ba      	ldr	r2, [r7, #24]
 8100966:	4013      	ands	r3, r2
 8100968:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810096a:	683b      	ldr	r3, [r7, #0]
 810096c:	685b      	ldr	r3, [r3, #4]
 810096e:	091b      	lsrs	r3, r3, #4
 8100970:	f003 0201 	and.w	r2, r3, #1
 8100974:	69fb      	ldr	r3, [r7, #28]
 8100976:	fa02 f303 	lsl.w	r3, r2, r3
 810097a:	69ba      	ldr	r2, [r7, #24]
 810097c:	4313      	orrs	r3, r2
 810097e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100980:	687b      	ldr	r3, [r7, #4]
 8100982:	69ba      	ldr	r2, [r7, #24]
 8100984:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100986:	683b      	ldr	r3, [r7, #0]
 8100988:	685b      	ldr	r3, [r3, #4]
 810098a:	f003 0303 	and.w	r3, r3, #3
 810098e:	2b03      	cmp	r3, #3
 8100990:	d017      	beq.n	81009c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100992:	687b      	ldr	r3, [r7, #4]
 8100994:	68db      	ldr	r3, [r3, #12]
 8100996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100998:	69fb      	ldr	r3, [r7, #28]
 810099a:	005b      	lsls	r3, r3, #1
 810099c:	2203      	movs	r2, #3
 810099e:	fa02 f303 	lsl.w	r3, r2, r3
 81009a2:	43db      	mvns	r3, r3
 81009a4:	69ba      	ldr	r2, [r7, #24]
 81009a6:	4013      	ands	r3, r2
 81009a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81009aa:	683b      	ldr	r3, [r7, #0]
 81009ac:	689a      	ldr	r2, [r3, #8]
 81009ae:	69fb      	ldr	r3, [r7, #28]
 81009b0:	005b      	lsls	r3, r3, #1
 81009b2:	fa02 f303 	lsl.w	r3, r2, r3
 81009b6:	69ba      	ldr	r2, [r7, #24]
 81009b8:	4313      	orrs	r3, r2
 81009ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81009bc:	687b      	ldr	r3, [r7, #4]
 81009be:	69ba      	ldr	r2, [r7, #24]
 81009c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81009c2:	683b      	ldr	r3, [r7, #0]
 81009c4:	685b      	ldr	r3, [r3, #4]
 81009c6:	f003 0303 	and.w	r3, r3, #3
 81009ca:	2b02      	cmp	r3, #2
 81009cc:	d123      	bne.n	8100a16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81009ce:	69fb      	ldr	r3, [r7, #28]
 81009d0:	08da      	lsrs	r2, r3, #3
 81009d2:	687b      	ldr	r3, [r7, #4]
 81009d4:	3208      	adds	r2, #8
 81009d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81009da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81009dc:	69fb      	ldr	r3, [r7, #28]
 81009de:	f003 0307 	and.w	r3, r3, #7
 81009e2:	009b      	lsls	r3, r3, #2
 81009e4:	220f      	movs	r2, #15
 81009e6:	fa02 f303 	lsl.w	r3, r2, r3
 81009ea:	43db      	mvns	r3, r3
 81009ec:	69ba      	ldr	r2, [r7, #24]
 81009ee:	4013      	ands	r3, r2
 81009f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81009f2:	683b      	ldr	r3, [r7, #0]
 81009f4:	691a      	ldr	r2, [r3, #16]
 81009f6:	69fb      	ldr	r3, [r7, #28]
 81009f8:	f003 0307 	and.w	r3, r3, #7
 81009fc:	009b      	lsls	r3, r3, #2
 81009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8100a02:	69ba      	ldr	r2, [r7, #24]
 8100a04:	4313      	orrs	r3, r2
 8100a06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100a08:	69fb      	ldr	r3, [r7, #28]
 8100a0a:	08da      	lsrs	r2, r3, #3
 8100a0c:	687b      	ldr	r3, [r7, #4]
 8100a0e:	3208      	adds	r2, #8
 8100a10:	69b9      	ldr	r1, [r7, #24]
 8100a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100a16:	687b      	ldr	r3, [r7, #4]
 8100a18:	681b      	ldr	r3, [r3, #0]
 8100a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100a1c:	69fb      	ldr	r3, [r7, #28]
 8100a1e:	005b      	lsls	r3, r3, #1
 8100a20:	2203      	movs	r2, #3
 8100a22:	fa02 f303 	lsl.w	r3, r2, r3
 8100a26:	43db      	mvns	r3, r3
 8100a28:	69ba      	ldr	r2, [r7, #24]
 8100a2a:	4013      	ands	r3, r2
 8100a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100a2e:	683b      	ldr	r3, [r7, #0]
 8100a30:	685b      	ldr	r3, [r3, #4]
 8100a32:	f003 0203 	and.w	r2, r3, #3
 8100a36:	69fb      	ldr	r3, [r7, #28]
 8100a38:	005b      	lsls	r3, r3, #1
 8100a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a3e:	69ba      	ldr	r2, [r7, #24]
 8100a40:	4313      	orrs	r3, r2
 8100a42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100a44:	687b      	ldr	r3, [r7, #4]
 8100a46:	69ba      	ldr	r2, [r7, #24]
 8100a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100a4a:	683b      	ldr	r3, [r7, #0]
 8100a4c:	685b      	ldr	r3, [r3, #4]
 8100a4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100a52:	2b00      	cmp	r3, #0
 8100a54:	f000 80e0 	beq.w	8100c18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a58:	4b2f      	ldr	r3, [pc, #188]	@ (8100b18 <HAL_GPIO_Init+0x238>)
 8100a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8100b18 <HAL_GPIO_Init+0x238>)
 8100a60:	f043 0302 	orr.w	r3, r3, #2
 8100a64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100a68:	4b2b      	ldr	r3, [pc, #172]	@ (8100b18 <HAL_GPIO_Init+0x238>)
 8100a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a6e:	f003 0302 	and.w	r3, r3, #2
 8100a72:	60fb      	str	r3, [r7, #12]
 8100a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100a76:	4a29      	ldr	r2, [pc, #164]	@ (8100b1c <HAL_GPIO_Init+0x23c>)
 8100a78:	69fb      	ldr	r3, [r7, #28]
 8100a7a:	089b      	lsrs	r3, r3, #2
 8100a7c:	3302      	adds	r3, #2
 8100a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100a84:	69fb      	ldr	r3, [r7, #28]
 8100a86:	f003 0303 	and.w	r3, r3, #3
 8100a8a:	009b      	lsls	r3, r3, #2
 8100a8c:	220f      	movs	r2, #15
 8100a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a92:	43db      	mvns	r3, r3
 8100a94:	69ba      	ldr	r2, [r7, #24]
 8100a96:	4013      	ands	r3, r2
 8100a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100a9a:	687b      	ldr	r3, [r7, #4]
 8100a9c:	4a20      	ldr	r2, [pc, #128]	@ (8100b20 <HAL_GPIO_Init+0x240>)
 8100a9e:	4293      	cmp	r3, r2
 8100aa0:	d052      	beq.n	8100b48 <HAL_GPIO_Init+0x268>
 8100aa2:	687b      	ldr	r3, [r7, #4]
 8100aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8100b24 <HAL_GPIO_Init+0x244>)
 8100aa6:	4293      	cmp	r3, r2
 8100aa8:	d031      	beq.n	8100b0e <HAL_GPIO_Init+0x22e>
 8100aaa:	687b      	ldr	r3, [r7, #4]
 8100aac:	4a1e      	ldr	r2, [pc, #120]	@ (8100b28 <HAL_GPIO_Init+0x248>)
 8100aae:	4293      	cmp	r3, r2
 8100ab0:	d02b      	beq.n	8100b0a <HAL_GPIO_Init+0x22a>
 8100ab2:	687b      	ldr	r3, [r7, #4]
 8100ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8100b2c <HAL_GPIO_Init+0x24c>)
 8100ab6:	4293      	cmp	r3, r2
 8100ab8:	d025      	beq.n	8100b06 <HAL_GPIO_Init+0x226>
 8100aba:	687b      	ldr	r3, [r7, #4]
 8100abc:	4a1c      	ldr	r2, [pc, #112]	@ (8100b30 <HAL_GPIO_Init+0x250>)
 8100abe:	4293      	cmp	r3, r2
 8100ac0:	d01f      	beq.n	8100b02 <HAL_GPIO_Init+0x222>
 8100ac2:	687b      	ldr	r3, [r7, #4]
 8100ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8100b34 <HAL_GPIO_Init+0x254>)
 8100ac6:	4293      	cmp	r3, r2
 8100ac8:	d019      	beq.n	8100afe <HAL_GPIO_Init+0x21e>
 8100aca:	687b      	ldr	r3, [r7, #4]
 8100acc:	4a1a      	ldr	r2, [pc, #104]	@ (8100b38 <HAL_GPIO_Init+0x258>)
 8100ace:	4293      	cmp	r3, r2
 8100ad0:	d013      	beq.n	8100afa <HAL_GPIO_Init+0x21a>
 8100ad2:	687b      	ldr	r3, [r7, #4]
 8100ad4:	4a19      	ldr	r2, [pc, #100]	@ (8100b3c <HAL_GPIO_Init+0x25c>)
 8100ad6:	4293      	cmp	r3, r2
 8100ad8:	d00d      	beq.n	8100af6 <HAL_GPIO_Init+0x216>
 8100ada:	687b      	ldr	r3, [r7, #4]
 8100adc:	4a18      	ldr	r2, [pc, #96]	@ (8100b40 <HAL_GPIO_Init+0x260>)
 8100ade:	4293      	cmp	r3, r2
 8100ae0:	d007      	beq.n	8100af2 <HAL_GPIO_Init+0x212>
 8100ae2:	687b      	ldr	r3, [r7, #4]
 8100ae4:	4a17      	ldr	r2, [pc, #92]	@ (8100b44 <HAL_GPIO_Init+0x264>)
 8100ae6:	4293      	cmp	r3, r2
 8100ae8:	d101      	bne.n	8100aee <HAL_GPIO_Init+0x20e>
 8100aea:	2309      	movs	r3, #9
 8100aec:	e02d      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100aee:	230a      	movs	r3, #10
 8100af0:	e02b      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100af2:	2308      	movs	r3, #8
 8100af4:	e029      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100af6:	2307      	movs	r3, #7
 8100af8:	e027      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100afa:	2306      	movs	r3, #6
 8100afc:	e025      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100afe:	2305      	movs	r3, #5
 8100b00:	e023      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100b02:	2304      	movs	r3, #4
 8100b04:	e021      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100b06:	2303      	movs	r3, #3
 8100b08:	e01f      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100b0a:	2302      	movs	r3, #2
 8100b0c:	e01d      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100b0e:	2301      	movs	r3, #1
 8100b10:	e01b      	b.n	8100b4a <HAL_GPIO_Init+0x26a>
 8100b12:	bf00      	nop
 8100b14:	580000c0 	.word	0x580000c0
 8100b18:	58024400 	.word	0x58024400
 8100b1c:	58000400 	.word	0x58000400
 8100b20:	58020000 	.word	0x58020000
 8100b24:	58020400 	.word	0x58020400
 8100b28:	58020800 	.word	0x58020800
 8100b2c:	58020c00 	.word	0x58020c00
 8100b30:	58021000 	.word	0x58021000
 8100b34:	58021400 	.word	0x58021400
 8100b38:	58021800 	.word	0x58021800
 8100b3c:	58021c00 	.word	0x58021c00
 8100b40:	58022000 	.word	0x58022000
 8100b44:	58022400 	.word	0x58022400
 8100b48:	2300      	movs	r3, #0
 8100b4a:	69fa      	ldr	r2, [r7, #28]
 8100b4c:	f002 0203 	and.w	r2, r2, #3
 8100b50:	0092      	lsls	r2, r2, #2
 8100b52:	4093      	lsls	r3, r2
 8100b54:	69ba      	ldr	r2, [r7, #24]
 8100b56:	4313      	orrs	r3, r2
 8100b58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100b5a:	4938      	ldr	r1, [pc, #224]	@ (8100c3c <HAL_GPIO_Init+0x35c>)
 8100b5c:	69fb      	ldr	r3, [r7, #28]
 8100b5e:	089b      	lsrs	r3, r3, #2
 8100b60:	3302      	adds	r3, #2
 8100b62:	69ba      	ldr	r2, [r7, #24]
 8100b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100b6c:	681b      	ldr	r3, [r3, #0]
 8100b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b70:	693b      	ldr	r3, [r7, #16]
 8100b72:	43db      	mvns	r3, r3
 8100b74:	69ba      	ldr	r2, [r7, #24]
 8100b76:	4013      	ands	r3, r2
 8100b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100b7a:	683b      	ldr	r3, [r7, #0]
 8100b7c:	685b      	ldr	r3, [r3, #4]
 8100b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100b82:	2b00      	cmp	r3, #0
 8100b84:	d003      	beq.n	8100b8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100b86:	69ba      	ldr	r2, [r7, #24]
 8100b88:	693b      	ldr	r3, [r7, #16]
 8100b8a:	4313      	orrs	r3, r2
 8100b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100b8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100b92:	69bb      	ldr	r3, [r7, #24]
 8100b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100b9a:	685b      	ldr	r3, [r3, #4]
 8100b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b9e:	693b      	ldr	r3, [r7, #16]
 8100ba0:	43db      	mvns	r3, r3
 8100ba2:	69ba      	ldr	r2, [r7, #24]
 8100ba4:	4013      	ands	r3, r2
 8100ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100ba8:	683b      	ldr	r3, [r7, #0]
 8100baa:	685b      	ldr	r3, [r3, #4]
 8100bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100bb0:	2b00      	cmp	r3, #0
 8100bb2:	d003      	beq.n	8100bbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100bb4:	69ba      	ldr	r2, [r7, #24]
 8100bb6:	693b      	ldr	r3, [r7, #16]
 8100bb8:	4313      	orrs	r3, r2
 8100bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100bbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100bc0:	69bb      	ldr	r3, [r7, #24]
 8100bc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100bc4:	697b      	ldr	r3, [r7, #20]
 8100bc6:	685b      	ldr	r3, [r3, #4]
 8100bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100bca:	693b      	ldr	r3, [r7, #16]
 8100bcc:	43db      	mvns	r3, r3
 8100bce:	69ba      	ldr	r2, [r7, #24]
 8100bd0:	4013      	ands	r3, r2
 8100bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100bd4:	683b      	ldr	r3, [r7, #0]
 8100bd6:	685b      	ldr	r3, [r3, #4]
 8100bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100bdc:	2b00      	cmp	r3, #0
 8100bde:	d003      	beq.n	8100be8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100be0:	69ba      	ldr	r2, [r7, #24]
 8100be2:	693b      	ldr	r3, [r7, #16]
 8100be4:	4313      	orrs	r3, r2
 8100be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100be8:	697b      	ldr	r3, [r7, #20]
 8100bea:	69ba      	ldr	r2, [r7, #24]
 8100bec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100bee:	697b      	ldr	r3, [r7, #20]
 8100bf0:	681b      	ldr	r3, [r3, #0]
 8100bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100bf4:	693b      	ldr	r3, [r7, #16]
 8100bf6:	43db      	mvns	r3, r3
 8100bf8:	69ba      	ldr	r2, [r7, #24]
 8100bfa:	4013      	ands	r3, r2
 8100bfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100bfe:	683b      	ldr	r3, [r7, #0]
 8100c00:	685b      	ldr	r3, [r3, #4]
 8100c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100c06:	2b00      	cmp	r3, #0
 8100c08:	d003      	beq.n	8100c12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100c0a:	69ba      	ldr	r2, [r7, #24]
 8100c0c:	693b      	ldr	r3, [r7, #16]
 8100c0e:	4313      	orrs	r3, r2
 8100c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100c12:	697b      	ldr	r3, [r7, #20]
 8100c14:	69ba      	ldr	r2, [r7, #24]
 8100c16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100c18:	69fb      	ldr	r3, [r7, #28]
 8100c1a:	3301      	adds	r3, #1
 8100c1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100c1e:	683b      	ldr	r3, [r7, #0]
 8100c20:	681a      	ldr	r2, [r3, #0]
 8100c22:	69fb      	ldr	r3, [r7, #28]
 8100c24:	fa22 f303 	lsr.w	r3, r2, r3
 8100c28:	2b00      	cmp	r3, #0
 8100c2a:	f47f ae63 	bne.w	81008f4 <HAL_GPIO_Init+0x14>
  }
}
 8100c2e:	bf00      	nop
 8100c30:	bf00      	nop
 8100c32:	3724      	adds	r7, #36	@ 0x24
 8100c34:	46bd      	mov	sp, r7
 8100c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c3a:	4770      	bx	lr
 8100c3c:	58000400 	.word	0x58000400

08100c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100c40:	b480      	push	{r7}
 8100c42:	b083      	sub	sp, #12
 8100c44:	af00      	add	r7, sp, #0
 8100c46:	6078      	str	r0, [r7, #4]
 8100c48:	460b      	mov	r3, r1
 8100c4a:	807b      	strh	r3, [r7, #2]
 8100c4c:	4613      	mov	r3, r2
 8100c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100c50:	787b      	ldrb	r3, [r7, #1]
 8100c52:	2b00      	cmp	r3, #0
 8100c54:	d003      	beq.n	8100c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100c56:	887a      	ldrh	r2, [r7, #2]
 8100c58:	687b      	ldr	r3, [r7, #4]
 8100c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100c5c:	e003      	b.n	8100c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100c5e:	887b      	ldrh	r3, [r7, #2]
 8100c60:	041a      	lsls	r2, r3, #16
 8100c62:	687b      	ldr	r3, [r7, #4]
 8100c64:	619a      	str	r2, [r3, #24]
}
 8100c66:	bf00      	nop
 8100c68:	370c      	adds	r7, #12
 8100c6a:	46bd      	mov	sp, r7
 8100c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c70:	4770      	bx	lr

08100c72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100c72:	b480      	push	{r7}
 8100c74:	b085      	sub	sp, #20
 8100c76:	af00      	add	r7, sp, #0
 8100c78:	6078      	str	r0, [r7, #4]
 8100c7a:	460b      	mov	r3, r1
 8100c7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100c7e:	687b      	ldr	r3, [r7, #4]
 8100c80:	695b      	ldr	r3, [r3, #20]
 8100c82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100c84:	887a      	ldrh	r2, [r7, #2]
 8100c86:	68fb      	ldr	r3, [r7, #12]
 8100c88:	4013      	ands	r3, r2
 8100c8a:	041a      	lsls	r2, r3, #16
 8100c8c:	68fb      	ldr	r3, [r7, #12]
 8100c8e:	43d9      	mvns	r1, r3
 8100c90:	887b      	ldrh	r3, [r7, #2]
 8100c92:	400b      	ands	r3, r1
 8100c94:	431a      	orrs	r2, r3
 8100c96:	687b      	ldr	r3, [r7, #4]
 8100c98:	619a      	str	r2, [r3, #24]
}
 8100c9a:	bf00      	nop
 8100c9c:	3714      	adds	r7, #20
 8100c9e:	46bd      	mov	sp, r7
 8100ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ca4:	4770      	bx	lr
	...

08100ca8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100ca8:	b480      	push	{r7}
 8100caa:	b083      	sub	sp, #12
 8100cac:	af00      	add	r7, sp, #0
 8100cae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100cb0:	4b05      	ldr	r3, [pc, #20]	@ (8100cc8 <HAL_HSEM_ActivateNotification+0x20>)
 8100cb2:	681a      	ldr	r2, [r3, #0]
 8100cb4:	4904      	ldr	r1, [pc, #16]	@ (8100cc8 <HAL_HSEM_ActivateNotification+0x20>)
 8100cb6:	687b      	ldr	r3, [r7, #4]
 8100cb8:	4313      	orrs	r3, r2
 8100cba:	600b      	str	r3, [r1, #0]
#endif
}
 8100cbc:	bf00      	nop
 8100cbe:	370c      	adds	r7, #12
 8100cc0:	46bd      	mov	sp, r7
 8100cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cc6:	4770      	bx	lr
 8100cc8:	58026510 	.word	0x58026510

08100ccc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100ccc:	b580      	push	{r7, lr}
 8100cce:	b084      	sub	sp, #16
 8100cd0:	af00      	add	r7, sp, #0
 8100cd2:	60f8      	str	r0, [r7, #12]
 8100cd4:	460b      	mov	r3, r1
 8100cd6:	607a      	str	r2, [r7, #4]
 8100cd8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100cda:	4b37      	ldr	r3, [pc, #220]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cdc:	681b      	ldr	r3, [r3, #0]
 8100cde:	f023 0201 	bic.w	r2, r3, #1
 8100ce2:	4935      	ldr	r1, [pc, #212]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ce4:	68fb      	ldr	r3, [r7, #12]
 8100ce6:	4313      	orrs	r3, r2
 8100ce8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100cea:	687b      	ldr	r3, [r7, #4]
 8100cec:	2b00      	cmp	r3, #0
 8100cee:	d123      	bne.n	8100d38 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100cf0:	f7ff fde2 	bl	81008b8 <HAL_GetCurrentCPUID>
 8100cf4:	4603      	mov	r3, r0
 8100cf6:	2b03      	cmp	r3, #3
 8100cf8:	d158      	bne.n	8100dac <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cfc:	691b      	ldr	r3, [r3, #16]
 8100cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d00:	f023 0301 	bic.w	r3, r3, #1
 8100d04:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d06:	4b2d      	ldr	r3, [pc, #180]	@ (8100dbc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d08:	691b      	ldr	r3, [r3, #16]
 8100d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8100dbc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d0c:	f043 0304 	orr.w	r3, r3, #4
 8100d10:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100d12:	f3bf 8f4f 	dsb	sy
}
 8100d16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100d18:	f3bf 8f6f 	isb	sy
}
 8100d1c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100d1e:	7afb      	ldrb	r3, [r7, #11]
 8100d20:	2b01      	cmp	r3, #1
 8100d22:	d101      	bne.n	8100d28 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100d24:	bf30      	wfi
 8100d26:	e000      	b.n	8100d2a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100d28:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d2a:	4b24      	ldr	r3, [pc, #144]	@ (8100dbc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d2c:	691b      	ldr	r3, [r3, #16]
 8100d2e:	4a23      	ldr	r2, [pc, #140]	@ (8100dbc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d30:	f023 0304 	bic.w	r3, r3, #4
 8100d34:	6113      	str	r3, [r2, #16]
 8100d36:	e03c      	b.n	8100db2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100d38:	687b      	ldr	r3, [r7, #4]
 8100d3a:	2b01      	cmp	r3, #1
 8100d3c:	d123      	bne.n	8100d86 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100d3e:	f7ff fdbb 	bl	81008b8 <HAL_GetCurrentCPUID>
 8100d42:	4603      	mov	r3, r0
 8100d44:	2b01      	cmp	r3, #1
 8100d46:	d133      	bne.n	8100db0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100d48:	4b1b      	ldr	r3, [pc, #108]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d4a:	695b      	ldr	r3, [r3, #20]
 8100d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d4e:	f023 0302 	bic.w	r3, r3, #2
 8100d52:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d54:	4b19      	ldr	r3, [pc, #100]	@ (8100dbc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d56:	691b      	ldr	r3, [r3, #16]
 8100d58:	4a18      	ldr	r2, [pc, #96]	@ (8100dbc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d5a:	f043 0304 	orr.w	r3, r3, #4
 8100d5e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100d60:	f3bf 8f4f 	dsb	sy
}
 8100d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100d66:	f3bf 8f6f 	isb	sy
}
 8100d6a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100d6c:	7afb      	ldrb	r3, [r7, #11]
 8100d6e:	2b01      	cmp	r3, #1
 8100d70:	d101      	bne.n	8100d76 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100d72:	bf30      	wfi
 8100d74:	e000      	b.n	8100d78 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100d76:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d78:	4b10      	ldr	r3, [pc, #64]	@ (8100dbc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d7a:	691b      	ldr	r3, [r3, #16]
 8100d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8100dbc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d7e:	f023 0304 	bic.w	r3, r3, #4
 8100d82:	6113      	str	r3, [r2, #16]
 8100d84:	e015      	b.n	8100db2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d86:	f7ff fd97 	bl	81008b8 <HAL_GetCurrentCPUID>
 8100d8a:	4603      	mov	r3, r0
 8100d8c:	2b03      	cmp	r3, #3
 8100d8e:	d106      	bne.n	8100d9e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100d90:	4b09      	ldr	r3, [pc, #36]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d92:	691b      	ldr	r3, [r3, #16]
 8100d94:	4a08      	ldr	r2, [pc, #32]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d96:	f023 0304 	bic.w	r3, r3, #4
 8100d9a:	6113      	str	r3, [r2, #16]
 8100d9c:	e009      	b.n	8100db2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100d9e:	4b06      	ldr	r3, [pc, #24]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100da0:	695b      	ldr	r3, [r3, #20]
 8100da2:	4a05      	ldr	r2, [pc, #20]	@ (8100db8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100da4:	f023 0304 	bic.w	r3, r3, #4
 8100da8:	6153      	str	r3, [r2, #20]
 8100daa:	e002      	b.n	8100db2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100dac:	bf00      	nop
 8100dae:	e000      	b.n	8100db2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100db0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100db2:	3710      	adds	r7, #16
 8100db4:	46bd      	mov	sp, r7
 8100db6:	bd80      	pop	{r7, pc}
 8100db8:	58024800 	.word	0x58024800
 8100dbc:	e000ed00 	.word	0xe000ed00

08100dc0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100dc0:	b580      	push	{r7, lr}
 8100dc2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100dc4:	f7ff fd78 	bl	81008b8 <HAL_GetCurrentCPUID>
 8100dc8:	4603      	mov	r3, r0
 8100dca:	2b03      	cmp	r3, #3
 8100dcc:	d101      	bne.n	8100dd2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100dce:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100dd0:	e001      	b.n	8100dd6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100dd2:	bf40      	sev
    __WFE ();
 8100dd4:	bf20      	wfe
}
 8100dd6:	bf00      	nop
 8100dd8:	bd80      	pop	{r7, pc}
	...

08100ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100ddc:	b480      	push	{r7}
 8100dde:	b089      	sub	sp, #36	@ 0x24
 8100de0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100de2:	4bb3      	ldr	r3, [pc, #716]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100de4:	691b      	ldr	r3, [r3, #16]
 8100de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8100dea:	2b18      	cmp	r3, #24
 8100dec:	f200 8155 	bhi.w	810109a <HAL_RCC_GetSysClockFreq+0x2be>
 8100df0:	a201      	add	r2, pc, #4	@ (adr r2, 8100df8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100df6:	bf00      	nop
 8100df8:	08100e5d 	.word	0x08100e5d
 8100dfc:	0810109b 	.word	0x0810109b
 8100e00:	0810109b 	.word	0x0810109b
 8100e04:	0810109b 	.word	0x0810109b
 8100e08:	0810109b 	.word	0x0810109b
 8100e0c:	0810109b 	.word	0x0810109b
 8100e10:	0810109b 	.word	0x0810109b
 8100e14:	0810109b 	.word	0x0810109b
 8100e18:	08100e83 	.word	0x08100e83
 8100e1c:	0810109b 	.word	0x0810109b
 8100e20:	0810109b 	.word	0x0810109b
 8100e24:	0810109b 	.word	0x0810109b
 8100e28:	0810109b 	.word	0x0810109b
 8100e2c:	0810109b 	.word	0x0810109b
 8100e30:	0810109b 	.word	0x0810109b
 8100e34:	0810109b 	.word	0x0810109b
 8100e38:	08100e89 	.word	0x08100e89
 8100e3c:	0810109b 	.word	0x0810109b
 8100e40:	0810109b 	.word	0x0810109b
 8100e44:	0810109b 	.word	0x0810109b
 8100e48:	0810109b 	.word	0x0810109b
 8100e4c:	0810109b 	.word	0x0810109b
 8100e50:	0810109b 	.word	0x0810109b
 8100e54:	0810109b 	.word	0x0810109b
 8100e58:	08100e8f 	.word	0x08100e8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100e5c:	4b94      	ldr	r3, [pc, #592]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e5e:	681b      	ldr	r3, [r3, #0]
 8100e60:	f003 0320 	and.w	r3, r3, #32
 8100e64:	2b00      	cmp	r3, #0
 8100e66:	d009      	beq.n	8100e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100e68:	4b91      	ldr	r3, [pc, #580]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e6a:	681b      	ldr	r3, [r3, #0]
 8100e6c:	08db      	lsrs	r3, r3, #3
 8100e6e:	f003 0303 	and.w	r3, r3, #3
 8100e72:	4a90      	ldr	r2, [pc, #576]	@ (81010b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e74:	fa22 f303 	lsr.w	r3, r2, r3
 8100e78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100e7a:	e111      	b.n	81010a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100e7c:	4b8d      	ldr	r3, [pc, #564]	@ (81010b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e7e:	61bb      	str	r3, [r7, #24]
      break;
 8100e80:	e10e      	b.n	81010a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100e82:	4b8d      	ldr	r3, [pc, #564]	@ (81010b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100e84:	61bb      	str	r3, [r7, #24]
      break;
 8100e86:	e10b      	b.n	81010a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100e88:	4b8c      	ldr	r3, [pc, #560]	@ (81010bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100e8a:	61bb      	str	r3, [r7, #24]
      break;
 8100e8c:	e108      	b.n	81010a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100e8e:	4b88      	ldr	r3, [pc, #544]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100e92:	f003 0303 	and.w	r3, r3, #3
 8100e96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100e98:	4b85      	ldr	r3, [pc, #532]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100e9c:	091b      	lsrs	r3, r3, #4
 8100e9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100ea2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100ea4:	4b82      	ldr	r3, [pc, #520]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100ea8:	f003 0301 	and.w	r3, r3, #1
 8100eac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100eae:	4b80      	ldr	r3, [pc, #512]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100eb2:	08db      	lsrs	r3, r3, #3
 8100eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100eb8:	68fa      	ldr	r2, [r7, #12]
 8100eba:	fb02 f303 	mul.w	r3, r2, r3
 8100ebe:	ee07 3a90 	vmov	s15, r3
 8100ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ec6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100eca:	693b      	ldr	r3, [r7, #16]
 8100ecc:	2b00      	cmp	r3, #0
 8100ece:	f000 80e1 	beq.w	8101094 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100ed2:	697b      	ldr	r3, [r7, #20]
 8100ed4:	2b02      	cmp	r3, #2
 8100ed6:	f000 8083 	beq.w	8100fe0 <HAL_RCC_GetSysClockFreq+0x204>
 8100eda:	697b      	ldr	r3, [r7, #20]
 8100edc:	2b02      	cmp	r3, #2
 8100ede:	f200 80a1 	bhi.w	8101024 <HAL_RCC_GetSysClockFreq+0x248>
 8100ee2:	697b      	ldr	r3, [r7, #20]
 8100ee4:	2b00      	cmp	r3, #0
 8100ee6:	d003      	beq.n	8100ef0 <HAL_RCC_GetSysClockFreq+0x114>
 8100ee8:	697b      	ldr	r3, [r7, #20]
 8100eea:	2b01      	cmp	r3, #1
 8100eec:	d056      	beq.n	8100f9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8100eee:	e099      	b.n	8101024 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100ef0:	4b6f      	ldr	r3, [pc, #444]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ef2:	681b      	ldr	r3, [r3, #0]
 8100ef4:	f003 0320 	and.w	r3, r3, #32
 8100ef8:	2b00      	cmp	r3, #0
 8100efa:	d02d      	beq.n	8100f58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100efc:	4b6c      	ldr	r3, [pc, #432]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100efe:	681b      	ldr	r3, [r3, #0]
 8100f00:	08db      	lsrs	r3, r3, #3
 8100f02:	f003 0303 	and.w	r3, r3, #3
 8100f06:	4a6b      	ldr	r2, [pc, #428]	@ (81010b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100f08:	fa22 f303 	lsr.w	r3, r2, r3
 8100f0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	ee07 3a90 	vmov	s15, r3
 8100f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f18:	693b      	ldr	r3, [r7, #16]
 8100f1a:	ee07 3a90 	vmov	s15, r3
 8100f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f26:	4b62      	ldr	r3, [pc, #392]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f2e:	ee07 3a90 	vmov	s15, r3
 8100f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81010c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100f56:	e087      	b.n	8101068 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f58:	693b      	ldr	r3, [r7, #16]
 8100f5a:	ee07 3a90 	vmov	s15, r3
 8100f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81010c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f6a:	4b51      	ldr	r3, [pc, #324]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f72:	ee07 3a90 	vmov	s15, r3
 8100f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81010c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100f9a:	e065      	b.n	8101068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f9c:	693b      	ldr	r3, [r7, #16]
 8100f9e:	ee07 3a90 	vmov	s15, r3
 8100fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81010c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fae:	4b40      	ldr	r3, [pc, #256]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fb6:	ee07 3a90 	vmov	s15, r3
 8100fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81010c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100fda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100fde:	e043      	b.n	8101068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100fe0:	693b      	ldr	r3, [r7, #16]
 8100fe2:	ee07 3a90 	vmov	s15, r3
 8100fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81010cc <HAL_RCC_GetSysClockFreq+0x2f0>
 8100fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ff2:	4b2f      	ldr	r3, [pc, #188]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ffa:	ee07 3a90 	vmov	s15, r3
 8100ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101002:	ed97 6a02 	vldr	s12, [r7, #8]
 8101006:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81010c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810100a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810100e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810101a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810101e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101022:	e021      	b.n	8101068 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101024:	693b      	ldr	r3, [r7, #16]
 8101026:	ee07 3a90 	vmov	s15, r3
 810102a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810102e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81010c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101036:	4b1e      	ldr	r3, [pc, #120]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810103a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810103e:	ee07 3a90 	vmov	s15, r3
 8101042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101046:	ed97 6a02 	vldr	s12, [r7, #8]
 810104a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81010c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810104e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810105a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101066:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101068:	4b11      	ldr	r3, [pc, #68]	@ (81010b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810106c:	0a5b      	lsrs	r3, r3, #9
 810106e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101072:	3301      	adds	r3, #1
 8101074:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101076:	683b      	ldr	r3, [r7, #0]
 8101078:	ee07 3a90 	vmov	s15, r3
 810107c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101080:	edd7 6a07 	vldr	s13, [r7, #28]
 8101084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810108c:	ee17 3a90 	vmov	r3, s15
 8101090:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101092:	e005      	b.n	81010a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101094:	2300      	movs	r3, #0
 8101096:	61bb      	str	r3, [r7, #24]
      break;
 8101098:	e002      	b.n	81010a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810109a:	4b07      	ldr	r3, [pc, #28]	@ (81010b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810109c:	61bb      	str	r3, [r7, #24]
      break;
 810109e:	bf00      	nop
  }

  return sysclockfreq;
 81010a0:	69bb      	ldr	r3, [r7, #24]
}
 81010a2:	4618      	mov	r0, r3
 81010a4:	3724      	adds	r7, #36	@ 0x24
 81010a6:	46bd      	mov	sp, r7
 81010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ac:	4770      	bx	lr
 81010ae:	bf00      	nop
 81010b0:	58024400 	.word	0x58024400
 81010b4:	03d09000 	.word	0x03d09000
 81010b8:	003d0900 	.word	0x003d0900
 81010bc:	007a1200 	.word	0x007a1200
 81010c0:	46000000 	.word	0x46000000
 81010c4:	4c742400 	.word	0x4c742400
 81010c8:	4a742400 	.word	0x4a742400
 81010cc:	4af42400 	.word	0x4af42400

081010d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81010d0:	b580      	push	{r7, lr}
 81010d2:	b082      	sub	sp, #8
 81010d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81010d6:	f7ff fe81 	bl	8100ddc <HAL_RCC_GetSysClockFreq>
 81010da:	4602      	mov	r2, r0
 81010dc:	4b11      	ldr	r3, [pc, #68]	@ (8101124 <HAL_RCC_GetHCLKFreq+0x54>)
 81010de:	699b      	ldr	r3, [r3, #24]
 81010e0:	0a1b      	lsrs	r3, r3, #8
 81010e2:	f003 030f 	and.w	r3, r3, #15
 81010e6:	4910      	ldr	r1, [pc, #64]	@ (8101128 <HAL_RCC_GetHCLKFreq+0x58>)
 81010e8:	5ccb      	ldrb	r3, [r1, r3]
 81010ea:	f003 031f 	and.w	r3, r3, #31
 81010ee:	fa22 f303 	lsr.w	r3, r2, r3
 81010f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8101124 <HAL_RCC_GetHCLKFreq+0x54>)
 81010f6:	699b      	ldr	r3, [r3, #24]
 81010f8:	f003 030f 	and.w	r3, r3, #15
 81010fc:	4a0a      	ldr	r2, [pc, #40]	@ (8101128 <HAL_RCC_GetHCLKFreq+0x58>)
 81010fe:	5cd3      	ldrb	r3, [r2, r3]
 8101100:	f003 031f 	and.w	r3, r3, #31
 8101104:	687a      	ldr	r2, [r7, #4]
 8101106:	fa22 f303 	lsr.w	r3, r2, r3
 810110a:	4a08      	ldr	r2, [pc, #32]	@ (810112c <HAL_RCC_GetHCLKFreq+0x5c>)
 810110c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810110e:	4b07      	ldr	r3, [pc, #28]	@ (810112c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101110:	681b      	ldr	r3, [r3, #0]
 8101112:	4a07      	ldr	r2, [pc, #28]	@ (8101130 <HAL_RCC_GetHCLKFreq+0x60>)
 8101114:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101116:	4b05      	ldr	r3, [pc, #20]	@ (810112c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101118:	681b      	ldr	r3, [r3, #0]
}
 810111a:	4618      	mov	r0, r3
 810111c:	3708      	adds	r7, #8
 810111e:	46bd      	mov	sp, r7
 8101120:	bd80      	pop	{r7, pc}
 8101122:	bf00      	nop
 8101124:	58024400 	.word	0x58024400
 8101128:	08104574 	.word	0x08104574
 810112c:	10000004 	.word	0x10000004
 8101130:	10000000 	.word	0x10000000

08101134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101134:	b580      	push	{r7, lr}
 8101136:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101138:	f7ff ffca 	bl	81010d0 <HAL_RCC_GetHCLKFreq>
 810113c:	4602      	mov	r2, r0
 810113e:	4b06      	ldr	r3, [pc, #24]	@ (8101158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101140:	69db      	ldr	r3, [r3, #28]
 8101142:	091b      	lsrs	r3, r3, #4
 8101144:	f003 0307 	and.w	r3, r3, #7
 8101148:	4904      	ldr	r1, [pc, #16]	@ (810115c <HAL_RCC_GetPCLK1Freq+0x28>)
 810114a:	5ccb      	ldrb	r3, [r1, r3]
 810114c:	f003 031f 	and.w	r3, r3, #31
 8101150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101154:	4618      	mov	r0, r3
 8101156:	bd80      	pop	{r7, pc}
 8101158:	58024400 	.word	0x58024400
 810115c:	08104574 	.word	0x08104574

08101160 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101160:	b480      	push	{r7}
 8101162:	b083      	sub	sp, #12
 8101164:	af00      	add	r7, sp, #0
 8101166:	6078      	str	r0, [r7, #4]
 8101168:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	223f      	movs	r2, #63	@ 0x3f
 810116e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101170:	4b1a      	ldr	r3, [pc, #104]	@ (81011dc <HAL_RCC_GetClockConfig+0x7c>)
 8101172:	691b      	ldr	r3, [r3, #16]
 8101174:	f003 0207 	and.w	r2, r3, #7
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810117c:	4b17      	ldr	r3, [pc, #92]	@ (81011dc <HAL_RCC_GetClockConfig+0x7c>)
 810117e:	699b      	ldr	r3, [r3, #24]
 8101180:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8101184:	687b      	ldr	r3, [r7, #4]
 8101186:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101188:	4b14      	ldr	r3, [pc, #80]	@ (81011dc <HAL_RCC_GetClockConfig+0x7c>)
 810118a:	699b      	ldr	r3, [r3, #24]
 810118c:	f003 020f 	and.w	r2, r3, #15
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101194:	4b11      	ldr	r3, [pc, #68]	@ (81011dc <HAL_RCC_GetClockConfig+0x7c>)
 8101196:	699b      	ldr	r3, [r3, #24]
 8101198:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81011a0:	4b0e      	ldr	r3, [pc, #56]	@ (81011dc <HAL_RCC_GetClockConfig+0x7c>)
 81011a2:	69db      	ldr	r3, [r3, #28]
 81011a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81011ac:	4b0b      	ldr	r3, [pc, #44]	@ (81011dc <HAL_RCC_GetClockConfig+0x7c>)
 81011ae:	69db      	ldr	r3, [r3, #28]
 81011b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 81011b4:	687b      	ldr	r3, [r7, #4]
 81011b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81011b8:	4b08      	ldr	r3, [pc, #32]	@ (81011dc <HAL_RCC_GetClockConfig+0x7c>)
 81011ba:	6a1b      	ldr	r3, [r3, #32]
 81011bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 81011c0:	687b      	ldr	r3, [r7, #4]
 81011c2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81011c4:	4b06      	ldr	r3, [pc, #24]	@ (81011e0 <HAL_RCC_GetClockConfig+0x80>)
 81011c6:	681b      	ldr	r3, [r3, #0]
 81011c8:	f003 020f 	and.w	r2, r3, #15
 81011cc:	683b      	ldr	r3, [r7, #0]
 81011ce:	601a      	str	r2, [r3, #0]
}
 81011d0:	bf00      	nop
 81011d2:	370c      	adds	r7, #12
 81011d4:	46bd      	mov	sp, r7
 81011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011da:	4770      	bx	lr
 81011dc:	58024400 	.word	0x58024400
 81011e0:	52002000 	.word	0x52002000

081011e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81011e4:	b580      	push	{r7, lr}
 81011e6:	b082      	sub	sp, #8
 81011e8:	af00      	add	r7, sp, #0
 81011ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	2b00      	cmp	r3, #0
 81011f0:	d101      	bne.n	81011f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81011f2:	2301      	movs	r3, #1
 81011f4:	e049      	b.n	810128a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81011fc:	b2db      	uxtb	r3, r3
 81011fe:	2b00      	cmp	r3, #0
 8101200:	d106      	bne.n	8101210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101202:	687b      	ldr	r3, [r7, #4]
 8101204:	2200      	movs	r2, #0
 8101206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810120a:	6878      	ldr	r0, [r7, #4]
 810120c:	f000 f841 	bl	8101292 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	2202      	movs	r2, #2
 8101214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	681a      	ldr	r2, [r3, #0]
 810121c:	687b      	ldr	r3, [r7, #4]
 810121e:	3304      	adds	r3, #4
 8101220:	4619      	mov	r1, r3
 8101222:	4610      	mov	r0, r2
 8101224:	f000 f9e8 	bl	81015f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101228:	687b      	ldr	r3, [r7, #4]
 810122a:	2201      	movs	r2, #1
 810122c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	2201      	movs	r2, #1
 8101234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8101238:	687b      	ldr	r3, [r7, #4]
 810123a:	2201      	movs	r2, #1
 810123c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	2201      	movs	r2, #1
 8101244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	2201      	movs	r2, #1
 810124c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	2201      	movs	r2, #1
 8101254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	2201      	movs	r2, #1
 810125c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101260:	687b      	ldr	r3, [r7, #4]
 8101262:	2201      	movs	r2, #1
 8101264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8101268:	687b      	ldr	r3, [r7, #4]
 810126a:	2201      	movs	r2, #1
 810126c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	2201      	movs	r2, #1
 8101274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8101278:	687b      	ldr	r3, [r7, #4]
 810127a:	2201      	movs	r2, #1
 810127c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101280:	687b      	ldr	r3, [r7, #4]
 8101282:	2201      	movs	r2, #1
 8101284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8101288:	2300      	movs	r3, #0
}
 810128a:	4618      	mov	r0, r3
 810128c:	3708      	adds	r7, #8
 810128e:	46bd      	mov	sp, r7
 8101290:	bd80      	pop	{r7, pc}

08101292 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8101292:	b480      	push	{r7}
 8101294:	b083      	sub	sp, #12
 8101296:	af00      	add	r7, sp, #0
 8101298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810129a:	bf00      	nop
 810129c:	370c      	adds	r7, #12
 810129e:	46bd      	mov	sp, r7
 81012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012a4:	4770      	bx	lr
	...

081012a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81012a8:	b480      	push	{r7}
 81012aa:	b085      	sub	sp, #20
 81012ac:	af00      	add	r7, sp, #0
 81012ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81012b0:	687b      	ldr	r3, [r7, #4]
 81012b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81012b6:	b2db      	uxtb	r3, r3
 81012b8:	2b01      	cmp	r3, #1
 81012ba:	d001      	beq.n	81012c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81012bc:	2301      	movs	r3, #1
 81012be:	e054      	b.n	810136a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	2202      	movs	r2, #2
 81012c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81012c8:	687b      	ldr	r3, [r7, #4]
 81012ca:	681b      	ldr	r3, [r3, #0]
 81012cc:	68da      	ldr	r2, [r3, #12]
 81012ce:	687b      	ldr	r3, [r7, #4]
 81012d0:	681b      	ldr	r3, [r3, #0]
 81012d2:	f042 0201 	orr.w	r2, r2, #1
 81012d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81012d8:	687b      	ldr	r3, [r7, #4]
 81012da:	681b      	ldr	r3, [r3, #0]
 81012dc:	4a26      	ldr	r2, [pc, #152]	@ (8101378 <HAL_TIM_Base_Start_IT+0xd0>)
 81012de:	4293      	cmp	r3, r2
 81012e0:	d022      	beq.n	8101328 <HAL_TIM_Base_Start_IT+0x80>
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	681b      	ldr	r3, [r3, #0]
 81012e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81012ea:	d01d      	beq.n	8101328 <HAL_TIM_Base_Start_IT+0x80>
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	681b      	ldr	r3, [r3, #0]
 81012f0:	4a22      	ldr	r2, [pc, #136]	@ (810137c <HAL_TIM_Base_Start_IT+0xd4>)
 81012f2:	4293      	cmp	r3, r2
 81012f4:	d018      	beq.n	8101328 <HAL_TIM_Base_Start_IT+0x80>
 81012f6:	687b      	ldr	r3, [r7, #4]
 81012f8:	681b      	ldr	r3, [r3, #0]
 81012fa:	4a21      	ldr	r2, [pc, #132]	@ (8101380 <HAL_TIM_Base_Start_IT+0xd8>)
 81012fc:	4293      	cmp	r3, r2
 81012fe:	d013      	beq.n	8101328 <HAL_TIM_Base_Start_IT+0x80>
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	4a1f      	ldr	r2, [pc, #124]	@ (8101384 <HAL_TIM_Base_Start_IT+0xdc>)
 8101306:	4293      	cmp	r3, r2
 8101308:	d00e      	beq.n	8101328 <HAL_TIM_Base_Start_IT+0x80>
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	681b      	ldr	r3, [r3, #0]
 810130e:	4a1e      	ldr	r2, [pc, #120]	@ (8101388 <HAL_TIM_Base_Start_IT+0xe0>)
 8101310:	4293      	cmp	r3, r2
 8101312:	d009      	beq.n	8101328 <HAL_TIM_Base_Start_IT+0x80>
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	681b      	ldr	r3, [r3, #0]
 8101318:	4a1c      	ldr	r2, [pc, #112]	@ (810138c <HAL_TIM_Base_Start_IT+0xe4>)
 810131a:	4293      	cmp	r3, r2
 810131c:	d004      	beq.n	8101328 <HAL_TIM_Base_Start_IT+0x80>
 810131e:	687b      	ldr	r3, [r7, #4]
 8101320:	681b      	ldr	r3, [r3, #0]
 8101322:	4a1b      	ldr	r2, [pc, #108]	@ (8101390 <HAL_TIM_Base_Start_IT+0xe8>)
 8101324:	4293      	cmp	r3, r2
 8101326:	d115      	bne.n	8101354 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	681b      	ldr	r3, [r3, #0]
 810132c:	689a      	ldr	r2, [r3, #8]
 810132e:	4b19      	ldr	r3, [pc, #100]	@ (8101394 <HAL_TIM_Base_Start_IT+0xec>)
 8101330:	4013      	ands	r3, r2
 8101332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101334:	68fb      	ldr	r3, [r7, #12]
 8101336:	2b06      	cmp	r3, #6
 8101338:	d015      	beq.n	8101366 <HAL_TIM_Base_Start_IT+0xbe>
 810133a:	68fb      	ldr	r3, [r7, #12]
 810133c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101340:	d011      	beq.n	8101366 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	681b      	ldr	r3, [r3, #0]
 8101346:	681a      	ldr	r2, [r3, #0]
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	681b      	ldr	r3, [r3, #0]
 810134c:	f042 0201 	orr.w	r2, r2, #1
 8101350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101352:	e008      	b.n	8101366 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8101354:	687b      	ldr	r3, [r7, #4]
 8101356:	681b      	ldr	r3, [r3, #0]
 8101358:	681a      	ldr	r2, [r3, #0]
 810135a:	687b      	ldr	r3, [r7, #4]
 810135c:	681b      	ldr	r3, [r3, #0]
 810135e:	f042 0201 	orr.w	r2, r2, #1
 8101362:	601a      	str	r2, [r3, #0]
 8101364:	e000      	b.n	8101368 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101368:	2300      	movs	r3, #0
}
 810136a:	4618      	mov	r0, r3
 810136c:	3714      	adds	r7, #20
 810136e:	46bd      	mov	sp, r7
 8101370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101374:	4770      	bx	lr
 8101376:	bf00      	nop
 8101378:	40010000 	.word	0x40010000
 810137c:	40000400 	.word	0x40000400
 8101380:	40000800 	.word	0x40000800
 8101384:	40000c00 	.word	0x40000c00
 8101388:	40010400 	.word	0x40010400
 810138c:	40001800 	.word	0x40001800
 8101390:	40014000 	.word	0x40014000
 8101394:	00010007 	.word	0x00010007

08101398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8101398:	b580      	push	{r7, lr}
 810139a:	b084      	sub	sp, #16
 810139c:	af00      	add	r7, sp, #0
 810139e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81013a0:	687b      	ldr	r3, [r7, #4]
 81013a2:	681b      	ldr	r3, [r3, #0]
 81013a4:	68db      	ldr	r3, [r3, #12]
 81013a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 81013a8:	687b      	ldr	r3, [r7, #4]
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	691b      	ldr	r3, [r3, #16]
 81013ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81013b0:	68bb      	ldr	r3, [r7, #8]
 81013b2:	f003 0302 	and.w	r3, r3, #2
 81013b6:	2b00      	cmp	r3, #0
 81013b8:	d020      	beq.n	81013fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	f003 0302 	and.w	r3, r3, #2
 81013c0:	2b00      	cmp	r3, #0
 81013c2:	d01b      	beq.n	81013fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81013c4:	687b      	ldr	r3, [r7, #4]
 81013c6:	681b      	ldr	r3, [r3, #0]
 81013c8:	f06f 0202 	mvn.w	r2, #2
 81013cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	2201      	movs	r2, #1
 81013d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81013d4:	687b      	ldr	r3, [r7, #4]
 81013d6:	681b      	ldr	r3, [r3, #0]
 81013d8:	699b      	ldr	r3, [r3, #24]
 81013da:	f003 0303 	and.w	r3, r3, #3
 81013de:	2b00      	cmp	r3, #0
 81013e0:	d003      	beq.n	81013ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81013e2:	6878      	ldr	r0, [r7, #4]
 81013e4:	f000 f8e9 	bl	81015ba <HAL_TIM_IC_CaptureCallback>
 81013e8:	e005      	b.n	81013f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81013ea:	6878      	ldr	r0, [r7, #4]
 81013ec:	f000 f8db 	bl	81015a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81013f0:	6878      	ldr	r0, [r7, #4]
 81013f2:	f000 f8ec 	bl	81015ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	2200      	movs	r2, #0
 81013fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81013fc:	68bb      	ldr	r3, [r7, #8]
 81013fe:	f003 0304 	and.w	r3, r3, #4
 8101402:	2b00      	cmp	r3, #0
 8101404:	d020      	beq.n	8101448 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8101406:	68fb      	ldr	r3, [r7, #12]
 8101408:	f003 0304 	and.w	r3, r3, #4
 810140c:	2b00      	cmp	r3, #0
 810140e:	d01b      	beq.n	8101448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8101410:	687b      	ldr	r3, [r7, #4]
 8101412:	681b      	ldr	r3, [r3, #0]
 8101414:	f06f 0204 	mvn.w	r2, #4
 8101418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810141a:	687b      	ldr	r3, [r7, #4]
 810141c:	2202      	movs	r2, #2
 810141e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	681b      	ldr	r3, [r3, #0]
 8101424:	699b      	ldr	r3, [r3, #24]
 8101426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810142a:	2b00      	cmp	r3, #0
 810142c:	d003      	beq.n	8101436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810142e:	6878      	ldr	r0, [r7, #4]
 8101430:	f000 f8c3 	bl	81015ba <HAL_TIM_IC_CaptureCallback>
 8101434:	e005      	b.n	8101442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101436:	6878      	ldr	r0, [r7, #4]
 8101438:	f000 f8b5 	bl	81015a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810143c:	6878      	ldr	r0, [r7, #4]
 810143e:	f000 f8c6 	bl	81015ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101442:	687b      	ldr	r3, [r7, #4]
 8101444:	2200      	movs	r2, #0
 8101446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8101448:	68bb      	ldr	r3, [r7, #8]
 810144a:	f003 0308 	and.w	r3, r3, #8
 810144e:	2b00      	cmp	r3, #0
 8101450:	d020      	beq.n	8101494 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8101452:	68fb      	ldr	r3, [r7, #12]
 8101454:	f003 0308 	and.w	r3, r3, #8
 8101458:	2b00      	cmp	r3, #0
 810145a:	d01b      	beq.n	8101494 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810145c:	687b      	ldr	r3, [r7, #4]
 810145e:	681b      	ldr	r3, [r3, #0]
 8101460:	f06f 0208 	mvn.w	r2, #8
 8101464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8101466:	687b      	ldr	r3, [r7, #4]
 8101468:	2204      	movs	r2, #4
 810146a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	681b      	ldr	r3, [r3, #0]
 8101470:	69db      	ldr	r3, [r3, #28]
 8101472:	f003 0303 	and.w	r3, r3, #3
 8101476:	2b00      	cmp	r3, #0
 8101478:	d003      	beq.n	8101482 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810147a:	6878      	ldr	r0, [r7, #4]
 810147c:	f000 f89d 	bl	81015ba <HAL_TIM_IC_CaptureCallback>
 8101480:	e005      	b.n	810148e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101482:	6878      	ldr	r0, [r7, #4]
 8101484:	f000 f88f 	bl	81015a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101488:	6878      	ldr	r0, [r7, #4]
 810148a:	f000 f8a0 	bl	81015ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	2200      	movs	r2, #0
 8101492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8101494:	68bb      	ldr	r3, [r7, #8]
 8101496:	f003 0310 	and.w	r3, r3, #16
 810149a:	2b00      	cmp	r3, #0
 810149c:	d020      	beq.n	81014e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810149e:	68fb      	ldr	r3, [r7, #12]
 81014a0:	f003 0310 	and.w	r3, r3, #16
 81014a4:	2b00      	cmp	r3, #0
 81014a6:	d01b      	beq.n	81014e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	f06f 0210 	mvn.w	r2, #16
 81014b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81014b2:	687b      	ldr	r3, [r7, #4]
 81014b4:	2208      	movs	r2, #8
 81014b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	681b      	ldr	r3, [r3, #0]
 81014bc:	69db      	ldr	r3, [r3, #28]
 81014be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81014c2:	2b00      	cmp	r3, #0
 81014c4:	d003      	beq.n	81014ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81014c6:	6878      	ldr	r0, [r7, #4]
 81014c8:	f000 f877 	bl	81015ba <HAL_TIM_IC_CaptureCallback>
 81014cc:	e005      	b.n	81014da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81014ce:	6878      	ldr	r0, [r7, #4]
 81014d0:	f000 f869 	bl	81015a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81014d4:	6878      	ldr	r0, [r7, #4]
 81014d6:	f000 f87a 	bl	81015ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81014da:	687b      	ldr	r3, [r7, #4]
 81014dc:	2200      	movs	r2, #0
 81014de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81014e0:	68bb      	ldr	r3, [r7, #8]
 81014e2:	f003 0301 	and.w	r3, r3, #1
 81014e6:	2b00      	cmp	r3, #0
 81014e8:	d00c      	beq.n	8101504 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81014ea:	68fb      	ldr	r3, [r7, #12]
 81014ec:	f003 0301 	and.w	r3, r3, #1
 81014f0:	2b00      	cmp	r3, #0
 81014f2:	d007      	beq.n	8101504 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	681b      	ldr	r3, [r3, #0]
 81014f8:	f06f 0201 	mvn.w	r2, #1
 81014fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81014fe:	6878      	ldr	r0, [r7, #4]
 8101500:	f7fe ff9c 	bl	810043c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8101504:	68bb      	ldr	r3, [r7, #8]
 8101506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810150a:	2b00      	cmp	r3, #0
 810150c:	d104      	bne.n	8101518 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810150e:	68bb      	ldr	r3, [r7, #8]
 8101510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8101514:	2b00      	cmp	r3, #0
 8101516:	d00c      	beq.n	8101532 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8101518:	68fb      	ldr	r3, [r7, #12]
 810151a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810151e:	2b00      	cmp	r3, #0
 8101520:	d007      	beq.n	8101532 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8101522:	687b      	ldr	r3, [r7, #4]
 8101524:	681b      	ldr	r3, [r3, #0]
 8101526:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810152a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810152c:	6878      	ldr	r0, [r7, #4]
 810152e:	f000 f913 	bl	8101758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8101532:	68bb      	ldr	r3, [r7, #8]
 8101534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101538:	2b00      	cmp	r3, #0
 810153a:	d00c      	beq.n	8101556 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810153c:	68fb      	ldr	r3, [r7, #12]
 810153e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101542:	2b00      	cmp	r3, #0
 8101544:	d007      	beq.n	8101556 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101546:	687b      	ldr	r3, [r7, #4]
 8101548:	681b      	ldr	r3, [r3, #0]
 810154a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810154e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101550:	6878      	ldr	r0, [r7, #4]
 8101552:	f000 f90b 	bl	810176c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8101556:	68bb      	ldr	r3, [r7, #8]
 8101558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810155c:	2b00      	cmp	r3, #0
 810155e:	d00c      	beq.n	810157a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8101560:	68fb      	ldr	r3, [r7, #12]
 8101562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101566:	2b00      	cmp	r3, #0
 8101568:	d007      	beq.n	810157a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810156a:	687b      	ldr	r3, [r7, #4]
 810156c:	681b      	ldr	r3, [r3, #0]
 810156e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8101572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101574:	6878      	ldr	r0, [r7, #4]
 8101576:	f000 f834 	bl	81015e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810157a:	68bb      	ldr	r3, [r7, #8]
 810157c:	f003 0320 	and.w	r3, r3, #32
 8101580:	2b00      	cmp	r3, #0
 8101582:	d00c      	beq.n	810159e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8101584:	68fb      	ldr	r3, [r7, #12]
 8101586:	f003 0320 	and.w	r3, r3, #32
 810158a:	2b00      	cmp	r3, #0
 810158c:	d007      	beq.n	810159e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	681b      	ldr	r3, [r3, #0]
 8101592:	f06f 0220 	mvn.w	r2, #32
 8101596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8101598:	6878      	ldr	r0, [r7, #4]
 810159a:	f000 f8d3 	bl	8101744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810159e:	bf00      	nop
 81015a0:	3710      	adds	r7, #16
 81015a2:	46bd      	mov	sp, r7
 81015a4:	bd80      	pop	{r7, pc}

081015a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81015a6:	b480      	push	{r7}
 81015a8:	b083      	sub	sp, #12
 81015aa:	af00      	add	r7, sp, #0
 81015ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81015ae:	bf00      	nop
 81015b0:	370c      	adds	r7, #12
 81015b2:	46bd      	mov	sp, r7
 81015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015b8:	4770      	bx	lr

081015ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81015ba:	b480      	push	{r7}
 81015bc:	b083      	sub	sp, #12
 81015be:	af00      	add	r7, sp, #0
 81015c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81015c2:	bf00      	nop
 81015c4:	370c      	adds	r7, #12
 81015c6:	46bd      	mov	sp, r7
 81015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015cc:	4770      	bx	lr

081015ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81015ce:	b480      	push	{r7}
 81015d0:	b083      	sub	sp, #12
 81015d2:	af00      	add	r7, sp, #0
 81015d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81015d6:	bf00      	nop
 81015d8:	370c      	adds	r7, #12
 81015da:	46bd      	mov	sp, r7
 81015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015e0:	4770      	bx	lr

081015e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81015e2:	b480      	push	{r7}
 81015e4:	b083      	sub	sp, #12
 81015e6:	af00      	add	r7, sp, #0
 81015e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81015ea:	bf00      	nop
 81015ec:	370c      	adds	r7, #12
 81015ee:	46bd      	mov	sp, r7
 81015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f4:	4770      	bx	lr
	...

081015f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81015f8:	b480      	push	{r7}
 81015fa:	b085      	sub	sp, #20
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	6078      	str	r0, [r7, #4]
 8101600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101602:	687b      	ldr	r3, [r7, #4]
 8101604:	681b      	ldr	r3, [r3, #0]
 8101606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101608:	687b      	ldr	r3, [r7, #4]
 810160a:	4a46      	ldr	r2, [pc, #280]	@ (8101724 <TIM_Base_SetConfig+0x12c>)
 810160c:	4293      	cmp	r3, r2
 810160e:	d013      	beq.n	8101638 <TIM_Base_SetConfig+0x40>
 8101610:	687b      	ldr	r3, [r7, #4]
 8101612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101616:	d00f      	beq.n	8101638 <TIM_Base_SetConfig+0x40>
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	4a43      	ldr	r2, [pc, #268]	@ (8101728 <TIM_Base_SetConfig+0x130>)
 810161c:	4293      	cmp	r3, r2
 810161e:	d00b      	beq.n	8101638 <TIM_Base_SetConfig+0x40>
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	4a42      	ldr	r2, [pc, #264]	@ (810172c <TIM_Base_SetConfig+0x134>)
 8101624:	4293      	cmp	r3, r2
 8101626:	d007      	beq.n	8101638 <TIM_Base_SetConfig+0x40>
 8101628:	687b      	ldr	r3, [r7, #4]
 810162a:	4a41      	ldr	r2, [pc, #260]	@ (8101730 <TIM_Base_SetConfig+0x138>)
 810162c:	4293      	cmp	r3, r2
 810162e:	d003      	beq.n	8101638 <TIM_Base_SetConfig+0x40>
 8101630:	687b      	ldr	r3, [r7, #4]
 8101632:	4a40      	ldr	r2, [pc, #256]	@ (8101734 <TIM_Base_SetConfig+0x13c>)
 8101634:	4293      	cmp	r3, r2
 8101636:	d108      	bne.n	810164a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101638:	68fb      	ldr	r3, [r7, #12]
 810163a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810163e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101640:	683b      	ldr	r3, [r7, #0]
 8101642:	685b      	ldr	r3, [r3, #4]
 8101644:	68fa      	ldr	r2, [r7, #12]
 8101646:	4313      	orrs	r3, r2
 8101648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	4a35      	ldr	r2, [pc, #212]	@ (8101724 <TIM_Base_SetConfig+0x12c>)
 810164e:	4293      	cmp	r3, r2
 8101650:	d01f      	beq.n	8101692 <TIM_Base_SetConfig+0x9a>
 8101652:	687b      	ldr	r3, [r7, #4]
 8101654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101658:	d01b      	beq.n	8101692 <TIM_Base_SetConfig+0x9a>
 810165a:	687b      	ldr	r3, [r7, #4]
 810165c:	4a32      	ldr	r2, [pc, #200]	@ (8101728 <TIM_Base_SetConfig+0x130>)
 810165e:	4293      	cmp	r3, r2
 8101660:	d017      	beq.n	8101692 <TIM_Base_SetConfig+0x9a>
 8101662:	687b      	ldr	r3, [r7, #4]
 8101664:	4a31      	ldr	r2, [pc, #196]	@ (810172c <TIM_Base_SetConfig+0x134>)
 8101666:	4293      	cmp	r3, r2
 8101668:	d013      	beq.n	8101692 <TIM_Base_SetConfig+0x9a>
 810166a:	687b      	ldr	r3, [r7, #4]
 810166c:	4a30      	ldr	r2, [pc, #192]	@ (8101730 <TIM_Base_SetConfig+0x138>)
 810166e:	4293      	cmp	r3, r2
 8101670:	d00f      	beq.n	8101692 <TIM_Base_SetConfig+0x9a>
 8101672:	687b      	ldr	r3, [r7, #4]
 8101674:	4a2f      	ldr	r2, [pc, #188]	@ (8101734 <TIM_Base_SetConfig+0x13c>)
 8101676:	4293      	cmp	r3, r2
 8101678:	d00b      	beq.n	8101692 <TIM_Base_SetConfig+0x9a>
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	4a2e      	ldr	r2, [pc, #184]	@ (8101738 <TIM_Base_SetConfig+0x140>)
 810167e:	4293      	cmp	r3, r2
 8101680:	d007      	beq.n	8101692 <TIM_Base_SetConfig+0x9a>
 8101682:	687b      	ldr	r3, [r7, #4]
 8101684:	4a2d      	ldr	r2, [pc, #180]	@ (810173c <TIM_Base_SetConfig+0x144>)
 8101686:	4293      	cmp	r3, r2
 8101688:	d003      	beq.n	8101692 <TIM_Base_SetConfig+0x9a>
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	4a2c      	ldr	r2, [pc, #176]	@ (8101740 <TIM_Base_SetConfig+0x148>)
 810168e:	4293      	cmp	r3, r2
 8101690:	d108      	bne.n	81016a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8101692:	68fb      	ldr	r3, [r7, #12]
 8101694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810169a:	683b      	ldr	r3, [r7, #0]
 810169c:	68db      	ldr	r3, [r3, #12]
 810169e:	68fa      	ldr	r2, [r7, #12]
 81016a0:	4313      	orrs	r3, r2
 81016a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81016a4:	68fb      	ldr	r3, [r7, #12]
 81016a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 81016aa:	683b      	ldr	r3, [r7, #0]
 81016ac:	695b      	ldr	r3, [r3, #20]
 81016ae:	4313      	orrs	r3, r2
 81016b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	68fa      	ldr	r2, [r7, #12]
 81016b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81016b8:	683b      	ldr	r3, [r7, #0]
 81016ba:	689a      	ldr	r2, [r3, #8]
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81016c0:	683b      	ldr	r3, [r7, #0]
 81016c2:	681a      	ldr	r2, [r3, #0]
 81016c4:	687b      	ldr	r3, [r7, #4]
 81016c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81016c8:	687b      	ldr	r3, [r7, #4]
 81016ca:	4a16      	ldr	r2, [pc, #88]	@ (8101724 <TIM_Base_SetConfig+0x12c>)
 81016cc:	4293      	cmp	r3, r2
 81016ce:	d00f      	beq.n	81016f0 <TIM_Base_SetConfig+0xf8>
 81016d0:	687b      	ldr	r3, [r7, #4]
 81016d2:	4a18      	ldr	r2, [pc, #96]	@ (8101734 <TIM_Base_SetConfig+0x13c>)
 81016d4:	4293      	cmp	r3, r2
 81016d6:	d00b      	beq.n	81016f0 <TIM_Base_SetConfig+0xf8>
 81016d8:	687b      	ldr	r3, [r7, #4]
 81016da:	4a17      	ldr	r2, [pc, #92]	@ (8101738 <TIM_Base_SetConfig+0x140>)
 81016dc:	4293      	cmp	r3, r2
 81016de:	d007      	beq.n	81016f0 <TIM_Base_SetConfig+0xf8>
 81016e0:	687b      	ldr	r3, [r7, #4]
 81016e2:	4a16      	ldr	r2, [pc, #88]	@ (810173c <TIM_Base_SetConfig+0x144>)
 81016e4:	4293      	cmp	r3, r2
 81016e6:	d003      	beq.n	81016f0 <TIM_Base_SetConfig+0xf8>
 81016e8:	687b      	ldr	r3, [r7, #4]
 81016ea:	4a15      	ldr	r2, [pc, #84]	@ (8101740 <TIM_Base_SetConfig+0x148>)
 81016ec:	4293      	cmp	r3, r2
 81016ee:	d103      	bne.n	81016f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81016f0:	683b      	ldr	r3, [r7, #0]
 81016f2:	691a      	ldr	r2, [r3, #16]
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	2201      	movs	r2, #1
 81016fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	691b      	ldr	r3, [r3, #16]
 8101702:	f003 0301 	and.w	r3, r3, #1
 8101706:	2b01      	cmp	r3, #1
 8101708:	d105      	bne.n	8101716 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	691b      	ldr	r3, [r3, #16]
 810170e:	f023 0201 	bic.w	r2, r3, #1
 8101712:	687b      	ldr	r3, [r7, #4]
 8101714:	611a      	str	r2, [r3, #16]
  }
}
 8101716:	bf00      	nop
 8101718:	3714      	adds	r7, #20
 810171a:	46bd      	mov	sp, r7
 810171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101720:	4770      	bx	lr
 8101722:	bf00      	nop
 8101724:	40010000 	.word	0x40010000
 8101728:	40000400 	.word	0x40000400
 810172c:	40000800 	.word	0x40000800
 8101730:	40000c00 	.word	0x40000c00
 8101734:	40010400 	.word	0x40010400
 8101738:	40014000 	.word	0x40014000
 810173c:	40014400 	.word	0x40014400
 8101740:	40014800 	.word	0x40014800

08101744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101744:	b480      	push	{r7}
 8101746:	b083      	sub	sp, #12
 8101748:	af00      	add	r7, sp, #0
 810174a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810174c:	bf00      	nop
 810174e:	370c      	adds	r7, #12
 8101750:	46bd      	mov	sp, r7
 8101752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101756:	4770      	bx	lr

08101758 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8101758:	b480      	push	{r7}
 810175a:	b083      	sub	sp, #12
 810175c:	af00      	add	r7, sp, #0
 810175e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8101760:	bf00      	nop
 8101762:	370c      	adds	r7, #12
 8101764:	46bd      	mov	sp, r7
 8101766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810176a:	4770      	bx	lr

0810176c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810176c:	b480      	push	{r7}
 810176e:	b083      	sub	sp, #12
 8101770:	af00      	add	r7, sp, #0
 8101772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8101774:	bf00      	nop
 8101776:	370c      	adds	r7, #12
 8101778:	46bd      	mov	sp, r7
 810177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810177e:	4770      	bx	lr

08101780 <__NVIC_SetPriority>:
{
 8101780:	b480      	push	{r7}
 8101782:	b083      	sub	sp, #12
 8101784:	af00      	add	r7, sp, #0
 8101786:	4603      	mov	r3, r0
 8101788:	6039      	str	r1, [r7, #0]
 810178a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810178c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101790:	2b00      	cmp	r3, #0
 8101792:	db0a      	blt.n	81017aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101794:	683b      	ldr	r3, [r7, #0]
 8101796:	b2da      	uxtb	r2, r3
 8101798:	490c      	ldr	r1, [pc, #48]	@ (81017cc <__NVIC_SetPriority+0x4c>)
 810179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810179e:	0112      	lsls	r2, r2, #4
 81017a0:	b2d2      	uxtb	r2, r2
 81017a2:	440b      	add	r3, r1
 81017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81017a8:	e00a      	b.n	81017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81017aa:	683b      	ldr	r3, [r7, #0]
 81017ac:	b2da      	uxtb	r2, r3
 81017ae:	4908      	ldr	r1, [pc, #32]	@ (81017d0 <__NVIC_SetPriority+0x50>)
 81017b0:	88fb      	ldrh	r3, [r7, #6]
 81017b2:	f003 030f 	and.w	r3, r3, #15
 81017b6:	3b04      	subs	r3, #4
 81017b8:	0112      	lsls	r2, r2, #4
 81017ba:	b2d2      	uxtb	r2, r2
 81017bc:	440b      	add	r3, r1
 81017be:	761a      	strb	r2, [r3, #24]
}
 81017c0:	bf00      	nop
 81017c2:	370c      	adds	r7, #12
 81017c4:	46bd      	mov	sp, r7
 81017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ca:	4770      	bx	lr
 81017cc:	e000e100 	.word	0xe000e100
 81017d0:	e000ed00 	.word	0xe000ed00

081017d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81017d4:	b580      	push	{r7, lr}
 81017d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81017d8:	4b05      	ldr	r3, [pc, #20]	@ (81017f0 <SysTick_Handler+0x1c>)
 81017da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81017dc:	f002 f988 	bl	8103af0 <xTaskGetSchedulerState>
 81017e0:	4603      	mov	r3, r0
 81017e2:	2b01      	cmp	r3, #1
 81017e4:	d001      	beq.n	81017ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81017e6:	f000 fd9f 	bl	8102328 <xPortSysTickHandler>
  }
}
 81017ea:	bf00      	nop
 81017ec:	bd80      	pop	{r7, pc}
 81017ee:	bf00      	nop
 81017f0:	e000e010 	.word	0xe000e010

081017f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81017f4:	b580      	push	{r7, lr}
 81017f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 81017f8:	2100      	movs	r1, #0
 81017fa:	f06f 0004 	mvn.w	r0, #4
 81017fe:	f7ff ffbf 	bl	8101780 <__NVIC_SetPriority>
#endif
}
 8101802:	bf00      	nop
 8101804:	bd80      	pop	{r7, pc}
	...

08101808 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8101808:	b480      	push	{r7}
 810180a:	b083      	sub	sp, #12
 810180c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810180e:	f3ef 8305 	mrs	r3, IPSR
 8101812:	603b      	str	r3, [r7, #0]
  return(result);
 8101814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101816:	2b00      	cmp	r3, #0
 8101818:	d003      	beq.n	8101822 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810181a:	f06f 0305 	mvn.w	r3, #5
 810181e:	607b      	str	r3, [r7, #4]
 8101820:	e00c      	b.n	810183c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8101822:	4b0a      	ldr	r3, [pc, #40]	@ (810184c <osKernelInitialize+0x44>)
 8101824:	681b      	ldr	r3, [r3, #0]
 8101826:	2b00      	cmp	r3, #0
 8101828:	d105      	bne.n	8101836 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810182a:	4b08      	ldr	r3, [pc, #32]	@ (810184c <osKernelInitialize+0x44>)
 810182c:	2201      	movs	r2, #1
 810182e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8101830:	2300      	movs	r3, #0
 8101832:	607b      	str	r3, [r7, #4]
 8101834:	e002      	b.n	810183c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8101836:	f04f 33ff 	mov.w	r3, #4294967295
 810183a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810183c:	687b      	ldr	r3, [r7, #4]
}
 810183e:	4618      	mov	r0, r3
 8101840:	370c      	adds	r7, #12
 8101842:	46bd      	mov	sp, r7
 8101844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101848:	4770      	bx	lr
 810184a:	bf00      	nop
 810184c:	100000d4 	.word	0x100000d4

08101850 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8101850:	b580      	push	{r7, lr}
 8101852:	b082      	sub	sp, #8
 8101854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101856:	f3ef 8305 	mrs	r3, IPSR
 810185a:	603b      	str	r3, [r7, #0]
  return(result);
 810185c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810185e:	2b00      	cmp	r3, #0
 8101860:	d003      	beq.n	810186a <osKernelStart+0x1a>
    stat = osErrorISR;
 8101862:	f06f 0305 	mvn.w	r3, #5
 8101866:	607b      	str	r3, [r7, #4]
 8101868:	e010      	b.n	810188c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810186a:	4b0b      	ldr	r3, [pc, #44]	@ (8101898 <osKernelStart+0x48>)
 810186c:	681b      	ldr	r3, [r3, #0]
 810186e:	2b01      	cmp	r3, #1
 8101870:	d109      	bne.n	8101886 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8101872:	f7ff ffbf 	bl	81017f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8101876:	4b08      	ldr	r3, [pc, #32]	@ (8101898 <osKernelStart+0x48>)
 8101878:	2202      	movs	r2, #2
 810187a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810187c:	f001 fcd4 	bl	8103228 <vTaskStartScheduler>
      stat = osOK;
 8101880:	2300      	movs	r3, #0
 8101882:	607b      	str	r3, [r7, #4]
 8101884:	e002      	b.n	810188c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8101886:	f04f 33ff 	mov.w	r3, #4294967295
 810188a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810188c:	687b      	ldr	r3, [r7, #4]
}
 810188e:	4618      	mov	r0, r3
 8101890:	3708      	adds	r7, #8
 8101892:	46bd      	mov	sp, r7
 8101894:	bd80      	pop	{r7, pc}
 8101896:	bf00      	nop
 8101898:	100000d4 	.word	0x100000d4

0810189c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810189c:	b580      	push	{r7, lr}
 810189e:	b08e      	sub	sp, #56	@ 0x38
 81018a0:	af04      	add	r7, sp, #16
 81018a2:	60f8      	str	r0, [r7, #12]
 81018a4:	60b9      	str	r1, [r7, #8]
 81018a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81018a8:	2300      	movs	r3, #0
 81018aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81018ac:	f3ef 8305 	mrs	r3, IPSR
 81018b0:	617b      	str	r3, [r7, #20]
  return(result);
 81018b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81018b4:	2b00      	cmp	r3, #0
 81018b6:	d17e      	bne.n	81019b6 <osThreadNew+0x11a>
 81018b8:	68fb      	ldr	r3, [r7, #12]
 81018ba:	2b00      	cmp	r3, #0
 81018bc:	d07b      	beq.n	81019b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81018be:	2380      	movs	r3, #128	@ 0x80
 81018c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81018c2:	2318      	movs	r3, #24
 81018c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81018c6:	2300      	movs	r3, #0
 81018c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 81018ca:	f04f 33ff 	mov.w	r3, #4294967295
 81018ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	2b00      	cmp	r3, #0
 81018d4:	d045      	beq.n	8101962 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 81018d6:	687b      	ldr	r3, [r7, #4]
 81018d8:	681b      	ldr	r3, [r3, #0]
 81018da:	2b00      	cmp	r3, #0
 81018dc:	d002      	beq.n	81018e4 <osThreadNew+0x48>
        name = attr->name;
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	681b      	ldr	r3, [r3, #0]
 81018e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	699b      	ldr	r3, [r3, #24]
 81018e8:	2b00      	cmp	r3, #0
 81018ea:	d002      	beq.n	81018f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 81018ec:	687b      	ldr	r3, [r7, #4]
 81018ee:	699b      	ldr	r3, [r3, #24]
 81018f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 81018f2:	69fb      	ldr	r3, [r7, #28]
 81018f4:	2b00      	cmp	r3, #0
 81018f6:	d008      	beq.n	810190a <osThreadNew+0x6e>
 81018f8:	69fb      	ldr	r3, [r7, #28]
 81018fa:	2b38      	cmp	r3, #56	@ 0x38
 81018fc:	d805      	bhi.n	810190a <osThreadNew+0x6e>
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	685b      	ldr	r3, [r3, #4]
 8101902:	f003 0301 	and.w	r3, r3, #1
 8101906:	2b00      	cmp	r3, #0
 8101908:	d001      	beq.n	810190e <osThreadNew+0x72>
        return (NULL);
 810190a:	2300      	movs	r3, #0
 810190c:	e054      	b.n	81019b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	695b      	ldr	r3, [r3, #20]
 8101912:	2b00      	cmp	r3, #0
 8101914:	d003      	beq.n	810191e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8101916:	687b      	ldr	r3, [r7, #4]
 8101918:	695b      	ldr	r3, [r3, #20]
 810191a:	089b      	lsrs	r3, r3, #2
 810191c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	689b      	ldr	r3, [r3, #8]
 8101922:	2b00      	cmp	r3, #0
 8101924:	d00e      	beq.n	8101944 <osThreadNew+0xa8>
 8101926:	687b      	ldr	r3, [r7, #4]
 8101928:	68db      	ldr	r3, [r3, #12]
 810192a:	2ba7      	cmp	r3, #167	@ 0xa7
 810192c:	d90a      	bls.n	8101944 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8101932:	2b00      	cmp	r3, #0
 8101934:	d006      	beq.n	8101944 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	695b      	ldr	r3, [r3, #20]
 810193a:	2b00      	cmp	r3, #0
 810193c:	d002      	beq.n	8101944 <osThreadNew+0xa8>
        mem = 1;
 810193e:	2301      	movs	r3, #1
 8101940:	61bb      	str	r3, [r7, #24]
 8101942:	e010      	b.n	8101966 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	689b      	ldr	r3, [r3, #8]
 8101948:	2b00      	cmp	r3, #0
 810194a:	d10c      	bne.n	8101966 <osThreadNew+0xca>
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	68db      	ldr	r3, [r3, #12]
 8101950:	2b00      	cmp	r3, #0
 8101952:	d108      	bne.n	8101966 <osThreadNew+0xca>
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	691b      	ldr	r3, [r3, #16]
 8101958:	2b00      	cmp	r3, #0
 810195a:	d104      	bne.n	8101966 <osThreadNew+0xca>
          mem = 0;
 810195c:	2300      	movs	r3, #0
 810195e:	61bb      	str	r3, [r7, #24]
 8101960:	e001      	b.n	8101966 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8101962:	2300      	movs	r3, #0
 8101964:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8101966:	69bb      	ldr	r3, [r7, #24]
 8101968:	2b01      	cmp	r3, #1
 810196a:	d110      	bne.n	810198e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8101970:	687a      	ldr	r2, [r7, #4]
 8101972:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101974:	9202      	str	r2, [sp, #8]
 8101976:	9301      	str	r3, [sp, #4]
 8101978:	69fb      	ldr	r3, [r7, #28]
 810197a:	9300      	str	r3, [sp, #0]
 810197c:	68bb      	ldr	r3, [r7, #8]
 810197e:	6a3a      	ldr	r2, [r7, #32]
 8101980:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101982:	68f8      	ldr	r0, [r7, #12]
 8101984:	f001 fa5c 	bl	8102e40 <xTaskCreateStatic>
 8101988:	4603      	mov	r3, r0
 810198a:	613b      	str	r3, [r7, #16]
 810198c:	e013      	b.n	81019b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810198e:	69bb      	ldr	r3, [r7, #24]
 8101990:	2b00      	cmp	r3, #0
 8101992:	d110      	bne.n	81019b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8101994:	6a3b      	ldr	r3, [r7, #32]
 8101996:	b29a      	uxth	r2, r3
 8101998:	f107 0310 	add.w	r3, r7, #16
 810199c:	9301      	str	r3, [sp, #4]
 810199e:	69fb      	ldr	r3, [r7, #28]
 81019a0:	9300      	str	r3, [sp, #0]
 81019a2:	68bb      	ldr	r3, [r7, #8]
 81019a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81019a6:	68f8      	ldr	r0, [r7, #12]
 81019a8:	f001 faaa 	bl	8102f00 <xTaskCreate>
 81019ac:	4603      	mov	r3, r0
 81019ae:	2b01      	cmp	r3, #1
 81019b0:	d001      	beq.n	81019b6 <osThreadNew+0x11a>
            hTask = NULL;
 81019b2:	2300      	movs	r3, #0
 81019b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81019b6:	693b      	ldr	r3, [r7, #16]
}
 81019b8:	4618      	mov	r0, r3
 81019ba:	3728      	adds	r7, #40	@ 0x28
 81019bc:	46bd      	mov	sp, r7
 81019be:	bd80      	pop	{r7, pc}

081019c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81019c0:	b580      	push	{r7, lr}
 81019c2:	b084      	sub	sp, #16
 81019c4:	af00      	add	r7, sp, #0
 81019c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81019c8:	f3ef 8305 	mrs	r3, IPSR
 81019cc:	60bb      	str	r3, [r7, #8]
  return(result);
 81019ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81019d0:	2b00      	cmp	r3, #0
 81019d2:	d003      	beq.n	81019dc <osDelay+0x1c>
    stat = osErrorISR;
 81019d4:	f06f 0305 	mvn.w	r3, #5
 81019d8:	60fb      	str	r3, [r7, #12]
 81019da:	e007      	b.n	81019ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81019dc:	2300      	movs	r3, #0
 81019de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81019e0:	687b      	ldr	r3, [r7, #4]
 81019e2:	2b00      	cmp	r3, #0
 81019e4:	d002      	beq.n	81019ec <osDelay+0x2c>
      vTaskDelay(ticks);
 81019e6:	6878      	ldr	r0, [r7, #4]
 81019e8:	f001 fbe8 	bl	81031bc <vTaskDelay>
    }
  }

  return (stat);
 81019ec:	68fb      	ldr	r3, [r7, #12]
}
 81019ee:	4618      	mov	r0, r3
 81019f0:	3710      	adds	r7, #16
 81019f2:	46bd      	mov	sp, r7
 81019f4:	bd80      	pop	{r7, pc}
	...

081019f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81019f8:	b480      	push	{r7}
 81019fa:	b085      	sub	sp, #20
 81019fc:	af00      	add	r7, sp, #0
 81019fe:	60f8      	str	r0, [r7, #12]
 8101a00:	60b9      	str	r1, [r7, #8]
 8101a02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8101a04:	68fb      	ldr	r3, [r7, #12]
 8101a06:	4a07      	ldr	r2, [pc, #28]	@ (8101a24 <vApplicationGetIdleTaskMemory+0x2c>)
 8101a08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8101a0a:	68bb      	ldr	r3, [r7, #8]
 8101a0c:	4a06      	ldr	r2, [pc, #24]	@ (8101a28 <vApplicationGetIdleTaskMemory+0x30>)
 8101a0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8101a10:	687b      	ldr	r3, [r7, #4]
 8101a12:	2280      	movs	r2, #128	@ 0x80
 8101a14:	601a      	str	r2, [r3, #0]
}
 8101a16:	bf00      	nop
 8101a18:	3714      	adds	r7, #20
 8101a1a:	46bd      	mov	sp, r7
 8101a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a20:	4770      	bx	lr
 8101a22:	bf00      	nop
 8101a24:	100000d8 	.word	0x100000d8
 8101a28:	10000180 	.word	0x10000180

08101a2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8101a2c:	b480      	push	{r7}
 8101a2e:	b085      	sub	sp, #20
 8101a30:	af00      	add	r7, sp, #0
 8101a32:	60f8      	str	r0, [r7, #12]
 8101a34:	60b9      	str	r1, [r7, #8]
 8101a36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8101a38:	68fb      	ldr	r3, [r7, #12]
 8101a3a:	4a07      	ldr	r2, [pc, #28]	@ (8101a58 <vApplicationGetTimerTaskMemory+0x2c>)
 8101a3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8101a3e:	68bb      	ldr	r3, [r7, #8]
 8101a40:	4a06      	ldr	r2, [pc, #24]	@ (8101a5c <vApplicationGetTimerTaskMemory+0x30>)
 8101a42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101a4a:	601a      	str	r2, [r3, #0]
}
 8101a4c:	bf00      	nop
 8101a4e:	3714      	adds	r7, #20
 8101a50:	46bd      	mov	sp, r7
 8101a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a56:	4770      	bx	lr
 8101a58:	10000380 	.word	0x10000380
 8101a5c:	10000428 	.word	0x10000428

08101a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101a60:	b580      	push	{r7, lr}
 8101a62:	b08a      	sub	sp, #40	@ 0x28
 8101a64:	af00      	add	r7, sp, #0
 8101a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8101a68:	2300      	movs	r3, #0
 8101a6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8101a6c:	f001 fc4c 	bl	8103308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8101a70:	4b5c      	ldr	r3, [pc, #368]	@ (8101be4 <pvPortMalloc+0x184>)
 8101a72:	681b      	ldr	r3, [r3, #0]
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d101      	bne.n	8101a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8101a78:	f000 f924 	bl	8101cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8101a7c:	4b5a      	ldr	r3, [pc, #360]	@ (8101be8 <pvPortMalloc+0x188>)
 8101a7e:	681a      	ldr	r2, [r3, #0]
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	4013      	ands	r3, r2
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	f040 8095 	bne.w	8101bb4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8101a8a:	687b      	ldr	r3, [r7, #4]
 8101a8c:	2b00      	cmp	r3, #0
 8101a8e:	d01e      	beq.n	8101ace <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8101a90:	2208      	movs	r2, #8
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	4413      	add	r3, r2
 8101a96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	f003 0307 	and.w	r3, r3, #7
 8101a9e:	2b00      	cmp	r3, #0
 8101aa0:	d015      	beq.n	8101ace <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	f023 0307 	bic.w	r3, r3, #7
 8101aa8:	3308      	adds	r3, #8
 8101aaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	f003 0307 	and.w	r3, r3, #7
 8101ab2:	2b00      	cmp	r3, #0
 8101ab4:	d00b      	beq.n	8101ace <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8101ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101aba:	f383 8811 	msr	BASEPRI, r3
 8101abe:	f3bf 8f6f 	isb	sy
 8101ac2:	f3bf 8f4f 	dsb	sy
 8101ac6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8101ac8:	bf00      	nop
 8101aca:	bf00      	nop
 8101acc:	e7fd      	b.n	8101aca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	2b00      	cmp	r3, #0
 8101ad2:	d06f      	beq.n	8101bb4 <pvPortMalloc+0x154>
 8101ad4:	4b45      	ldr	r3, [pc, #276]	@ (8101bec <pvPortMalloc+0x18c>)
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	687a      	ldr	r2, [r7, #4]
 8101ada:	429a      	cmp	r2, r3
 8101adc:	d86a      	bhi.n	8101bb4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8101ade:	4b44      	ldr	r3, [pc, #272]	@ (8101bf0 <pvPortMalloc+0x190>)
 8101ae0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8101ae2:	4b43      	ldr	r3, [pc, #268]	@ (8101bf0 <pvPortMalloc+0x190>)
 8101ae4:	681b      	ldr	r3, [r3, #0]
 8101ae6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101ae8:	e004      	b.n	8101af4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8101aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101aec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8101aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101af0:	681b      	ldr	r3, [r3, #0]
 8101af2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101af6:	685b      	ldr	r3, [r3, #4]
 8101af8:	687a      	ldr	r2, [r7, #4]
 8101afa:	429a      	cmp	r2, r3
 8101afc:	d903      	bls.n	8101b06 <pvPortMalloc+0xa6>
 8101afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b00:	681b      	ldr	r3, [r3, #0]
 8101b02:	2b00      	cmp	r3, #0
 8101b04:	d1f1      	bne.n	8101aea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8101b06:	4b37      	ldr	r3, [pc, #220]	@ (8101be4 <pvPortMalloc+0x184>)
 8101b08:	681b      	ldr	r3, [r3, #0]
 8101b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101b0c:	429a      	cmp	r2, r3
 8101b0e:	d051      	beq.n	8101bb4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8101b10:	6a3b      	ldr	r3, [r7, #32]
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	2208      	movs	r2, #8
 8101b16:	4413      	add	r3, r2
 8101b18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8101b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b1c:	681a      	ldr	r2, [r3, #0]
 8101b1e:	6a3b      	ldr	r3, [r7, #32]
 8101b20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8101b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b24:	685a      	ldr	r2, [r3, #4]
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	1ad2      	subs	r2, r2, r3
 8101b2a:	2308      	movs	r3, #8
 8101b2c:	005b      	lsls	r3, r3, #1
 8101b2e:	429a      	cmp	r2, r3
 8101b30:	d920      	bls.n	8101b74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8101b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	4413      	add	r3, r2
 8101b38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101b3a:	69bb      	ldr	r3, [r7, #24]
 8101b3c:	f003 0307 	and.w	r3, r3, #7
 8101b40:	2b00      	cmp	r3, #0
 8101b42:	d00b      	beq.n	8101b5c <pvPortMalloc+0xfc>
	__asm volatile
 8101b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101b48:	f383 8811 	msr	BASEPRI, r3
 8101b4c:	f3bf 8f6f 	isb	sy
 8101b50:	f3bf 8f4f 	dsb	sy
 8101b54:	613b      	str	r3, [r7, #16]
}
 8101b56:	bf00      	nop
 8101b58:	bf00      	nop
 8101b5a:	e7fd      	b.n	8101b58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b5e:	685a      	ldr	r2, [r3, #4]
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	1ad2      	subs	r2, r2, r3
 8101b64:	69bb      	ldr	r3, [r7, #24]
 8101b66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8101b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b6a:	687a      	ldr	r2, [r7, #4]
 8101b6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8101b6e:	69b8      	ldr	r0, [r7, #24]
 8101b70:	f000 f90a 	bl	8101d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8101b74:	4b1d      	ldr	r3, [pc, #116]	@ (8101bec <pvPortMalloc+0x18c>)
 8101b76:	681a      	ldr	r2, [r3, #0]
 8101b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b7a:	685b      	ldr	r3, [r3, #4]
 8101b7c:	1ad3      	subs	r3, r2, r3
 8101b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8101bec <pvPortMalloc+0x18c>)
 8101b80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8101b82:	4b1a      	ldr	r3, [pc, #104]	@ (8101bec <pvPortMalloc+0x18c>)
 8101b84:	681a      	ldr	r2, [r3, #0]
 8101b86:	4b1b      	ldr	r3, [pc, #108]	@ (8101bf4 <pvPortMalloc+0x194>)
 8101b88:	681b      	ldr	r3, [r3, #0]
 8101b8a:	429a      	cmp	r2, r3
 8101b8c:	d203      	bcs.n	8101b96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8101b8e:	4b17      	ldr	r3, [pc, #92]	@ (8101bec <pvPortMalloc+0x18c>)
 8101b90:	681b      	ldr	r3, [r3, #0]
 8101b92:	4a18      	ldr	r2, [pc, #96]	@ (8101bf4 <pvPortMalloc+0x194>)
 8101b94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8101b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b98:	685a      	ldr	r2, [r3, #4]
 8101b9a:	4b13      	ldr	r3, [pc, #76]	@ (8101be8 <pvPortMalloc+0x188>)
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	431a      	orrs	r2, r3
 8101ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101ba2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8101ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101ba6:	2200      	movs	r2, #0
 8101ba8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8101baa:	4b13      	ldr	r3, [pc, #76]	@ (8101bf8 <pvPortMalloc+0x198>)
 8101bac:	681b      	ldr	r3, [r3, #0]
 8101bae:	3301      	adds	r3, #1
 8101bb0:	4a11      	ldr	r2, [pc, #68]	@ (8101bf8 <pvPortMalloc+0x198>)
 8101bb2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8101bb4:	f001 fbb6 	bl	8103324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8101bb8:	69fb      	ldr	r3, [r7, #28]
 8101bba:	f003 0307 	and.w	r3, r3, #7
 8101bbe:	2b00      	cmp	r3, #0
 8101bc0:	d00b      	beq.n	8101bda <pvPortMalloc+0x17a>
	__asm volatile
 8101bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101bc6:	f383 8811 	msr	BASEPRI, r3
 8101bca:	f3bf 8f6f 	isb	sy
 8101bce:	f3bf 8f4f 	dsb	sy
 8101bd2:	60fb      	str	r3, [r7, #12]
}
 8101bd4:	bf00      	nop
 8101bd6:	bf00      	nop
 8101bd8:	e7fd      	b.n	8101bd6 <pvPortMalloc+0x176>
	return pvReturn;
 8101bda:	69fb      	ldr	r3, [r7, #28]
}
 8101bdc:	4618      	mov	r0, r3
 8101bde:	3728      	adds	r7, #40	@ 0x28
 8101be0:	46bd      	mov	sp, r7
 8101be2:	bd80      	pop	{r7, pc}
 8101be4:	10004430 	.word	0x10004430
 8101be8:	10004444 	.word	0x10004444
 8101bec:	10004434 	.word	0x10004434
 8101bf0:	10004428 	.word	0x10004428
 8101bf4:	10004438 	.word	0x10004438
 8101bf8:	1000443c 	.word	0x1000443c

08101bfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8101bfc:	b580      	push	{r7, lr}
 8101bfe:	b086      	sub	sp, #24
 8101c00:	af00      	add	r7, sp, #0
 8101c02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	2b00      	cmp	r3, #0
 8101c0c:	d04f      	beq.n	8101cae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8101c0e:	2308      	movs	r3, #8
 8101c10:	425b      	negs	r3, r3
 8101c12:	697a      	ldr	r2, [r7, #20]
 8101c14:	4413      	add	r3, r2
 8101c16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8101c18:	697b      	ldr	r3, [r7, #20]
 8101c1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8101c1c:	693b      	ldr	r3, [r7, #16]
 8101c1e:	685a      	ldr	r2, [r3, #4]
 8101c20:	4b25      	ldr	r3, [pc, #148]	@ (8101cb8 <vPortFree+0xbc>)
 8101c22:	681b      	ldr	r3, [r3, #0]
 8101c24:	4013      	ands	r3, r2
 8101c26:	2b00      	cmp	r3, #0
 8101c28:	d10b      	bne.n	8101c42 <vPortFree+0x46>
	__asm volatile
 8101c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c2e:	f383 8811 	msr	BASEPRI, r3
 8101c32:	f3bf 8f6f 	isb	sy
 8101c36:	f3bf 8f4f 	dsb	sy
 8101c3a:	60fb      	str	r3, [r7, #12]
}
 8101c3c:	bf00      	nop
 8101c3e:	bf00      	nop
 8101c40:	e7fd      	b.n	8101c3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101c42:	693b      	ldr	r3, [r7, #16]
 8101c44:	681b      	ldr	r3, [r3, #0]
 8101c46:	2b00      	cmp	r3, #0
 8101c48:	d00b      	beq.n	8101c62 <vPortFree+0x66>
	__asm volatile
 8101c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c4e:	f383 8811 	msr	BASEPRI, r3
 8101c52:	f3bf 8f6f 	isb	sy
 8101c56:	f3bf 8f4f 	dsb	sy
 8101c5a:	60bb      	str	r3, [r7, #8]
}
 8101c5c:	bf00      	nop
 8101c5e:	bf00      	nop
 8101c60:	e7fd      	b.n	8101c5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8101c62:	693b      	ldr	r3, [r7, #16]
 8101c64:	685a      	ldr	r2, [r3, #4]
 8101c66:	4b14      	ldr	r3, [pc, #80]	@ (8101cb8 <vPortFree+0xbc>)
 8101c68:	681b      	ldr	r3, [r3, #0]
 8101c6a:	4013      	ands	r3, r2
 8101c6c:	2b00      	cmp	r3, #0
 8101c6e:	d01e      	beq.n	8101cae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8101c70:	693b      	ldr	r3, [r7, #16]
 8101c72:	681b      	ldr	r3, [r3, #0]
 8101c74:	2b00      	cmp	r3, #0
 8101c76:	d11a      	bne.n	8101cae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8101c78:	693b      	ldr	r3, [r7, #16]
 8101c7a:	685a      	ldr	r2, [r3, #4]
 8101c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8101cb8 <vPortFree+0xbc>)
 8101c7e:	681b      	ldr	r3, [r3, #0]
 8101c80:	43db      	mvns	r3, r3
 8101c82:	401a      	ands	r2, r3
 8101c84:	693b      	ldr	r3, [r7, #16]
 8101c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8101c88:	f001 fb3e 	bl	8103308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8101c8c:	693b      	ldr	r3, [r7, #16]
 8101c8e:	685a      	ldr	r2, [r3, #4]
 8101c90:	4b0a      	ldr	r3, [pc, #40]	@ (8101cbc <vPortFree+0xc0>)
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	4413      	add	r3, r2
 8101c96:	4a09      	ldr	r2, [pc, #36]	@ (8101cbc <vPortFree+0xc0>)
 8101c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8101c9a:	6938      	ldr	r0, [r7, #16]
 8101c9c:	f000 f874 	bl	8101d88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8101ca0:	4b07      	ldr	r3, [pc, #28]	@ (8101cc0 <vPortFree+0xc4>)
 8101ca2:	681b      	ldr	r3, [r3, #0]
 8101ca4:	3301      	adds	r3, #1
 8101ca6:	4a06      	ldr	r2, [pc, #24]	@ (8101cc0 <vPortFree+0xc4>)
 8101ca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8101caa:	f001 fb3b 	bl	8103324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8101cae:	bf00      	nop
 8101cb0:	3718      	adds	r7, #24
 8101cb2:	46bd      	mov	sp, r7
 8101cb4:	bd80      	pop	{r7, pc}
 8101cb6:	bf00      	nop
 8101cb8:	10004444 	.word	0x10004444
 8101cbc:	10004434 	.word	0x10004434
 8101cc0:	10004440 	.word	0x10004440

08101cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8101cc4:	b480      	push	{r7}
 8101cc6:	b085      	sub	sp, #20
 8101cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8101cca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8101cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8101cd0:	4b27      	ldr	r3, [pc, #156]	@ (8101d70 <prvHeapInit+0xac>)
 8101cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8101cd4:	68fb      	ldr	r3, [r7, #12]
 8101cd6:	f003 0307 	and.w	r3, r3, #7
 8101cda:	2b00      	cmp	r3, #0
 8101cdc:	d00c      	beq.n	8101cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8101cde:	68fb      	ldr	r3, [r7, #12]
 8101ce0:	3307      	adds	r3, #7
 8101ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101ce4:	68fb      	ldr	r3, [r7, #12]
 8101ce6:	f023 0307 	bic.w	r3, r3, #7
 8101cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8101cec:	68ba      	ldr	r2, [r7, #8]
 8101cee:	68fb      	ldr	r3, [r7, #12]
 8101cf0:	1ad3      	subs	r3, r2, r3
 8101cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8101d70 <prvHeapInit+0xac>)
 8101cf4:	4413      	add	r3, r2
 8101cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8101cf8:	68fb      	ldr	r3, [r7, #12]
 8101cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8101cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8101d74 <prvHeapInit+0xb0>)
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8101d02:	4b1c      	ldr	r3, [pc, #112]	@ (8101d74 <prvHeapInit+0xb0>)
 8101d04:	2200      	movs	r2, #0
 8101d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	68ba      	ldr	r2, [r7, #8]
 8101d0c:	4413      	add	r3, r2
 8101d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8101d10:	2208      	movs	r2, #8
 8101d12:	68fb      	ldr	r3, [r7, #12]
 8101d14:	1a9b      	subs	r3, r3, r2
 8101d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101d18:	68fb      	ldr	r3, [r7, #12]
 8101d1a:	f023 0307 	bic.w	r3, r3, #7
 8101d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8101d20:	68fb      	ldr	r3, [r7, #12]
 8101d22:	4a15      	ldr	r2, [pc, #84]	@ (8101d78 <prvHeapInit+0xb4>)
 8101d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8101d26:	4b14      	ldr	r3, [pc, #80]	@ (8101d78 <prvHeapInit+0xb4>)
 8101d28:	681b      	ldr	r3, [r3, #0]
 8101d2a:	2200      	movs	r2, #0
 8101d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8101d2e:	4b12      	ldr	r3, [pc, #72]	@ (8101d78 <prvHeapInit+0xb4>)
 8101d30:	681b      	ldr	r3, [r3, #0]
 8101d32:	2200      	movs	r2, #0
 8101d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8101d3a:	683b      	ldr	r3, [r7, #0]
 8101d3c:	68fa      	ldr	r2, [r7, #12]
 8101d3e:	1ad2      	subs	r2, r2, r3
 8101d40:	683b      	ldr	r3, [r7, #0]
 8101d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101d44:	4b0c      	ldr	r3, [pc, #48]	@ (8101d78 <prvHeapInit+0xb4>)
 8101d46:	681a      	ldr	r2, [r3, #0]
 8101d48:	683b      	ldr	r3, [r7, #0]
 8101d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101d4c:	683b      	ldr	r3, [r7, #0]
 8101d4e:	685b      	ldr	r3, [r3, #4]
 8101d50:	4a0a      	ldr	r2, [pc, #40]	@ (8101d7c <prvHeapInit+0xb8>)
 8101d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101d54:	683b      	ldr	r3, [r7, #0]
 8101d56:	685b      	ldr	r3, [r3, #4]
 8101d58:	4a09      	ldr	r2, [pc, #36]	@ (8101d80 <prvHeapInit+0xbc>)
 8101d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101d5c:	4b09      	ldr	r3, [pc, #36]	@ (8101d84 <prvHeapInit+0xc0>)
 8101d5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8101d62:	601a      	str	r2, [r3, #0]
}
 8101d64:	bf00      	nop
 8101d66:	3714      	adds	r7, #20
 8101d68:	46bd      	mov	sp, r7
 8101d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d6e:	4770      	bx	lr
 8101d70:	10000828 	.word	0x10000828
 8101d74:	10004428 	.word	0x10004428
 8101d78:	10004430 	.word	0x10004430
 8101d7c:	10004438 	.word	0x10004438
 8101d80:	10004434 	.word	0x10004434
 8101d84:	10004444 	.word	0x10004444

08101d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8101d88:	b480      	push	{r7}
 8101d8a:	b085      	sub	sp, #20
 8101d8c:	af00      	add	r7, sp, #0
 8101d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8101d90:	4b28      	ldr	r3, [pc, #160]	@ (8101e34 <prvInsertBlockIntoFreeList+0xac>)
 8101d92:	60fb      	str	r3, [r7, #12]
 8101d94:	e002      	b.n	8101d9c <prvInsertBlockIntoFreeList+0x14>
 8101d96:	68fb      	ldr	r3, [r7, #12]
 8101d98:	681b      	ldr	r3, [r3, #0]
 8101d9a:	60fb      	str	r3, [r7, #12]
 8101d9c:	68fb      	ldr	r3, [r7, #12]
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	687a      	ldr	r2, [r7, #4]
 8101da2:	429a      	cmp	r2, r3
 8101da4:	d8f7      	bhi.n	8101d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8101da6:	68fb      	ldr	r3, [r7, #12]
 8101da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8101daa:	68fb      	ldr	r3, [r7, #12]
 8101dac:	685b      	ldr	r3, [r3, #4]
 8101dae:	68ba      	ldr	r2, [r7, #8]
 8101db0:	4413      	add	r3, r2
 8101db2:	687a      	ldr	r2, [r7, #4]
 8101db4:	429a      	cmp	r2, r3
 8101db6:	d108      	bne.n	8101dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8101db8:	68fb      	ldr	r3, [r7, #12]
 8101dba:	685a      	ldr	r2, [r3, #4]
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	685b      	ldr	r3, [r3, #4]
 8101dc0:	441a      	add	r2, r3
 8101dc2:	68fb      	ldr	r3, [r7, #12]
 8101dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8101dc6:	68fb      	ldr	r3, [r7, #12]
 8101dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	685b      	ldr	r3, [r3, #4]
 8101dd2:	68ba      	ldr	r2, [r7, #8]
 8101dd4:	441a      	add	r2, r3
 8101dd6:	68fb      	ldr	r3, [r7, #12]
 8101dd8:	681b      	ldr	r3, [r3, #0]
 8101dda:	429a      	cmp	r2, r3
 8101ddc:	d118      	bne.n	8101e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8101dde:	68fb      	ldr	r3, [r7, #12]
 8101de0:	681a      	ldr	r2, [r3, #0]
 8101de2:	4b15      	ldr	r3, [pc, #84]	@ (8101e38 <prvInsertBlockIntoFreeList+0xb0>)
 8101de4:	681b      	ldr	r3, [r3, #0]
 8101de6:	429a      	cmp	r2, r3
 8101de8:	d00d      	beq.n	8101e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	685a      	ldr	r2, [r3, #4]
 8101dee:	68fb      	ldr	r3, [r7, #12]
 8101df0:	681b      	ldr	r3, [r3, #0]
 8101df2:	685b      	ldr	r3, [r3, #4]
 8101df4:	441a      	add	r2, r3
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8101dfa:	68fb      	ldr	r3, [r7, #12]
 8101dfc:	681b      	ldr	r3, [r3, #0]
 8101dfe:	681a      	ldr	r2, [r3, #0]
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	601a      	str	r2, [r3, #0]
 8101e04:	e008      	b.n	8101e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8101e06:	4b0c      	ldr	r3, [pc, #48]	@ (8101e38 <prvInsertBlockIntoFreeList+0xb0>)
 8101e08:	681a      	ldr	r2, [r3, #0]
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	601a      	str	r2, [r3, #0]
 8101e0e:	e003      	b.n	8101e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8101e10:	68fb      	ldr	r3, [r7, #12]
 8101e12:	681a      	ldr	r2, [r3, #0]
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8101e18:	68fa      	ldr	r2, [r7, #12]
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	429a      	cmp	r2, r3
 8101e1e:	d002      	beq.n	8101e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8101e20:	68fb      	ldr	r3, [r7, #12]
 8101e22:	687a      	ldr	r2, [r7, #4]
 8101e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8101e26:	bf00      	nop
 8101e28:	3714      	adds	r7, #20
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e30:	4770      	bx	lr
 8101e32:	bf00      	nop
 8101e34:	10004428 	.word	0x10004428
 8101e38:	10004430 	.word	0x10004430

08101e3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101e3c:	b480      	push	{r7}
 8101e3e:	b083      	sub	sp, #12
 8101e40:	af00      	add	r7, sp, #0
 8101e42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101e44:	687b      	ldr	r3, [r7, #4]
 8101e46:	f103 0208 	add.w	r2, r3, #8
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	f04f 32ff 	mov.w	r2, #4294967295
 8101e54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101e56:	687b      	ldr	r3, [r7, #4]
 8101e58:	f103 0208 	add.w	r2, r3, #8
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	f103 0208 	add.w	r2, r3, #8
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	2200      	movs	r2, #0
 8101e6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8101e70:	bf00      	nop
 8101e72:	370c      	adds	r7, #12
 8101e74:	46bd      	mov	sp, r7
 8101e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e7a:	4770      	bx	lr

08101e7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8101e7c:	b480      	push	{r7}
 8101e7e:	b083      	sub	sp, #12
 8101e80:	af00      	add	r7, sp, #0
 8101e82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	2200      	movs	r2, #0
 8101e88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8101e8a:	bf00      	nop
 8101e8c:	370c      	adds	r7, #12
 8101e8e:	46bd      	mov	sp, r7
 8101e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e94:	4770      	bx	lr

08101e96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101e96:	b480      	push	{r7}
 8101e98:	b085      	sub	sp, #20
 8101e9a:	af00      	add	r7, sp, #0
 8101e9c:	6078      	str	r0, [r7, #4]
 8101e9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	685b      	ldr	r3, [r3, #4]
 8101ea4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8101ea6:	683b      	ldr	r3, [r7, #0]
 8101ea8:	68fa      	ldr	r2, [r7, #12]
 8101eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8101eac:	68fb      	ldr	r3, [r7, #12]
 8101eae:	689a      	ldr	r2, [r3, #8]
 8101eb0:	683b      	ldr	r3, [r7, #0]
 8101eb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8101eb4:	68fb      	ldr	r3, [r7, #12]
 8101eb6:	689b      	ldr	r3, [r3, #8]
 8101eb8:	683a      	ldr	r2, [r7, #0]
 8101eba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8101ebc:	68fb      	ldr	r3, [r7, #12]
 8101ebe:	683a      	ldr	r2, [r7, #0]
 8101ec0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8101ec2:	683b      	ldr	r3, [r7, #0]
 8101ec4:	687a      	ldr	r2, [r7, #4]
 8101ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	681b      	ldr	r3, [r3, #0]
 8101ecc:	1c5a      	adds	r2, r3, #1
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	601a      	str	r2, [r3, #0]
}
 8101ed2:	bf00      	nop
 8101ed4:	3714      	adds	r7, #20
 8101ed6:	46bd      	mov	sp, r7
 8101ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101edc:	4770      	bx	lr

08101ede <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101ede:	b480      	push	{r7}
 8101ee0:	b085      	sub	sp, #20
 8101ee2:	af00      	add	r7, sp, #0
 8101ee4:	6078      	str	r0, [r7, #4]
 8101ee6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8101ee8:	683b      	ldr	r3, [r7, #0]
 8101eea:	681b      	ldr	r3, [r3, #0]
 8101eec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8101eee:	68bb      	ldr	r3, [r7, #8]
 8101ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ef4:	d103      	bne.n	8101efe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	691b      	ldr	r3, [r3, #16]
 8101efa:	60fb      	str	r3, [r7, #12]
 8101efc:	e00c      	b.n	8101f18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	3308      	adds	r3, #8
 8101f02:	60fb      	str	r3, [r7, #12]
 8101f04:	e002      	b.n	8101f0c <vListInsert+0x2e>
 8101f06:	68fb      	ldr	r3, [r7, #12]
 8101f08:	685b      	ldr	r3, [r3, #4]
 8101f0a:	60fb      	str	r3, [r7, #12]
 8101f0c:	68fb      	ldr	r3, [r7, #12]
 8101f0e:	685b      	ldr	r3, [r3, #4]
 8101f10:	681b      	ldr	r3, [r3, #0]
 8101f12:	68ba      	ldr	r2, [r7, #8]
 8101f14:	429a      	cmp	r2, r3
 8101f16:	d2f6      	bcs.n	8101f06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8101f18:	68fb      	ldr	r3, [r7, #12]
 8101f1a:	685a      	ldr	r2, [r3, #4]
 8101f1c:	683b      	ldr	r3, [r7, #0]
 8101f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8101f20:	683b      	ldr	r3, [r7, #0]
 8101f22:	685b      	ldr	r3, [r3, #4]
 8101f24:	683a      	ldr	r2, [r7, #0]
 8101f26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8101f28:	683b      	ldr	r3, [r7, #0]
 8101f2a:	68fa      	ldr	r2, [r7, #12]
 8101f2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101f2e:	68fb      	ldr	r3, [r7, #12]
 8101f30:	683a      	ldr	r2, [r7, #0]
 8101f32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101f34:	683b      	ldr	r3, [r7, #0]
 8101f36:	687a      	ldr	r2, [r7, #4]
 8101f38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	681b      	ldr	r3, [r3, #0]
 8101f3e:	1c5a      	adds	r2, r3, #1
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	601a      	str	r2, [r3, #0]
}
 8101f44:	bf00      	nop
 8101f46:	3714      	adds	r7, #20
 8101f48:	46bd      	mov	sp, r7
 8101f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4e:	4770      	bx	lr

08101f50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101f50:	b480      	push	{r7}
 8101f52:	b085      	sub	sp, #20
 8101f54:	af00      	add	r7, sp, #0
 8101f56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	691b      	ldr	r3, [r3, #16]
 8101f5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8101f5e:	687b      	ldr	r3, [r7, #4]
 8101f60:	685b      	ldr	r3, [r3, #4]
 8101f62:	687a      	ldr	r2, [r7, #4]
 8101f64:	6892      	ldr	r2, [r2, #8]
 8101f66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	689b      	ldr	r3, [r3, #8]
 8101f6c:	687a      	ldr	r2, [r7, #4]
 8101f6e:	6852      	ldr	r2, [r2, #4]
 8101f70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8101f72:	68fb      	ldr	r3, [r7, #12]
 8101f74:	685b      	ldr	r3, [r3, #4]
 8101f76:	687a      	ldr	r2, [r7, #4]
 8101f78:	429a      	cmp	r2, r3
 8101f7a:	d103      	bne.n	8101f84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	689a      	ldr	r2, [r3, #8]
 8101f80:	68fb      	ldr	r3, [r7, #12]
 8101f82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	2200      	movs	r2, #0
 8101f88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8101f8a:	68fb      	ldr	r3, [r7, #12]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	1e5a      	subs	r2, r3, #1
 8101f90:	68fb      	ldr	r3, [r7, #12]
 8101f92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8101f94:	68fb      	ldr	r3, [r7, #12]
 8101f96:	681b      	ldr	r3, [r3, #0]
}
 8101f98:	4618      	mov	r0, r3
 8101f9a:	3714      	adds	r7, #20
 8101f9c:	46bd      	mov	sp, r7
 8101f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa2:	4770      	bx	lr

08101fa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8101fa4:	b480      	push	{r7}
 8101fa6:	b085      	sub	sp, #20
 8101fa8:	af00      	add	r7, sp, #0
 8101faa:	60f8      	str	r0, [r7, #12]
 8101fac:	60b9      	str	r1, [r7, #8]
 8101fae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8101fb0:	68fb      	ldr	r3, [r7, #12]
 8101fb2:	3b04      	subs	r3, #4
 8101fb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8101fb6:	68fb      	ldr	r3, [r7, #12]
 8101fb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8101fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101fbe:	68fb      	ldr	r3, [r7, #12]
 8101fc0:	3b04      	subs	r3, #4
 8101fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8101fc4:	68bb      	ldr	r3, [r7, #8]
 8101fc6:	f023 0201 	bic.w	r2, r3, #1
 8101fca:	68fb      	ldr	r3, [r7, #12]
 8101fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101fce:	68fb      	ldr	r3, [r7, #12]
 8101fd0:	3b04      	subs	r3, #4
 8101fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8102008 <pxPortInitialiseStack+0x64>)
 8101fd6:	68fb      	ldr	r3, [r7, #12]
 8101fd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101fda:	68fb      	ldr	r3, [r7, #12]
 8101fdc:	3b14      	subs	r3, #20
 8101fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8101fe0:	687a      	ldr	r2, [r7, #4]
 8101fe2:	68fb      	ldr	r3, [r7, #12]
 8101fe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8101fe6:	68fb      	ldr	r3, [r7, #12]
 8101fe8:	3b04      	subs	r3, #4
 8101fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8101fec:	68fb      	ldr	r3, [r7, #12]
 8101fee:	f06f 0202 	mvn.w	r2, #2
 8101ff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8101ff4:	68fb      	ldr	r3, [r7, #12]
 8101ff6:	3b20      	subs	r3, #32
 8101ff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8101ffa:	68fb      	ldr	r3, [r7, #12]
}
 8101ffc:	4618      	mov	r0, r3
 8101ffe:	3714      	adds	r7, #20
 8102000:	46bd      	mov	sp, r7
 8102002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102006:	4770      	bx	lr
 8102008:	0810200d 	.word	0x0810200d

0810200c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810200c:	b480      	push	{r7}
 810200e:	b085      	sub	sp, #20
 8102010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8102012:	2300      	movs	r3, #0
 8102014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8102016:	4b13      	ldr	r3, [pc, #76]	@ (8102064 <prvTaskExitError+0x58>)
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810201e:	d00b      	beq.n	8102038 <prvTaskExitError+0x2c>
	__asm volatile
 8102020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102024:	f383 8811 	msr	BASEPRI, r3
 8102028:	f3bf 8f6f 	isb	sy
 810202c:	f3bf 8f4f 	dsb	sy
 8102030:	60fb      	str	r3, [r7, #12]
}
 8102032:	bf00      	nop
 8102034:	bf00      	nop
 8102036:	e7fd      	b.n	8102034 <prvTaskExitError+0x28>
	__asm volatile
 8102038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810203c:	f383 8811 	msr	BASEPRI, r3
 8102040:	f3bf 8f6f 	isb	sy
 8102044:	f3bf 8f4f 	dsb	sy
 8102048:	60bb      	str	r3, [r7, #8]
}
 810204a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810204c:	bf00      	nop
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	2b00      	cmp	r3, #0
 8102052:	d0fc      	beq.n	810204e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8102054:	bf00      	nop
 8102056:	bf00      	nop
 8102058:	3714      	adds	r7, #20
 810205a:	46bd      	mov	sp, r7
 810205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102060:	4770      	bx	lr
 8102062:	bf00      	nop
 8102064:	10000010 	.word	0x10000010
	...

08102070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8102070:	4b07      	ldr	r3, [pc, #28]	@ (8102090 <pxCurrentTCBConst2>)
 8102072:	6819      	ldr	r1, [r3, #0]
 8102074:	6808      	ldr	r0, [r1, #0]
 8102076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810207a:	f380 8809 	msr	PSP, r0
 810207e:	f3bf 8f6f 	isb	sy
 8102082:	f04f 0000 	mov.w	r0, #0
 8102086:	f380 8811 	msr	BASEPRI, r0
 810208a:	4770      	bx	lr
 810208c:	f3af 8000 	nop.w

08102090 <pxCurrentTCBConst2>:
 8102090:	10004490 	.word	0x10004490
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8102094:	bf00      	nop
 8102096:	bf00      	nop

08102098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8102098:	4808      	ldr	r0, [pc, #32]	@ (81020bc <prvPortStartFirstTask+0x24>)
 810209a:	6800      	ldr	r0, [r0, #0]
 810209c:	6800      	ldr	r0, [r0, #0]
 810209e:	f380 8808 	msr	MSP, r0
 81020a2:	f04f 0000 	mov.w	r0, #0
 81020a6:	f380 8814 	msr	CONTROL, r0
 81020aa:	b662      	cpsie	i
 81020ac:	b661      	cpsie	f
 81020ae:	f3bf 8f4f 	dsb	sy
 81020b2:	f3bf 8f6f 	isb	sy
 81020b6:	df00      	svc	0
 81020b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81020ba:	bf00      	nop
 81020bc:	e000ed08 	.word	0xe000ed08

081020c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81020c0:	b580      	push	{r7, lr}
 81020c2:	b086      	sub	sp, #24
 81020c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81020c6:	4b47      	ldr	r3, [pc, #284]	@ (81021e4 <xPortStartScheduler+0x124>)
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	4a47      	ldr	r2, [pc, #284]	@ (81021e8 <xPortStartScheduler+0x128>)
 81020cc:	4293      	cmp	r3, r2
 81020ce:	d10b      	bne.n	81020e8 <xPortStartScheduler+0x28>
	__asm volatile
 81020d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81020d4:	f383 8811 	msr	BASEPRI, r3
 81020d8:	f3bf 8f6f 	isb	sy
 81020dc:	f3bf 8f4f 	dsb	sy
 81020e0:	613b      	str	r3, [r7, #16]
}
 81020e2:	bf00      	nop
 81020e4:	bf00      	nop
 81020e6:	e7fd      	b.n	81020e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81020e8:	4b3e      	ldr	r3, [pc, #248]	@ (81021e4 <xPortStartScheduler+0x124>)
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	4a3f      	ldr	r2, [pc, #252]	@ (81021ec <xPortStartScheduler+0x12c>)
 81020ee:	4293      	cmp	r3, r2
 81020f0:	d10b      	bne.n	810210a <xPortStartScheduler+0x4a>
	__asm volatile
 81020f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81020f6:	f383 8811 	msr	BASEPRI, r3
 81020fa:	f3bf 8f6f 	isb	sy
 81020fe:	f3bf 8f4f 	dsb	sy
 8102102:	60fb      	str	r3, [r7, #12]
}
 8102104:	bf00      	nop
 8102106:	bf00      	nop
 8102108:	e7fd      	b.n	8102106 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810210a:	4b39      	ldr	r3, [pc, #228]	@ (81021f0 <xPortStartScheduler+0x130>)
 810210c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810210e:	697b      	ldr	r3, [r7, #20]
 8102110:	781b      	ldrb	r3, [r3, #0]
 8102112:	b2db      	uxtb	r3, r3
 8102114:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8102116:	697b      	ldr	r3, [r7, #20]
 8102118:	22ff      	movs	r2, #255	@ 0xff
 810211a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810211c:	697b      	ldr	r3, [r7, #20]
 810211e:	781b      	ldrb	r3, [r3, #0]
 8102120:	b2db      	uxtb	r3, r3
 8102122:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8102124:	78fb      	ldrb	r3, [r7, #3]
 8102126:	b2db      	uxtb	r3, r3
 8102128:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810212c:	b2da      	uxtb	r2, r3
 810212e:	4b31      	ldr	r3, [pc, #196]	@ (81021f4 <xPortStartScheduler+0x134>)
 8102130:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8102132:	4b31      	ldr	r3, [pc, #196]	@ (81021f8 <xPortStartScheduler+0x138>)
 8102134:	2207      	movs	r2, #7
 8102136:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102138:	e009      	b.n	810214e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810213a:	4b2f      	ldr	r3, [pc, #188]	@ (81021f8 <xPortStartScheduler+0x138>)
 810213c:	681b      	ldr	r3, [r3, #0]
 810213e:	3b01      	subs	r3, #1
 8102140:	4a2d      	ldr	r2, [pc, #180]	@ (81021f8 <xPortStartScheduler+0x138>)
 8102142:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8102144:	78fb      	ldrb	r3, [r7, #3]
 8102146:	b2db      	uxtb	r3, r3
 8102148:	005b      	lsls	r3, r3, #1
 810214a:	b2db      	uxtb	r3, r3
 810214c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810214e:	78fb      	ldrb	r3, [r7, #3]
 8102150:	b2db      	uxtb	r3, r3
 8102152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102156:	2b80      	cmp	r3, #128	@ 0x80
 8102158:	d0ef      	beq.n	810213a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810215a:	4b27      	ldr	r3, [pc, #156]	@ (81021f8 <xPortStartScheduler+0x138>)
 810215c:	681b      	ldr	r3, [r3, #0]
 810215e:	f1c3 0307 	rsb	r3, r3, #7
 8102162:	2b04      	cmp	r3, #4
 8102164:	d00b      	beq.n	810217e <xPortStartScheduler+0xbe>
	__asm volatile
 8102166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810216a:	f383 8811 	msr	BASEPRI, r3
 810216e:	f3bf 8f6f 	isb	sy
 8102172:	f3bf 8f4f 	dsb	sy
 8102176:	60bb      	str	r3, [r7, #8]
}
 8102178:	bf00      	nop
 810217a:	bf00      	nop
 810217c:	e7fd      	b.n	810217a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810217e:	4b1e      	ldr	r3, [pc, #120]	@ (81021f8 <xPortStartScheduler+0x138>)
 8102180:	681b      	ldr	r3, [r3, #0]
 8102182:	021b      	lsls	r3, r3, #8
 8102184:	4a1c      	ldr	r2, [pc, #112]	@ (81021f8 <xPortStartScheduler+0x138>)
 8102186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8102188:	4b1b      	ldr	r3, [pc, #108]	@ (81021f8 <xPortStartScheduler+0x138>)
 810218a:	681b      	ldr	r3, [r3, #0]
 810218c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8102190:	4a19      	ldr	r2, [pc, #100]	@ (81021f8 <xPortStartScheduler+0x138>)
 8102192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	b2da      	uxtb	r2, r3
 8102198:	697b      	ldr	r3, [r7, #20]
 810219a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810219c:	4b17      	ldr	r3, [pc, #92]	@ (81021fc <xPortStartScheduler+0x13c>)
 810219e:	681b      	ldr	r3, [r3, #0]
 81021a0:	4a16      	ldr	r2, [pc, #88]	@ (81021fc <xPortStartScheduler+0x13c>)
 81021a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81021a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81021a8:	4b14      	ldr	r3, [pc, #80]	@ (81021fc <xPortStartScheduler+0x13c>)
 81021aa:	681b      	ldr	r3, [r3, #0]
 81021ac:	4a13      	ldr	r2, [pc, #76]	@ (81021fc <xPortStartScheduler+0x13c>)
 81021ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81021b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81021b4:	f000 f8da 	bl	810236c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81021b8:	4b11      	ldr	r3, [pc, #68]	@ (8102200 <xPortStartScheduler+0x140>)
 81021ba:	2200      	movs	r2, #0
 81021bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81021be:	f000 f8f9 	bl	81023b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81021c2:	4b10      	ldr	r3, [pc, #64]	@ (8102204 <xPortStartScheduler+0x144>)
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	4a0f      	ldr	r2, [pc, #60]	@ (8102204 <xPortStartScheduler+0x144>)
 81021c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 81021cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81021ce:	f7ff ff63 	bl	8102098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81021d2:	f001 fa0f 	bl	81035f4 <vTaskSwitchContext>
	prvTaskExitError();
 81021d6:	f7ff ff19 	bl	810200c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81021da:	2300      	movs	r3, #0
}
 81021dc:	4618      	mov	r0, r3
 81021de:	3718      	adds	r7, #24
 81021e0:	46bd      	mov	sp, r7
 81021e2:	bd80      	pop	{r7, pc}
 81021e4:	e000ed00 	.word	0xe000ed00
 81021e8:	410fc271 	.word	0x410fc271
 81021ec:	410fc270 	.word	0x410fc270
 81021f0:	e000e400 	.word	0xe000e400
 81021f4:	10004448 	.word	0x10004448
 81021f8:	1000444c 	.word	0x1000444c
 81021fc:	e000ed20 	.word	0xe000ed20
 8102200:	10000010 	.word	0x10000010
 8102204:	e000ef34 	.word	0xe000ef34

08102208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8102208:	b480      	push	{r7}
 810220a:	b083      	sub	sp, #12
 810220c:	af00      	add	r7, sp, #0
	__asm volatile
 810220e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102212:	f383 8811 	msr	BASEPRI, r3
 8102216:	f3bf 8f6f 	isb	sy
 810221a:	f3bf 8f4f 	dsb	sy
 810221e:	607b      	str	r3, [r7, #4]
}
 8102220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8102222:	4b10      	ldr	r3, [pc, #64]	@ (8102264 <vPortEnterCritical+0x5c>)
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	3301      	adds	r3, #1
 8102228:	4a0e      	ldr	r2, [pc, #56]	@ (8102264 <vPortEnterCritical+0x5c>)
 810222a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810222c:	4b0d      	ldr	r3, [pc, #52]	@ (8102264 <vPortEnterCritical+0x5c>)
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	2b01      	cmp	r3, #1
 8102232:	d110      	bne.n	8102256 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102234:	4b0c      	ldr	r3, [pc, #48]	@ (8102268 <vPortEnterCritical+0x60>)
 8102236:	681b      	ldr	r3, [r3, #0]
 8102238:	b2db      	uxtb	r3, r3
 810223a:	2b00      	cmp	r3, #0
 810223c:	d00b      	beq.n	8102256 <vPortEnterCritical+0x4e>
	__asm volatile
 810223e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102242:	f383 8811 	msr	BASEPRI, r3
 8102246:	f3bf 8f6f 	isb	sy
 810224a:	f3bf 8f4f 	dsb	sy
 810224e:	603b      	str	r3, [r7, #0]
}
 8102250:	bf00      	nop
 8102252:	bf00      	nop
 8102254:	e7fd      	b.n	8102252 <vPortEnterCritical+0x4a>
	}
}
 8102256:	bf00      	nop
 8102258:	370c      	adds	r7, #12
 810225a:	46bd      	mov	sp, r7
 810225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102260:	4770      	bx	lr
 8102262:	bf00      	nop
 8102264:	10000010 	.word	0x10000010
 8102268:	e000ed04 	.word	0xe000ed04

0810226c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810226c:	b480      	push	{r7}
 810226e:	b083      	sub	sp, #12
 8102270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8102272:	4b12      	ldr	r3, [pc, #72]	@ (81022bc <vPortExitCritical+0x50>)
 8102274:	681b      	ldr	r3, [r3, #0]
 8102276:	2b00      	cmp	r3, #0
 8102278:	d10b      	bne.n	8102292 <vPortExitCritical+0x26>
	__asm volatile
 810227a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810227e:	f383 8811 	msr	BASEPRI, r3
 8102282:	f3bf 8f6f 	isb	sy
 8102286:	f3bf 8f4f 	dsb	sy
 810228a:	607b      	str	r3, [r7, #4]
}
 810228c:	bf00      	nop
 810228e:	bf00      	nop
 8102290:	e7fd      	b.n	810228e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8102292:	4b0a      	ldr	r3, [pc, #40]	@ (81022bc <vPortExitCritical+0x50>)
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	3b01      	subs	r3, #1
 8102298:	4a08      	ldr	r2, [pc, #32]	@ (81022bc <vPortExitCritical+0x50>)
 810229a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810229c:	4b07      	ldr	r3, [pc, #28]	@ (81022bc <vPortExitCritical+0x50>)
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	2b00      	cmp	r3, #0
 81022a2:	d105      	bne.n	81022b0 <vPortExitCritical+0x44>
 81022a4:	2300      	movs	r3, #0
 81022a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81022a8:	683b      	ldr	r3, [r7, #0]
 81022aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81022ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81022b0:	bf00      	nop
 81022b2:	370c      	adds	r7, #12
 81022b4:	46bd      	mov	sp, r7
 81022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ba:	4770      	bx	lr
 81022bc:	10000010 	.word	0x10000010

081022c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81022c0:	f3ef 8009 	mrs	r0, PSP
 81022c4:	f3bf 8f6f 	isb	sy
 81022c8:	4b15      	ldr	r3, [pc, #84]	@ (8102320 <pxCurrentTCBConst>)
 81022ca:	681a      	ldr	r2, [r3, #0]
 81022cc:	f01e 0f10 	tst.w	lr, #16
 81022d0:	bf08      	it	eq
 81022d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81022d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81022da:	6010      	str	r0, [r2, #0]
 81022dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81022e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81022e4:	f380 8811 	msr	BASEPRI, r0
 81022e8:	f3bf 8f4f 	dsb	sy
 81022ec:	f3bf 8f6f 	isb	sy
 81022f0:	f001 f980 	bl	81035f4 <vTaskSwitchContext>
 81022f4:	f04f 0000 	mov.w	r0, #0
 81022f8:	f380 8811 	msr	BASEPRI, r0
 81022fc:	bc09      	pop	{r0, r3}
 81022fe:	6819      	ldr	r1, [r3, #0]
 8102300:	6808      	ldr	r0, [r1, #0]
 8102302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102306:	f01e 0f10 	tst.w	lr, #16
 810230a:	bf08      	it	eq
 810230c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102310:	f380 8809 	msr	PSP, r0
 8102314:	f3bf 8f6f 	isb	sy
 8102318:	4770      	bx	lr
 810231a:	bf00      	nop
 810231c:	f3af 8000 	nop.w

08102320 <pxCurrentTCBConst>:
 8102320:	10004490 	.word	0x10004490
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102324:	bf00      	nop
 8102326:	bf00      	nop

08102328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102328:	b580      	push	{r7, lr}
 810232a:	b082      	sub	sp, #8
 810232c:	af00      	add	r7, sp, #0
	__asm volatile
 810232e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102332:	f383 8811 	msr	BASEPRI, r3
 8102336:	f3bf 8f6f 	isb	sy
 810233a:	f3bf 8f4f 	dsb	sy
 810233e:	607b      	str	r3, [r7, #4]
}
 8102340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8102342:	f001 f89d 	bl	8103480 <xTaskIncrementTick>
 8102346:	4603      	mov	r3, r0
 8102348:	2b00      	cmp	r3, #0
 810234a:	d003      	beq.n	8102354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810234c:	4b06      	ldr	r3, [pc, #24]	@ (8102368 <xPortSysTickHandler+0x40>)
 810234e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102352:	601a      	str	r2, [r3, #0]
 8102354:	2300      	movs	r3, #0
 8102356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8102358:	683b      	ldr	r3, [r7, #0]
 810235a:	f383 8811 	msr	BASEPRI, r3
}
 810235e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8102360:	bf00      	nop
 8102362:	3708      	adds	r7, #8
 8102364:	46bd      	mov	sp, r7
 8102366:	bd80      	pop	{r7, pc}
 8102368:	e000ed04 	.word	0xe000ed04

0810236c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810236c:	b480      	push	{r7}
 810236e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8102370:	4b0b      	ldr	r3, [pc, #44]	@ (81023a0 <vPortSetupTimerInterrupt+0x34>)
 8102372:	2200      	movs	r2, #0
 8102374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8102376:	4b0b      	ldr	r3, [pc, #44]	@ (81023a4 <vPortSetupTimerInterrupt+0x38>)
 8102378:	2200      	movs	r2, #0
 810237a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810237c:	4b0a      	ldr	r3, [pc, #40]	@ (81023a8 <vPortSetupTimerInterrupt+0x3c>)
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	4a0a      	ldr	r2, [pc, #40]	@ (81023ac <vPortSetupTimerInterrupt+0x40>)
 8102382:	fba2 2303 	umull	r2, r3, r2, r3
 8102386:	099b      	lsrs	r3, r3, #6
 8102388:	4a09      	ldr	r2, [pc, #36]	@ (81023b0 <vPortSetupTimerInterrupt+0x44>)
 810238a:	3b01      	subs	r3, #1
 810238c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810238e:	4b04      	ldr	r3, [pc, #16]	@ (81023a0 <vPortSetupTimerInterrupt+0x34>)
 8102390:	2207      	movs	r2, #7
 8102392:	601a      	str	r2, [r3, #0]
}
 8102394:	bf00      	nop
 8102396:	46bd      	mov	sp, r7
 8102398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239c:	4770      	bx	lr
 810239e:	bf00      	nop
 81023a0:	e000e010 	.word	0xe000e010
 81023a4:	e000e018 	.word	0xe000e018
 81023a8:	10000004 	.word	0x10000004
 81023ac:	10624dd3 	.word	0x10624dd3
 81023b0:	e000e014 	.word	0xe000e014

081023b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81023b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 81023c4 <vPortEnableVFP+0x10>
 81023b8:	6801      	ldr	r1, [r0, #0]
 81023ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81023be:	6001      	str	r1, [r0, #0]
 81023c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81023c2:	bf00      	nop
 81023c4:	e000ed88 	.word	0xe000ed88

081023c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81023c8:	b480      	push	{r7}
 81023ca:	b085      	sub	sp, #20
 81023cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81023ce:	f3ef 8305 	mrs	r3, IPSR
 81023d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81023d4:	68fb      	ldr	r3, [r7, #12]
 81023d6:	2b0f      	cmp	r3, #15
 81023d8:	d915      	bls.n	8102406 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81023da:	4a18      	ldr	r2, [pc, #96]	@ (810243c <vPortValidateInterruptPriority+0x74>)
 81023dc:	68fb      	ldr	r3, [r7, #12]
 81023de:	4413      	add	r3, r2
 81023e0:	781b      	ldrb	r3, [r3, #0]
 81023e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81023e4:	4b16      	ldr	r3, [pc, #88]	@ (8102440 <vPortValidateInterruptPriority+0x78>)
 81023e6:	781b      	ldrb	r3, [r3, #0]
 81023e8:	7afa      	ldrb	r2, [r7, #11]
 81023ea:	429a      	cmp	r2, r3
 81023ec:	d20b      	bcs.n	8102406 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 81023ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81023f2:	f383 8811 	msr	BASEPRI, r3
 81023f6:	f3bf 8f6f 	isb	sy
 81023fa:	f3bf 8f4f 	dsb	sy
 81023fe:	607b      	str	r3, [r7, #4]
}
 8102400:	bf00      	nop
 8102402:	bf00      	nop
 8102404:	e7fd      	b.n	8102402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8102406:	4b0f      	ldr	r3, [pc, #60]	@ (8102444 <vPortValidateInterruptPriority+0x7c>)
 8102408:	681b      	ldr	r3, [r3, #0]
 810240a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810240e:	4b0e      	ldr	r3, [pc, #56]	@ (8102448 <vPortValidateInterruptPriority+0x80>)
 8102410:	681b      	ldr	r3, [r3, #0]
 8102412:	429a      	cmp	r2, r3
 8102414:	d90b      	bls.n	810242e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8102416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810241a:	f383 8811 	msr	BASEPRI, r3
 810241e:	f3bf 8f6f 	isb	sy
 8102422:	f3bf 8f4f 	dsb	sy
 8102426:	603b      	str	r3, [r7, #0]
}
 8102428:	bf00      	nop
 810242a:	bf00      	nop
 810242c:	e7fd      	b.n	810242a <vPortValidateInterruptPriority+0x62>
	}
 810242e:	bf00      	nop
 8102430:	3714      	adds	r7, #20
 8102432:	46bd      	mov	sp, r7
 8102434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102438:	4770      	bx	lr
 810243a:	bf00      	nop
 810243c:	e000e3f0 	.word	0xe000e3f0
 8102440:	10004448 	.word	0x10004448
 8102444:	e000ed0c 	.word	0xe000ed0c
 8102448:	1000444c 	.word	0x1000444c

0810244c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810244c:	b580      	push	{r7, lr}
 810244e:	b084      	sub	sp, #16
 8102450:	af00      	add	r7, sp, #0
 8102452:	6078      	str	r0, [r7, #4]
 8102454:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810245a:	68fb      	ldr	r3, [r7, #12]
 810245c:	2b00      	cmp	r3, #0
 810245e:	d10b      	bne.n	8102478 <xQueueGenericReset+0x2c>
	__asm volatile
 8102460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102464:	f383 8811 	msr	BASEPRI, r3
 8102468:	f3bf 8f6f 	isb	sy
 810246c:	f3bf 8f4f 	dsb	sy
 8102470:	60bb      	str	r3, [r7, #8]
}
 8102472:	bf00      	nop
 8102474:	bf00      	nop
 8102476:	e7fd      	b.n	8102474 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8102478:	f7ff fec6 	bl	8102208 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810247c:	68fb      	ldr	r3, [r7, #12]
 810247e:	681a      	ldr	r2, [r3, #0]
 8102480:	68fb      	ldr	r3, [r7, #12]
 8102482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102484:	68f9      	ldr	r1, [r7, #12]
 8102486:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8102488:	fb01 f303 	mul.w	r3, r1, r3
 810248c:	441a      	add	r2, r3
 810248e:	68fb      	ldr	r3, [r7, #12]
 8102490:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8102492:	68fb      	ldr	r3, [r7, #12]
 8102494:	2200      	movs	r2, #0
 8102496:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8102498:	68fb      	ldr	r3, [r7, #12]
 810249a:	681a      	ldr	r2, [r3, #0]
 810249c:	68fb      	ldr	r3, [r7, #12]
 810249e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81024a0:	68fb      	ldr	r3, [r7, #12]
 81024a2:	681a      	ldr	r2, [r3, #0]
 81024a4:	68fb      	ldr	r3, [r7, #12]
 81024a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81024a8:	3b01      	subs	r3, #1
 81024aa:	68f9      	ldr	r1, [r7, #12]
 81024ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81024ae:	fb01 f303 	mul.w	r3, r1, r3
 81024b2:	441a      	add	r2, r3
 81024b4:	68fb      	ldr	r3, [r7, #12]
 81024b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81024b8:	68fb      	ldr	r3, [r7, #12]
 81024ba:	22ff      	movs	r2, #255	@ 0xff
 81024bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81024c0:	68fb      	ldr	r3, [r7, #12]
 81024c2:	22ff      	movs	r2, #255	@ 0xff
 81024c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 81024c8:	683b      	ldr	r3, [r7, #0]
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	d114      	bne.n	81024f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81024ce:	68fb      	ldr	r3, [r7, #12]
 81024d0:	691b      	ldr	r3, [r3, #16]
 81024d2:	2b00      	cmp	r3, #0
 81024d4:	d01a      	beq.n	810250c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81024d6:	68fb      	ldr	r3, [r7, #12]
 81024d8:	3310      	adds	r3, #16
 81024da:	4618      	mov	r0, r3
 81024dc:	f001 f942 	bl	8103764 <xTaskRemoveFromEventList>
 81024e0:	4603      	mov	r3, r0
 81024e2:	2b00      	cmp	r3, #0
 81024e4:	d012      	beq.n	810250c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81024e6:	4b0d      	ldr	r3, [pc, #52]	@ (810251c <xQueueGenericReset+0xd0>)
 81024e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81024ec:	601a      	str	r2, [r3, #0]
 81024ee:	f3bf 8f4f 	dsb	sy
 81024f2:	f3bf 8f6f 	isb	sy
 81024f6:	e009      	b.n	810250c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81024f8:	68fb      	ldr	r3, [r7, #12]
 81024fa:	3310      	adds	r3, #16
 81024fc:	4618      	mov	r0, r3
 81024fe:	f7ff fc9d 	bl	8101e3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8102502:	68fb      	ldr	r3, [r7, #12]
 8102504:	3324      	adds	r3, #36	@ 0x24
 8102506:	4618      	mov	r0, r3
 8102508:	f7ff fc98 	bl	8101e3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810250c:	f7ff feae 	bl	810226c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8102510:	2301      	movs	r3, #1
}
 8102512:	4618      	mov	r0, r3
 8102514:	3710      	adds	r7, #16
 8102516:	46bd      	mov	sp, r7
 8102518:	bd80      	pop	{r7, pc}
 810251a:	bf00      	nop
 810251c:	e000ed04 	.word	0xe000ed04

08102520 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8102520:	b580      	push	{r7, lr}
 8102522:	b08e      	sub	sp, #56	@ 0x38
 8102524:	af02      	add	r7, sp, #8
 8102526:	60f8      	str	r0, [r7, #12]
 8102528:	60b9      	str	r1, [r7, #8]
 810252a:	607a      	str	r2, [r7, #4]
 810252c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810252e:	68fb      	ldr	r3, [r7, #12]
 8102530:	2b00      	cmp	r3, #0
 8102532:	d10b      	bne.n	810254c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8102534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102538:	f383 8811 	msr	BASEPRI, r3
 810253c:	f3bf 8f6f 	isb	sy
 8102540:	f3bf 8f4f 	dsb	sy
 8102544:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8102546:	bf00      	nop
 8102548:	bf00      	nop
 810254a:	e7fd      	b.n	8102548 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810254c:	683b      	ldr	r3, [r7, #0]
 810254e:	2b00      	cmp	r3, #0
 8102550:	d10b      	bne.n	810256a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8102552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102556:	f383 8811 	msr	BASEPRI, r3
 810255a:	f3bf 8f6f 	isb	sy
 810255e:	f3bf 8f4f 	dsb	sy
 8102562:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8102564:	bf00      	nop
 8102566:	bf00      	nop
 8102568:	e7fd      	b.n	8102566 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	2b00      	cmp	r3, #0
 810256e:	d002      	beq.n	8102576 <xQueueGenericCreateStatic+0x56>
 8102570:	68bb      	ldr	r3, [r7, #8]
 8102572:	2b00      	cmp	r3, #0
 8102574:	d001      	beq.n	810257a <xQueueGenericCreateStatic+0x5a>
 8102576:	2301      	movs	r3, #1
 8102578:	e000      	b.n	810257c <xQueueGenericCreateStatic+0x5c>
 810257a:	2300      	movs	r3, #0
 810257c:	2b00      	cmp	r3, #0
 810257e:	d10b      	bne.n	8102598 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8102580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102584:	f383 8811 	msr	BASEPRI, r3
 8102588:	f3bf 8f6f 	isb	sy
 810258c:	f3bf 8f4f 	dsb	sy
 8102590:	623b      	str	r3, [r7, #32]
}
 8102592:	bf00      	nop
 8102594:	bf00      	nop
 8102596:	e7fd      	b.n	8102594 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	2b00      	cmp	r3, #0
 810259c:	d102      	bne.n	81025a4 <xQueueGenericCreateStatic+0x84>
 810259e:	68bb      	ldr	r3, [r7, #8]
 81025a0:	2b00      	cmp	r3, #0
 81025a2:	d101      	bne.n	81025a8 <xQueueGenericCreateStatic+0x88>
 81025a4:	2301      	movs	r3, #1
 81025a6:	e000      	b.n	81025aa <xQueueGenericCreateStatic+0x8a>
 81025a8:	2300      	movs	r3, #0
 81025aa:	2b00      	cmp	r3, #0
 81025ac:	d10b      	bne.n	81025c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 81025ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81025b2:	f383 8811 	msr	BASEPRI, r3
 81025b6:	f3bf 8f6f 	isb	sy
 81025ba:	f3bf 8f4f 	dsb	sy
 81025be:	61fb      	str	r3, [r7, #28]
}
 81025c0:	bf00      	nop
 81025c2:	bf00      	nop
 81025c4:	e7fd      	b.n	81025c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81025c6:	2350      	movs	r3, #80	@ 0x50
 81025c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81025ca:	697b      	ldr	r3, [r7, #20]
 81025cc:	2b50      	cmp	r3, #80	@ 0x50
 81025ce:	d00b      	beq.n	81025e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81025d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81025d4:	f383 8811 	msr	BASEPRI, r3
 81025d8:	f3bf 8f6f 	isb	sy
 81025dc:	f3bf 8f4f 	dsb	sy
 81025e0:	61bb      	str	r3, [r7, #24]
}
 81025e2:	bf00      	nop
 81025e4:	bf00      	nop
 81025e6:	e7fd      	b.n	81025e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81025e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81025ea:	683b      	ldr	r3, [r7, #0]
 81025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 81025ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81025f0:	2b00      	cmp	r3, #0
 81025f2:	d00d      	beq.n	8102610 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81025f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81025f6:	2201      	movs	r2, #1
 81025f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81025fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8102600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102602:	9300      	str	r3, [sp, #0]
 8102604:	4613      	mov	r3, r2
 8102606:	687a      	ldr	r2, [r7, #4]
 8102608:	68b9      	ldr	r1, [r7, #8]
 810260a:	68f8      	ldr	r0, [r7, #12]
 810260c:	f000 f805 	bl	810261a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8102610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8102612:	4618      	mov	r0, r3
 8102614:	3730      	adds	r7, #48	@ 0x30
 8102616:	46bd      	mov	sp, r7
 8102618:	bd80      	pop	{r7, pc}

0810261a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810261a:	b580      	push	{r7, lr}
 810261c:	b084      	sub	sp, #16
 810261e:	af00      	add	r7, sp, #0
 8102620:	60f8      	str	r0, [r7, #12]
 8102622:	60b9      	str	r1, [r7, #8]
 8102624:	607a      	str	r2, [r7, #4]
 8102626:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8102628:	68bb      	ldr	r3, [r7, #8]
 810262a:	2b00      	cmp	r3, #0
 810262c:	d103      	bne.n	8102636 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810262e:	69bb      	ldr	r3, [r7, #24]
 8102630:	69ba      	ldr	r2, [r7, #24]
 8102632:	601a      	str	r2, [r3, #0]
 8102634:	e002      	b.n	810263c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8102636:	69bb      	ldr	r3, [r7, #24]
 8102638:	687a      	ldr	r2, [r7, #4]
 810263a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810263c:	69bb      	ldr	r3, [r7, #24]
 810263e:	68fa      	ldr	r2, [r7, #12]
 8102640:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8102642:	69bb      	ldr	r3, [r7, #24]
 8102644:	68ba      	ldr	r2, [r7, #8]
 8102646:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8102648:	2101      	movs	r1, #1
 810264a:	69b8      	ldr	r0, [r7, #24]
 810264c:	f7ff fefe 	bl	810244c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8102650:	69bb      	ldr	r3, [r7, #24]
 8102652:	78fa      	ldrb	r2, [r7, #3]
 8102654:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8102658:	bf00      	nop
 810265a:	3710      	adds	r7, #16
 810265c:	46bd      	mov	sp, r7
 810265e:	bd80      	pop	{r7, pc}

08102660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8102660:	b580      	push	{r7, lr}
 8102662:	b08e      	sub	sp, #56	@ 0x38
 8102664:	af00      	add	r7, sp, #0
 8102666:	60f8      	str	r0, [r7, #12]
 8102668:	60b9      	str	r1, [r7, #8]
 810266a:	607a      	str	r2, [r7, #4]
 810266c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810266e:	2300      	movs	r3, #0
 8102670:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102672:	68fb      	ldr	r3, [r7, #12]
 8102674:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8102676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102678:	2b00      	cmp	r3, #0
 810267a:	d10b      	bne.n	8102694 <xQueueGenericSend+0x34>
	__asm volatile
 810267c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102680:	f383 8811 	msr	BASEPRI, r3
 8102684:	f3bf 8f6f 	isb	sy
 8102688:	f3bf 8f4f 	dsb	sy
 810268c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810268e:	bf00      	nop
 8102690:	bf00      	nop
 8102692:	e7fd      	b.n	8102690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102694:	68bb      	ldr	r3, [r7, #8]
 8102696:	2b00      	cmp	r3, #0
 8102698:	d103      	bne.n	81026a2 <xQueueGenericSend+0x42>
 810269a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810269e:	2b00      	cmp	r3, #0
 81026a0:	d101      	bne.n	81026a6 <xQueueGenericSend+0x46>
 81026a2:	2301      	movs	r3, #1
 81026a4:	e000      	b.n	81026a8 <xQueueGenericSend+0x48>
 81026a6:	2300      	movs	r3, #0
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d10b      	bne.n	81026c4 <xQueueGenericSend+0x64>
	__asm volatile
 81026ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81026b0:	f383 8811 	msr	BASEPRI, r3
 81026b4:	f3bf 8f6f 	isb	sy
 81026b8:	f3bf 8f4f 	dsb	sy
 81026bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81026be:	bf00      	nop
 81026c0:	bf00      	nop
 81026c2:	e7fd      	b.n	81026c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81026c4:	683b      	ldr	r3, [r7, #0]
 81026c6:	2b02      	cmp	r3, #2
 81026c8:	d103      	bne.n	81026d2 <xQueueGenericSend+0x72>
 81026ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81026ce:	2b01      	cmp	r3, #1
 81026d0:	d101      	bne.n	81026d6 <xQueueGenericSend+0x76>
 81026d2:	2301      	movs	r3, #1
 81026d4:	e000      	b.n	81026d8 <xQueueGenericSend+0x78>
 81026d6:	2300      	movs	r3, #0
 81026d8:	2b00      	cmp	r3, #0
 81026da:	d10b      	bne.n	81026f4 <xQueueGenericSend+0x94>
	__asm volatile
 81026dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81026e0:	f383 8811 	msr	BASEPRI, r3
 81026e4:	f3bf 8f6f 	isb	sy
 81026e8:	f3bf 8f4f 	dsb	sy
 81026ec:	623b      	str	r3, [r7, #32]
}
 81026ee:	bf00      	nop
 81026f0:	bf00      	nop
 81026f2:	e7fd      	b.n	81026f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81026f4:	f001 f9fc 	bl	8103af0 <xTaskGetSchedulerState>
 81026f8:	4603      	mov	r3, r0
 81026fa:	2b00      	cmp	r3, #0
 81026fc:	d102      	bne.n	8102704 <xQueueGenericSend+0xa4>
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	2b00      	cmp	r3, #0
 8102702:	d101      	bne.n	8102708 <xQueueGenericSend+0xa8>
 8102704:	2301      	movs	r3, #1
 8102706:	e000      	b.n	810270a <xQueueGenericSend+0xaa>
 8102708:	2300      	movs	r3, #0
 810270a:	2b00      	cmp	r3, #0
 810270c:	d10b      	bne.n	8102726 <xQueueGenericSend+0xc6>
	__asm volatile
 810270e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102712:	f383 8811 	msr	BASEPRI, r3
 8102716:	f3bf 8f6f 	isb	sy
 810271a:	f3bf 8f4f 	dsb	sy
 810271e:	61fb      	str	r3, [r7, #28]
}
 8102720:	bf00      	nop
 8102722:	bf00      	nop
 8102724:	e7fd      	b.n	8102722 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102726:	f7ff fd6f 	bl	8102208 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810272c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810272e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102732:	429a      	cmp	r2, r3
 8102734:	d302      	bcc.n	810273c <xQueueGenericSend+0xdc>
 8102736:	683b      	ldr	r3, [r7, #0]
 8102738:	2b02      	cmp	r3, #2
 810273a:	d129      	bne.n	8102790 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810273c:	683a      	ldr	r2, [r7, #0]
 810273e:	68b9      	ldr	r1, [r7, #8]
 8102740:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102742:	f000 fa0f 	bl	8102b64 <prvCopyDataToQueue>
 8102746:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810274c:	2b00      	cmp	r3, #0
 810274e:	d010      	beq.n	8102772 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102752:	3324      	adds	r3, #36	@ 0x24
 8102754:	4618      	mov	r0, r3
 8102756:	f001 f805 	bl	8103764 <xTaskRemoveFromEventList>
 810275a:	4603      	mov	r3, r0
 810275c:	2b00      	cmp	r3, #0
 810275e:	d013      	beq.n	8102788 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8102760:	4b3f      	ldr	r3, [pc, #252]	@ (8102860 <xQueueGenericSend+0x200>)
 8102762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102766:	601a      	str	r2, [r3, #0]
 8102768:	f3bf 8f4f 	dsb	sy
 810276c:	f3bf 8f6f 	isb	sy
 8102770:	e00a      	b.n	8102788 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8102772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102774:	2b00      	cmp	r3, #0
 8102776:	d007      	beq.n	8102788 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8102778:	4b39      	ldr	r3, [pc, #228]	@ (8102860 <xQueueGenericSend+0x200>)
 810277a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810277e:	601a      	str	r2, [r3, #0]
 8102780:	f3bf 8f4f 	dsb	sy
 8102784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8102788:	f7ff fd70 	bl	810226c <vPortExitCritical>
				return pdPASS;
 810278c:	2301      	movs	r3, #1
 810278e:	e063      	b.n	8102858 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	2b00      	cmp	r3, #0
 8102794:	d103      	bne.n	810279e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102796:	f7ff fd69 	bl	810226c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810279a:	2300      	movs	r3, #0
 810279c:	e05c      	b.n	8102858 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810279e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81027a0:	2b00      	cmp	r3, #0
 81027a2:	d106      	bne.n	81027b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81027a4:	f107 0314 	add.w	r3, r7, #20
 81027a8:	4618      	mov	r0, r3
 81027aa:	f001 f83f 	bl	810382c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81027ae:	2301      	movs	r3, #1
 81027b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81027b2:	f7ff fd5b 	bl	810226c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81027b6:	f000 fda7 	bl	8103308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81027ba:	f7ff fd25 	bl	8102208 <vPortEnterCritical>
 81027be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81027c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81027c4:	b25b      	sxtb	r3, r3
 81027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81027ca:	d103      	bne.n	81027d4 <xQueueGenericSend+0x174>
 81027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81027ce:	2200      	movs	r2, #0
 81027d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81027d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81027d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81027da:	b25b      	sxtb	r3, r3
 81027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81027e0:	d103      	bne.n	81027ea <xQueueGenericSend+0x18a>
 81027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81027e4:	2200      	movs	r2, #0
 81027e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81027ea:	f7ff fd3f 	bl	810226c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81027ee:	1d3a      	adds	r2, r7, #4
 81027f0:	f107 0314 	add.w	r3, r7, #20
 81027f4:	4611      	mov	r1, r2
 81027f6:	4618      	mov	r0, r3
 81027f8:	f001 f82e 	bl	8103858 <xTaskCheckForTimeOut>
 81027fc:	4603      	mov	r3, r0
 81027fe:	2b00      	cmp	r3, #0
 8102800:	d124      	bne.n	810284c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8102802:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102804:	f000 faa6 	bl	8102d54 <prvIsQueueFull>
 8102808:	4603      	mov	r3, r0
 810280a:	2b00      	cmp	r3, #0
 810280c:	d018      	beq.n	8102840 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810280e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102810:	3310      	adds	r3, #16
 8102812:	687a      	ldr	r2, [r7, #4]
 8102814:	4611      	mov	r1, r2
 8102816:	4618      	mov	r0, r3
 8102818:	f000 ff52 	bl	81036c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810281c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810281e:	f000 fa31 	bl	8102c84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8102822:	f000 fd7f 	bl	8103324 <xTaskResumeAll>
 8102826:	4603      	mov	r3, r0
 8102828:	2b00      	cmp	r3, #0
 810282a:	f47f af7c 	bne.w	8102726 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810282e:	4b0c      	ldr	r3, [pc, #48]	@ (8102860 <xQueueGenericSend+0x200>)
 8102830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102834:	601a      	str	r2, [r3, #0]
 8102836:	f3bf 8f4f 	dsb	sy
 810283a:	f3bf 8f6f 	isb	sy
 810283e:	e772      	b.n	8102726 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8102840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102842:	f000 fa1f 	bl	8102c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102846:	f000 fd6d 	bl	8103324 <xTaskResumeAll>
 810284a:	e76c      	b.n	8102726 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810284c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810284e:	f000 fa19 	bl	8102c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102852:	f000 fd67 	bl	8103324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8102856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8102858:	4618      	mov	r0, r3
 810285a:	3738      	adds	r7, #56	@ 0x38
 810285c:	46bd      	mov	sp, r7
 810285e:	bd80      	pop	{r7, pc}
 8102860:	e000ed04 	.word	0xe000ed04

08102864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8102864:	b580      	push	{r7, lr}
 8102866:	b090      	sub	sp, #64	@ 0x40
 8102868:	af00      	add	r7, sp, #0
 810286a:	60f8      	str	r0, [r7, #12]
 810286c:	60b9      	str	r1, [r7, #8]
 810286e:	607a      	str	r2, [r7, #4]
 8102870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8102872:	68fb      	ldr	r3, [r7, #12]
 8102874:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8102876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102878:	2b00      	cmp	r3, #0
 810287a:	d10b      	bne.n	8102894 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810287c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102880:	f383 8811 	msr	BASEPRI, r3
 8102884:	f3bf 8f6f 	isb	sy
 8102888:	f3bf 8f4f 	dsb	sy
 810288c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810288e:	bf00      	nop
 8102890:	bf00      	nop
 8102892:	e7fd      	b.n	8102890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102894:	68bb      	ldr	r3, [r7, #8]
 8102896:	2b00      	cmp	r3, #0
 8102898:	d103      	bne.n	81028a2 <xQueueGenericSendFromISR+0x3e>
 810289a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810289e:	2b00      	cmp	r3, #0
 81028a0:	d101      	bne.n	81028a6 <xQueueGenericSendFromISR+0x42>
 81028a2:	2301      	movs	r3, #1
 81028a4:	e000      	b.n	81028a8 <xQueueGenericSendFromISR+0x44>
 81028a6:	2300      	movs	r3, #0
 81028a8:	2b00      	cmp	r3, #0
 81028aa:	d10b      	bne.n	81028c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 81028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81028b0:	f383 8811 	msr	BASEPRI, r3
 81028b4:	f3bf 8f6f 	isb	sy
 81028b8:	f3bf 8f4f 	dsb	sy
 81028bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81028be:	bf00      	nop
 81028c0:	bf00      	nop
 81028c2:	e7fd      	b.n	81028c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81028c4:	683b      	ldr	r3, [r7, #0]
 81028c6:	2b02      	cmp	r3, #2
 81028c8:	d103      	bne.n	81028d2 <xQueueGenericSendFromISR+0x6e>
 81028ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81028cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81028ce:	2b01      	cmp	r3, #1
 81028d0:	d101      	bne.n	81028d6 <xQueueGenericSendFromISR+0x72>
 81028d2:	2301      	movs	r3, #1
 81028d4:	e000      	b.n	81028d8 <xQueueGenericSendFromISR+0x74>
 81028d6:	2300      	movs	r3, #0
 81028d8:	2b00      	cmp	r3, #0
 81028da:	d10b      	bne.n	81028f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 81028dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81028e0:	f383 8811 	msr	BASEPRI, r3
 81028e4:	f3bf 8f6f 	isb	sy
 81028e8:	f3bf 8f4f 	dsb	sy
 81028ec:	623b      	str	r3, [r7, #32]
}
 81028ee:	bf00      	nop
 81028f0:	bf00      	nop
 81028f2:	e7fd      	b.n	81028f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81028f4:	f7ff fd68 	bl	81023c8 <vPortValidateInterruptPriority>
	__asm volatile
 81028f8:	f3ef 8211 	mrs	r2, BASEPRI
 81028fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102900:	f383 8811 	msr	BASEPRI, r3
 8102904:	f3bf 8f6f 	isb	sy
 8102908:	f3bf 8f4f 	dsb	sy
 810290c:	61fa      	str	r2, [r7, #28]
 810290e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8102910:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8102912:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8102918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810291a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810291c:	429a      	cmp	r2, r3
 810291e:	d302      	bcc.n	8102926 <xQueueGenericSendFromISR+0xc2>
 8102920:	683b      	ldr	r3, [r7, #0]
 8102922:	2b02      	cmp	r3, #2
 8102924:	d12f      	bne.n	8102986 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8102926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102928:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810292c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102934:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102936:	683a      	ldr	r2, [r7, #0]
 8102938:	68b9      	ldr	r1, [r7, #8]
 810293a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810293c:	f000 f912 	bl	8102b64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8102940:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8102944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102948:	d112      	bne.n	8102970 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810294e:	2b00      	cmp	r3, #0
 8102950:	d016      	beq.n	8102980 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102954:	3324      	adds	r3, #36	@ 0x24
 8102956:	4618      	mov	r0, r3
 8102958:	f000 ff04 	bl	8103764 <xTaskRemoveFromEventList>
 810295c:	4603      	mov	r3, r0
 810295e:	2b00      	cmp	r3, #0
 8102960:	d00e      	beq.n	8102980 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	2b00      	cmp	r3, #0
 8102966:	d00b      	beq.n	8102980 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	2201      	movs	r2, #1
 810296c:	601a      	str	r2, [r3, #0]
 810296e:	e007      	b.n	8102980 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8102974:	3301      	adds	r3, #1
 8102976:	b2db      	uxtb	r3, r3
 8102978:	b25a      	sxtb	r2, r3
 810297a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810297c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8102980:	2301      	movs	r3, #1
 8102982:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8102984:	e001      	b.n	810298a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102986:	2300      	movs	r3, #0
 8102988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810298a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810298c:	617b      	str	r3, [r7, #20]
	__asm volatile
 810298e:	697b      	ldr	r3, [r7, #20]
 8102990:	f383 8811 	msr	BASEPRI, r3
}
 8102994:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8102998:	4618      	mov	r0, r3
 810299a:	3740      	adds	r7, #64	@ 0x40
 810299c:	46bd      	mov	sp, r7
 810299e:	bd80      	pop	{r7, pc}

081029a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 81029a0:	b580      	push	{r7, lr}
 81029a2:	b08c      	sub	sp, #48	@ 0x30
 81029a4:	af00      	add	r7, sp, #0
 81029a6:	60f8      	str	r0, [r7, #12]
 81029a8:	60b9      	str	r1, [r7, #8]
 81029aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81029ac:	2300      	movs	r3, #0
 81029ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81029b0:	68fb      	ldr	r3, [r7, #12]
 81029b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81029b6:	2b00      	cmp	r3, #0
 81029b8:	d10b      	bne.n	81029d2 <xQueueReceive+0x32>
	__asm volatile
 81029ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81029be:	f383 8811 	msr	BASEPRI, r3
 81029c2:	f3bf 8f6f 	isb	sy
 81029c6:	f3bf 8f4f 	dsb	sy
 81029ca:	623b      	str	r3, [r7, #32]
}
 81029cc:	bf00      	nop
 81029ce:	bf00      	nop
 81029d0:	e7fd      	b.n	81029ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81029d2:	68bb      	ldr	r3, [r7, #8]
 81029d4:	2b00      	cmp	r3, #0
 81029d6:	d103      	bne.n	81029e0 <xQueueReceive+0x40>
 81029d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81029dc:	2b00      	cmp	r3, #0
 81029de:	d101      	bne.n	81029e4 <xQueueReceive+0x44>
 81029e0:	2301      	movs	r3, #1
 81029e2:	e000      	b.n	81029e6 <xQueueReceive+0x46>
 81029e4:	2300      	movs	r3, #0
 81029e6:	2b00      	cmp	r3, #0
 81029e8:	d10b      	bne.n	8102a02 <xQueueReceive+0x62>
	__asm volatile
 81029ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81029ee:	f383 8811 	msr	BASEPRI, r3
 81029f2:	f3bf 8f6f 	isb	sy
 81029f6:	f3bf 8f4f 	dsb	sy
 81029fa:	61fb      	str	r3, [r7, #28]
}
 81029fc:	bf00      	nop
 81029fe:	bf00      	nop
 8102a00:	e7fd      	b.n	81029fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102a02:	f001 f875 	bl	8103af0 <xTaskGetSchedulerState>
 8102a06:	4603      	mov	r3, r0
 8102a08:	2b00      	cmp	r3, #0
 8102a0a:	d102      	bne.n	8102a12 <xQueueReceive+0x72>
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	2b00      	cmp	r3, #0
 8102a10:	d101      	bne.n	8102a16 <xQueueReceive+0x76>
 8102a12:	2301      	movs	r3, #1
 8102a14:	e000      	b.n	8102a18 <xQueueReceive+0x78>
 8102a16:	2300      	movs	r3, #0
 8102a18:	2b00      	cmp	r3, #0
 8102a1a:	d10b      	bne.n	8102a34 <xQueueReceive+0x94>
	__asm volatile
 8102a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102a20:	f383 8811 	msr	BASEPRI, r3
 8102a24:	f3bf 8f6f 	isb	sy
 8102a28:	f3bf 8f4f 	dsb	sy
 8102a2c:	61bb      	str	r3, [r7, #24]
}
 8102a2e:	bf00      	nop
 8102a30:	bf00      	nop
 8102a32:	e7fd      	b.n	8102a30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102a34:	f7ff fbe8 	bl	8102208 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102a3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a40:	2b00      	cmp	r3, #0
 8102a42:	d01f      	beq.n	8102a84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8102a44:	68b9      	ldr	r1, [r7, #8]
 8102a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102a48:	f000 f8f6 	bl	8102c38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8102a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a4e:	1e5a      	subs	r2, r3, #1
 8102a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102a52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102a56:	691b      	ldr	r3, [r3, #16]
 8102a58:	2b00      	cmp	r3, #0
 8102a5a:	d00f      	beq.n	8102a7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102a5e:	3310      	adds	r3, #16
 8102a60:	4618      	mov	r0, r3
 8102a62:	f000 fe7f 	bl	8103764 <xTaskRemoveFromEventList>
 8102a66:	4603      	mov	r3, r0
 8102a68:	2b00      	cmp	r3, #0
 8102a6a:	d007      	beq.n	8102a7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8102a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8102b60 <xQueueReceive+0x1c0>)
 8102a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102a72:	601a      	str	r2, [r3, #0]
 8102a74:	f3bf 8f4f 	dsb	sy
 8102a78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8102a7c:	f7ff fbf6 	bl	810226c <vPortExitCritical>
				return pdPASS;
 8102a80:	2301      	movs	r3, #1
 8102a82:	e069      	b.n	8102b58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	2b00      	cmp	r3, #0
 8102a88:	d103      	bne.n	8102a92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102a8a:	f7ff fbef 	bl	810226c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8102a8e:	2300      	movs	r3, #0
 8102a90:	e062      	b.n	8102b58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d106      	bne.n	8102aa6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102a98:	f107 0310 	add.w	r3, r7, #16
 8102a9c:	4618      	mov	r0, r3
 8102a9e:	f000 fec5 	bl	810382c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102aa2:	2301      	movs	r3, #1
 8102aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102aa6:	f7ff fbe1 	bl	810226c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102aaa:	f000 fc2d 	bl	8103308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8102aae:	f7ff fbab 	bl	8102208 <vPortEnterCritical>
 8102ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102ab8:	b25b      	sxtb	r3, r3
 8102aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102abe:	d103      	bne.n	8102ac8 <xQueueReceive+0x128>
 8102ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102ac2:	2200      	movs	r2, #0
 8102ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8102ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8102ace:	b25b      	sxtb	r3, r3
 8102ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ad4:	d103      	bne.n	8102ade <xQueueReceive+0x13e>
 8102ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102ad8:	2200      	movs	r2, #0
 8102ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8102ade:	f7ff fbc5 	bl	810226c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102ae2:	1d3a      	adds	r2, r7, #4
 8102ae4:	f107 0310 	add.w	r3, r7, #16
 8102ae8:	4611      	mov	r1, r2
 8102aea:	4618      	mov	r0, r3
 8102aec:	f000 feb4 	bl	8103858 <xTaskCheckForTimeOut>
 8102af0:	4603      	mov	r3, r0
 8102af2:	2b00      	cmp	r3, #0
 8102af4:	d123      	bne.n	8102b3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102af8:	f000 f916 	bl	8102d28 <prvIsQueueEmpty>
 8102afc:	4603      	mov	r3, r0
 8102afe:	2b00      	cmp	r3, #0
 8102b00:	d017      	beq.n	8102b32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8102b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102b04:	3324      	adds	r3, #36	@ 0x24
 8102b06:	687a      	ldr	r2, [r7, #4]
 8102b08:	4611      	mov	r1, r2
 8102b0a:	4618      	mov	r0, r3
 8102b0c:	f000 fdd8 	bl	81036c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8102b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102b12:	f000 f8b7 	bl	8102c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8102b16:	f000 fc05 	bl	8103324 <xTaskResumeAll>
 8102b1a:	4603      	mov	r3, r0
 8102b1c:	2b00      	cmp	r3, #0
 8102b1e:	d189      	bne.n	8102a34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8102b20:	4b0f      	ldr	r3, [pc, #60]	@ (8102b60 <xQueueReceive+0x1c0>)
 8102b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102b26:	601a      	str	r2, [r3, #0]
 8102b28:	f3bf 8f4f 	dsb	sy
 8102b2c:	f3bf 8f6f 	isb	sy
 8102b30:	e780      	b.n	8102a34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8102b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102b34:	f000 f8a6 	bl	8102c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102b38:	f000 fbf4 	bl	8103324 <xTaskResumeAll>
 8102b3c:	e77a      	b.n	8102a34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8102b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102b40:	f000 f8a0 	bl	8102c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102b44:	f000 fbee 	bl	8103324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102b4a:	f000 f8ed 	bl	8102d28 <prvIsQueueEmpty>
 8102b4e:	4603      	mov	r3, r0
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	f43f af6f 	beq.w	8102a34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8102b56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8102b58:	4618      	mov	r0, r3
 8102b5a:	3730      	adds	r7, #48	@ 0x30
 8102b5c:	46bd      	mov	sp, r7
 8102b5e:	bd80      	pop	{r7, pc}
 8102b60:	e000ed04 	.word	0xe000ed04

08102b64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8102b64:	b580      	push	{r7, lr}
 8102b66:	b086      	sub	sp, #24
 8102b68:	af00      	add	r7, sp, #0
 8102b6a:	60f8      	str	r0, [r7, #12]
 8102b6c:	60b9      	str	r1, [r7, #8]
 8102b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8102b70:	2300      	movs	r3, #0
 8102b72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102b74:	68fb      	ldr	r3, [r7, #12]
 8102b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8102b7a:	68fb      	ldr	r3, [r7, #12]
 8102b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	d10d      	bne.n	8102b9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8102b82:	68fb      	ldr	r3, [r7, #12]
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	2b00      	cmp	r3, #0
 8102b88:	d14d      	bne.n	8102c26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8102b8a:	68fb      	ldr	r3, [r7, #12]
 8102b8c:	689b      	ldr	r3, [r3, #8]
 8102b8e:	4618      	mov	r0, r3
 8102b90:	f000 ffcc 	bl	8103b2c <xTaskPriorityDisinherit>
 8102b94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8102b96:	68fb      	ldr	r3, [r7, #12]
 8102b98:	2200      	movs	r2, #0
 8102b9a:	609a      	str	r2, [r3, #8]
 8102b9c:	e043      	b.n	8102c26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d119      	bne.n	8102bd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102ba4:	68fb      	ldr	r3, [r7, #12]
 8102ba6:	6858      	ldr	r0, [r3, #4]
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102bac:	461a      	mov	r2, r3
 8102bae:	68b9      	ldr	r1, [r7, #8]
 8102bb0:	f001 fc5e 	bl	8104470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102bb4:	68fb      	ldr	r3, [r7, #12]
 8102bb6:	685a      	ldr	r2, [r3, #4]
 8102bb8:	68fb      	ldr	r3, [r7, #12]
 8102bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102bbc:	441a      	add	r2, r3
 8102bbe:	68fb      	ldr	r3, [r7, #12]
 8102bc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102bc2:	68fb      	ldr	r3, [r7, #12]
 8102bc4:	685a      	ldr	r2, [r3, #4]
 8102bc6:	68fb      	ldr	r3, [r7, #12]
 8102bc8:	689b      	ldr	r3, [r3, #8]
 8102bca:	429a      	cmp	r2, r3
 8102bcc:	d32b      	bcc.n	8102c26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8102bce:	68fb      	ldr	r3, [r7, #12]
 8102bd0:	681a      	ldr	r2, [r3, #0]
 8102bd2:	68fb      	ldr	r3, [r7, #12]
 8102bd4:	605a      	str	r2, [r3, #4]
 8102bd6:	e026      	b.n	8102c26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8102bd8:	68fb      	ldr	r3, [r7, #12]
 8102bda:	68d8      	ldr	r0, [r3, #12]
 8102bdc:	68fb      	ldr	r3, [r7, #12]
 8102bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102be0:	461a      	mov	r2, r3
 8102be2:	68b9      	ldr	r1, [r7, #8]
 8102be4:	f001 fc44 	bl	8104470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8102be8:	68fb      	ldr	r3, [r7, #12]
 8102bea:	68da      	ldr	r2, [r3, #12]
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102bf0:	425b      	negs	r3, r3
 8102bf2:	441a      	add	r2, r3
 8102bf4:	68fb      	ldr	r3, [r7, #12]
 8102bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102bf8:	68fb      	ldr	r3, [r7, #12]
 8102bfa:	68da      	ldr	r2, [r3, #12]
 8102bfc:	68fb      	ldr	r3, [r7, #12]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	429a      	cmp	r2, r3
 8102c02:	d207      	bcs.n	8102c14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8102c04:	68fb      	ldr	r3, [r7, #12]
 8102c06:	689a      	ldr	r2, [r3, #8]
 8102c08:	68fb      	ldr	r3, [r7, #12]
 8102c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102c0c:	425b      	negs	r3, r3
 8102c0e:	441a      	add	r2, r3
 8102c10:	68fb      	ldr	r3, [r7, #12]
 8102c12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	2b02      	cmp	r3, #2
 8102c18:	d105      	bne.n	8102c26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102c1a:	693b      	ldr	r3, [r7, #16]
 8102c1c:	2b00      	cmp	r3, #0
 8102c1e:	d002      	beq.n	8102c26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8102c20:	693b      	ldr	r3, [r7, #16]
 8102c22:	3b01      	subs	r3, #1
 8102c24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8102c26:	693b      	ldr	r3, [r7, #16]
 8102c28:	1c5a      	adds	r2, r3, #1
 8102c2a:	68fb      	ldr	r3, [r7, #12]
 8102c2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8102c2e:	697b      	ldr	r3, [r7, #20]
}
 8102c30:	4618      	mov	r0, r3
 8102c32:	3718      	adds	r7, #24
 8102c34:	46bd      	mov	sp, r7
 8102c36:	bd80      	pop	{r7, pc}

08102c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8102c38:	b580      	push	{r7, lr}
 8102c3a:	b082      	sub	sp, #8
 8102c3c:	af00      	add	r7, sp, #0
 8102c3e:	6078      	str	r0, [r7, #4]
 8102c40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102c46:	2b00      	cmp	r3, #0
 8102c48:	d018      	beq.n	8102c7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	68da      	ldr	r2, [r3, #12]
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102c52:	441a      	add	r2, r3
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8102c58:	687b      	ldr	r3, [r7, #4]
 8102c5a:	68da      	ldr	r2, [r3, #12]
 8102c5c:	687b      	ldr	r3, [r7, #4]
 8102c5e:	689b      	ldr	r3, [r3, #8]
 8102c60:	429a      	cmp	r2, r3
 8102c62:	d303      	bcc.n	8102c6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	681a      	ldr	r2, [r3, #0]
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102c6c:	687b      	ldr	r3, [r7, #4]
 8102c6e:	68d9      	ldr	r1, [r3, #12]
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102c74:	461a      	mov	r2, r3
 8102c76:	6838      	ldr	r0, [r7, #0]
 8102c78:	f001 fbfa 	bl	8104470 <memcpy>
	}
}
 8102c7c:	bf00      	nop
 8102c7e:	3708      	adds	r7, #8
 8102c80:	46bd      	mov	sp, r7
 8102c82:	bd80      	pop	{r7, pc}

08102c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8102c84:	b580      	push	{r7, lr}
 8102c86:	b084      	sub	sp, #16
 8102c88:	af00      	add	r7, sp, #0
 8102c8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8102c8c:	f7ff fabc 	bl	8102208 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8102c90:	687b      	ldr	r3, [r7, #4]
 8102c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8102c96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102c98:	e011      	b.n	8102cbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102c9e:	2b00      	cmp	r3, #0
 8102ca0:	d012      	beq.n	8102cc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	3324      	adds	r3, #36	@ 0x24
 8102ca6:	4618      	mov	r0, r3
 8102ca8:	f000 fd5c 	bl	8103764 <xTaskRemoveFromEventList>
 8102cac:	4603      	mov	r3, r0
 8102cae:	2b00      	cmp	r3, #0
 8102cb0:	d001      	beq.n	8102cb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8102cb2:	f000 fe35 	bl	8103920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8102cb6:	7bfb      	ldrb	r3, [r7, #15]
 8102cb8:	3b01      	subs	r3, #1
 8102cba:	b2db      	uxtb	r3, r3
 8102cbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102cc2:	2b00      	cmp	r3, #0
 8102cc4:	dce9      	bgt.n	8102c9a <prvUnlockQueue+0x16>
 8102cc6:	e000      	b.n	8102cca <prvUnlockQueue+0x46>
					break;
 8102cc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	22ff      	movs	r2, #255	@ 0xff
 8102cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8102cd2:	f7ff facb 	bl	810226c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8102cd6:	f7ff fa97 	bl	8102208 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102ce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102ce2:	e011      	b.n	8102d08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	691b      	ldr	r3, [r3, #16]
 8102ce8:	2b00      	cmp	r3, #0
 8102cea:	d012      	beq.n	8102d12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	3310      	adds	r3, #16
 8102cf0:	4618      	mov	r0, r3
 8102cf2:	f000 fd37 	bl	8103764 <xTaskRemoveFromEventList>
 8102cf6:	4603      	mov	r3, r0
 8102cf8:	2b00      	cmp	r3, #0
 8102cfa:	d001      	beq.n	8102d00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8102cfc:	f000 fe10 	bl	8103920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8102d00:	7bbb      	ldrb	r3, [r7, #14]
 8102d02:	3b01      	subs	r3, #1
 8102d04:	b2db      	uxtb	r3, r3
 8102d06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8102d0c:	2b00      	cmp	r3, #0
 8102d0e:	dce9      	bgt.n	8102ce4 <prvUnlockQueue+0x60>
 8102d10:	e000      	b.n	8102d14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8102d12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	22ff      	movs	r2, #255	@ 0xff
 8102d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8102d1c:	f7ff faa6 	bl	810226c <vPortExitCritical>
}
 8102d20:	bf00      	nop
 8102d22:	3710      	adds	r7, #16
 8102d24:	46bd      	mov	sp, r7
 8102d26:	bd80      	pop	{r7, pc}

08102d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8102d28:	b580      	push	{r7, lr}
 8102d2a:	b084      	sub	sp, #16
 8102d2c:	af00      	add	r7, sp, #0
 8102d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8102d30:	f7ff fa6a 	bl	8102208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102d38:	2b00      	cmp	r3, #0
 8102d3a:	d102      	bne.n	8102d42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8102d3c:	2301      	movs	r3, #1
 8102d3e:	60fb      	str	r3, [r7, #12]
 8102d40:	e001      	b.n	8102d46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8102d42:	2300      	movs	r3, #0
 8102d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102d46:	f7ff fa91 	bl	810226c <vPortExitCritical>

	return xReturn;
 8102d4a:	68fb      	ldr	r3, [r7, #12]
}
 8102d4c:	4618      	mov	r0, r3
 8102d4e:	3710      	adds	r7, #16
 8102d50:	46bd      	mov	sp, r7
 8102d52:	bd80      	pop	{r7, pc}

08102d54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8102d54:	b580      	push	{r7, lr}
 8102d56:	b084      	sub	sp, #16
 8102d58:	af00      	add	r7, sp, #0
 8102d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8102d5c:	f7ff fa54 	bl	8102208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102d68:	429a      	cmp	r2, r3
 8102d6a:	d102      	bne.n	8102d72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8102d6c:	2301      	movs	r3, #1
 8102d6e:	60fb      	str	r3, [r7, #12]
 8102d70:	e001      	b.n	8102d76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8102d72:	2300      	movs	r3, #0
 8102d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102d76:	f7ff fa79 	bl	810226c <vPortExitCritical>

	return xReturn;
 8102d7a:	68fb      	ldr	r3, [r7, #12]
}
 8102d7c:	4618      	mov	r0, r3
 8102d7e:	3710      	adds	r7, #16
 8102d80:	46bd      	mov	sp, r7
 8102d82:	bd80      	pop	{r7, pc}

08102d84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8102d84:	b480      	push	{r7}
 8102d86:	b085      	sub	sp, #20
 8102d88:	af00      	add	r7, sp, #0
 8102d8a:	6078      	str	r0, [r7, #4]
 8102d8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8102d8e:	2300      	movs	r3, #0
 8102d90:	60fb      	str	r3, [r7, #12]
 8102d92:	e014      	b.n	8102dbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8102d94:	4a0f      	ldr	r2, [pc, #60]	@ (8102dd4 <vQueueAddToRegistry+0x50>)
 8102d96:	68fb      	ldr	r3, [r7, #12]
 8102d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8102d9c:	2b00      	cmp	r3, #0
 8102d9e:	d10b      	bne.n	8102db8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8102da0:	490c      	ldr	r1, [pc, #48]	@ (8102dd4 <vQueueAddToRegistry+0x50>)
 8102da2:	68fb      	ldr	r3, [r7, #12]
 8102da4:	683a      	ldr	r2, [r7, #0]
 8102da6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8102daa:	4a0a      	ldr	r2, [pc, #40]	@ (8102dd4 <vQueueAddToRegistry+0x50>)
 8102dac:	68fb      	ldr	r3, [r7, #12]
 8102dae:	00db      	lsls	r3, r3, #3
 8102db0:	4413      	add	r3, r2
 8102db2:	687a      	ldr	r2, [r7, #4]
 8102db4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8102db6:	e006      	b.n	8102dc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	3301      	adds	r3, #1
 8102dbc:	60fb      	str	r3, [r7, #12]
 8102dbe:	68fb      	ldr	r3, [r7, #12]
 8102dc0:	2b07      	cmp	r3, #7
 8102dc2:	d9e7      	bls.n	8102d94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8102dc4:	bf00      	nop
 8102dc6:	bf00      	nop
 8102dc8:	3714      	adds	r7, #20
 8102dca:	46bd      	mov	sp, r7
 8102dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dd0:	4770      	bx	lr
 8102dd2:	bf00      	nop
 8102dd4:	10004450 	.word	0x10004450

08102dd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8102dd8:	b580      	push	{r7, lr}
 8102dda:	b086      	sub	sp, #24
 8102ddc:	af00      	add	r7, sp, #0
 8102dde:	60f8      	str	r0, [r7, #12]
 8102de0:	60b9      	str	r1, [r7, #8]
 8102de2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8102de4:	68fb      	ldr	r3, [r7, #12]
 8102de6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8102de8:	f7ff fa0e 	bl	8102208 <vPortEnterCritical>
 8102dec:	697b      	ldr	r3, [r7, #20]
 8102dee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102df2:	b25b      	sxtb	r3, r3
 8102df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102df8:	d103      	bne.n	8102e02 <vQueueWaitForMessageRestricted+0x2a>
 8102dfa:	697b      	ldr	r3, [r7, #20]
 8102dfc:	2200      	movs	r2, #0
 8102dfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8102e02:	697b      	ldr	r3, [r7, #20]
 8102e04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8102e08:	b25b      	sxtb	r3, r3
 8102e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102e0e:	d103      	bne.n	8102e18 <vQueueWaitForMessageRestricted+0x40>
 8102e10:	697b      	ldr	r3, [r7, #20]
 8102e12:	2200      	movs	r2, #0
 8102e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8102e18:	f7ff fa28 	bl	810226c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8102e1c:	697b      	ldr	r3, [r7, #20]
 8102e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102e20:	2b00      	cmp	r3, #0
 8102e22:	d106      	bne.n	8102e32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8102e24:	697b      	ldr	r3, [r7, #20]
 8102e26:	3324      	adds	r3, #36	@ 0x24
 8102e28:	687a      	ldr	r2, [r7, #4]
 8102e2a:	68b9      	ldr	r1, [r7, #8]
 8102e2c:	4618      	mov	r0, r3
 8102e2e:	f000 fc6d 	bl	810370c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8102e32:	6978      	ldr	r0, [r7, #20]
 8102e34:	f7ff ff26 	bl	8102c84 <prvUnlockQueue>
	}
 8102e38:	bf00      	nop
 8102e3a:	3718      	adds	r7, #24
 8102e3c:	46bd      	mov	sp, r7
 8102e3e:	bd80      	pop	{r7, pc}

08102e40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8102e40:	b580      	push	{r7, lr}
 8102e42:	b08e      	sub	sp, #56	@ 0x38
 8102e44:	af04      	add	r7, sp, #16
 8102e46:	60f8      	str	r0, [r7, #12]
 8102e48:	60b9      	str	r1, [r7, #8]
 8102e4a:	607a      	str	r2, [r7, #4]
 8102e4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8102e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102e50:	2b00      	cmp	r3, #0
 8102e52:	d10b      	bne.n	8102e6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8102e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102e58:	f383 8811 	msr	BASEPRI, r3
 8102e5c:	f3bf 8f6f 	isb	sy
 8102e60:	f3bf 8f4f 	dsb	sy
 8102e64:	623b      	str	r3, [r7, #32]
}
 8102e66:	bf00      	nop
 8102e68:	bf00      	nop
 8102e6a:	e7fd      	b.n	8102e68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8102e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102e6e:	2b00      	cmp	r3, #0
 8102e70:	d10b      	bne.n	8102e8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8102e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102e76:	f383 8811 	msr	BASEPRI, r3
 8102e7a:	f3bf 8f6f 	isb	sy
 8102e7e:	f3bf 8f4f 	dsb	sy
 8102e82:	61fb      	str	r3, [r7, #28]
}
 8102e84:	bf00      	nop
 8102e86:	bf00      	nop
 8102e88:	e7fd      	b.n	8102e86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8102e8a:	23a8      	movs	r3, #168	@ 0xa8
 8102e8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8102e8e:	693b      	ldr	r3, [r7, #16]
 8102e90:	2ba8      	cmp	r3, #168	@ 0xa8
 8102e92:	d00b      	beq.n	8102eac <xTaskCreateStatic+0x6c>
	__asm volatile
 8102e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102e98:	f383 8811 	msr	BASEPRI, r3
 8102e9c:	f3bf 8f6f 	isb	sy
 8102ea0:	f3bf 8f4f 	dsb	sy
 8102ea4:	61bb      	str	r3, [r7, #24]
}
 8102ea6:	bf00      	nop
 8102ea8:	bf00      	nop
 8102eaa:	e7fd      	b.n	8102ea8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8102eac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8102eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102eb0:	2b00      	cmp	r3, #0
 8102eb2:	d01e      	beq.n	8102ef2 <xTaskCreateStatic+0xb2>
 8102eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	d01b      	beq.n	8102ef2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8102eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102ebc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8102ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102ec0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8102ec2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8102ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102ec6:	2202      	movs	r2, #2
 8102ec8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8102ecc:	2300      	movs	r3, #0
 8102ece:	9303      	str	r3, [sp, #12]
 8102ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102ed2:	9302      	str	r3, [sp, #8]
 8102ed4:	f107 0314 	add.w	r3, r7, #20
 8102ed8:	9301      	str	r3, [sp, #4]
 8102eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102edc:	9300      	str	r3, [sp, #0]
 8102ede:	683b      	ldr	r3, [r7, #0]
 8102ee0:	687a      	ldr	r2, [r7, #4]
 8102ee2:	68b9      	ldr	r1, [r7, #8]
 8102ee4:	68f8      	ldr	r0, [r7, #12]
 8102ee6:	f000 f851 	bl	8102f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102eea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8102eec:	f000 f8f6 	bl	81030dc <prvAddNewTaskToReadyList>
 8102ef0:	e001      	b.n	8102ef6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8102ef2:	2300      	movs	r3, #0
 8102ef4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8102ef6:	697b      	ldr	r3, [r7, #20]
	}
 8102ef8:	4618      	mov	r0, r3
 8102efa:	3728      	adds	r7, #40	@ 0x28
 8102efc:	46bd      	mov	sp, r7
 8102efe:	bd80      	pop	{r7, pc}

08102f00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8102f00:	b580      	push	{r7, lr}
 8102f02:	b08c      	sub	sp, #48	@ 0x30
 8102f04:	af04      	add	r7, sp, #16
 8102f06:	60f8      	str	r0, [r7, #12]
 8102f08:	60b9      	str	r1, [r7, #8]
 8102f0a:	603b      	str	r3, [r7, #0]
 8102f0c:	4613      	mov	r3, r2
 8102f0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8102f10:	88fb      	ldrh	r3, [r7, #6]
 8102f12:	009b      	lsls	r3, r3, #2
 8102f14:	4618      	mov	r0, r3
 8102f16:	f7fe fda3 	bl	8101a60 <pvPortMalloc>
 8102f1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8102f1c:	697b      	ldr	r3, [r7, #20]
 8102f1e:	2b00      	cmp	r3, #0
 8102f20:	d00e      	beq.n	8102f40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8102f22:	20a8      	movs	r0, #168	@ 0xa8
 8102f24:	f7fe fd9c 	bl	8101a60 <pvPortMalloc>
 8102f28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8102f2a:	69fb      	ldr	r3, [r7, #28]
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	d003      	beq.n	8102f38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8102f30:	69fb      	ldr	r3, [r7, #28]
 8102f32:	697a      	ldr	r2, [r7, #20]
 8102f34:	631a      	str	r2, [r3, #48]	@ 0x30
 8102f36:	e005      	b.n	8102f44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8102f38:	6978      	ldr	r0, [r7, #20]
 8102f3a:	f7fe fe5f 	bl	8101bfc <vPortFree>
 8102f3e:	e001      	b.n	8102f44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8102f40:	2300      	movs	r3, #0
 8102f42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8102f44:	69fb      	ldr	r3, [r7, #28]
 8102f46:	2b00      	cmp	r3, #0
 8102f48:	d017      	beq.n	8102f7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8102f4a:	69fb      	ldr	r3, [r7, #28]
 8102f4c:	2200      	movs	r2, #0
 8102f4e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8102f52:	88fa      	ldrh	r2, [r7, #6]
 8102f54:	2300      	movs	r3, #0
 8102f56:	9303      	str	r3, [sp, #12]
 8102f58:	69fb      	ldr	r3, [r7, #28]
 8102f5a:	9302      	str	r3, [sp, #8]
 8102f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102f5e:	9301      	str	r3, [sp, #4]
 8102f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102f62:	9300      	str	r3, [sp, #0]
 8102f64:	683b      	ldr	r3, [r7, #0]
 8102f66:	68b9      	ldr	r1, [r7, #8]
 8102f68:	68f8      	ldr	r0, [r7, #12]
 8102f6a:	f000 f80f 	bl	8102f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102f6e:	69f8      	ldr	r0, [r7, #28]
 8102f70:	f000 f8b4 	bl	81030dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8102f74:	2301      	movs	r3, #1
 8102f76:	61bb      	str	r3, [r7, #24]
 8102f78:	e002      	b.n	8102f80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8102f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8102f7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8102f80:	69bb      	ldr	r3, [r7, #24]
	}
 8102f82:	4618      	mov	r0, r3
 8102f84:	3720      	adds	r7, #32
 8102f86:	46bd      	mov	sp, r7
 8102f88:	bd80      	pop	{r7, pc}
	...

08102f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8102f8c:	b580      	push	{r7, lr}
 8102f8e:	b088      	sub	sp, #32
 8102f90:	af00      	add	r7, sp, #0
 8102f92:	60f8      	str	r0, [r7, #12]
 8102f94:	60b9      	str	r1, [r7, #8]
 8102f96:	607a      	str	r2, [r7, #4]
 8102f98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8102f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	009b      	lsls	r3, r3, #2
 8102fa2:	461a      	mov	r2, r3
 8102fa4:	21a5      	movs	r1, #165	@ 0xa5
 8102fa6:	f001 f9df 	bl	8104368 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8102faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8102fb4:	3b01      	subs	r3, #1
 8102fb6:	009b      	lsls	r3, r3, #2
 8102fb8:	4413      	add	r3, r2
 8102fba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8102fbc:	69bb      	ldr	r3, [r7, #24]
 8102fbe:	f023 0307 	bic.w	r3, r3, #7
 8102fc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8102fc4:	69bb      	ldr	r3, [r7, #24]
 8102fc6:	f003 0307 	and.w	r3, r3, #7
 8102fca:	2b00      	cmp	r3, #0
 8102fcc:	d00b      	beq.n	8102fe6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8102fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102fd2:	f383 8811 	msr	BASEPRI, r3
 8102fd6:	f3bf 8f6f 	isb	sy
 8102fda:	f3bf 8f4f 	dsb	sy
 8102fde:	617b      	str	r3, [r7, #20]
}
 8102fe0:	bf00      	nop
 8102fe2:	bf00      	nop
 8102fe4:	e7fd      	b.n	8102fe2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8102fe6:	68bb      	ldr	r3, [r7, #8]
 8102fe8:	2b00      	cmp	r3, #0
 8102fea:	d01f      	beq.n	810302c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102fec:	2300      	movs	r3, #0
 8102fee:	61fb      	str	r3, [r7, #28]
 8102ff0:	e012      	b.n	8103018 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8102ff2:	68ba      	ldr	r2, [r7, #8]
 8102ff4:	69fb      	ldr	r3, [r7, #28]
 8102ff6:	4413      	add	r3, r2
 8102ff8:	7819      	ldrb	r1, [r3, #0]
 8102ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102ffc:	69fb      	ldr	r3, [r7, #28]
 8102ffe:	4413      	add	r3, r2
 8103000:	3334      	adds	r3, #52	@ 0x34
 8103002:	460a      	mov	r2, r1
 8103004:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8103006:	68ba      	ldr	r2, [r7, #8]
 8103008:	69fb      	ldr	r3, [r7, #28]
 810300a:	4413      	add	r3, r2
 810300c:	781b      	ldrb	r3, [r3, #0]
 810300e:	2b00      	cmp	r3, #0
 8103010:	d006      	beq.n	8103020 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8103012:	69fb      	ldr	r3, [r7, #28]
 8103014:	3301      	adds	r3, #1
 8103016:	61fb      	str	r3, [r7, #28]
 8103018:	69fb      	ldr	r3, [r7, #28]
 810301a:	2b0f      	cmp	r3, #15
 810301c:	d9e9      	bls.n	8102ff2 <prvInitialiseNewTask+0x66>
 810301e:	e000      	b.n	8103022 <prvInitialiseNewTask+0x96>
			{
				break;
 8103020:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8103022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103024:	2200      	movs	r2, #0
 8103026:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810302a:	e003      	b.n	8103034 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810302e:	2200      	movs	r2, #0
 8103030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8103034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103036:	2b37      	cmp	r3, #55	@ 0x37
 8103038:	d901      	bls.n	810303e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810303a:	2337      	movs	r3, #55	@ 0x37
 810303c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8103042:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8103044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8103048:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810304c:	2200      	movs	r2, #0
 810304e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8103050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103052:	3304      	adds	r3, #4
 8103054:	4618      	mov	r0, r3
 8103056:	f7fe ff11 	bl	8101e7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810305c:	3318      	adds	r3, #24
 810305e:	4618      	mov	r0, r3
 8103060:	f7fe ff0c 	bl	8101e7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8103064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103068:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810306a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810306c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8103070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103072:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8103074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103078:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810307c:	2200      	movs	r2, #0
 810307e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8103082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103084:	2200      	movs	r2, #0
 8103086:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810308c:	3354      	adds	r3, #84	@ 0x54
 810308e:	224c      	movs	r2, #76	@ 0x4c
 8103090:	2100      	movs	r1, #0
 8103092:	4618      	mov	r0, r3
 8103094:	f001 f968 	bl	8104368 <memset>
 8103098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810309a:	4a0d      	ldr	r2, [pc, #52]	@ (81030d0 <prvInitialiseNewTask+0x144>)
 810309c:	659a      	str	r2, [r3, #88]	@ 0x58
 810309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81030a0:	4a0c      	ldr	r2, [pc, #48]	@ (81030d4 <prvInitialiseNewTask+0x148>)
 81030a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 81030a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81030a6:	4a0c      	ldr	r2, [pc, #48]	@ (81030d8 <prvInitialiseNewTask+0x14c>)
 81030a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81030aa:	683a      	ldr	r2, [r7, #0]
 81030ac:	68f9      	ldr	r1, [r7, #12]
 81030ae:	69b8      	ldr	r0, [r7, #24]
 81030b0:	f7fe ff78 	bl	8101fa4 <pxPortInitialiseStack>
 81030b4:	4602      	mov	r2, r0
 81030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81030b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81030ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81030bc:	2b00      	cmp	r3, #0
 81030be:	d002      	beq.n	81030c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81030c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81030c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81030c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81030c6:	bf00      	nop
 81030c8:	3720      	adds	r7, #32
 81030ca:	46bd      	mov	sp, r7
 81030cc:	bd80      	pop	{r7, pc}
 81030ce:	bf00      	nop
 81030d0:	10004abc 	.word	0x10004abc
 81030d4:	10004b24 	.word	0x10004b24
 81030d8:	10004b8c 	.word	0x10004b8c

081030dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81030dc:	b580      	push	{r7, lr}
 81030de:	b082      	sub	sp, #8
 81030e0:	af00      	add	r7, sp, #0
 81030e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81030e4:	f7ff f890 	bl	8102208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81030e8:	4b2d      	ldr	r3, [pc, #180]	@ (81031a0 <prvAddNewTaskToReadyList+0xc4>)
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	3301      	adds	r3, #1
 81030ee:	4a2c      	ldr	r2, [pc, #176]	@ (81031a0 <prvAddNewTaskToReadyList+0xc4>)
 81030f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81030f2:	4b2c      	ldr	r3, [pc, #176]	@ (81031a4 <prvAddNewTaskToReadyList+0xc8>)
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	2b00      	cmp	r3, #0
 81030f8:	d109      	bne.n	810310e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81030fa:	4a2a      	ldr	r2, [pc, #168]	@ (81031a4 <prvAddNewTaskToReadyList+0xc8>)
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8103100:	4b27      	ldr	r3, [pc, #156]	@ (81031a0 <prvAddNewTaskToReadyList+0xc4>)
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	2b01      	cmp	r3, #1
 8103106:	d110      	bne.n	810312a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8103108:	f000 fc2e 	bl	8103968 <prvInitialiseTaskLists>
 810310c:	e00d      	b.n	810312a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810310e:	4b26      	ldr	r3, [pc, #152]	@ (81031a8 <prvAddNewTaskToReadyList+0xcc>)
 8103110:	681b      	ldr	r3, [r3, #0]
 8103112:	2b00      	cmp	r3, #0
 8103114:	d109      	bne.n	810312a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8103116:	4b23      	ldr	r3, [pc, #140]	@ (81031a4 <prvAddNewTaskToReadyList+0xc8>)
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103120:	429a      	cmp	r2, r3
 8103122:	d802      	bhi.n	810312a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8103124:	4a1f      	ldr	r2, [pc, #124]	@ (81031a4 <prvAddNewTaskToReadyList+0xc8>)
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810312a:	4b20      	ldr	r3, [pc, #128]	@ (81031ac <prvAddNewTaskToReadyList+0xd0>)
 810312c:	681b      	ldr	r3, [r3, #0]
 810312e:	3301      	adds	r3, #1
 8103130:	4a1e      	ldr	r2, [pc, #120]	@ (81031ac <prvAddNewTaskToReadyList+0xd0>)
 8103132:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8103134:	4b1d      	ldr	r3, [pc, #116]	@ (81031ac <prvAddNewTaskToReadyList+0xd0>)
 8103136:	681a      	ldr	r2, [r3, #0]
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103140:	4b1b      	ldr	r3, [pc, #108]	@ (81031b0 <prvAddNewTaskToReadyList+0xd4>)
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	429a      	cmp	r2, r3
 8103146:	d903      	bls.n	8103150 <prvAddNewTaskToReadyList+0x74>
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810314c:	4a18      	ldr	r2, [pc, #96]	@ (81031b0 <prvAddNewTaskToReadyList+0xd4>)
 810314e:	6013      	str	r3, [r2, #0]
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103154:	4613      	mov	r3, r2
 8103156:	009b      	lsls	r3, r3, #2
 8103158:	4413      	add	r3, r2
 810315a:	009b      	lsls	r3, r3, #2
 810315c:	4a15      	ldr	r2, [pc, #84]	@ (81031b4 <prvAddNewTaskToReadyList+0xd8>)
 810315e:	441a      	add	r2, r3
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	3304      	adds	r3, #4
 8103164:	4619      	mov	r1, r3
 8103166:	4610      	mov	r0, r2
 8103168:	f7fe fe95 	bl	8101e96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810316c:	f7ff f87e 	bl	810226c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8103170:	4b0d      	ldr	r3, [pc, #52]	@ (81031a8 <prvAddNewTaskToReadyList+0xcc>)
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	2b00      	cmp	r3, #0
 8103176:	d00e      	beq.n	8103196 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8103178:	4b0a      	ldr	r3, [pc, #40]	@ (81031a4 <prvAddNewTaskToReadyList+0xc8>)
 810317a:	681b      	ldr	r3, [r3, #0]
 810317c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103182:	429a      	cmp	r2, r3
 8103184:	d207      	bcs.n	8103196 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8103186:	4b0c      	ldr	r3, [pc, #48]	@ (81031b8 <prvAddNewTaskToReadyList+0xdc>)
 8103188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810318c:	601a      	str	r2, [r3, #0]
 810318e:	f3bf 8f4f 	dsb	sy
 8103192:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8103196:	bf00      	nop
 8103198:	3708      	adds	r7, #8
 810319a:	46bd      	mov	sp, r7
 810319c:	bd80      	pop	{r7, pc}
 810319e:	bf00      	nop
 81031a0:	10004964 	.word	0x10004964
 81031a4:	10004490 	.word	0x10004490
 81031a8:	10004970 	.word	0x10004970
 81031ac:	10004980 	.word	0x10004980
 81031b0:	1000496c 	.word	0x1000496c
 81031b4:	10004494 	.word	0x10004494
 81031b8:	e000ed04 	.word	0xe000ed04

081031bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81031bc:	b580      	push	{r7, lr}
 81031be:	b084      	sub	sp, #16
 81031c0:	af00      	add	r7, sp, #0
 81031c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81031c4:	2300      	movs	r3, #0
 81031c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81031c8:	687b      	ldr	r3, [r7, #4]
 81031ca:	2b00      	cmp	r3, #0
 81031cc:	d018      	beq.n	8103200 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81031ce:	4b14      	ldr	r3, [pc, #80]	@ (8103220 <vTaskDelay+0x64>)
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	2b00      	cmp	r3, #0
 81031d4:	d00b      	beq.n	81031ee <vTaskDelay+0x32>
	__asm volatile
 81031d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81031da:	f383 8811 	msr	BASEPRI, r3
 81031de:	f3bf 8f6f 	isb	sy
 81031e2:	f3bf 8f4f 	dsb	sy
 81031e6:	60bb      	str	r3, [r7, #8]
}
 81031e8:	bf00      	nop
 81031ea:	bf00      	nop
 81031ec:	e7fd      	b.n	81031ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81031ee:	f000 f88b 	bl	8103308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81031f2:	2100      	movs	r1, #0
 81031f4:	6878      	ldr	r0, [r7, #4]
 81031f6:	f000 fd09 	bl	8103c0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81031fa:	f000 f893 	bl	8103324 <xTaskResumeAll>
 81031fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8103200:	68fb      	ldr	r3, [r7, #12]
 8103202:	2b00      	cmp	r3, #0
 8103204:	d107      	bne.n	8103216 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8103206:	4b07      	ldr	r3, [pc, #28]	@ (8103224 <vTaskDelay+0x68>)
 8103208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810320c:	601a      	str	r2, [r3, #0]
 810320e:	f3bf 8f4f 	dsb	sy
 8103212:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8103216:	bf00      	nop
 8103218:	3710      	adds	r7, #16
 810321a:	46bd      	mov	sp, r7
 810321c:	bd80      	pop	{r7, pc}
 810321e:	bf00      	nop
 8103220:	1000498c 	.word	0x1000498c
 8103224:	e000ed04 	.word	0xe000ed04

08103228 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8103228:	b580      	push	{r7, lr}
 810322a:	b08a      	sub	sp, #40	@ 0x28
 810322c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810322e:	2300      	movs	r3, #0
 8103230:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8103232:	2300      	movs	r3, #0
 8103234:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8103236:	463a      	mov	r2, r7
 8103238:	1d39      	adds	r1, r7, #4
 810323a:	f107 0308 	add.w	r3, r7, #8
 810323e:	4618      	mov	r0, r3
 8103240:	f7fe fbda 	bl	81019f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8103244:	6839      	ldr	r1, [r7, #0]
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	68ba      	ldr	r2, [r7, #8]
 810324a:	9202      	str	r2, [sp, #8]
 810324c:	9301      	str	r3, [sp, #4]
 810324e:	2300      	movs	r3, #0
 8103250:	9300      	str	r3, [sp, #0]
 8103252:	2300      	movs	r3, #0
 8103254:	460a      	mov	r2, r1
 8103256:	4924      	ldr	r1, [pc, #144]	@ (81032e8 <vTaskStartScheduler+0xc0>)
 8103258:	4824      	ldr	r0, [pc, #144]	@ (81032ec <vTaskStartScheduler+0xc4>)
 810325a:	f7ff fdf1 	bl	8102e40 <xTaskCreateStatic>
 810325e:	4603      	mov	r3, r0
 8103260:	4a23      	ldr	r2, [pc, #140]	@ (81032f0 <vTaskStartScheduler+0xc8>)
 8103262:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8103264:	4b22      	ldr	r3, [pc, #136]	@ (81032f0 <vTaskStartScheduler+0xc8>)
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	2b00      	cmp	r3, #0
 810326a:	d002      	beq.n	8103272 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810326c:	2301      	movs	r3, #1
 810326e:	617b      	str	r3, [r7, #20]
 8103270:	e001      	b.n	8103276 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8103272:	2300      	movs	r3, #0
 8103274:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8103276:	697b      	ldr	r3, [r7, #20]
 8103278:	2b01      	cmp	r3, #1
 810327a:	d102      	bne.n	8103282 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810327c:	f000 fd1a 	bl	8103cb4 <xTimerCreateTimerTask>
 8103280:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8103282:	697b      	ldr	r3, [r7, #20]
 8103284:	2b01      	cmp	r3, #1
 8103286:	d11b      	bne.n	81032c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8103288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810328c:	f383 8811 	msr	BASEPRI, r3
 8103290:	f3bf 8f6f 	isb	sy
 8103294:	f3bf 8f4f 	dsb	sy
 8103298:	613b      	str	r3, [r7, #16]
}
 810329a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810329c:	4b15      	ldr	r3, [pc, #84]	@ (81032f4 <vTaskStartScheduler+0xcc>)
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	3354      	adds	r3, #84	@ 0x54
 81032a2:	4a15      	ldr	r2, [pc, #84]	@ (81032f8 <vTaskStartScheduler+0xd0>)
 81032a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81032a6:	4b15      	ldr	r3, [pc, #84]	@ (81032fc <vTaskStartScheduler+0xd4>)
 81032a8:	f04f 32ff 	mov.w	r2, #4294967295
 81032ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81032ae:	4b14      	ldr	r3, [pc, #80]	@ (8103300 <vTaskStartScheduler+0xd8>)
 81032b0:	2201      	movs	r2, #1
 81032b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81032b4:	4b13      	ldr	r3, [pc, #76]	@ (8103304 <vTaskStartScheduler+0xdc>)
 81032b6:	2200      	movs	r2, #0
 81032b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81032ba:	f7fe ff01 	bl	81020c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81032be:	e00f      	b.n	81032e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81032c0:	697b      	ldr	r3, [r7, #20]
 81032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81032c6:	d10b      	bne.n	81032e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 81032c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81032cc:	f383 8811 	msr	BASEPRI, r3
 81032d0:	f3bf 8f6f 	isb	sy
 81032d4:	f3bf 8f4f 	dsb	sy
 81032d8:	60fb      	str	r3, [r7, #12]
}
 81032da:	bf00      	nop
 81032dc:	bf00      	nop
 81032de:	e7fd      	b.n	81032dc <vTaskStartScheduler+0xb4>
}
 81032e0:	bf00      	nop
 81032e2:	3718      	adds	r7, #24
 81032e4:	46bd      	mov	sp, r7
 81032e6:	bd80      	pop	{r7, pc}
 81032e8:	0810455c 	.word	0x0810455c
 81032ec:	08103939 	.word	0x08103939
 81032f0:	10004988 	.word	0x10004988
 81032f4:	10004490 	.word	0x10004490
 81032f8:	10000014 	.word	0x10000014
 81032fc:	10004984 	.word	0x10004984
 8103300:	10004970 	.word	0x10004970
 8103304:	10004968 	.word	0x10004968

08103308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8103308:	b480      	push	{r7}
 810330a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810330c:	4b04      	ldr	r3, [pc, #16]	@ (8103320 <vTaskSuspendAll+0x18>)
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	3301      	adds	r3, #1
 8103312:	4a03      	ldr	r2, [pc, #12]	@ (8103320 <vTaskSuspendAll+0x18>)
 8103314:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8103316:	bf00      	nop
 8103318:	46bd      	mov	sp, r7
 810331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810331e:	4770      	bx	lr
 8103320:	1000498c 	.word	0x1000498c

08103324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8103324:	b580      	push	{r7, lr}
 8103326:	b084      	sub	sp, #16
 8103328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810332a:	2300      	movs	r3, #0
 810332c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810332e:	2300      	movs	r3, #0
 8103330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8103332:	4b42      	ldr	r3, [pc, #264]	@ (810343c <xTaskResumeAll+0x118>)
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	2b00      	cmp	r3, #0
 8103338:	d10b      	bne.n	8103352 <xTaskResumeAll+0x2e>
	__asm volatile
 810333a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810333e:	f383 8811 	msr	BASEPRI, r3
 8103342:	f3bf 8f6f 	isb	sy
 8103346:	f3bf 8f4f 	dsb	sy
 810334a:	603b      	str	r3, [r7, #0]
}
 810334c:	bf00      	nop
 810334e:	bf00      	nop
 8103350:	e7fd      	b.n	810334e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8103352:	f7fe ff59 	bl	8102208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8103356:	4b39      	ldr	r3, [pc, #228]	@ (810343c <xTaskResumeAll+0x118>)
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	3b01      	subs	r3, #1
 810335c:	4a37      	ldr	r2, [pc, #220]	@ (810343c <xTaskResumeAll+0x118>)
 810335e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103360:	4b36      	ldr	r3, [pc, #216]	@ (810343c <xTaskResumeAll+0x118>)
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	2b00      	cmp	r3, #0
 8103366:	d162      	bne.n	810342e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8103368:	4b35      	ldr	r3, [pc, #212]	@ (8103440 <xTaskResumeAll+0x11c>)
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	2b00      	cmp	r3, #0
 810336e:	d05e      	beq.n	810342e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8103370:	e02f      	b.n	81033d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103372:	4b34      	ldr	r3, [pc, #208]	@ (8103444 <xTaskResumeAll+0x120>)
 8103374:	68db      	ldr	r3, [r3, #12]
 8103376:	68db      	ldr	r3, [r3, #12]
 8103378:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810337a:	68fb      	ldr	r3, [r7, #12]
 810337c:	3318      	adds	r3, #24
 810337e:	4618      	mov	r0, r3
 8103380:	f7fe fde6 	bl	8101f50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103384:	68fb      	ldr	r3, [r7, #12]
 8103386:	3304      	adds	r3, #4
 8103388:	4618      	mov	r0, r3
 810338a:	f7fe fde1 	bl	8101f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810338e:	68fb      	ldr	r3, [r7, #12]
 8103390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103392:	4b2d      	ldr	r3, [pc, #180]	@ (8103448 <xTaskResumeAll+0x124>)
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	429a      	cmp	r2, r3
 8103398:	d903      	bls.n	81033a2 <xTaskResumeAll+0x7e>
 810339a:	68fb      	ldr	r3, [r7, #12]
 810339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810339e:	4a2a      	ldr	r2, [pc, #168]	@ (8103448 <xTaskResumeAll+0x124>)
 81033a0:	6013      	str	r3, [r2, #0]
 81033a2:	68fb      	ldr	r3, [r7, #12]
 81033a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81033a6:	4613      	mov	r3, r2
 81033a8:	009b      	lsls	r3, r3, #2
 81033aa:	4413      	add	r3, r2
 81033ac:	009b      	lsls	r3, r3, #2
 81033ae:	4a27      	ldr	r2, [pc, #156]	@ (810344c <xTaskResumeAll+0x128>)
 81033b0:	441a      	add	r2, r3
 81033b2:	68fb      	ldr	r3, [r7, #12]
 81033b4:	3304      	adds	r3, #4
 81033b6:	4619      	mov	r1, r3
 81033b8:	4610      	mov	r0, r2
 81033ba:	f7fe fd6c 	bl	8101e96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81033be:	68fb      	ldr	r3, [r7, #12]
 81033c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81033c2:	4b23      	ldr	r3, [pc, #140]	@ (8103450 <xTaskResumeAll+0x12c>)
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81033c8:	429a      	cmp	r2, r3
 81033ca:	d302      	bcc.n	81033d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 81033cc:	4b21      	ldr	r3, [pc, #132]	@ (8103454 <xTaskResumeAll+0x130>)
 81033ce:	2201      	movs	r2, #1
 81033d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81033d2:	4b1c      	ldr	r3, [pc, #112]	@ (8103444 <xTaskResumeAll+0x120>)
 81033d4:	681b      	ldr	r3, [r3, #0]
 81033d6:	2b00      	cmp	r3, #0
 81033d8:	d1cb      	bne.n	8103372 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81033da:	68fb      	ldr	r3, [r7, #12]
 81033dc:	2b00      	cmp	r3, #0
 81033de:	d001      	beq.n	81033e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81033e0:	f000 fb66 	bl	8103ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81033e4:	4b1c      	ldr	r3, [pc, #112]	@ (8103458 <xTaskResumeAll+0x134>)
 81033e6:	681b      	ldr	r3, [r3, #0]
 81033e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	2b00      	cmp	r3, #0
 81033ee:	d010      	beq.n	8103412 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81033f0:	f000 f846 	bl	8103480 <xTaskIncrementTick>
 81033f4:	4603      	mov	r3, r0
 81033f6:	2b00      	cmp	r3, #0
 81033f8:	d002      	beq.n	8103400 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 81033fa:	4b16      	ldr	r3, [pc, #88]	@ (8103454 <xTaskResumeAll+0x130>)
 81033fc:	2201      	movs	r2, #1
 81033fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	3b01      	subs	r3, #1
 8103404:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	2b00      	cmp	r3, #0
 810340a:	d1f1      	bne.n	81033f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810340c:	4b12      	ldr	r3, [pc, #72]	@ (8103458 <xTaskResumeAll+0x134>)
 810340e:	2200      	movs	r2, #0
 8103410:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8103412:	4b10      	ldr	r3, [pc, #64]	@ (8103454 <xTaskResumeAll+0x130>)
 8103414:	681b      	ldr	r3, [r3, #0]
 8103416:	2b00      	cmp	r3, #0
 8103418:	d009      	beq.n	810342e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810341a:	2301      	movs	r3, #1
 810341c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810341e:	4b0f      	ldr	r3, [pc, #60]	@ (810345c <xTaskResumeAll+0x138>)
 8103420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8103424:	601a      	str	r2, [r3, #0]
 8103426:	f3bf 8f4f 	dsb	sy
 810342a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810342e:	f7fe ff1d 	bl	810226c <vPortExitCritical>

	return xAlreadyYielded;
 8103432:	68bb      	ldr	r3, [r7, #8]
}
 8103434:	4618      	mov	r0, r3
 8103436:	3710      	adds	r7, #16
 8103438:	46bd      	mov	sp, r7
 810343a:	bd80      	pop	{r7, pc}
 810343c:	1000498c 	.word	0x1000498c
 8103440:	10004964 	.word	0x10004964
 8103444:	10004924 	.word	0x10004924
 8103448:	1000496c 	.word	0x1000496c
 810344c:	10004494 	.word	0x10004494
 8103450:	10004490 	.word	0x10004490
 8103454:	10004978 	.word	0x10004978
 8103458:	10004974 	.word	0x10004974
 810345c:	e000ed04 	.word	0xe000ed04

08103460 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8103460:	b480      	push	{r7}
 8103462:	b083      	sub	sp, #12
 8103464:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8103466:	4b05      	ldr	r3, [pc, #20]	@ (810347c <xTaskGetTickCount+0x1c>)
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810346c:	687b      	ldr	r3, [r7, #4]
}
 810346e:	4618      	mov	r0, r3
 8103470:	370c      	adds	r7, #12
 8103472:	46bd      	mov	sp, r7
 8103474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103478:	4770      	bx	lr
 810347a:	bf00      	nop
 810347c:	10004968 	.word	0x10004968

08103480 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8103480:	b580      	push	{r7, lr}
 8103482:	b086      	sub	sp, #24
 8103484:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8103486:	2300      	movs	r3, #0
 8103488:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810348a:	4b4f      	ldr	r3, [pc, #316]	@ (81035c8 <xTaskIncrementTick+0x148>)
 810348c:	681b      	ldr	r3, [r3, #0]
 810348e:	2b00      	cmp	r3, #0
 8103490:	f040 8090 	bne.w	81035b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8103494:	4b4d      	ldr	r3, [pc, #308]	@ (81035cc <xTaskIncrementTick+0x14c>)
 8103496:	681b      	ldr	r3, [r3, #0]
 8103498:	3301      	adds	r3, #1
 810349a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810349c:	4a4b      	ldr	r2, [pc, #300]	@ (81035cc <xTaskIncrementTick+0x14c>)
 810349e:	693b      	ldr	r3, [r7, #16]
 81034a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81034a2:	693b      	ldr	r3, [r7, #16]
 81034a4:	2b00      	cmp	r3, #0
 81034a6:	d121      	bne.n	81034ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 81034a8:	4b49      	ldr	r3, [pc, #292]	@ (81035d0 <xTaskIncrementTick+0x150>)
 81034aa:	681b      	ldr	r3, [r3, #0]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	d00b      	beq.n	81034ca <xTaskIncrementTick+0x4a>
	__asm volatile
 81034b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81034b6:	f383 8811 	msr	BASEPRI, r3
 81034ba:	f3bf 8f6f 	isb	sy
 81034be:	f3bf 8f4f 	dsb	sy
 81034c2:	603b      	str	r3, [r7, #0]
}
 81034c4:	bf00      	nop
 81034c6:	bf00      	nop
 81034c8:	e7fd      	b.n	81034c6 <xTaskIncrementTick+0x46>
 81034ca:	4b41      	ldr	r3, [pc, #260]	@ (81035d0 <xTaskIncrementTick+0x150>)
 81034cc:	681b      	ldr	r3, [r3, #0]
 81034ce:	60fb      	str	r3, [r7, #12]
 81034d0:	4b40      	ldr	r3, [pc, #256]	@ (81035d4 <xTaskIncrementTick+0x154>)
 81034d2:	681b      	ldr	r3, [r3, #0]
 81034d4:	4a3e      	ldr	r2, [pc, #248]	@ (81035d0 <xTaskIncrementTick+0x150>)
 81034d6:	6013      	str	r3, [r2, #0]
 81034d8:	4a3e      	ldr	r2, [pc, #248]	@ (81035d4 <xTaskIncrementTick+0x154>)
 81034da:	68fb      	ldr	r3, [r7, #12]
 81034dc:	6013      	str	r3, [r2, #0]
 81034de:	4b3e      	ldr	r3, [pc, #248]	@ (81035d8 <xTaskIncrementTick+0x158>)
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	3301      	adds	r3, #1
 81034e4:	4a3c      	ldr	r2, [pc, #240]	@ (81035d8 <xTaskIncrementTick+0x158>)
 81034e6:	6013      	str	r3, [r2, #0]
 81034e8:	f000 fae2 	bl	8103ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81034ec:	4b3b      	ldr	r3, [pc, #236]	@ (81035dc <xTaskIncrementTick+0x15c>)
 81034ee:	681b      	ldr	r3, [r3, #0]
 81034f0:	693a      	ldr	r2, [r7, #16]
 81034f2:	429a      	cmp	r2, r3
 81034f4:	d349      	bcc.n	810358a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81034f6:	4b36      	ldr	r3, [pc, #216]	@ (81035d0 <xTaskIncrementTick+0x150>)
 81034f8:	681b      	ldr	r3, [r3, #0]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	2b00      	cmp	r3, #0
 81034fe:	d104      	bne.n	810350a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103500:	4b36      	ldr	r3, [pc, #216]	@ (81035dc <xTaskIncrementTick+0x15c>)
 8103502:	f04f 32ff 	mov.w	r2, #4294967295
 8103506:	601a      	str	r2, [r3, #0]
					break;
 8103508:	e03f      	b.n	810358a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810350a:	4b31      	ldr	r3, [pc, #196]	@ (81035d0 <xTaskIncrementTick+0x150>)
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	68db      	ldr	r3, [r3, #12]
 8103510:	68db      	ldr	r3, [r3, #12]
 8103512:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8103514:	68bb      	ldr	r3, [r7, #8]
 8103516:	685b      	ldr	r3, [r3, #4]
 8103518:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810351a:	693a      	ldr	r2, [r7, #16]
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	429a      	cmp	r2, r3
 8103520:	d203      	bcs.n	810352a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8103522:	4a2e      	ldr	r2, [pc, #184]	@ (81035dc <xTaskIncrementTick+0x15c>)
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8103528:	e02f      	b.n	810358a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810352a:	68bb      	ldr	r3, [r7, #8]
 810352c:	3304      	adds	r3, #4
 810352e:	4618      	mov	r0, r3
 8103530:	f7fe fd0e 	bl	8101f50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8103534:	68bb      	ldr	r3, [r7, #8]
 8103536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103538:	2b00      	cmp	r3, #0
 810353a:	d004      	beq.n	8103546 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810353c:	68bb      	ldr	r3, [r7, #8]
 810353e:	3318      	adds	r3, #24
 8103540:	4618      	mov	r0, r3
 8103542:	f7fe fd05 	bl	8101f50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8103546:	68bb      	ldr	r3, [r7, #8]
 8103548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810354a:	4b25      	ldr	r3, [pc, #148]	@ (81035e0 <xTaskIncrementTick+0x160>)
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	429a      	cmp	r2, r3
 8103550:	d903      	bls.n	810355a <xTaskIncrementTick+0xda>
 8103552:	68bb      	ldr	r3, [r7, #8]
 8103554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103556:	4a22      	ldr	r2, [pc, #136]	@ (81035e0 <xTaskIncrementTick+0x160>)
 8103558:	6013      	str	r3, [r2, #0]
 810355a:	68bb      	ldr	r3, [r7, #8]
 810355c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810355e:	4613      	mov	r3, r2
 8103560:	009b      	lsls	r3, r3, #2
 8103562:	4413      	add	r3, r2
 8103564:	009b      	lsls	r3, r3, #2
 8103566:	4a1f      	ldr	r2, [pc, #124]	@ (81035e4 <xTaskIncrementTick+0x164>)
 8103568:	441a      	add	r2, r3
 810356a:	68bb      	ldr	r3, [r7, #8]
 810356c:	3304      	adds	r3, #4
 810356e:	4619      	mov	r1, r3
 8103570:	4610      	mov	r0, r2
 8103572:	f7fe fc90 	bl	8101e96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103576:	68bb      	ldr	r3, [r7, #8]
 8103578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810357a:	4b1b      	ldr	r3, [pc, #108]	@ (81035e8 <xTaskIncrementTick+0x168>)
 810357c:	681b      	ldr	r3, [r3, #0]
 810357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103580:	429a      	cmp	r2, r3
 8103582:	d3b8      	bcc.n	81034f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8103584:	2301      	movs	r3, #1
 8103586:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103588:	e7b5      	b.n	81034f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810358a:	4b17      	ldr	r3, [pc, #92]	@ (81035e8 <xTaskIncrementTick+0x168>)
 810358c:	681b      	ldr	r3, [r3, #0]
 810358e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103590:	4914      	ldr	r1, [pc, #80]	@ (81035e4 <xTaskIncrementTick+0x164>)
 8103592:	4613      	mov	r3, r2
 8103594:	009b      	lsls	r3, r3, #2
 8103596:	4413      	add	r3, r2
 8103598:	009b      	lsls	r3, r3, #2
 810359a:	440b      	add	r3, r1
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	2b01      	cmp	r3, #1
 81035a0:	d901      	bls.n	81035a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 81035a2:	2301      	movs	r3, #1
 81035a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81035a6:	4b11      	ldr	r3, [pc, #68]	@ (81035ec <xTaskIncrementTick+0x16c>)
 81035a8:	681b      	ldr	r3, [r3, #0]
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	d007      	beq.n	81035be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81035ae:	2301      	movs	r3, #1
 81035b0:	617b      	str	r3, [r7, #20]
 81035b2:	e004      	b.n	81035be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81035b4:	4b0e      	ldr	r3, [pc, #56]	@ (81035f0 <xTaskIncrementTick+0x170>)
 81035b6:	681b      	ldr	r3, [r3, #0]
 81035b8:	3301      	adds	r3, #1
 81035ba:	4a0d      	ldr	r2, [pc, #52]	@ (81035f0 <xTaskIncrementTick+0x170>)
 81035bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81035be:	697b      	ldr	r3, [r7, #20]
}
 81035c0:	4618      	mov	r0, r3
 81035c2:	3718      	adds	r7, #24
 81035c4:	46bd      	mov	sp, r7
 81035c6:	bd80      	pop	{r7, pc}
 81035c8:	1000498c 	.word	0x1000498c
 81035cc:	10004968 	.word	0x10004968
 81035d0:	1000491c 	.word	0x1000491c
 81035d4:	10004920 	.word	0x10004920
 81035d8:	1000497c 	.word	0x1000497c
 81035dc:	10004984 	.word	0x10004984
 81035e0:	1000496c 	.word	0x1000496c
 81035e4:	10004494 	.word	0x10004494
 81035e8:	10004490 	.word	0x10004490
 81035ec:	10004978 	.word	0x10004978
 81035f0:	10004974 	.word	0x10004974

081035f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81035f4:	b480      	push	{r7}
 81035f6:	b085      	sub	sp, #20
 81035f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81035fa:	4b2b      	ldr	r3, [pc, #172]	@ (81036a8 <vTaskSwitchContext+0xb4>)
 81035fc:	681b      	ldr	r3, [r3, #0]
 81035fe:	2b00      	cmp	r3, #0
 8103600:	d003      	beq.n	810360a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8103602:	4b2a      	ldr	r3, [pc, #168]	@ (81036ac <vTaskSwitchContext+0xb8>)
 8103604:	2201      	movs	r2, #1
 8103606:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8103608:	e047      	b.n	810369a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810360a:	4b28      	ldr	r3, [pc, #160]	@ (81036ac <vTaskSwitchContext+0xb8>)
 810360c:	2200      	movs	r2, #0
 810360e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103610:	4b27      	ldr	r3, [pc, #156]	@ (81036b0 <vTaskSwitchContext+0xbc>)
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	60fb      	str	r3, [r7, #12]
 8103616:	e011      	b.n	810363c <vTaskSwitchContext+0x48>
 8103618:	68fb      	ldr	r3, [r7, #12]
 810361a:	2b00      	cmp	r3, #0
 810361c:	d10b      	bne.n	8103636 <vTaskSwitchContext+0x42>
	__asm volatile
 810361e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103622:	f383 8811 	msr	BASEPRI, r3
 8103626:	f3bf 8f6f 	isb	sy
 810362a:	f3bf 8f4f 	dsb	sy
 810362e:	607b      	str	r3, [r7, #4]
}
 8103630:	bf00      	nop
 8103632:	bf00      	nop
 8103634:	e7fd      	b.n	8103632 <vTaskSwitchContext+0x3e>
 8103636:	68fb      	ldr	r3, [r7, #12]
 8103638:	3b01      	subs	r3, #1
 810363a:	60fb      	str	r3, [r7, #12]
 810363c:	491d      	ldr	r1, [pc, #116]	@ (81036b4 <vTaskSwitchContext+0xc0>)
 810363e:	68fa      	ldr	r2, [r7, #12]
 8103640:	4613      	mov	r3, r2
 8103642:	009b      	lsls	r3, r3, #2
 8103644:	4413      	add	r3, r2
 8103646:	009b      	lsls	r3, r3, #2
 8103648:	440b      	add	r3, r1
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	2b00      	cmp	r3, #0
 810364e:	d0e3      	beq.n	8103618 <vTaskSwitchContext+0x24>
 8103650:	68fa      	ldr	r2, [r7, #12]
 8103652:	4613      	mov	r3, r2
 8103654:	009b      	lsls	r3, r3, #2
 8103656:	4413      	add	r3, r2
 8103658:	009b      	lsls	r3, r3, #2
 810365a:	4a16      	ldr	r2, [pc, #88]	@ (81036b4 <vTaskSwitchContext+0xc0>)
 810365c:	4413      	add	r3, r2
 810365e:	60bb      	str	r3, [r7, #8]
 8103660:	68bb      	ldr	r3, [r7, #8]
 8103662:	685b      	ldr	r3, [r3, #4]
 8103664:	685a      	ldr	r2, [r3, #4]
 8103666:	68bb      	ldr	r3, [r7, #8]
 8103668:	605a      	str	r2, [r3, #4]
 810366a:	68bb      	ldr	r3, [r7, #8]
 810366c:	685a      	ldr	r2, [r3, #4]
 810366e:	68bb      	ldr	r3, [r7, #8]
 8103670:	3308      	adds	r3, #8
 8103672:	429a      	cmp	r2, r3
 8103674:	d104      	bne.n	8103680 <vTaskSwitchContext+0x8c>
 8103676:	68bb      	ldr	r3, [r7, #8]
 8103678:	685b      	ldr	r3, [r3, #4]
 810367a:	685a      	ldr	r2, [r3, #4]
 810367c:	68bb      	ldr	r3, [r7, #8]
 810367e:	605a      	str	r2, [r3, #4]
 8103680:	68bb      	ldr	r3, [r7, #8]
 8103682:	685b      	ldr	r3, [r3, #4]
 8103684:	68db      	ldr	r3, [r3, #12]
 8103686:	4a0c      	ldr	r2, [pc, #48]	@ (81036b8 <vTaskSwitchContext+0xc4>)
 8103688:	6013      	str	r3, [r2, #0]
 810368a:	4a09      	ldr	r2, [pc, #36]	@ (81036b0 <vTaskSwitchContext+0xbc>)
 810368c:	68fb      	ldr	r3, [r7, #12]
 810368e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8103690:	4b09      	ldr	r3, [pc, #36]	@ (81036b8 <vTaskSwitchContext+0xc4>)
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	3354      	adds	r3, #84	@ 0x54
 8103696:	4a09      	ldr	r2, [pc, #36]	@ (81036bc <vTaskSwitchContext+0xc8>)
 8103698:	6013      	str	r3, [r2, #0]
}
 810369a:	bf00      	nop
 810369c:	3714      	adds	r7, #20
 810369e:	46bd      	mov	sp, r7
 81036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036a4:	4770      	bx	lr
 81036a6:	bf00      	nop
 81036a8:	1000498c 	.word	0x1000498c
 81036ac:	10004978 	.word	0x10004978
 81036b0:	1000496c 	.word	0x1000496c
 81036b4:	10004494 	.word	0x10004494
 81036b8:	10004490 	.word	0x10004490
 81036bc:	10000014 	.word	0x10000014

081036c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81036c0:	b580      	push	{r7, lr}
 81036c2:	b084      	sub	sp, #16
 81036c4:	af00      	add	r7, sp, #0
 81036c6:	6078      	str	r0, [r7, #4]
 81036c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	2b00      	cmp	r3, #0
 81036ce:	d10b      	bne.n	81036e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 81036d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81036d4:	f383 8811 	msr	BASEPRI, r3
 81036d8:	f3bf 8f6f 	isb	sy
 81036dc:	f3bf 8f4f 	dsb	sy
 81036e0:	60fb      	str	r3, [r7, #12]
}
 81036e2:	bf00      	nop
 81036e4:	bf00      	nop
 81036e6:	e7fd      	b.n	81036e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81036e8:	4b07      	ldr	r3, [pc, #28]	@ (8103708 <vTaskPlaceOnEventList+0x48>)
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	3318      	adds	r3, #24
 81036ee:	4619      	mov	r1, r3
 81036f0:	6878      	ldr	r0, [r7, #4]
 81036f2:	f7fe fbf4 	bl	8101ede <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81036f6:	2101      	movs	r1, #1
 81036f8:	6838      	ldr	r0, [r7, #0]
 81036fa:	f000 fa87 	bl	8103c0c <prvAddCurrentTaskToDelayedList>
}
 81036fe:	bf00      	nop
 8103700:	3710      	adds	r7, #16
 8103702:	46bd      	mov	sp, r7
 8103704:	bd80      	pop	{r7, pc}
 8103706:	bf00      	nop
 8103708:	10004490 	.word	0x10004490

0810370c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810370c:	b580      	push	{r7, lr}
 810370e:	b086      	sub	sp, #24
 8103710:	af00      	add	r7, sp, #0
 8103712:	60f8      	str	r0, [r7, #12]
 8103714:	60b9      	str	r1, [r7, #8]
 8103716:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8103718:	68fb      	ldr	r3, [r7, #12]
 810371a:	2b00      	cmp	r3, #0
 810371c:	d10b      	bne.n	8103736 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103722:	f383 8811 	msr	BASEPRI, r3
 8103726:	f3bf 8f6f 	isb	sy
 810372a:	f3bf 8f4f 	dsb	sy
 810372e:	617b      	str	r3, [r7, #20]
}
 8103730:	bf00      	nop
 8103732:	bf00      	nop
 8103734:	e7fd      	b.n	8103732 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8103736:	4b0a      	ldr	r3, [pc, #40]	@ (8103760 <vTaskPlaceOnEventListRestricted+0x54>)
 8103738:	681b      	ldr	r3, [r3, #0]
 810373a:	3318      	adds	r3, #24
 810373c:	4619      	mov	r1, r3
 810373e:	68f8      	ldr	r0, [r7, #12]
 8103740:	f7fe fba9 	bl	8101e96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	2b00      	cmp	r3, #0
 8103748:	d002      	beq.n	8103750 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810374a:	f04f 33ff 	mov.w	r3, #4294967295
 810374e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8103750:	6879      	ldr	r1, [r7, #4]
 8103752:	68b8      	ldr	r0, [r7, #8]
 8103754:	f000 fa5a 	bl	8103c0c <prvAddCurrentTaskToDelayedList>
	}
 8103758:	bf00      	nop
 810375a:	3718      	adds	r7, #24
 810375c:	46bd      	mov	sp, r7
 810375e:	bd80      	pop	{r7, pc}
 8103760:	10004490 	.word	0x10004490

08103764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8103764:	b580      	push	{r7, lr}
 8103766:	b086      	sub	sp, #24
 8103768:	af00      	add	r7, sp, #0
 810376a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	68db      	ldr	r3, [r3, #12]
 8103770:	68db      	ldr	r3, [r3, #12]
 8103772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8103774:	693b      	ldr	r3, [r7, #16]
 8103776:	2b00      	cmp	r3, #0
 8103778:	d10b      	bne.n	8103792 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810377a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810377e:	f383 8811 	msr	BASEPRI, r3
 8103782:	f3bf 8f6f 	isb	sy
 8103786:	f3bf 8f4f 	dsb	sy
 810378a:	60fb      	str	r3, [r7, #12]
}
 810378c:	bf00      	nop
 810378e:	bf00      	nop
 8103790:	e7fd      	b.n	810378e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8103792:	693b      	ldr	r3, [r7, #16]
 8103794:	3318      	adds	r3, #24
 8103796:	4618      	mov	r0, r3
 8103798:	f7fe fbda 	bl	8101f50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810379c:	4b1d      	ldr	r3, [pc, #116]	@ (8103814 <xTaskRemoveFromEventList+0xb0>)
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	2b00      	cmp	r3, #0
 81037a2:	d11d      	bne.n	81037e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81037a4:	693b      	ldr	r3, [r7, #16]
 81037a6:	3304      	adds	r3, #4
 81037a8:	4618      	mov	r0, r3
 81037aa:	f7fe fbd1 	bl	8101f50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81037ae:	693b      	ldr	r3, [r7, #16]
 81037b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81037b2:	4b19      	ldr	r3, [pc, #100]	@ (8103818 <xTaskRemoveFromEventList+0xb4>)
 81037b4:	681b      	ldr	r3, [r3, #0]
 81037b6:	429a      	cmp	r2, r3
 81037b8:	d903      	bls.n	81037c2 <xTaskRemoveFromEventList+0x5e>
 81037ba:	693b      	ldr	r3, [r7, #16]
 81037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037be:	4a16      	ldr	r2, [pc, #88]	@ (8103818 <xTaskRemoveFromEventList+0xb4>)
 81037c0:	6013      	str	r3, [r2, #0]
 81037c2:	693b      	ldr	r3, [r7, #16]
 81037c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81037c6:	4613      	mov	r3, r2
 81037c8:	009b      	lsls	r3, r3, #2
 81037ca:	4413      	add	r3, r2
 81037cc:	009b      	lsls	r3, r3, #2
 81037ce:	4a13      	ldr	r2, [pc, #76]	@ (810381c <xTaskRemoveFromEventList+0xb8>)
 81037d0:	441a      	add	r2, r3
 81037d2:	693b      	ldr	r3, [r7, #16]
 81037d4:	3304      	adds	r3, #4
 81037d6:	4619      	mov	r1, r3
 81037d8:	4610      	mov	r0, r2
 81037da:	f7fe fb5c 	bl	8101e96 <vListInsertEnd>
 81037de:	e005      	b.n	81037ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 81037e0:	693b      	ldr	r3, [r7, #16]
 81037e2:	3318      	adds	r3, #24
 81037e4:	4619      	mov	r1, r3
 81037e6:	480e      	ldr	r0, [pc, #56]	@ (8103820 <xTaskRemoveFromEventList+0xbc>)
 81037e8:	f7fe fb55 	bl	8101e96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 81037ec:	693b      	ldr	r3, [r7, #16]
 81037ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81037f0:	4b0c      	ldr	r3, [pc, #48]	@ (8103824 <xTaskRemoveFromEventList+0xc0>)
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037f6:	429a      	cmp	r2, r3
 81037f8:	d905      	bls.n	8103806 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81037fa:	2301      	movs	r3, #1
 81037fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81037fe:	4b0a      	ldr	r3, [pc, #40]	@ (8103828 <xTaskRemoveFromEventList+0xc4>)
 8103800:	2201      	movs	r2, #1
 8103802:	601a      	str	r2, [r3, #0]
 8103804:	e001      	b.n	810380a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8103806:	2300      	movs	r3, #0
 8103808:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810380a:	697b      	ldr	r3, [r7, #20]
}
 810380c:	4618      	mov	r0, r3
 810380e:	3718      	adds	r7, #24
 8103810:	46bd      	mov	sp, r7
 8103812:	bd80      	pop	{r7, pc}
 8103814:	1000498c 	.word	0x1000498c
 8103818:	1000496c 	.word	0x1000496c
 810381c:	10004494 	.word	0x10004494
 8103820:	10004924 	.word	0x10004924
 8103824:	10004490 	.word	0x10004490
 8103828:	10004978 	.word	0x10004978

0810382c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810382c:	b480      	push	{r7}
 810382e:	b083      	sub	sp, #12
 8103830:	af00      	add	r7, sp, #0
 8103832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8103834:	4b06      	ldr	r3, [pc, #24]	@ (8103850 <vTaskInternalSetTimeOutState+0x24>)
 8103836:	681a      	ldr	r2, [r3, #0]
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810383c:	4b05      	ldr	r3, [pc, #20]	@ (8103854 <vTaskInternalSetTimeOutState+0x28>)
 810383e:	681a      	ldr	r2, [r3, #0]
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	605a      	str	r2, [r3, #4]
}
 8103844:	bf00      	nop
 8103846:	370c      	adds	r7, #12
 8103848:	46bd      	mov	sp, r7
 810384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810384e:	4770      	bx	lr
 8103850:	1000497c 	.word	0x1000497c
 8103854:	10004968 	.word	0x10004968

08103858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8103858:	b580      	push	{r7, lr}
 810385a:	b088      	sub	sp, #32
 810385c:	af00      	add	r7, sp, #0
 810385e:	6078      	str	r0, [r7, #4]
 8103860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	2b00      	cmp	r3, #0
 8103866:	d10b      	bne.n	8103880 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8103868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810386c:	f383 8811 	msr	BASEPRI, r3
 8103870:	f3bf 8f6f 	isb	sy
 8103874:	f3bf 8f4f 	dsb	sy
 8103878:	613b      	str	r3, [r7, #16]
}
 810387a:	bf00      	nop
 810387c:	bf00      	nop
 810387e:	e7fd      	b.n	810387c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8103880:	683b      	ldr	r3, [r7, #0]
 8103882:	2b00      	cmp	r3, #0
 8103884:	d10b      	bne.n	810389e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8103886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810388a:	f383 8811 	msr	BASEPRI, r3
 810388e:	f3bf 8f6f 	isb	sy
 8103892:	f3bf 8f4f 	dsb	sy
 8103896:	60fb      	str	r3, [r7, #12]
}
 8103898:	bf00      	nop
 810389a:	bf00      	nop
 810389c:	e7fd      	b.n	810389a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810389e:	f7fe fcb3 	bl	8102208 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 81038a2:	4b1d      	ldr	r3, [pc, #116]	@ (8103918 <xTaskCheckForTimeOut+0xc0>)
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	685b      	ldr	r3, [r3, #4]
 81038ac:	69ba      	ldr	r2, [r7, #24]
 81038ae:	1ad3      	subs	r3, r2, r3
 81038b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 81038b2:	683b      	ldr	r3, [r7, #0]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81038ba:	d102      	bne.n	81038c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 81038bc:	2300      	movs	r3, #0
 81038be:	61fb      	str	r3, [r7, #28]
 81038c0:	e023      	b.n	810390a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	681a      	ldr	r2, [r3, #0]
 81038c6:	4b15      	ldr	r3, [pc, #84]	@ (810391c <xTaskCheckForTimeOut+0xc4>)
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	429a      	cmp	r2, r3
 81038cc:	d007      	beq.n	81038de <xTaskCheckForTimeOut+0x86>
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	685b      	ldr	r3, [r3, #4]
 81038d2:	69ba      	ldr	r2, [r7, #24]
 81038d4:	429a      	cmp	r2, r3
 81038d6:	d302      	bcc.n	81038de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81038d8:	2301      	movs	r3, #1
 81038da:	61fb      	str	r3, [r7, #28]
 81038dc:	e015      	b.n	810390a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81038de:	683b      	ldr	r3, [r7, #0]
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	697a      	ldr	r2, [r7, #20]
 81038e4:	429a      	cmp	r2, r3
 81038e6:	d20b      	bcs.n	8103900 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81038e8:	683b      	ldr	r3, [r7, #0]
 81038ea:	681a      	ldr	r2, [r3, #0]
 81038ec:	697b      	ldr	r3, [r7, #20]
 81038ee:	1ad2      	subs	r2, r2, r3
 81038f0:	683b      	ldr	r3, [r7, #0]
 81038f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81038f4:	6878      	ldr	r0, [r7, #4]
 81038f6:	f7ff ff99 	bl	810382c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81038fa:	2300      	movs	r3, #0
 81038fc:	61fb      	str	r3, [r7, #28]
 81038fe:	e004      	b.n	810390a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8103900:	683b      	ldr	r3, [r7, #0]
 8103902:	2200      	movs	r2, #0
 8103904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8103906:	2301      	movs	r3, #1
 8103908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810390a:	f7fe fcaf 	bl	810226c <vPortExitCritical>

	return xReturn;
 810390e:	69fb      	ldr	r3, [r7, #28]
}
 8103910:	4618      	mov	r0, r3
 8103912:	3720      	adds	r7, #32
 8103914:	46bd      	mov	sp, r7
 8103916:	bd80      	pop	{r7, pc}
 8103918:	10004968 	.word	0x10004968
 810391c:	1000497c 	.word	0x1000497c

08103920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8103920:	b480      	push	{r7}
 8103922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8103924:	4b03      	ldr	r3, [pc, #12]	@ (8103934 <vTaskMissedYield+0x14>)
 8103926:	2201      	movs	r2, #1
 8103928:	601a      	str	r2, [r3, #0]
}
 810392a:	bf00      	nop
 810392c:	46bd      	mov	sp, r7
 810392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103932:	4770      	bx	lr
 8103934:	10004978 	.word	0x10004978

08103938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8103938:	b580      	push	{r7, lr}
 810393a:	b082      	sub	sp, #8
 810393c:	af00      	add	r7, sp, #0
 810393e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8103940:	f000 f852 	bl	81039e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8103944:	4b06      	ldr	r3, [pc, #24]	@ (8103960 <prvIdleTask+0x28>)
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	2b01      	cmp	r3, #1
 810394a:	d9f9      	bls.n	8103940 <prvIdleTask+0x8>
			{
				taskYIELD();
 810394c:	4b05      	ldr	r3, [pc, #20]	@ (8103964 <prvIdleTask+0x2c>)
 810394e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8103952:	601a      	str	r2, [r3, #0]
 8103954:	f3bf 8f4f 	dsb	sy
 8103958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810395c:	e7f0      	b.n	8103940 <prvIdleTask+0x8>
 810395e:	bf00      	nop
 8103960:	10004494 	.word	0x10004494
 8103964:	e000ed04 	.word	0xe000ed04

08103968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8103968:	b580      	push	{r7, lr}
 810396a:	b082      	sub	sp, #8
 810396c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810396e:	2300      	movs	r3, #0
 8103970:	607b      	str	r3, [r7, #4]
 8103972:	e00c      	b.n	810398e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8103974:	687a      	ldr	r2, [r7, #4]
 8103976:	4613      	mov	r3, r2
 8103978:	009b      	lsls	r3, r3, #2
 810397a:	4413      	add	r3, r2
 810397c:	009b      	lsls	r3, r3, #2
 810397e:	4a12      	ldr	r2, [pc, #72]	@ (81039c8 <prvInitialiseTaskLists+0x60>)
 8103980:	4413      	add	r3, r2
 8103982:	4618      	mov	r0, r3
 8103984:	f7fe fa5a 	bl	8101e3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	3301      	adds	r3, #1
 810398c:	607b      	str	r3, [r7, #4]
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	2b37      	cmp	r3, #55	@ 0x37
 8103992:	d9ef      	bls.n	8103974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8103994:	480d      	ldr	r0, [pc, #52]	@ (81039cc <prvInitialiseTaskLists+0x64>)
 8103996:	f7fe fa51 	bl	8101e3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810399a:	480d      	ldr	r0, [pc, #52]	@ (81039d0 <prvInitialiseTaskLists+0x68>)
 810399c:	f7fe fa4e 	bl	8101e3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 81039a0:	480c      	ldr	r0, [pc, #48]	@ (81039d4 <prvInitialiseTaskLists+0x6c>)
 81039a2:	f7fe fa4b 	bl	8101e3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 81039a6:	480c      	ldr	r0, [pc, #48]	@ (81039d8 <prvInitialiseTaskLists+0x70>)
 81039a8:	f7fe fa48 	bl	8101e3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 81039ac:	480b      	ldr	r0, [pc, #44]	@ (81039dc <prvInitialiseTaskLists+0x74>)
 81039ae:	f7fe fa45 	bl	8101e3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 81039b2:	4b0b      	ldr	r3, [pc, #44]	@ (81039e0 <prvInitialiseTaskLists+0x78>)
 81039b4:	4a05      	ldr	r2, [pc, #20]	@ (81039cc <prvInitialiseTaskLists+0x64>)
 81039b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 81039b8:	4b0a      	ldr	r3, [pc, #40]	@ (81039e4 <prvInitialiseTaskLists+0x7c>)
 81039ba:	4a05      	ldr	r2, [pc, #20]	@ (81039d0 <prvInitialiseTaskLists+0x68>)
 81039bc:	601a      	str	r2, [r3, #0]
}
 81039be:	bf00      	nop
 81039c0:	3708      	adds	r7, #8
 81039c2:	46bd      	mov	sp, r7
 81039c4:	bd80      	pop	{r7, pc}
 81039c6:	bf00      	nop
 81039c8:	10004494 	.word	0x10004494
 81039cc:	100048f4 	.word	0x100048f4
 81039d0:	10004908 	.word	0x10004908
 81039d4:	10004924 	.word	0x10004924
 81039d8:	10004938 	.word	0x10004938
 81039dc:	10004950 	.word	0x10004950
 81039e0:	1000491c 	.word	0x1000491c
 81039e4:	10004920 	.word	0x10004920

081039e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81039e8:	b580      	push	{r7, lr}
 81039ea:	b082      	sub	sp, #8
 81039ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81039ee:	e019      	b.n	8103a24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81039f0:	f7fe fc0a 	bl	8102208 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81039f4:	4b10      	ldr	r3, [pc, #64]	@ (8103a38 <prvCheckTasksWaitingTermination+0x50>)
 81039f6:	68db      	ldr	r3, [r3, #12]
 81039f8:	68db      	ldr	r3, [r3, #12]
 81039fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	3304      	adds	r3, #4
 8103a00:	4618      	mov	r0, r3
 8103a02:	f7fe faa5 	bl	8101f50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8103a06:	4b0d      	ldr	r3, [pc, #52]	@ (8103a3c <prvCheckTasksWaitingTermination+0x54>)
 8103a08:	681b      	ldr	r3, [r3, #0]
 8103a0a:	3b01      	subs	r3, #1
 8103a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8103a3c <prvCheckTasksWaitingTermination+0x54>)
 8103a0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8103a10:	4b0b      	ldr	r3, [pc, #44]	@ (8103a40 <prvCheckTasksWaitingTermination+0x58>)
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	3b01      	subs	r3, #1
 8103a16:	4a0a      	ldr	r2, [pc, #40]	@ (8103a40 <prvCheckTasksWaitingTermination+0x58>)
 8103a18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8103a1a:	f7fe fc27 	bl	810226c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8103a1e:	6878      	ldr	r0, [r7, #4]
 8103a20:	f000 f810 	bl	8103a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8103a24:	4b06      	ldr	r3, [pc, #24]	@ (8103a40 <prvCheckTasksWaitingTermination+0x58>)
 8103a26:	681b      	ldr	r3, [r3, #0]
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	d1e1      	bne.n	81039f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8103a2c:	bf00      	nop
 8103a2e:	bf00      	nop
 8103a30:	3708      	adds	r7, #8
 8103a32:	46bd      	mov	sp, r7
 8103a34:	bd80      	pop	{r7, pc}
 8103a36:	bf00      	nop
 8103a38:	10004938 	.word	0x10004938
 8103a3c:	10004964 	.word	0x10004964
 8103a40:	1000494c 	.word	0x1000494c

08103a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8103a44:	b580      	push	{r7, lr}
 8103a46:	b084      	sub	sp, #16
 8103a48:	af00      	add	r7, sp, #0
 8103a4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	3354      	adds	r3, #84	@ 0x54
 8103a50:	4618      	mov	r0, r3
 8103a52:	f000 fc91 	bl	8104378 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d108      	bne.n	8103a72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8103a60:	687b      	ldr	r3, [r7, #4]
 8103a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103a64:	4618      	mov	r0, r3
 8103a66:	f7fe f8c9 	bl	8101bfc <vPortFree>
				vPortFree( pxTCB );
 8103a6a:	6878      	ldr	r0, [r7, #4]
 8103a6c:	f7fe f8c6 	bl	8101bfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8103a70:	e019      	b.n	8103aa6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8103a78:	2b01      	cmp	r3, #1
 8103a7a:	d103      	bne.n	8103a84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8103a7c:	6878      	ldr	r0, [r7, #4]
 8103a7e:	f7fe f8bd 	bl	8101bfc <vPortFree>
	}
 8103a82:	e010      	b.n	8103aa6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8103a8a:	2b02      	cmp	r3, #2
 8103a8c:	d00b      	beq.n	8103aa6 <prvDeleteTCB+0x62>
	__asm volatile
 8103a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103a92:	f383 8811 	msr	BASEPRI, r3
 8103a96:	f3bf 8f6f 	isb	sy
 8103a9a:	f3bf 8f4f 	dsb	sy
 8103a9e:	60fb      	str	r3, [r7, #12]
}
 8103aa0:	bf00      	nop
 8103aa2:	bf00      	nop
 8103aa4:	e7fd      	b.n	8103aa2 <prvDeleteTCB+0x5e>
	}
 8103aa6:	bf00      	nop
 8103aa8:	3710      	adds	r7, #16
 8103aaa:	46bd      	mov	sp, r7
 8103aac:	bd80      	pop	{r7, pc}
	...

08103ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8103ab0:	b480      	push	{r7}
 8103ab2:	b083      	sub	sp, #12
 8103ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8103ae8 <prvResetNextTaskUnblockTime+0x38>)
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	681b      	ldr	r3, [r3, #0]
 8103abc:	2b00      	cmp	r3, #0
 8103abe:	d104      	bne.n	8103aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8103ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8103aec <prvResetNextTaskUnblockTime+0x3c>)
 8103ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8103ac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8103ac8:	e008      	b.n	8103adc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103aca:	4b07      	ldr	r3, [pc, #28]	@ (8103ae8 <prvResetNextTaskUnblockTime+0x38>)
 8103acc:	681b      	ldr	r3, [r3, #0]
 8103ace:	68db      	ldr	r3, [r3, #12]
 8103ad0:	68db      	ldr	r3, [r3, #12]
 8103ad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	685b      	ldr	r3, [r3, #4]
 8103ad8:	4a04      	ldr	r2, [pc, #16]	@ (8103aec <prvResetNextTaskUnblockTime+0x3c>)
 8103ada:	6013      	str	r3, [r2, #0]
}
 8103adc:	bf00      	nop
 8103ade:	370c      	adds	r7, #12
 8103ae0:	46bd      	mov	sp, r7
 8103ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ae6:	4770      	bx	lr
 8103ae8:	1000491c 	.word	0x1000491c
 8103aec:	10004984 	.word	0x10004984

08103af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8103af0:	b480      	push	{r7}
 8103af2:	b083      	sub	sp, #12
 8103af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8103af6:	4b0b      	ldr	r3, [pc, #44]	@ (8103b24 <xTaskGetSchedulerState+0x34>)
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	2b00      	cmp	r3, #0
 8103afc:	d102      	bne.n	8103b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8103afe:	2301      	movs	r3, #1
 8103b00:	607b      	str	r3, [r7, #4]
 8103b02:	e008      	b.n	8103b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103b04:	4b08      	ldr	r3, [pc, #32]	@ (8103b28 <xTaskGetSchedulerState+0x38>)
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	2b00      	cmp	r3, #0
 8103b0a:	d102      	bne.n	8103b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8103b0c:	2302      	movs	r3, #2
 8103b0e:	607b      	str	r3, [r7, #4]
 8103b10:	e001      	b.n	8103b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8103b12:	2300      	movs	r3, #0
 8103b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8103b16:	687b      	ldr	r3, [r7, #4]
	}
 8103b18:	4618      	mov	r0, r3
 8103b1a:	370c      	adds	r7, #12
 8103b1c:	46bd      	mov	sp, r7
 8103b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b22:	4770      	bx	lr
 8103b24:	10004970 	.word	0x10004970
 8103b28:	1000498c 	.word	0x1000498c

08103b2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8103b2c:	b580      	push	{r7, lr}
 8103b2e:	b086      	sub	sp, #24
 8103b30:	af00      	add	r7, sp, #0
 8103b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8103b38:	2300      	movs	r3, #0
 8103b3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	2b00      	cmp	r3, #0
 8103b40:	d058      	beq.n	8103bf4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8103b42:	4b2f      	ldr	r3, [pc, #188]	@ (8103c00 <xTaskPriorityDisinherit+0xd4>)
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	693a      	ldr	r2, [r7, #16]
 8103b48:	429a      	cmp	r2, r3
 8103b4a:	d00b      	beq.n	8103b64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8103b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103b50:	f383 8811 	msr	BASEPRI, r3
 8103b54:	f3bf 8f6f 	isb	sy
 8103b58:	f3bf 8f4f 	dsb	sy
 8103b5c:	60fb      	str	r3, [r7, #12]
}
 8103b5e:	bf00      	nop
 8103b60:	bf00      	nop
 8103b62:	e7fd      	b.n	8103b60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8103b64:	693b      	ldr	r3, [r7, #16]
 8103b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b68:	2b00      	cmp	r3, #0
 8103b6a:	d10b      	bne.n	8103b84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8103b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103b70:	f383 8811 	msr	BASEPRI, r3
 8103b74:	f3bf 8f6f 	isb	sy
 8103b78:	f3bf 8f4f 	dsb	sy
 8103b7c:	60bb      	str	r3, [r7, #8]
}
 8103b7e:	bf00      	nop
 8103b80:	bf00      	nop
 8103b82:	e7fd      	b.n	8103b80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8103b84:	693b      	ldr	r3, [r7, #16]
 8103b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b88:	1e5a      	subs	r2, r3, #1
 8103b8a:	693b      	ldr	r3, [r7, #16]
 8103b8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8103b8e:	693b      	ldr	r3, [r7, #16]
 8103b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103b92:	693b      	ldr	r3, [r7, #16]
 8103b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103b96:	429a      	cmp	r2, r3
 8103b98:	d02c      	beq.n	8103bf4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8103b9a:	693b      	ldr	r3, [r7, #16]
 8103b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b9e:	2b00      	cmp	r3, #0
 8103ba0:	d128      	bne.n	8103bf4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103ba2:	693b      	ldr	r3, [r7, #16]
 8103ba4:	3304      	adds	r3, #4
 8103ba6:	4618      	mov	r0, r3
 8103ba8:	f7fe f9d2 	bl	8101f50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8103bac:	693b      	ldr	r3, [r7, #16]
 8103bae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103bb0:	693b      	ldr	r3, [r7, #16]
 8103bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103bb4:	693b      	ldr	r3, [r7, #16]
 8103bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103bb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8103bbc:	693b      	ldr	r3, [r7, #16]
 8103bbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8103bc0:	693b      	ldr	r3, [r7, #16]
 8103bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8103c04 <xTaskPriorityDisinherit+0xd8>)
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	429a      	cmp	r2, r3
 8103bca:	d903      	bls.n	8103bd4 <xTaskPriorityDisinherit+0xa8>
 8103bcc:	693b      	ldr	r3, [r7, #16]
 8103bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8103c04 <xTaskPriorityDisinherit+0xd8>)
 8103bd2:	6013      	str	r3, [r2, #0]
 8103bd4:	693b      	ldr	r3, [r7, #16]
 8103bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103bd8:	4613      	mov	r3, r2
 8103bda:	009b      	lsls	r3, r3, #2
 8103bdc:	4413      	add	r3, r2
 8103bde:	009b      	lsls	r3, r3, #2
 8103be0:	4a09      	ldr	r2, [pc, #36]	@ (8103c08 <xTaskPriorityDisinherit+0xdc>)
 8103be2:	441a      	add	r2, r3
 8103be4:	693b      	ldr	r3, [r7, #16]
 8103be6:	3304      	adds	r3, #4
 8103be8:	4619      	mov	r1, r3
 8103bea:	4610      	mov	r0, r2
 8103bec:	f7fe f953 	bl	8101e96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8103bf0:	2301      	movs	r3, #1
 8103bf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8103bf4:	697b      	ldr	r3, [r7, #20]
	}
 8103bf6:	4618      	mov	r0, r3
 8103bf8:	3718      	adds	r7, #24
 8103bfa:	46bd      	mov	sp, r7
 8103bfc:	bd80      	pop	{r7, pc}
 8103bfe:	bf00      	nop
 8103c00:	10004490 	.word	0x10004490
 8103c04:	1000496c 	.word	0x1000496c
 8103c08:	10004494 	.word	0x10004494

08103c0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8103c0c:	b580      	push	{r7, lr}
 8103c0e:	b084      	sub	sp, #16
 8103c10:	af00      	add	r7, sp, #0
 8103c12:	6078      	str	r0, [r7, #4]
 8103c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8103c16:	4b21      	ldr	r3, [pc, #132]	@ (8103c9c <prvAddCurrentTaskToDelayedList+0x90>)
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103c1c:	4b20      	ldr	r3, [pc, #128]	@ (8103ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8103c1e:	681b      	ldr	r3, [r3, #0]
 8103c20:	3304      	adds	r3, #4
 8103c22:	4618      	mov	r0, r3
 8103c24:	f7fe f994 	bl	8101f50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c2e:	d10a      	bne.n	8103c46 <prvAddCurrentTaskToDelayedList+0x3a>
 8103c30:	683b      	ldr	r3, [r7, #0]
 8103c32:	2b00      	cmp	r3, #0
 8103c34:	d007      	beq.n	8103c46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103c36:	4b1a      	ldr	r3, [pc, #104]	@ (8103ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	3304      	adds	r3, #4
 8103c3c:	4619      	mov	r1, r3
 8103c3e:	4819      	ldr	r0, [pc, #100]	@ (8103ca4 <prvAddCurrentTaskToDelayedList+0x98>)
 8103c40:	f7fe f929 	bl	8101e96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8103c44:	e026      	b.n	8103c94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8103c46:	68fa      	ldr	r2, [r7, #12]
 8103c48:	687b      	ldr	r3, [r7, #4]
 8103c4a:	4413      	add	r3, r2
 8103c4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8103c4e:	4b14      	ldr	r3, [pc, #80]	@ (8103ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8103c50:	681b      	ldr	r3, [r3, #0]
 8103c52:	68ba      	ldr	r2, [r7, #8]
 8103c54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8103c56:	68ba      	ldr	r2, [r7, #8]
 8103c58:	68fb      	ldr	r3, [r7, #12]
 8103c5a:	429a      	cmp	r2, r3
 8103c5c:	d209      	bcs.n	8103c72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103c5e:	4b12      	ldr	r3, [pc, #72]	@ (8103ca8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8103c60:	681a      	ldr	r2, [r3, #0]
 8103c62:	4b0f      	ldr	r3, [pc, #60]	@ (8103ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	3304      	adds	r3, #4
 8103c68:	4619      	mov	r1, r3
 8103c6a:	4610      	mov	r0, r2
 8103c6c:	f7fe f937 	bl	8101ede <vListInsert>
}
 8103c70:	e010      	b.n	8103c94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103c72:	4b0e      	ldr	r3, [pc, #56]	@ (8103cac <prvAddCurrentTaskToDelayedList+0xa0>)
 8103c74:	681a      	ldr	r2, [r3, #0]
 8103c76:	4b0a      	ldr	r3, [pc, #40]	@ (8103ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8103c78:	681b      	ldr	r3, [r3, #0]
 8103c7a:	3304      	adds	r3, #4
 8103c7c:	4619      	mov	r1, r3
 8103c7e:	4610      	mov	r0, r2
 8103c80:	f7fe f92d 	bl	8101ede <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8103c84:	4b0a      	ldr	r3, [pc, #40]	@ (8103cb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8103c86:	681b      	ldr	r3, [r3, #0]
 8103c88:	68ba      	ldr	r2, [r7, #8]
 8103c8a:	429a      	cmp	r2, r3
 8103c8c:	d202      	bcs.n	8103c94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8103c8e:	4a08      	ldr	r2, [pc, #32]	@ (8103cb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8103c90:	68bb      	ldr	r3, [r7, #8]
 8103c92:	6013      	str	r3, [r2, #0]
}
 8103c94:	bf00      	nop
 8103c96:	3710      	adds	r7, #16
 8103c98:	46bd      	mov	sp, r7
 8103c9a:	bd80      	pop	{r7, pc}
 8103c9c:	10004968 	.word	0x10004968
 8103ca0:	10004490 	.word	0x10004490
 8103ca4:	10004950 	.word	0x10004950
 8103ca8:	10004920 	.word	0x10004920
 8103cac:	1000491c 	.word	0x1000491c
 8103cb0:	10004984 	.word	0x10004984

08103cb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8103cb4:	b580      	push	{r7, lr}
 8103cb6:	b08a      	sub	sp, #40	@ 0x28
 8103cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8103cba:	2300      	movs	r3, #0
 8103cbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8103cbe:	f000 fb13 	bl	81042e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8103cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8103d38 <xTimerCreateTimerTask+0x84>)
 8103cc4:	681b      	ldr	r3, [r3, #0]
 8103cc6:	2b00      	cmp	r3, #0
 8103cc8:	d021      	beq.n	8103d0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8103cca:	2300      	movs	r3, #0
 8103ccc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8103cce:	2300      	movs	r3, #0
 8103cd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8103cd2:	1d3a      	adds	r2, r7, #4
 8103cd4:	f107 0108 	add.w	r1, r7, #8
 8103cd8:	f107 030c 	add.w	r3, r7, #12
 8103cdc:	4618      	mov	r0, r3
 8103cde:	f7fd fea5 	bl	8101a2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8103ce2:	6879      	ldr	r1, [r7, #4]
 8103ce4:	68bb      	ldr	r3, [r7, #8]
 8103ce6:	68fa      	ldr	r2, [r7, #12]
 8103ce8:	9202      	str	r2, [sp, #8]
 8103cea:	9301      	str	r3, [sp, #4]
 8103cec:	2302      	movs	r3, #2
 8103cee:	9300      	str	r3, [sp, #0]
 8103cf0:	2300      	movs	r3, #0
 8103cf2:	460a      	mov	r2, r1
 8103cf4:	4911      	ldr	r1, [pc, #68]	@ (8103d3c <xTimerCreateTimerTask+0x88>)
 8103cf6:	4812      	ldr	r0, [pc, #72]	@ (8103d40 <xTimerCreateTimerTask+0x8c>)
 8103cf8:	f7ff f8a2 	bl	8102e40 <xTaskCreateStatic>
 8103cfc:	4603      	mov	r3, r0
 8103cfe:	4a11      	ldr	r2, [pc, #68]	@ (8103d44 <xTimerCreateTimerTask+0x90>)
 8103d00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8103d02:	4b10      	ldr	r3, [pc, #64]	@ (8103d44 <xTimerCreateTimerTask+0x90>)
 8103d04:	681b      	ldr	r3, [r3, #0]
 8103d06:	2b00      	cmp	r3, #0
 8103d08:	d001      	beq.n	8103d0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8103d0a:	2301      	movs	r3, #1
 8103d0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8103d0e:	697b      	ldr	r3, [r7, #20]
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d10b      	bne.n	8103d2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8103d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103d18:	f383 8811 	msr	BASEPRI, r3
 8103d1c:	f3bf 8f6f 	isb	sy
 8103d20:	f3bf 8f4f 	dsb	sy
 8103d24:	613b      	str	r3, [r7, #16]
}
 8103d26:	bf00      	nop
 8103d28:	bf00      	nop
 8103d2a:	e7fd      	b.n	8103d28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8103d2c:	697b      	ldr	r3, [r7, #20]
}
 8103d2e:	4618      	mov	r0, r3
 8103d30:	3718      	adds	r7, #24
 8103d32:	46bd      	mov	sp, r7
 8103d34:	bd80      	pop	{r7, pc}
 8103d36:	bf00      	nop
 8103d38:	100049c0 	.word	0x100049c0
 8103d3c:	08104564 	.word	0x08104564
 8103d40:	08103e81 	.word	0x08103e81
 8103d44:	100049c4 	.word	0x100049c4

08103d48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8103d48:	b580      	push	{r7, lr}
 8103d4a:	b08a      	sub	sp, #40	@ 0x28
 8103d4c:	af00      	add	r7, sp, #0
 8103d4e:	60f8      	str	r0, [r7, #12]
 8103d50:	60b9      	str	r1, [r7, #8]
 8103d52:	607a      	str	r2, [r7, #4]
 8103d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8103d56:	2300      	movs	r3, #0
 8103d58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8103d5a:	68fb      	ldr	r3, [r7, #12]
 8103d5c:	2b00      	cmp	r3, #0
 8103d5e:	d10b      	bne.n	8103d78 <xTimerGenericCommand+0x30>
	__asm volatile
 8103d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103d64:	f383 8811 	msr	BASEPRI, r3
 8103d68:	f3bf 8f6f 	isb	sy
 8103d6c:	f3bf 8f4f 	dsb	sy
 8103d70:	623b      	str	r3, [r7, #32]
}
 8103d72:	bf00      	nop
 8103d74:	bf00      	nop
 8103d76:	e7fd      	b.n	8103d74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8103d78:	4b19      	ldr	r3, [pc, #100]	@ (8103de0 <xTimerGenericCommand+0x98>)
 8103d7a:	681b      	ldr	r3, [r3, #0]
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d02a      	beq.n	8103dd6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8103d80:	68bb      	ldr	r3, [r7, #8]
 8103d82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8103d88:	68fb      	ldr	r3, [r7, #12]
 8103d8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8103d8c:	68bb      	ldr	r3, [r7, #8]
 8103d8e:	2b05      	cmp	r3, #5
 8103d90:	dc18      	bgt.n	8103dc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8103d92:	f7ff fead 	bl	8103af0 <xTaskGetSchedulerState>
 8103d96:	4603      	mov	r3, r0
 8103d98:	2b02      	cmp	r3, #2
 8103d9a:	d109      	bne.n	8103db0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8103d9c:	4b10      	ldr	r3, [pc, #64]	@ (8103de0 <xTimerGenericCommand+0x98>)
 8103d9e:	6818      	ldr	r0, [r3, #0]
 8103da0:	f107 0110 	add.w	r1, r7, #16
 8103da4:	2300      	movs	r3, #0
 8103da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103da8:	f7fe fc5a 	bl	8102660 <xQueueGenericSend>
 8103dac:	6278      	str	r0, [r7, #36]	@ 0x24
 8103dae:	e012      	b.n	8103dd6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8103db0:	4b0b      	ldr	r3, [pc, #44]	@ (8103de0 <xTimerGenericCommand+0x98>)
 8103db2:	6818      	ldr	r0, [r3, #0]
 8103db4:	f107 0110 	add.w	r1, r7, #16
 8103db8:	2300      	movs	r3, #0
 8103dba:	2200      	movs	r2, #0
 8103dbc:	f7fe fc50 	bl	8102660 <xQueueGenericSend>
 8103dc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8103dc2:	e008      	b.n	8103dd6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8103dc4:	4b06      	ldr	r3, [pc, #24]	@ (8103de0 <xTimerGenericCommand+0x98>)
 8103dc6:	6818      	ldr	r0, [r3, #0]
 8103dc8:	f107 0110 	add.w	r1, r7, #16
 8103dcc:	2300      	movs	r3, #0
 8103dce:	683a      	ldr	r2, [r7, #0]
 8103dd0:	f7fe fd48 	bl	8102864 <xQueueGenericSendFromISR>
 8103dd4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8103dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8103dd8:	4618      	mov	r0, r3
 8103dda:	3728      	adds	r7, #40	@ 0x28
 8103ddc:	46bd      	mov	sp, r7
 8103dde:	bd80      	pop	{r7, pc}
 8103de0:	100049c0 	.word	0x100049c0

08103de4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8103de4:	b580      	push	{r7, lr}
 8103de6:	b088      	sub	sp, #32
 8103de8:	af02      	add	r7, sp, #8
 8103dea:	6078      	str	r0, [r7, #4]
 8103dec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103dee:	4b23      	ldr	r3, [pc, #140]	@ (8103e7c <prvProcessExpiredTimer+0x98>)
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	68db      	ldr	r3, [r3, #12]
 8103df4:	68db      	ldr	r3, [r3, #12]
 8103df6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103df8:	697b      	ldr	r3, [r7, #20]
 8103dfa:	3304      	adds	r3, #4
 8103dfc:	4618      	mov	r0, r3
 8103dfe:	f7fe f8a7 	bl	8101f50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8103e02:	697b      	ldr	r3, [r7, #20]
 8103e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103e08:	f003 0304 	and.w	r3, r3, #4
 8103e0c:	2b00      	cmp	r3, #0
 8103e0e:	d023      	beq.n	8103e58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8103e10:	697b      	ldr	r3, [r7, #20]
 8103e12:	699a      	ldr	r2, [r3, #24]
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	18d1      	adds	r1, r2, r3
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	683a      	ldr	r2, [r7, #0]
 8103e1c:	6978      	ldr	r0, [r7, #20]
 8103e1e:	f000 f8d5 	bl	8103fcc <prvInsertTimerInActiveList>
 8103e22:	4603      	mov	r3, r0
 8103e24:	2b00      	cmp	r3, #0
 8103e26:	d020      	beq.n	8103e6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8103e28:	2300      	movs	r3, #0
 8103e2a:	9300      	str	r3, [sp, #0]
 8103e2c:	2300      	movs	r3, #0
 8103e2e:	687a      	ldr	r2, [r7, #4]
 8103e30:	2100      	movs	r1, #0
 8103e32:	6978      	ldr	r0, [r7, #20]
 8103e34:	f7ff ff88 	bl	8103d48 <xTimerGenericCommand>
 8103e38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8103e3a:	693b      	ldr	r3, [r7, #16]
 8103e3c:	2b00      	cmp	r3, #0
 8103e3e:	d114      	bne.n	8103e6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8103e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103e44:	f383 8811 	msr	BASEPRI, r3
 8103e48:	f3bf 8f6f 	isb	sy
 8103e4c:	f3bf 8f4f 	dsb	sy
 8103e50:	60fb      	str	r3, [r7, #12]
}
 8103e52:	bf00      	nop
 8103e54:	bf00      	nop
 8103e56:	e7fd      	b.n	8103e54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8103e58:	697b      	ldr	r3, [r7, #20]
 8103e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103e5e:	f023 0301 	bic.w	r3, r3, #1
 8103e62:	b2da      	uxtb	r2, r3
 8103e64:	697b      	ldr	r3, [r7, #20]
 8103e66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103e6a:	697b      	ldr	r3, [r7, #20]
 8103e6c:	6a1b      	ldr	r3, [r3, #32]
 8103e6e:	6978      	ldr	r0, [r7, #20]
 8103e70:	4798      	blx	r3
}
 8103e72:	bf00      	nop
 8103e74:	3718      	adds	r7, #24
 8103e76:	46bd      	mov	sp, r7
 8103e78:	bd80      	pop	{r7, pc}
 8103e7a:	bf00      	nop
 8103e7c:	100049b8 	.word	0x100049b8

08103e80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8103e80:	b580      	push	{r7, lr}
 8103e82:	b084      	sub	sp, #16
 8103e84:	af00      	add	r7, sp, #0
 8103e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103e88:	f107 0308 	add.w	r3, r7, #8
 8103e8c:	4618      	mov	r0, r3
 8103e8e:	f000 f859 	bl	8103f44 <prvGetNextExpireTime>
 8103e92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8103e94:	68bb      	ldr	r3, [r7, #8]
 8103e96:	4619      	mov	r1, r3
 8103e98:	68f8      	ldr	r0, [r7, #12]
 8103e9a:	f000 f805 	bl	8103ea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8103e9e:	f000 f8d7 	bl	8104050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103ea2:	bf00      	nop
 8103ea4:	e7f0      	b.n	8103e88 <prvTimerTask+0x8>
	...

08103ea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8103ea8:	b580      	push	{r7, lr}
 8103eaa:	b084      	sub	sp, #16
 8103eac:	af00      	add	r7, sp, #0
 8103eae:	6078      	str	r0, [r7, #4]
 8103eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8103eb2:	f7ff fa29 	bl	8103308 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8103eb6:	f107 0308 	add.w	r3, r7, #8
 8103eba:	4618      	mov	r0, r3
 8103ebc:	f000 f866 	bl	8103f8c <prvSampleTimeNow>
 8103ec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8103ec2:	68bb      	ldr	r3, [r7, #8]
 8103ec4:	2b00      	cmp	r3, #0
 8103ec6:	d130      	bne.n	8103f2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8103ec8:	683b      	ldr	r3, [r7, #0]
 8103eca:	2b00      	cmp	r3, #0
 8103ecc:	d10a      	bne.n	8103ee4 <prvProcessTimerOrBlockTask+0x3c>
 8103ece:	687a      	ldr	r2, [r7, #4]
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	429a      	cmp	r2, r3
 8103ed4:	d806      	bhi.n	8103ee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8103ed6:	f7ff fa25 	bl	8103324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8103eda:	68f9      	ldr	r1, [r7, #12]
 8103edc:	6878      	ldr	r0, [r7, #4]
 8103ede:	f7ff ff81 	bl	8103de4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8103ee2:	e024      	b.n	8103f2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8103ee4:	683b      	ldr	r3, [r7, #0]
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d008      	beq.n	8103efc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8103eea:	4b13      	ldr	r3, [pc, #76]	@ (8103f38 <prvProcessTimerOrBlockTask+0x90>)
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	681b      	ldr	r3, [r3, #0]
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d101      	bne.n	8103ef8 <prvProcessTimerOrBlockTask+0x50>
 8103ef4:	2301      	movs	r3, #1
 8103ef6:	e000      	b.n	8103efa <prvProcessTimerOrBlockTask+0x52>
 8103ef8:	2300      	movs	r3, #0
 8103efa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8103efc:	4b0f      	ldr	r3, [pc, #60]	@ (8103f3c <prvProcessTimerOrBlockTask+0x94>)
 8103efe:	6818      	ldr	r0, [r3, #0]
 8103f00:	687a      	ldr	r2, [r7, #4]
 8103f02:	68fb      	ldr	r3, [r7, #12]
 8103f04:	1ad3      	subs	r3, r2, r3
 8103f06:	683a      	ldr	r2, [r7, #0]
 8103f08:	4619      	mov	r1, r3
 8103f0a:	f7fe ff65 	bl	8102dd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8103f0e:	f7ff fa09 	bl	8103324 <xTaskResumeAll>
 8103f12:	4603      	mov	r3, r0
 8103f14:	2b00      	cmp	r3, #0
 8103f16:	d10a      	bne.n	8103f2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8103f18:	4b09      	ldr	r3, [pc, #36]	@ (8103f40 <prvProcessTimerOrBlockTask+0x98>)
 8103f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8103f1e:	601a      	str	r2, [r3, #0]
 8103f20:	f3bf 8f4f 	dsb	sy
 8103f24:	f3bf 8f6f 	isb	sy
}
 8103f28:	e001      	b.n	8103f2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8103f2a:	f7ff f9fb 	bl	8103324 <xTaskResumeAll>
}
 8103f2e:	bf00      	nop
 8103f30:	3710      	adds	r7, #16
 8103f32:	46bd      	mov	sp, r7
 8103f34:	bd80      	pop	{r7, pc}
 8103f36:	bf00      	nop
 8103f38:	100049bc 	.word	0x100049bc
 8103f3c:	100049c0 	.word	0x100049c0
 8103f40:	e000ed04 	.word	0xe000ed04

08103f44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8103f44:	b480      	push	{r7}
 8103f46:	b085      	sub	sp, #20
 8103f48:	af00      	add	r7, sp, #0
 8103f4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8103f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8103f88 <prvGetNextExpireTime+0x44>)
 8103f4e:	681b      	ldr	r3, [r3, #0]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d101      	bne.n	8103f5a <prvGetNextExpireTime+0x16>
 8103f56:	2201      	movs	r2, #1
 8103f58:	e000      	b.n	8103f5c <prvGetNextExpireTime+0x18>
 8103f5a:	2200      	movs	r2, #0
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	681b      	ldr	r3, [r3, #0]
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d105      	bne.n	8103f74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8103f68:	4b07      	ldr	r3, [pc, #28]	@ (8103f88 <prvGetNextExpireTime+0x44>)
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	68db      	ldr	r3, [r3, #12]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	60fb      	str	r3, [r7, #12]
 8103f72:	e001      	b.n	8103f78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8103f74:	2300      	movs	r3, #0
 8103f76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8103f78:	68fb      	ldr	r3, [r7, #12]
}
 8103f7a:	4618      	mov	r0, r3
 8103f7c:	3714      	adds	r7, #20
 8103f7e:	46bd      	mov	sp, r7
 8103f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f84:	4770      	bx	lr
 8103f86:	bf00      	nop
 8103f88:	100049b8 	.word	0x100049b8

08103f8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8103f8c:	b580      	push	{r7, lr}
 8103f8e:	b084      	sub	sp, #16
 8103f90:	af00      	add	r7, sp, #0
 8103f92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8103f94:	f7ff fa64 	bl	8103460 <xTaskGetTickCount>
 8103f98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8103f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8103fc8 <prvSampleTimeNow+0x3c>)
 8103f9c:	681b      	ldr	r3, [r3, #0]
 8103f9e:	68fa      	ldr	r2, [r7, #12]
 8103fa0:	429a      	cmp	r2, r3
 8103fa2:	d205      	bcs.n	8103fb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8103fa4:	f000 f93a 	bl	810421c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	2201      	movs	r2, #1
 8103fac:	601a      	str	r2, [r3, #0]
 8103fae:	e002      	b.n	8103fb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	2200      	movs	r2, #0
 8103fb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8103fb6:	4a04      	ldr	r2, [pc, #16]	@ (8103fc8 <prvSampleTimeNow+0x3c>)
 8103fb8:	68fb      	ldr	r3, [r7, #12]
 8103fba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8103fbc:	68fb      	ldr	r3, [r7, #12]
}
 8103fbe:	4618      	mov	r0, r3
 8103fc0:	3710      	adds	r7, #16
 8103fc2:	46bd      	mov	sp, r7
 8103fc4:	bd80      	pop	{r7, pc}
 8103fc6:	bf00      	nop
 8103fc8:	100049c8 	.word	0x100049c8

08103fcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8103fcc:	b580      	push	{r7, lr}
 8103fce:	b086      	sub	sp, #24
 8103fd0:	af00      	add	r7, sp, #0
 8103fd2:	60f8      	str	r0, [r7, #12]
 8103fd4:	60b9      	str	r1, [r7, #8]
 8103fd6:	607a      	str	r2, [r7, #4]
 8103fd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8103fda:	2300      	movs	r3, #0
 8103fdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8103fde:	68fb      	ldr	r3, [r7, #12]
 8103fe0:	68ba      	ldr	r2, [r7, #8]
 8103fe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103fe4:	68fb      	ldr	r3, [r7, #12]
 8103fe6:	68fa      	ldr	r2, [r7, #12]
 8103fe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8103fea:	68ba      	ldr	r2, [r7, #8]
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	429a      	cmp	r2, r3
 8103ff0:	d812      	bhi.n	8104018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103ff2:	687a      	ldr	r2, [r7, #4]
 8103ff4:	683b      	ldr	r3, [r7, #0]
 8103ff6:	1ad2      	subs	r2, r2, r3
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	699b      	ldr	r3, [r3, #24]
 8103ffc:	429a      	cmp	r2, r3
 8103ffe:	d302      	bcc.n	8104006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8104000:	2301      	movs	r3, #1
 8104002:	617b      	str	r3, [r7, #20]
 8104004:	e01b      	b.n	810403e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8104006:	4b10      	ldr	r3, [pc, #64]	@ (8104048 <prvInsertTimerInActiveList+0x7c>)
 8104008:	681a      	ldr	r2, [r3, #0]
 810400a:	68fb      	ldr	r3, [r7, #12]
 810400c:	3304      	adds	r3, #4
 810400e:	4619      	mov	r1, r3
 8104010:	4610      	mov	r0, r2
 8104012:	f7fd ff64 	bl	8101ede <vListInsert>
 8104016:	e012      	b.n	810403e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8104018:	687a      	ldr	r2, [r7, #4]
 810401a:	683b      	ldr	r3, [r7, #0]
 810401c:	429a      	cmp	r2, r3
 810401e:	d206      	bcs.n	810402e <prvInsertTimerInActiveList+0x62>
 8104020:	68ba      	ldr	r2, [r7, #8]
 8104022:	683b      	ldr	r3, [r7, #0]
 8104024:	429a      	cmp	r2, r3
 8104026:	d302      	bcc.n	810402e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8104028:	2301      	movs	r3, #1
 810402a:	617b      	str	r3, [r7, #20]
 810402c:	e007      	b.n	810403e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810402e:	4b07      	ldr	r3, [pc, #28]	@ (810404c <prvInsertTimerInActiveList+0x80>)
 8104030:	681a      	ldr	r2, [r3, #0]
 8104032:	68fb      	ldr	r3, [r7, #12]
 8104034:	3304      	adds	r3, #4
 8104036:	4619      	mov	r1, r3
 8104038:	4610      	mov	r0, r2
 810403a:	f7fd ff50 	bl	8101ede <vListInsert>
		}
	}

	return xProcessTimerNow;
 810403e:	697b      	ldr	r3, [r7, #20]
}
 8104040:	4618      	mov	r0, r3
 8104042:	3718      	adds	r7, #24
 8104044:	46bd      	mov	sp, r7
 8104046:	bd80      	pop	{r7, pc}
 8104048:	100049bc 	.word	0x100049bc
 810404c:	100049b8 	.word	0x100049b8

08104050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8104050:	b580      	push	{r7, lr}
 8104052:	b08e      	sub	sp, #56	@ 0x38
 8104054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8104056:	e0ce      	b.n	81041f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	2b00      	cmp	r3, #0
 810405c:	da19      	bge.n	8104092 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810405e:	1d3b      	adds	r3, r7, #4
 8104060:	3304      	adds	r3, #4
 8104062:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8104064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104066:	2b00      	cmp	r3, #0
 8104068:	d10b      	bne.n	8104082 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810406a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810406e:	f383 8811 	msr	BASEPRI, r3
 8104072:	f3bf 8f6f 	isb	sy
 8104076:	f3bf 8f4f 	dsb	sy
 810407a:	61fb      	str	r3, [r7, #28]
}
 810407c:	bf00      	nop
 810407e:	bf00      	nop
 8104080:	e7fd      	b.n	810407e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8104082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104088:	6850      	ldr	r0, [r2, #4]
 810408a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810408c:	6892      	ldr	r2, [r2, #8]
 810408e:	4611      	mov	r1, r2
 8104090:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	2b00      	cmp	r3, #0
 8104096:	f2c0 80ae 	blt.w	81041f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810409a:	68fb      	ldr	r3, [r7, #12]
 810409c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81040a0:	695b      	ldr	r3, [r3, #20]
 81040a2:	2b00      	cmp	r3, #0
 81040a4:	d004      	beq.n	81040b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81040a8:	3304      	adds	r3, #4
 81040aa:	4618      	mov	r0, r3
 81040ac:	f7fd ff50 	bl	8101f50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81040b0:	463b      	mov	r3, r7
 81040b2:	4618      	mov	r0, r3
 81040b4:	f7ff ff6a 	bl	8103f8c <prvSampleTimeNow>
 81040b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	2b09      	cmp	r3, #9
 81040be:	f200 8097 	bhi.w	81041f0 <prvProcessReceivedCommands+0x1a0>
 81040c2:	a201      	add	r2, pc, #4	@ (adr r2, 81040c8 <prvProcessReceivedCommands+0x78>)
 81040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040c8:	081040f1 	.word	0x081040f1
 81040cc:	081040f1 	.word	0x081040f1
 81040d0:	081040f1 	.word	0x081040f1
 81040d4:	08104167 	.word	0x08104167
 81040d8:	0810417b 	.word	0x0810417b
 81040dc:	081041c7 	.word	0x081041c7
 81040e0:	081040f1 	.word	0x081040f1
 81040e4:	081040f1 	.word	0x081040f1
 81040e8:	08104167 	.word	0x08104167
 81040ec:	0810417b 	.word	0x0810417b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81040f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81040f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81040f6:	f043 0301 	orr.w	r3, r3, #1
 81040fa:	b2da      	uxtb	r2, r3
 81040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81040fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8104102:	68ba      	ldr	r2, [r7, #8]
 8104104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104106:	699b      	ldr	r3, [r3, #24]
 8104108:	18d1      	adds	r1, r2, r3
 810410a:	68bb      	ldr	r3, [r7, #8]
 810410c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810410e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8104110:	f7ff ff5c 	bl	8103fcc <prvInsertTimerInActiveList>
 8104114:	4603      	mov	r3, r0
 8104116:	2b00      	cmp	r3, #0
 8104118:	d06c      	beq.n	81041f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810411c:	6a1b      	ldr	r3, [r3, #32]
 810411e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8104120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8104122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104128:	f003 0304 	and.w	r3, r3, #4
 810412c:	2b00      	cmp	r3, #0
 810412e:	d061      	beq.n	81041f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8104130:	68ba      	ldr	r2, [r7, #8]
 8104132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104134:	699b      	ldr	r3, [r3, #24]
 8104136:	441a      	add	r2, r3
 8104138:	2300      	movs	r3, #0
 810413a:	9300      	str	r3, [sp, #0]
 810413c:	2300      	movs	r3, #0
 810413e:	2100      	movs	r1, #0
 8104140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8104142:	f7ff fe01 	bl	8103d48 <xTimerGenericCommand>
 8104146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8104148:	6a3b      	ldr	r3, [r7, #32]
 810414a:	2b00      	cmp	r3, #0
 810414c:	d152      	bne.n	81041f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104152:	f383 8811 	msr	BASEPRI, r3
 8104156:	f3bf 8f6f 	isb	sy
 810415a:	f3bf 8f4f 	dsb	sy
 810415e:	61bb      	str	r3, [r7, #24]
}
 8104160:	bf00      	nop
 8104162:	bf00      	nop
 8104164:	e7fd      	b.n	8104162 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8104166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810416c:	f023 0301 	bic.w	r3, r3, #1
 8104170:	b2da      	uxtb	r2, r3
 8104172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8104178:	e03d      	b.n	81041f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810417a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810417c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104180:	f043 0301 	orr.w	r3, r3, #1
 8104184:	b2da      	uxtb	r2, r3
 8104186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104188:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810418c:	68ba      	ldr	r2, [r7, #8]
 810418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104190:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8104192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104194:	699b      	ldr	r3, [r3, #24]
 8104196:	2b00      	cmp	r3, #0
 8104198:	d10b      	bne.n	81041b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810419a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810419e:	f383 8811 	msr	BASEPRI, r3
 81041a2:	f3bf 8f6f 	isb	sy
 81041a6:	f3bf 8f4f 	dsb	sy
 81041aa:	617b      	str	r3, [r7, #20]
}
 81041ac:	bf00      	nop
 81041ae:	bf00      	nop
 81041b0:	e7fd      	b.n	81041ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 81041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81041b4:	699a      	ldr	r2, [r3, #24]
 81041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81041b8:	18d1      	adds	r1, r2, r3
 81041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81041bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81041be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81041c0:	f7ff ff04 	bl	8103fcc <prvInsertTimerInActiveList>
					break;
 81041c4:	e017      	b.n	81041f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 81041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81041c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81041cc:	f003 0302 	and.w	r3, r3, #2
 81041d0:	2b00      	cmp	r3, #0
 81041d2:	d103      	bne.n	81041dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 81041d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81041d6:	f7fd fd11 	bl	8101bfc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81041da:	e00c      	b.n	81041f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81041de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81041e2:	f023 0301 	bic.w	r3, r3, #1
 81041e6:	b2da      	uxtb	r2, r3
 81041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81041ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81041ee:	e002      	b.n	81041f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 81041f0:	bf00      	nop
 81041f2:	e000      	b.n	81041f6 <prvProcessReceivedCommands+0x1a6>
					break;
 81041f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81041f6:	4b08      	ldr	r3, [pc, #32]	@ (8104218 <prvProcessReceivedCommands+0x1c8>)
 81041f8:	681b      	ldr	r3, [r3, #0]
 81041fa:	1d39      	adds	r1, r7, #4
 81041fc:	2200      	movs	r2, #0
 81041fe:	4618      	mov	r0, r3
 8104200:	f7fe fbce 	bl	81029a0 <xQueueReceive>
 8104204:	4603      	mov	r3, r0
 8104206:	2b00      	cmp	r3, #0
 8104208:	f47f af26 	bne.w	8104058 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810420c:	bf00      	nop
 810420e:	bf00      	nop
 8104210:	3730      	adds	r7, #48	@ 0x30
 8104212:	46bd      	mov	sp, r7
 8104214:	bd80      	pop	{r7, pc}
 8104216:	bf00      	nop
 8104218:	100049c0 	.word	0x100049c0

0810421c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810421c:	b580      	push	{r7, lr}
 810421e:	b088      	sub	sp, #32
 8104220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8104222:	e049      	b.n	81042b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8104224:	4b2e      	ldr	r3, [pc, #184]	@ (81042e0 <prvSwitchTimerLists+0xc4>)
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	68db      	ldr	r3, [r3, #12]
 810422a:	681b      	ldr	r3, [r3, #0]
 810422c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810422e:	4b2c      	ldr	r3, [pc, #176]	@ (81042e0 <prvSwitchTimerLists+0xc4>)
 8104230:	681b      	ldr	r3, [r3, #0]
 8104232:	68db      	ldr	r3, [r3, #12]
 8104234:	68db      	ldr	r3, [r3, #12]
 8104236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8104238:	68fb      	ldr	r3, [r7, #12]
 810423a:	3304      	adds	r3, #4
 810423c:	4618      	mov	r0, r3
 810423e:	f7fd fe87 	bl	8101f50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	6a1b      	ldr	r3, [r3, #32]
 8104246:	68f8      	ldr	r0, [r7, #12]
 8104248:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810424a:	68fb      	ldr	r3, [r7, #12]
 810424c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104250:	f003 0304 	and.w	r3, r3, #4
 8104254:	2b00      	cmp	r3, #0
 8104256:	d02f      	beq.n	81042b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8104258:	68fb      	ldr	r3, [r7, #12]
 810425a:	699b      	ldr	r3, [r3, #24]
 810425c:	693a      	ldr	r2, [r7, #16]
 810425e:	4413      	add	r3, r2
 8104260:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8104262:	68ba      	ldr	r2, [r7, #8]
 8104264:	693b      	ldr	r3, [r7, #16]
 8104266:	429a      	cmp	r2, r3
 8104268:	d90e      	bls.n	8104288 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810426a:	68fb      	ldr	r3, [r7, #12]
 810426c:	68ba      	ldr	r2, [r7, #8]
 810426e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8104270:	68fb      	ldr	r3, [r7, #12]
 8104272:	68fa      	ldr	r2, [r7, #12]
 8104274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8104276:	4b1a      	ldr	r3, [pc, #104]	@ (81042e0 <prvSwitchTimerLists+0xc4>)
 8104278:	681a      	ldr	r2, [r3, #0]
 810427a:	68fb      	ldr	r3, [r7, #12]
 810427c:	3304      	adds	r3, #4
 810427e:	4619      	mov	r1, r3
 8104280:	4610      	mov	r0, r2
 8104282:	f7fd fe2c 	bl	8101ede <vListInsert>
 8104286:	e017      	b.n	81042b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8104288:	2300      	movs	r3, #0
 810428a:	9300      	str	r3, [sp, #0]
 810428c:	2300      	movs	r3, #0
 810428e:	693a      	ldr	r2, [r7, #16]
 8104290:	2100      	movs	r1, #0
 8104292:	68f8      	ldr	r0, [r7, #12]
 8104294:	f7ff fd58 	bl	8103d48 <xTimerGenericCommand>
 8104298:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	2b00      	cmp	r3, #0
 810429e:	d10b      	bne.n	81042b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 81042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81042a4:	f383 8811 	msr	BASEPRI, r3
 81042a8:	f3bf 8f6f 	isb	sy
 81042ac:	f3bf 8f4f 	dsb	sy
 81042b0:	603b      	str	r3, [r7, #0]
}
 81042b2:	bf00      	nop
 81042b4:	bf00      	nop
 81042b6:	e7fd      	b.n	81042b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81042b8:	4b09      	ldr	r3, [pc, #36]	@ (81042e0 <prvSwitchTimerLists+0xc4>)
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	2b00      	cmp	r3, #0
 81042c0:	d1b0      	bne.n	8104224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 81042c2:	4b07      	ldr	r3, [pc, #28]	@ (81042e0 <prvSwitchTimerLists+0xc4>)
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 81042c8:	4b06      	ldr	r3, [pc, #24]	@ (81042e4 <prvSwitchTimerLists+0xc8>)
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	4a04      	ldr	r2, [pc, #16]	@ (81042e0 <prvSwitchTimerLists+0xc4>)
 81042ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 81042d0:	4a04      	ldr	r2, [pc, #16]	@ (81042e4 <prvSwitchTimerLists+0xc8>)
 81042d2:	697b      	ldr	r3, [r7, #20]
 81042d4:	6013      	str	r3, [r2, #0]
}
 81042d6:	bf00      	nop
 81042d8:	3718      	adds	r7, #24
 81042da:	46bd      	mov	sp, r7
 81042dc:	bd80      	pop	{r7, pc}
 81042de:	bf00      	nop
 81042e0:	100049b8 	.word	0x100049b8
 81042e4:	100049bc 	.word	0x100049bc

081042e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 81042e8:	b580      	push	{r7, lr}
 81042ea:	b082      	sub	sp, #8
 81042ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81042ee:	f7fd ff8b 	bl	8102208 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81042f2:	4b15      	ldr	r3, [pc, #84]	@ (8104348 <prvCheckForValidListAndQueue+0x60>)
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	2b00      	cmp	r3, #0
 81042f8:	d120      	bne.n	810433c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81042fa:	4814      	ldr	r0, [pc, #80]	@ (810434c <prvCheckForValidListAndQueue+0x64>)
 81042fc:	f7fd fd9e 	bl	8101e3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8104300:	4813      	ldr	r0, [pc, #76]	@ (8104350 <prvCheckForValidListAndQueue+0x68>)
 8104302:	f7fd fd9b 	bl	8101e3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8104306:	4b13      	ldr	r3, [pc, #76]	@ (8104354 <prvCheckForValidListAndQueue+0x6c>)
 8104308:	4a10      	ldr	r2, [pc, #64]	@ (810434c <prvCheckForValidListAndQueue+0x64>)
 810430a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810430c:	4b12      	ldr	r3, [pc, #72]	@ (8104358 <prvCheckForValidListAndQueue+0x70>)
 810430e:	4a10      	ldr	r2, [pc, #64]	@ (8104350 <prvCheckForValidListAndQueue+0x68>)
 8104310:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8104312:	2300      	movs	r3, #0
 8104314:	9300      	str	r3, [sp, #0]
 8104316:	4b11      	ldr	r3, [pc, #68]	@ (810435c <prvCheckForValidListAndQueue+0x74>)
 8104318:	4a11      	ldr	r2, [pc, #68]	@ (8104360 <prvCheckForValidListAndQueue+0x78>)
 810431a:	2110      	movs	r1, #16
 810431c:	200a      	movs	r0, #10
 810431e:	f7fe f8ff 	bl	8102520 <xQueueGenericCreateStatic>
 8104322:	4603      	mov	r3, r0
 8104324:	4a08      	ldr	r2, [pc, #32]	@ (8104348 <prvCheckForValidListAndQueue+0x60>)
 8104326:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8104328:	4b07      	ldr	r3, [pc, #28]	@ (8104348 <prvCheckForValidListAndQueue+0x60>)
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	2b00      	cmp	r3, #0
 810432e:	d005      	beq.n	810433c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8104330:	4b05      	ldr	r3, [pc, #20]	@ (8104348 <prvCheckForValidListAndQueue+0x60>)
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	490b      	ldr	r1, [pc, #44]	@ (8104364 <prvCheckForValidListAndQueue+0x7c>)
 8104336:	4618      	mov	r0, r3
 8104338:	f7fe fd24 	bl	8102d84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810433c:	f7fd ff96 	bl	810226c <vPortExitCritical>
}
 8104340:	bf00      	nop
 8104342:	46bd      	mov	sp, r7
 8104344:	bd80      	pop	{r7, pc}
 8104346:	bf00      	nop
 8104348:	100049c0 	.word	0x100049c0
 810434c:	10004990 	.word	0x10004990
 8104350:	100049a4 	.word	0x100049a4
 8104354:	100049b8 	.word	0x100049b8
 8104358:	100049bc 	.word	0x100049bc
 810435c:	10004a6c 	.word	0x10004a6c
 8104360:	100049cc 	.word	0x100049cc
 8104364:	0810456c 	.word	0x0810456c

08104368 <memset>:
 8104368:	4402      	add	r2, r0
 810436a:	4603      	mov	r3, r0
 810436c:	4293      	cmp	r3, r2
 810436e:	d100      	bne.n	8104372 <memset+0xa>
 8104370:	4770      	bx	lr
 8104372:	f803 1b01 	strb.w	r1, [r3], #1
 8104376:	e7f9      	b.n	810436c <memset+0x4>

08104378 <_reclaim_reent>:
 8104378:	4b29      	ldr	r3, [pc, #164]	@ (8104420 <_reclaim_reent+0xa8>)
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	4283      	cmp	r3, r0
 810437e:	b570      	push	{r4, r5, r6, lr}
 8104380:	4604      	mov	r4, r0
 8104382:	d04b      	beq.n	810441c <_reclaim_reent+0xa4>
 8104384:	69c3      	ldr	r3, [r0, #28]
 8104386:	b1ab      	cbz	r3, 81043b4 <_reclaim_reent+0x3c>
 8104388:	68db      	ldr	r3, [r3, #12]
 810438a:	b16b      	cbz	r3, 81043a8 <_reclaim_reent+0x30>
 810438c:	2500      	movs	r5, #0
 810438e:	69e3      	ldr	r3, [r4, #28]
 8104390:	68db      	ldr	r3, [r3, #12]
 8104392:	5959      	ldr	r1, [r3, r5]
 8104394:	2900      	cmp	r1, #0
 8104396:	d13b      	bne.n	8104410 <_reclaim_reent+0x98>
 8104398:	3504      	adds	r5, #4
 810439a:	2d80      	cmp	r5, #128	@ 0x80
 810439c:	d1f7      	bne.n	810438e <_reclaim_reent+0x16>
 810439e:	69e3      	ldr	r3, [r4, #28]
 81043a0:	4620      	mov	r0, r4
 81043a2:	68d9      	ldr	r1, [r3, #12]
 81043a4:	f000 f872 	bl	810448c <_free_r>
 81043a8:	69e3      	ldr	r3, [r4, #28]
 81043aa:	6819      	ldr	r1, [r3, #0]
 81043ac:	b111      	cbz	r1, 81043b4 <_reclaim_reent+0x3c>
 81043ae:	4620      	mov	r0, r4
 81043b0:	f000 f86c 	bl	810448c <_free_r>
 81043b4:	6961      	ldr	r1, [r4, #20]
 81043b6:	b111      	cbz	r1, 81043be <_reclaim_reent+0x46>
 81043b8:	4620      	mov	r0, r4
 81043ba:	f000 f867 	bl	810448c <_free_r>
 81043be:	69e1      	ldr	r1, [r4, #28]
 81043c0:	b111      	cbz	r1, 81043c8 <_reclaim_reent+0x50>
 81043c2:	4620      	mov	r0, r4
 81043c4:	f000 f862 	bl	810448c <_free_r>
 81043c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 81043ca:	b111      	cbz	r1, 81043d2 <_reclaim_reent+0x5a>
 81043cc:	4620      	mov	r0, r4
 81043ce:	f000 f85d 	bl	810448c <_free_r>
 81043d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81043d4:	b111      	cbz	r1, 81043dc <_reclaim_reent+0x64>
 81043d6:	4620      	mov	r0, r4
 81043d8:	f000 f858 	bl	810448c <_free_r>
 81043dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 81043de:	b111      	cbz	r1, 81043e6 <_reclaim_reent+0x6e>
 81043e0:	4620      	mov	r0, r4
 81043e2:	f000 f853 	bl	810448c <_free_r>
 81043e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 81043e8:	b111      	cbz	r1, 81043f0 <_reclaim_reent+0x78>
 81043ea:	4620      	mov	r0, r4
 81043ec:	f000 f84e 	bl	810448c <_free_r>
 81043f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 81043f2:	b111      	cbz	r1, 81043fa <_reclaim_reent+0x82>
 81043f4:	4620      	mov	r0, r4
 81043f6:	f000 f849 	bl	810448c <_free_r>
 81043fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 81043fc:	b111      	cbz	r1, 8104404 <_reclaim_reent+0x8c>
 81043fe:	4620      	mov	r0, r4
 8104400:	f000 f844 	bl	810448c <_free_r>
 8104404:	6a23      	ldr	r3, [r4, #32]
 8104406:	b14b      	cbz	r3, 810441c <_reclaim_reent+0xa4>
 8104408:	4620      	mov	r0, r4
 810440a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810440e:	4718      	bx	r3
 8104410:	680e      	ldr	r6, [r1, #0]
 8104412:	4620      	mov	r0, r4
 8104414:	f000 f83a 	bl	810448c <_free_r>
 8104418:	4631      	mov	r1, r6
 810441a:	e7bb      	b.n	8104394 <_reclaim_reent+0x1c>
 810441c:	bd70      	pop	{r4, r5, r6, pc}
 810441e:	bf00      	nop
 8104420:	10000014 	.word	0x10000014

08104424 <__libc_init_array>:
 8104424:	b570      	push	{r4, r5, r6, lr}
 8104426:	4d0d      	ldr	r5, [pc, #52]	@ (810445c <__libc_init_array+0x38>)
 8104428:	4c0d      	ldr	r4, [pc, #52]	@ (8104460 <__libc_init_array+0x3c>)
 810442a:	1b64      	subs	r4, r4, r5
 810442c:	10a4      	asrs	r4, r4, #2
 810442e:	2600      	movs	r6, #0
 8104430:	42a6      	cmp	r6, r4
 8104432:	d109      	bne.n	8104448 <__libc_init_array+0x24>
 8104434:	4d0b      	ldr	r5, [pc, #44]	@ (8104464 <__libc_init_array+0x40>)
 8104436:	4c0c      	ldr	r4, [pc, #48]	@ (8104468 <__libc_init_array+0x44>)
 8104438:	f000 f87e 	bl	8104538 <_init>
 810443c:	1b64      	subs	r4, r4, r5
 810443e:	10a4      	asrs	r4, r4, #2
 8104440:	2600      	movs	r6, #0
 8104442:	42a6      	cmp	r6, r4
 8104444:	d105      	bne.n	8104452 <__libc_init_array+0x2e>
 8104446:	bd70      	pop	{r4, r5, r6, pc}
 8104448:	f855 3b04 	ldr.w	r3, [r5], #4
 810444c:	4798      	blx	r3
 810444e:	3601      	adds	r6, #1
 8104450:	e7ee      	b.n	8104430 <__libc_init_array+0xc>
 8104452:	f855 3b04 	ldr.w	r3, [r5], #4
 8104456:	4798      	blx	r3
 8104458:	3601      	adds	r6, #1
 810445a:	e7f2      	b.n	8104442 <__libc_init_array+0x1e>
 810445c:	081045a8 	.word	0x081045a8
 8104460:	081045a8 	.word	0x081045a8
 8104464:	081045a8 	.word	0x081045a8
 8104468:	081045ac 	.word	0x081045ac

0810446c <__retarget_lock_acquire_recursive>:
 810446c:	4770      	bx	lr

0810446e <__retarget_lock_release_recursive>:
 810446e:	4770      	bx	lr

08104470 <memcpy>:
 8104470:	440a      	add	r2, r1
 8104472:	4291      	cmp	r1, r2
 8104474:	f100 33ff 	add.w	r3, r0, #4294967295
 8104478:	d100      	bne.n	810447c <memcpy+0xc>
 810447a:	4770      	bx	lr
 810447c:	b510      	push	{r4, lr}
 810447e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8104486:	4291      	cmp	r1, r2
 8104488:	d1f9      	bne.n	810447e <memcpy+0xe>
 810448a:	bd10      	pop	{r4, pc}

0810448c <_free_r>:
 810448c:	b538      	push	{r3, r4, r5, lr}
 810448e:	4605      	mov	r5, r0
 8104490:	2900      	cmp	r1, #0
 8104492:	d041      	beq.n	8104518 <_free_r+0x8c>
 8104494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8104498:	1f0c      	subs	r4, r1, #4
 810449a:	2b00      	cmp	r3, #0
 810449c:	bfb8      	it	lt
 810449e:	18e4      	addlt	r4, r4, r3
 81044a0:	f000 f83e 	bl	8104520 <__malloc_lock>
 81044a4:	4a1d      	ldr	r2, [pc, #116]	@ (810451c <_free_r+0x90>)
 81044a6:	6813      	ldr	r3, [r2, #0]
 81044a8:	b933      	cbnz	r3, 81044b8 <_free_r+0x2c>
 81044aa:	6063      	str	r3, [r4, #4]
 81044ac:	6014      	str	r4, [r2, #0]
 81044ae:	4628      	mov	r0, r5
 81044b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81044b4:	f000 b83a 	b.w	810452c <__malloc_unlock>
 81044b8:	42a3      	cmp	r3, r4
 81044ba:	d908      	bls.n	81044ce <_free_r+0x42>
 81044bc:	6820      	ldr	r0, [r4, #0]
 81044be:	1821      	adds	r1, r4, r0
 81044c0:	428b      	cmp	r3, r1
 81044c2:	bf01      	itttt	eq
 81044c4:	6819      	ldreq	r1, [r3, #0]
 81044c6:	685b      	ldreq	r3, [r3, #4]
 81044c8:	1809      	addeq	r1, r1, r0
 81044ca:	6021      	streq	r1, [r4, #0]
 81044cc:	e7ed      	b.n	81044aa <_free_r+0x1e>
 81044ce:	461a      	mov	r2, r3
 81044d0:	685b      	ldr	r3, [r3, #4]
 81044d2:	b10b      	cbz	r3, 81044d8 <_free_r+0x4c>
 81044d4:	42a3      	cmp	r3, r4
 81044d6:	d9fa      	bls.n	81044ce <_free_r+0x42>
 81044d8:	6811      	ldr	r1, [r2, #0]
 81044da:	1850      	adds	r0, r2, r1
 81044dc:	42a0      	cmp	r0, r4
 81044de:	d10b      	bne.n	81044f8 <_free_r+0x6c>
 81044e0:	6820      	ldr	r0, [r4, #0]
 81044e2:	4401      	add	r1, r0
 81044e4:	1850      	adds	r0, r2, r1
 81044e6:	4283      	cmp	r3, r0
 81044e8:	6011      	str	r1, [r2, #0]
 81044ea:	d1e0      	bne.n	81044ae <_free_r+0x22>
 81044ec:	6818      	ldr	r0, [r3, #0]
 81044ee:	685b      	ldr	r3, [r3, #4]
 81044f0:	6053      	str	r3, [r2, #4]
 81044f2:	4408      	add	r0, r1
 81044f4:	6010      	str	r0, [r2, #0]
 81044f6:	e7da      	b.n	81044ae <_free_r+0x22>
 81044f8:	d902      	bls.n	8104500 <_free_r+0x74>
 81044fa:	230c      	movs	r3, #12
 81044fc:	602b      	str	r3, [r5, #0]
 81044fe:	e7d6      	b.n	81044ae <_free_r+0x22>
 8104500:	6820      	ldr	r0, [r4, #0]
 8104502:	1821      	adds	r1, r4, r0
 8104504:	428b      	cmp	r3, r1
 8104506:	bf04      	itt	eq
 8104508:	6819      	ldreq	r1, [r3, #0]
 810450a:	685b      	ldreq	r3, [r3, #4]
 810450c:	6063      	str	r3, [r4, #4]
 810450e:	bf04      	itt	eq
 8104510:	1809      	addeq	r1, r1, r0
 8104512:	6021      	streq	r1, [r4, #0]
 8104514:	6054      	str	r4, [r2, #4]
 8104516:	e7ca      	b.n	81044ae <_free_r+0x22>
 8104518:	bd38      	pop	{r3, r4, r5, pc}
 810451a:	bf00      	nop
 810451c:	10004bf8 	.word	0x10004bf8

08104520 <__malloc_lock>:
 8104520:	4801      	ldr	r0, [pc, #4]	@ (8104528 <__malloc_lock+0x8>)
 8104522:	f7ff bfa3 	b.w	810446c <__retarget_lock_acquire_recursive>
 8104526:	bf00      	nop
 8104528:	10004bf4 	.word	0x10004bf4

0810452c <__malloc_unlock>:
 810452c:	4801      	ldr	r0, [pc, #4]	@ (8104534 <__malloc_unlock+0x8>)
 810452e:	f7ff bf9e 	b.w	810446e <__retarget_lock_release_recursive>
 8104532:	bf00      	nop
 8104534:	10004bf4 	.word	0x10004bf4

08104538 <_init>:
 8104538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810453a:	bf00      	nop
 810453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810453e:	bc08      	pop	{r3}
 8104540:	469e      	mov	lr, r3
 8104542:	4770      	bx	lr

08104544 <_fini>:
 8104544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104546:	bf00      	nop
 8104548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810454a:	bc08      	pop	{r3}
 810454c:	469e      	mov	lr, r3
 810454e:	4770      	bx	lr
