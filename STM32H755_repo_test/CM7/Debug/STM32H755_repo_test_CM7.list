
STM32H755_repo_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad94  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800b038  0800b038  0000c038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b460  0800b460  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b460  0800b460  0000c460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b468  0800b468  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b468  0800b468  0000c468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b46c  0800b46c  0000c46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  24000000  0800b470  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c3c  240001dc  0800b64c  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004e18  0800b64c  0000de18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000218bf  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f2f  00000000  00000000  0002eac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  000329f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013c2  00000000  00000000  00034370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ceeb  00000000  00000000  00035732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f41e  00000000  00000000  0007261d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001936e1  00000000  00000000  00091a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022511c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a0c  00000000  00000000  00225160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  0022cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b01c 	.word	0x0800b01c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800b01c 	.word	0x0800b01c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b28      	ldr	r3, [pc, #160]	@ (800085c <main+0xb0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 fa13 	bl	8000c00 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fc21 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f845 	bl	800086c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <main+0xb0>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <main+0xb0>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <main+0xb0>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 ff39 	bl	8001678 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f000 ff4f 	bl	80016ac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <main+0xb0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 f9e5 	bl	8000c00 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f8df 	bl	80009f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083a:	f000 f891 	bl	8000960 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800083e:	f005 f9e5 	bl	8005c0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000842:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <main+0xb4>)
 8000844:	2100      	movs	r1, #0
 8000846:	4807      	ldr	r0, [pc, #28]	@ (8000864 <main+0xb8>)
 8000848:	f005 fa2a 	bl	8005ca0 <osThreadNew>
 800084c:	4603      	mov	r3, r0
 800084e:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <main+0xbc>)
 8000850:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000852:	f005 f9ff 	bl	8005c54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000856:	bf00      	nop
 8000858:	e7fd      	b.n	8000856 <main+0xaa>
 800085a:	bf00      	nop
 800085c:	58024400 	.word	0x58024400
 8000860:	0800b0a0 	.word	0x0800b0a0
 8000864:	08000bad 	.word	0x08000bad
 8000868:	2400028c 	.word	0x2400028c

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b09c      	sub	sp, #112	@ 0x70
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	224c      	movs	r2, #76	@ 0x4c
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f008 fcc3 	bl	8009206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2220      	movs	r2, #32
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f008 fcbd 	bl	8009206 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800088c:	2004      	movs	r0, #4
 800088e:	f000 ff21 	bl	80016d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b30      	ldr	r3, [pc, #192]	@ (8000958 <SystemClock_Config+0xec>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a2f      	ldr	r2, [pc, #188]	@ (8000958 <SystemClock_Config+0xec>)
 800089c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <SystemClock_Config+0xec>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <SystemClock_Config+0xf0>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b0:	4a2a      	ldr	r2, [pc, #168]	@ (800095c <SystemClock_Config+0xf0>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008b8:	4b28      	ldr	r3, [pc, #160]	@ (800095c <SystemClock_Config+0xf0>)
 80008ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c4:	bf00      	nop
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <SystemClock_Config+0xec>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008d2:	d1f8      	bne.n	80008c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008ea:	23f0      	movs	r3, #240	@ 0xf0
 80008ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008f2:	2305      	movs	r3, #5
 80008f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008fa:	2308      	movs	r3, #8
 80008fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff3c 	bl	8001788 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000916:	f000 f973 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	233f      	movs	r3, #63	@ 0x3f
 800091c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2303      	movs	r3, #3
 8000920:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000926:	2308      	movs	r3, #8
 8000928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092a:	2340      	movs	r3, #64	@ 0x40
 800092c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000938:	2340      	movs	r3, #64	@ 0x40
 800093a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fb7b 	bl	800203c <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800094c:	f000 f958 	bl	8000c00 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	@ 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58024800 	.word	0x58024800
 800095c:	58000400 	.word	0x58000400

08000960 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	@ (80009f4 <MX_USART3_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a8:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009aa:	f004 f80f 	bl	80049cc <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 f924 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009bc:	f005 f817 	bl	80059ee <HAL_UARTEx_SetTxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009c6:	f000 f91b 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f005 f84c 	bl	8005a6a <HAL_UARTEx_SetRxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 f912 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009de:	f004 ffcd 	bl	800597c <HAL_UARTEx_DisableFifoMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 f90a 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	240001f8 	.word	0x240001f8
 80009f4:	40004800 	.word	0x40004800

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b62      	ldr	r3, [pc, #392]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	4a60      	ldr	r2, [pc, #384]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	4a59      	ldr	r2, [pc, #356]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3c:	4b56      	ldr	r3, [pc, #344]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b53      	ldr	r3, [pc, #332]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	4a51      	ldr	r2, [pc, #324]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a68:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a78:	4b47      	ldr	r3, [pc, #284]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a86:	4b44      	ldr	r3, [pc, #272]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	4a42      	ldr	r2, [pc, #264]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a96:	4b40      	ldr	r3, [pc, #256]	@ (8000b98 <MX_GPIO_Init+0x1a0>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000aaa:	483c      	ldr	r0, [pc, #240]	@ (8000b9c <MX_GPIO_Init+0x1a4>)
 8000aac:	f000 fdb0 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4836      	ldr	r0, [pc, #216]	@ (8000ba0 <MX_GPIO_Init+0x1a8>)
 8000ac6:	f000 fbf3 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000aca:	2332      	movs	r3, #50	@ 0x32
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ada:	230b      	movs	r3, #11
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482e      	ldr	r0, [pc, #184]	@ (8000ba0 <MX_GPIO_Init+0x1a8>)
 8000ae6:	f000 fbe3 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000aea:	2386      	movs	r3, #134	@ 0x86
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afa:	230b      	movs	r3, #11
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4827      	ldr	r0, [pc, #156]	@ (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000b06:	f000 fbd3 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b0a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	481e      	ldr	r0, [pc, #120]	@ (8000b9c <MX_GPIO_Init+0x1a4>)
 8000b24:	f000 fbc4 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3a:	230b      	movs	r3, #11
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4815      	ldr	r0, [pc, #84]	@ (8000b9c <MX_GPIO_Init+0x1a4>)
 8000b46:	f000 fbb3 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b4a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	480f      	ldr	r0, [pc, #60]	@ (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000b68:	f000 fba2 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b6c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7e:	230b      	movs	r3, #11
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <MX_GPIO_Init+0x1b0>)
 8000b8a:	f000 fb91 	bl	80012b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	58020400 	.word	0x58020400
 8000ba0:	58020800 	.word	0x58020800
 8000ba4:	58020000 	.word	0x58020000
 8000ba8:	58021800 	.word	0x58021800

08000bac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char* teamName = (char*) argument;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin );
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <StartDefaultTask+0x28>)
 8000bbc:	f000 fd41 	bl	8001642 <HAL_GPIO_TogglePin>
	printf("Hello FreeRTOS STM32H7 World from Team %s!! :D\n\r", teamName);
 8000bc0:	68f9      	ldr	r1, [r7, #12]
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <StartDefaultTask+0x2c>)
 8000bc4:	f008 faca 	bl	800915c <iprintf>
    osDelay(1000);
 8000bc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bcc:	f005 f8fa 	bl	8005dc4 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin );
 8000bd0:	bf00      	nop
 8000bd2:	e7f1      	b.n	8000bb8 <StartDefaultTask+0xc>
 8000bd4:	58020400 	.word	0x58020400
 8000bd8:	0800b044 	.word	0x0800b044

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bee:	f000 fa53 	bl	8001098 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40001400 	.word	0x40001400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <HAL_MspInit+0x38>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c18:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_MspInit+0x38>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_MspInit+0x38>)
 8000c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	210f      	movs	r1, #15
 8000c34:	f06f 0001 	mvn.w	r0, #1
 8000c38:	f000 fb12 	bl	8001260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58024400 	.word	0x58024400

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	22c0      	movs	r2, #192	@ 0xc0
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 facc 	bl	8009206 <memset>
  if(huart->Instance==USART3)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a27      	ldr	r2, [pc, #156]	@ (8000d10 <HAL_UART_MspInit+0xc8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d146      	bne.n	8000d06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c78:	f04f 0202 	mov.w	r2, #2
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fda2 	bl	80027d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c9a:	f7ff ffb1 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <HAL_UART_MspInit+0xcc>)
 8000ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <HAL_UART_MspInit+0xcc>)
 8000ca6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000caa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_UART_MspInit+0xcc>)
 8000cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0xcc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc2:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <HAL_UART_MspInit+0xcc>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_UART_MspInit+0xcc>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_UART_MspInit+0xd0>)
 8000d02:	f000 fad5 	bl	80012b0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	37e8      	adds	r7, #232	@ 0xe8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40004800 	.word	0x40004800
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020c00 	.word	0x58020c00

08000d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b090      	sub	sp, #64	@ 0x40
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d827      	bhi.n	8000d7a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	2037      	movs	r0, #55	@ 0x37
 8000d30:	f000 fa96 	bl	8001260 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d34:	2037      	movs	r0, #55	@ 0x37
 8000d36:	f000 faad 	bl	8001294 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d3a:	4a29      	ldr	r2, [pc, #164]	@ (8000de0 <HAL_InitTick+0xc4>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d40:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <HAL_InitTick+0xc8>)
 8000d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d46:	4a27      	ldr	r2, [pc, #156]	@ (8000de4 <HAL_InitTick+0xc8>)
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d50:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <HAL_InitTick+0xc8>)
 8000d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d5e:	f107 0210 	add.w	r2, r7, #16
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fcf3 	bl	8002754 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d70:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d106      	bne.n	8000d86 <HAL_InitTick+0x6a>
 8000d78:	e001      	b.n	8000d7e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e02b      	b.n	8000dd6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d7e:	f001 fcbd 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8000d82:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d84:	e004      	b.n	8000d90 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d86:	f001 fcb9 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d92:	4a15      	ldr	r2, [pc, #84]	@ (8000de8 <HAL_InitTick+0xcc>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0c9b      	lsrs	r3, r3, #18
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_InitTick+0xd0>)
 8000da0:	4a13      	ldr	r2, [pc, #76]	@ (8000df0 <HAL_InitTick+0xd4>)
 8000da2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_InitTick+0xd0>)
 8000da6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000daa:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000dac:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <HAL_InitTick+0xd0>)
 8000dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_InitTick+0xd0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_InitTick+0xd0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000dbe:	480b      	ldr	r0, [pc, #44]	@ (8000dec <HAL_InitTick+0xd0>)
 8000dc0:	f003 fb36 	bl	8004430 <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d104      	bne.n	8000dd4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000dca:	4808      	ldr	r0, [pc, #32]	@ (8000dec <HAL_InitTick+0xd0>)
 8000dcc:	f003 fb92 	bl	80044f4 <HAL_TIM_Base_Start_IT>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	e000      	b.n	8000dd6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3740      	adds	r7, #64	@ 0x40
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	24000008 	.word	0x24000008
 8000de4:	58024400 	.word	0x58024400
 8000de8:	431bde83 	.word	0x431bde83
 8000dec:	24000290 	.word	0x24000290
 8000df0:	40001400 	.word	0x40001400

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <TIM7_IRQHandler+0x10>)
 8000e32:	f003 fbd7 	bl	80045e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000290 	.word	0x24000290

08000e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return 1;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_kill>:

int _kill(int pid, int sig)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e5a:	f008 fa7d 	bl	8009358 <__errno>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2216      	movs	r2, #22
 8000e62:	601a      	str	r2, [r3, #0]
  return -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_exit>:

void _exit (int status)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffe7 	bl	8000e50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e82:	bf00      	nop
 8000e84:	e7fd      	b.n	8000e82 <_exit+0x12>

08000e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e00a      	b.n	8000eae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e98:	f3af 8000 	nop.w
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	60ba      	str	r2, [r7, #8]
 8000ea4:	b2ca      	uxtb	r2, r1
 8000ea6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dbf0      	blt.n	8000e98 <_read+0x12>
  }

  return len;
 8000eb6:	687b      	ldr	r3, [r7, #4]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e009      	b.n	8000ee6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf1      	blt.n	8000ed2 <_write+0x12>
  }
  return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_close>:

int _close(int file)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f20:	605a      	str	r2, [r3, #4]
  return 0;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_isatty>:

int _isatty(int file)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f008 f9e2 	bl	8009358 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	24080000 	.word	0x24080000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	240002dc 	.word	0x240002dc
 8000fc8:	24004e18 	.word	0x24004e18

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd0:	f7ff fb56 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f008 f9b3 	bl	8009364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fbd5 	bl	80007ac <main>
  bx  lr
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001008:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800100c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001010:	0800b470 	.word	0x0800b470
  ldr r2, =_sbss
 8001014:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001018:	24004e18 	.word	0x24004e18

0800101c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC3_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f90f 	bl	800124a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800102c:	f001 f9bc 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8001030:	4602      	mov	r2, r0
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	4913      	ldr	r1, [pc, #76]	@ (800108c <HAL_Init+0x6c>)
 800103e:	5ccb      	ldrb	r3, [r1, r3]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_Init+0x68>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <HAL_Init+0x6c>)
 8001054:	5cd3      	ldrb	r3, [r2, r3]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <HAL_Init+0x70>)
 8001062:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_Init+0x74>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	200f      	movs	r0, #15
 800106c:	f7ff fe56 	bl	8000d1c <HAL_InitTick>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e002      	b.n	8001080 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800107a:	f7ff fdc7 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	0800b090 	.word	0x0800b090
 8001090:	24000004 	.word	0x24000004
 8001094:	24000000 	.word	0x24000000

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2400000c 	.word	0x2400000c
 80010bc:	240002e0 	.word	0x240002e0

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	240002e0 	.word	0x240002e0

080010d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetREVID+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0c1b      	lsrs	r3, r3, #16
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	5c001000 	.word	0x5c001000

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <__NVIC_SetPriorityGrouping+0x40>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	4313      	orrs	r3, r2
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x40>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	05fa0000 	.word	0x05fa0000

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff4c 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126e:	f7ff ff63 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001272:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff ffb3 	bl	80011e4 <NVIC_EncodePriority>
 800127e:	4602      	mov	r2, r0
 8001280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff82 	bl	8001190 <__NVIC_SetPriority>
}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff56 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012be:	4b89      	ldr	r3, [pc, #548]	@ (80014e4 <HAL_GPIO_Init+0x234>)
 80012c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012c2:	e194      	b.n	80015ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8186 	beq.w	80015e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d005      	beq.n	80012f4 <HAL_GPIO_Init+0x44>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d130      	bne.n	8001356 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800132a:	2201      	movs	r2, #1
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	f003 0201 	and.w	r2, r3, #1
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b03      	cmp	r3, #3
 8001360:	d017      	beq.n	8001392 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d123      	bne.n	80013e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	69b9      	ldr	r1, [r7, #24]
 80013e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0203 	and.w	r2, r3, #3
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80e0 	beq.w	80015e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001428:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <HAL_GPIO_Init+0x238>)
 800142a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800142e:	4a2e      	ldr	r2, [pc, #184]	@ (80014e8 <HAL_GPIO_Init+0x238>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_GPIO_Init+0x238>)
 800143a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001446:	4a29      	ldr	r2, [pc, #164]	@ (80014ec <HAL_GPIO_Init+0x23c>)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a20      	ldr	r2, [pc, #128]	@ (80014f0 <HAL_GPIO_Init+0x240>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d052      	beq.n	8001518 <HAL_GPIO_Init+0x268>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a1f      	ldr	r2, [pc, #124]	@ (80014f4 <HAL_GPIO_Init+0x244>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d031      	beq.n	80014de <HAL_GPIO_Init+0x22e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a1e      	ldr	r2, [pc, #120]	@ (80014f8 <HAL_GPIO_Init+0x248>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d02b      	beq.n	80014da <HAL_GPIO_Init+0x22a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a1d      	ldr	r2, [pc, #116]	@ (80014fc <HAL_GPIO_Init+0x24c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d025      	beq.n	80014d6 <HAL_GPIO_Init+0x226>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <HAL_GPIO_Init+0x250>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_GPIO_Init+0x222>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <HAL_GPIO_Init+0x254>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d019      	beq.n	80014ce <HAL_GPIO_Init+0x21e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a1a      	ldr	r2, [pc, #104]	@ (8001508 <HAL_GPIO_Init+0x258>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0x21a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_GPIO_Init+0x25c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_Init+0x216>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <HAL_GPIO_Init+0x260>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x212>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a17      	ldr	r2, [pc, #92]	@ (8001514 <HAL_GPIO_Init+0x264>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_GPIO_Init+0x20e>
 80014ba:	2309      	movs	r3, #9
 80014bc:	e02d      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014be:	230a      	movs	r3, #10
 80014c0:	e02b      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014c2:	2308      	movs	r3, #8
 80014c4:	e029      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014c6:	2307      	movs	r3, #7
 80014c8:	e027      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014ca:	2306      	movs	r3, #6
 80014cc:	e025      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e023      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e021      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e01f      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014da:	2302      	movs	r3, #2
 80014dc:	e01d      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014de:	2301      	movs	r3, #1
 80014e0:	e01b      	b.n	800151a <HAL_GPIO_Init+0x26a>
 80014e2:	bf00      	nop
 80014e4:	58000080 	.word	0x58000080
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58000400 	.word	0x58000400
 80014f0:	58020000 	.word	0x58020000
 80014f4:	58020400 	.word	0x58020400
 80014f8:	58020800 	.word	0x58020800
 80014fc:	58020c00 	.word	0x58020c00
 8001500:	58021000 	.word	0x58021000
 8001504:	58021400 	.word	0x58021400
 8001508:	58021800 	.word	0x58021800
 800150c:	58021c00 	.word	0x58021c00
 8001510:	58022000 	.word	0x58022000
 8001514:	58022400 	.word	0x58022400
 8001518:	2300      	movs	r3, #0
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	f002 0203 	and.w	r2, r2, #3
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	4093      	lsls	r3, r2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800152a:	4938      	ldr	r1, [pc, #224]	@ (800160c <HAL_GPIO_Init+0x35c>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800155e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800158c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	3301      	adds	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f47f ae63 	bne.w	80012c4 <HAL_GPIO_Init+0x14>
  }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3724      	adds	r7, #36	@ 0x24
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	58000400 	.word	0x58000400

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	041a      	lsls	r2, r3, #16
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43d9      	mvns	r1, r3
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	400b      	ands	r3, r1
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001680:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <HAL_HSEM_FastTake+0x2c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3320      	adds	r3, #32
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	4a07      	ldr	r2, [pc, #28]	@ (80016a8 <HAL_HSEM_FastTake+0x30>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	e000      	b.n	8001696 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	58026400 	.word	0x58026400
 80016a8:	80000300 	.word	0x80000300

080016ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016b6:	4906      	ldr	r1, [pc, #24]	@ (80016d0 <HAL_HSEM_Release+0x24>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	58026400 	.word	0x58026400

080016d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	d00a      	beq.n	80016fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016e8:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e040      	b.n	800177c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e03e      	b.n	800177c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001706:	491f      	ldr	r1, [pc, #124]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4313      	orrs	r3, r2
 800170c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800170e:	f7ff fcd7 	bl	80010c0 <HAL_GetTick>
 8001712:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001714:	e009      	b.n	800172a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001716:	f7ff fcd3 	bl	80010c0 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001724:	d901      	bls.n	800172a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e028      	b.n	800177c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001736:	d1ee      	bne.n	8001716 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b1e      	cmp	r3, #30
 800173c:	d008      	beq.n	8001750 <HAL_PWREx_ConfigSupply+0x7c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b2e      	cmp	r3, #46	@ 0x2e
 8001742:	d005      	beq.n	8001750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b1d      	cmp	r3, #29
 8001748:	d002      	beq.n	8001750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b2d      	cmp	r3, #45	@ 0x2d
 800174e:	d114      	bne.n	800177a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001750:	f7ff fcb6 	bl	80010c0 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001756:	e009      	b.n	800176c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001758:	f7ff fcb2 	bl	80010c0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001766:	d901      	bls.n	800176c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e007      	b.n	800177c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HAL_PWREx_ConfigSupply+0xb0>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001778:	d1ee      	bne.n	8001758 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58024800 	.word	0x58024800

08001788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	@ 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f000 bc48 	b.w	800202c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 8088 	beq.w	80018ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b99      	ldr	r3, [pc, #612]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017b4:	4b96      	ldr	r3, [pc, #600]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d007      	beq.n	80017d0 <HAL_RCC_OscConfig+0x48>
 80017c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c2:	2b18      	cmp	r3, #24
 80017c4:	d111      	bne.n	80017ea <HAL_RCC_OscConfig+0x62>
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d06d      	beq.n	80018b8 <HAL_RCC_OscConfig+0x130>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d169      	bne.n	80018b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f000 bc21 	b.w	800202c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x7a>
 80017f4:	4b86      	ldr	r3, [pc, #536]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a85      	ldr	r2, [pc, #532]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e02e      	b.n	8001860 <HAL_RCC_OscConfig+0xd8>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x9c>
 800180a:	4b81      	ldr	r3, [pc, #516]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a80      	ldr	r2, [pc, #512]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b7e      	ldr	r3, [pc, #504]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800181c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e01d      	b.n	8001860 <HAL_RCC_OscConfig+0xd8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0xc0>
 800182e:	4b78      	ldr	r3, [pc, #480]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a77      	ldr	r2, [pc, #476]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b75      	ldr	r3, [pc, #468]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a74      	ldr	r2, [pc, #464]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0xd8>
 8001848:	4b71      	ldr	r3, [pc, #452]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a70      	ldr	r2, [pc, #448]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b6e      	ldr	r3, [pc, #440]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6d      	ldr	r2, [pc, #436]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800185e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fc2a 	bl	80010c0 <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fc26 	bl	80010c0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e3d4      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001882:	4b63      	ldr	r3, [pc, #396]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0xe8>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fc16 	bl	80010c0 <HAL_GetTick>
 8001894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fc12 	bl	80010c0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e3c0      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018aa:	4b59      	ldr	r3, [pc, #356]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x110>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80ca 	beq.w	8001a5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c8:	4b51      	ldr	r3, [pc, #324]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_RCC_OscConfig+0x166>
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	d156      	bne.n	8001992 <HAL_RCC_OscConfig+0x20a>
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d151      	bne.n	8001992 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ee:	4b48      	ldr	r3, [pc, #288]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x17e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e392      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001906:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 0219 	bic.w	r2, r3, #25
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	493f      	ldr	r1, [pc, #252]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fbd2 	bl	80010c0 <HAL_GetTick>
 800191c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff fbce 	bl	80010c0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e37c      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001932:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	f7ff fbcb 	bl	80010d8 <HAL_GetREVID>
 8001942:	4603      	mov	r3, r0
 8001944:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001948:	4293      	cmp	r3, r2
 800194a:	d817      	bhi.n	800197c <HAL_RCC_OscConfig+0x1f4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b40      	cmp	r3, #64	@ 0x40
 8001952:	d108      	bne.n	8001966 <HAL_RCC_OscConfig+0x1de>
 8001954:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800195c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800195e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001962:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	e07a      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	031b      	lsls	r3, r3, #12
 8001974:	4926      	ldr	r1, [pc, #152]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197a:	e06f      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4921      	ldr	r1, [pc, #132]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	e064      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d047      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 0219 	bic.w	r2, r3, #25
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	491a      	ldr	r1, [pc, #104]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb88 	bl	80010c0 <HAL_GetTick>
 80019b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff fb84 	bl	80010c0 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e332      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	f7ff fb81 	bl	80010d8 <HAL_GetREVID>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019dc:	4293      	cmp	r3, r2
 80019de:	d819      	bhi.n	8001a14 <HAL_RCC_OscConfig+0x28c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b40      	cmp	r3, #64	@ 0x40
 80019e6:	d108      	bne.n	80019fa <HAL_RCC_OscConfig+0x272>
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80019f0:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f6:	6053      	str	r3, [r2, #4]
 80019f8:	e030      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	031b      	lsls	r3, r3, #12
 8001a08:	4901      	ldr	r1, [pc, #4]	@ (8001a10 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
 8001a0e:	e025      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
 8001a10:	58024400 	.word	0x58024400
 8001a14:	4b9a      	ldr	r3, [pc, #616]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4997      	ldr	r1, [pc, #604]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b95      	ldr	r3, [pc, #596]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a94      	ldr	r2, [pc, #592]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fb43 	bl	80010c0 <HAL_GetTick>
 8001a3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fb3f 	bl	80010c0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e2ed      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a50:	4b8b      	ldr	r3, [pc, #556]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80a9 	beq.w	8001bbc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4b85      	ldr	r3, [pc, #532]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a74:	4b82      	ldr	r3, [pc, #520]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d007      	beq.n	8001a90 <HAL_RCC_OscConfig+0x308>
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b18      	cmp	r3, #24
 8001a84:	d13a      	bne.n	8001afc <HAL_RCC_OscConfig+0x374>
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d135      	bne.n	8001afc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a90:	4b7b      	ldr	r3, [pc, #492]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x320>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b80      	cmp	r3, #128	@ 0x80
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e2c1      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aa8:	f7ff fb16 	bl	80010d8 <HAL_GetREVID>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d817      	bhi.n	8001ae6 <HAL_RCC_OscConfig+0x35e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d108      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x348>
 8001abe:	4b70      	ldr	r3, [pc, #448]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001acc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ace:	e075      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	069b      	lsls	r3, r3, #26
 8001ade:	4968      	ldr	r1, [pc, #416]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae4:	e06a      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae6:	4b66      	ldr	r3, [pc, #408]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	061b      	lsls	r3, r3, #24
 8001af4:	4962      	ldr	r1, [pc, #392]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001afa:	e05f      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d042      	beq.n	8001b8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b04:	4b5e      	ldr	r3, [pc, #376]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a5d      	ldr	r2, [pc, #372]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fad6 	bl	80010c0 <HAL_GetTick>
 8001b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b18:	f7ff fad2 	bl	80010c0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e280      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b2a:	4b55      	ldr	r3, [pc, #340]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b36:	f7ff facf 	bl	80010d8 <HAL_GetREVID>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d817      	bhi.n	8001b74 <HAL_RCC_OscConfig+0x3ec>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d108      	bne.n	8001b5e <HAL_RCC_OscConfig+0x3d6>
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b54:	4a4a      	ldr	r2, [pc, #296]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b5a:	6053      	str	r3, [r2, #4]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
 8001b5e:	4b48      	ldr	r3, [pc, #288]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	069b      	lsls	r3, r3, #26
 8001b6c:	4944      	ldr	r1, [pc, #272]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
 8001b72:	e023      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
 8001b74:	4b42      	ldr	r3, [pc, #264]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	493f      	ldr	r1, [pc, #252]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
 8001b88:	e018      	b.n	8001bbc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa93 	bl	80010c0 <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa8f 	bl	80010c0 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e23d      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bb0:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d036      	beq.n	8001c36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d019      	beq.n	8001c04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fa70 	bl	80010c0 <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fa6c 	bl	80010c0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e21a      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x45c>
 8001c02:	e018      	b.n	8001c36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff fa56 	bl	80010c0 <HAL_GetTick>
 8001c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c18:	f7ff fa52 	bl	80010c0 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e200      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d039      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fa33 	bl	80010c0 <HAL_GetTick>
 8001c5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5e:	f7ff fa2f 	bl	80010c0 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1dd      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4d6>
 8001c7c:	e01b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x52e>
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c84:	4b9b      	ldr	r3, [pc, #620]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a9a      	ldr	r2, [pc, #616]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001c8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c90:	f7ff fa16 	bl	80010c0 <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c98:	f7ff fa12 	bl	80010c0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1c0      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001caa:	4b92      	ldr	r3, [pc, #584]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8081 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ef8 <HAL_RCC_OscConfig+0x770>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a8b      	ldr	r2, [pc, #556]	@ (8001ef8 <HAL_RCC_OscConfig+0x770>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff f9f6 	bl	80010c0 <HAL_GetTick>
 8001cd4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7ff f9f2 	bl	80010c0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1a0      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cea:	4b83      	ldr	r3, [pc, #524]	@ (8001ef8 <HAL_RCC_OscConfig+0x770>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x584>
 8001cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	4a7c      	ldr	r2, [pc, #496]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0a:	e02d      	b.n	8001d68 <HAL_RCC_OscConfig+0x5e0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x5a6>
 8001d14:	4b77      	ldr	r3, [pc, #476]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a76      	ldr	r2, [pc, #472]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d20:	4b74      	ldr	r3, [pc, #464]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d24:	4a73      	ldr	r2, [pc, #460]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2c:	e01c      	b.n	8001d68 <HAL_RCC_OscConfig+0x5e0>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c8>
 8001d36:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d42:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d46:	4a6b      	ldr	r2, [pc, #428]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0x5e0>
 8001d50:	4b68      	ldr	r3, [pc, #416]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	4a67      	ldr	r2, [pc, #412]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5c:	4b65      	ldr	r3, [pc, #404]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d60:	4a64      	ldr	r2, [pc, #400]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff f9a6 	bl	80010c0 <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7ff f9a2 	bl	80010c0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e14e      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d8e:	4b59      	ldr	r3, [pc, #356]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0ee      	beq.n	8001d78 <HAL_RCC_OscConfig+0x5f0>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f990 	bl	80010c0 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7ff f98c 	bl	80010c0 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e138      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dba:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ee      	bne.n	8001da4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 812d 	beq.w	800202a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dd0:	4b48      	ldr	r3, [pc, #288]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dd8:	2b18      	cmp	r3, #24
 8001dda:	f000 80bd 	beq.w	8001f58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	f040 809e 	bne.w	8001f24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b42      	ldr	r3, [pc, #264]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a41      	ldr	r2, [pc, #260]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f964 	bl	80010c0 <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff f960 	bl	80010c0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e10e      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0e:	4b39      	ldr	r3, [pc, #228]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1a:	4b36      	ldr	r3, [pc, #216]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e1e:	4b37      	ldr	r3, [pc, #220]	@ (8001efc <HAL_RCC_OscConfig+0x774>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	4931      	ldr	r1, [pc, #196]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e42:	3b01      	subs	r3, #1
 8001e44:	025b      	lsls	r3, r3, #9
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e64:	4923      	ldr	r1, [pc, #140]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e82:	00d2      	lsls	r2, r2, #3
 8001e84:	491b      	ldr	r1, [pc, #108]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8e:	f023 020c 	bic.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	4917      	ldr	r1, [pc, #92]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	f023 0202 	bic.w	r2, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	4912      	ldr	r1, [pc, #72]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	4a07      	ldr	r2, [pc, #28]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f8e9 	bl	80010c0 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef0:	e011      	b.n	8001f16 <HAL_RCC_OscConfig+0x78e>
 8001ef2:	bf00      	nop
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58024800 	.word	0x58024800
 8001efc:	fffffc0c 	.word	0xfffffc0c
 8001f00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f8dc 	bl	80010c0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e08a      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f16:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x77c>
 8001f22:	e082      	b.n	800202a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b43      	ldr	r3, [pc, #268]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a42      	ldr	r2, [pc, #264]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f8c6 	bl	80010c0 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff f8c2 	bl	80010c0 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e070      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x7b0>
 8001f56:	e068      	b.n	800202a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f58:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f5e:	4b35      	ldr	r3, [pc, #212]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d031      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f003 0203 	and.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d12a      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d122      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d11a      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	0a5b      	lsrs	r3, r3, #9
 8001f9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d111      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d108      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0e1b      	lsrs	r3, r3, #24
 8001fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e02b      	b.n	800202c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d01f      	beq.n	800202a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff6:	f7ff f863 	bl	80010c0 <HAL_GetTick>
 8001ffa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ffc:	bf00      	nop
 8001ffe:	f7ff f85f 	bl	80010c0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	4293      	cmp	r3, r2
 8002008:	d0f9      	beq.n	8001ffe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 800200c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_RCC_OscConfig+0x8b0>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002016:	00d2      	lsls	r2, r2, #3
 8002018:	4906      	ldr	r1, [pc, #24]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 800201a:	4313      	orrs	r3, r2
 800201c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800201e:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8002020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002022:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_RCC_OscConfig+0x8ac>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3730      	adds	r7, #48	@ 0x30
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58024400 	.word	0x58024400
 8002038:	ffff0007 	.word	0xffff0007

0800203c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e19c      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b8a      	ldr	r3, [pc, #552]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b87      	ldr	r3, [pc, #540]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 020f 	bic.w	r2, r3, #15
 8002066:	4985      	ldr	r1, [pc, #532]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b83      	ldr	r3, [pc, #524]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e184      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d010      	beq.n	80020ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	4b7b      	ldr	r3, [pc, #492]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002098:	429a      	cmp	r2, r3
 800209a:	d908      	bls.n	80020ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800209c:	4b78      	ldr	r3, [pc, #480]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	4975      	ldr	r1, [pc, #468]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	4b70      	ldr	r3, [pc, #448]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d908      	bls.n	80020dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	496a      	ldr	r1, [pc, #424]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	4b64      	ldr	r3, [pc, #400]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d908      	bls.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020f8:	4b61      	ldr	r3, [pc, #388]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	495e      	ldr	r1, [pc, #376]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002106:	4313      	orrs	r3, r2
 8002108:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	4b59      	ldr	r3, [pc, #356]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002122:	429a      	cmp	r2, r3
 8002124:	d908      	bls.n	8002138 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002126:	4b56      	ldr	r3, [pc, #344]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4953      	ldr	r1, [pc, #332]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002134:	4313      	orrs	r3, r2
 8002136:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b4d      	ldr	r3, [pc, #308]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	429a      	cmp	r2, r3
 8002152:	d908      	bls.n	8002166 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f023 020f 	bic.w	r2, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4947      	ldr	r1, [pc, #284]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002162:	4313      	orrs	r3, r2
 8002164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d055      	beq.n	800221e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002172:	4b43      	ldr	r3, [pc, #268]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	4940      	ldr	r1, [pc, #256]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002180:	4313      	orrs	r3, r2
 8002182:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d107      	bne.n	800219c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800218c:	4b3c      	ldr	r3, [pc, #240]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d121      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0f6      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021a4:	4b36      	ldr	r3, [pc, #216]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d115      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0ea      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021bc:	4b30      	ldr	r3, [pc, #192]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0de      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0d6      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021dc:	4b28      	ldr	r3, [pc, #160]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f023 0207 	bic.w	r2, r3, #7
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4925      	ldr	r1, [pc, #148]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ee:	f7fe ff67 	bl	80010c0 <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f4:	e00a      	b.n	800220c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f6:	f7fe ff63 	bl	80010c0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0be      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	429a      	cmp	r2, r3
 800221c:	d1eb      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	429a      	cmp	r2, r3
 8002238:	d208      	bcs.n	800224c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223a:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f023 020f 	bic.w	r2, r3, #15
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	490e      	ldr	r1, [pc, #56]	@ (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002248:	4313      	orrs	r3, r2
 800224a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d214      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 020f 	bic.w	r2, r3, #15
 8002262:	4906      	ldr	r1, [pc, #24]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b04      	ldr	r3, [pc, #16]	@ (800227c <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e086      	b.n	800238a <HAL_RCC_ClockConfig+0x34e>
 800227c:	52002000 	.word	0x52002000
 8002280:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	4b3f      	ldr	r3, [pc, #252]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800229c:	429a      	cmp	r2, r3
 800229e:	d208      	bcs.n	80022b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	4939      	ldr	r1, [pc, #228]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d208      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022ce:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	492e      	ldr	r1, [pc, #184]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	4b28      	ldr	r3, [pc, #160]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d208      	bcs.n	800230e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022fc:	4b25      	ldr	r3, [pc, #148]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4922      	ldr	r1, [pc, #136]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 800230a:	4313      	orrs	r3, r2
 800230c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	d010      	beq.n	800233c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002326:	429a      	cmp	r2, r3
 8002328:	d208      	bcs.n	800233c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800232a:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4917      	ldr	r1, [pc, #92]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 8002338:	4313      	orrs	r3, r2
 800233a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800233c:	f000 f834 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	4912      	ldr	r1, [pc, #72]	@ (8002398 <HAL_RCC_ClockConfig+0x35c>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <HAL_RCC_ClockConfig+0x358>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_RCC_ClockConfig+0x360>)
 8002372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002374:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_RCC_ClockConfig+0x364>)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_ClockConfig+0x368>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fccc 	bl	8000d1c <HAL_InitTick>
 8002384:	4603      	mov	r3, r0
 8002386:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	58024400 	.word	0x58024400
 8002398:	0800b090 	.word	0x0800b090
 800239c:	24000004 	.word	0x24000004
 80023a0:	24000000 	.word	0x24000000
 80023a4:	24000008 	.word	0x24000008

080023a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ae:	4bb3      	ldr	r3, [pc, #716]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023b6:	2b18      	cmp	r3, #24
 80023b8:	f200 8155 	bhi.w	8002666 <HAL_RCC_GetSysClockFreq+0x2be>
 80023bc:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	08002429 	.word	0x08002429
 80023c8:	08002667 	.word	0x08002667
 80023cc:	08002667 	.word	0x08002667
 80023d0:	08002667 	.word	0x08002667
 80023d4:	08002667 	.word	0x08002667
 80023d8:	08002667 	.word	0x08002667
 80023dc:	08002667 	.word	0x08002667
 80023e0:	08002667 	.word	0x08002667
 80023e4:	0800244f 	.word	0x0800244f
 80023e8:	08002667 	.word	0x08002667
 80023ec:	08002667 	.word	0x08002667
 80023f0:	08002667 	.word	0x08002667
 80023f4:	08002667 	.word	0x08002667
 80023f8:	08002667 	.word	0x08002667
 80023fc:	08002667 	.word	0x08002667
 8002400:	08002667 	.word	0x08002667
 8002404:	08002455 	.word	0x08002455
 8002408:	08002667 	.word	0x08002667
 800240c:	08002667 	.word	0x08002667
 8002410:	08002667 	.word	0x08002667
 8002414:	08002667 	.word	0x08002667
 8002418:	08002667 	.word	0x08002667
 800241c:	08002667 	.word	0x08002667
 8002420:	08002667 	.word	0x08002667
 8002424:	0800245b 	.word	0x0800245b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002428:	4b94      	ldr	r3, [pc, #592]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002434:	4b91      	ldr	r3, [pc, #580]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	08db      	lsrs	r3, r3, #3
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	4a90      	ldr	r2, [pc, #576]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002446:	e111      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002448:	4b8d      	ldr	r3, [pc, #564]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800244a:	61bb      	str	r3, [r7, #24]
      break;
 800244c:	e10e      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800244e:	4b8d      	ldr	r3, [pc, #564]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002450:	61bb      	str	r3, [r7, #24]
      break;
 8002452:	e10b      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002454:	4b8c      	ldr	r3, [pc, #560]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002456:	61bb      	str	r3, [r7, #24]
      break;
 8002458:	e108      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800245a:	4b88      	ldr	r3, [pc, #544]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002464:	4b85      	ldr	r3, [pc, #532]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800246e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002470:	4b82      	ldr	r3, [pc, #520]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800247a:	4b80      	ldr	r3, [pc, #512]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002492:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80e1 	beq.w	8002660 <HAL_RCC_GetSysClockFreq+0x2b8>
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	f000 8083 	beq.w	80025ac <HAL_RCC_GetSysClockFreq+0x204>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	f200 80a1 	bhi.w	80025f0 <HAL_RCC_GetSysClockFreq+0x248>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x114>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d056      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024ba:	e099      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024bc:	4b6f      	ldr	r3, [pc, #444]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02d      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024c8:	4b6c      	ldr	r3, [pc, #432]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
 80024d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024f2:	4b62      	ldr	r3, [pc, #392]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002502:	ed97 6a02 	vldr	s12, [r7, #8]
 8002506:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 800250a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800250e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002522:	e087      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002690 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002536:	4b51      	ldr	r3, [pc, #324]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002546:	ed97 6a02 	vldr	s12, [r7, #8]
 800254a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 800254e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800255a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002566:	e065      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002572:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002694 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800257a:	4b40      	ldr	r3, [pc, #256]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800258a:	ed97 6a02 	vldr	s12, [r7, #8]
 800258e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800259a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800259e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025aa:	e043      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002698 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025be:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80025d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025ee:	e021      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002694 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002612:	ed97 6a02 	vldr	s12, [r7, #8]
 8002616:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800268c <HAL_RCC_GetSysClockFreq+0x2e4>
 800261a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800261e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002632:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	0a5b      	lsrs	r3, r3, #9
 800263a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800263e:	3301      	adds	r3, #1
 8002640:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800264c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002658:	ee17 3a90 	vmov	r3, s15
 800265c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
      break;
 8002664:	e002      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002668:	61bb      	str	r3, [r7, #24]
      break;
 800266a:	bf00      	nop
  }

  return sysclockfreq;
 800266c:	69bb      	ldr	r3, [r7, #24]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	58024400 	.word	0x58024400
 8002680:	03d09000 	.word	0x03d09000
 8002684:	003d0900 	.word	0x003d0900
 8002688:	007a1200 	.word	0x007a1200
 800268c:	46000000 	.word	0x46000000
 8002690:	4c742400 	.word	0x4c742400
 8002694:	4a742400 	.word	0x4a742400
 8002698:	4af42400 	.word	0x4af42400

0800269c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026a2:	f7ff fe81 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x50>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	490f      	ldr	r1, [pc, #60]	@ (80026f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x50>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	4a07      	ldr	r2, [pc, #28]	@ (80026f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80026d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026da:	4a07      	ldr	r2, [pc, #28]	@ (80026f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58024400 	.word	0x58024400
 80026f0:	0800b090 	.word	0x0800b090
 80026f4:	24000004 	.word	0x24000004
 80026f8:	24000000 	.word	0x24000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002700:	f7ff ffcc 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4904      	ldr	r1, [pc, #16]	@ (8002724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	0800b090 	.word	0x0800b090

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800272c:	f7ff ffb6 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4904      	ldr	r1, [pc, #16]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x28>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58024400 	.word	0x58024400
 8002750:	0800b090 	.word	0x0800b090

08002754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223f      	movs	r2, #63	@ 0x3f
 8002762:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002764:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <HAL_RCC_GetClockConfig+0x7c>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0207 	and.w	r2, r3, #7
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002770:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <HAL_RCC_GetClockConfig+0x7c>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800277c:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <HAL_RCC_GetClockConfig+0x7c>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <HAL_RCC_GetClockConfig+0x7c>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002794:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <HAL_RCC_GetClockConfig+0x7c>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_GetClockConfig+0x7c>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_RCC_GetClockConfig+0x7c>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_GetClockConfig+0x80>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 020f 	and.w	r2, r3, #15
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	601a      	str	r2, [r3, #0]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	58024400 	.word	0x58024400
 80027d4:	52002000 	.word	0x52002000

080027d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027dc:	b0ca      	sub	sp, #296	@ 0x128
 80027de:	af00      	add	r7, sp, #0
 80027e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80027fc:	2500      	movs	r5, #0
 80027fe:	ea54 0305 	orrs.w	r3, r4, r5
 8002802:	d049      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800280a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800280e:	d02f      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002810:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002814:	d828      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800281a:	d01a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800281c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002820:	d822      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800282a:	d007      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800282c:	e01c      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800282e:	4bb8      	ldr	r3, [pc, #736]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002832:	4ab7      	ldr	r2, [pc, #732]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800283a:	e01a      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800283c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002840:	3308      	adds	r3, #8
 8002842:	2102      	movs	r1, #2
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fc8f 	bl	8004168 <RCCEx_PLL2_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002850:	e00f      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002856:	3328      	adds	r3, #40	@ 0x28
 8002858:	2102      	movs	r1, #2
 800285a:	4618      	mov	r0, r3
 800285c:	f001 fd36 	bl	80042cc <RCCEx_PLL3_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002866:	e004      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800286e:	e000      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800287a:	4ba5      	ldr	r3, [pc, #660]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800287c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002888:	4aa1      	ldr	r2, [pc, #644]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800288a:	430b      	orrs	r3, r1
 800288c:	6513      	str	r3, [r2, #80]	@ 0x50
 800288e:	e003      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80028a4:	f04f 0900 	mov.w	r9, #0
 80028a8:	ea58 0309 	orrs.w	r3, r8, r9
 80028ac:	d047      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80028ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d82a      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80028b8:	a201      	add	r2, pc, #4	@ (adr r2, 80028c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028d5 	.word	0x080028d5
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028f9 	.word	0x080028f9
 80028cc:	08002917 	.word	0x08002917
 80028d0:	08002917 	.word	0x08002917
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	4a8d      	ldr	r2, [pc, #564]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028e0:	e01a      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e6:	3308      	adds	r3, #8
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fc3c 	bl	8004168 <RCCEx_PLL2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028f6:	e00f      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fc:	3328      	adds	r3, #40	@ 0x28
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fce3 	bl	80042cc <RCCEx_PLL3_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800290c:	e004      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002914:	e000      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002920:	4b7b      	ldr	r3, [pc, #492]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002924:	f023 0107 	bic.w	r1, r3, #7
 8002928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292e:	4a78      	ldr	r2, [pc, #480]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002930:	430b      	orrs	r3, r1
 8002932:	6513      	str	r3, [r2, #80]	@ 0x50
 8002934:	e003      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800293a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800293e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800294a:	f04f 0b00 	mov.w	fp, #0
 800294e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002952:	d04c      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800295e:	d030      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002964:	d829      	bhi.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002966:	2bc0      	cmp	r3, #192	@ 0xc0
 8002968:	d02d      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800296a:	2bc0      	cmp	r3, #192	@ 0xc0
 800296c:	d825      	bhi.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800296e:	2b80      	cmp	r3, #128	@ 0x80
 8002970:	d018      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002972:	2b80      	cmp	r3, #128	@ 0x80
 8002974:	d821      	bhi.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800297a:	2b40      	cmp	r3, #64	@ 0x40
 800297c:	d007      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800297e:	e01c      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002980:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	4a62      	ldr	r2, [pc, #392]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800298c:	e01c      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800298e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002992:	3308      	adds	r3, #8
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fbe6 	bl	8004168 <RCCEx_PLL2_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029a2:	e011      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a8:	3328      	adds	r3, #40	@ 0x28
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 fc8d 	bl	80042cc <RCCEx_PLL3_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029b8:	e006      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80029c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80029d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80029d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	4a4c      	ldr	r2, [pc, #304]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80029e4:	e003      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80029fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	d053      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a1a:	d035      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a20:	d82e      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a26:	d031      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a2c:	d828      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a32:	d01a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a38:	d822      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002a3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a42:	d007      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002a44:	e01c      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a46:	4b32      	ldr	r3, [pc, #200]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	4a31      	ldr	r2, [pc, #196]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a52:	e01c      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a58:	3308      	adds	r3, #8
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fb83 	bl	8004168 <RCCEx_PLL2_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a68:	e011      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6e:	3328      	adds	r3, #40	@ 0x28
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f001 fc2a 	bl	80042cc <RCCEx_PLL3_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a7e:	e006      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a96:	4b1e      	ldr	r3, [pc, #120]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aac:	e003      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002ac2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002acc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	d056      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ada:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ae2:	d038      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ae4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ae8:	d831      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002aea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002aee:	d034      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002af0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002af4:	d82b      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002af6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002afa:	d01d      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002afc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b00:	d825      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b0c:	e01f      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b0e:	bf00      	nop
 8002b10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b14:	4ba2      	ldr	r3, [pc, #648]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	4aa1      	ldr	r2, [pc, #644]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b20:	e01c      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b26:	3308      	adds	r3, #8
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 fb1c 	bl	8004168 <RCCEx_PLL2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b36:	e011      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3c:	3328      	adds	r3, #40	@ 0x28
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 fbc3 	bl	80042cc <RCCEx_PLL3_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b4c:	e006      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b54:	e002      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b64:	4b8e      	ldr	r3, [pc, #568]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b74:	4a8a      	ldr	r2, [pc, #552]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b76:	430b      	orrs	r3, r1
 8002b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7a:	e003      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002b90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002b9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	d03a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	2b30      	cmp	r3, #48	@ 0x30
 8002bac:	d01f      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002bae:	2b30      	cmp	r3, #48	@ 0x30
 8002bb0:	d819      	bhi.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d815      	bhi.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d019      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d111      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc2:	4b77      	ldr	r3, [pc, #476]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	4a76      	ldr	r2, [pc, #472]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002bce:	e011      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 fac5 	bl	8004168 <RCCEx_PLL2_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002be4:	e006      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bec:	e002      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bfc:	4b68      	ldr	r3, [pc, #416]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	4a65      	ldr	r2, [pc, #404]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c10:	e003      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4313      	orrs	r3, r2
 8002c38:	d051      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c44:	d035      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c4a:	d82e      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c50:	d031      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002c52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c56:	d828      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c5c:	d01a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c62:	d822      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6c:	d007      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002c6e:	e01c      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c70:	4b4b      	ldr	r3, [pc, #300]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	4a4a      	ldr	r2, [pc, #296]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c82:	3308      	adds	r3, #8
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 fa6e 	bl	8004168 <RCCEx_PLL2_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c92:	e011      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c98:	3328      	adds	r3, #40	@ 0x28
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 fb15 	bl	80042cc <RCCEx_PLL3_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ca8:	e006      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cc0:	4b37      	ldr	r3, [pc, #220]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cce:	4a34      	ldr	r2, [pc, #208]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cd4:	e003      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002cea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002cf4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	d056      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d08:	d033      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d0e:	d82c      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d14:	d02f      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d1a:	d826      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d20:	d02b      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d26:	d820      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d2c:	d012      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d32:	d81a      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d022      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3c:	d115      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d42:	3308      	adds	r3, #8
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 fa0e 	bl	8004168 <RCCEx_PLL2_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d52:	e015      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d58:	3328      	adds	r3, #40	@ 0x28
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 fab5 	bl	80042cc <RCCEx_PLL3_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d68:	e00a      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d70:	e006      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d72:	bf00      	nop
 8002d74:	e004      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d76:	bf00      	nop
 8002d78:	e002      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d7a:	bf00      	nop
 8002d7c:	e000      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d88:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d96:	4a02      	ldr	r2, [pc, #8]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d9e:	bf00      	nop
 8002da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	d055      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd8:	d033      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dde:	d82c      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de4:	d02f      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dea:	d826      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002dec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002df0:	d02b      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002df6:	d820      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dfc:	d012      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e02:	d81a      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d022      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e0c:	d115      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e12:	3308      	adds	r3, #8
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 f9a6 	bl	8004168 <RCCEx_PLL2_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e22:	e015      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e28:	3328      	adds	r3, #40	@ 0x28
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 fa4d 	bl	80042cc <RCCEx_PLL3_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e38:	e00a      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e40:	e006      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e42:	bf00      	nop
 8002e44:	e004      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e46:	bf00      	nop
 8002e48:	e002      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e4a:	bf00      	nop
 8002e4c:	e000      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e58:	4ba3      	ldr	r3, [pc, #652]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e68:	4a9f      	ldr	r2, [pc, #636]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002e84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d037      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ea8:	d816      	bhi.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002eae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eb2:	d111      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	4a8b      	ldr	r2, [pc, #556]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ec0:	e00f      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f94c 	bl	8004168 <RCCEx_PLL2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ed6:	e004      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ede:	e000      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eea:	4b7f      	ldr	r3, [pc, #508]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef8:	4a7b      	ldr	r2, [pc, #492]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002efa:	430b      	orrs	r3, r1
 8002efc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002efe:	e003      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f10:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4313      	orrs	r3, r2
 8002f26:	d039      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d81c      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f32:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f75 	.word	0x08002f75
 8002f3c:	08002f49 	.word	0x08002f49
 8002f40:	08002f57 	.word	0x08002f57
 8002f44:	08002f75 	.word	0x08002f75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f48:	4b67      	ldr	r3, [pc, #412]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	4a66      	ldr	r2, [pc, #408]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f54:	e00f      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 f902 	bl	8004168 <RCCEx_PLL2_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f6a:	e004      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f7e:	4b5a      	ldr	r3, [pc, #360]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f82:	f023 0103 	bic.w	r1, r3, #3
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f8c:	4a56      	ldr	r2, [pc, #344]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f92:	e003      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f000 809f 	beq.w	80030fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fca:	f7fe f879 	bl	80010c0 <HAL_GetTick>
 8002fce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd2:	e00b      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd4:	f7fe f874 	bl	80010c0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b64      	cmp	r3, #100	@ 0x64
 8002fe2:	d903      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fea:	e005      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fec:	4b3f      	ldr	r3, [pc, #252]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ed      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d179      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003000:	4b39      	ldr	r3, [pc, #228]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003002:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003008:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800300c:	4053      	eors	r3, r2
 800300e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d015      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003016:	4b34      	ldr	r3, [pc, #208]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800301e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003022:	4b31      	ldr	r3, [pc, #196]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	4a30      	ldr	r2, [pc, #192]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800302e:	4b2e      	ldr	r3, [pc, #184]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	4a2d      	ldr	r2, [pc, #180]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003038:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800303a:	4a2b      	ldr	r2, [pc, #172]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003040:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800304a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800304e:	d118      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f836 	bl	80010c0 <HAL_GetTick>
 8003054:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003058:	e00d      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe f831 	bl	80010c0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	f241 3388 	movw	r3, #5000	@ 0x1388
 800306a:	429a      	cmp	r2, r3
 800306c:	d903      	bls.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003074:	e005      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003076:	4b1c      	ldr	r3, [pc, #112]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0eb      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003086:	2b00      	cmp	r3, #0
 8003088:	d129      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800308a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800309a:	d10e      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800309c:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80030a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030ac:	091a      	lsrs	r2, r3, #4
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	4a0d      	ldr	r2, [pc, #52]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6113      	str	r3, [r2, #16]
 80030b8:	e005      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80030ba:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030c4:	6113      	str	r3, [r2, #16]
 80030c6:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d6:	4a04      	ldr	r2, [pc, #16]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d8:	430b      	orrs	r3, r1
 80030da:	6713      	str	r3, [r2, #112]	@ 0x70
 80030dc:	e00e      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80030e6:	e009      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80030e8:	58024400 	.word	0x58024400
 80030ec:	58024800 	.word	0x58024800
 80030f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	f002 0301 	and.w	r3, r2, #1
 8003108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800310c:	2300      	movs	r3, #0
 800310e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003112:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003116:	460b      	mov	r3, r1
 8003118:	4313      	orrs	r3, r2
 800311a:	f000 8089 	beq.w	8003230 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800311e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003124:	2b28      	cmp	r3, #40	@ 0x28
 8003126:	d86b      	bhi.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003128:	a201      	add	r2, pc, #4	@ (adr r2, 8003130 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003209 	.word	0x08003209
 8003134:	08003201 	.word	0x08003201
 8003138:	08003201 	.word	0x08003201
 800313c:	08003201 	.word	0x08003201
 8003140:	08003201 	.word	0x08003201
 8003144:	08003201 	.word	0x08003201
 8003148:	08003201 	.word	0x08003201
 800314c:	08003201 	.word	0x08003201
 8003150:	080031d5 	.word	0x080031d5
 8003154:	08003201 	.word	0x08003201
 8003158:	08003201 	.word	0x08003201
 800315c:	08003201 	.word	0x08003201
 8003160:	08003201 	.word	0x08003201
 8003164:	08003201 	.word	0x08003201
 8003168:	08003201 	.word	0x08003201
 800316c:	08003201 	.word	0x08003201
 8003170:	080031eb 	.word	0x080031eb
 8003174:	08003201 	.word	0x08003201
 8003178:	08003201 	.word	0x08003201
 800317c:	08003201 	.word	0x08003201
 8003180:	08003201 	.word	0x08003201
 8003184:	08003201 	.word	0x08003201
 8003188:	08003201 	.word	0x08003201
 800318c:	08003201 	.word	0x08003201
 8003190:	08003209 	.word	0x08003209
 8003194:	08003201 	.word	0x08003201
 8003198:	08003201 	.word	0x08003201
 800319c:	08003201 	.word	0x08003201
 80031a0:	08003201 	.word	0x08003201
 80031a4:	08003201 	.word	0x08003201
 80031a8:	08003201 	.word	0x08003201
 80031ac:	08003201 	.word	0x08003201
 80031b0:	08003209 	.word	0x08003209
 80031b4:	08003201 	.word	0x08003201
 80031b8:	08003201 	.word	0x08003201
 80031bc:	08003201 	.word	0x08003201
 80031c0:	08003201 	.word	0x08003201
 80031c4:	08003201 	.word	0x08003201
 80031c8:	08003201 	.word	0x08003201
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003209 	.word	0x08003209
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d8:	3308      	adds	r3, #8
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 ffc3 	bl	8004168 <RCCEx_PLL2_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80031e8:	e00f      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ee:	3328      	adds	r3, #40	@ 0x28
 80031f0:	2101      	movs	r1, #1
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 f86a 	bl	80042cc <RCCEx_PLL3_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80031fe:	e004      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003206:	e000      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800320a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003212:	4bbf      	ldr	r3, [pc, #764]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800321a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003220:	4abb      	ldr	r2, [pc, #748]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003222:	430b      	orrs	r3, r1
 8003224:	6553      	str	r3, [r2, #84]	@ 0x54
 8003226:	e003      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800322c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f002 0302 	and.w	r3, r2, #2
 800323c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003246:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800324a:	460b      	mov	r3, r1
 800324c:	4313      	orrs	r3, r2
 800324e:	d041      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003256:	2b05      	cmp	r3, #5
 8003258:	d824      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800325a:	a201      	add	r2, pc, #4	@ (adr r2, 8003260 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	080032ad 	.word	0x080032ad
 8003264:	08003279 	.word	0x08003279
 8003268:	0800328f 	.word	0x0800328f
 800326c:	080032ad 	.word	0x080032ad
 8003270:	080032ad 	.word	0x080032ad
 8003274:	080032ad 	.word	0x080032ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327c:	3308      	adds	r3, #8
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f000 ff71 	bl	8004168 <RCCEx_PLL2_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800328c:	e00f      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	3328      	adds	r3, #40	@ 0x28
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f818 	bl	80042cc <RCCEx_PLL3_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032a2:	e004      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032aa:	e000      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80032ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032b6:	4b96      	ldr	r3, [pc, #600]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f023 0107 	bic.w	r1, r3, #7
 80032be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032c4:	4a92      	ldr	r2, [pc, #584]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80032ca:	e003      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f002 0304 	and.w	r3, r2, #4
 80032e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d044      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d825      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003300:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	08003355 	.word	0x08003355
 800330c:	08003321 	.word	0x08003321
 8003310:	08003337 	.word	0x08003337
 8003314:	08003355 	.word	0x08003355
 8003318:	08003355 	.word	0x08003355
 800331c:	08003355 	.word	0x08003355
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003324:	3308      	adds	r3, #8
 8003326:	2101      	movs	r1, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f000 ff1d 	bl	8004168 <RCCEx_PLL2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003334:	e00f      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	3328      	adds	r3, #40	@ 0x28
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f000 ffc4 	bl	80042cc <RCCEx_PLL3_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800334a:	e004      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800335e:	4b6c      	ldr	r3, [pc, #432]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	f023 0107 	bic.w	r1, r3, #7
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800336e:	4a68      	ldr	r2, [pc, #416]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003370:	430b      	orrs	r3, r1
 8003372:	6593      	str	r3, [r2, #88]	@ 0x58
 8003374:	e003      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f002 0320 	and.w	r3, r2, #32
 800338a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003394:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003398:	460b      	mov	r3, r1
 800339a:	4313      	orrs	r3, r2
 800339c:	d055      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800339e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033aa:	d033      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80033ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033b0:	d82c      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b6:	d02f      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d826      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033c2:	d02b      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80033c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033c8:	d820      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ce:	d012      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80033d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033d4:	d81a      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d022      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80033da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033de:	d115      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e4:	3308      	adds	r3, #8
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 febd 	bl	8004168 <RCCEx_PLL2_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80033f4:	e015      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	3328      	adds	r3, #40	@ 0x28
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 ff64 	bl	80042cc <RCCEx_PLL3_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800340a:	e00a      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003412:	e006      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003414:	bf00      	nop
 8003416:	e004      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003418:	bf00      	nop
 800341a:	e002      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800341c:	bf00      	nop
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800342a:	4b39      	ldr	r3, [pc, #228]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	4a35      	ldr	r2, [pc, #212]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800343c:	430b      	orrs	r3, r1
 800343e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003460:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003464:	460b      	mov	r3, r1
 8003466:	4313      	orrs	r3, r2
 8003468:	d058      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003472:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003476:	d033      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003478:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800347c:	d82c      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d02f      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003488:	d826      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800348a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800348e:	d02b      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003490:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003494:	d820      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349a:	d012      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800349c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034a0:	d81a      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d022      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034aa:	d115      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	3308      	adds	r3, #8
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fe57 	bl	8004168 <RCCEx_PLL2_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034c0:	e015      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c6:	3328      	adds	r3, #40	@ 0x28
 80034c8:	2102      	movs	r1, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fefe 	bl	80042cc <RCCEx_PLL3_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034d6:	e00a      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034de:	e006      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034e0:	bf00      	nop
 80034e2:	e004      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10e      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003506:	4a02      	ldr	r2, [pc, #8]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003508:	430b      	orrs	r3, r1
 800350a:	6593      	str	r3, [r2, #88]	@ 0x58
 800350c:	e006      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800350e:	bf00      	nop
 8003510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003532:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003536:	460b      	mov	r3, r1
 8003538:	4313      	orrs	r3, r2
 800353a:	d055      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800353c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003540:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003544:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003548:	d033      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800354a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800354e:	d82c      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003554:	d02f      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003556:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800355a:	d826      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800355c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003560:	d02b      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003562:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003566:	d820      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800356c:	d012      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800356e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003572:	d81a      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357c:	d115      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	3308      	adds	r3, #8
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fdee 	bl	8004168 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003592:	e015      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003598:	3328      	adds	r3, #40	@ 0x28
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fe95 	bl	80042cc <RCCEx_PLL3_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035a8:	e00a      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b0:	e006      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035b2:	bf00      	nop
 80035b4:	e004      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035b6:	bf00      	nop
 80035b8:	e002      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035c8:	4ba1      	ldr	r3, [pc, #644]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035d8:	4a9d      	ldr	r2, [pc, #628]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035da:	430b      	orrs	r3, r1
 80035dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80035de:	e003      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	f002 0308 	and.w	r3, r2, #8
 80035f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003602:	460b      	mov	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	d01e      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003614:	d10c      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361a:	3328      	adds	r3, #40	@ 0x28
 800361c:	2102      	movs	r1, #2
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fe54 	bl	80042cc <RCCEx_PLL3_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003630:	4b87      	ldr	r3, [pc, #540]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003634:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003640:	4a83      	ldr	r2, [pc, #524]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003642:	430b      	orrs	r3, r1
 8003644:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f002 0310 	and.w	r3, r2, #16
 8003652:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800365c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d01e      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800366e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003672:	d10c      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	3328      	adds	r3, #40	@ 0x28
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fe25 	bl	80042cc <RCCEx_PLL3_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800368e:	4b70      	ldr	r3, [pc, #448]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003692:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800369e:	4a6c      	ldr	r2, [pc, #432]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80036b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d03e      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036d0:	d022      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80036d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036d6:	d81b      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d00b      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80036e2:	e015      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e8:	3308      	adds	r3, #8
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fd3b 	bl	8004168 <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80036f8:	e00f      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	3328      	adds	r3, #40	@ 0x28
 8003700:	2102      	movs	r1, #2
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fde2 	bl	80042cc <RCCEx_PLL3_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800370e:	e004      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003716:	e000      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003722:	4b4b      	ldr	r3, [pc, #300]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003726:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003732:	4a47      	ldr	r2, [pc, #284]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003734:	430b      	orrs	r3, r1
 8003736:	6593      	str	r3, [r2, #88]	@ 0x58
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800374e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003750:	2300      	movs	r3, #0
 8003752:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003754:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d03b      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800376a:	d01f      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800376c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003770:	d818      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003776:	d003      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800377c:	d007      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800377e:	e011      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4b33      	ldr	r3, [pc, #204]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	4a32      	ldr	r2, [pc, #200]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800378c:	e00f      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	3328      	adds	r3, #40	@ 0x28
 8003794:	2101      	movs	r1, #1
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fd98 	bl	80042cc <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80037a2:	e004      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80037ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037b6:	4b26      	ldr	r3, [pc, #152]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c6:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80037e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80037e4:	2300      	movs	r3, #0
 80037e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80037e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80037ec:	460b      	mov	r3, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	d034      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d007      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003804:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	4a11      	ldr	r2, [pc, #68]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003810:	e00e      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	3308      	adds	r3, #8
 8003818:	2102      	movs	r1, #2
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fca4 	bl	8004168 <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003826:	e003      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800382e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800383a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003846:	4a02      	ldr	r2, [pc, #8]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003848:	430b      	orrs	r3, r1
 800384a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800384e:	bf00      	nop
 8003850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800386a:	2300      	movs	r3, #0
 800386c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800386e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003872:	460b      	mov	r3, r1
 8003874:	4313      	orrs	r3, r2
 8003876:	d00c      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	3328      	adds	r3, #40	@ 0x28
 800387e:	2102      	movs	r1, #2
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fd23 	bl	80042cc <RCCEx_PLL3_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800389e:	663b      	str	r3, [r7, #96]	@ 0x60
 80038a0:	2300      	movs	r3, #0
 80038a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80038a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d038      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ba:	d018      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80038bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038c0:	d811      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80038c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c6:	d014      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038cc:	d80b      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d011      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80038d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d6:	d106      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d8:	4bc3      	ldr	r3, [pc, #780]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	4ac2      	ldr	r2, [pc, #776]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80038e4:	e008      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038ec:	e004      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80038ee:	bf00      	nop
 80038f0:	e002      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80038f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003900:	4bb9      	ldr	r3, [pc, #740]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003904:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003910:	4ab5      	ldr	r2, [pc, #724]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003912:	430b      	orrs	r3, r1
 8003914:	6553      	str	r3, [r2, #84]	@ 0x54
 8003916:	e003      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800392c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800392e:	2300      	movs	r3, #0
 8003930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003932:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800393c:	4baa      	ldr	r3, [pc, #680]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800393e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003940:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394a:	4aa7      	ldr	r2, [pc, #668]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394c:	430b      	orrs	r3, r1
 800394e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800395c:	653b      	str	r3, [r7, #80]	@ 0x50
 800395e:	2300      	movs	r3, #0
 8003960:	657b      	str	r3, [r7, #84]	@ 0x54
 8003962:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800396c:	4b9e      	ldr	r3, [pc, #632]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800397c:	4a9a      	ldr	r2, [pc, #616]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397e:	430b      	orrs	r3, r1
 8003980:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800398e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003990:	2300      	movs	r3, #0
 8003992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003994:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003998:	460b      	mov	r3, r1
 800399a:	4313      	orrs	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800399e:	4b92      	ldr	r3, [pc, #584]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ac:	4a8e      	ldr	r2, [pc, #568]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80039be:	643b      	str	r3, [r7, #64]	@ 0x40
 80039c0:	2300      	movs	r3, #0
 80039c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ce:	4b86      	ldr	r3, [pc, #536]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	4a85      	ldr	r2, [pc, #532]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80039d8:	6113      	str	r3, [r2, #16]
 80039da:	4b83      	ldr	r3, [pc, #524]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039dc:	6919      	ldr	r1, [r3, #16]
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80039e6:	4a80      	ldr	r2, [pc, #512]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80039f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039fa:	2300      	movs	r3, #0
 80039fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a02:	460b      	mov	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a08:	4b77      	ldr	r3, [pc, #476]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a16:	4a74      	ldr	r2, [pc, #464]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a38:	4b6b      	ldr	r3, [pc, #428]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a48:	4a67      	ldr	r2, [pc, #412]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	2100      	movs	r1, #0
 8003a58:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a60:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003a64:	460b      	mov	r3, r1
 8003a66:	4313      	orrs	r3, r2
 8003a68:	d011      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6e:	3308      	adds	r3, #8
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fb78 	bl	8004168 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	2100      	movs	r1, #0
 8003a98:	6239      	str	r1, [r7, #32]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	d011      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aae:	3308      	adds	r3, #8
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fb58 	bl	8004168 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	61b9      	str	r1, [r7, #24]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	d011      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2102      	movs	r1, #2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb38 	bl	8004168 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	2100      	movs	r1, #0
 8003b18:	6139      	str	r1, [r7, #16]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d011      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3328      	adds	r3, #40	@ 0x28
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fbca 	bl	80042cc <RCCEx_PLL3_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	2100      	movs	r1, #0
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b64:	460b      	mov	r3, r1
 8003b66:	4313      	orrs	r3, r2
 8003b68:	d011      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	3328      	adds	r3, #40	@ 0x28
 8003b70:	2101      	movs	r1, #1
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fbaa 	bl	80042cc <RCCEx_PLL3_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	2100      	movs	r1, #0
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d011      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	3328      	adds	r3, #40	@ 0x28
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fb8a 	bl	80042cc <RCCEx_PLL3_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003bce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003be2:	46bd      	mov	sp, r7
 8003be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be8:	58024400 	.word	0x58024400

08003bec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003bf0:	f7fe fd54 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4904      	ldr	r1, [pc, #16]	@ (8003c14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	58024400 	.word	0x58024400
 8003c14:	0800b090 	.word	0x0800b090

08003c18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	@ 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c20:	4ba1      	ldr	r3, [pc, #644]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c2a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	0b1b      	lsrs	r3, r3, #12
 8003c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c36:	4b9c      	ldr	r3, [pc, #624]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c42:	4b99      	ldr	r3, [pc, #612]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c46:	08db      	lsrs	r3, r3, #3
 8003c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8111 	beq.w	8003e88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	f000 8083 	beq.w	8003d74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	f200 80a1 	bhi.w	8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d056      	beq.n	8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c82:	e099      	b.n	8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c84:	4b88      	ldr	r3, [pc, #544]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02d      	beq.n	8003cec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c90:	4b85      	ldr	r3, [pc, #532]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	4a84      	ldr	r2, [pc, #528]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cba:	4b7b      	ldr	r3, [pc, #492]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003cea:	e087      	b.n	8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d2e:	e065      	b.n	8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d42:	4b59      	ldr	r3, [pc, #356]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d72:	e043      	b.n	8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b48      	ldr	r3, [pc, #288]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003db6:	e021      	b.n	8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	4b37      	ldr	r3, [pc, #220]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e00:	0a5b      	lsrs	r3, r3, #9
 8003e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e22:	ee17 2a90 	vmov	r2, s15
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	0c1b      	lsrs	r3, r3, #16
 8003e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e34:	ee07 3a90 	vmov	s15, r3
 8003e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e50:	ee17 2a90 	vmov	r2, s15
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003e58:	4b13      	ldr	r3, [pc, #76]	@ (8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5c:	0e1b      	lsrs	r3, r3, #24
 8003e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7e:	ee17 2a90 	vmov	r2, s15
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e86:	e008      	b.n	8003e9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
}
 8003e9a:	bf00      	nop
 8003e9c:	3724      	adds	r7, #36	@ 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	58024400 	.word	0x58024400
 8003eac:	03d09000 	.word	0x03d09000
 8003eb0:	46000000 	.word	0x46000000
 8003eb4:	4c742400 	.word	0x4c742400
 8003eb8:	4a742400 	.word	0x4a742400
 8003ebc:	4af42400 	.word	0x4af42400

08003ec0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	@ 0x24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ec8:	4ba1      	ldr	r3, [pc, #644]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003ed2:	4b9f      	ldr	r3, [pc, #636]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	0d1b      	lsrs	r3, r3, #20
 8003ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003edc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ede:	4b9c      	ldr	r3, [pc, #624]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003eea:	4b99      	ldr	r3, [pc, #612]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	08db      	lsrs	r3, r3, #3
 8003ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8111 	beq.w	8004130 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	f000 8083 	beq.w	800401c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	f200 80a1 	bhi.w	8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d056      	beq.n	8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f2a:	e099      	b.n	8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f2c:	4b88      	ldr	r3, [pc, #544]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02d      	beq.n	8003f94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f38:	4b85      	ldr	r3, [pc, #532]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	08db      	lsrs	r3, r3, #3
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	4a84      	ldr	r2, [pc, #528]	@ (8004154 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f62:	4b7b      	ldr	r3, [pc, #492]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f92:	e087      	b.n	80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800415c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fd6:	e065      	b.n	80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fea:	4b59      	ldr	r3, [pc, #356]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ffe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800400e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800401a:	e043      	b.n	80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004026:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800402a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402e:	4b48      	ldr	r3, [pc, #288]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004042:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800405e:	e021      	b.n	80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800406e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004072:	4b37      	ldr	r3, [pc, #220]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004082:	ed97 6a03 	vldr	s12, [r7, #12]
 8004086:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800408a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80040a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	0a5b      	lsrs	r3, r3, #9
 80040aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040be:	edd7 6a07 	vldr	s13, [r7, #28]
 80040c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ca:	ee17 2a90 	vmov	r2, s15
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80040d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	0c1b      	lsrs	r3, r3, #16
 80040d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80040f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f8:	ee17 2a90 	vmov	r2, s15
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004100:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	0e1b      	lsrs	r3, r3, #24
 8004106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800411a:	edd7 6a07 	vldr	s13, [r7, #28]
 800411e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004126:	ee17 2a90 	vmov	r2, s15
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800412e:	e008      	b.n	8004142 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
}
 8004142:	bf00      	nop
 8004144:	3724      	adds	r7, #36	@ 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	58024400 	.word	0x58024400
 8004154:	03d09000 	.word	0x03d09000
 8004158:	46000000 	.word	0x46000000
 800415c:	4c742400 	.word	0x4c742400
 8004160:	4a742400 	.word	0x4a742400
 8004164:	4af42400 	.word	0x4af42400

08004168 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004176:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b03      	cmp	r3, #3
 8004180:	d101      	bne.n	8004186 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e099      	b.n	80042ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004186:	4b4f      	ldr	r3, [pc, #316]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a4e      	ldr	r2, [pc, #312]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 800418c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004192:	f7fc ff95 	bl	80010c0 <HAL_GetTick>
 8004196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004198:	e008      	b.n	80041ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800419a:	f7fc ff91 	bl	80010c0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e086      	b.n	80042ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041ac:	4b45      	ldr	r3, [pc, #276]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041b8:	4b42      	ldr	r3, [pc, #264]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	031b      	lsls	r3, r3, #12
 80041c6:	493f      	ldr	r1, [pc, #252]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	3b01      	subs	r3, #1
 80041dc:	025b      	lsls	r3, r3, #9
 80041de:	b29b      	uxth	r3, r3
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041fc:	4931      	ldr	r1, [pc, #196]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004202:	4b30      	ldr	r3, [pc, #192]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	492d      	ldr	r1, [pc, #180]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004214:	4b2b      	ldr	r3, [pc, #172]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	f023 0220 	bic.w	r2, r3, #32
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	4928      	ldr	r1, [pc, #160]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004226:	4b27      	ldr	r3, [pc, #156]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	4a26      	ldr	r2, [pc, #152]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 800422c:	f023 0310 	bic.w	r3, r3, #16
 8004230:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004232:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004236:	4b24      	ldr	r3, [pc, #144]	@ (80042c8 <RCCEx_PLL2_Config+0x160>)
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	69d2      	ldr	r2, [r2, #28]
 800423e:	00d2      	lsls	r2, r2, #3
 8004240:	4920      	ldr	r1, [pc, #128]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004246:	4b1f      	ldr	r3, [pc, #124]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	4a1e      	ldr	r2, [pc, #120]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 800424c:	f043 0310 	orr.w	r3, r3, #16
 8004250:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004258:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	4a19      	ldr	r2, [pc, #100]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 800425e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004262:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004264:	e00f      	b.n	8004286 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d106      	bne.n	800427a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800426c:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	4a14      	ldr	r2, [pc, #80]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004276:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004278:	e005      	b.n	8004286 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800427a:	4b12      	ldr	r3, [pc, #72]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	4a11      	ldr	r2, [pc, #68]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004280:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004284:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004286:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a0e      	ldr	r2, [pc, #56]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 800428c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004292:	f7fc ff15 	bl	80010c0 <HAL_GetTick>
 8004296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004298:	e008      	b.n	80042ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800429a:	f7fc ff11 	bl	80010c0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e006      	b.n	80042ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	58024400 	.word	0x58024400
 80042c8:	ffff0007 	.word	0xffff0007

080042cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042da:	4b53      	ldr	r3, [pc, #332]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d101      	bne.n	80042ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e099      	b.n	800441e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80042f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f6:	f7fc fee3 	bl	80010c0 <HAL_GetTick>
 80042fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042fc:	e008      	b.n	8004310 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042fe:	f7fc fedf 	bl	80010c0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e086      	b.n	800441e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004310:	4b45      	ldr	r3, [pc, #276]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800431c:	4b42      	ldr	r3, [pc, #264]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	051b      	lsls	r3, r3, #20
 800432a:	493f      	ldr	r1, [pc, #252]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	3b01      	subs	r3, #1
 8004336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	3b01      	subs	r3, #1
 8004340:	025b      	lsls	r3, r3, #9
 8004342:	b29b      	uxth	r3, r3
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	3b01      	subs	r3, #1
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	3b01      	subs	r3, #1
 800435a:	061b      	lsls	r3, r3, #24
 800435c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004360:	4931      	ldr	r1, [pc, #196]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 8004362:	4313      	orrs	r3, r2
 8004364:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004366:	4b30      	ldr	r3, [pc, #192]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	492d      	ldr	r1, [pc, #180]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 8004374:	4313      	orrs	r3, r2
 8004376:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004378:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	4928      	ldr	r1, [pc, #160]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800438a:	4b27      	ldr	r3, [pc, #156]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 800438c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438e:	4a26      	ldr	r2, [pc, #152]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 8004390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004394:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004396:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 8004398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800439a:	4b24      	ldr	r3, [pc, #144]	@ (800442c <RCCEx_PLL3_Config+0x160>)
 800439c:	4013      	ands	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	69d2      	ldr	r2, [r2, #28]
 80043a2:	00d2      	lsls	r2, r2, #3
 80043a4:	4920      	ldr	r1, [pc, #128]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	4a19      	ldr	r2, [pc, #100]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043c8:	e00f      	b.n	80043ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d106      	bne.n	80043de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043d0:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043dc:	e005      	b.n	80043ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043de:	4b12      	ldr	r3, [pc, #72]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	4a11      	ldr	r2, [pc, #68]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 80043f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f6:	f7fc fe63 	bl	80010c0 <HAL_GetTick>
 80043fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043fc:	e008      	b.n	8004410 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043fe:	f7fc fe5f 	bl	80010c0 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e006      	b.n	800441e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004410:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <RCCEx_PLL3_Config+0x15c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400
 800442c:	ffff0007 	.word	0xffff0007

08004430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e049      	b.n	80044d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f841 	bl	80044de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 f9e8 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d001      	beq.n	800450c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e054      	b.n	80045b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a26      	ldr	r2, [pc, #152]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x80>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004536:	d01d      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x80>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a22      	ldr	r2, [pc, #136]	@ (80045c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x80>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a21      	ldr	r2, [pc, #132]	@ (80045cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x80>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1e      	ldr	r2, [pc, #120]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1c      	ldr	r2, [pc, #112]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x80>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d115      	bne.n	80045a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	4b19      	ldr	r3, [pc, #100]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xec>)
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b06      	cmp	r3, #6
 8004584:	d015      	beq.n	80045b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800458c:	d011      	beq.n	80045b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0201 	orr.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459e:	e008      	b.n	80045b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e000      	b.n	80045b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40001800 	.word	0x40001800
 80045dc:	40014000 	.word	0x40014000
 80045e0:	00010007 	.word	0x00010007

080045e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d020      	beq.n	8004648 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01b      	beq.n	8004648 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0202 	mvn.w	r2, #2
 8004618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8e9 	bl	8004806 <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8db 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8ec 	bl	800481a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0204 	mvn.w	r2, #4
 8004664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8c3 	bl	8004806 <HAL_TIM_IC_CaptureCallback>
 8004680:	e005      	b.n	800468e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8b5 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f8c6 	bl	800481a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d020      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0208 	mvn.w	r2, #8
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2204      	movs	r2, #4
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f89d 	bl	8004806 <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f88f 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f8a0 	bl	800481a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d020      	beq.n	800472c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0210 	mvn.w	r2, #16
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2208      	movs	r2, #8
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f877 	bl	8004806 <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f869 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f87a 	bl	800481a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0201 	mvn.w	r2, #1
 8004748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc fa46 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00c      	beq.n	800477e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f913 	bl	80049a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00c      	beq.n	80047a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800479a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f90b 	bl	80049b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00c      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f834 	bl	800482e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00c      	beq.n	80047ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f06f 0220 	mvn.w	r2, #32
 80047e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f8d3 	bl	8004990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a46      	ldr	r2, [pc, #280]	@ (8004970 <TIM_Base_SetConfig+0x12c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004862:	d00f      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a43      	ldr	r2, [pc, #268]	@ (8004974 <TIM_Base_SetConfig+0x130>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00b      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a42      	ldr	r2, [pc, #264]	@ (8004978 <TIM_Base_SetConfig+0x134>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a41      	ldr	r2, [pc, #260]	@ (800497c <TIM_Base_SetConfig+0x138>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a40      	ldr	r2, [pc, #256]	@ (8004980 <TIM_Base_SetConfig+0x13c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d108      	bne.n	8004896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a35      	ldr	r2, [pc, #212]	@ (8004970 <TIM_Base_SetConfig+0x12c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01f      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a4:	d01b      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a32      	ldr	r2, [pc, #200]	@ (8004974 <TIM_Base_SetConfig+0x130>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d017      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a31      	ldr	r2, [pc, #196]	@ (8004978 <TIM_Base_SetConfig+0x134>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a30      	ldr	r2, [pc, #192]	@ (800497c <TIM_Base_SetConfig+0x138>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004980 <TIM_Base_SetConfig+0x13c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004984 <TIM_Base_SetConfig+0x140>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <TIM_Base_SetConfig+0x144>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	@ (800498c <TIM_Base_SetConfig+0x148>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d108      	bne.n	80048f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a16      	ldr	r2, [pc, #88]	@ (8004970 <TIM_Base_SetConfig+0x12c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00f      	beq.n	800493c <TIM_Base_SetConfig+0xf8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <TIM_Base_SetConfig+0x13c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_Base_SetConfig+0xf8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <TIM_Base_SetConfig+0x140>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_Base_SetConfig+0xf8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a16      	ldr	r2, [pc, #88]	@ (8004988 <TIM_Base_SetConfig+0x144>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_Base_SetConfig+0xf8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a15      	ldr	r2, [pc, #84]	@ (800498c <TIM_Base_SetConfig+0x148>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d105      	bne.n	8004962 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f023 0201 	bic.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]
  }
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40000c00 	.word	0x40000c00
 8004980:	40010400 	.word	0x40010400
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800

08004990 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e042      	b.n	8004a64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d106      	bne.n	80049f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fc f929 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2224      	movs	r2, #36	@ 0x24
 80049fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fd90 	bl	800553c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f825 	bl	8004a6c <UART_SetConfig>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e01b      	b.n	8004a64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fe0f 	bl	8005680 <UART_CheckIdleState>
 8004a62:	4603      	mov	r3, r0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a70:	b092      	sub	sp, #72	@ 0x48
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4bbe      	ldr	r3, [pc, #760]	@ (8004d94 <UART_SetConfig+0x328>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4ab3      	ldr	r2, [pc, #716]	@ (8004d98 <UART_SetConfig+0x32c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	4baf      	ldr	r3, [pc, #700]	@ (8004d9c <UART_SetConfig+0x330>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	f023 010f 	bic.w	r1, r3, #15
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4aa6      	ldr	r2, [pc, #664]	@ (8004da0 <UART_SetConfig+0x334>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d177      	bne.n	8004bfc <UART_SetConfig+0x190>
 8004b0c:	4ba5      	ldr	r3, [pc, #660]	@ (8004da4 <UART_SetConfig+0x338>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b14:	2b28      	cmp	r3, #40	@ 0x28
 8004b16:	d86d      	bhi.n	8004bf4 <UART_SetConfig+0x188>
 8004b18:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <UART_SetConfig+0xb4>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004bc5 	.word	0x08004bc5
 8004b24:	08004bf5 	.word	0x08004bf5
 8004b28:	08004bf5 	.word	0x08004bf5
 8004b2c:	08004bf5 	.word	0x08004bf5
 8004b30:	08004bf5 	.word	0x08004bf5
 8004b34:	08004bf5 	.word	0x08004bf5
 8004b38:	08004bf5 	.word	0x08004bf5
 8004b3c:	08004bf5 	.word	0x08004bf5
 8004b40:	08004bcd 	.word	0x08004bcd
 8004b44:	08004bf5 	.word	0x08004bf5
 8004b48:	08004bf5 	.word	0x08004bf5
 8004b4c:	08004bf5 	.word	0x08004bf5
 8004b50:	08004bf5 	.word	0x08004bf5
 8004b54:	08004bf5 	.word	0x08004bf5
 8004b58:	08004bf5 	.word	0x08004bf5
 8004b5c:	08004bf5 	.word	0x08004bf5
 8004b60:	08004bd5 	.word	0x08004bd5
 8004b64:	08004bf5 	.word	0x08004bf5
 8004b68:	08004bf5 	.word	0x08004bf5
 8004b6c:	08004bf5 	.word	0x08004bf5
 8004b70:	08004bf5 	.word	0x08004bf5
 8004b74:	08004bf5 	.word	0x08004bf5
 8004b78:	08004bf5 	.word	0x08004bf5
 8004b7c:	08004bf5 	.word	0x08004bf5
 8004b80:	08004bdd 	.word	0x08004bdd
 8004b84:	08004bf5 	.word	0x08004bf5
 8004b88:	08004bf5 	.word	0x08004bf5
 8004b8c:	08004bf5 	.word	0x08004bf5
 8004b90:	08004bf5 	.word	0x08004bf5
 8004b94:	08004bf5 	.word	0x08004bf5
 8004b98:	08004bf5 	.word	0x08004bf5
 8004b9c:	08004bf5 	.word	0x08004bf5
 8004ba0:	08004be5 	.word	0x08004be5
 8004ba4:	08004bf5 	.word	0x08004bf5
 8004ba8:	08004bf5 	.word	0x08004bf5
 8004bac:	08004bf5 	.word	0x08004bf5
 8004bb0:	08004bf5 	.word	0x08004bf5
 8004bb4:	08004bf5 	.word	0x08004bf5
 8004bb8:	08004bf5 	.word	0x08004bf5
 8004bbc:	08004bf5 	.word	0x08004bf5
 8004bc0:	08004bed 	.word	0x08004bed
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bca:	e222      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd2:	e21e      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bda:	e21a      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be2:	e216      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004be4:	2320      	movs	r3, #32
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bea:	e212      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004bec:	2340      	movs	r3, #64	@ 0x40
 8004bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bf2:	e20e      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004bf4:	2380      	movs	r3, #128	@ 0x80
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfa:	e20a      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a69      	ldr	r2, [pc, #420]	@ (8004da8 <UART_SetConfig+0x33c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d130      	bne.n	8004c68 <UART_SetConfig+0x1fc>
 8004c06:	4b67      	ldr	r3, [pc, #412]	@ (8004da4 <UART_SetConfig+0x338>)
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	2b05      	cmp	r3, #5
 8004c10:	d826      	bhi.n	8004c60 <UART_SetConfig+0x1f4>
 8004c12:	a201      	add	r2, pc, #4	@ (adr r2, 8004c18 <UART_SetConfig+0x1ac>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c31 	.word	0x08004c31
 8004c1c:	08004c39 	.word	0x08004c39
 8004c20:	08004c41 	.word	0x08004c41
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c51 	.word	0x08004c51
 8004c2c:	08004c59 	.word	0x08004c59
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c36:	e1ec      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3e:	e1e8      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004c40:	2308      	movs	r3, #8
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c46:	e1e4      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4e:	e1e0      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004c50:	2320      	movs	r3, #32
 8004c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c56:	e1dc      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004c58:	2340      	movs	r3, #64	@ 0x40
 8004c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5e:	e1d8      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004c60:	2380      	movs	r3, #128	@ 0x80
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c66:	e1d4      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8004dac <UART_SetConfig+0x340>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d130      	bne.n	8004cd4 <UART_SetConfig+0x268>
 8004c72:	4b4c      	ldr	r3, [pc, #304]	@ (8004da4 <UART_SetConfig+0x338>)
 8004c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	d826      	bhi.n	8004ccc <UART_SetConfig+0x260>
 8004c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c84 <UART_SetConfig+0x218>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004c9d 	.word	0x08004c9d
 8004c88:	08004ca5 	.word	0x08004ca5
 8004c8c:	08004cad 	.word	0x08004cad
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004cbd 	.word	0x08004cbd
 8004c98:	08004cc5 	.word	0x08004cc5
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca2:	e1b6      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004caa:	e1b2      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004cac:	2308      	movs	r3, #8
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb2:	e1ae      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cba:	e1aa      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004cbc:	2320      	movs	r3, #32
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	e1a6      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004cc4:	2340      	movs	r3, #64	@ 0x40
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cca:	e1a2      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004ccc:	2380      	movs	r3, #128	@ 0x80
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd2:	e19e      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a35      	ldr	r2, [pc, #212]	@ (8004db0 <UART_SetConfig+0x344>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d130      	bne.n	8004d40 <UART_SetConfig+0x2d4>
 8004cde:	4b31      	ldr	r3, [pc, #196]	@ (8004da4 <UART_SetConfig+0x338>)
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	2b05      	cmp	r3, #5
 8004ce8:	d826      	bhi.n	8004d38 <UART_SetConfig+0x2cc>
 8004cea:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <UART_SetConfig+0x284>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d09 	.word	0x08004d09
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	08004d19 	.word	0x08004d19
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d31 	.word	0x08004d31
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0e:	e180      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d10:	2304      	movs	r3, #4
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d16:	e17c      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1e:	e178      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d20:	2310      	movs	r3, #16
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d26:	e174      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d28:	2320      	movs	r3, #32
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2e:	e170      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d30:	2340      	movs	r3, #64	@ 0x40
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d36:	e16c      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d38:	2380      	movs	r3, #128	@ 0x80
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3e:	e168      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1b      	ldr	r2, [pc, #108]	@ (8004db4 <UART_SetConfig+0x348>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d142      	bne.n	8004dd0 <UART_SetConfig+0x364>
 8004d4a:	4b16      	ldr	r3, [pc, #88]	@ (8004da4 <UART_SetConfig+0x338>)
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	d838      	bhi.n	8004dc8 <UART_SetConfig+0x35c>
 8004d56:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <UART_SetConfig+0x2f0>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d7d 	.word	0x08004d7d
 8004d64:	08004d85 	.word	0x08004d85
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004db9 	.word	0x08004db9
 8004d70:	08004dc1 	.word	0x08004dc1
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7a:	e14a      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d82:	e146      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d84:	2308      	movs	r3, #8
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8a:	e142      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d92:	e13e      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004d94:	cfff69f3 	.word	0xcfff69f3
 8004d98:	58000c00 	.word	0x58000c00
 8004d9c:	11fff4ff 	.word	0x11fff4ff
 8004da0:	40011000 	.word	0x40011000
 8004da4:	58024400 	.word	0x58024400
 8004da8:	40004400 	.word	0x40004400
 8004dac:	40004800 	.word	0x40004800
 8004db0:	40004c00 	.word	0x40004c00
 8004db4:	40005000 	.word	0x40005000
 8004db8:	2320      	movs	r3, #32
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dbe:	e128      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004dc0:	2340      	movs	r3, #64	@ 0x40
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc6:	e124      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004dc8:	2380      	movs	r3, #128	@ 0x80
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dce:	e120      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4acb      	ldr	r2, [pc, #812]	@ (8005104 <UART_SetConfig+0x698>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d176      	bne.n	8004ec8 <UART_SetConfig+0x45c>
 8004dda:	4bcb      	ldr	r3, [pc, #812]	@ (8005108 <UART_SetConfig+0x69c>)
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004de2:	2b28      	cmp	r3, #40	@ 0x28
 8004de4:	d86c      	bhi.n	8004ec0 <UART_SetConfig+0x454>
 8004de6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <UART_SetConfig+0x380>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e91 	.word	0x08004e91
 8004df0:	08004ec1 	.word	0x08004ec1
 8004df4:	08004ec1 	.word	0x08004ec1
 8004df8:	08004ec1 	.word	0x08004ec1
 8004dfc:	08004ec1 	.word	0x08004ec1
 8004e00:	08004ec1 	.word	0x08004ec1
 8004e04:	08004ec1 	.word	0x08004ec1
 8004e08:	08004ec1 	.word	0x08004ec1
 8004e0c:	08004e99 	.word	0x08004e99
 8004e10:	08004ec1 	.word	0x08004ec1
 8004e14:	08004ec1 	.word	0x08004ec1
 8004e18:	08004ec1 	.word	0x08004ec1
 8004e1c:	08004ec1 	.word	0x08004ec1
 8004e20:	08004ec1 	.word	0x08004ec1
 8004e24:	08004ec1 	.word	0x08004ec1
 8004e28:	08004ec1 	.word	0x08004ec1
 8004e2c:	08004ea1 	.word	0x08004ea1
 8004e30:	08004ec1 	.word	0x08004ec1
 8004e34:	08004ec1 	.word	0x08004ec1
 8004e38:	08004ec1 	.word	0x08004ec1
 8004e3c:	08004ec1 	.word	0x08004ec1
 8004e40:	08004ec1 	.word	0x08004ec1
 8004e44:	08004ec1 	.word	0x08004ec1
 8004e48:	08004ec1 	.word	0x08004ec1
 8004e4c:	08004ea9 	.word	0x08004ea9
 8004e50:	08004ec1 	.word	0x08004ec1
 8004e54:	08004ec1 	.word	0x08004ec1
 8004e58:	08004ec1 	.word	0x08004ec1
 8004e5c:	08004ec1 	.word	0x08004ec1
 8004e60:	08004ec1 	.word	0x08004ec1
 8004e64:	08004ec1 	.word	0x08004ec1
 8004e68:	08004ec1 	.word	0x08004ec1
 8004e6c:	08004eb1 	.word	0x08004eb1
 8004e70:	08004ec1 	.word	0x08004ec1
 8004e74:	08004ec1 	.word	0x08004ec1
 8004e78:	08004ec1 	.word	0x08004ec1
 8004e7c:	08004ec1 	.word	0x08004ec1
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
 8004e88:	08004ec1 	.word	0x08004ec1
 8004e8c:	08004eb9 	.word	0x08004eb9
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e96:	e0bc      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e9e:	e0b8      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea6:	e0b4      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eae:	e0b0      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb6:	e0ac      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004eb8:	2340      	movs	r3, #64	@ 0x40
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ebe:	e0a8      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004ec0:	2380      	movs	r3, #128	@ 0x80
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ec6:	e0a4      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a8f      	ldr	r2, [pc, #572]	@ (800510c <UART_SetConfig+0x6a0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d130      	bne.n	8004f34 <UART_SetConfig+0x4c8>
 8004ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8005108 <UART_SetConfig+0x69c>)
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d826      	bhi.n	8004f2c <UART_SetConfig+0x4c0>
 8004ede:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee4 <UART_SetConfig+0x478>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004efd 	.word	0x08004efd
 8004ee8:	08004f05 	.word	0x08004f05
 8004eec:	08004f0d 	.word	0x08004f0d
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	08004f25 	.word	0x08004f25
 8004efc:	2300      	movs	r3, #0
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f02:	e086      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f04:	2304      	movs	r3, #4
 8004f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0a:	e082      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f12:	e07e      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f14:	2310      	movs	r3, #16
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1a:	e07a      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f22:	e076      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f24:	2340      	movs	r3, #64	@ 0x40
 8004f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2a:	e072      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f32:	e06e      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a75      	ldr	r2, [pc, #468]	@ (8005110 <UART_SetConfig+0x6a4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d130      	bne.n	8004fa0 <UART_SetConfig+0x534>
 8004f3e:	4b72      	ldr	r3, [pc, #456]	@ (8005108 <UART_SetConfig+0x69c>)
 8004f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	d826      	bhi.n	8004f98 <UART_SetConfig+0x52c>
 8004f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <UART_SetConfig+0x4e4>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f69 	.word	0x08004f69
 8004f54:	08004f71 	.word	0x08004f71
 8004f58:	08004f79 	.word	0x08004f79
 8004f5c:	08004f81 	.word	0x08004f81
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	08004f91 	.word	0x08004f91
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6e:	e050      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f70:	2304      	movs	r3, #4
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f76:	e04c      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7e:	e048      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f80:	2310      	movs	r3, #16
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f86:	e044      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f88:	2320      	movs	r3, #32
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e040      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f90:	2340      	movs	r3, #64	@ 0x40
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f96:	e03c      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004f98:	2380      	movs	r3, #128	@ 0x80
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9e:	e038      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5b      	ldr	r2, [pc, #364]	@ (8005114 <UART_SetConfig+0x6a8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d130      	bne.n	800500c <UART_SetConfig+0x5a0>
 8004faa:	4b57      	ldr	r3, [pc, #348]	@ (8005108 <UART_SetConfig+0x69c>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d826      	bhi.n	8005004 <UART_SetConfig+0x598>
 8004fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fbc <UART_SetConfig+0x550>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fd5 	.word	0x08004fd5
 8004fc0:	08004fdd 	.word	0x08004fdd
 8004fc4:	08004fe5 	.word	0x08004fe5
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fda:	e01a      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe2:	e016      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004fe4:	2308      	movs	r3, #8
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fea:	e012      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004fec:	2310      	movs	r3, #16
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff2:	e00e      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffa:	e00a      	b.n	8005012 <UART_SetConfig+0x5a6>
 8004ffc:	2340      	movs	r3, #64	@ 0x40
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005002:	e006      	b.n	8005012 <UART_SetConfig+0x5a6>
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500a:	e002      	b.n	8005012 <UART_SetConfig+0x5a6>
 800500c:	2380      	movs	r3, #128	@ 0x80
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a3f      	ldr	r2, [pc, #252]	@ (8005114 <UART_SetConfig+0x6a8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	f040 80f8 	bne.w	800520e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800501e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005022:	2b20      	cmp	r3, #32
 8005024:	dc46      	bgt.n	80050b4 <UART_SetConfig+0x648>
 8005026:	2b02      	cmp	r3, #2
 8005028:	f2c0 8082 	blt.w	8005130 <UART_SetConfig+0x6c4>
 800502c:	3b02      	subs	r3, #2
 800502e:	2b1e      	cmp	r3, #30
 8005030:	d87e      	bhi.n	8005130 <UART_SetConfig+0x6c4>
 8005032:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <UART_SetConfig+0x5cc>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	080050bb 	.word	0x080050bb
 800503c:	08005131 	.word	0x08005131
 8005040:	080050c3 	.word	0x080050c3
 8005044:	08005131 	.word	0x08005131
 8005048:	08005131 	.word	0x08005131
 800504c:	08005131 	.word	0x08005131
 8005050:	080050d3 	.word	0x080050d3
 8005054:	08005131 	.word	0x08005131
 8005058:	08005131 	.word	0x08005131
 800505c:	08005131 	.word	0x08005131
 8005060:	08005131 	.word	0x08005131
 8005064:	08005131 	.word	0x08005131
 8005068:	08005131 	.word	0x08005131
 800506c:	08005131 	.word	0x08005131
 8005070:	080050e3 	.word	0x080050e3
 8005074:	08005131 	.word	0x08005131
 8005078:	08005131 	.word	0x08005131
 800507c:	08005131 	.word	0x08005131
 8005080:	08005131 	.word	0x08005131
 8005084:	08005131 	.word	0x08005131
 8005088:	08005131 	.word	0x08005131
 800508c:	08005131 	.word	0x08005131
 8005090:	08005131 	.word	0x08005131
 8005094:	08005131 	.word	0x08005131
 8005098:	08005131 	.word	0x08005131
 800509c:	08005131 	.word	0x08005131
 80050a0:	08005131 	.word	0x08005131
 80050a4:	08005131 	.word	0x08005131
 80050a8:	08005131 	.word	0x08005131
 80050ac:	08005131 	.word	0x08005131
 80050b0:	08005123 	.word	0x08005123
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d037      	beq.n	8005128 <UART_SetConfig+0x6bc>
 80050b8:	e03a      	b.n	8005130 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80050ba:	f7fe fd97 	bl	8003bec <HAL_RCCEx_GetD3PCLK1Freq>
 80050be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050c0:	e03c      	b.n	800513c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fda6 	bl	8003c18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d0:	e034      	b.n	800513c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050d2:	f107 0318 	add.w	r3, r7, #24
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fef2 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050e0:	e02c      	b.n	800513c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e2:	4b09      	ldr	r3, [pc, #36]	@ (8005108 <UART_SetConfig+0x69c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d016      	beq.n	800511c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050ee:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <UART_SetConfig+0x69c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	08db      	lsrs	r3, r3, #3
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	4a07      	ldr	r2, [pc, #28]	@ (8005118 <UART_SetConfig+0x6ac>)
 80050fa:	fa22 f303 	lsr.w	r3, r2, r3
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005100:	e01c      	b.n	800513c <UART_SetConfig+0x6d0>
 8005102:	bf00      	nop
 8005104:	40011400 	.word	0x40011400
 8005108:	58024400 	.word	0x58024400
 800510c:	40007800 	.word	0x40007800
 8005110:	40007c00 	.word	0x40007c00
 8005114:	58000c00 	.word	0x58000c00
 8005118:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800511c:	4b9d      	ldr	r3, [pc, #628]	@ (8005394 <UART_SetConfig+0x928>)
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005120:	e00c      	b.n	800513c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005122:	4b9d      	ldr	r3, [pc, #628]	@ (8005398 <UART_SetConfig+0x92c>)
 8005124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005126:	e009      	b.n	800513c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800512c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800512e:	e005      	b.n	800513c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800513a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800513c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 81de 	beq.w	8005500 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	4a94      	ldr	r2, [pc, #592]	@ (800539c <UART_SetConfig+0x930>)
 800514a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514e:	461a      	mov	r2, r3
 8005150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005152:	fbb3 f3f2 	udiv	r3, r3, r2
 8005156:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4413      	add	r3, r2
 8005162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005164:	429a      	cmp	r2, r3
 8005166:	d305      	bcc.n	8005174 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800516e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005170:	429a      	cmp	r2, r3
 8005172:	d903      	bls.n	800517c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800517a:	e1c1      	b.n	8005500 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800517c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800517e:	2200      	movs	r2, #0
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	60fa      	str	r2, [r7, #12]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	4a84      	ldr	r2, [pc, #528]	@ (800539c <UART_SetConfig+0x930>)
 800518a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800518e:	b29b      	uxth	r3, r3
 8005190:	2200      	movs	r2, #0
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800519a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800519e:	f7fb f8f7 	bl	8000390 <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	020b      	lsls	r3, r1, #8
 80051b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051b8:	0202      	lsls	r2, r0, #8
 80051ba:	6979      	ldr	r1, [r7, #20]
 80051bc:	6849      	ldr	r1, [r1, #4]
 80051be:	0849      	lsrs	r1, r1, #1
 80051c0:	2000      	movs	r0, #0
 80051c2:	460c      	mov	r4, r1
 80051c4:	4605      	mov	r5, r0
 80051c6:	eb12 0804 	adds.w	r8, r2, r4
 80051ca:	eb43 0905 	adc.w	r9, r3, r5
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	469a      	mov	sl, r3
 80051d6:	4693      	mov	fp, r2
 80051d8:	4652      	mov	r2, sl
 80051da:	465b      	mov	r3, fp
 80051dc:	4640      	mov	r0, r8
 80051de:	4649      	mov	r1, r9
 80051e0:	f7fb f8d6 	bl	8000390 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4613      	mov	r3, r2
 80051ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f2:	d308      	bcc.n	8005206 <UART_SetConfig+0x79a>
 80051f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051fa:	d204      	bcs.n	8005206 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	e17c      	b.n	8005500 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800520c:	e178      	b.n	8005500 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005216:	f040 80c5 	bne.w	80053a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800521a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800521e:	2b20      	cmp	r3, #32
 8005220:	dc48      	bgt.n	80052b4 <UART_SetConfig+0x848>
 8005222:	2b00      	cmp	r3, #0
 8005224:	db7b      	blt.n	800531e <UART_SetConfig+0x8b2>
 8005226:	2b20      	cmp	r3, #32
 8005228:	d879      	bhi.n	800531e <UART_SetConfig+0x8b2>
 800522a:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <UART_SetConfig+0x7c4>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	080052bb 	.word	0x080052bb
 8005234:	080052c3 	.word	0x080052c3
 8005238:	0800531f 	.word	0x0800531f
 800523c:	0800531f 	.word	0x0800531f
 8005240:	080052cb 	.word	0x080052cb
 8005244:	0800531f 	.word	0x0800531f
 8005248:	0800531f 	.word	0x0800531f
 800524c:	0800531f 	.word	0x0800531f
 8005250:	080052db 	.word	0x080052db
 8005254:	0800531f 	.word	0x0800531f
 8005258:	0800531f 	.word	0x0800531f
 800525c:	0800531f 	.word	0x0800531f
 8005260:	0800531f 	.word	0x0800531f
 8005264:	0800531f 	.word	0x0800531f
 8005268:	0800531f 	.word	0x0800531f
 800526c:	0800531f 	.word	0x0800531f
 8005270:	080052eb 	.word	0x080052eb
 8005274:	0800531f 	.word	0x0800531f
 8005278:	0800531f 	.word	0x0800531f
 800527c:	0800531f 	.word	0x0800531f
 8005280:	0800531f 	.word	0x0800531f
 8005284:	0800531f 	.word	0x0800531f
 8005288:	0800531f 	.word	0x0800531f
 800528c:	0800531f 	.word	0x0800531f
 8005290:	0800531f 	.word	0x0800531f
 8005294:	0800531f 	.word	0x0800531f
 8005298:	0800531f 	.word	0x0800531f
 800529c:	0800531f 	.word	0x0800531f
 80052a0:	0800531f 	.word	0x0800531f
 80052a4:	0800531f 	.word	0x0800531f
 80052a8:	0800531f 	.word	0x0800531f
 80052ac:	0800531f 	.word	0x0800531f
 80052b0:	08005311 	.word	0x08005311
 80052b4:	2b40      	cmp	r3, #64	@ 0x40
 80052b6:	d02e      	beq.n	8005316 <UART_SetConfig+0x8aa>
 80052b8:	e031      	b.n	800531e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ba:	f7fd fa1f 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 80052be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052c0:	e033      	b.n	800532a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c2:	f7fd fa31 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 80052c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052c8:	e02f      	b.n	800532a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fca2 	bl	8003c18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052d8:	e027      	b.n	800532a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052da:	f107 0318 	add.w	r3, r7, #24
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fdee 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052e8:	e01f      	b.n	800532a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ea:	4b2d      	ldr	r3, [pc, #180]	@ (80053a0 <UART_SetConfig+0x934>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052f6:	4b2a      	ldr	r3, [pc, #168]	@ (80053a0 <UART_SetConfig+0x934>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	08db      	lsrs	r3, r3, #3
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	4a24      	ldr	r2, [pc, #144]	@ (8005394 <UART_SetConfig+0x928>)
 8005302:	fa22 f303 	lsr.w	r3, r2, r3
 8005306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005308:	e00f      	b.n	800532a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800530a:	4b22      	ldr	r3, [pc, #136]	@ (8005394 <UART_SetConfig+0x928>)
 800530c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800530e:	e00c      	b.n	800532a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005310:	4b21      	ldr	r3, [pc, #132]	@ (8005398 <UART_SetConfig+0x92c>)
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005314:	e009      	b.n	800532a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800531a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800531c:	e005      	b.n	800532a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800532a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80e7 	beq.w	8005500 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	4a19      	ldr	r2, [pc, #100]	@ (800539c <UART_SetConfig+0x930>)
 8005338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800533c:	461a      	mov	r2, r3
 800533e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005340:	fbb3 f3f2 	udiv	r3, r3, r2
 8005344:	005a      	lsls	r2, r3, #1
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	441a      	add	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535a:	2b0f      	cmp	r3, #15
 800535c:	d916      	bls.n	800538c <UART_SetConfig+0x920>
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005364:	d212      	bcs.n	800538c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005368:	b29b      	uxth	r3, r3
 800536a:	f023 030f 	bic.w	r3, r3, #15
 800536e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	b29b      	uxth	r3, r3
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	b29a      	uxth	r2, r3
 800537c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800537e:	4313      	orrs	r3, r2
 8005380:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e0b9      	b.n	8005500 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005392:	e0b5      	b.n	8005500 <UART_SetConfig+0xa94>
 8005394:	03d09000 	.word	0x03d09000
 8005398:	003d0900 	.word	0x003d0900
 800539c:	0800b0c4 	.word	0x0800b0c4
 80053a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80053a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	dc49      	bgt.n	8005440 <UART_SetConfig+0x9d4>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	db7c      	blt.n	80054aa <UART_SetConfig+0xa3e>
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d87a      	bhi.n	80054aa <UART_SetConfig+0xa3e>
 80053b4:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <UART_SetConfig+0x950>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	08005447 	.word	0x08005447
 80053c0:	0800544f 	.word	0x0800544f
 80053c4:	080054ab 	.word	0x080054ab
 80053c8:	080054ab 	.word	0x080054ab
 80053cc:	08005457 	.word	0x08005457
 80053d0:	080054ab 	.word	0x080054ab
 80053d4:	080054ab 	.word	0x080054ab
 80053d8:	080054ab 	.word	0x080054ab
 80053dc:	08005467 	.word	0x08005467
 80053e0:	080054ab 	.word	0x080054ab
 80053e4:	080054ab 	.word	0x080054ab
 80053e8:	080054ab 	.word	0x080054ab
 80053ec:	080054ab 	.word	0x080054ab
 80053f0:	080054ab 	.word	0x080054ab
 80053f4:	080054ab 	.word	0x080054ab
 80053f8:	080054ab 	.word	0x080054ab
 80053fc:	08005477 	.word	0x08005477
 8005400:	080054ab 	.word	0x080054ab
 8005404:	080054ab 	.word	0x080054ab
 8005408:	080054ab 	.word	0x080054ab
 800540c:	080054ab 	.word	0x080054ab
 8005410:	080054ab 	.word	0x080054ab
 8005414:	080054ab 	.word	0x080054ab
 8005418:	080054ab 	.word	0x080054ab
 800541c:	080054ab 	.word	0x080054ab
 8005420:	080054ab 	.word	0x080054ab
 8005424:	080054ab 	.word	0x080054ab
 8005428:	080054ab 	.word	0x080054ab
 800542c:	080054ab 	.word	0x080054ab
 8005430:	080054ab 	.word	0x080054ab
 8005434:	080054ab 	.word	0x080054ab
 8005438:	080054ab 	.word	0x080054ab
 800543c:	0800549d 	.word	0x0800549d
 8005440:	2b40      	cmp	r3, #64	@ 0x40
 8005442:	d02e      	beq.n	80054a2 <UART_SetConfig+0xa36>
 8005444:	e031      	b.n	80054aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005446:	f7fd f959 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 800544a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800544c:	e033      	b.n	80054b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544e:	f7fd f96b 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8005452:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005454:	e02f      	b.n	80054b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe fbdc 	bl	8003c18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005464:	e027      	b.n	80054b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005466:	f107 0318 	add.w	r3, r7, #24
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fd28 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005474:	e01f      	b.n	80054b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005476:	4b2d      	ldr	r3, [pc, #180]	@ (800552c <UART_SetConfig+0xac0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005482:	4b2a      	ldr	r3, [pc, #168]	@ (800552c <UART_SetConfig+0xac0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	08db      	lsrs	r3, r3, #3
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	4a28      	ldr	r2, [pc, #160]	@ (8005530 <UART_SetConfig+0xac4>)
 800548e:	fa22 f303 	lsr.w	r3, r2, r3
 8005492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005494:	e00f      	b.n	80054b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005496:	4b26      	ldr	r3, [pc, #152]	@ (8005530 <UART_SetConfig+0xac4>)
 8005498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800549a:	e00c      	b.n	80054b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <UART_SetConfig+0xac8>)
 800549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a0:	e009      	b.n	80054b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a8:	e005      	b.n	80054b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80054b4:	bf00      	nop
    }

    if (pclk != 0U)
 80054b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d021      	beq.n	8005500 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <UART_SetConfig+0xacc>)
 80054c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	441a      	add	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e2:	2b0f      	cmp	r3, #15
 80054e4:	d909      	bls.n	80054fa <UART_SetConfig+0xa8e>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ec:	d205      	bcs.n	80054fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	e002      	b.n	8005500 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2201      	movs	r2, #1
 8005504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2201      	movs	r2, #1
 800550c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2200      	movs	r2, #0
 8005514:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800551c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005520:	4618      	mov	r0, r3
 8005522:	3748      	adds	r7, #72	@ 0x48
 8005524:	46bd      	mov	sp, r7
 8005526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
 8005530:	03d09000 	.word	0x03d09000
 8005534:	003d0900 	.word	0x003d0900
 8005538:	0800b0c4 	.word	0x0800b0c4

0800553c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01a      	beq.n	8005652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800563a:	d10a      	bne.n	8005652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b098      	sub	sp, #96	@ 0x60
 8005684:	af02      	add	r7, sp, #8
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005690:	f7fb fd16 	bl	80010c0 <HAL_GetTick>
 8005694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d12f      	bne.n	8005704 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ac:	2200      	movs	r2, #0
 80056ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f88e 	bl	80057d4 <UART_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d022      	beq.n	8005704 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e6      	bne.n	80056be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e063      	b.n	80057cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d149      	bne.n	80057a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005712:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571a:	2200      	movs	r2, #0
 800571c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f857 	bl	80057d4 <UART_WaitOnFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d03c      	beq.n	80057a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	623b      	str	r3, [r7, #32]
   return(result);
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800574a:	633b      	str	r3, [r7, #48]	@ 0x30
 800574c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e6      	bne.n	800572c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3308      	adds	r3, #8
 8005764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	60fb      	str	r3, [r7, #12]
   return(result);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3308      	adds	r3, #8
 800577c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800577e:	61fa      	str	r2, [r7, #28]
 8005780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	617b      	str	r3, [r7, #20]
   return(result);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e5      	bne.n	800575e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e012      	b.n	80057cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3758      	adds	r7, #88	@ 0x58
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e4:	e04f      	b.n	8005886 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d04b      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ee:	f7fb fc67 	bl	80010c0 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <UART_WaitOnFlagUntilTimeout+0x30>
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e04e      	b.n	80058a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d037      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b80      	cmp	r3, #128	@ 0x80
 800581a:	d034      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0xb2>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b40      	cmp	r3, #64	@ 0x40
 8005820:	d031      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b08      	cmp	r3, #8
 800582e:	d110      	bne.n	8005852 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2208      	movs	r2, #8
 8005836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f839 	bl	80058b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2208      	movs	r2, #8
 8005842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e029      	b.n	80058a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800585c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005860:	d111      	bne.n	8005886 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800586a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f81f 	bl	80058b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e00f      	b.n	80058a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4013      	ands	r3, r2
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	429a      	cmp	r2, r3
 8005894:	bf0c      	ite	eq
 8005896:	2301      	moveq	r3, #1
 8005898:	2300      	movne	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d0a0      	beq.n	80057e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b095      	sub	sp, #84	@ 0x54
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80058d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e6      	bne.n	80058b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005978 <UART_EndRxTransfer+0xc8>)
 80058fe:	4013      	ands	r3, r2
 8005900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3308      	adds	r3, #8
 8005908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800590a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800590c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d118      	bne.n	8005958 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	60bb      	str	r3, [r7, #8]
   return(result);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f023 0310 	bic.w	r3, r3, #16
 800593a:	647b      	str	r3, [r7, #68]	@ 0x44
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	613b      	str	r3, [r7, #16]
   return(result);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e6      	bne.n	8005926 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800596c:	bf00      	nop
 800596e:	3754      	adds	r7, #84	@ 0x54
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	effffffe 	.word	0xeffffffe

0800597c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_UARTEx_DisableFifoMode+0x16>
 800598e:	2302      	movs	r3, #2
 8005990:	e027      	b.n	80059e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2224      	movs	r2, #36	@ 0x24
 800599e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80059c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e02d      	b.n	8005a62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2224      	movs	r2, #36	@ 0x24
 8005a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f850 	bl	8005ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e02d      	b.n	8005ade <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2224      	movs	r2, #36	@ 0x24
 8005a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f812 	bl	8005ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d108      	bne.n	8005b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b08:	e031      	b.n	8005b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b0a:	2310      	movs	r3, #16
 8005b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b0e:	2310      	movs	r3, #16
 8005b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	0e5b      	lsrs	r3, r3, #25
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	0f5b      	lsrs	r3, r3, #29
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b32:	7bbb      	ldrb	r3, [r7, #14]
 8005b34:	7b3a      	ldrb	r2, [r7, #12]
 8005b36:	4911      	ldr	r1, [pc, #68]	@ (8005b7c <UARTEx_SetNbDataToProcess+0x94>)
 8005b38:	5c8a      	ldrb	r2, [r1, r2]
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b3e:	7b3a      	ldrb	r2, [r7, #12]
 8005b40:	490f      	ldr	r1, [pc, #60]	@ (8005b80 <UARTEx_SetNbDataToProcess+0x98>)
 8005b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	7b7a      	ldrb	r2, [r7, #13]
 8005b54:	4909      	ldr	r1, [pc, #36]	@ (8005b7c <UARTEx_SetNbDataToProcess+0x94>)
 8005b56:	5c8a      	ldrb	r2, [r1, r2]
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b5c:	7b7a      	ldrb	r2, [r7, #13]
 8005b5e:	4908      	ldr	r1, [pc, #32]	@ (8005b80 <UARTEx_SetNbDataToProcess+0x98>)
 8005b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	0800b0dc 	.word	0x0800b0dc
 8005b80:	0800b0e4 	.word	0x0800b0e4

08005b84 <__NVIC_SetPriority>:
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db0a      	blt.n	8005bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	490c      	ldr	r1, [pc, #48]	@ (8005bd0 <__NVIC_SetPriority+0x4c>)
 8005b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005bac:	e00a      	b.n	8005bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4908      	ldr	r1, [pc, #32]	@ (8005bd4 <__NVIC_SetPriority+0x50>)
 8005bb4:	88fb      	ldrh	r3, [r7, #6]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	3b04      	subs	r3, #4
 8005bbc:	0112      	lsls	r2, r2, #4
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	761a      	strb	r2, [r3, #24]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	e000e100 	.word	0xe000e100
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <SysTick_Handler+0x1c>)
 8005bde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005be0:	f002 f986 	bl	8007ef0 <xTaskGetSchedulerState>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d001      	beq.n	8005bee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005bea:	f000 fd9d 	bl	8006728 <xPortSysTickHandler>
  }
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	e000e010 	.word	0xe000e010

08005bf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	f06f 0004 	mvn.w	r0, #4
 8005c02:	f7ff ffbf 	bl	8005b84 <__NVIC_SetPriority>
#endif
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c12:	f3ef 8305 	mrs	r3, IPSR
 8005c16:	603b      	str	r3, [r7, #0]
  return(result);
 8005c18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c1e:	f06f 0305 	mvn.w	r3, #5
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	e00c      	b.n	8005c40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <osKernelInitialize+0x44>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c2e:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <osKernelInitialize+0x44>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	e002      	b.n	8005c40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c40:	687b      	ldr	r3, [r7, #4]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	240002e4 	.word	0x240002e4

08005c54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c5a:	f3ef 8305 	mrs	r3, IPSR
 8005c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c66:	f06f 0305 	mvn.w	r3, #5
 8005c6a:	607b      	str	r3, [r7, #4]
 8005c6c:	e010      	b.n	8005c90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c9c <osKernelStart+0x48>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d109      	bne.n	8005c8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c76:	f7ff ffbf 	bl	8005bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c7a:	4b08      	ldr	r3, [pc, #32]	@ (8005c9c <osKernelStart+0x48>)
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c80:	f001 fcd2 	bl	8007628 <vTaskStartScheduler>
      stat = osOK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e002      	b.n	8005c90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c90:	687b      	ldr	r3, [r7, #4]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	240002e4 	.word	0x240002e4

08005ca0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08e      	sub	sp, #56	@ 0x38
 8005ca4:	af04      	add	r7, sp, #16
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb0:	f3ef 8305 	mrs	r3, IPSR
 8005cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8005cb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d17e      	bne.n	8005dba <osThreadNew+0x11a>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d07b      	beq.n	8005dba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005cc2:	2380      	movs	r3, #128	@ 0x80
 8005cc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005cc6:	2318      	movs	r3, #24
 8005cc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d045      	beq.n	8005d66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <osThreadNew+0x48>
        name = attr->name;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <osThreadNew+0x6e>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2b38      	cmp	r3, #56	@ 0x38
 8005d00:	d805      	bhi.n	8005d0e <osThreadNew+0x6e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <osThreadNew+0x72>
        return (NULL);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e054      	b.n	8005dbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	089b      	lsrs	r3, r3, #2
 8005d20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00e      	beq.n	8005d48 <osThreadNew+0xa8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005d30:	d90a      	bls.n	8005d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d006      	beq.n	8005d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <osThreadNew+0xa8>
        mem = 1;
 8005d42:	2301      	movs	r3, #1
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e010      	b.n	8005d6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10c      	bne.n	8005d6a <osThreadNew+0xca>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d108      	bne.n	8005d6a <osThreadNew+0xca>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <osThreadNew+0xca>
          mem = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e001      	b.n	8005d6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d110      	bne.n	8005d92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d78:	9202      	str	r2, [sp, #8]
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f001 fa5a 	bl	8007240 <xTaskCreateStatic>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e013      	b.n	8005dba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d110      	bne.n	8005dba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f107 0310 	add.w	r3, r7, #16
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f001 faa8 	bl	8007300 <xTaskCreate>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d001      	beq.n	8005dba <osThreadNew+0x11a>
            hTask = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dba:	693b      	ldr	r3, [r7, #16]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3728      	adds	r7, #40	@ 0x28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dcc:	f3ef 8305 	mrs	r3, IPSR
 8005dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <osDelay+0x1c>
    stat = osErrorISR;
 8005dd8:	f06f 0305 	mvn.w	r3, #5
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e007      	b.n	8005df0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 fbe6 	bl	80075bc <vTaskDelay>
    }
  }

  return (stat);
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a07      	ldr	r2, [pc, #28]	@ (8005e28 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4a06      	ldr	r2, [pc, #24]	@ (8005e2c <vApplicationGetIdleTaskMemory+0x30>)
 8005e12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2280      	movs	r2, #128	@ 0x80
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	240002e8 	.word	0x240002e8
 8005e2c:	24000390 	.word	0x24000390

08005e30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a07      	ldr	r2, [pc, #28]	@ (8005e5c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4a06      	ldr	r2, [pc, #24]	@ (8005e60 <vApplicationGetTimerTaskMemory+0x30>)
 8005e46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e4e:	601a      	str	r2, [r3, #0]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	24000590 	.word	0x24000590
 8005e60:	24000638 	.word	0x24000638

08005e64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	@ 0x28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e70:	f001 fc4a 	bl	8007708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e74:	4b5c      	ldr	r3, [pc, #368]	@ (8005fe8 <pvPortMalloc+0x184>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e7c:	f000 f924 	bl	80060c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e80:	4b5a      	ldr	r3, [pc, #360]	@ (8005fec <pvPortMalloc+0x188>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 8095 	bne.w	8005fb8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01e      	beq.n	8005ed2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005e94:	2208      	movs	r2, #8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d015      	beq.n	8005ed2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	3308      	adds	r3, #8
 8005eae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	e7fd      	b.n	8005ece <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d06f      	beq.n	8005fb8 <pvPortMalloc+0x154>
 8005ed8:	4b45      	ldr	r3, [pc, #276]	@ (8005ff0 <pvPortMalloc+0x18c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d86a      	bhi.n	8005fb8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ee2:	4b44      	ldr	r3, [pc, #272]	@ (8005ff4 <pvPortMalloc+0x190>)
 8005ee4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ee6:	4b43      	ldr	r3, [pc, #268]	@ (8005ff4 <pvPortMalloc+0x190>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eec:	e004      	b.n	8005ef8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d903      	bls.n	8005f0a <pvPortMalloc+0xa6>
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f1      	bne.n	8005eee <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f0a:	4b37      	ldr	r3, [pc, #220]	@ (8005fe8 <pvPortMalloc+0x184>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d051      	beq.n	8005fb8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2208      	movs	r2, #8
 8005f1a:	4413      	add	r3, r2
 8005f1c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	1ad2      	subs	r2, r2, r3
 8005f2e:	2308      	movs	r3, #8
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d920      	bls.n	8005f78 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <pvPortMalloc+0xfc>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	613b      	str	r3, [r7, #16]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f72:	69b8      	ldr	r0, [r7, #24]
 8005f74:	f000 f90a 	bl	800618c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f78:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff0 <pvPortMalloc+0x18c>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff0 <pvPortMalloc+0x18c>)
 8005f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f86:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <pvPortMalloc+0x18c>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <pvPortMalloc+0x194>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d203      	bcs.n	8005f9a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f92:	4b17      	ldr	r3, [pc, #92]	@ (8005ff0 <pvPortMalloc+0x18c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a18      	ldr	r2, [pc, #96]	@ (8005ff8 <pvPortMalloc+0x194>)
 8005f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	4b13      	ldr	r3, [pc, #76]	@ (8005fec <pvPortMalloc+0x188>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005fae:	4b13      	ldr	r3, [pc, #76]	@ (8005ffc <pvPortMalloc+0x198>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a11      	ldr	r2, [pc, #68]	@ (8005ffc <pvPortMalloc+0x198>)
 8005fb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fb8:	f001 fbb4 	bl	8007724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <pvPortMalloc+0x17a>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	60fb      	str	r3, [r7, #12]
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	e7fd      	b.n	8005fda <pvPortMalloc+0x176>
	return pvReturn;
 8005fde:	69fb      	ldr	r3, [r7, #28]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3728      	adds	r7, #40	@ 0x28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	24004640 	.word	0x24004640
 8005fec:	24004654 	.word	0x24004654
 8005ff0:	24004644 	.word	0x24004644
 8005ff4:	24004638 	.word	0x24004638
 8005ff8:	24004648 	.word	0x24004648
 8005ffc:	2400464c 	.word	0x2400464c

08006000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d04f      	beq.n	80060b2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006012:	2308      	movs	r3, #8
 8006014:	425b      	negs	r3, r3
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	4b25      	ldr	r3, [pc, #148]	@ (80060bc <vPortFree+0xbc>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <vPortFree+0x46>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60fb      	str	r3, [r7, #12]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <vPortFree+0x66>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	60bb      	str	r3, [r7, #8]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	4b14      	ldr	r3, [pc, #80]	@ (80060bc <vPortFree+0xbc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4013      	ands	r3, r2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01e      	beq.n	80060b2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d11a      	bne.n	80060b2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <vPortFree+0xbc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	43db      	mvns	r3, r3
 8006086:	401a      	ands	r2, r3
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800608c:	f001 fb3c 	bl	8007708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <vPortFree+0xc0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4413      	add	r3, r2
 800609a:	4a09      	ldr	r2, [pc, #36]	@ (80060c0 <vPortFree+0xc0>)
 800609c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800609e:	6938      	ldr	r0, [r7, #16]
 80060a0:	f000 f874 	bl	800618c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060a4:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <vPortFree+0xc4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	4a06      	ldr	r2, [pc, #24]	@ (80060c4 <vPortFree+0xc4>)
 80060ac:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060ae:	f001 fb39 	bl	8007724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060b2:	bf00      	nop
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	24004654 	.word	0x24004654
 80060c0:	24004644 	.word	0x24004644
 80060c4:	24004650 	.word	0x24004650

080060c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ce:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80060d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060d4:	4b27      	ldr	r3, [pc, #156]	@ (8006174 <prvHeapInit+0xac>)
 80060d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3307      	adds	r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006174 <prvHeapInit+0xac>)
 80060f8:	4413      	add	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006100:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <prvHeapInit+0xb0>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006106:	4b1c      	ldr	r3, [pc, #112]	@ (8006178 <prvHeapInit+0xb0>)
 8006108:	2200      	movs	r2, #0
 800610a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4413      	add	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006114:	2208      	movs	r2, #8
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0307 	bic.w	r3, r3, #7
 8006122:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a15      	ldr	r2, [pc, #84]	@ (800617c <prvHeapInit+0xb4>)
 8006128:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800612a:	4b14      	ldr	r3, [pc, #80]	@ (800617c <prvHeapInit+0xb4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2200      	movs	r2, #0
 8006130:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006132:	4b12      	ldr	r3, [pc, #72]	@ (800617c <prvHeapInit+0xb4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006148:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <prvHeapInit+0xb4>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4a0a      	ldr	r2, [pc, #40]	@ (8006180 <prvHeapInit+0xb8>)
 8006156:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4a09      	ldr	r2, [pc, #36]	@ (8006184 <prvHeapInit+0xbc>)
 800615e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006160:	4b09      	ldr	r3, [pc, #36]	@ (8006188 <prvHeapInit+0xc0>)
 8006162:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006166:	601a      	str	r2, [r3, #0]
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	24000a38 	.word	0x24000a38
 8006178:	24004638 	.word	0x24004638
 800617c:	24004640 	.word	0x24004640
 8006180:	24004648 	.word	0x24004648
 8006184:	24004644 	.word	0x24004644
 8006188:	24004654 	.word	0x24004654

0800618c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006194:	4b28      	ldr	r3, [pc, #160]	@ (8006238 <prvInsertBlockIntoFreeList+0xac>)
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e002      	b.n	80061a0 <prvInsertBlockIntoFreeList+0x14>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d8f7      	bhi.n	800619a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4413      	add	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d108      	bne.n	80061ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	441a      	add	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	441a      	add	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d118      	bne.n	8006214 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b15      	ldr	r3, [pc, #84]	@ (800623c <prvInsertBlockIntoFreeList+0xb0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d00d      	beq.n	800620a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	441a      	add	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e008      	b.n	800621c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800620a:	4b0c      	ldr	r3, [pc, #48]	@ (800623c <prvInsertBlockIntoFreeList+0xb0>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e003      	b.n	800621c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d002      	beq.n	800622a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	24004638 	.word	0x24004638
 800623c:	24004640 	.word	0x24004640

08006240 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f103 0208 	add.w	r2, r3, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f103 0208 	add.w	r2, r3, #8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f103 0208 	add.w	r2, r3, #8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	601a      	str	r2, [r3, #0]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d103      	bne.n	8006302 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e00c      	b.n	800631c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3308      	adds	r3, #8
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e002      	b.n	8006310 <vListInsert+0x2e>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	429a      	cmp	r2, r3
 800631a:	d2f6      	bcs.n	800630a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	601a      	str	r2, [r3, #0]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6892      	ldr	r2, [r2, #8]
 800636a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6852      	ldr	r2, [r2, #4]
 8006374:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d103      	bne.n	8006388 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	1e5a      	subs	r2, r3, #1
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3b04      	subs	r3, #4
 80063b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3b04      	subs	r3, #4
 80063c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3b04      	subs	r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063d8:	4a0c      	ldr	r2, [pc, #48]	@ (800640c <pxPortInitialiseStack+0x64>)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3b14      	subs	r3, #20
 80063e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3b04      	subs	r3, #4
 80063ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f06f 0202 	mvn.w	r2, #2
 80063f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3b20      	subs	r3, #32
 80063fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063fe:	68fb      	ldr	r3, [r7, #12]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	08006411 	.word	0x08006411

08006410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800641a:	4b13      	ldr	r3, [pc, #76]	@ (8006468 <prvTaskExitError+0x58>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006422:	d00b      	beq.n	800643c <prvTaskExitError+0x2c>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60fb      	str	r3, [r7, #12]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <prvTaskExitError+0x28>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60bb      	str	r3, [r7, #8]
}
 800644e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006450:	bf00      	nop
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0fc      	beq.n	8006452 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	24000010 	.word	0x24000010
 800646c:	00000000 	.word	0x00000000

08006470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006470:	4b07      	ldr	r3, [pc, #28]	@ (8006490 <pxCurrentTCBConst2>)
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	6808      	ldr	r0, [r1, #0]
 8006476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647a:	f380 8809 	msr	PSP, r0
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f380 8811 	msr	BASEPRI, r0
 800648a:	4770      	bx	lr
 800648c:	f3af 8000 	nop.w

08006490 <pxCurrentTCBConst2>:
 8006490:	240046a0 	.word	0x240046a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop

08006498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006498:	4808      	ldr	r0, [pc, #32]	@ (80064bc <prvPortStartFirstTask+0x24>)
 800649a:	6800      	ldr	r0, [r0, #0]
 800649c:	6800      	ldr	r0, [r0, #0]
 800649e:	f380 8808 	msr	MSP, r0
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8814 	msr	CONTROL, r0
 80064aa:	b662      	cpsie	i
 80064ac:	b661      	cpsie	f
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	df00      	svc	0
 80064b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064ba:	bf00      	nop
 80064bc:	e000ed08 	.word	0xe000ed08

080064c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064c6:	4b47      	ldr	r3, [pc, #284]	@ (80065e4 <xPortStartScheduler+0x124>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a47      	ldr	r2, [pc, #284]	@ (80065e8 <xPortStartScheduler+0x128>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10b      	bne.n	80064e8 <xPortStartScheduler+0x28>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	613b      	str	r3, [r7, #16]
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	e7fd      	b.n	80064e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064e8:	4b3e      	ldr	r3, [pc, #248]	@ (80065e4 <xPortStartScheduler+0x124>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a3f      	ldr	r2, [pc, #252]	@ (80065ec <xPortStartScheduler+0x12c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10b      	bne.n	800650a <xPortStartScheduler+0x4a>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60fb      	str	r3, [r7, #12]
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	e7fd      	b.n	8006506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800650a:	4b39      	ldr	r3, [pc, #228]	@ (80065f0 <xPortStartScheduler+0x130>)
 800650c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	22ff      	movs	r2, #255	@ 0xff
 800651a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800652c:	b2da      	uxtb	r2, r3
 800652e:	4b31      	ldr	r3, [pc, #196]	@ (80065f4 <xPortStartScheduler+0x134>)
 8006530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006532:	4b31      	ldr	r3, [pc, #196]	@ (80065f8 <xPortStartScheduler+0x138>)
 8006534:	2207      	movs	r2, #7
 8006536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006538:	e009      	b.n	800654e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800653a:	4b2f      	ldr	r3, [pc, #188]	@ (80065f8 <xPortStartScheduler+0x138>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3b01      	subs	r3, #1
 8006540:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <xPortStartScheduler+0x138>)
 8006542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006556:	2b80      	cmp	r3, #128	@ 0x80
 8006558:	d0ef      	beq.n	800653a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800655a:	4b27      	ldr	r3, [pc, #156]	@ (80065f8 <xPortStartScheduler+0x138>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f1c3 0307 	rsb	r3, r3, #7
 8006562:	2b04      	cmp	r3, #4
 8006564:	d00b      	beq.n	800657e <xPortStartScheduler+0xbe>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60bb      	str	r3, [r7, #8]
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	e7fd      	b.n	800657a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800657e:	4b1e      	ldr	r3, [pc, #120]	@ (80065f8 <xPortStartScheduler+0x138>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	4a1c      	ldr	r2, [pc, #112]	@ (80065f8 <xPortStartScheduler+0x138>)
 8006586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006588:	4b1b      	ldr	r3, [pc, #108]	@ (80065f8 <xPortStartScheduler+0x138>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006590:	4a19      	ldr	r2, [pc, #100]	@ (80065f8 <xPortStartScheduler+0x138>)
 8006592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800659c:	4b17      	ldr	r3, [pc, #92]	@ (80065fc <xPortStartScheduler+0x13c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a16      	ldr	r2, [pc, #88]	@ (80065fc <xPortStartScheduler+0x13c>)
 80065a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065a8:	4b14      	ldr	r3, [pc, #80]	@ (80065fc <xPortStartScheduler+0x13c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a13      	ldr	r2, [pc, #76]	@ (80065fc <xPortStartScheduler+0x13c>)
 80065ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80065b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065b4:	f000 f8da 	bl	800676c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065b8:	4b11      	ldr	r3, [pc, #68]	@ (8006600 <xPortStartScheduler+0x140>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065be:	f000 f8f9 	bl	80067b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065c2:	4b10      	ldr	r3, [pc, #64]	@ (8006604 <xPortStartScheduler+0x144>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006604 <xPortStartScheduler+0x144>)
 80065c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80065cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065ce:	f7ff ff63 	bl	8006498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065d2:	f001 fa0f 	bl	80079f4 <vTaskSwitchContext>
	prvTaskExitError();
 80065d6:	f7ff ff1b 	bl	8006410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	e000ed00 	.word	0xe000ed00
 80065e8:	410fc271 	.word	0x410fc271
 80065ec:	410fc270 	.word	0x410fc270
 80065f0:	e000e400 	.word	0xe000e400
 80065f4:	24004658 	.word	0x24004658
 80065f8:	2400465c 	.word	0x2400465c
 80065fc:	e000ed20 	.word	0xe000ed20
 8006600:	24000010 	.word	0x24000010
 8006604:	e000ef34 	.word	0xe000ef34

08006608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	607b      	str	r3, [r7, #4]
}
 8006620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006622:	4b10      	ldr	r3, [pc, #64]	@ (8006664 <vPortEnterCritical+0x5c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	4a0e      	ldr	r2, [pc, #56]	@ (8006664 <vPortEnterCritical+0x5c>)
 800662a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800662c:	4b0d      	ldr	r3, [pc, #52]	@ (8006664 <vPortEnterCritical+0x5c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d110      	bne.n	8006656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006634:	4b0c      	ldr	r3, [pc, #48]	@ (8006668 <vPortEnterCritical+0x60>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <vPortEnterCritical+0x4e>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	603b      	str	r3, [r7, #0]
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	e7fd      	b.n	8006652 <vPortEnterCritical+0x4a>
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	24000010 	.word	0x24000010
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006672:	4b12      	ldr	r3, [pc, #72]	@ (80066bc <vPortExitCritical+0x50>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <vPortExitCritical+0x26>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	607b      	str	r3, [r7, #4]
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	e7fd      	b.n	800668e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006692:	4b0a      	ldr	r3, [pc, #40]	@ (80066bc <vPortExitCritical+0x50>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3b01      	subs	r3, #1
 8006698:	4a08      	ldr	r2, [pc, #32]	@ (80066bc <vPortExitCritical+0x50>)
 800669a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800669c:	4b07      	ldr	r3, [pc, #28]	@ (80066bc <vPortExitCritical+0x50>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d105      	bne.n	80066b0 <vPortExitCritical+0x44>
 80066a4:	2300      	movs	r3, #0
 80066a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	24000010 	.word	0x24000010

080066c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066c0:	f3ef 8009 	mrs	r0, PSP
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4b15      	ldr	r3, [pc, #84]	@ (8006720 <pxCurrentTCBConst>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	f01e 0f10 	tst.w	lr, #16
 80066d0:	bf08      	it	eq
 80066d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	6010      	str	r0, [r2, #0]
 80066dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80066e4:	f380 8811 	msr	BASEPRI, r0
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f001 f980 	bl	80079f4 <vTaskSwitchContext>
 80066f4:	f04f 0000 	mov.w	r0, #0
 80066f8:	f380 8811 	msr	BASEPRI, r0
 80066fc:	bc09      	pop	{r0, r3}
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	6808      	ldr	r0, [r1, #0]
 8006702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006706:	f01e 0f10 	tst.w	lr, #16
 800670a:	bf08      	it	eq
 800670c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006710:	f380 8809 	msr	PSP, r0
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	f3af 8000 	nop.w

08006720 <pxCurrentTCBConst>:
 8006720:	240046a0 	.word	0x240046a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop

08006728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	607b      	str	r3, [r7, #4]
}
 8006740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006742:	f001 f89d 	bl	8007880 <xTaskIncrementTick>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800674c:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <xPortSysTickHandler+0x40>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f383 8811 	msr	BASEPRI, r3
}
 800675e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006770:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <vPortSetupTimerInterrupt+0x34>)
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006776:	4b0b      	ldr	r3, [pc, #44]	@ (80067a4 <vPortSetupTimerInterrupt+0x38>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800677c:	4b0a      	ldr	r3, [pc, #40]	@ (80067a8 <vPortSetupTimerInterrupt+0x3c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a0a      	ldr	r2, [pc, #40]	@ (80067ac <vPortSetupTimerInterrupt+0x40>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	099b      	lsrs	r3, r3, #6
 8006788:	4a09      	ldr	r2, [pc, #36]	@ (80067b0 <vPortSetupTimerInterrupt+0x44>)
 800678a:	3b01      	subs	r3, #1
 800678c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800678e:	4b04      	ldr	r3, [pc, #16]	@ (80067a0 <vPortSetupTimerInterrupt+0x34>)
 8006790:	2207      	movs	r2, #7
 8006792:	601a      	str	r2, [r3, #0]
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000e010 	.word	0xe000e010
 80067a4:	e000e018 	.word	0xe000e018
 80067a8:	24000000 	.word	0x24000000
 80067ac:	10624dd3 	.word	0x10624dd3
 80067b0:	e000e014 	.word	0xe000e014

080067b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80067c4 <vPortEnableVFP+0x10>
 80067b8:	6801      	ldr	r1, [r0, #0]
 80067ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80067be:	6001      	str	r1, [r0, #0]
 80067c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067c2:	bf00      	nop
 80067c4:	e000ed88 	.word	0xe000ed88

080067c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ce:	f3ef 8305 	mrs	r3, IPSR
 80067d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b0f      	cmp	r3, #15
 80067d8:	d915      	bls.n	8006806 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067da:	4a18      	ldr	r2, [pc, #96]	@ (800683c <vPortValidateInterruptPriority+0x74>)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067e4:	4b16      	ldr	r3, [pc, #88]	@ (8006840 <vPortValidateInterruptPriority+0x78>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	7afa      	ldrb	r2, [r7, #11]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d20b      	bcs.n	8006806 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	607b      	str	r3, [r7, #4]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006806:	4b0f      	ldr	r3, [pc, #60]	@ (8006844 <vPortValidateInterruptPriority+0x7c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800680e:	4b0e      	ldr	r3, [pc, #56]	@ (8006848 <vPortValidateInterruptPriority+0x80>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d90b      	bls.n	800682e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	603b      	str	r3, [r7, #0]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <vPortValidateInterruptPriority+0x62>
	}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	e000e3f0 	.word	0xe000e3f0
 8006840:	24004658 	.word	0x24004658
 8006844:	e000ed0c 	.word	0xe000ed0c
 8006848:	2400465c 	.word	0x2400465c

0800684c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10b      	bne.n	8006878 <xQueueGenericReset+0x2c>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60bb      	str	r3, [r7, #8]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006878:	f7ff fec6 	bl	8006608 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	68f9      	ldr	r1, [r7, #12]
 8006886:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	441a      	add	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a8:	3b01      	subs	r3, #1
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	441a      	add	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	22ff      	movs	r2, #255	@ 0xff
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	22ff      	movs	r2, #255	@ 0xff
 80068c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d114      	bne.n	80068f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d01a      	beq.n	800690c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3310      	adds	r3, #16
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 f942 	bl	8007b64 <xTaskRemoveFromEventList>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d012      	beq.n	800690c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068e6:	4b0d      	ldr	r3, [pc, #52]	@ (800691c <xQueueGenericReset+0xd0>)
 80068e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	e009      	b.n	800690c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3310      	adds	r3, #16
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff fc9f 	bl	8006240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3324      	adds	r3, #36	@ 0x24
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fc9a 	bl	8006240 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800690c:	f7ff feae 	bl	800666c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006910:	2301      	movs	r3, #1
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	e000ed04 	.word	0xe000ed04

08006920 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08e      	sub	sp, #56	@ 0x38
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	e7fd      	b.n	8006948 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <xQueueGenericCreateStatic+0x56>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <xQueueGenericCreateStatic+0x5a>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <xQueueGenericCreateStatic+0x5c>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10b      	bne.n	8006998 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	623b      	str	r3, [r7, #32]
}
 8006992:	bf00      	nop
 8006994:	bf00      	nop
 8006996:	e7fd      	b.n	8006994 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <xQueueGenericCreateStatic+0x84>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <xQueueGenericCreateStatic+0x88>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <xQueueGenericCreateStatic+0x8a>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	61fb      	str	r3, [r7, #28]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069c6:	2350      	movs	r3, #80	@ 0x50
 80069c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b50      	cmp	r3, #80	@ 0x50
 80069ce:	d00b      	beq.n	80069e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61bb      	str	r3, [r7, #24]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	4613      	mov	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f805 	bl	8006a1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3730      	adds	r7, #48	@ 0x30
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e002      	b.n	8006a3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a48:	2101      	movs	r1, #1
 8006a4a:	69b8      	ldr	r0, [r7, #24]
 8006a4c:	f7ff fefe 	bl	800684c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08e      	sub	sp, #56	@ 0x38
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <xQueueGenericSend+0x34>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <xQueueGenericSend+0x42>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <xQueueGenericSend+0x46>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericSend+0x48>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <xQueueGenericSend+0x64>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d103      	bne.n	8006ad2 <xQueueGenericSend+0x72>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <xQueueGenericSend+0x76>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGenericSend+0x78>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xQueueGenericSend+0x94>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	623b      	str	r3, [r7, #32]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af4:	f001 f9fc 	bl	8007ef0 <xTaskGetSchedulerState>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <xQueueGenericSend+0xa4>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <xQueueGenericSend+0xa8>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <xQueueGenericSend+0xaa>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	61fb      	str	r3, [r7, #28]
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	e7fd      	b.n	8006b22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b26:	f7ff fd6f 	bl	8006608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d302      	bcc.n	8006b3c <xQueueGenericSend+0xdc>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d129      	bne.n	8006b90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b42:	f000 fa0f 	bl	8006f64 <prvCopyDataToQueue>
 8006b46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d010      	beq.n	8006b72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	3324      	adds	r3, #36	@ 0x24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f001 f805 	bl	8007b64 <xTaskRemoveFromEventList>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d013      	beq.n	8006b88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b60:	4b3f      	ldr	r3, [pc, #252]	@ (8006c60 <xQueueGenericSend+0x200>)
 8006b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	e00a      	b.n	8006b88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b78:	4b39      	ldr	r3, [pc, #228]	@ (8006c60 <xQueueGenericSend+0x200>)
 8006b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b88:	f7ff fd70 	bl	800666c <vPortExitCritical>
				return pdPASS;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e063      	b.n	8006c58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d103      	bne.n	8006b9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b96:	f7ff fd69 	bl	800666c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e05c      	b.n	8006c58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ba4:	f107 0314 	add.w	r3, r7, #20
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f83f 	bl	8007c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bb2:	f7ff fd5b 	bl	800666c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bb6:	f000 fda7 	bl	8007708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bba:	f7ff fd25 	bl	8006608 <vPortEnterCritical>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bc4:	b25b      	sxtb	r3, r3
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d103      	bne.n	8006bd4 <xQueueGenericSend+0x174>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bda:	b25b      	sxtb	r3, r3
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d103      	bne.n	8006bea <xQueueGenericSend+0x18a>
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bea:	f7ff fd3f 	bl	800666c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bee:	1d3a      	adds	r2, r7, #4
 8006bf0:	f107 0314 	add.w	r3, r7, #20
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 f82e 	bl	8007c58 <xTaskCheckForTimeOut>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d124      	bne.n	8006c4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c04:	f000 faa6 	bl	8007154 <prvIsQueueFull>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d018      	beq.n	8006c40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	3310      	adds	r3, #16
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4611      	mov	r1, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 ff52 	bl	8007ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c1e:	f000 fa31 	bl	8007084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c22:	f000 fd7f 	bl	8007724 <xTaskResumeAll>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f47f af7c 	bne.w	8006b26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <xQueueGenericSend+0x200>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	e772      	b.n	8006b26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c42:	f000 fa1f 	bl	8007084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c46:	f000 fd6d 	bl	8007724 <xTaskResumeAll>
 8006c4a:	e76c      	b.n	8006b26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c4e:	f000 fa19 	bl	8007084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c52:	f000 fd67 	bl	8007724 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3738      	adds	r7, #56	@ 0x38
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b090      	sub	sp, #64	@ 0x40
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSendFromISR+0x3e>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xQueueGenericSendFromISR+0x42>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <xQueueGenericSendFromISR+0x44>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d103      	bne.n	8006cd2 <xQueueGenericSendFromISR+0x6e>
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <xQueueGenericSendFromISR+0x72>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <xQueueGenericSendFromISR+0x74>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	623b      	str	r3, [r7, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cf4:	f7ff fd68 	bl	80067c8 <vPortValidateInterruptPriority>
	__asm volatile
 8006cf8:	f3ef 8211 	mrs	r2, BASEPRI
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	61fa      	str	r2, [r7, #28]
 8006d0e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006d10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <xQueueGenericSendFromISR+0xc2>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d12f      	bne.n	8006d86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d3c:	f000 f912 	bl	8006f64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d112      	bne.n	8006d70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	3324      	adds	r3, #36	@ 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 ff04 	bl	8007b64 <xTaskRemoveFromEventList>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e007      	b.n	8006d80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006d74:	3301      	adds	r3, #1
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	b25a      	sxtb	r2, r3
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d80:	2301      	movs	r3, #1
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006d84:	e001      	b.n	8006d8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f383 8811 	msr	BASEPRI, r3
}
 8006d94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3740      	adds	r7, #64	@ 0x40
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08c      	sub	sp, #48	@ 0x30
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10b      	bne.n	8006dd2 <xQueueReceive+0x32>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	623b      	str	r3, [r7, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	e7fd      	b.n	8006dce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d103      	bne.n	8006de0 <xQueueReceive+0x40>
 8006dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <xQueueReceive+0x44>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <xQueueReceive+0x46>
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <xQueueReceive+0x62>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	61fb      	str	r3, [r7, #28]
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	e7fd      	b.n	8006dfe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e02:	f001 f875 	bl	8007ef0 <xTaskGetSchedulerState>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d102      	bne.n	8006e12 <xQueueReceive+0x72>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <xQueueReceive+0x76>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueReceive+0x78>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <xQueueReceive+0x94>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	61bb      	str	r3, [r7, #24]
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e34:	f7ff fbe8 	bl	8006608 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01f      	beq.n	8006e84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e48:	f000 f8f6 	bl	8007038 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	1e5a      	subs	r2, r3, #1
 8006e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00f      	beq.n	8006e7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5e:	3310      	adds	r3, #16
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fe7f 	bl	8007b64 <xTaskRemoveFromEventList>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f60 <xQueueReceive+0x1c0>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e7c:	f7ff fbf6 	bl	800666c <vPortExitCritical>
				return pdPASS;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e069      	b.n	8006f58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d103      	bne.n	8006e92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e8a:	f7ff fbef 	bl	800666c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e062      	b.n	8006f58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e98:	f107 0310 	add.w	r3, r7, #16
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fec5 	bl	8007c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea6:	f7ff fbe1 	bl	800666c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eaa:	f000 fc2d 	bl	8007708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eae:	f7ff fbab 	bl	8006608 <vPortEnterCritical>
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb8:	b25b      	sxtb	r3, r3
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d103      	bne.n	8006ec8 <xQueueReceive+0x128>
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d103      	bne.n	8006ede <xQueueReceive+0x13e>
 8006ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ede:	f7ff fbc5 	bl	800666c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ee2:	1d3a      	adds	r2, r7, #4
 8006ee4:	f107 0310 	add.w	r3, r7, #16
 8006ee8:	4611      	mov	r1, r2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 feb4 	bl	8007c58 <xTaskCheckForTimeOut>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d123      	bne.n	8006f3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ef8:	f000 f916 	bl	8007128 <prvIsQueueEmpty>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f04:	3324      	adds	r3, #36	@ 0x24
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4611      	mov	r1, r2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fdd8 	bl	8007ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f12:	f000 f8b7 	bl	8007084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f16:	f000 fc05 	bl	8007724 <xTaskResumeAll>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d189      	bne.n	8006e34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006f20:	4b0f      	ldr	r3, [pc, #60]	@ (8006f60 <xQueueReceive+0x1c0>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	e780      	b.n	8006e34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f34:	f000 f8a6 	bl	8007084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f38:	f000 fbf4 	bl	8007724 <xTaskResumeAll>
 8006f3c:	e77a      	b.n	8006e34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f40:	f000 f8a0 	bl	8007084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f44:	f000 fbee 	bl	8007724 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f4a:	f000 f8ed 	bl	8007128 <prvIsQueueEmpty>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f43f af6f 	beq.w	8006e34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3730      	adds	r7, #48	@ 0x30
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10d      	bne.n	8006f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d14d      	bne.n	8007026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 ffcc 	bl	8007f2c <xTaskPriorityDisinherit>
 8006f94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	e043      	b.n	8007026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d119      	bne.n	8006fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6858      	ldr	r0, [r3, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fac:	461a      	mov	r2, r3
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	f002 f9ff 	bl	80093b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbc:	441a      	add	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d32b      	bcc.n	8007026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	e026      	b.n	8007026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68d8      	ldr	r0, [r3, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	f002 f9e5 	bl	80093b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff0:	425b      	negs	r3, r3
 8006ff2:	441a      	add	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d207      	bcs.n	8007014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700c:	425b      	negs	r3, r3
 800700e:	441a      	add	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d105      	bne.n	8007026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3b01      	subs	r3, #1
 8007024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800702e:	697b      	ldr	r3, [r7, #20]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d018      	beq.n	800707c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007052:	441a      	add	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	429a      	cmp	r2, r3
 8007062:	d303      	bcc.n	800706c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68d9      	ldr	r1, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007074:	461a      	mov	r2, r3
 8007076:	6838      	ldr	r0, [r7, #0]
 8007078:	f002 f99b 	bl	80093b2 <memcpy>
	}
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800708c:	f7ff fabc 	bl	8006608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007098:	e011      	b.n	80070be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d012      	beq.n	80070c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3324      	adds	r3, #36	@ 0x24
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fd5c 	bl	8007b64 <xTaskRemoveFromEventList>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070b2:	f000 fe35 	bl	8007d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dce9      	bgt.n	800709a <prvUnlockQueue+0x16>
 80070c6:	e000      	b.n	80070ca <prvUnlockQueue+0x46>
					break;
 80070c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	22ff      	movs	r2, #255	@ 0xff
 80070ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80070d2:	f7ff facb 	bl	800666c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070d6:	f7ff fa97 	bl	8006608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070e2:	e011      	b.n	8007108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d012      	beq.n	8007112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3310      	adds	r3, #16
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fd37 	bl	8007b64 <xTaskRemoveFromEventList>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070fc:	f000 fe10 	bl	8007d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	3b01      	subs	r3, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800710c:	2b00      	cmp	r3, #0
 800710e:	dce9      	bgt.n	80070e4 <prvUnlockQueue+0x60>
 8007110:	e000      	b.n	8007114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	22ff      	movs	r2, #255	@ 0xff
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800711c:	f7ff faa6 	bl	800666c <vPortExitCritical>
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007130:	f7ff fa6a 	bl	8006608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800713c:	2301      	movs	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e001      	b.n	8007146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007146:	f7ff fa91 	bl	800666c <vPortExitCritical>

	return xReturn;
 800714a:	68fb      	ldr	r3, [r7, #12]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800715c:	f7ff fa54 	bl	8006608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	429a      	cmp	r2, r3
 800716a:	d102      	bne.n	8007172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800716c:	2301      	movs	r3, #1
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e001      	b.n	8007176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007176:	f7ff fa79 	bl	800666c <vPortExitCritical>

	return xReturn;
 800717a:	68fb      	ldr	r3, [r7, #12]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e014      	b.n	80071be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007194:	4a0f      	ldr	r2, [pc, #60]	@ (80071d4 <vQueueAddToRegistry+0x50>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10b      	bne.n	80071b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071a0:	490c      	ldr	r1, [pc, #48]	@ (80071d4 <vQueueAddToRegistry+0x50>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071aa:	4a0a      	ldr	r2, [pc, #40]	@ (80071d4 <vQueueAddToRegistry+0x50>)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	4413      	add	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071b6:	e006      	b.n	80071c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b07      	cmp	r3, #7
 80071c2:	d9e7      	bls.n	8007194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	24004660 	.word	0x24004660

080071d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071e8:	f7ff fa0e 	bl	8006608 <vPortEnterCritical>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071f2:	b25b      	sxtb	r3, r3
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d103      	bne.n	8007202 <vQueueWaitForMessageRestricted+0x2a>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007208:	b25b      	sxtb	r3, r3
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d103      	bne.n	8007218 <vQueueWaitForMessageRestricted+0x40>
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007218:	f7ff fa28 	bl	800666c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	3324      	adds	r3, #36	@ 0x24
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fc6d 	bl	8007b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007232:	6978      	ldr	r0, [r7, #20]
 8007234:	f7ff ff26 	bl	8007084 <prvUnlockQueue>
	}
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08e      	sub	sp, #56	@ 0x38
 8007244:	af04      	add	r7, sp, #16
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800724e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10b      	bne.n	800726c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	623b      	str	r3, [r7, #32]
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	61fb      	str	r3, [r7, #28]
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	e7fd      	b.n	8007286 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800728a:	23a8      	movs	r3, #168	@ 0xa8
 800728c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2ba8      	cmp	r3, #168	@ 0xa8
 8007292:	d00b      	beq.n	80072ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	61bb      	str	r3, [r7, #24]
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	e7fd      	b.n	80072a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01e      	beq.n	80072f2 <xTaskCreateStatic+0xb2>
 80072b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01b      	beq.n	80072f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072cc:	2300      	movs	r3, #0
 80072ce:	9303      	str	r3, [sp, #12]
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	9302      	str	r3, [sp, #8]
 80072d4:	f107 0314 	add.w	r3, r7, #20
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	68b9      	ldr	r1, [r7, #8]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f851 	bl	800738c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072ec:	f000 f8f6 	bl	80074dc <prvAddNewTaskToReadyList>
 80072f0:	e001      	b.n	80072f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072f6:	697b      	ldr	r3, [r7, #20]
	}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3728      	adds	r7, #40	@ 0x28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08c      	sub	sp, #48	@ 0x30
 8007304:	af04      	add	r7, sp, #16
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	4613      	mov	r3, r2
 800730e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fda5 	bl	8005e64 <pvPortMalloc>
 800731a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00e      	beq.n	8007340 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007322:	20a8      	movs	r0, #168	@ 0xa8
 8007324:	f7fe fd9e 	bl	8005e64 <pvPortMalloc>
 8007328:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	631a      	str	r2, [r3, #48]	@ 0x30
 8007336:	e005      	b.n	8007344 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007338:	6978      	ldr	r0, [r7, #20]
 800733a:	f7fe fe61 	bl	8006000 <vPortFree>
 800733e:	e001      	b.n	8007344 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007340:	2300      	movs	r3, #0
 8007342:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d017      	beq.n	800737a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007352:	88fa      	ldrh	r2, [r7, #6]
 8007354:	2300      	movs	r3, #0
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	9302      	str	r3, [sp, #8]
 800735c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f80f 	bl	800738c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800736e:	69f8      	ldr	r0, [r7, #28]
 8007370:	f000 f8b4 	bl	80074dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007374:	2301      	movs	r3, #1
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	e002      	b.n	8007380 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800737a:	f04f 33ff 	mov.w	r3, #4294967295
 800737e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007380:	69bb      	ldr	r3, [r7, #24]
	}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	461a      	mov	r2, r3
 80073a4:	21a5      	movs	r1, #165	@ 0xa5
 80073a6:	f001 ff2e 	bl	8009206 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80073b4:	440b      	add	r3, r1
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	f023 0307 	bic.w	r3, r3, #7
 80073c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	617b      	str	r3, [r7, #20]
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	e7fd      	b.n	80073e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01f      	beq.n	800742c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	e012      	b.n	8007418 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	7819      	ldrb	r1, [r3, #0]
 80073fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	3334      	adds	r3, #52	@ 0x34
 8007402:	460a      	mov	r2, r1
 8007404:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d006      	beq.n	8007420 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	3301      	adds	r3, #1
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b0f      	cmp	r3, #15
 800741c:	d9e9      	bls.n	80073f2 <prvInitialiseNewTask+0x66>
 800741e:	e000      	b.n	8007422 <prvInitialiseNewTask+0x96>
			{
				break;
 8007420:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800742a:	e003      	b.n	8007434 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007436:	2b37      	cmp	r3, #55	@ 0x37
 8007438:	d901      	bls.n	800743e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800743a:	2337      	movs	r3, #55	@ 0x37
 800743c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007442:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007448:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	2200      	movs	r2, #0
 800744e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	3304      	adds	r3, #4
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe ff13 	bl	8006280 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	3318      	adds	r3, #24
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe ff0e 	bl	8006280 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007468:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007478:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	2200      	movs	r2, #0
 800747e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	2200      	movs	r2, #0
 8007486:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	3354      	adds	r3, #84	@ 0x54
 800748e:	224c      	movs	r2, #76	@ 0x4c
 8007490:	2100      	movs	r1, #0
 8007492:	4618      	mov	r0, r3
 8007494:	f001 feb7 	bl	8009206 <memset>
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	4a0d      	ldr	r2, [pc, #52]	@ (80074d0 <prvInitialiseNewTask+0x144>)
 800749c:	659a      	str	r2, [r3, #88]	@ 0x58
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	4a0c      	ldr	r2, [pc, #48]	@ (80074d4 <prvInitialiseNewTask+0x148>)
 80074a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	4a0c      	ldr	r2, [pc, #48]	@ (80074d8 <prvInitialiseNewTask+0x14c>)
 80074a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	69b8      	ldr	r0, [r7, #24]
 80074b0:	f7fe ff7a 	bl	80063a8 <pxPortInitialiseStack>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c6:	bf00      	nop
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	24004ccc 	.word	0x24004ccc
 80074d4:	24004d34 	.word	0x24004d34
 80074d8:	24004d9c 	.word	0x24004d9c

080074dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074e4:	f7ff f890 	bl	8006608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074e8:	4b2d      	ldr	r3, [pc, #180]	@ (80075a0 <prvAddNewTaskToReadyList+0xc4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3301      	adds	r3, #1
 80074ee:	4a2c      	ldr	r2, [pc, #176]	@ (80075a0 <prvAddNewTaskToReadyList+0xc4>)
 80074f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074f2:	4b2c      	ldr	r3, [pc, #176]	@ (80075a4 <prvAddNewTaskToReadyList+0xc8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074fa:	4a2a      	ldr	r2, [pc, #168]	@ (80075a4 <prvAddNewTaskToReadyList+0xc8>)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007500:	4b27      	ldr	r3, [pc, #156]	@ (80075a0 <prvAddNewTaskToReadyList+0xc4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d110      	bne.n	800752a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007508:	f000 fc2e 	bl	8007d68 <prvInitialiseTaskLists>
 800750c:	e00d      	b.n	800752a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800750e:	4b26      	ldr	r3, [pc, #152]	@ (80075a8 <prvAddNewTaskToReadyList+0xcc>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007516:	4b23      	ldr	r3, [pc, #140]	@ (80075a4 <prvAddNewTaskToReadyList+0xc8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	429a      	cmp	r2, r3
 8007522:	d802      	bhi.n	800752a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007524:	4a1f      	ldr	r2, [pc, #124]	@ (80075a4 <prvAddNewTaskToReadyList+0xc8>)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800752a:	4b20      	ldr	r3, [pc, #128]	@ (80075ac <prvAddNewTaskToReadyList+0xd0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	4a1e      	ldr	r2, [pc, #120]	@ (80075ac <prvAddNewTaskToReadyList+0xd0>)
 8007532:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007534:	4b1d      	ldr	r3, [pc, #116]	@ (80075ac <prvAddNewTaskToReadyList+0xd0>)
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007540:	4b1b      	ldr	r3, [pc, #108]	@ (80075b0 <prvAddNewTaskToReadyList+0xd4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d903      	bls.n	8007550 <prvAddNewTaskToReadyList+0x74>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <prvAddNewTaskToReadyList+0xd4>)
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4a15      	ldr	r2, [pc, #84]	@ (80075b4 <prvAddNewTaskToReadyList+0xd8>)
 800755e:	441a      	add	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f7fe fe97 	bl	800629a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800756c:	f7ff f87e 	bl	800666c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007570:	4b0d      	ldr	r3, [pc, #52]	@ (80075a8 <prvAddNewTaskToReadyList+0xcc>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00e      	beq.n	8007596 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007578:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <prvAddNewTaskToReadyList+0xc8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	429a      	cmp	r2, r3
 8007584:	d207      	bcs.n	8007596 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007586:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <prvAddNewTaskToReadyList+0xdc>)
 8007588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	24004b74 	.word	0x24004b74
 80075a4:	240046a0 	.word	0x240046a0
 80075a8:	24004b80 	.word	0x24004b80
 80075ac:	24004b90 	.word	0x24004b90
 80075b0:	24004b7c 	.word	0x24004b7c
 80075b4:	240046a4 	.word	0x240046a4
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d018      	beq.n	8007600 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075ce:	4b14      	ldr	r3, [pc, #80]	@ (8007620 <vTaskDelay+0x64>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00b      	beq.n	80075ee <vTaskDelay+0x32>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60bb      	str	r3, [r7, #8]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075ee:	f000 f88b 	bl	8007708 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075f2:	2100      	movs	r1, #0
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fd09 	bl	800800c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075fa:	f000 f893 	bl	8007724 <xTaskResumeAll>
 80075fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d107      	bne.n	8007616 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007606:	4b07      	ldr	r3, [pc, #28]	@ (8007624 <vTaskDelay+0x68>)
 8007608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	24004b9c 	.word	0x24004b9c
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	@ 0x28
 800762c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007636:	463a      	mov	r2, r7
 8007638:	1d39      	adds	r1, r7, #4
 800763a:	f107 0308 	add.w	r3, r7, #8
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe fbdc 	bl	8005dfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	9202      	str	r2, [sp, #8]
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	2300      	movs	r3, #0
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	2300      	movs	r3, #0
 8007654:	460a      	mov	r2, r1
 8007656:	4924      	ldr	r1, [pc, #144]	@ (80076e8 <vTaskStartScheduler+0xc0>)
 8007658:	4824      	ldr	r0, [pc, #144]	@ (80076ec <vTaskStartScheduler+0xc4>)
 800765a:	f7ff fdf1 	bl	8007240 <xTaskCreateStatic>
 800765e:	4603      	mov	r3, r0
 8007660:	4a23      	ldr	r2, [pc, #140]	@ (80076f0 <vTaskStartScheduler+0xc8>)
 8007662:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007664:	4b22      	ldr	r3, [pc, #136]	@ (80076f0 <vTaskStartScheduler+0xc8>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800766c:	2301      	movs	r3, #1
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	e001      	b.n	8007676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d102      	bne.n	8007682 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800767c:	f000 fd1a 	bl	80080b4 <xTimerCreateTimerTask>
 8007680:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d11b      	bne.n	80076c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	613b      	str	r3, [r7, #16]
}
 800769a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800769c:	4b15      	ldr	r3, [pc, #84]	@ (80076f4 <vTaskStartScheduler+0xcc>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3354      	adds	r3, #84	@ 0x54
 80076a2:	4a15      	ldr	r2, [pc, #84]	@ (80076f8 <vTaskStartScheduler+0xd0>)
 80076a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076a6:	4b15      	ldr	r3, [pc, #84]	@ (80076fc <vTaskStartScheduler+0xd4>)
 80076a8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076ae:	4b14      	ldr	r3, [pc, #80]	@ (8007700 <vTaskStartScheduler+0xd8>)
 80076b0:	2201      	movs	r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076b4:	4b13      	ldr	r3, [pc, #76]	@ (8007704 <vTaskStartScheduler+0xdc>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076ba:	f7fe ff01 	bl	80064c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076be:	e00f      	b.n	80076e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d10b      	bne.n	80076e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	60fb      	str	r3, [r7, #12]
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <vTaskStartScheduler+0xb4>
}
 80076e0:	bf00      	nop
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	0800b078 	.word	0x0800b078
 80076ec:	08007d39 	.word	0x08007d39
 80076f0:	24004b98 	.word	0x24004b98
 80076f4:	240046a0 	.word	0x240046a0
 80076f8:	24000020 	.word	0x24000020
 80076fc:	24004b94 	.word	0x24004b94
 8007700:	24004b80 	.word	0x24004b80
 8007704:	24004b78 	.word	0x24004b78

08007708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800770c:	4b04      	ldr	r3, [pc, #16]	@ (8007720 <vTaskSuspendAll+0x18>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	4a03      	ldr	r2, [pc, #12]	@ (8007720 <vTaskSuspendAll+0x18>)
 8007714:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007716:	bf00      	nop
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	24004b9c 	.word	0x24004b9c

08007724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800772e:	2300      	movs	r3, #0
 8007730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007732:	4b42      	ldr	r3, [pc, #264]	@ (800783c <xTaskResumeAll+0x118>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <xTaskResumeAll+0x2e>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	603b      	str	r3, [r7, #0]
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007752:	f7fe ff59 	bl	8006608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007756:	4b39      	ldr	r3, [pc, #228]	@ (800783c <xTaskResumeAll+0x118>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3b01      	subs	r3, #1
 800775c:	4a37      	ldr	r2, [pc, #220]	@ (800783c <xTaskResumeAll+0x118>)
 800775e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007760:	4b36      	ldr	r3, [pc, #216]	@ (800783c <xTaskResumeAll+0x118>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d162      	bne.n	800782e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007768:	4b35      	ldr	r3, [pc, #212]	@ (8007840 <xTaskResumeAll+0x11c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d05e      	beq.n	800782e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007770:	e02f      	b.n	80077d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007772:	4b34      	ldr	r3, [pc, #208]	@ (8007844 <xTaskResumeAll+0x120>)
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3318      	adds	r3, #24
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fde8 	bl	8006354 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3304      	adds	r3, #4
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fde3 	bl	8006354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007792:	4b2d      	ldr	r3, [pc, #180]	@ (8007848 <xTaskResumeAll+0x124>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d903      	bls.n	80077a2 <xTaskResumeAll+0x7e>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	4a2a      	ldr	r2, [pc, #168]	@ (8007848 <xTaskResumeAll+0x124>)
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4a27      	ldr	r2, [pc, #156]	@ (800784c <xTaskResumeAll+0x128>)
 80077b0:	441a      	add	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4619      	mov	r1, r3
 80077b8:	4610      	mov	r0, r2
 80077ba:	f7fe fd6e 	bl	800629a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c2:	4b23      	ldr	r3, [pc, #140]	@ (8007850 <xTaskResumeAll+0x12c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d302      	bcc.n	80077d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80077cc:	4b21      	ldr	r3, [pc, #132]	@ (8007854 <xTaskResumeAll+0x130>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007844 <xTaskResumeAll+0x120>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1cb      	bne.n	8007772 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077e0:	f000 fb66 	bl	8007eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007858 <xTaskResumeAll+0x134>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d010      	beq.n	8007812 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077f0:	f000 f846 	bl	8007880 <xTaskIncrementTick>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80077fa:	4b16      	ldr	r3, [pc, #88]	@ (8007854 <xTaskResumeAll+0x130>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3b01      	subs	r3, #1
 8007804:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f1      	bne.n	80077f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800780c:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <xTaskResumeAll+0x134>)
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007812:	4b10      	ldr	r3, [pc, #64]	@ (8007854 <xTaskResumeAll+0x130>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800781a:	2301      	movs	r3, #1
 800781c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800781e:	4b0f      	ldr	r3, [pc, #60]	@ (800785c <xTaskResumeAll+0x138>)
 8007820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800782e:	f7fe ff1d 	bl	800666c <vPortExitCritical>

	return xAlreadyYielded;
 8007832:	68bb      	ldr	r3, [r7, #8]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	24004b9c 	.word	0x24004b9c
 8007840:	24004b74 	.word	0x24004b74
 8007844:	24004b34 	.word	0x24004b34
 8007848:	24004b7c 	.word	0x24004b7c
 800784c:	240046a4 	.word	0x240046a4
 8007850:	240046a0 	.word	0x240046a0
 8007854:	24004b88 	.word	0x24004b88
 8007858:	24004b84 	.word	0x24004b84
 800785c:	e000ed04 	.word	0xe000ed04

08007860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007866:	4b05      	ldr	r3, [pc, #20]	@ (800787c <xTaskGetTickCount+0x1c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800786c:	687b      	ldr	r3, [r7, #4]
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	24004b78 	.word	0x24004b78

08007880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800788a:	4b4f      	ldr	r3, [pc, #316]	@ (80079c8 <xTaskIncrementTick+0x148>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 8090 	bne.w	80079b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007894:	4b4d      	ldr	r3, [pc, #308]	@ (80079cc <xTaskIncrementTick+0x14c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800789c:	4a4b      	ldr	r2, [pc, #300]	@ (80079cc <xTaskIncrementTick+0x14c>)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d121      	bne.n	80078ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078a8:	4b49      	ldr	r3, [pc, #292]	@ (80079d0 <xTaskIncrementTick+0x150>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	603b      	str	r3, [r7, #0]
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	e7fd      	b.n	80078c6 <xTaskIncrementTick+0x46>
 80078ca:	4b41      	ldr	r3, [pc, #260]	@ (80079d0 <xTaskIncrementTick+0x150>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	4b40      	ldr	r3, [pc, #256]	@ (80079d4 <xTaskIncrementTick+0x154>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a3e      	ldr	r2, [pc, #248]	@ (80079d0 <xTaskIncrementTick+0x150>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	4a3e      	ldr	r2, [pc, #248]	@ (80079d4 <xTaskIncrementTick+0x154>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	4b3e      	ldr	r3, [pc, #248]	@ (80079d8 <xTaskIncrementTick+0x158>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3301      	adds	r3, #1
 80078e4:	4a3c      	ldr	r2, [pc, #240]	@ (80079d8 <xTaskIncrementTick+0x158>)
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	f000 fae2 	bl	8007eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078ec:	4b3b      	ldr	r3, [pc, #236]	@ (80079dc <xTaskIncrementTick+0x15c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d349      	bcc.n	800798a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078f6:	4b36      	ldr	r3, [pc, #216]	@ (80079d0 <xTaskIncrementTick+0x150>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007900:	4b36      	ldr	r3, [pc, #216]	@ (80079dc <xTaskIncrementTick+0x15c>)
 8007902:	f04f 32ff 	mov.w	r2, #4294967295
 8007906:	601a      	str	r2, [r3, #0]
					break;
 8007908:	e03f      	b.n	800798a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800790a:	4b31      	ldr	r3, [pc, #196]	@ (80079d0 <xTaskIncrementTick+0x150>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d203      	bcs.n	800792a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007922:	4a2e      	ldr	r2, [pc, #184]	@ (80079dc <xTaskIncrementTick+0x15c>)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007928:	e02f      	b.n	800798a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	3304      	adds	r3, #4
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe fd10 	bl	8006354 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	3318      	adds	r3, #24
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe fd07 	bl	8006354 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794a:	4b25      	ldr	r3, [pc, #148]	@ (80079e0 <xTaskIncrementTick+0x160>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d903      	bls.n	800795a <xTaskIncrementTick+0xda>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	4a22      	ldr	r2, [pc, #136]	@ (80079e0 <xTaskIncrementTick+0x160>)
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4a1f      	ldr	r2, [pc, #124]	@ (80079e4 <xTaskIncrementTick+0x164>)
 8007968:	441a      	add	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3304      	adds	r3, #4
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f7fe fc92 	bl	800629a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797a:	4b1b      	ldr	r3, [pc, #108]	@ (80079e8 <xTaskIncrementTick+0x168>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	429a      	cmp	r2, r3
 8007982:	d3b8      	bcc.n	80078f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007988:	e7b5      	b.n	80078f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800798a:	4b17      	ldr	r3, [pc, #92]	@ (80079e8 <xTaskIncrementTick+0x168>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007990:	4914      	ldr	r1, [pc, #80]	@ (80079e4 <xTaskIncrementTick+0x164>)
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d901      	bls.n	80079a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079a6:	4b11      	ldr	r3, [pc, #68]	@ (80079ec <xTaskIncrementTick+0x16c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80079ae:	2301      	movs	r3, #1
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	e004      	b.n	80079be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079b4:	4b0e      	ldr	r3, [pc, #56]	@ (80079f0 <xTaskIncrementTick+0x170>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	4a0d      	ldr	r2, [pc, #52]	@ (80079f0 <xTaskIncrementTick+0x170>)
 80079bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079be:	697b      	ldr	r3, [r7, #20]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	24004b9c 	.word	0x24004b9c
 80079cc:	24004b78 	.word	0x24004b78
 80079d0:	24004b2c 	.word	0x24004b2c
 80079d4:	24004b30 	.word	0x24004b30
 80079d8:	24004b8c 	.word	0x24004b8c
 80079dc:	24004b94 	.word	0x24004b94
 80079e0:	24004b7c 	.word	0x24004b7c
 80079e4:	240046a4 	.word	0x240046a4
 80079e8:	240046a0 	.word	0x240046a0
 80079ec:	24004b88 	.word	0x24004b88
 80079f0:	24004b84 	.word	0x24004b84

080079f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079fa:	4b2b      	ldr	r3, [pc, #172]	@ (8007aa8 <vTaskSwitchContext+0xb4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a02:	4b2a      	ldr	r3, [pc, #168]	@ (8007aac <vTaskSwitchContext+0xb8>)
 8007a04:	2201      	movs	r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a08:	e047      	b.n	8007a9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007a0a:	4b28      	ldr	r3, [pc, #160]	@ (8007aac <vTaskSwitchContext+0xb8>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a10:	4b27      	ldr	r3, [pc, #156]	@ (8007ab0 <vTaskSwitchContext+0xbc>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	e011      	b.n	8007a3c <vTaskSwitchContext+0x48>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <vTaskSwitchContext+0x42>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	e7fd      	b.n	8007a32 <vTaskSwitchContext+0x3e>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	491d      	ldr	r1, [pc, #116]	@ (8007ab4 <vTaskSwitchContext+0xc0>)
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0e3      	beq.n	8007a18 <vTaskSwitchContext+0x24>
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4a16      	ldr	r2, [pc, #88]	@ (8007ab4 <vTaskSwitchContext+0xc0>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60bb      	str	r3, [r7, #8]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	605a      	str	r2, [r3, #4]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	3308      	adds	r3, #8
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d104      	bne.n	8007a80 <vTaskSwitchContext+0x8c>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	605a      	str	r2, [r3, #4]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	4a0c      	ldr	r2, [pc, #48]	@ (8007ab8 <vTaskSwitchContext+0xc4>)
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	4a09      	ldr	r2, [pc, #36]	@ (8007ab0 <vTaskSwitchContext+0xbc>)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a90:	4b09      	ldr	r3, [pc, #36]	@ (8007ab8 <vTaskSwitchContext+0xc4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3354      	adds	r3, #84	@ 0x54
 8007a96:	4a09      	ldr	r2, [pc, #36]	@ (8007abc <vTaskSwitchContext+0xc8>)
 8007a98:	6013      	str	r3, [r2, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	24004b9c 	.word	0x24004b9c
 8007aac:	24004b88 	.word	0x24004b88
 8007ab0:	24004b7c 	.word	0x24004b7c
 8007ab4:	240046a4 	.word	0x240046a4
 8007ab8:	240046a0 	.word	0x240046a0
 8007abc:	24000020 	.word	0x24000020

08007ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	60fb      	str	r3, [r7, #12]
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	e7fd      	b.n	8007ae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ae8:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <vTaskPlaceOnEventList+0x48>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3318      	adds	r3, #24
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fe fbf6 	bl	80062e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007af6:	2101      	movs	r1, #1
 8007af8:	6838      	ldr	r0, [r7, #0]
 8007afa:	f000 fa87 	bl	800800c <prvAddCurrentTaskToDelayedList>
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	240046a0 	.word	0x240046a0

08007b0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	617b      	str	r3, [r7, #20]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b36:	4b0a      	ldr	r3, [pc, #40]	@ (8007b60 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3318      	adds	r3, #24
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7fe fbab 	bl	800629a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	68b8      	ldr	r0, [r7, #8]
 8007b54:	f000 fa5a 	bl	800800c <prvAddCurrentTaskToDelayedList>
	}
 8007b58:	bf00      	nop
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	240046a0 	.word	0x240046a0

08007b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	60fb      	str	r3, [r7, #12]
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	e7fd      	b.n	8007b8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	3318      	adds	r3, #24
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fe fbdc 	bl	8006354 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c14 <xTaskRemoveFromEventList+0xb0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d11d      	bne.n	8007be0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fbd3 	bl	8006354 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb2:	4b19      	ldr	r3, [pc, #100]	@ (8007c18 <xTaskRemoveFromEventList+0xb4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d903      	bls.n	8007bc2 <xTaskRemoveFromEventList+0x5e>
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbe:	4a16      	ldr	r2, [pc, #88]	@ (8007c18 <xTaskRemoveFromEventList+0xb4>)
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4a13      	ldr	r2, [pc, #76]	@ (8007c1c <xTaskRemoveFromEventList+0xb8>)
 8007bd0:	441a      	add	r2, r3
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4610      	mov	r0, r2
 8007bda:	f7fe fb5e 	bl	800629a <vListInsertEnd>
 8007bde:	e005      	b.n	8007bec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3318      	adds	r3, #24
 8007be4:	4619      	mov	r1, r3
 8007be6:	480e      	ldr	r0, [pc, #56]	@ (8007c20 <xTaskRemoveFromEventList+0xbc>)
 8007be8:	f7fe fb57 	bl	800629a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c24 <xTaskRemoveFromEventList+0xc0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d905      	bls.n	8007c06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <xTaskRemoveFromEventList+0xc4>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e001      	b.n	8007c0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c0a:	697b      	ldr	r3, [r7, #20]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	24004b9c 	.word	0x24004b9c
 8007c18:	24004b7c 	.word	0x24004b7c
 8007c1c:	240046a4 	.word	0x240046a4
 8007c20:	24004b34 	.word	0x24004b34
 8007c24:	240046a0 	.word	0x240046a0
 8007c28:	24004b88 	.word	0x24004b88

08007c2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c34:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <vTaskInternalSetTimeOutState+0x24>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <vTaskInternalSetTimeOutState+0x28>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	605a      	str	r2, [r3, #4]
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	24004b8c 	.word	0x24004b8c
 8007c54:	24004b78 	.word	0x24004b78

08007c58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	613b      	str	r3, [r7, #16]
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	e7fd      	b.n	8007c7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60fb      	str	r3, [r7, #12]
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	e7fd      	b.n	8007c9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c9e:	f7fe fcb3 	bl	8006608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d18 <xTaskCheckForTimeOut+0xc0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d102      	bne.n	8007cc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e023      	b.n	8007d0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b15      	ldr	r3, [pc, #84]	@ (8007d1c <xTaskCheckForTimeOut+0xc4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d007      	beq.n	8007cde <xTaskCheckForTimeOut+0x86>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d302      	bcc.n	8007cde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	e015      	b.n	8007d0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d20b      	bcs.n	8007d00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff ff99 	bl	8007c2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	e004      	b.n	8007d0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d0a:	f7fe fcaf 	bl	800666c <vPortExitCritical>

	return xReturn;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	24004b78 	.word	0x24004b78
 8007d1c:	24004b8c 	.word	0x24004b8c

08007d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d24:	4b03      	ldr	r3, [pc, #12]	@ (8007d34 <vTaskMissedYield+0x14>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
}
 8007d2a:	bf00      	nop
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	24004b88 	.word	0x24004b88

08007d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d40:	f000 f852 	bl	8007de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d44:	4b06      	ldr	r3, [pc, #24]	@ (8007d60 <prvIdleTask+0x28>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d9f9      	bls.n	8007d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d4c:	4b05      	ldr	r3, [pc, #20]	@ (8007d64 <prvIdleTask+0x2c>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d5c:	e7f0      	b.n	8007d40 <prvIdleTask+0x8>
 8007d5e:	bf00      	nop
 8007d60:	240046a4 	.word	0x240046a4
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d6e:	2300      	movs	r3, #0
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	e00c      	b.n	8007d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4a12      	ldr	r2, [pc, #72]	@ (8007dc8 <prvInitialiseTaskLists+0x60>)
 8007d80:	4413      	add	r3, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fa5c 	bl	8006240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b37      	cmp	r3, #55	@ 0x37
 8007d92:	d9ef      	bls.n	8007d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d94:	480d      	ldr	r0, [pc, #52]	@ (8007dcc <prvInitialiseTaskLists+0x64>)
 8007d96:	f7fe fa53 	bl	8006240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d9a:	480d      	ldr	r0, [pc, #52]	@ (8007dd0 <prvInitialiseTaskLists+0x68>)
 8007d9c:	f7fe fa50 	bl	8006240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007da0:	480c      	ldr	r0, [pc, #48]	@ (8007dd4 <prvInitialiseTaskLists+0x6c>)
 8007da2:	f7fe fa4d 	bl	8006240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007da6:	480c      	ldr	r0, [pc, #48]	@ (8007dd8 <prvInitialiseTaskLists+0x70>)
 8007da8:	f7fe fa4a 	bl	8006240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dac:	480b      	ldr	r0, [pc, #44]	@ (8007ddc <prvInitialiseTaskLists+0x74>)
 8007dae:	f7fe fa47 	bl	8006240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007db2:	4b0b      	ldr	r3, [pc, #44]	@ (8007de0 <prvInitialiseTaskLists+0x78>)
 8007db4:	4a05      	ldr	r2, [pc, #20]	@ (8007dcc <prvInitialiseTaskLists+0x64>)
 8007db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	@ (8007de4 <prvInitialiseTaskLists+0x7c>)
 8007dba:	4a05      	ldr	r2, [pc, #20]	@ (8007dd0 <prvInitialiseTaskLists+0x68>)
 8007dbc:	601a      	str	r2, [r3, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	240046a4 	.word	0x240046a4
 8007dcc:	24004b04 	.word	0x24004b04
 8007dd0:	24004b18 	.word	0x24004b18
 8007dd4:	24004b34 	.word	0x24004b34
 8007dd8:	24004b48 	.word	0x24004b48
 8007ddc:	24004b60 	.word	0x24004b60
 8007de0:	24004b2c 	.word	0x24004b2c
 8007de4:	24004b30 	.word	0x24004b30

08007de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dee:	e019      	b.n	8007e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007df0:	f7fe fc0a 	bl	8006608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df4:	4b10      	ldr	r3, [pc, #64]	@ (8007e38 <prvCheckTasksWaitingTermination+0x50>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe faa7 	bl	8006354 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e06:	4b0d      	ldr	r3, [pc, #52]	@ (8007e3c <prvCheckTasksWaitingTermination+0x54>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8007e3c <prvCheckTasksWaitingTermination+0x54>)
 8007e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	4a0a      	ldr	r2, [pc, #40]	@ (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e1a:	f7fe fc27 	bl	800666c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f810 	bl	8007e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e24:	4b06      	ldr	r3, [pc, #24]	@ (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e1      	bne.n	8007df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	24004b48 	.word	0x24004b48
 8007e3c:	24004b74 	.word	0x24004b74
 8007e40:	24004b5c 	.word	0x24004b5c

08007e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3354      	adds	r3, #84	@ 0x54
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f9f5 	bl	8009240 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d108      	bne.n	8007e72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe f8cb 	bl	8006000 <vPortFree>
				vPortFree( pxTCB );
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fe f8c8 	bl	8006000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e70:	e019      	b.n	8007ea6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d103      	bne.n	8007e84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fe f8bf 	bl	8006000 <vPortFree>
	}
 8007e82:	e010      	b.n	8007ea6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d00b      	beq.n	8007ea6 <prvDeleteTCB+0x62>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60fb      	str	r3, [r7, #12]
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	e7fd      	b.n	8007ea2 <prvDeleteTCB+0x5e>
	}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee8 <prvResetNextTaskUnblockTime+0x38>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d104      	bne.n	8007eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8007eec <prvResetNextTaskUnblockTime+0x3c>)
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ec8:	e008      	b.n	8007edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eca:	4b07      	ldr	r3, [pc, #28]	@ (8007ee8 <prvResetNextTaskUnblockTime+0x38>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	4a04      	ldr	r2, [pc, #16]	@ (8007eec <prvResetNextTaskUnblockTime+0x3c>)
 8007eda:	6013      	str	r3, [r2, #0]
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	24004b2c 	.word	0x24004b2c
 8007eec:	24004b94 	.word	0x24004b94

08007ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f24 <xTaskGetSchedulerState+0x34>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007efe:	2301      	movs	r3, #1
 8007f00:	607b      	str	r3, [r7, #4]
 8007f02:	e008      	b.n	8007f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f04:	4b08      	ldr	r3, [pc, #32]	@ (8007f28 <xTaskGetSchedulerState+0x38>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	607b      	str	r3, [r7, #4]
 8007f10:	e001      	b.n	8007f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f12:	2300      	movs	r3, #0
 8007f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f16:	687b      	ldr	r3, [r7, #4]
	}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	24004b80 	.word	0x24004b80
 8007f28:	24004b9c 	.word	0x24004b9c

08007f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d058      	beq.n	8007ff4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f42:	4b2f      	ldr	r3, [pc, #188]	@ (8008000 <xTaskPriorityDisinherit+0xd4>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d00b      	beq.n	8007f64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60fb      	str	r3, [r7, #12]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10b      	bne.n	8007f84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60bb      	str	r3, [r7, #8]
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	e7fd      	b.n	8007f80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f88:	1e5a      	subs	r2, r3, #1
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d02c      	beq.n	8007ff4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d128      	bne.n	8007ff4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe f9d4 	bl	8006354 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008004 <xTaskPriorityDisinherit+0xd8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d903      	bls.n	8007fd4 <xTaskPriorityDisinherit+0xa8>
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8008004 <xTaskPriorityDisinherit+0xd8>)
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4a09      	ldr	r2, [pc, #36]	@ (8008008 <xTaskPriorityDisinherit+0xdc>)
 8007fe2:	441a      	add	r2, r3
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4610      	mov	r0, r2
 8007fec:	f7fe f955 	bl	800629a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ff4:	697b      	ldr	r3, [r7, #20]
	}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	240046a0 	.word	0x240046a0
 8008004:	24004b7c 	.word	0x24004b7c
 8008008:	240046a4 	.word	0x240046a4

0800800c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008016:	4b21      	ldr	r3, [pc, #132]	@ (800809c <prvAddCurrentTaskToDelayedList+0x90>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800801c:	4b20      	ldr	r3, [pc, #128]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3304      	adds	r3, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe f996 	bl	8006354 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d10a      	bne.n	8008046 <prvAddCurrentTaskToDelayedList+0x3a>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008036:	4b1a      	ldr	r3, [pc, #104]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4819      	ldr	r0, [pc, #100]	@ (80080a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008040:	f7fe f92b 	bl	800629a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008044:	e026      	b.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800804e:	4b14      	ldr	r3, [pc, #80]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d209      	bcs.n	8008072 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805e:	4b12      	ldr	r3, [pc, #72]	@ (80080a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b0f      	ldr	r3, [pc, #60]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f7fe f939 	bl	80062e2 <vListInsert>
}
 8008070:	e010      	b.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008072:	4b0e      	ldr	r3, [pc, #56]	@ (80080ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b0a      	ldr	r3, [pc, #40]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f7fe f92f 	bl	80062e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008084:	4b0a      	ldr	r3, [pc, #40]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	429a      	cmp	r2, r3
 800808c:	d202      	bcs.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800808e:	4a08      	ldr	r2, [pc, #32]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	6013      	str	r3, [r2, #0]
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	24004b78 	.word	0x24004b78
 80080a0:	240046a0 	.word	0x240046a0
 80080a4:	24004b60 	.word	0x24004b60
 80080a8:	24004b30 	.word	0x24004b30
 80080ac:	24004b2c 	.word	0x24004b2c
 80080b0:	24004b94 	.word	0x24004b94

080080b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08a      	sub	sp, #40	@ 0x28
 80080b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080be:	f000 fb13 	bl	80086e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008138 <xTimerCreateTimerTask+0x84>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d021      	beq.n	800810e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080d2:	1d3a      	adds	r2, r7, #4
 80080d4:	f107 0108 	add.w	r1, r7, #8
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fd fea7 	bl	8005e30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	9202      	str	r2, [sp, #8]
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	2302      	movs	r3, #2
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	460a      	mov	r2, r1
 80080f4:	4911      	ldr	r1, [pc, #68]	@ (800813c <xTimerCreateTimerTask+0x88>)
 80080f6:	4812      	ldr	r0, [pc, #72]	@ (8008140 <xTimerCreateTimerTask+0x8c>)
 80080f8:	f7ff f8a2 	bl	8007240 <xTaskCreateStatic>
 80080fc:	4603      	mov	r3, r0
 80080fe:	4a11      	ldr	r2, [pc, #68]	@ (8008144 <xTimerCreateTimerTask+0x90>)
 8008100:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008102:	4b10      	ldr	r3, [pc, #64]	@ (8008144 <xTimerCreateTimerTask+0x90>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800810a:	2301      	movs	r3, #1
 800810c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	613b      	str	r3, [r7, #16]
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	e7fd      	b.n	8008128 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800812c:	697b      	ldr	r3, [r7, #20]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	24004bd0 	.word	0x24004bd0
 800813c:	0800b080 	.word	0x0800b080
 8008140:	08008281 	.word	0x08008281
 8008144:	24004bd4 	.word	0x24004bd4

08008148 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08a      	sub	sp, #40	@ 0x28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008156:	2300      	movs	r3, #0
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <xTimerGenericCommand+0x30>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	623b      	str	r3, [r7, #32]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008178:	4b19      	ldr	r3, [pc, #100]	@ (80081e0 <xTimerGenericCommand+0x98>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d02a      	beq.n	80081d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b05      	cmp	r3, #5
 8008190:	dc18      	bgt.n	80081c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008192:	f7ff fead 	bl	8007ef0 <xTaskGetSchedulerState>
 8008196:	4603      	mov	r3, r0
 8008198:	2b02      	cmp	r3, #2
 800819a:	d109      	bne.n	80081b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800819c:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <xTimerGenericCommand+0x98>)
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	f107 0110 	add.w	r1, r7, #16
 80081a4:	2300      	movs	r3, #0
 80081a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a8:	f7fe fc5a 	bl	8006a60 <xQueueGenericSend>
 80081ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80081ae:	e012      	b.n	80081d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081b0:	4b0b      	ldr	r3, [pc, #44]	@ (80081e0 <xTimerGenericCommand+0x98>)
 80081b2:	6818      	ldr	r0, [r3, #0]
 80081b4:	f107 0110 	add.w	r1, r7, #16
 80081b8:	2300      	movs	r3, #0
 80081ba:	2200      	movs	r2, #0
 80081bc:	f7fe fc50 	bl	8006a60 <xQueueGenericSend>
 80081c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80081c2:	e008      	b.n	80081d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081c4:	4b06      	ldr	r3, [pc, #24]	@ (80081e0 <xTimerGenericCommand+0x98>)
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	f107 0110 	add.w	r1, r7, #16
 80081cc:	2300      	movs	r3, #0
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	f7fe fd48 	bl	8006c64 <xQueueGenericSendFromISR>
 80081d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3728      	adds	r7, #40	@ 0x28
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	24004bd0 	.word	0x24004bd0

080081e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ee:	4b23      	ldr	r3, [pc, #140]	@ (800827c <prvProcessExpiredTimer+0x98>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fe f8a9 	bl	8006354 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d023      	beq.n	8008258 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	18d1      	adds	r1, r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	6978      	ldr	r0, [r7, #20]
 800821e:	f000 f8d5 	bl	80083cc <prvInsertTimerInActiveList>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d020      	beq.n	800826a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008228:	2300      	movs	r3, #0
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	2300      	movs	r3, #0
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	2100      	movs	r1, #0
 8008232:	6978      	ldr	r0, [r7, #20]
 8008234:	f7ff ff88 	bl	8008148 <xTimerGenericCommand>
 8008238:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d114      	bne.n	800826a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	b2da      	uxtb	r2, r3
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	6978      	ldr	r0, [r7, #20]
 8008270:	4798      	blx	r3
}
 8008272:	bf00      	nop
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	24004bc8 	.word	0x24004bc8

08008280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f859 	bl	8008344 <prvGetNextExpireTime>
 8008292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4619      	mov	r1, r3
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 f805 	bl	80082a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800829e:	f000 f8d7 	bl	8008450 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082a2:	bf00      	nop
 80082a4:	e7f0      	b.n	8008288 <prvTimerTask+0x8>
	...

080082a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082b2:	f7ff fa29 	bl	8007708 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f866 	bl	800838c <prvSampleTimeNow>
 80082c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d130      	bne.n	800832a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <prvProcessTimerOrBlockTask+0x3c>
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d806      	bhi.n	80082e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082d6:	f7ff fa25 	bl	8007724 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082da:	68f9      	ldr	r1, [r7, #12]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff ff81 	bl	80081e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082e2:	e024      	b.n	800832e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082ea:	4b13      	ldr	r3, [pc, #76]	@ (8008338 <prvProcessTimerOrBlockTask+0x90>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <prvProcessTimerOrBlockTask+0x50>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e000      	b.n	80082fa <prvProcessTimerOrBlockTask+0x52>
 80082f8:	2300      	movs	r3, #0
 80082fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082fc:	4b0f      	ldr	r3, [pc, #60]	@ (800833c <prvProcessTimerOrBlockTask+0x94>)
 80082fe:	6818      	ldr	r0, [r3, #0]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4619      	mov	r1, r3
 800830a:	f7fe ff65 	bl	80071d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800830e:	f7ff fa09 	bl	8007724 <xTaskResumeAll>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008318:	4b09      	ldr	r3, [pc, #36]	@ (8008340 <prvProcessTimerOrBlockTask+0x98>)
 800831a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	f3bf 8f6f 	isb	sy
}
 8008328:	e001      	b.n	800832e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800832a:	f7ff f9fb 	bl	8007724 <xTaskResumeAll>
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	24004bcc 	.word	0x24004bcc
 800833c:	24004bd0 	.word	0x24004bd0
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800834c:	4b0e      	ldr	r3, [pc, #56]	@ (8008388 <prvGetNextExpireTime+0x44>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <prvGetNextExpireTime+0x16>
 8008356:	2201      	movs	r2, #1
 8008358:	e000      	b.n	800835c <prvGetNextExpireTime+0x18>
 800835a:	2200      	movs	r2, #0
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d105      	bne.n	8008374 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008368:	4b07      	ldr	r3, [pc, #28]	@ (8008388 <prvGetNextExpireTime+0x44>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e001      	b.n	8008378 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008378:	68fb      	ldr	r3, [r7, #12]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	24004bc8 	.word	0x24004bc8

0800838c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008394:	f7ff fa64 	bl	8007860 <xTaskGetTickCount>
 8008398:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800839a:	4b0b      	ldr	r3, [pc, #44]	@ (80083c8 <prvSampleTimeNow+0x3c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d205      	bcs.n	80083b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083a4:	f000 f93a 	bl	800861c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083b6:	4a04      	ldr	r2, [pc, #16]	@ (80083c8 <prvSampleTimeNow+0x3c>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	24004bd8 	.word	0x24004bd8

080083cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d812      	bhi.n	8008418 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d302      	bcc.n	8008406 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e01b      	b.n	800843e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008406:	4b10      	ldr	r3, [pc, #64]	@ (8008448 <prvInsertTimerInActiveList+0x7c>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3304      	adds	r3, #4
 800840e:	4619      	mov	r1, r3
 8008410:	4610      	mov	r0, r2
 8008412:	f7fd ff66 	bl	80062e2 <vListInsert>
 8008416:	e012      	b.n	800843e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d206      	bcs.n	800842e <prvInsertTimerInActiveList+0x62>
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d302      	bcc.n	800842e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	e007      	b.n	800843e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800842e:	4b07      	ldr	r3, [pc, #28]	@ (800844c <prvInsertTimerInActiveList+0x80>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3304      	adds	r3, #4
 8008436:	4619      	mov	r1, r3
 8008438:	4610      	mov	r0, r2
 800843a:	f7fd ff52 	bl	80062e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800843e:	697b      	ldr	r3, [r7, #20]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	24004bcc 	.word	0x24004bcc
 800844c:	24004bc8 	.word	0x24004bc8

08008450 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08e      	sub	sp, #56	@ 0x38
 8008454:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008456:	e0ce      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	da19      	bge.n	8008492 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800845e:	1d3b      	adds	r3, r7, #4
 8008460:	3304      	adds	r3, #4
 8008462:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10b      	bne.n	8008482 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	61fb      	str	r3, [r7, #28]
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	e7fd      	b.n	800847e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008488:	6850      	ldr	r0, [r2, #4]
 800848a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800848c:	6892      	ldr	r2, [r2, #8]
 800848e:	4611      	mov	r1, r2
 8008490:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f2c0 80ae 	blt.w	80085f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a8:	3304      	adds	r3, #4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fd ff52 	bl	8006354 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084b0:	463b      	mov	r3, r7
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff ff6a 	bl	800838c <prvSampleTimeNow>
 80084b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b09      	cmp	r3, #9
 80084be:	f200 8097 	bhi.w	80085f0 <prvProcessReceivedCommands+0x1a0>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <prvProcessReceivedCommands+0x78>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084f1 	.word	0x080084f1
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	080084f1 	.word	0x080084f1
 80084d4:	08008567 	.word	0x08008567
 80084d8:	0800857b 	.word	0x0800857b
 80084dc:	080085c7 	.word	0x080085c7
 80084e0:	080084f1 	.word	0x080084f1
 80084e4:	080084f1 	.word	0x080084f1
 80084e8:	08008567 	.word	0x08008567
 80084ec:	0800857b 	.word	0x0800857b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	18d1      	adds	r1, r2, r3
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800850e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008510:	f7ff ff5c 	bl	80083cc <prvInsertTimerInActiveList>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d06c      	beq.n	80085f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008520:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d061      	beq.n	80085f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	441a      	add	r2, r3
 8008538:	2300      	movs	r3, #0
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	2300      	movs	r3, #0
 800853e:	2100      	movs	r1, #0
 8008540:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008542:	f7ff fe01 	bl	8008148 <xTimerGenericCommand>
 8008546:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d152      	bne.n	80085f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	61bb      	str	r3, [r7, #24]
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	e7fd      	b.n	8008562 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800856c:	f023 0301 	bic.w	r3, r3, #1
 8008570:	b2da      	uxtb	r2, r3
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008578:	e03d      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800857a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	b2da      	uxtb	r2, r3
 8008586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008588:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008590:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10b      	bne.n	80085b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	617b      	str	r3, [r7, #20]
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	e7fd      	b.n	80085ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	699a      	ldr	r2, [r3, #24]
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	18d1      	adds	r1, r2, r3
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c0:	f7ff ff04 	bl	80083cc <prvInsertTimerInActiveList>
					break;
 80085c4:	e017      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d103      	bne.n	80085dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80085d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d6:	f7fd fd13 	bl	8006000 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085da:	e00c      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085e2:	f023 0301 	bic.w	r3, r3, #1
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80085ee:	e002      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80085f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085f6:	4b08      	ldr	r3, [pc, #32]	@ (8008618 <prvProcessReceivedCommands+0x1c8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	1d39      	adds	r1, r7, #4
 80085fc:	2200      	movs	r2, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fbce 	bl	8006da0 <xQueueReceive>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	f47f af26 	bne.w	8008458 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	3730      	adds	r7, #48	@ 0x30
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	24004bd0 	.word	0x24004bd0

0800861c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008622:	e049      	b.n	80086b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008624:	4b2e      	ldr	r3, [pc, #184]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862e:	4b2c      	ldr	r3, [pc, #176]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3304      	adds	r3, #4
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fe89 	bl	8006354 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	d02f      	beq.n	80086b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	4413      	add	r3, r2
 8008660:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	429a      	cmp	r2, r3
 8008668:	d90e      	bls.n	8008688 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008676:	4b1a      	ldr	r3, [pc, #104]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3304      	adds	r3, #4
 800867e:	4619      	mov	r1, r3
 8008680:	4610      	mov	r0, r2
 8008682:	f7fd fe2e 	bl	80062e2 <vListInsert>
 8008686:	e017      	b.n	80086b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008688:	2300      	movs	r3, #0
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	2100      	movs	r1, #0
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff fd58 	bl	8008148 <xTimerGenericCommand>
 8008698:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10b      	bne.n	80086b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	603b      	str	r3, [r7, #0]
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086b8:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1b0      	bne.n	8008624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086c2:	4b07      	ldr	r3, [pc, #28]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086c8:	4b06      	ldr	r3, [pc, #24]	@ (80086e4 <prvSwitchTimerLists+0xc8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a04      	ldr	r2, [pc, #16]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 80086ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086d0:	4a04      	ldr	r2, [pc, #16]	@ (80086e4 <prvSwitchTimerLists+0xc8>)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	6013      	str	r3, [r2, #0]
}
 80086d6:	bf00      	nop
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	24004bc8 	.word	0x24004bc8
 80086e4:	24004bcc 	.word	0x24004bcc

080086e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086ee:	f7fd ff8b 	bl	8006608 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086f2:	4b15      	ldr	r3, [pc, #84]	@ (8008748 <prvCheckForValidListAndQueue+0x60>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d120      	bne.n	800873c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086fa:	4814      	ldr	r0, [pc, #80]	@ (800874c <prvCheckForValidListAndQueue+0x64>)
 80086fc:	f7fd fda0 	bl	8006240 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008700:	4813      	ldr	r0, [pc, #76]	@ (8008750 <prvCheckForValidListAndQueue+0x68>)
 8008702:	f7fd fd9d 	bl	8006240 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008706:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <prvCheckForValidListAndQueue+0x6c>)
 8008708:	4a10      	ldr	r2, [pc, #64]	@ (800874c <prvCheckForValidListAndQueue+0x64>)
 800870a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800870c:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <prvCheckForValidListAndQueue+0x70>)
 800870e:	4a10      	ldr	r2, [pc, #64]	@ (8008750 <prvCheckForValidListAndQueue+0x68>)
 8008710:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008712:	2300      	movs	r3, #0
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	4b11      	ldr	r3, [pc, #68]	@ (800875c <prvCheckForValidListAndQueue+0x74>)
 8008718:	4a11      	ldr	r2, [pc, #68]	@ (8008760 <prvCheckForValidListAndQueue+0x78>)
 800871a:	2110      	movs	r1, #16
 800871c:	200a      	movs	r0, #10
 800871e:	f7fe f8ff 	bl	8006920 <xQueueGenericCreateStatic>
 8008722:	4603      	mov	r3, r0
 8008724:	4a08      	ldr	r2, [pc, #32]	@ (8008748 <prvCheckForValidListAndQueue+0x60>)
 8008726:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008728:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <prvCheckForValidListAndQueue+0x60>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008730:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <prvCheckForValidListAndQueue+0x60>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	490b      	ldr	r1, [pc, #44]	@ (8008764 <prvCheckForValidListAndQueue+0x7c>)
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fd24 	bl	8007184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800873c:	f7fd ff96 	bl	800666c <vPortExitCritical>
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	24004bd0 	.word	0x24004bd0
 800874c:	24004ba0 	.word	0x24004ba0
 8008750:	24004bb4 	.word	0x24004bb4
 8008754:	24004bc8 	.word	0x24004bc8
 8008758:	24004bcc 	.word	0x24004bcc
 800875c:	24004c7c 	.word	0x24004c7c
 8008760:	24004bdc 	.word	0x24004bdc
 8008764:	0800b088 	.word	0x0800b088

08008768 <__cvt>:
 8008768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876a:	ed2d 8b02 	vpush	{d8}
 800876e:	eeb0 8b40 	vmov.f64	d8, d0
 8008772:	b085      	sub	sp, #20
 8008774:	4617      	mov	r7, r2
 8008776:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008778:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800877a:	ee18 2a90 	vmov	r2, s17
 800877e:	f025 0520 	bic.w	r5, r5, #32
 8008782:	2a00      	cmp	r2, #0
 8008784:	bfb6      	itet	lt
 8008786:	222d      	movlt	r2, #45	@ 0x2d
 8008788:	2200      	movge	r2, #0
 800878a:	eeb1 8b40 	vneglt.f64	d8, d0
 800878e:	2d46      	cmp	r5, #70	@ 0x46
 8008790:	460c      	mov	r4, r1
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	d004      	beq.n	80087a0 <__cvt+0x38>
 8008796:	2d45      	cmp	r5, #69	@ 0x45
 8008798:	d100      	bne.n	800879c <__cvt+0x34>
 800879a:	3401      	adds	r4, #1
 800879c:	2102      	movs	r1, #2
 800879e:	e000      	b.n	80087a2 <__cvt+0x3a>
 80087a0:	2103      	movs	r1, #3
 80087a2:	ab03      	add	r3, sp, #12
 80087a4:	9301      	str	r3, [sp, #4]
 80087a6:	ab02      	add	r3, sp, #8
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	4622      	mov	r2, r4
 80087ac:	4633      	mov	r3, r6
 80087ae:	eeb0 0b48 	vmov.f64	d0, d8
 80087b2:	f000 fe95 	bl	80094e0 <_dtoa_r>
 80087b6:	2d47      	cmp	r5, #71	@ 0x47
 80087b8:	d114      	bne.n	80087e4 <__cvt+0x7c>
 80087ba:	07fb      	lsls	r3, r7, #31
 80087bc:	d50a      	bpl.n	80087d4 <__cvt+0x6c>
 80087be:	1902      	adds	r2, r0, r4
 80087c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80087c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c8:	bf08      	it	eq
 80087ca:	9203      	streq	r2, [sp, #12]
 80087cc:	2130      	movs	r1, #48	@ 0x30
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d319      	bcc.n	8008808 <__cvt+0xa0>
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087d8:	1a1b      	subs	r3, r3, r0
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	b005      	add	sp, #20
 80087de:	ecbd 8b02 	vpop	{d8}
 80087e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e4:	2d46      	cmp	r5, #70	@ 0x46
 80087e6:	eb00 0204 	add.w	r2, r0, r4
 80087ea:	d1e9      	bne.n	80087c0 <__cvt+0x58>
 80087ec:	7803      	ldrb	r3, [r0, #0]
 80087ee:	2b30      	cmp	r3, #48	@ 0x30
 80087f0:	d107      	bne.n	8008802 <__cvt+0x9a>
 80087f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80087f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fa:	bf1c      	itt	ne
 80087fc:	f1c4 0401 	rsbne	r4, r4, #1
 8008800:	6034      	strne	r4, [r6, #0]
 8008802:	6833      	ldr	r3, [r6, #0]
 8008804:	441a      	add	r2, r3
 8008806:	e7db      	b.n	80087c0 <__cvt+0x58>
 8008808:	1c5c      	adds	r4, r3, #1
 800880a:	9403      	str	r4, [sp, #12]
 800880c:	7019      	strb	r1, [r3, #0]
 800880e:	e7de      	b.n	80087ce <__cvt+0x66>

08008810 <__exponent>:
 8008810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008812:	2900      	cmp	r1, #0
 8008814:	bfba      	itte	lt
 8008816:	4249      	neglt	r1, r1
 8008818:	232d      	movlt	r3, #45	@ 0x2d
 800881a:	232b      	movge	r3, #43	@ 0x2b
 800881c:	2909      	cmp	r1, #9
 800881e:	7002      	strb	r2, [r0, #0]
 8008820:	7043      	strb	r3, [r0, #1]
 8008822:	dd29      	ble.n	8008878 <__exponent+0x68>
 8008824:	f10d 0307 	add.w	r3, sp, #7
 8008828:	461d      	mov	r5, r3
 800882a:	270a      	movs	r7, #10
 800882c:	461a      	mov	r2, r3
 800882e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008832:	fb07 1416 	mls	r4, r7, r6, r1
 8008836:	3430      	adds	r4, #48	@ 0x30
 8008838:	f802 4c01 	strb.w	r4, [r2, #-1]
 800883c:	460c      	mov	r4, r1
 800883e:	2c63      	cmp	r4, #99	@ 0x63
 8008840:	f103 33ff 	add.w	r3, r3, #4294967295
 8008844:	4631      	mov	r1, r6
 8008846:	dcf1      	bgt.n	800882c <__exponent+0x1c>
 8008848:	3130      	adds	r1, #48	@ 0x30
 800884a:	1e94      	subs	r4, r2, #2
 800884c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008850:	1c41      	adds	r1, r0, #1
 8008852:	4623      	mov	r3, r4
 8008854:	42ab      	cmp	r3, r5
 8008856:	d30a      	bcc.n	800886e <__exponent+0x5e>
 8008858:	f10d 0309 	add.w	r3, sp, #9
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	42ac      	cmp	r4, r5
 8008860:	bf88      	it	hi
 8008862:	2300      	movhi	r3, #0
 8008864:	3302      	adds	r3, #2
 8008866:	4403      	add	r3, r0
 8008868:	1a18      	subs	r0, r3, r0
 800886a:	b003      	add	sp, #12
 800886c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800886e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008872:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008876:	e7ed      	b.n	8008854 <__exponent+0x44>
 8008878:	2330      	movs	r3, #48	@ 0x30
 800887a:	3130      	adds	r1, #48	@ 0x30
 800887c:	7083      	strb	r3, [r0, #2]
 800887e:	70c1      	strb	r1, [r0, #3]
 8008880:	1d03      	adds	r3, r0, #4
 8008882:	e7f1      	b.n	8008868 <__exponent+0x58>
 8008884:	0000      	movs	r0, r0
	...

08008888 <_printf_float>:
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	b08d      	sub	sp, #52	@ 0x34
 800888e:	460c      	mov	r4, r1
 8008890:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008894:	4616      	mov	r6, r2
 8008896:	461f      	mov	r7, r3
 8008898:	4605      	mov	r5, r0
 800889a:	f000 fcbd 	bl	8009218 <_localeconv_r>
 800889e:	f8d0 b000 	ldr.w	fp, [r0]
 80088a2:	4658      	mov	r0, fp
 80088a4:	f7f7 fd6c 	bl	8000380 <strlen>
 80088a8:	2300      	movs	r3, #0
 80088aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80088ac:	f8d8 3000 	ldr.w	r3, [r8]
 80088b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80088b4:	6822      	ldr	r2, [r4, #0]
 80088b6:	9005      	str	r0, [sp, #20]
 80088b8:	3307      	adds	r3, #7
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	f103 0108 	add.w	r1, r3, #8
 80088c2:	f8c8 1000 	str.w	r1, [r8]
 80088c6:	ed93 0b00 	vldr	d0, [r3]
 80088ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008b28 <_printf_float+0x2a0>
 80088ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80088d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80088d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80088de:	dd24      	ble.n	800892a <_printf_float+0xa2>
 80088e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80088e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e8:	d502      	bpl.n	80088f0 <_printf_float+0x68>
 80088ea:	232d      	movs	r3, #45	@ 0x2d
 80088ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088f0:	498f      	ldr	r1, [pc, #572]	@ (8008b30 <_printf_float+0x2a8>)
 80088f2:	4b90      	ldr	r3, [pc, #576]	@ (8008b34 <_printf_float+0x2ac>)
 80088f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80088f8:	bf94      	ite	ls
 80088fa:	4688      	movls	r8, r1
 80088fc:	4698      	movhi	r8, r3
 80088fe:	f022 0204 	bic.w	r2, r2, #4
 8008902:	2303      	movs	r3, #3
 8008904:	6123      	str	r3, [r4, #16]
 8008906:	6022      	str	r2, [r4, #0]
 8008908:	f04f 0a00 	mov.w	sl, #0
 800890c:	9700      	str	r7, [sp, #0]
 800890e:	4633      	mov	r3, r6
 8008910:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008912:	4621      	mov	r1, r4
 8008914:	4628      	mov	r0, r5
 8008916:	f000 f9d1 	bl	8008cbc <_printf_common>
 800891a:	3001      	adds	r0, #1
 800891c:	f040 8089 	bne.w	8008a32 <_printf_float+0x1aa>
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	b00d      	add	sp, #52	@ 0x34
 8008926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892a:	eeb4 0b40 	vcmp.f64	d0, d0
 800892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008932:	d709      	bvc.n	8008948 <_printf_float+0xc0>
 8008934:	ee10 3a90 	vmov	r3, s1
 8008938:	2b00      	cmp	r3, #0
 800893a:	bfbc      	itt	lt
 800893c:	232d      	movlt	r3, #45	@ 0x2d
 800893e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008942:	497d      	ldr	r1, [pc, #500]	@ (8008b38 <_printf_float+0x2b0>)
 8008944:	4b7d      	ldr	r3, [pc, #500]	@ (8008b3c <_printf_float+0x2b4>)
 8008946:	e7d5      	b.n	80088f4 <_printf_float+0x6c>
 8008948:	6863      	ldr	r3, [r4, #4]
 800894a:	1c59      	adds	r1, r3, #1
 800894c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008950:	d139      	bne.n	80089c6 <_printf_float+0x13e>
 8008952:	2306      	movs	r3, #6
 8008954:	6063      	str	r3, [r4, #4]
 8008956:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800895a:	2300      	movs	r3, #0
 800895c:	6022      	str	r2, [r4, #0]
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	ab0a      	add	r3, sp, #40	@ 0x28
 8008962:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008966:	ab09      	add	r3, sp, #36	@ 0x24
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	6861      	ldr	r1, [r4, #4]
 800896c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008970:	4628      	mov	r0, r5
 8008972:	f7ff fef9 	bl	8008768 <__cvt>
 8008976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800897a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800897c:	4680      	mov	r8, r0
 800897e:	d129      	bne.n	80089d4 <_printf_float+0x14c>
 8008980:	1cc8      	adds	r0, r1, #3
 8008982:	db02      	blt.n	800898a <_printf_float+0x102>
 8008984:	6863      	ldr	r3, [r4, #4]
 8008986:	4299      	cmp	r1, r3
 8008988:	dd41      	ble.n	8008a0e <_printf_float+0x186>
 800898a:	f1a9 0902 	sub.w	r9, r9, #2
 800898e:	fa5f f989 	uxtb.w	r9, r9
 8008992:	3901      	subs	r1, #1
 8008994:	464a      	mov	r2, r9
 8008996:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800899a:	9109      	str	r1, [sp, #36]	@ 0x24
 800899c:	f7ff ff38 	bl	8008810 <__exponent>
 80089a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089a2:	1813      	adds	r3, r2, r0
 80089a4:	2a01      	cmp	r2, #1
 80089a6:	4682      	mov	sl, r0
 80089a8:	6123      	str	r3, [r4, #16]
 80089aa:	dc02      	bgt.n	80089b2 <_printf_float+0x12a>
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	07d2      	lsls	r2, r2, #31
 80089b0:	d501      	bpl.n	80089b6 <_printf_float+0x12e>
 80089b2:	3301      	adds	r3, #1
 80089b4:	6123      	str	r3, [r4, #16]
 80089b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0a6      	beq.n	800890c <_printf_float+0x84>
 80089be:	232d      	movs	r3, #45	@ 0x2d
 80089c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089c4:	e7a2      	b.n	800890c <_printf_float+0x84>
 80089c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80089ca:	d1c4      	bne.n	8008956 <_printf_float+0xce>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1c2      	bne.n	8008956 <_printf_float+0xce>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e7bf      	b.n	8008954 <_printf_float+0xcc>
 80089d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80089d8:	d9db      	bls.n	8008992 <_printf_float+0x10a>
 80089da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80089de:	d118      	bne.n	8008a12 <_printf_float+0x18a>
 80089e0:	2900      	cmp	r1, #0
 80089e2:	6863      	ldr	r3, [r4, #4]
 80089e4:	dd0b      	ble.n	80089fe <_printf_float+0x176>
 80089e6:	6121      	str	r1, [r4, #16]
 80089e8:	b913      	cbnz	r3, 80089f0 <_printf_float+0x168>
 80089ea:	6822      	ldr	r2, [r4, #0]
 80089ec:	07d0      	lsls	r0, r2, #31
 80089ee:	d502      	bpl.n	80089f6 <_printf_float+0x16e>
 80089f0:	3301      	adds	r3, #1
 80089f2:	440b      	add	r3, r1
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089f8:	f04f 0a00 	mov.w	sl, #0
 80089fc:	e7db      	b.n	80089b6 <_printf_float+0x12e>
 80089fe:	b913      	cbnz	r3, 8008a06 <_printf_float+0x17e>
 8008a00:	6822      	ldr	r2, [r4, #0]
 8008a02:	07d2      	lsls	r2, r2, #31
 8008a04:	d501      	bpl.n	8008a0a <_printf_float+0x182>
 8008a06:	3302      	adds	r3, #2
 8008a08:	e7f4      	b.n	80089f4 <_printf_float+0x16c>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e7f2      	b.n	80089f4 <_printf_float+0x16c>
 8008a0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a14:	4299      	cmp	r1, r3
 8008a16:	db05      	blt.n	8008a24 <_printf_float+0x19c>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	6121      	str	r1, [r4, #16]
 8008a1c:	07d8      	lsls	r0, r3, #31
 8008a1e:	d5ea      	bpl.n	80089f6 <_printf_float+0x16e>
 8008a20:	1c4b      	adds	r3, r1, #1
 8008a22:	e7e7      	b.n	80089f4 <_printf_float+0x16c>
 8008a24:	2900      	cmp	r1, #0
 8008a26:	bfd4      	ite	le
 8008a28:	f1c1 0202 	rsble	r2, r1, #2
 8008a2c:	2201      	movgt	r2, #1
 8008a2e:	4413      	add	r3, r2
 8008a30:	e7e0      	b.n	80089f4 <_printf_float+0x16c>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	055a      	lsls	r2, r3, #21
 8008a36:	d407      	bmi.n	8008a48 <_printf_float+0x1c0>
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	4642      	mov	r2, r8
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	d12a      	bne.n	8008a9c <_printf_float+0x214>
 8008a46:	e76b      	b.n	8008920 <_printf_float+0x98>
 8008a48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008a4c:	f240 80e0 	bls.w	8008c10 <_printf_float+0x388>
 8008a50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008a54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5c:	d133      	bne.n	8008ac6 <_printf_float+0x23e>
 8008a5e:	4a38      	ldr	r2, [pc, #224]	@ (8008b40 <_printf_float+0x2b8>)
 8008a60:	2301      	movs	r3, #1
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	f43f af59 	beq.w	8008920 <_printf_float+0x98>
 8008a6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a72:	4543      	cmp	r3, r8
 8008a74:	db02      	blt.n	8008a7c <_printf_float+0x1f4>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	07d8      	lsls	r0, r3, #31
 8008a7a:	d50f      	bpl.n	8008a9c <_printf_float+0x214>
 8008a7c:	9b05      	ldr	r3, [sp, #20]
 8008a7e:	465a      	mov	r2, fp
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f af4a 	beq.w	8008920 <_printf_float+0x98>
 8008a8c:	f04f 0900 	mov.w	r9, #0
 8008a90:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a94:	f104 0a1a 	add.w	sl, r4, #26
 8008a98:	45c8      	cmp	r8, r9
 8008a9a:	dc09      	bgt.n	8008ab0 <_printf_float+0x228>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	079b      	lsls	r3, r3, #30
 8008aa0:	f100 8107 	bmi.w	8008cb2 <_printf_float+0x42a>
 8008aa4:	68e0      	ldr	r0, [r4, #12]
 8008aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa8:	4298      	cmp	r0, r3
 8008aaa:	bfb8      	it	lt
 8008aac:	4618      	movlt	r0, r3
 8008aae:	e739      	b.n	8008924 <_printf_float+0x9c>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f af30 	beq.w	8008920 <_printf_float+0x98>
 8008ac0:	f109 0901 	add.w	r9, r9, #1
 8008ac4:	e7e8      	b.n	8008a98 <_printf_float+0x210>
 8008ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dc3b      	bgt.n	8008b44 <_printf_float+0x2bc>
 8008acc:	4a1c      	ldr	r2, [pc, #112]	@ (8008b40 <_printf_float+0x2b8>)
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	47b8      	blx	r7
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	f43f af22 	beq.w	8008920 <_printf_float+0x98>
 8008adc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ae0:	ea59 0303 	orrs.w	r3, r9, r3
 8008ae4:	d102      	bne.n	8008aec <_printf_float+0x264>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	07d9      	lsls	r1, r3, #31
 8008aea:	d5d7      	bpl.n	8008a9c <_printf_float+0x214>
 8008aec:	9b05      	ldr	r3, [sp, #20]
 8008aee:	465a      	mov	r2, fp
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	f43f af12 	beq.w	8008920 <_printf_float+0x98>
 8008afc:	f04f 0a00 	mov.w	sl, #0
 8008b00:	f104 0b1a 	add.w	fp, r4, #26
 8008b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b06:	425b      	negs	r3, r3
 8008b08:	4553      	cmp	r3, sl
 8008b0a:	dc01      	bgt.n	8008b10 <_printf_float+0x288>
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	e794      	b.n	8008a3a <_printf_float+0x1b2>
 8008b10:	2301      	movs	r3, #1
 8008b12:	465a      	mov	r2, fp
 8008b14:	4631      	mov	r1, r6
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b8      	blx	r7
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f43f af00 	beq.w	8008920 <_printf_float+0x98>
 8008b20:	f10a 0a01 	add.w	sl, sl, #1
 8008b24:	e7ee      	b.n	8008b04 <_printf_float+0x27c>
 8008b26:	bf00      	nop
 8008b28:	ffffffff 	.word	0xffffffff
 8008b2c:	7fefffff 	.word	0x7fefffff
 8008b30:	0800b0ec 	.word	0x0800b0ec
 8008b34:	0800b0f0 	.word	0x0800b0f0
 8008b38:	0800b0f4 	.word	0x0800b0f4
 8008b3c:	0800b0f8 	.word	0x0800b0f8
 8008b40:	0800b0fc 	.word	0x0800b0fc
 8008b44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b4a:	4553      	cmp	r3, sl
 8008b4c:	bfa8      	it	ge
 8008b4e:	4653      	movge	r3, sl
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	4699      	mov	r9, r3
 8008b54:	dc37      	bgt.n	8008bc6 <_printf_float+0x33e>
 8008b56:	2300      	movs	r3, #0
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b5e:	f104 021a 	add.w	r2, r4, #26
 8008b62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b64:	9907      	ldr	r1, [sp, #28]
 8008b66:	9306      	str	r3, [sp, #24]
 8008b68:	eba3 0309 	sub.w	r3, r3, r9
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	dc31      	bgt.n	8008bd4 <_printf_float+0x34c>
 8008b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b72:	459a      	cmp	sl, r3
 8008b74:	dc3b      	bgt.n	8008bee <_printf_float+0x366>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	07da      	lsls	r2, r3, #31
 8008b7a:	d438      	bmi.n	8008bee <_printf_float+0x366>
 8008b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b7e:	ebaa 0903 	sub.w	r9, sl, r3
 8008b82:	9b06      	ldr	r3, [sp, #24]
 8008b84:	ebaa 0303 	sub.w	r3, sl, r3
 8008b88:	4599      	cmp	r9, r3
 8008b8a:	bfa8      	it	ge
 8008b8c:	4699      	movge	r9, r3
 8008b8e:	f1b9 0f00 	cmp.w	r9, #0
 8008b92:	dc34      	bgt.n	8008bfe <_printf_float+0x376>
 8008b94:	f04f 0800 	mov.w	r8, #0
 8008b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b9c:	f104 0b1a 	add.w	fp, r4, #26
 8008ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba2:	ebaa 0303 	sub.w	r3, sl, r3
 8008ba6:	eba3 0309 	sub.w	r3, r3, r9
 8008baa:	4543      	cmp	r3, r8
 8008bac:	f77f af76 	ble.w	8008a9c <_printf_float+0x214>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	465a      	mov	r2, fp
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f43f aeb0 	beq.w	8008920 <_printf_float+0x98>
 8008bc0:	f108 0801 	add.w	r8, r8, #1
 8008bc4:	e7ec      	b.n	8008ba0 <_printf_float+0x318>
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d1c1      	bne.n	8008b56 <_printf_float+0x2ce>
 8008bd2:	e6a5      	b.n	8008920 <_printf_float+0x98>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	4628      	mov	r0, r5
 8008bda:	9206      	str	r2, [sp, #24]
 8008bdc:	47b8      	blx	r7
 8008bde:	3001      	adds	r0, #1
 8008be0:	f43f ae9e 	beq.w	8008920 <_printf_float+0x98>
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	9a06      	ldr	r2, [sp, #24]
 8008be8:	3301      	adds	r3, #1
 8008bea:	9307      	str	r3, [sp, #28]
 8008bec:	e7b9      	b.n	8008b62 <_printf_float+0x2da>
 8008bee:	9b05      	ldr	r3, [sp, #20]
 8008bf0:	465a      	mov	r2, fp
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b8      	blx	r7
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d1bf      	bne.n	8008b7c <_printf_float+0x2f4>
 8008bfc:	e690      	b.n	8008920 <_printf_float+0x98>
 8008bfe:	9a06      	ldr	r2, [sp, #24]
 8008c00:	464b      	mov	r3, r9
 8008c02:	4442      	add	r2, r8
 8008c04:	4631      	mov	r1, r6
 8008c06:	4628      	mov	r0, r5
 8008c08:	47b8      	blx	r7
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d1c2      	bne.n	8008b94 <_printf_float+0x30c>
 8008c0e:	e687      	b.n	8008920 <_printf_float+0x98>
 8008c10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008c14:	f1b9 0f01 	cmp.w	r9, #1
 8008c18:	dc01      	bgt.n	8008c1e <_printf_float+0x396>
 8008c1a:	07db      	lsls	r3, r3, #31
 8008c1c:	d536      	bpl.n	8008c8c <_printf_float+0x404>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4642      	mov	r2, r8
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f ae79 	beq.w	8008920 <_printf_float+0x98>
 8008c2e:	9b05      	ldr	r3, [sp, #20]
 8008c30:	465a      	mov	r2, fp
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	f43f ae71 	beq.w	8008920 <_printf_float+0x98>
 8008c3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008c42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c4e:	d018      	beq.n	8008c82 <_printf_float+0x3fa>
 8008c50:	464b      	mov	r3, r9
 8008c52:	f108 0201 	add.w	r2, r8, #1
 8008c56:	4631      	mov	r1, r6
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b8      	blx	r7
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d10c      	bne.n	8008c7a <_printf_float+0x3f2>
 8008c60:	e65e      	b.n	8008920 <_printf_float+0x98>
 8008c62:	2301      	movs	r3, #1
 8008c64:	465a      	mov	r2, fp
 8008c66:	4631      	mov	r1, r6
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b8      	blx	r7
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	f43f ae57 	beq.w	8008920 <_printf_float+0x98>
 8008c72:	f108 0801 	add.w	r8, r8, #1
 8008c76:	45c8      	cmp	r8, r9
 8008c78:	dbf3      	blt.n	8008c62 <_printf_float+0x3da>
 8008c7a:	4653      	mov	r3, sl
 8008c7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c80:	e6dc      	b.n	8008a3c <_printf_float+0x1b4>
 8008c82:	f04f 0800 	mov.w	r8, #0
 8008c86:	f104 0b1a 	add.w	fp, r4, #26
 8008c8a:	e7f4      	b.n	8008c76 <_printf_float+0x3ee>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	4642      	mov	r2, r8
 8008c90:	e7e1      	b.n	8008c56 <_printf_float+0x3ce>
 8008c92:	2301      	movs	r3, #1
 8008c94:	464a      	mov	r2, r9
 8008c96:	4631      	mov	r1, r6
 8008c98:	4628      	mov	r0, r5
 8008c9a:	47b8      	blx	r7
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	f43f ae3f 	beq.w	8008920 <_printf_float+0x98>
 8008ca2:	f108 0801 	add.w	r8, r8, #1
 8008ca6:	68e3      	ldr	r3, [r4, #12]
 8008ca8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008caa:	1a5b      	subs	r3, r3, r1
 8008cac:	4543      	cmp	r3, r8
 8008cae:	dcf0      	bgt.n	8008c92 <_printf_float+0x40a>
 8008cb0:	e6f8      	b.n	8008aa4 <_printf_float+0x21c>
 8008cb2:	f04f 0800 	mov.w	r8, #0
 8008cb6:	f104 0919 	add.w	r9, r4, #25
 8008cba:	e7f4      	b.n	8008ca6 <_printf_float+0x41e>

08008cbc <_printf_common>:
 8008cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	4698      	mov	r8, r3
 8008cc4:	688a      	ldr	r2, [r1, #8]
 8008cc6:	690b      	ldr	r3, [r1, #16]
 8008cc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	bfb8      	it	lt
 8008cd0:	4613      	movlt	r3, r2
 8008cd2:	6033      	str	r3, [r6, #0]
 8008cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cd8:	4607      	mov	r7, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	b10a      	cbz	r2, 8008ce2 <_printf_common+0x26>
 8008cde:	3301      	adds	r3, #1
 8008ce0:	6033      	str	r3, [r6, #0]
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	0699      	lsls	r1, r3, #26
 8008ce6:	bf42      	ittt	mi
 8008ce8:	6833      	ldrmi	r3, [r6, #0]
 8008cea:	3302      	addmi	r3, #2
 8008cec:	6033      	strmi	r3, [r6, #0]
 8008cee:	6825      	ldr	r5, [r4, #0]
 8008cf0:	f015 0506 	ands.w	r5, r5, #6
 8008cf4:	d106      	bne.n	8008d04 <_printf_common+0x48>
 8008cf6:	f104 0a19 	add.w	sl, r4, #25
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	6832      	ldr	r2, [r6, #0]
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dc26      	bgt.n	8008d52 <_printf_common+0x96>
 8008d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d08:	6822      	ldr	r2, [r4, #0]
 8008d0a:	3b00      	subs	r3, #0
 8008d0c:	bf18      	it	ne
 8008d0e:	2301      	movne	r3, #1
 8008d10:	0692      	lsls	r2, r2, #26
 8008d12:	d42b      	bmi.n	8008d6c <_printf_common+0xb0>
 8008d14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d18:	4641      	mov	r1, r8
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	47c8      	blx	r9
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d01e      	beq.n	8008d60 <_printf_common+0xa4>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	f003 0306 	and.w	r3, r3, #6
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	bf02      	ittt	eq
 8008d2e:	68e5      	ldreq	r5, [r4, #12]
 8008d30:	6833      	ldreq	r3, [r6, #0]
 8008d32:	1aed      	subeq	r5, r5, r3
 8008d34:	68a3      	ldr	r3, [r4, #8]
 8008d36:	bf0c      	ite	eq
 8008d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d3c:	2500      	movne	r5, #0
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	bfc4      	itt	gt
 8008d42:	1a9b      	subgt	r3, r3, r2
 8008d44:	18ed      	addgt	r5, r5, r3
 8008d46:	2600      	movs	r6, #0
 8008d48:	341a      	adds	r4, #26
 8008d4a:	42b5      	cmp	r5, r6
 8008d4c:	d11a      	bne.n	8008d84 <_printf_common+0xc8>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	e008      	b.n	8008d64 <_printf_common+0xa8>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4652      	mov	r2, sl
 8008d56:	4641      	mov	r1, r8
 8008d58:	4638      	mov	r0, r7
 8008d5a:	47c8      	blx	r9
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d103      	bne.n	8008d68 <_printf_common+0xac>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d68:	3501      	adds	r5, #1
 8008d6a:	e7c6      	b.n	8008cfa <_printf_common+0x3e>
 8008d6c:	18e1      	adds	r1, r4, r3
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	2030      	movs	r0, #48	@ 0x30
 8008d72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d76:	4422      	add	r2, r4
 8008d78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d80:	3302      	adds	r3, #2
 8008d82:	e7c7      	b.n	8008d14 <_printf_common+0x58>
 8008d84:	2301      	movs	r3, #1
 8008d86:	4622      	mov	r2, r4
 8008d88:	4641      	mov	r1, r8
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	47c8      	blx	r9
 8008d8e:	3001      	adds	r0, #1
 8008d90:	d0e6      	beq.n	8008d60 <_printf_common+0xa4>
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7d9      	b.n	8008d4a <_printf_common+0x8e>
	...

08008d98 <_printf_i>:
 8008d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	7e0f      	ldrb	r7, [r1, #24]
 8008d9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008da0:	2f78      	cmp	r7, #120	@ 0x78
 8008da2:	4691      	mov	r9, r2
 8008da4:	4680      	mov	r8, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	469a      	mov	sl, r3
 8008daa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dae:	d807      	bhi.n	8008dc0 <_printf_i+0x28>
 8008db0:	2f62      	cmp	r7, #98	@ 0x62
 8008db2:	d80a      	bhi.n	8008dca <_printf_i+0x32>
 8008db4:	2f00      	cmp	r7, #0
 8008db6:	f000 80d2 	beq.w	8008f5e <_printf_i+0x1c6>
 8008dba:	2f58      	cmp	r7, #88	@ 0x58
 8008dbc:	f000 80b9 	beq.w	8008f32 <_printf_i+0x19a>
 8008dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008dc8:	e03a      	b.n	8008e40 <_printf_i+0xa8>
 8008dca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dce:	2b15      	cmp	r3, #21
 8008dd0:	d8f6      	bhi.n	8008dc0 <_printf_i+0x28>
 8008dd2:	a101      	add	r1, pc, #4	@ (adr r1, 8008dd8 <_printf_i+0x40>)
 8008dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd8:	08008e31 	.word	0x08008e31
 8008ddc:	08008e45 	.word	0x08008e45
 8008de0:	08008dc1 	.word	0x08008dc1
 8008de4:	08008dc1 	.word	0x08008dc1
 8008de8:	08008dc1 	.word	0x08008dc1
 8008dec:	08008dc1 	.word	0x08008dc1
 8008df0:	08008e45 	.word	0x08008e45
 8008df4:	08008dc1 	.word	0x08008dc1
 8008df8:	08008dc1 	.word	0x08008dc1
 8008dfc:	08008dc1 	.word	0x08008dc1
 8008e00:	08008dc1 	.word	0x08008dc1
 8008e04:	08008f45 	.word	0x08008f45
 8008e08:	08008e6f 	.word	0x08008e6f
 8008e0c:	08008eff 	.word	0x08008eff
 8008e10:	08008dc1 	.word	0x08008dc1
 8008e14:	08008dc1 	.word	0x08008dc1
 8008e18:	08008f67 	.word	0x08008f67
 8008e1c:	08008dc1 	.word	0x08008dc1
 8008e20:	08008e6f 	.word	0x08008e6f
 8008e24:	08008dc1 	.word	0x08008dc1
 8008e28:	08008dc1 	.word	0x08008dc1
 8008e2c:	08008f07 	.word	0x08008f07
 8008e30:	6833      	ldr	r3, [r6, #0]
 8008e32:	1d1a      	adds	r2, r3, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6032      	str	r2, [r6, #0]
 8008e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e40:	2301      	movs	r3, #1
 8008e42:	e09d      	b.n	8008f80 <_printf_i+0x1e8>
 8008e44:	6833      	ldr	r3, [r6, #0]
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	1d19      	adds	r1, r3, #4
 8008e4a:	6031      	str	r1, [r6, #0]
 8008e4c:	0606      	lsls	r6, r0, #24
 8008e4e:	d501      	bpl.n	8008e54 <_printf_i+0xbc>
 8008e50:	681d      	ldr	r5, [r3, #0]
 8008e52:	e003      	b.n	8008e5c <_printf_i+0xc4>
 8008e54:	0645      	lsls	r5, r0, #25
 8008e56:	d5fb      	bpl.n	8008e50 <_printf_i+0xb8>
 8008e58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e5c:	2d00      	cmp	r5, #0
 8008e5e:	da03      	bge.n	8008e68 <_printf_i+0xd0>
 8008e60:	232d      	movs	r3, #45	@ 0x2d
 8008e62:	426d      	negs	r5, r5
 8008e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e68:	4859      	ldr	r0, [pc, #356]	@ (8008fd0 <_printf_i+0x238>)
 8008e6a:	230a      	movs	r3, #10
 8008e6c:	e011      	b.n	8008e92 <_printf_i+0xfa>
 8008e6e:	6821      	ldr	r1, [r4, #0]
 8008e70:	6833      	ldr	r3, [r6, #0]
 8008e72:	0608      	lsls	r0, r1, #24
 8008e74:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e78:	d402      	bmi.n	8008e80 <_printf_i+0xe8>
 8008e7a:	0649      	lsls	r1, r1, #25
 8008e7c:	bf48      	it	mi
 8008e7e:	b2ad      	uxthmi	r5, r5
 8008e80:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e82:	4853      	ldr	r0, [pc, #332]	@ (8008fd0 <_printf_i+0x238>)
 8008e84:	6033      	str	r3, [r6, #0]
 8008e86:	bf14      	ite	ne
 8008e88:	230a      	movne	r3, #10
 8008e8a:	2308      	moveq	r3, #8
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e92:	6866      	ldr	r6, [r4, #4]
 8008e94:	60a6      	str	r6, [r4, #8]
 8008e96:	2e00      	cmp	r6, #0
 8008e98:	bfa2      	ittt	ge
 8008e9a:	6821      	ldrge	r1, [r4, #0]
 8008e9c:	f021 0104 	bicge.w	r1, r1, #4
 8008ea0:	6021      	strge	r1, [r4, #0]
 8008ea2:	b90d      	cbnz	r5, 8008ea8 <_printf_i+0x110>
 8008ea4:	2e00      	cmp	r6, #0
 8008ea6:	d04b      	beq.n	8008f40 <_printf_i+0x1a8>
 8008ea8:	4616      	mov	r6, r2
 8008eaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eae:	fb03 5711 	mls	r7, r3, r1, r5
 8008eb2:	5dc7      	ldrb	r7, [r0, r7]
 8008eb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008eb8:	462f      	mov	r7, r5
 8008eba:	42bb      	cmp	r3, r7
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	d9f4      	bls.n	8008eaa <_printf_i+0x112>
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d10b      	bne.n	8008edc <_printf_i+0x144>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	07df      	lsls	r7, r3, #31
 8008ec8:	d508      	bpl.n	8008edc <_printf_i+0x144>
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	6861      	ldr	r1, [r4, #4]
 8008ece:	4299      	cmp	r1, r3
 8008ed0:	bfde      	ittt	le
 8008ed2:	2330      	movle	r3, #48	@ 0x30
 8008ed4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ed8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008edc:	1b92      	subs	r2, r2, r6
 8008ede:	6122      	str	r2, [r4, #16]
 8008ee0:	f8cd a000 	str.w	sl, [sp]
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	aa03      	add	r2, sp, #12
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4640      	mov	r0, r8
 8008eec:	f7ff fee6 	bl	8008cbc <_printf_common>
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d14a      	bne.n	8008f8a <_printf_i+0x1f2>
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	b004      	add	sp, #16
 8008efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	f043 0320 	orr.w	r3, r3, #32
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	4833      	ldr	r0, [pc, #204]	@ (8008fd4 <_printf_i+0x23c>)
 8008f08:	2778      	movs	r7, #120	@ 0x78
 8008f0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	6831      	ldr	r1, [r6, #0]
 8008f12:	061f      	lsls	r7, r3, #24
 8008f14:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f18:	d402      	bmi.n	8008f20 <_printf_i+0x188>
 8008f1a:	065f      	lsls	r7, r3, #25
 8008f1c:	bf48      	it	mi
 8008f1e:	b2ad      	uxthmi	r5, r5
 8008f20:	6031      	str	r1, [r6, #0]
 8008f22:	07d9      	lsls	r1, r3, #31
 8008f24:	bf44      	itt	mi
 8008f26:	f043 0320 	orrmi.w	r3, r3, #32
 8008f2a:	6023      	strmi	r3, [r4, #0]
 8008f2c:	b11d      	cbz	r5, 8008f36 <_printf_i+0x19e>
 8008f2e:	2310      	movs	r3, #16
 8008f30:	e7ac      	b.n	8008e8c <_printf_i+0xf4>
 8008f32:	4827      	ldr	r0, [pc, #156]	@ (8008fd0 <_printf_i+0x238>)
 8008f34:	e7e9      	b.n	8008f0a <_printf_i+0x172>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	f023 0320 	bic.w	r3, r3, #32
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	e7f6      	b.n	8008f2e <_printf_i+0x196>
 8008f40:	4616      	mov	r6, r2
 8008f42:	e7bd      	b.n	8008ec0 <_printf_i+0x128>
 8008f44:	6833      	ldr	r3, [r6, #0]
 8008f46:	6825      	ldr	r5, [r4, #0]
 8008f48:	6961      	ldr	r1, [r4, #20]
 8008f4a:	1d18      	adds	r0, r3, #4
 8008f4c:	6030      	str	r0, [r6, #0]
 8008f4e:	062e      	lsls	r6, r5, #24
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	d501      	bpl.n	8008f58 <_printf_i+0x1c0>
 8008f54:	6019      	str	r1, [r3, #0]
 8008f56:	e002      	b.n	8008f5e <_printf_i+0x1c6>
 8008f58:	0668      	lsls	r0, r5, #25
 8008f5a:	d5fb      	bpl.n	8008f54 <_printf_i+0x1bc>
 8008f5c:	8019      	strh	r1, [r3, #0]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	6123      	str	r3, [r4, #16]
 8008f62:	4616      	mov	r6, r2
 8008f64:	e7bc      	b.n	8008ee0 <_printf_i+0x148>
 8008f66:	6833      	ldr	r3, [r6, #0]
 8008f68:	1d1a      	adds	r2, r3, #4
 8008f6a:	6032      	str	r2, [r6, #0]
 8008f6c:	681e      	ldr	r6, [r3, #0]
 8008f6e:	6862      	ldr	r2, [r4, #4]
 8008f70:	2100      	movs	r1, #0
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7f7 f9b4 	bl	80002e0 <memchr>
 8008f78:	b108      	cbz	r0, 8008f7e <_printf_i+0x1e6>
 8008f7a:	1b80      	subs	r0, r0, r6
 8008f7c:	6060      	str	r0, [r4, #4]
 8008f7e:	6863      	ldr	r3, [r4, #4]
 8008f80:	6123      	str	r3, [r4, #16]
 8008f82:	2300      	movs	r3, #0
 8008f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f88:	e7aa      	b.n	8008ee0 <_printf_i+0x148>
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	4632      	mov	r2, r6
 8008f8e:	4649      	mov	r1, r9
 8008f90:	4640      	mov	r0, r8
 8008f92:	47d0      	blx	sl
 8008f94:	3001      	adds	r0, #1
 8008f96:	d0ad      	beq.n	8008ef4 <_printf_i+0x15c>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	079b      	lsls	r3, r3, #30
 8008f9c:	d413      	bmi.n	8008fc6 <_printf_i+0x22e>
 8008f9e:	68e0      	ldr	r0, [r4, #12]
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	4298      	cmp	r0, r3
 8008fa4:	bfb8      	it	lt
 8008fa6:	4618      	movlt	r0, r3
 8008fa8:	e7a6      	b.n	8008ef8 <_printf_i+0x160>
 8008faa:	2301      	movs	r3, #1
 8008fac:	4632      	mov	r2, r6
 8008fae:	4649      	mov	r1, r9
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	47d0      	blx	sl
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d09d      	beq.n	8008ef4 <_printf_i+0x15c>
 8008fb8:	3501      	adds	r5, #1
 8008fba:	68e3      	ldr	r3, [r4, #12]
 8008fbc:	9903      	ldr	r1, [sp, #12]
 8008fbe:	1a5b      	subs	r3, r3, r1
 8008fc0:	42ab      	cmp	r3, r5
 8008fc2:	dcf2      	bgt.n	8008faa <_printf_i+0x212>
 8008fc4:	e7eb      	b.n	8008f9e <_printf_i+0x206>
 8008fc6:	2500      	movs	r5, #0
 8008fc8:	f104 0619 	add.w	r6, r4, #25
 8008fcc:	e7f5      	b.n	8008fba <_printf_i+0x222>
 8008fce:	bf00      	nop
 8008fd0:	0800b0fe 	.word	0x0800b0fe
 8008fd4:	0800b10f 	.word	0x0800b10f

08008fd8 <std>:
 8008fd8:	2300      	movs	r3, #0
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	4604      	mov	r4, r0
 8008fde:	e9c0 3300 	strd	r3, r3, [r0]
 8008fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fe6:	6083      	str	r3, [r0, #8]
 8008fe8:	8181      	strh	r1, [r0, #12]
 8008fea:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fec:	81c2      	strh	r2, [r0, #14]
 8008fee:	6183      	str	r3, [r0, #24]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	2208      	movs	r2, #8
 8008ff4:	305c      	adds	r0, #92	@ 0x5c
 8008ff6:	f000 f906 	bl	8009206 <memset>
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8009030 <std+0x58>)
 8008ffc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8009034 <std+0x5c>)
 8009000:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009002:	4b0d      	ldr	r3, [pc, #52]	@ (8009038 <std+0x60>)
 8009004:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009006:	4b0d      	ldr	r3, [pc, #52]	@ (800903c <std+0x64>)
 8009008:	6323      	str	r3, [r4, #48]	@ 0x30
 800900a:	4b0d      	ldr	r3, [pc, #52]	@ (8009040 <std+0x68>)
 800900c:	6224      	str	r4, [r4, #32]
 800900e:	429c      	cmp	r4, r3
 8009010:	d006      	beq.n	8009020 <std+0x48>
 8009012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009016:	4294      	cmp	r4, r2
 8009018:	d002      	beq.n	8009020 <std+0x48>
 800901a:	33d0      	adds	r3, #208	@ 0xd0
 800901c:	429c      	cmp	r4, r3
 800901e:	d105      	bne.n	800902c <std+0x54>
 8009020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009028:	f000 b9c0 	b.w	80093ac <__retarget_lock_init_recursive>
 800902c:	bd10      	pop	{r4, pc}
 800902e:	bf00      	nop
 8009030:	08009181 	.word	0x08009181
 8009034:	080091a3 	.word	0x080091a3
 8009038:	080091db 	.word	0x080091db
 800903c:	080091ff 	.word	0x080091ff
 8009040:	24004ccc 	.word	0x24004ccc

08009044 <stdio_exit_handler>:
 8009044:	4a02      	ldr	r2, [pc, #8]	@ (8009050 <stdio_exit_handler+0xc>)
 8009046:	4903      	ldr	r1, [pc, #12]	@ (8009054 <stdio_exit_handler+0x10>)
 8009048:	4803      	ldr	r0, [pc, #12]	@ (8009058 <stdio_exit_handler+0x14>)
 800904a:	f000 b869 	b.w	8009120 <_fwalk_sglue>
 800904e:	bf00      	nop
 8009050:	24000014 	.word	0x24000014
 8009054:	0800ac1d 	.word	0x0800ac1d
 8009058:	24000024 	.word	0x24000024

0800905c <cleanup_stdio>:
 800905c:	6841      	ldr	r1, [r0, #4]
 800905e:	4b0c      	ldr	r3, [pc, #48]	@ (8009090 <cleanup_stdio+0x34>)
 8009060:	4299      	cmp	r1, r3
 8009062:	b510      	push	{r4, lr}
 8009064:	4604      	mov	r4, r0
 8009066:	d001      	beq.n	800906c <cleanup_stdio+0x10>
 8009068:	f001 fdd8 	bl	800ac1c <_fflush_r>
 800906c:	68a1      	ldr	r1, [r4, #8]
 800906e:	4b09      	ldr	r3, [pc, #36]	@ (8009094 <cleanup_stdio+0x38>)
 8009070:	4299      	cmp	r1, r3
 8009072:	d002      	beq.n	800907a <cleanup_stdio+0x1e>
 8009074:	4620      	mov	r0, r4
 8009076:	f001 fdd1 	bl	800ac1c <_fflush_r>
 800907a:	68e1      	ldr	r1, [r4, #12]
 800907c:	4b06      	ldr	r3, [pc, #24]	@ (8009098 <cleanup_stdio+0x3c>)
 800907e:	4299      	cmp	r1, r3
 8009080:	d004      	beq.n	800908c <cleanup_stdio+0x30>
 8009082:	4620      	mov	r0, r4
 8009084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009088:	f001 bdc8 	b.w	800ac1c <_fflush_r>
 800908c:	bd10      	pop	{r4, pc}
 800908e:	bf00      	nop
 8009090:	24004ccc 	.word	0x24004ccc
 8009094:	24004d34 	.word	0x24004d34
 8009098:	24004d9c 	.word	0x24004d9c

0800909c <global_stdio_init.part.0>:
 800909c:	b510      	push	{r4, lr}
 800909e:	4b0b      	ldr	r3, [pc, #44]	@ (80090cc <global_stdio_init.part.0+0x30>)
 80090a0:	4c0b      	ldr	r4, [pc, #44]	@ (80090d0 <global_stdio_init.part.0+0x34>)
 80090a2:	4a0c      	ldr	r2, [pc, #48]	@ (80090d4 <global_stdio_init.part.0+0x38>)
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	4620      	mov	r0, r4
 80090a8:	2200      	movs	r2, #0
 80090aa:	2104      	movs	r1, #4
 80090ac:	f7ff ff94 	bl	8008fd8 <std>
 80090b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090b4:	2201      	movs	r2, #1
 80090b6:	2109      	movs	r1, #9
 80090b8:	f7ff ff8e 	bl	8008fd8 <std>
 80090bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090c0:	2202      	movs	r2, #2
 80090c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c6:	2112      	movs	r1, #18
 80090c8:	f7ff bf86 	b.w	8008fd8 <std>
 80090cc:	24004e04 	.word	0x24004e04
 80090d0:	24004ccc 	.word	0x24004ccc
 80090d4:	08009045 	.word	0x08009045

080090d8 <__sfp_lock_acquire>:
 80090d8:	4801      	ldr	r0, [pc, #4]	@ (80090e0 <__sfp_lock_acquire+0x8>)
 80090da:	f000 b968 	b.w	80093ae <__retarget_lock_acquire_recursive>
 80090de:	bf00      	nop
 80090e0:	24004e0d 	.word	0x24004e0d

080090e4 <__sfp_lock_release>:
 80090e4:	4801      	ldr	r0, [pc, #4]	@ (80090ec <__sfp_lock_release+0x8>)
 80090e6:	f000 b963 	b.w	80093b0 <__retarget_lock_release_recursive>
 80090ea:	bf00      	nop
 80090ec:	24004e0d 	.word	0x24004e0d

080090f0 <__sinit>:
 80090f0:	b510      	push	{r4, lr}
 80090f2:	4604      	mov	r4, r0
 80090f4:	f7ff fff0 	bl	80090d8 <__sfp_lock_acquire>
 80090f8:	6a23      	ldr	r3, [r4, #32]
 80090fa:	b11b      	cbz	r3, 8009104 <__sinit+0x14>
 80090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009100:	f7ff bff0 	b.w	80090e4 <__sfp_lock_release>
 8009104:	4b04      	ldr	r3, [pc, #16]	@ (8009118 <__sinit+0x28>)
 8009106:	6223      	str	r3, [r4, #32]
 8009108:	4b04      	ldr	r3, [pc, #16]	@ (800911c <__sinit+0x2c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1f5      	bne.n	80090fc <__sinit+0xc>
 8009110:	f7ff ffc4 	bl	800909c <global_stdio_init.part.0>
 8009114:	e7f2      	b.n	80090fc <__sinit+0xc>
 8009116:	bf00      	nop
 8009118:	0800905d 	.word	0x0800905d
 800911c:	24004e04 	.word	0x24004e04

08009120 <_fwalk_sglue>:
 8009120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009124:	4607      	mov	r7, r0
 8009126:	4688      	mov	r8, r1
 8009128:	4614      	mov	r4, r2
 800912a:	2600      	movs	r6, #0
 800912c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009130:	f1b9 0901 	subs.w	r9, r9, #1
 8009134:	d505      	bpl.n	8009142 <_fwalk_sglue+0x22>
 8009136:	6824      	ldr	r4, [r4, #0]
 8009138:	2c00      	cmp	r4, #0
 800913a:	d1f7      	bne.n	800912c <_fwalk_sglue+0xc>
 800913c:	4630      	mov	r0, r6
 800913e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009142:	89ab      	ldrh	r3, [r5, #12]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d907      	bls.n	8009158 <_fwalk_sglue+0x38>
 8009148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800914c:	3301      	adds	r3, #1
 800914e:	d003      	beq.n	8009158 <_fwalk_sglue+0x38>
 8009150:	4629      	mov	r1, r5
 8009152:	4638      	mov	r0, r7
 8009154:	47c0      	blx	r8
 8009156:	4306      	orrs	r6, r0
 8009158:	3568      	adds	r5, #104	@ 0x68
 800915a:	e7e9      	b.n	8009130 <_fwalk_sglue+0x10>

0800915c <iprintf>:
 800915c:	b40f      	push	{r0, r1, r2, r3}
 800915e:	b507      	push	{r0, r1, r2, lr}
 8009160:	4906      	ldr	r1, [pc, #24]	@ (800917c <iprintf+0x20>)
 8009162:	ab04      	add	r3, sp, #16
 8009164:	6808      	ldr	r0, [r1, #0]
 8009166:	f853 2b04 	ldr.w	r2, [r3], #4
 800916a:	6881      	ldr	r1, [r0, #8]
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	f001 fbb9 	bl	800a8e4 <_vfiprintf_r>
 8009172:	b003      	add	sp, #12
 8009174:	f85d eb04 	ldr.w	lr, [sp], #4
 8009178:	b004      	add	sp, #16
 800917a:	4770      	bx	lr
 800917c:	24000020 	.word	0x24000020

08009180 <__sread>:
 8009180:	b510      	push	{r4, lr}
 8009182:	460c      	mov	r4, r1
 8009184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009188:	f000 f8c2 	bl	8009310 <_read_r>
 800918c:	2800      	cmp	r0, #0
 800918e:	bfab      	itete	ge
 8009190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009192:	89a3      	ldrhlt	r3, [r4, #12]
 8009194:	181b      	addge	r3, r3, r0
 8009196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800919a:	bfac      	ite	ge
 800919c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800919e:	81a3      	strhlt	r3, [r4, #12]
 80091a0:	bd10      	pop	{r4, pc}

080091a2 <__swrite>:
 80091a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a6:	461f      	mov	r7, r3
 80091a8:	898b      	ldrh	r3, [r1, #12]
 80091aa:	05db      	lsls	r3, r3, #23
 80091ac:	4605      	mov	r5, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	4616      	mov	r6, r2
 80091b2:	d505      	bpl.n	80091c0 <__swrite+0x1e>
 80091b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b8:	2302      	movs	r3, #2
 80091ba:	2200      	movs	r2, #0
 80091bc:	f000 f896 	bl	80092ec <_lseek_r>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	4632      	mov	r2, r6
 80091ce:	463b      	mov	r3, r7
 80091d0:	4628      	mov	r0, r5
 80091d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091d6:	f000 b8ad 	b.w	8009334 <_write_r>

080091da <__sseek>:
 80091da:	b510      	push	{r4, lr}
 80091dc:	460c      	mov	r4, r1
 80091de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e2:	f000 f883 	bl	80092ec <_lseek_r>
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	bf15      	itete	ne
 80091ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091f6:	81a3      	strheq	r3, [r4, #12]
 80091f8:	bf18      	it	ne
 80091fa:	81a3      	strhne	r3, [r4, #12]
 80091fc:	bd10      	pop	{r4, pc}

080091fe <__sclose>:
 80091fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009202:	f000 b80d 	b.w	8009220 <_close_r>

08009206 <memset>:
 8009206:	4402      	add	r2, r0
 8009208:	4603      	mov	r3, r0
 800920a:	4293      	cmp	r3, r2
 800920c:	d100      	bne.n	8009210 <memset+0xa>
 800920e:	4770      	bx	lr
 8009210:	f803 1b01 	strb.w	r1, [r3], #1
 8009214:	e7f9      	b.n	800920a <memset+0x4>
	...

08009218 <_localeconv_r>:
 8009218:	4800      	ldr	r0, [pc, #0]	@ (800921c <_localeconv_r+0x4>)
 800921a:	4770      	bx	lr
 800921c:	24000160 	.word	0x24000160

08009220 <_close_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d06      	ldr	r5, [pc, #24]	@ (800923c <_close_r+0x1c>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	f7f7 fe64 	bl	8000ef8 <_close>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_close_r+0x1a>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_close_r+0x1a>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	24004e08 	.word	0x24004e08

08009240 <_reclaim_reent>:
 8009240:	4b29      	ldr	r3, [pc, #164]	@ (80092e8 <_reclaim_reent+0xa8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4283      	cmp	r3, r0
 8009246:	b570      	push	{r4, r5, r6, lr}
 8009248:	4604      	mov	r4, r0
 800924a:	d04b      	beq.n	80092e4 <_reclaim_reent+0xa4>
 800924c:	69c3      	ldr	r3, [r0, #28]
 800924e:	b1ab      	cbz	r3, 800927c <_reclaim_reent+0x3c>
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	b16b      	cbz	r3, 8009270 <_reclaim_reent+0x30>
 8009254:	2500      	movs	r5, #0
 8009256:	69e3      	ldr	r3, [r4, #28]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	5959      	ldr	r1, [r3, r5]
 800925c:	2900      	cmp	r1, #0
 800925e:	d13b      	bne.n	80092d8 <_reclaim_reent+0x98>
 8009260:	3504      	adds	r5, #4
 8009262:	2d80      	cmp	r5, #128	@ 0x80
 8009264:	d1f7      	bne.n	8009256 <_reclaim_reent+0x16>
 8009266:	69e3      	ldr	r3, [r4, #28]
 8009268:	4620      	mov	r0, r4
 800926a:	68d9      	ldr	r1, [r3, #12]
 800926c:	f000 fe8e 	bl	8009f8c <_free_r>
 8009270:	69e3      	ldr	r3, [r4, #28]
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	b111      	cbz	r1, 800927c <_reclaim_reent+0x3c>
 8009276:	4620      	mov	r0, r4
 8009278:	f000 fe88 	bl	8009f8c <_free_r>
 800927c:	6961      	ldr	r1, [r4, #20]
 800927e:	b111      	cbz	r1, 8009286 <_reclaim_reent+0x46>
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fe83 	bl	8009f8c <_free_r>
 8009286:	69e1      	ldr	r1, [r4, #28]
 8009288:	b111      	cbz	r1, 8009290 <_reclaim_reent+0x50>
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fe7e 	bl	8009f8c <_free_r>
 8009290:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009292:	b111      	cbz	r1, 800929a <_reclaim_reent+0x5a>
 8009294:	4620      	mov	r0, r4
 8009296:	f000 fe79 	bl	8009f8c <_free_r>
 800929a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800929c:	b111      	cbz	r1, 80092a4 <_reclaim_reent+0x64>
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 fe74 	bl	8009f8c <_free_r>
 80092a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80092a6:	b111      	cbz	r1, 80092ae <_reclaim_reent+0x6e>
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fe6f 	bl	8009f8c <_free_r>
 80092ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80092b0:	b111      	cbz	r1, 80092b8 <_reclaim_reent+0x78>
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fe6a 	bl	8009f8c <_free_r>
 80092b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80092ba:	b111      	cbz	r1, 80092c2 <_reclaim_reent+0x82>
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 fe65 	bl	8009f8c <_free_r>
 80092c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80092c4:	b111      	cbz	r1, 80092cc <_reclaim_reent+0x8c>
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 fe60 	bl	8009f8c <_free_r>
 80092cc:	6a23      	ldr	r3, [r4, #32]
 80092ce:	b14b      	cbz	r3, 80092e4 <_reclaim_reent+0xa4>
 80092d0:	4620      	mov	r0, r4
 80092d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092d6:	4718      	bx	r3
 80092d8:	680e      	ldr	r6, [r1, #0]
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 fe56 	bl	8009f8c <_free_r>
 80092e0:	4631      	mov	r1, r6
 80092e2:	e7bb      	b.n	800925c <_reclaim_reent+0x1c>
 80092e4:	bd70      	pop	{r4, r5, r6, pc}
 80092e6:	bf00      	nop
 80092e8:	24000020 	.word	0x24000020

080092ec <_lseek_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d07      	ldr	r5, [pc, #28]	@ (800930c <_lseek_r+0x20>)
 80092f0:	4604      	mov	r4, r0
 80092f2:	4608      	mov	r0, r1
 80092f4:	4611      	mov	r1, r2
 80092f6:	2200      	movs	r2, #0
 80092f8:	602a      	str	r2, [r5, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f7f7 fe23 	bl	8000f46 <_lseek>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_lseek_r+0x1e>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_lseek_r+0x1e>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	24004e08 	.word	0x24004e08

08009310 <_read_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d07      	ldr	r5, [pc, #28]	@ (8009330 <_read_r+0x20>)
 8009314:	4604      	mov	r4, r0
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	2200      	movs	r2, #0
 800931c:	602a      	str	r2, [r5, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f7f7 fdb1 	bl	8000e86 <_read>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_read_r+0x1e>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_read_r+0x1e>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	24004e08 	.word	0x24004e08

08009334 <_write_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4d07      	ldr	r5, [pc, #28]	@ (8009354 <_write_r+0x20>)
 8009338:	4604      	mov	r4, r0
 800933a:	4608      	mov	r0, r1
 800933c:	4611      	mov	r1, r2
 800933e:	2200      	movs	r2, #0
 8009340:	602a      	str	r2, [r5, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	f7f7 fdbc 	bl	8000ec0 <_write>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_write_r+0x1e>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_write_r+0x1e>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	24004e08 	.word	0x24004e08

08009358 <__errno>:
 8009358:	4b01      	ldr	r3, [pc, #4]	@ (8009360 <__errno+0x8>)
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	24000020 	.word	0x24000020

08009364 <__libc_init_array>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	4d0d      	ldr	r5, [pc, #52]	@ (800939c <__libc_init_array+0x38>)
 8009368:	4c0d      	ldr	r4, [pc, #52]	@ (80093a0 <__libc_init_array+0x3c>)
 800936a:	1b64      	subs	r4, r4, r5
 800936c:	10a4      	asrs	r4, r4, #2
 800936e:	2600      	movs	r6, #0
 8009370:	42a6      	cmp	r6, r4
 8009372:	d109      	bne.n	8009388 <__libc_init_array+0x24>
 8009374:	4d0b      	ldr	r5, [pc, #44]	@ (80093a4 <__libc_init_array+0x40>)
 8009376:	4c0c      	ldr	r4, [pc, #48]	@ (80093a8 <__libc_init_array+0x44>)
 8009378:	f001 fe50 	bl	800b01c <_init>
 800937c:	1b64      	subs	r4, r4, r5
 800937e:	10a4      	asrs	r4, r4, #2
 8009380:	2600      	movs	r6, #0
 8009382:	42a6      	cmp	r6, r4
 8009384:	d105      	bne.n	8009392 <__libc_init_array+0x2e>
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	f855 3b04 	ldr.w	r3, [r5], #4
 800938c:	4798      	blx	r3
 800938e:	3601      	adds	r6, #1
 8009390:	e7ee      	b.n	8009370 <__libc_init_array+0xc>
 8009392:	f855 3b04 	ldr.w	r3, [r5], #4
 8009396:	4798      	blx	r3
 8009398:	3601      	adds	r6, #1
 800939a:	e7f2      	b.n	8009382 <__libc_init_array+0x1e>
 800939c:	0800b468 	.word	0x0800b468
 80093a0:	0800b468 	.word	0x0800b468
 80093a4:	0800b468 	.word	0x0800b468
 80093a8:	0800b46c 	.word	0x0800b46c

080093ac <__retarget_lock_init_recursive>:
 80093ac:	4770      	bx	lr

080093ae <__retarget_lock_acquire_recursive>:
 80093ae:	4770      	bx	lr

080093b0 <__retarget_lock_release_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <memcpy>:
 80093b2:	440a      	add	r2, r1
 80093b4:	4291      	cmp	r1, r2
 80093b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80093ba:	d100      	bne.n	80093be <memcpy+0xc>
 80093bc:	4770      	bx	lr
 80093be:	b510      	push	{r4, lr}
 80093c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c8:	4291      	cmp	r1, r2
 80093ca:	d1f9      	bne.n	80093c0 <memcpy+0xe>
 80093cc:	bd10      	pop	{r4, pc}

080093ce <quorem>:
 80093ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d2:	6903      	ldr	r3, [r0, #16]
 80093d4:	690c      	ldr	r4, [r1, #16]
 80093d6:	42a3      	cmp	r3, r4
 80093d8:	4607      	mov	r7, r0
 80093da:	db7e      	blt.n	80094da <quorem+0x10c>
 80093dc:	3c01      	subs	r4, #1
 80093de:	f101 0814 	add.w	r8, r1, #20
 80093e2:	00a3      	lsls	r3, r4, #2
 80093e4:	f100 0514 	add.w	r5, r0, #20
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f8:	3301      	adds	r3, #1
 80093fa:	429a      	cmp	r2, r3
 80093fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009400:	fbb2 f6f3 	udiv	r6, r2, r3
 8009404:	d32e      	bcc.n	8009464 <quorem+0x96>
 8009406:	f04f 0a00 	mov.w	sl, #0
 800940a:	46c4      	mov	ip, r8
 800940c:	46ae      	mov	lr, r5
 800940e:	46d3      	mov	fp, sl
 8009410:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009414:	b298      	uxth	r0, r3
 8009416:	fb06 a000 	mla	r0, r6, r0, sl
 800941a:	0c02      	lsrs	r2, r0, #16
 800941c:	0c1b      	lsrs	r3, r3, #16
 800941e:	fb06 2303 	mla	r3, r6, r3, r2
 8009422:	f8de 2000 	ldr.w	r2, [lr]
 8009426:	b280      	uxth	r0, r0
 8009428:	b292      	uxth	r2, r2
 800942a:	1a12      	subs	r2, r2, r0
 800942c:	445a      	add	r2, fp
 800942e:	f8de 0000 	ldr.w	r0, [lr]
 8009432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009436:	b29b      	uxth	r3, r3
 8009438:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800943c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009440:	b292      	uxth	r2, r2
 8009442:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009446:	45e1      	cmp	r9, ip
 8009448:	f84e 2b04 	str.w	r2, [lr], #4
 800944c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009450:	d2de      	bcs.n	8009410 <quorem+0x42>
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	58eb      	ldr	r3, [r5, r3]
 8009456:	b92b      	cbnz	r3, 8009464 <quorem+0x96>
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	3b04      	subs	r3, #4
 800945c:	429d      	cmp	r5, r3
 800945e:	461a      	mov	r2, r3
 8009460:	d32f      	bcc.n	80094c2 <quorem+0xf4>
 8009462:	613c      	str	r4, [r7, #16]
 8009464:	4638      	mov	r0, r7
 8009466:	f001 f90b 	bl	800a680 <__mcmp>
 800946a:	2800      	cmp	r0, #0
 800946c:	db25      	blt.n	80094ba <quorem+0xec>
 800946e:	4629      	mov	r1, r5
 8009470:	2000      	movs	r0, #0
 8009472:	f858 2b04 	ldr.w	r2, [r8], #4
 8009476:	f8d1 c000 	ldr.w	ip, [r1]
 800947a:	fa1f fe82 	uxth.w	lr, r2
 800947e:	fa1f f38c 	uxth.w	r3, ip
 8009482:	eba3 030e 	sub.w	r3, r3, lr
 8009486:	4403      	add	r3, r0
 8009488:	0c12      	lsrs	r2, r2, #16
 800948a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800948e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009492:	b29b      	uxth	r3, r3
 8009494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009498:	45c1      	cmp	r9, r8
 800949a:	f841 3b04 	str.w	r3, [r1], #4
 800949e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094a2:	d2e6      	bcs.n	8009472 <quorem+0xa4>
 80094a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094ac:	b922      	cbnz	r2, 80094b8 <quorem+0xea>
 80094ae:	3b04      	subs	r3, #4
 80094b0:	429d      	cmp	r5, r3
 80094b2:	461a      	mov	r2, r3
 80094b4:	d30b      	bcc.n	80094ce <quorem+0x100>
 80094b6:	613c      	str	r4, [r7, #16]
 80094b8:	3601      	adds	r6, #1
 80094ba:	4630      	mov	r0, r6
 80094bc:	b003      	add	sp, #12
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	3b04      	subs	r3, #4
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	d1cb      	bne.n	8009462 <quorem+0x94>
 80094ca:	3c01      	subs	r4, #1
 80094cc:	e7c6      	b.n	800945c <quorem+0x8e>
 80094ce:	6812      	ldr	r2, [r2, #0]
 80094d0:	3b04      	subs	r3, #4
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	d1ef      	bne.n	80094b6 <quorem+0xe8>
 80094d6:	3c01      	subs	r4, #1
 80094d8:	e7ea      	b.n	80094b0 <quorem+0xe2>
 80094da:	2000      	movs	r0, #0
 80094dc:	e7ee      	b.n	80094bc <quorem+0xee>
	...

080094e0 <_dtoa_r>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	ed2d 8b02 	vpush	{d8}
 80094e8:	69c7      	ldr	r7, [r0, #28]
 80094ea:	b091      	sub	sp, #68	@ 0x44
 80094ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094f0:	ec55 4b10 	vmov	r4, r5, d0
 80094f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80094f6:	9107      	str	r1, [sp, #28]
 80094f8:	4681      	mov	r9, r0
 80094fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80094fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80094fe:	b97f      	cbnz	r7, 8009520 <_dtoa_r+0x40>
 8009500:	2010      	movs	r0, #16
 8009502:	f000 fd8d 	bl	800a020 <malloc>
 8009506:	4602      	mov	r2, r0
 8009508:	f8c9 001c 	str.w	r0, [r9, #28]
 800950c:	b920      	cbnz	r0, 8009518 <_dtoa_r+0x38>
 800950e:	4ba0      	ldr	r3, [pc, #640]	@ (8009790 <_dtoa_r+0x2b0>)
 8009510:	21ef      	movs	r1, #239	@ 0xef
 8009512:	48a0      	ldr	r0, [pc, #640]	@ (8009794 <_dtoa_r+0x2b4>)
 8009514:	f001 fc4e 	bl	800adb4 <__assert_func>
 8009518:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800951c:	6007      	str	r7, [r0, #0]
 800951e:	60c7      	str	r7, [r0, #12]
 8009520:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009524:	6819      	ldr	r1, [r3, #0]
 8009526:	b159      	cbz	r1, 8009540 <_dtoa_r+0x60>
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	604a      	str	r2, [r1, #4]
 800952c:	2301      	movs	r3, #1
 800952e:	4093      	lsls	r3, r2
 8009530:	608b      	str	r3, [r1, #8]
 8009532:	4648      	mov	r0, r9
 8009534:	f000 fe6a 	bl	800a20c <_Bfree>
 8009538:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	1e2b      	subs	r3, r5, #0
 8009542:	bfbb      	ittet	lt
 8009544:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009548:	9303      	strlt	r3, [sp, #12]
 800954a:	2300      	movge	r3, #0
 800954c:	2201      	movlt	r2, #1
 800954e:	bfac      	ite	ge
 8009550:	6033      	strge	r3, [r6, #0]
 8009552:	6032      	strlt	r2, [r6, #0]
 8009554:	4b90      	ldr	r3, [pc, #576]	@ (8009798 <_dtoa_r+0x2b8>)
 8009556:	9e03      	ldr	r6, [sp, #12]
 8009558:	43b3      	bics	r3, r6
 800955a:	d110      	bne.n	800957e <_dtoa_r+0x9e>
 800955c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800955e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009568:	4323      	orrs	r3, r4
 800956a:	f000 84de 	beq.w	8009f2a <_dtoa_r+0xa4a>
 800956e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009570:	4f8a      	ldr	r7, [pc, #552]	@ (800979c <_dtoa_r+0x2bc>)
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 84e0 	beq.w	8009f38 <_dtoa_r+0xa58>
 8009578:	1cfb      	adds	r3, r7, #3
 800957a:	f000 bcdb 	b.w	8009f34 <_dtoa_r+0xa54>
 800957e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009582:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958a:	d10a      	bne.n	80095a2 <_dtoa_r+0xc2>
 800958c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800958e:	2301      	movs	r3, #1
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009594:	b113      	cbz	r3, 800959c <_dtoa_r+0xbc>
 8009596:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009598:	4b81      	ldr	r3, [pc, #516]	@ (80097a0 <_dtoa_r+0x2c0>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	4f81      	ldr	r7, [pc, #516]	@ (80097a4 <_dtoa_r+0x2c4>)
 800959e:	f000 bccb 	b.w	8009f38 <_dtoa_r+0xa58>
 80095a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80095a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80095a6:	4648      	mov	r0, r9
 80095a8:	eeb0 0b48 	vmov.f64	d0, d8
 80095ac:	f001 f918 	bl	800a7e0 <__d2b>
 80095b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80095b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095b6:	9001      	str	r0, [sp, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d045      	beq.n	8009648 <_dtoa_r+0x168>
 80095bc:	eeb0 7b48 	vmov.f64	d7, d8
 80095c0:	ee18 1a90 	vmov	r1, s17
 80095c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80095c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80095cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80095d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80095d4:	2500      	movs	r5, #0
 80095d6:	ee07 1a90 	vmov	s15, r1
 80095da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80095de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009778 <_dtoa_r+0x298>
 80095e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80095e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009780 <_dtoa_r+0x2a0>
 80095ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80095ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009788 <_dtoa_r+0x2a8>
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80095fa:	eeb0 7b46 	vmov.f64	d7, d6
 80095fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009602:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009606:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960e:	ee16 8a90 	vmov	r8, s13
 8009612:	d508      	bpl.n	8009626 <_dtoa_r+0x146>
 8009614:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009618:	eeb4 6b47 	vcmp.f64	d6, d7
 800961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009620:	bf18      	it	ne
 8009622:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009626:	f1b8 0f16 	cmp.w	r8, #22
 800962a:	d82b      	bhi.n	8009684 <_dtoa_r+0x1a4>
 800962c:	495e      	ldr	r1, [pc, #376]	@ (80097a8 <_dtoa_r+0x2c8>)
 800962e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009632:	ed91 7b00 	vldr	d7, [r1]
 8009636:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d501      	bpl.n	8009644 <_dtoa_r+0x164>
 8009640:	f108 38ff 	add.w	r8, r8, #4294967295
 8009644:	2100      	movs	r1, #0
 8009646:	e01e      	b.n	8009686 <_dtoa_r+0x1a6>
 8009648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800964a:	4413      	add	r3, r2
 800964c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009650:	2920      	cmp	r1, #32
 8009652:	bfc1      	itttt	gt
 8009654:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009658:	408e      	lslgt	r6, r1
 800965a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800965e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009662:	bfd6      	itet	le
 8009664:	f1c1 0120 	rsble	r1, r1, #32
 8009668:	4331      	orrgt	r1, r6
 800966a:	fa04 f101 	lslle.w	r1, r4, r1
 800966e:	ee07 1a90 	vmov	s15, r1
 8009672:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009676:	3b01      	subs	r3, #1
 8009678:	ee17 1a90 	vmov	r1, s15
 800967c:	2501      	movs	r5, #1
 800967e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009682:	e7a8      	b.n	80095d6 <_dtoa_r+0xf6>
 8009684:	2101      	movs	r1, #1
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	1e53      	subs	r3, r2, #1
 800968a:	9306      	str	r3, [sp, #24]
 800968c:	bf45      	ittet	mi
 800968e:	f1c2 0301 	rsbmi	r3, r2, #1
 8009692:	9305      	strmi	r3, [sp, #20]
 8009694:	2300      	movpl	r3, #0
 8009696:	2300      	movmi	r3, #0
 8009698:	bf4c      	ite	mi
 800969a:	9306      	strmi	r3, [sp, #24]
 800969c:	9305      	strpl	r3, [sp, #20]
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80096a4:	db18      	blt.n	80096d8 <_dtoa_r+0x1f8>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80096ac:	4443      	add	r3, r8
 80096ae:	9306      	str	r3, [sp, #24]
 80096b0:	2300      	movs	r3, #0
 80096b2:	9a07      	ldr	r2, [sp, #28]
 80096b4:	2a09      	cmp	r2, #9
 80096b6:	d849      	bhi.n	800974c <_dtoa_r+0x26c>
 80096b8:	2a05      	cmp	r2, #5
 80096ba:	bfc4      	itt	gt
 80096bc:	3a04      	subgt	r2, #4
 80096be:	9207      	strgt	r2, [sp, #28]
 80096c0:	9a07      	ldr	r2, [sp, #28]
 80096c2:	f1a2 0202 	sub.w	r2, r2, #2
 80096c6:	bfcc      	ite	gt
 80096c8:	2400      	movgt	r4, #0
 80096ca:	2401      	movle	r4, #1
 80096cc:	2a03      	cmp	r2, #3
 80096ce:	d848      	bhi.n	8009762 <_dtoa_r+0x282>
 80096d0:	e8df f002 	tbb	[pc, r2]
 80096d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80096d8:	9b05      	ldr	r3, [sp, #20]
 80096da:	2200      	movs	r2, #0
 80096dc:	eba3 0308 	sub.w	r3, r3, r8
 80096e0:	9305      	str	r3, [sp, #20]
 80096e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80096e4:	f1c8 0300 	rsb	r3, r8, #0
 80096e8:	e7e3      	b.n	80096b2 <_dtoa_r+0x1d2>
 80096ea:	2200      	movs	r2, #0
 80096ec:	9208      	str	r2, [sp, #32]
 80096ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	dc39      	bgt.n	8009768 <_dtoa_r+0x288>
 80096f4:	f04f 0b01 	mov.w	fp, #1
 80096f8:	46da      	mov	sl, fp
 80096fa:	465a      	mov	r2, fp
 80096fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009700:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009704:	2100      	movs	r1, #0
 8009706:	2004      	movs	r0, #4
 8009708:	f100 0614 	add.w	r6, r0, #20
 800970c:	4296      	cmp	r6, r2
 800970e:	d930      	bls.n	8009772 <_dtoa_r+0x292>
 8009710:	6079      	str	r1, [r7, #4]
 8009712:	4648      	mov	r0, r9
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	f000 fd39 	bl	800a18c <_Balloc>
 800971a:	9b04      	ldr	r3, [sp, #16]
 800971c:	4607      	mov	r7, r0
 800971e:	2800      	cmp	r0, #0
 8009720:	d146      	bne.n	80097b0 <_dtoa_r+0x2d0>
 8009722:	4b22      	ldr	r3, [pc, #136]	@ (80097ac <_dtoa_r+0x2cc>)
 8009724:	4602      	mov	r2, r0
 8009726:	f240 11af 	movw	r1, #431	@ 0x1af
 800972a:	e6f2      	b.n	8009512 <_dtoa_r+0x32>
 800972c:	2201      	movs	r2, #1
 800972e:	e7dd      	b.n	80096ec <_dtoa_r+0x20c>
 8009730:	2200      	movs	r2, #0
 8009732:	9208      	str	r2, [sp, #32]
 8009734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009736:	eb08 0b02 	add.w	fp, r8, r2
 800973a:	f10b 0a01 	add.w	sl, fp, #1
 800973e:	4652      	mov	r2, sl
 8009740:	2a01      	cmp	r2, #1
 8009742:	bfb8      	it	lt
 8009744:	2201      	movlt	r2, #1
 8009746:	e7db      	b.n	8009700 <_dtoa_r+0x220>
 8009748:	2201      	movs	r2, #1
 800974a:	e7f2      	b.n	8009732 <_dtoa_r+0x252>
 800974c:	2401      	movs	r4, #1
 800974e:	2200      	movs	r2, #0
 8009750:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009754:	f04f 3bff 	mov.w	fp, #4294967295
 8009758:	2100      	movs	r1, #0
 800975a:	46da      	mov	sl, fp
 800975c:	2212      	movs	r2, #18
 800975e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009760:	e7ce      	b.n	8009700 <_dtoa_r+0x220>
 8009762:	2201      	movs	r2, #1
 8009764:	9208      	str	r2, [sp, #32]
 8009766:	e7f5      	b.n	8009754 <_dtoa_r+0x274>
 8009768:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800976c:	46da      	mov	sl, fp
 800976e:	465a      	mov	r2, fp
 8009770:	e7c6      	b.n	8009700 <_dtoa_r+0x220>
 8009772:	3101      	adds	r1, #1
 8009774:	0040      	lsls	r0, r0, #1
 8009776:	e7c7      	b.n	8009708 <_dtoa_r+0x228>
 8009778:	636f4361 	.word	0x636f4361
 800977c:	3fd287a7 	.word	0x3fd287a7
 8009780:	8b60c8b3 	.word	0x8b60c8b3
 8009784:	3fc68a28 	.word	0x3fc68a28
 8009788:	509f79fb 	.word	0x509f79fb
 800978c:	3fd34413 	.word	0x3fd34413
 8009790:	0800b12d 	.word	0x0800b12d
 8009794:	0800b144 	.word	0x0800b144
 8009798:	7ff00000 	.word	0x7ff00000
 800979c:	0800b129 	.word	0x0800b129
 80097a0:	0800b0fd 	.word	0x0800b0fd
 80097a4:	0800b0fc 	.word	0x0800b0fc
 80097a8:	0800b240 	.word	0x0800b240
 80097ac:	0800b19c 	.word	0x0800b19c
 80097b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80097b4:	f1ba 0f0e 	cmp.w	sl, #14
 80097b8:	6010      	str	r0, [r2, #0]
 80097ba:	d86f      	bhi.n	800989c <_dtoa_r+0x3bc>
 80097bc:	2c00      	cmp	r4, #0
 80097be:	d06d      	beq.n	800989c <_dtoa_r+0x3bc>
 80097c0:	f1b8 0f00 	cmp.w	r8, #0
 80097c4:	f340 80c2 	ble.w	800994c <_dtoa_r+0x46c>
 80097c8:	4aca      	ldr	r2, [pc, #808]	@ (8009af4 <_dtoa_r+0x614>)
 80097ca:	f008 010f 	and.w	r1, r8, #15
 80097ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80097d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80097d6:	ed92 7b00 	vldr	d7, [r2]
 80097da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80097de:	f000 80a9 	beq.w	8009934 <_dtoa_r+0x454>
 80097e2:	4ac5      	ldr	r2, [pc, #788]	@ (8009af8 <_dtoa_r+0x618>)
 80097e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80097e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80097ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80097f0:	f001 010f 	and.w	r1, r1, #15
 80097f4:	2203      	movs	r2, #3
 80097f6:	48c0      	ldr	r0, [pc, #768]	@ (8009af8 <_dtoa_r+0x618>)
 80097f8:	2900      	cmp	r1, #0
 80097fa:	f040 809d 	bne.w	8009938 <_dtoa_r+0x458>
 80097fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009802:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009806:	ed8d 7b02 	vstr	d7, [sp, #8]
 800980a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800980c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009810:	2900      	cmp	r1, #0
 8009812:	f000 80c1 	beq.w	8009998 <_dtoa_r+0x4b8>
 8009816:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800981a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009822:	f140 80b9 	bpl.w	8009998 <_dtoa_r+0x4b8>
 8009826:	f1ba 0f00 	cmp.w	sl, #0
 800982a:	f000 80b5 	beq.w	8009998 <_dtoa_r+0x4b8>
 800982e:	f1bb 0f00 	cmp.w	fp, #0
 8009832:	dd31      	ble.n	8009898 <_dtoa_r+0x3b8>
 8009834:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009838:	ee27 7b06 	vmul.f64	d7, d7, d6
 800983c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009840:	f108 31ff 	add.w	r1, r8, #4294967295
 8009844:	9104      	str	r1, [sp, #16]
 8009846:	3201      	adds	r2, #1
 8009848:	465c      	mov	r4, fp
 800984a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800984e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009852:	ee07 2a90 	vmov	s15, r2
 8009856:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800985a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800985e:	ee15 2a90 	vmov	r2, s11
 8009862:	ec51 0b15 	vmov	r0, r1, d5
 8009866:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800986a:	2c00      	cmp	r4, #0
 800986c:	f040 8098 	bne.w	80099a0 <_dtoa_r+0x4c0>
 8009870:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009874:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009878:	ec41 0b17 	vmov	d7, r0, r1
 800987c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009884:	f300 8261 	bgt.w	8009d4a <_dtoa_r+0x86a>
 8009888:	eeb1 7b47 	vneg.f64	d7, d7
 800988c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009894:	f100 80f5 	bmi.w	8009a82 <_dtoa_r+0x5a2>
 8009898:	ed8d 8b02 	vstr	d8, [sp, #8]
 800989c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800989e:	2a00      	cmp	r2, #0
 80098a0:	f2c0 812c 	blt.w	8009afc <_dtoa_r+0x61c>
 80098a4:	f1b8 0f0e 	cmp.w	r8, #14
 80098a8:	f300 8128 	bgt.w	8009afc <_dtoa_r+0x61c>
 80098ac:	4b91      	ldr	r3, [pc, #580]	@ (8009af4 <_dtoa_r+0x614>)
 80098ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80098b2:	ed93 6b00 	vldr	d6, [r3]
 80098b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	da03      	bge.n	80098c4 <_dtoa_r+0x3e4>
 80098bc:	f1ba 0f00 	cmp.w	sl, #0
 80098c0:	f340 80d2 	ble.w	8009a68 <_dtoa_r+0x588>
 80098c4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80098c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098cc:	463e      	mov	r6, r7
 80098ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80098d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80098d6:	ee15 3a10 	vmov	r3, s10
 80098da:	3330      	adds	r3, #48	@ 0x30
 80098dc:	f806 3b01 	strb.w	r3, [r6], #1
 80098e0:	1bf3      	subs	r3, r6, r7
 80098e2:	459a      	cmp	sl, r3
 80098e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80098e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80098ec:	f040 80f8 	bne.w	8009ae0 <_dtoa_r+0x600>
 80098f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80098f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098fc:	f300 80dd 	bgt.w	8009aba <_dtoa_r+0x5da>
 8009900:	eeb4 7b46 	vcmp.f64	d7, d6
 8009904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009908:	d104      	bne.n	8009914 <_dtoa_r+0x434>
 800990a:	ee15 3a10 	vmov	r3, s10
 800990e:	07db      	lsls	r3, r3, #31
 8009910:	f100 80d3 	bmi.w	8009aba <_dtoa_r+0x5da>
 8009914:	9901      	ldr	r1, [sp, #4]
 8009916:	4648      	mov	r0, r9
 8009918:	f000 fc78 	bl	800a20c <_Bfree>
 800991c:	2300      	movs	r3, #0
 800991e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009920:	7033      	strb	r3, [r6, #0]
 8009922:	f108 0301 	add.w	r3, r8, #1
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 8304 	beq.w	8009f38 <_dtoa_r+0xa58>
 8009930:	601e      	str	r6, [r3, #0]
 8009932:	e301      	b.n	8009f38 <_dtoa_r+0xa58>
 8009934:	2202      	movs	r2, #2
 8009936:	e75e      	b.n	80097f6 <_dtoa_r+0x316>
 8009938:	07cc      	lsls	r4, r1, #31
 800993a:	d504      	bpl.n	8009946 <_dtoa_r+0x466>
 800993c:	ed90 6b00 	vldr	d6, [r0]
 8009940:	3201      	adds	r2, #1
 8009942:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009946:	1049      	asrs	r1, r1, #1
 8009948:	3008      	adds	r0, #8
 800994a:	e755      	b.n	80097f8 <_dtoa_r+0x318>
 800994c:	d022      	beq.n	8009994 <_dtoa_r+0x4b4>
 800994e:	f1c8 0100 	rsb	r1, r8, #0
 8009952:	4a68      	ldr	r2, [pc, #416]	@ (8009af4 <_dtoa_r+0x614>)
 8009954:	f001 000f 	and.w	r0, r1, #15
 8009958:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800995c:	ed92 7b00 	vldr	d7, [r2]
 8009960:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009964:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009968:	4863      	ldr	r0, [pc, #396]	@ (8009af8 <_dtoa_r+0x618>)
 800996a:	1109      	asrs	r1, r1, #4
 800996c:	2400      	movs	r4, #0
 800996e:	2202      	movs	r2, #2
 8009970:	b929      	cbnz	r1, 800997e <_dtoa_r+0x49e>
 8009972:	2c00      	cmp	r4, #0
 8009974:	f43f af49 	beq.w	800980a <_dtoa_r+0x32a>
 8009978:	ed8d 7b02 	vstr	d7, [sp, #8]
 800997c:	e745      	b.n	800980a <_dtoa_r+0x32a>
 800997e:	07ce      	lsls	r6, r1, #31
 8009980:	d505      	bpl.n	800998e <_dtoa_r+0x4ae>
 8009982:	ed90 6b00 	vldr	d6, [r0]
 8009986:	3201      	adds	r2, #1
 8009988:	2401      	movs	r4, #1
 800998a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800998e:	1049      	asrs	r1, r1, #1
 8009990:	3008      	adds	r0, #8
 8009992:	e7ed      	b.n	8009970 <_dtoa_r+0x490>
 8009994:	2202      	movs	r2, #2
 8009996:	e738      	b.n	800980a <_dtoa_r+0x32a>
 8009998:	f8cd 8010 	str.w	r8, [sp, #16]
 800999c:	4654      	mov	r4, sl
 800999e:	e754      	b.n	800984a <_dtoa_r+0x36a>
 80099a0:	4a54      	ldr	r2, [pc, #336]	@ (8009af4 <_dtoa_r+0x614>)
 80099a2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80099a6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80099aa:	9a08      	ldr	r2, [sp, #32]
 80099ac:	ec41 0b17 	vmov	d7, r0, r1
 80099b0:	443c      	add	r4, r7
 80099b2:	b34a      	cbz	r2, 8009a08 <_dtoa_r+0x528>
 80099b4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80099b8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80099bc:	463e      	mov	r6, r7
 80099be:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80099c2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80099c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80099ca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80099ce:	ee14 2a90 	vmov	r2, s9
 80099d2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80099d6:	3230      	adds	r2, #48	@ 0x30
 80099d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80099dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e4:	f806 2b01 	strb.w	r2, [r6], #1
 80099e8:	d438      	bmi.n	8009a5c <_dtoa_r+0x57c>
 80099ea:	ee32 5b46 	vsub.f64	d5, d2, d6
 80099ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80099f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f6:	d462      	bmi.n	8009abe <_dtoa_r+0x5de>
 80099f8:	42a6      	cmp	r6, r4
 80099fa:	f43f af4d 	beq.w	8009898 <_dtoa_r+0x3b8>
 80099fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009a02:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009a06:	e7e0      	b.n	80099ca <_dtoa_r+0x4ea>
 8009a08:	4621      	mov	r1, r4
 8009a0a:	463e      	mov	r6, r7
 8009a0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a10:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009a14:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009a18:	ee14 2a90 	vmov	r2, s9
 8009a1c:	3230      	adds	r2, #48	@ 0x30
 8009a1e:	f806 2b01 	strb.w	r2, [r6], #1
 8009a22:	42a6      	cmp	r6, r4
 8009a24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009a28:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009a2c:	d119      	bne.n	8009a62 <_dtoa_r+0x582>
 8009a2e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009a32:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009a36:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3e:	dc3e      	bgt.n	8009abe <_dtoa_r+0x5de>
 8009a40:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009a44:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4c:	f57f af24 	bpl.w	8009898 <_dtoa_r+0x3b8>
 8009a50:	460e      	mov	r6, r1
 8009a52:	3901      	subs	r1, #1
 8009a54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a58:	2b30      	cmp	r3, #48	@ 0x30
 8009a5a:	d0f9      	beq.n	8009a50 <_dtoa_r+0x570>
 8009a5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009a60:	e758      	b.n	8009914 <_dtoa_r+0x434>
 8009a62:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009a66:	e7d5      	b.n	8009a14 <_dtoa_r+0x534>
 8009a68:	d10b      	bne.n	8009a82 <_dtoa_r+0x5a2>
 8009a6a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009a6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009a72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7e:	f2c0 8161 	blt.w	8009d44 <_dtoa_r+0x864>
 8009a82:	2400      	movs	r4, #0
 8009a84:	4625      	mov	r5, r4
 8009a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	463e      	mov	r6, r7
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	4621      	mov	r1, r4
 8009a94:	4648      	mov	r0, r9
 8009a96:	f000 fbb9 	bl	800a20c <_Bfree>
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	d0de      	beq.n	8009a5c <_dtoa_r+0x57c>
 8009a9e:	f1b8 0f00 	cmp.w	r8, #0
 8009aa2:	d005      	beq.n	8009ab0 <_dtoa_r+0x5d0>
 8009aa4:	45a8      	cmp	r8, r5
 8009aa6:	d003      	beq.n	8009ab0 <_dtoa_r+0x5d0>
 8009aa8:	4641      	mov	r1, r8
 8009aaa:	4648      	mov	r0, r9
 8009aac:	f000 fbae 	bl	800a20c <_Bfree>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4648      	mov	r0, r9
 8009ab4:	f000 fbaa 	bl	800a20c <_Bfree>
 8009ab8:	e7d0      	b.n	8009a5c <_dtoa_r+0x57c>
 8009aba:	f8cd 8010 	str.w	r8, [sp, #16]
 8009abe:	4633      	mov	r3, r6
 8009ac0:	461e      	mov	r6, r3
 8009ac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ac6:	2a39      	cmp	r2, #57	@ 0x39
 8009ac8:	d106      	bne.n	8009ad8 <_dtoa_r+0x5f8>
 8009aca:	429f      	cmp	r7, r3
 8009acc:	d1f8      	bne.n	8009ac0 <_dtoa_r+0x5e0>
 8009ace:	9a04      	ldr	r2, [sp, #16]
 8009ad0:	3201      	adds	r2, #1
 8009ad2:	9204      	str	r2, [sp, #16]
 8009ad4:	2230      	movs	r2, #48	@ 0x30
 8009ad6:	703a      	strb	r2, [r7, #0]
 8009ad8:	781a      	ldrb	r2, [r3, #0]
 8009ada:	3201      	adds	r2, #1
 8009adc:	701a      	strb	r2, [r3, #0]
 8009ade:	e7bd      	b.n	8009a5c <_dtoa_r+0x57c>
 8009ae0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ae4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aec:	f47f aeef 	bne.w	80098ce <_dtoa_r+0x3ee>
 8009af0:	e710      	b.n	8009914 <_dtoa_r+0x434>
 8009af2:	bf00      	nop
 8009af4:	0800b240 	.word	0x0800b240
 8009af8:	0800b218 	.word	0x0800b218
 8009afc:	9908      	ldr	r1, [sp, #32]
 8009afe:	2900      	cmp	r1, #0
 8009b00:	f000 80e3 	beq.w	8009cca <_dtoa_r+0x7ea>
 8009b04:	9907      	ldr	r1, [sp, #28]
 8009b06:	2901      	cmp	r1, #1
 8009b08:	f300 80c8 	bgt.w	8009c9c <_dtoa_r+0x7bc>
 8009b0c:	2d00      	cmp	r5, #0
 8009b0e:	f000 80c1 	beq.w	8009c94 <_dtoa_r+0x7b4>
 8009b12:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b16:	9e05      	ldr	r6, [sp, #20]
 8009b18:	461c      	mov	r4, r3
 8009b1a:	9304      	str	r3, [sp, #16]
 8009b1c:	9b05      	ldr	r3, [sp, #20]
 8009b1e:	4413      	add	r3, r2
 8009b20:	9305      	str	r3, [sp, #20]
 8009b22:	9b06      	ldr	r3, [sp, #24]
 8009b24:	2101      	movs	r1, #1
 8009b26:	4413      	add	r3, r2
 8009b28:	4648      	mov	r0, r9
 8009b2a:	9306      	str	r3, [sp, #24]
 8009b2c:	f000 fc22 	bl	800a374 <__i2b>
 8009b30:	9b04      	ldr	r3, [sp, #16]
 8009b32:	4605      	mov	r5, r0
 8009b34:	b166      	cbz	r6, 8009b50 <_dtoa_r+0x670>
 8009b36:	9a06      	ldr	r2, [sp, #24]
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	dd09      	ble.n	8009b50 <_dtoa_r+0x670>
 8009b3c:	42b2      	cmp	r2, r6
 8009b3e:	9905      	ldr	r1, [sp, #20]
 8009b40:	bfa8      	it	ge
 8009b42:	4632      	movge	r2, r6
 8009b44:	1a89      	subs	r1, r1, r2
 8009b46:	9105      	str	r1, [sp, #20]
 8009b48:	9906      	ldr	r1, [sp, #24]
 8009b4a:	1ab6      	subs	r6, r6, r2
 8009b4c:	1a8a      	subs	r2, r1, r2
 8009b4e:	9206      	str	r2, [sp, #24]
 8009b50:	b1fb      	cbz	r3, 8009b92 <_dtoa_r+0x6b2>
 8009b52:	9a08      	ldr	r2, [sp, #32]
 8009b54:	2a00      	cmp	r2, #0
 8009b56:	f000 80bc 	beq.w	8009cd2 <_dtoa_r+0x7f2>
 8009b5a:	b19c      	cbz	r4, 8009b84 <_dtoa_r+0x6a4>
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4648      	mov	r0, r9
 8009b62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b64:	f000 fcc6 	bl	800a4f4 <__pow5mult>
 8009b68:	9a01      	ldr	r2, [sp, #4]
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	4648      	mov	r0, r9
 8009b70:	f000 fc16 	bl	800a3a0 <__multiply>
 8009b74:	9901      	ldr	r1, [sp, #4]
 8009b76:	9004      	str	r0, [sp, #16]
 8009b78:	4648      	mov	r0, r9
 8009b7a:	f000 fb47 	bl	800a20c <_Bfree>
 8009b7e:	9a04      	ldr	r2, [sp, #16]
 8009b80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b82:	9201      	str	r2, [sp, #4]
 8009b84:	1b1a      	subs	r2, r3, r4
 8009b86:	d004      	beq.n	8009b92 <_dtoa_r+0x6b2>
 8009b88:	9901      	ldr	r1, [sp, #4]
 8009b8a:	4648      	mov	r0, r9
 8009b8c:	f000 fcb2 	bl	800a4f4 <__pow5mult>
 8009b90:	9001      	str	r0, [sp, #4]
 8009b92:	2101      	movs	r1, #1
 8009b94:	4648      	mov	r0, r9
 8009b96:	f000 fbed 	bl	800a374 <__i2b>
 8009b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 81d0 	beq.w	8009f44 <_dtoa_r+0xa64>
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	4648      	mov	r0, r9
 8009baa:	f000 fca3 	bl	800a4f4 <__pow5mult>
 8009bae:	9b07      	ldr	r3, [sp, #28]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	f300 8095 	bgt.w	8009ce2 <_dtoa_r+0x802>
 8009bb8:	9b02      	ldr	r3, [sp, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f040 808b 	bne.w	8009cd6 <_dtoa_r+0x7f6>
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009bc6:	2a00      	cmp	r2, #0
 8009bc8:	f040 8087 	bne.w	8009cda <_dtoa_r+0x7fa>
 8009bcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009bd0:	0d12      	lsrs	r2, r2, #20
 8009bd2:	0512      	lsls	r2, r2, #20
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	f000 8082 	beq.w	8009cde <_dtoa_r+0x7fe>
 8009bda:	9b05      	ldr	r3, [sp, #20]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	9b06      	ldr	r3, [sp, #24]
 8009be2:	3301      	adds	r3, #1
 8009be4:	9306      	str	r3, [sp, #24]
 8009be6:	2301      	movs	r3, #1
 8009be8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 81af 	beq.w	8009f50 <_dtoa_r+0xa70>
 8009bf2:	6922      	ldr	r2, [r4, #16]
 8009bf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009bf8:	6910      	ldr	r0, [r2, #16]
 8009bfa:	f000 fb6f 	bl	800a2dc <__hi0bits>
 8009bfe:	f1c0 0020 	rsb	r0, r0, #32
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	4418      	add	r0, r3
 8009c06:	f010 001f 	ands.w	r0, r0, #31
 8009c0a:	d076      	beq.n	8009cfa <_dtoa_r+0x81a>
 8009c0c:	f1c0 0220 	rsb	r2, r0, #32
 8009c10:	2a04      	cmp	r2, #4
 8009c12:	dd69      	ble.n	8009ce8 <_dtoa_r+0x808>
 8009c14:	9b05      	ldr	r3, [sp, #20]
 8009c16:	f1c0 001c 	rsb	r0, r0, #28
 8009c1a:	4403      	add	r3, r0
 8009c1c:	9305      	str	r3, [sp, #20]
 8009c1e:	9b06      	ldr	r3, [sp, #24]
 8009c20:	4406      	add	r6, r0
 8009c22:	4403      	add	r3, r0
 8009c24:	9306      	str	r3, [sp, #24]
 8009c26:	9b05      	ldr	r3, [sp, #20]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	dd05      	ble.n	8009c38 <_dtoa_r+0x758>
 8009c2c:	9901      	ldr	r1, [sp, #4]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4648      	mov	r0, r9
 8009c32:	f000 fcb9 	bl	800a5a8 <__lshift>
 8009c36:	9001      	str	r0, [sp, #4]
 8009c38:	9b06      	ldr	r3, [sp, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dd05      	ble.n	8009c4a <_dtoa_r+0x76a>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	461a      	mov	r2, r3
 8009c42:	4648      	mov	r0, r9
 8009c44:	f000 fcb0 	bl	800a5a8 <__lshift>
 8009c48:	4604      	mov	r4, r0
 8009c4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d056      	beq.n	8009cfe <_dtoa_r+0x81e>
 8009c50:	9801      	ldr	r0, [sp, #4]
 8009c52:	4621      	mov	r1, r4
 8009c54:	f000 fd14 	bl	800a680 <__mcmp>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	da50      	bge.n	8009cfe <_dtoa_r+0x81e>
 8009c5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	9901      	ldr	r1, [sp, #4]
 8009c64:	2300      	movs	r3, #0
 8009c66:	220a      	movs	r2, #10
 8009c68:	4648      	mov	r0, r9
 8009c6a:	f000 faf1 	bl	800a250 <__multadd>
 8009c6e:	9b08      	ldr	r3, [sp, #32]
 8009c70:	9001      	str	r0, [sp, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 816e 	beq.w	8009f54 <_dtoa_r+0xa74>
 8009c78:	4629      	mov	r1, r5
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	4648      	mov	r0, r9
 8009c80:	f000 fae6 	bl	800a250 <__multadd>
 8009c84:	f1bb 0f00 	cmp.w	fp, #0
 8009c88:	4605      	mov	r5, r0
 8009c8a:	dc64      	bgt.n	8009d56 <_dtoa_r+0x876>
 8009c8c:	9b07      	ldr	r3, [sp, #28]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	dc3e      	bgt.n	8009d10 <_dtoa_r+0x830>
 8009c92:	e060      	b.n	8009d56 <_dtoa_r+0x876>
 8009c94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c9a:	e73c      	b.n	8009b16 <_dtoa_r+0x636>
 8009c9c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	bfbf      	itttt	lt
 8009ca4:	1ae2      	sublt	r2, r4, r3
 8009ca6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ca8:	189b      	addlt	r3, r3, r2
 8009caa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009cac:	bfae      	itee	ge
 8009cae:	1b1c      	subge	r4, r3, r4
 8009cb0:	4623      	movlt	r3, r4
 8009cb2:	2400      	movlt	r4, #0
 8009cb4:	f1ba 0f00 	cmp.w	sl, #0
 8009cb8:	bfb5      	itete	lt
 8009cba:	9a05      	ldrlt	r2, [sp, #20]
 8009cbc:	9e05      	ldrge	r6, [sp, #20]
 8009cbe:	eba2 060a 	sublt.w	r6, r2, sl
 8009cc2:	4652      	movge	r2, sl
 8009cc4:	bfb8      	it	lt
 8009cc6:	2200      	movlt	r2, #0
 8009cc8:	e727      	b.n	8009b1a <_dtoa_r+0x63a>
 8009cca:	9e05      	ldr	r6, [sp, #20]
 8009ccc:	9d08      	ldr	r5, [sp, #32]
 8009cce:	461c      	mov	r4, r3
 8009cd0:	e730      	b.n	8009b34 <_dtoa_r+0x654>
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	e758      	b.n	8009b88 <_dtoa_r+0x6a8>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e786      	b.n	8009be8 <_dtoa_r+0x708>
 8009cda:	9b02      	ldr	r3, [sp, #8]
 8009cdc:	e784      	b.n	8009be8 <_dtoa_r+0x708>
 8009cde:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009ce0:	e783      	b.n	8009bea <_dtoa_r+0x70a>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ce6:	e784      	b.n	8009bf2 <_dtoa_r+0x712>
 8009ce8:	d09d      	beq.n	8009c26 <_dtoa_r+0x746>
 8009cea:	9b05      	ldr	r3, [sp, #20]
 8009cec:	321c      	adds	r2, #28
 8009cee:	4413      	add	r3, r2
 8009cf0:	9305      	str	r3, [sp, #20]
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	4416      	add	r6, r2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	e794      	b.n	8009c24 <_dtoa_r+0x744>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	e7f5      	b.n	8009cea <_dtoa_r+0x80a>
 8009cfe:	f1ba 0f00 	cmp.w	sl, #0
 8009d02:	f8cd 8010 	str.w	r8, [sp, #16]
 8009d06:	46d3      	mov	fp, sl
 8009d08:	dc21      	bgt.n	8009d4e <_dtoa_r+0x86e>
 8009d0a:	9b07      	ldr	r3, [sp, #28]
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	dd1e      	ble.n	8009d4e <_dtoa_r+0x86e>
 8009d10:	f1bb 0f00 	cmp.w	fp, #0
 8009d14:	f47f aeb7 	bne.w	8009a86 <_dtoa_r+0x5a6>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	465b      	mov	r3, fp
 8009d1c:	2205      	movs	r2, #5
 8009d1e:	4648      	mov	r0, r9
 8009d20:	f000 fa96 	bl	800a250 <__multadd>
 8009d24:	4601      	mov	r1, r0
 8009d26:	4604      	mov	r4, r0
 8009d28:	9801      	ldr	r0, [sp, #4]
 8009d2a:	f000 fca9 	bl	800a680 <__mcmp>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f77f aea9 	ble.w	8009a86 <_dtoa_r+0x5a6>
 8009d34:	463e      	mov	r6, r7
 8009d36:	2331      	movs	r3, #49	@ 0x31
 8009d38:	f806 3b01 	strb.w	r3, [r6], #1
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	9304      	str	r3, [sp, #16]
 8009d42:	e6a4      	b.n	8009a8e <_dtoa_r+0x5ae>
 8009d44:	f8cd 8010 	str.w	r8, [sp, #16]
 8009d48:	4654      	mov	r4, sl
 8009d4a:	4625      	mov	r5, r4
 8009d4c:	e7f2      	b.n	8009d34 <_dtoa_r+0x854>
 8009d4e:	9b08      	ldr	r3, [sp, #32]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 8103 	beq.w	8009f5c <_dtoa_r+0xa7c>
 8009d56:	2e00      	cmp	r6, #0
 8009d58:	dd05      	ble.n	8009d66 <_dtoa_r+0x886>
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	4632      	mov	r2, r6
 8009d5e:	4648      	mov	r0, r9
 8009d60:	f000 fc22 	bl	800a5a8 <__lshift>
 8009d64:	4605      	mov	r5, r0
 8009d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d058      	beq.n	8009e1e <_dtoa_r+0x93e>
 8009d6c:	6869      	ldr	r1, [r5, #4]
 8009d6e:	4648      	mov	r0, r9
 8009d70:	f000 fa0c 	bl	800a18c <_Balloc>
 8009d74:	4606      	mov	r6, r0
 8009d76:	b928      	cbnz	r0, 8009d84 <_dtoa_r+0x8a4>
 8009d78:	4b82      	ldr	r3, [pc, #520]	@ (8009f84 <_dtoa_r+0xaa4>)
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d80:	f7ff bbc7 	b.w	8009512 <_dtoa_r+0x32>
 8009d84:	692a      	ldr	r2, [r5, #16]
 8009d86:	3202      	adds	r2, #2
 8009d88:	0092      	lsls	r2, r2, #2
 8009d8a:	f105 010c 	add.w	r1, r5, #12
 8009d8e:	300c      	adds	r0, #12
 8009d90:	f7ff fb0f 	bl	80093b2 <memcpy>
 8009d94:	2201      	movs	r2, #1
 8009d96:	4631      	mov	r1, r6
 8009d98:	4648      	mov	r0, r9
 8009d9a:	f000 fc05 	bl	800a5a8 <__lshift>
 8009d9e:	1c7b      	adds	r3, r7, #1
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	eb07 030b 	add.w	r3, r7, fp
 8009da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da8:	9b02      	ldr	r3, [sp, #8]
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	46a8      	mov	r8, r5
 8009db0:	9308      	str	r3, [sp, #32]
 8009db2:	4605      	mov	r5, r0
 8009db4:	9b05      	ldr	r3, [sp, #20]
 8009db6:	9801      	ldr	r0, [sp, #4]
 8009db8:	4621      	mov	r1, r4
 8009dba:	f103 3bff 	add.w	fp, r3, #4294967295
 8009dbe:	f7ff fb06 	bl	80093ce <quorem>
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	9002      	str	r0, [sp, #8]
 8009dc6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009dca:	9801      	ldr	r0, [sp, #4]
 8009dcc:	f000 fc58 	bl	800a680 <__mcmp>
 8009dd0:	462a      	mov	r2, r5
 8009dd2:	9006      	str	r0, [sp, #24]
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	4648      	mov	r0, r9
 8009dd8:	f000 fc6e 	bl	800a6b8 <__mdiff>
 8009ddc:	68c2      	ldr	r2, [r0, #12]
 8009dde:	4606      	mov	r6, r0
 8009de0:	b9fa      	cbnz	r2, 8009e22 <_dtoa_r+0x942>
 8009de2:	4601      	mov	r1, r0
 8009de4:	9801      	ldr	r0, [sp, #4]
 8009de6:	f000 fc4b 	bl	800a680 <__mcmp>
 8009dea:	4602      	mov	r2, r0
 8009dec:	4631      	mov	r1, r6
 8009dee:	4648      	mov	r0, r9
 8009df0:	920a      	str	r2, [sp, #40]	@ 0x28
 8009df2:	f000 fa0b 	bl	800a20c <_Bfree>
 8009df6:	9b07      	ldr	r3, [sp, #28]
 8009df8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dfa:	9e05      	ldr	r6, [sp, #20]
 8009dfc:	ea43 0102 	orr.w	r1, r3, r2
 8009e00:	9b08      	ldr	r3, [sp, #32]
 8009e02:	4319      	orrs	r1, r3
 8009e04:	d10f      	bne.n	8009e26 <_dtoa_r+0x946>
 8009e06:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009e0a:	d028      	beq.n	8009e5e <_dtoa_r+0x97e>
 8009e0c:	9b06      	ldr	r3, [sp, #24]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	dd02      	ble.n	8009e18 <_dtoa_r+0x938>
 8009e12:	9b02      	ldr	r3, [sp, #8]
 8009e14:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009e18:	f88b a000 	strb.w	sl, [fp]
 8009e1c:	e639      	b.n	8009a92 <_dtoa_r+0x5b2>
 8009e1e:	4628      	mov	r0, r5
 8009e20:	e7bd      	b.n	8009d9e <_dtoa_r+0x8be>
 8009e22:	2201      	movs	r2, #1
 8009e24:	e7e2      	b.n	8009dec <_dtoa_r+0x90c>
 8009e26:	9b06      	ldr	r3, [sp, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	db04      	blt.n	8009e36 <_dtoa_r+0x956>
 8009e2c:	9907      	ldr	r1, [sp, #28]
 8009e2e:	430b      	orrs	r3, r1
 8009e30:	9908      	ldr	r1, [sp, #32]
 8009e32:	430b      	orrs	r3, r1
 8009e34:	d120      	bne.n	8009e78 <_dtoa_r+0x998>
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	ddee      	ble.n	8009e18 <_dtoa_r+0x938>
 8009e3a:	9901      	ldr	r1, [sp, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	4648      	mov	r0, r9
 8009e40:	f000 fbb2 	bl	800a5a8 <__lshift>
 8009e44:	4621      	mov	r1, r4
 8009e46:	9001      	str	r0, [sp, #4]
 8009e48:	f000 fc1a 	bl	800a680 <__mcmp>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	dc03      	bgt.n	8009e58 <_dtoa_r+0x978>
 8009e50:	d1e2      	bne.n	8009e18 <_dtoa_r+0x938>
 8009e52:	f01a 0f01 	tst.w	sl, #1
 8009e56:	d0df      	beq.n	8009e18 <_dtoa_r+0x938>
 8009e58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009e5c:	d1d9      	bne.n	8009e12 <_dtoa_r+0x932>
 8009e5e:	2339      	movs	r3, #57	@ 0x39
 8009e60:	f88b 3000 	strb.w	r3, [fp]
 8009e64:	4633      	mov	r3, r6
 8009e66:	461e      	mov	r6, r3
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e6e:	2a39      	cmp	r2, #57	@ 0x39
 8009e70:	d053      	beq.n	8009f1a <_dtoa_r+0xa3a>
 8009e72:	3201      	adds	r2, #1
 8009e74:	701a      	strb	r2, [r3, #0]
 8009e76:	e60c      	b.n	8009a92 <_dtoa_r+0x5b2>
 8009e78:	2a00      	cmp	r2, #0
 8009e7a:	dd07      	ble.n	8009e8c <_dtoa_r+0x9ac>
 8009e7c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009e80:	d0ed      	beq.n	8009e5e <_dtoa_r+0x97e>
 8009e82:	f10a 0301 	add.w	r3, sl, #1
 8009e86:	f88b 3000 	strb.w	r3, [fp]
 8009e8a:	e602      	b.n	8009a92 <_dtoa_r+0x5b2>
 8009e8c:	9b05      	ldr	r3, [sp, #20]
 8009e8e:	9a05      	ldr	r2, [sp, #20]
 8009e90:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d029      	beq.n	8009eee <_dtoa_r+0xa0e>
 8009e9a:	9901      	ldr	r1, [sp, #4]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	220a      	movs	r2, #10
 8009ea0:	4648      	mov	r0, r9
 8009ea2:	f000 f9d5 	bl	800a250 <__multadd>
 8009ea6:	45a8      	cmp	r8, r5
 8009ea8:	9001      	str	r0, [sp, #4]
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	f04f 020a 	mov.w	r2, #10
 8009eb2:	4641      	mov	r1, r8
 8009eb4:	4648      	mov	r0, r9
 8009eb6:	d107      	bne.n	8009ec8 <_dtoa_r+0x9e8>
 8009eb8:	f000 f9ca 	bl	800a250 <__multadd>
 8009ebc:	4680      	mov	r8, r0
 8009ebe:	4605      	mov	r5, r0
 8009ec0:	9b05      	ldr	r3, [sp, #20]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	9305      	str	r3, [sp, #20]
 8009ec6:	e775      	b.n	8009db4 <_dtoa_r+0x8d4>
 8009ec8:	f000 f9c2 	bl	800a250 <__multadd>
 8009ecc:	4629      	mov	r1, r5
 8009ece:	4680      	mov	r8, r0
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	4648      	mov	r0, r9
 8009ed6:	f000 f9bb 	bl	800a250 <__multadd>
 8009eda:	4605      	mov	r5, r0
 8009edc:	e7f0      	b.n	8009ec0 <_dtoa_r+0x9e0>
 8009ede:	f1bb 0f00 	cmp.w	fp, #0
 8009ee2:	bfcc      	ite	gt
 8009ee4:	465e      	movgt	r6, fp
 8009ee6:	2601      	movle	r6, #1
 8009ee8:	443e      	add	r6, r7
 8009eea:	f04f 0800 	mov.w	r8, #0
 8009eee:	9901      	ldr	r1, [sp, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	4648      	mov	r0, r9
 8009ef4:	f000 fb58 	bl	800a5a8 <__lshift>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	9001      	str	r0, [sp, #4]
 8009efc:	f000 fbc0 	bl	800a680 <__mcmp>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	dcaf      	bgt.n	8009e64 <_dtoa_r+0x984>
 8009f04:	d102      	bne.n	8009f0c <_dtoa_r+0xa2c>
 8009f06:	f01a 0f01 	tst.w	sl, #1
 8009f0a:	d1ab      	bne.n	8009e64 <_dtoa_r+0x984>
 8009f0c:	4633      	mov	r3, r6
 8009f0e:	461e      	mov	r6, r3
 8009f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f14:	2a30      	cmp	r2, #48	@ 0x30
 8009f16:	d0fa      	beq.n	8009f0e <_dtoa_r+0xa2e>
 8009f18:	e5bb      	b.n	8009a92 <_dtoa_r+0x5b2>
 8009f1a:	429f      	cmp	r7, r3
 8009f1c:	d1a3      	bne.n	8009e66 <_dtoa_r+0x986>
 8009f1e:	9b04      	ldr	r3, [sp, #16]
 8009f20:	3301      	adds	r3, #1
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	2331      	movs	r3, #49	@ 0x31
 8009f26:	703b      	strb	r3, [r7, #0]
 8009f28:	e5b3      	b.n	8009a92 <_dtoa_r+0x5b2>
 8009f2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f2c:	4f16      	ldr	r7, [pc, #88]	@ (8009f88 <_dtoa_r+0xaa8>)
 8009f2e:	b11b      	cbz	r3, 8009f38 <_dtoa_r+0xa58>
 8009f30:	f107 0308 	add.w	r3, r7, #8
 8009f34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	4638      	mov	r0, r7
 8009f3a:	b011      	add	sp, #68	@ 0x44
 8009f3c:	ecbd 8b02 	vpop	{d8}
 8009f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f44:	9b07      	ldr	r3, [sp, #28]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	f77f ae36 	ble.w	8009bb8 <_dtoa_r+0x6d8>
 8009f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f50:	2001      	movs	r0, #1
 8009f52:	e656      	b.n	8009c02 <_dtoa_r+0x722>
 8009f54:	f1bb 0f00 	cmp.w	fp, #0
 8009f58:	f77f aed7 	ble.w	8009d0a <_dtoa_r+0x82a>
 8009f5c:	463e      	mov	r6, r7
 8009f5e:	9801      	ldr	r0, [sp, #4]
 8009f60:	4621      	mov	r1, r4
 8009f62:	f7ff fa34 	bl	80093ce <quorem>
 8009f66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009f6a:	f806 ab01 	strb.w	sl, [r6], #1
 8009f6e:	1bf2      	subs	r2, r6, r7
 8009f70:	4593      	cmp	fp, r2
 8009f72:	ddb4      	ble.n	8009ede <_dtoa_r+0x9fe>
 8009f74:	9901      	ldr	r1, [sp, #4]
 8009f76:	2300      	movs	r3, #0
 8009f78:	220a      	movs	r2, #10
 8009f7a:	4648      	mov	r0, r9
 8009f7c:	f000 f968 	bl	800a250 <__multadd>
 8009f80:	9001      	str	r0, [sp, #4]
 8009f82:	e7ec      	b.n	8009f5e <_dtoa_r+0xa7e>
 8009f84:	0800b19c 	.word	0x0800b19c
 8009f88:	0800b120 	.word	0x0800b120

08009f8c <_free_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4605      	mov	r5, r0
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d041      	beq.n	800a018 <_free_r+0x8c>
 8009f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f98:	1f0c      	subs	r4, r1, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bfb8      	it	lt
 8009f9e:	18e4      	addlt	r4, r4, r3
 8009fa0:	f000 f8e8 	bl	800a174 <__malloc_lock>
 8009fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800a01c <_free_r+0x90>)
 8009fa6:	6813      	ldr	r3, [r2, #0]
 8009fa8:	b933      	cbnz	r3, 8009fb8 <_free_r+0x2c>
 8009faa:	6063      	str	r3, [r4, #4]
 8009fac:	6014      	str	r4, [r2, #0]
 8009fae:	4628      	mov	r0, r5
 8009fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fb4:	f000 b8e4 	b.w	800a180 <__malloc_unlock>
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	d908      	bls.n	8009fce <_free_r+0x42>
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	1821      	adds	r1, r4, r0
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	bf01      	itttt	eq
 8009fc4:	6819      	ldreq	r1, [r3, #0]
 8009fc6:	685b      	ldreq	r3, [r3, #4]
 8009fc8:	1809      	addeq	r1, r1, r0
 8009fca:	6021      	streq	r1, [r4, #0]
 8009fcc:	e7ed      	b.n	8009faa <_free_r+0x1e>
 8009fce:	461a      	mov	r2, r3
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	b10b      	cbz	r3, 8009fd8 <_free_r+0x4c>
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	d9fa      	bls.n	8009fce <_free_r+0x42>
 8009fd8:	6811      	ldr	r1, [r2, #0]
 8009fda:	1850      	adds	r0, r2, r1
 8009fdc:	42a0      	cmp	r0, r4
 8009fde:	d10b      	bne.n	8009ff8 <_free_r+0x6c>
 8009fe0:	6820      	ldr	r0, [r4, #0]
 8009fe2:	4401      	add	r1, r0
 8009fe4:	1850      	adds	r0, r2, r1
 8009fe6:	4283      	cmp	r3, r0
 8009fe8:	6011      	str	r1, [r2, #0]
 8009fea:	d1e0      	bne.n	8009fae <_free_r+0x22>
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	6053      	str	r3, [r2, #4]
 8009ff2:	4408      	add	r0, r1
 8009ff4:	6010      	str	r0, [r2, #0]
 8009ff6:	e7da      	b.n	8009fae <_free_r+0x22>
 8009ff8:	d902      	bls.n	800a000 <_free_r+0x74>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	e7d6      	b.n	8009fae <_free_r+0x22>
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	1821      	adds	r1, r4, r0
 800a004:	428b      	cmp	r3, r1
 800a006:	bf04      	itt	eq
 800a008:	6819      	ldreq	r1, [r3, #0]
 800a00a:	685b      	ldreq	r3, [r3, #4]
 800a00c:	6063      	str	r3, [r4, #4]
 800a00e:	bf04      	itt	eq
 800a010:	1809      	addeq	r1, r1, r0
 800a012:	6021      	streq	r1, [r4, #0]
 800a014:	6054      	str	r4, [r2, #4]
 800a016:	e7ca      	b.n	8009fae <_free_r+0x22>
 800a018:	bd38      	pop	{r3, r4, r5, pc}
 800a01a:	bf00      	nop
 800a01c:	24004e14 	.word	0x24004e14

0800a020 <malloc>:
 800a020:	4b02      	ldr	r3, [pc, #8]	@ (800a02c <malloc+0xc>)
 800a022:	4601      	mov	r1, r0
 800a024:	6818      	ldr	r0, [r3, #0]
 800a026:	f000 b825 	b.w	800a074 <_malloc_r>
 800a02a:	bf00      	nop
 800a02c:	24000020 	.word	0x24000020

0800a030 <sbrk_aligned>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	4e0f      	ldr	r6, [pc, #60]	@ (800a070 <sbrk_aligned+0x40>)
 800a034:	460c      	mov	r4, r1
 800a036:	6831      	ldr	r1, [r6, #0]
 800a038:	4605      	mov	r5, r0
 800a03a:	b911      	cbnz	r1, 800a042 <sbrk_aligned+0x12>
 800a03c:	f000 feaa 	bl	800ad94 <_sbrk_r>
 800a040:	6030      	str	r0, [r6, #0]
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f000 fea5 	bl	800ad94 <_sbrk_r>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d103      	bne.n	800a056 <sbrk_aligned+0x26>
 800a04e:	f04f 34ff 	mov.w	r4, #4294967295
 800a052:	4620      	mov	r0, r4
 800a054:	bd70      	pop	{r4, r5, r6, pc}
 800a056:	1cc4      	adds	r4, r0, #3
 800a058:	f024 0403 	bic.w	r4, r4, #3
 800a05c:	42a0      	cmp	r0, r4
 800a05e:	d0f8      	beq.n	800a052 <sbrk_aligned+0x22>
 800a060:	1a21      	subs	r1, r4, r0
 800a062:	4628      	mov	r0, r5
 800a064:	f000 fe96 	bl	800ad94 <_sbrk_r>
 800a068:	3001      	adds	r0, #1
 800a06a:	d1f2      	bne.n	800a052 <sbrk_aligned+0x22>
 800a06c:	e7ef      	b.n	800a04e <sbrk_aligned+0x1e>
 800a06e:	bf00      	nop
 800a070:	24004e10 	.word	0x24004e10

0800a074 <_malloc_r>:
 800a074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a078:	1ccd      	adds	r5, r1, #3
 800a07a:	f025 0503 	bic.w	r5, r5, #3
 800a07e:	3508      	adds	r5, #8
 800a080:	2d0c      	cmp	r5, #12
 800a082:	bf38      	it	cc
 800a084:	250c      	movcc	r5, #12
 800a086:	2d00      	cmp	r5, #0
 800a088:	4606      	mov	r6, r0
 800a08a:	db01      	blt.n	800a090 <_malloc_r+0x1c>
 800a08c:	42a9      	cmp	r1, r5
 800a08e:	d904      	bls.n	800a09a <_malloc_r+0x26>
 800a090:	230c      	movs	r3, #12
 800a092:	6033      	str	r3, [r6, #0]
 800a094:	2000      	movs	r0, #0
 800a096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a09a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a170 <_malloc_r+0xfc>
 800a09e:	f000 f869 	bl	800a174 <__malloc_lock>
 800a0a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0a6:	461c      	mov	r4, r3
 800a0a8:	bb44      	cbnz	r4, 800a0fc <_malloc_r+0x88>
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff ffbf 	bl	800a030 <sbrk_aligned>
 800a0b2:	1c43      	adds	r3, r0, #1
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	d158      	bne.n	800a16a <_malloc_r+0xf6>
 800a0b8:	f8d8 4000 	ldr.w	r4, [r8]
 800a0bc:	4627      	mov	r7, r4
 800a0be:	2f00      	cmp	r7, #0
 800a0c0:	d143      	bne.n	800a14a <_malloc_r+0xd6>
 800a0c2:	2c00      	cmp	r4, #0
 800a0c4:	d04b      	beq.n	800a15e <_malloc_r+0xea>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	eb04 0903 	add.w	r9, r4, r3
 800a0d0:	f000 fe60 	bl	800ad94 <_sbrk_r>
 800a0d4:	4581      	cmp	r9, r0
 800a0d6:	d142      	bne.n	800a15e <_malloc_r+0xea>
 800a0d8:	6821      	ldr	r1, [r4, #0]
 800a0da:	1a6d      	subs	r5, r5, r1
 800a0dc:	4629      	mov	r1, r5
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f7ff ffa6 	bl	800a030 <sbrk_aligned>
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d03a      	beq.n	800a15e <_malloc_r+0xea>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	442b      	add	r3, r5
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	bb62      	cbnz	r2, 800a150 <_malloc_r+0xdc>
 800a0f6:	f8c8 7000 	str.w	r7, [r8]
 800a0fa:	e00f      	b.n	800a11c <_malloc_r+0xa8>
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	1b52      	subs	r2, r2, r5
 800a100:	d420      	bmi.n	800a144 <_malloc_r+0xd0>
 800a102:	2a0b      	cmp	r2, #11
 800a104:	d917      	bls.n	800a136 <_malloc_r+0xc2>
 800a106:	1961      	adds	r1, r4, r5
 800a108:	42a3      	cmp	r3, r4
 800a10a:	6025      	str	r5, [r4, #0]
 800a10c:	bf18      	it	ne
 800a10e:	6059      	strne	r1, [r3, #4]
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	bf08      	it	eq
 800a114:	f8c8 1000 	streq.w	r1, [r8]
 800a118:	5162      	str	r2, [r4, r5]
 800a11a:	604b      	str	r3, [r1, #4]
 800a11c:	4630      	mov	r0, r6
 800a11e:	f000 f82f 	bl	800a180 <__malloc_unlock>
 800a122:	f104 000b 	add.w	r0, r4, #11
 800a126:	1d23      	adds	r3, r4, #4
 800a128:	f020 0007 	bic.w	r0, r0, #7
 800a12c:	1ac2      	subs	r2, r0, r3
 800a12e:	bf1c      	itt	ne
 800a130:	1a1b      	subne	r3, r3, r0
 800a132:	50a3      	strne	r3, [r4, r2]
 800a134:	e7af      	b.n	800a096 <_malloc_r+0x22>
 800a136:	6862      	ldr	r2, [r4, #4]
 800a138:	42a3      	cmp	r3, r4
 800a13a:	bf0c      	ite	eq
 800a13c:	f8c8 2000 	streq.w	r2, [r8]
 800a140:	605a      	strne	r2, [r3, #4]
 800a142:	e7eb      	b.n	800a11c <_malloc_r+0xa8>
 800a144:	4623      	mov	r3, r4
 800a146:	6864      	ldr	r4, [r4, #4]
 800a148:	e7ae      	b.n	800a0a8 <_malloc_r+0x34>
 800a14a:	463c      	mov	r4, r7
 800a14c:	687f      	ldr	r7, [r7, #4]
 800a14e:	e7b6      	b.n	800a0be <_malloc_r+0x4a>
 800a150:	461a      	mov	r2, r3
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	42a3      	cmp	r3, r4
 800a156:	d1fb      	bne.n	800a150 <_malloc_r+0xdc>
 800a158:	2300      	movs	r3, #0
 800a15a:	6053      	str	r3, [r2, #4]
 800a15c:	e7de      	b.n	800a11c <_malloc_r+0xa8>
 800a15e:	230c      	movs	r3, #12
 800a160:	6033      	str	r3, [r6, #0]
 800a162:	4630      	mov	r0, r6
 800a164:	f000 f80c 	bl	800a180 <__malloc_unlock>
 800a168:	e794      	b.n	800a094 <_malloc_r+0x20>
 800a16a:	6005      	str	r5, [r0, #0]
 800a16c:	e7d6      	b.n	800a11c <_malloc_r+0xa8>
 800a16e:	bf00      	nop
 800a170:	24004e14 	.word	0x24004e14

0800a174 <__malloc_lock>:
 800a174:	4801      	ldr	r0, [pc, #4]	@ (800a17c <__malloc_lock+0x8>)
 800a176:	f7ff b91a 	b.w	80093ae <__retarget_lock_acquire_recursive>
 800a17a:	bf00      	nop
 800a17c:	24004e0c 	.word	0x24004e0c

0800a180 <__malloc_unlock>:
 800a180:	4801      	ldr	r0, [pc, #4]	@ (800a188 <__malloc_unlock+0x8>)
 800a182:	f7ff b915 	b.w	80093b0 <__retarget_lock_release_recursive>
 800a186:	bf00      	nop
 800a188:	24004e0c 	.word	0x24004e0c

0800a18c <_Balloc>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	69c6      	ldr	r6, [r0, #28]
 800a190:	4604      	mov	r4, r0
 800a192:	460d      	mov	r5, r1
 800a194:	b976      	cbnz	r6, 800a1b4 <_Balloc+0x28>
 800a196:	2010      	movs	r0, #16
 800a198:	f7ff ff42 	bl	800a020 <malloc>
 800a19c:	4602      	mov	r2, r0
 800a19e:	61e0      	str	r0, [r4, #28]
 800a1a0:	b920      	cbnz	r0, 800a1ac <_Balloc+0x20>
 800a1a2:	4b18      	ldr	r3, [pc, #96]	@ (800a204 <_Balloc+0x78>)
 800a1a4:	4818      	ldr	r0, [pc, #96]	@ (800a208 <_Balloc+0x7c>)
 800a1a6:	216b      	movs	r1, #107	@ 0x6b
 800a1a8:	f000 fe04 	bl	800adb4 <__assert_func>
 800a1ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1b0:	6006      	str	r6, [r0, #0]
 800a1b2:	60c6      	str	r6, [r0, #12]
 800a1b4:	69e6      	ldr	r6, [r4, #28]
 800a1b6:	68f3      	ldr	r3, [r6, #12]
 800a1b8:	b183      	cbz	r3, 800a1dc <_Balloc+0x50>
 800a1ba:	69e3      	ldr	r3, [r4, #28]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1c2:	b9b8      	cbnz	r0, 800a1f4 <_Balloc+0x68>
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	fa01 f605 	lsl.w	r6, r1, r5
 800a1ca:	1d72      	adds	r2, r6, #5
 800a1cc:	0092      	lsls	r2, r2, #2
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 fe0e 	bl	800adf0 <_calloc_r>
 800a1d4:	b160      	cbz	r0, 800a1f0 <_Balloc+0x64>
 800a1d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1da:	e00e      	b.n	800a1fa <_Balloc+0x6e>
 800a1dc:	2221      	movs	r2, #33	@ 0x21
 800a1de:	2104      	movs	r1, #4
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fe05 	bl	800adf0 <_calloc_r>
 800a1e6:	69e3      	ldr	r3, [r4, #28]
 800a1e8:	60f0      	str	r0, [r6, #12]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e4      	bne.n	800a1ba <_Balloc+0x2e>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	6802      	ldr	r2, [r0, #0]
 800a1f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a200:	e7f7      	b.n	800a1f2 <_Balloc+0x66>
 800a202:	bf00      	nop
 800a204:	0800b12d 	.word	0x0800b12d
 800a208:	0800b1ad 	.word	0x0800b1ad

0800a20c <_Bfree>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	69c6      	ldr	r6, [r0, #28]
 800a210:	4605      	mov	r5, r0
 800a212:	460c      	mov	r4, r1
 800a214:	b976      	cbnz	r6, 800a234 <_Bfree+0x28>
 800a216:	2010      	movs	r0, #16
 800a218:	f7ff ff02 	bl	800a020 <malloc>
 800a21c:	4602      	mov	r2, r0
 800a21e:	61e8      	str	r0, [r5, #28]
 800a220:	b920      	cbnz	r0, 800a22c <_Bfree+0x20>
 800a222:	4b09      	ldr	r3, [pc, #36]	@ (800a248 <_Bfree+0x3c>)
 800a224:	4809      	ldr	r0, [pc, #36]	@ (800a24c <_Bfree+0x40>)
 800a226:	218f      	movs	r1, #143	@ 0x8f
 800a228:	f000 fdc4 	bl	800adb4 <__assert_func>
 800a22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a230:	6006      	str	r6, [r0, #0]
 800a232:	60c6      	str	r6, [r0, #12]
 800a234:	b13c      	cbz	r4, 800a246 <_Bfree+0x3a>
 800a236:	69eb      	ldr	r3, [r5, #28]
 800a238:	6862      	ldr	r2, [r4, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a240:	6021      	str	r1, [r4, #0]
 800a242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	0800b12d 	.word	0x0800b12d
 800a24c:	0800b1ad 	.word	0x0800b1ad

0800a250 <__multadd>:
 800a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a254:	690d      	ldr	r5, [r1, #16]
 800a256:	4607      	mov	r7, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	461e      	mov	r6, r3
 800a25c:	f101 0c14 	add.w	ip, r1, #20
 800a260:	2000      	movs	r0, #0
 800a262:	f8dc 3000 	ldr.w	r3, [ip]
 800a266:	b299      	uxth	r1, r3
 800a268:	fb02 6101 	mla	r1, r2, r1, r6
 800a26c:	0c1e      	lsrs	r6, r3, #16
 800a26e:	0c0b      	lsrs	r3, r1, #16
 800a270:	fb02 3306 	mla	r3, r2, r6, r3
 800a274:	b289      	uxth	r1, r1
 800a276:	3001      	adds	r0, #1
 800a278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a27c:	4285      	cmp	r5, r0
 800a27e:	f84c 1b04 	str.w	r1, [ip], #4
 800a282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a286:	dcec      	bgt.n	800a262 <__multadd+0x12>
 800a288:	b30e      	cbz	r6, 800a2ce <__multadd+0x7e>
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dc19      	bgt.n	800a2c4 <__multadd+0x74>
 800a290:	6861      	ldr	r1, [r4, #4]
 800a292:	4638      	mov	r0, r7
 800a294:	3101      	adds	r1, #1
 800a296:	f7ff ff79 	bl	800a18c <_Balloc>
 800a29a:	4680      	mov	r8, r0
 800a29c:	b928      	cbnz	r0, 800a2aa <__multadd+0x5a>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d4 <__multadd+0x84>)
 800a2a2:	480d      	ldr	r0, [pc, #52]	@ (800a2d8 <__multadd+0x88>)
 800a2a4:	21ba      	movs	r1, #186	@ 0xba
 800a2a6:	f000 fd85 	bl	800adb4 <__assert_func>
 800a2aa:	6922      	ldr	r2, [r4, #16]
 800a2ac:	3202      	adds	r2, #2
 800a2ae:	f104 010c 	add.w	r1, r4, #12
 800a2b2:	0092      	lsls	r2, r2, #2
 800a2b4:	300c      	adds	r0, #12
 800a2b6:	f7ff f87c 	bl	80093b2 <memcpy>
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff ffa5 	bl	800a20c <_Bfree>
 800a2c2:	4644      	mov	r4, r8
 800a2c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	615e      	str	r6, [r3, #20]
 800a2cc:	6125      	str	r5, [r4, #16]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d4:	0800b19c 	.word	0x0800b19c
 800a2d8:	0800b1ad 	.word	0x0800b1ad

0800a2dc <__hi0bits>:
 800a2dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	bf36      	itet	cc
 800a2e4:	0403      	lslcc	r3, r0, #16
 800a2e6:	2000      	movcs	r0, #0
 800a2e8:	2010      	movcc	r0, #16
 800a2ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2ee:	bf3c      	itt	cc
 800a2f0:	021b      	lslcc	r3, r3, #8
 800a2f2:	3008      	addcc	r0, #8
 800a2f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2f8:	bf3c      	itt	cc
 800a2fa:	011b      	lslcc	r3, r3, #4
 800a2fc:	3004      	addcc	r0, #4
 800a2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a302:	bf3c      	itt	cc
 800a304:	009b      	lslcc	r3, r3, #2
 800a306:	3002      	addcc	r0, #2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	db05      	blt.n	800a318 <__hi0bits+0x3c>
 800a30c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a310:	f100 0001 	add.w	r0, r0, #1
 800a314:	bf08      	it	eq
 800a316:	2020      	moveq	r0, #32
 800a318:	4770      	bx	lr

0800a31a <__lo0bits>:
 800a31a:	6803      	ldr	r3, [r0, #0]
 800a31c:	4602      	mov	r2, r0
 800a31e:	f013 0007 	ands.w	r0, r3, #7
 800a322:	d00b      	beq.n	800a33c <__lo0bits+0x22>
 800a324:	07d9      	lsls	r1, r3, #31
 800a326:	d421      	bmi.n	800a36c <__lo0bits+0x52>
 800a328:	0798      	lsls	r0, r3, #30
 800a32a:	bf49      	itett	mi
 800a32c:	085b      	lsrmi	r3, r3, #1
 800a32e:	089b      	lsrpl	r3, r3, #2
 800a330:	2001      	movmi	r0, #1
 800a332:	6013      	strmi	r3, [r2, #0]
 800a334:	bf5c      	itt	pl
 800a336:	6013      	strpl	r3, [r2, #0]
 800a338:	2002      	movpl	r0, #2
 800a33a:	4770      	bx	lr
 800a33c:	b299      	uxth	r1, r3
 800a33e:	b909      	cbnz	r1, 800a344 <__lo0bits+0x2a>
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	2010      	movs	r0, #16
 800a344:	b2d9      	uxtb	r1, r3
 800a346:	b909      	cbnz	r1, 800a34c <__lo0bits+0x32>
 800a348:	3008      	adds	r0, #8
 800a34a:	0a1b      	lsrs	r3, r3, #8
 800a34c:	0719      	lsls	r1, r3, #28
 800a34e:	bf04      	itt	eq
 800a350:	091b      	lsreq	r3, r3, #4
 800a352:	3004      	addeq	r0, #4
 800a354:	0799      	lsls	r1, r3, #30
 800a356:	bf04      	itt	eq
 800a358:	089b      	lsreq	r3, r3, #2
 800a35a:	3002      	addeq	r0, #2
 800a35c:	07d9      	lsls	r1, r3, #31
 800a35e:	d403      	bmi.n	800a368 <__lo0bits+0x4e>
 800a360:	085b      	lsrs	r3, r3, #1
 800a362:	f100 0001 	add.w	r0, r0, #1
 800a366:	d003      	beq.n	800a370 <__lo0bits+0x56>
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	4770      	bx	lr
 800a36c:	2000      	movs	r0, #0
 800a36e:	4770      	bx	lr
 800a370:	2020      	movs	r0, #32
 800a372:	4770      	bx	lr

0800a374 <__i2b>:
 800a374:	b510      	push	{r4, lr}
 800a376:	460c      	mov	r4, r1
 800a378:	2101      	movs	r1, #1
 800a37a:	f7ff ff07 	bl	800a18c <_Balloc>
 800a37e:	4602      	mov	r2, r0
 800a380:	b928      	cbnz	r0, 800a38e <__i2b+0x1a>
 800a382:	4b05      	ldr	r3, [pc, #20]	@ (800a398 <__i2b+0x24>)
 800a384:	4805      	ldr	r0, [pc, #20]	@ (800a39c <__i2b+0x28>)
 800a386:	f240 1145 	movw	r1, #325	@ 0x145
 800a38a:	f000 fd13 	bl	800adb4 <__assert_func>
 800a38e:	2301      	movs	r3, #1
 800a390:	6144      	str	r4, [r0, #20]
 800a392:	6103      	str	r3, [r0, #16]
 800a394:	bd10      	pop	{r4, pc}
 800a396:	bf00      	nop
 800a398:	0800b19c 	.word	0x0800b19c
 800a39c:	0800b1ad 	.word	0x0800b1ad

0800a3a0 <__multiply>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	690a      	ldr	r2, [r1, #16]
 800a3a8:	6923      	ldr	r3, [r4, #16]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	bfa8      	it	ge
 800a3ae:	4623      	movge	r3, r4
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	bfa4      	itt	ge
 800a3b4:	460c      	movge	r4, r1
 800a3b6:	461f      	movge	r7, r3
 800a3b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a3bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a3c0:	68a3      	ldr	r3, [r4, #8]
 800a3c2:	6861      	ldr	r1, [r4, #4]
 800a3c4:	eb0a 0609 	add.w	r6, sl, r9
 800a3c8:	42b3      	cmp	r3, r6
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	bfb8      	it	lt
 800a3ce:	3101      	addlt	r1, #1
 800a3d0:	f7ff fedc 	bl	800a18c <_Balloc>
 800a3d4:	b930      	cbnz	r0, 800a3e4 <__multiply+0x44>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	4b44      	ldr	r3, [pc, #272]	@ (800a4ec <__multiply+0x14c>)
 800a3da:	4845      	ldr	r0, [pc, #276]	@ (800a4f0 <__multiply+0x150>)
 800a3dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3e0:	f000 fce8 	bl	800adb4 <__assert_func>
 800a3e4:	f100 0514 	add.w	r5, r0, #20
 800a3e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4543      	cmp	r3, r8
 800a3f2:	d321      	bcc.n	800a438 <__multiply+0x98>
 800a3f4:	f107 0114 	add.w	r1, r7, #20
 800a3f8:	f104 0214 	add.w	r2, r4, #20
 800a3fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a400:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a404:	9302      	str	r3, [sp, #8]
 800a406:	1b13      	subs	r3, r2, r4
 800a408:	3b15      	subs	r3, #21
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	3304      	adds	r3, #4
 800a410:	f104 0715 	add.w	r7, r4, #21
 800a414:	42ba      	cmp	r2, r7
 800a416:	bf38      	it	cc
 800a418:	2304      	movcc	r3, #4
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	9b02      	ldr	r3, [sp, #8]
 800a41e:	9103      	str	r1, [sp, #12]
 800a420:	428b      	cmp	r3, r1
 800a422:	d80c      	bhi.n	800a43e <__multiply+0x9e>
 800a424:	2e00      	cmp	r6, #0
 800a426:	dd03      	ble.n	800a430 <__multiply+0x90>
 800a428:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d05b      	beq.n	800a4e8 <__multiply+0x148>
 800a430:	6106      	str	r6, [r0, #16]
 800a432:	b005      	add	sp, #20
 800a434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a438:	f843 2b04 	str.w	r2, [r3], #4
 800a43c:	e7d8      	b.n	800a3f0 <__multiply+0x50>
 800a43e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a442:	f1ba 0f00 	cmp.w	sl, #0
 800a446:	d024      	beq.n	800a492 <__multiply+0xf2>
 800a448:	f104 0e14 	add.w	lr, r4, #20
 800a44c:	46a9      	mov	r9, r5
 800a44e:	f04f 0c00 	mov.w	ip, #0
 800a452:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a456:	f8d9 3000 	ldr.w	r3, [r9]
 800a45a:	fa1f fb87 	uxth.w	fp, r7
 800a45e:	b29b      	uxth	r3, r3
 800a460:	fb0a 330b 	mla	r3, sl, fp, r3
 800a464:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a468:	f8d9 7000 	ldr.w	r7, [r9]
 800a46c:	4463      	add	r3, ip
 800a46e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a472:	fb0a c70b 	mla	r7, sl, fp, ip
 800a476:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a480:	4572      	cmp	r2, lr
 800a482:	f849 3b04 	str.w	r3, [r9], #4
 800a486:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a48a:	d8e2      	bhi.n	800a452 <__multiply+0xb2>
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	f845 c003 	str.w	ip, [r5, r3]
 800a492:	9b03      	ldr	r3, [sp, #12]
 800a494:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a498:	3104      	adds	r1, #4
 800a49a:	f1b9 0f00 	cmp.w	r9, #0
 800a49e:	d021      	beq.n	800a4e4 <__multiply+0x144>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	f104 0c14 	add.w	ip, r4, #20
 800a4a6:	46ae      	mov	lr, r5
 800a4a8:	f04f 0a00 	mov.w	sl, #0
 800a4ac:	f8bc b000 	ldrh.w	fp, [ip]
 800a4b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a4b4:	fb09 770b 	mla	r7, r9, fp, r7
 800a4b8:	4457      	add	r7, sl
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4c0:	f84e 3b04 	str.w	r3, [lr], #4
 800a4c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4cc:	f8be 3000 	ldrh.w	r3, [lr]
 800a4d0:	fb09 330a 	mla	r3, r9, sl, r3
 800a4d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4d8:	4562      	cmp	r2, ip
 800a4da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4de:	d8e5      	bhi.n	800a4ac <__multiply+0x10c>
 800a4e0:	9f01      	ldr	r7, [sp, #4]
 800a4e2:	51eb      	str	r3, [r5, r7]
 800a4e4:	3504      	adds	r5, #4
 800a4e6:	e799      	b.n	800a41c <__multiply+0x7c>
 800a4e8:	3e01      	subs	r6, #1
 800a4ea:	e79b      	b.n	800a424 <__multiply+0x84>
 800a4ec:	0800b19c 	.word	0x0800b19c
 800a4f0:	0800b1ad 	.word	0x0800b1ad

0800a4f4 <__pow5mult>:
 800a4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f8:	4615      	mov	r5, r2
 800a4fa:	f012 0203 	ands.w	r2, r2, #3
 800a4fe:	4607      	mov	r7, r0
 800a500:	460e      	mov	r6, r1
 800a502:	d007      	beq.n	800a514 <__pow5mult+0x20>
 800a504:	4c25      	ldr	r4, [pc, #148]	@ (800a59c <__pow5mult+0xa8>)
 800a506:	3a01      	subs	r2, #1
 800a508:	2300      	movs	r3, #0
 800a50a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a50e:	f7ff fe9f 	bl	800a250 <__multadd>
 800a512:	4606      	mov	r6, r0
 800a514:	10ad      	asrs	r5, r5, #2
 800a516:	d03d      	beq.n	800a594 <__pow5mult+0xa0>
 800a518:	69fc      	ldr	r4, [r7, #28]
 800a51a:	b97c      	cbnz	r4, 800a53c <__pow5mult+0x48>
 800a51c:	2010      	movs	r0, #16
 800a51e:	f7ff fd7f 	bl	800a020 <malloc>
 800a522:	4602      	mov	r2, r0
 800a524:	61f8      	str	r0, [r7, #28]
 800a526:	b928      	cbnz	r0, 800a534 <__pow5mult+0x40>
 800a528:	4b1d      	ldr	r3, [pc, #116]	@ (800a5a0 <__pow5mult+0xac>)
 800a52a:	481e      	ldr	r0, [pc, #120]	@ (800a5a4 <__pow5mult+0xb0>)
 800a52c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a530:	f000 fc40 	bl	800adb4 <__assert_func>
 800a534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a538:	6004      	str	r4, [r0, #0]
 800a53a:	60c4      	str	r4, [r0, #12]
 800a53c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a544:	b94c      	cbnz	r4, 800a55a <__pow5mult+0x66>
 800a546:	f240 2171 	movw	r1, #625	@ 0x271
 800a54a:	4638      	mov	r0, r7
 800a54c:	f7ff ff12 	bl	800a374 <__i2b>
 800a550:	2300      	movs	r3, #0
 800a552:	f8c8 0008 	str.w	r0, [r8, #8]
 800a556:	4604      	mov	r4, r0
 800a558:	6003      	str	r3, [r0, #0]
 800a55a:	f04f 0900 	mov.w	r9, #0
 800a55e:	07eb      	lsls	r3, r5, #31
 800a560:	d50a      	bpl.n	800a578 <__pow5mult+0x84>
 800a562:	4631      	mov	r1, r6
 800a564:	4622      	mov	r2, r4
 800a566:	4638      	mov	r0, r7
 800a568:	f7ff ff1a 	bl	800a3a0 <__multiply>
 800a56c:	4631      	mov	r1, r6
 800a56e:	4680      	mov	r8, r0
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff fe4b 	bl	800a20c <_Bfree>
 800a576:	4646      	mov	r6, r8
 800a578:	106d      	asrs	r5, r5, #1
 800a57a:	d00b      	beq.n	800a594 <__pow5mult+0xa0>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	b938      	cbnz	r0, 800a590 <__pow5mult+0x9c>
 800a580:	4622      	mov	r2, r4
 800a582:	4621      	mov	r1, r4
 800a584:	4638      	mov	r0, r7
 800a586:	f7ff ff0b 	bl	800a3a0 <__multiply>
 800a58a:	6020      	str	r0, [r4, #0]
 800a58c:	f8c0 9000 	str.w	r9, [r0]
 800a590:	4604      	mov	r4, r0
 800a592:	e7e4      	b.n	800a55e <__pow5mult+0x6a>
 800a594:	4630      	mov	r0, r6
 800a596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59a:	bf00      	nop
 800a59c:	0800b208 	.word	0x0800b208
 800a5a0:	0800b12d 	.word	0x0800b12d
 800a5a4:	0800b1ad 	.word	0x0800b1ad

0800a5a8 <__lshift>:
 800a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	6849      	ldr	r1, [r1, #4]
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	4607      	mov	r7, r0
 800a5ba:	4691      	mov	r9, r2
 800a5bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5c0:	f108 0601 	add.w	r6, r8, #1
 800a5c4:	42b3      	cmp	r3, r6
 800a5c6:	db0b      	blt.n	800a5e0 <__lshift+0x38>
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f7ff fddf 	bl	800a18c <_Balloc>
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	b948      	cbnz	r0, 800a5e6 <__lshift+0x3e>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b28      	ldr	r3, [pc, #160]	@ (800a678 <__lshift+0xd0>)
 800a5d6:	4829      	ldr	r0, [pc, #164]	@ (800a67c <__lshift+0xd4>)
 800a5d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5dc:	f000 fbea 	bl	800adb4 <__assert_func>
 800a5e0:	3101      	adds	r1, #1
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__lshift+0x1c>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f100 0114 	add.w	r1, r0, #20
 800a5ec:	f100 0210 	add.w	r2, r0, #16
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	4553      	cmp	r3, sl
 800a5f4:	db33      	blt.n	800a65e <__lshift+0xb6>
 800a5f6:	6920      	ldr	r0, [r4, #16]
 800a5f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5fc:	f104 0314 	add.w	r3, r4, #20
 800a600:	f019 091f 	ands.w	r9, r9, #31
 800a604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a60c:	d02b      	beq.n	800a666 <__lshift+0xbe>
 800a60e:	f1c9 0e20 	rsb	lr, r9, #32
 800a612:	468a      	mov	sl, r1
 800a614:	2200      	movs	r2, #0
 800a616:	6818      	ldr	r0, [r3, #0]
 800a618:	fa00 f009 	lsl.w	r0, r0, r9
 800a61c:	4310      	orrs	r0, r2
 800a61e:	f84a 0b04 	str.w	r0, [sl], #4
 800a622:	f853 2b04 	ldr.w	r2, [r3], #4
 800a626:	459c      	cmp	ip, r3
 800a628:	fa22 f20e 	lsr.w	r2, r2, lr
 800a62c:	d8f3      	bhi.n	800a616 <__lshift+0x6e>
 800a62e:	ebac 0304 	sub.w	r3, ip, r4
 800a632:	3b15      	subs	r3, #21
 800a634:	f023 0303 	bic.w	r3, r3, #3
 800a638:	3304      	adds	r3, #4
 800a63a:	f104 0015 	add.w	r0, r4, #21
 800a63e:	4584      	cmp	ip, r0
 800a640:	bf38      	it	cc
 800a642:	2304      	movcc	r3, #4
 800a644:	50ca      	str	r2, [r1, r3]
 800a646:	b10a      	cbz	r2, 800a64c <__lshift+0xa4>
 800a648:	f108 0602 	add.w	r6, r8, #2
 800a64c:	3e01      	subs	r6, #1
 800a64e:	4638      	mov	r0, r7
 800a650:	612e      	str	r6, [r5, #16]
 800a652:	4621      	mov	r1, r4
 800a654:	f7ff fdda 	bl	800a20c <_Bfree>
 800a658:	4628      	mov	r0, r5
 800a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a662:	3301      	adds	r3, #1
 800a664:	e7c5      	b.n	800a5f2 <__lshift+0x4a>
 800a666:	3904      	subs	r1, #4
 800a668:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a670:	459c      	cmp	ip, r3
 800a672:	d8f9      	bhi.n	800a668 <__lshift+0xc0>
 800a674:	e7ea      	b.n	800a64c <__lshift+0xa4>
 800a676:	bf00      	nop
 800a678:	0800b19c 	.word	0x0800b19c
 800a67c:	0800b1ad 	.word	0x0800b1ad

0800a680 <__mcmp>:
 800a680:	690a      	ldr	r2, [r1, #16]
 800a682:	4603      	mov	r3, r0
 800a684:	6900      	ldr	r0, [r0, #16]
 800a686:	1a80      	subs	r0, r0, r2
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	d10e      	bne.n	800a6aa <__mcmp+0x2a>
 800a68c:	3314      	adds	r3, #20
 800a68e:	3114      	adds	r1, #20
 800a690:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a694:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a698:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a69c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6a0:	4295      	cmp	r5, r2
 800a6a2:	d003      	beq.n	800a6ac <__mcmp+0x2c>
 800a6a4:	d205      	bcs.n	800a6b2 <__mcmp+0x32>
 800a6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6aa:	bd30      	pop	{r4, r5, pc}
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	d3f3      	bcc.n	800a698 <__mcmp+0x18>
 800a6b0:	e7fb      	b.n	800a6aa <__mcmp+0x2a>
 800a6b2:	2001      	movs	r0, #1
 800a6b4:	e7f9      	b.n	800a6aa <__mcmp+0x2a>
	...

0800a6b8 <__mdiff>:
 800a6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	4689      	mov	r9, r1
 800a6be:	4606      	mov	r6, r0
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4648      	mov	r0, r9
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	f7ff ffdb 	bl	800a680 <__mcmp>
 800a6ca:	1e05      	subs	r5, r0, #0
 800a6cc:	d112      	bne.n	800a6f4 <__mdiff+0x3c>
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff fd5b 	bl	800a18c <_Balloc>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	b928      	cbnz	r0, 800a6e6 <__mdiff+0x2e>
 800a6da:	4b3f      	ldr	r3, [pc, #252]	@ (800a7d8 <__mdiff+0x120>)
 800a6dc:	f240 2137 	movw	r1, #567	@ 0x237
 800a6e0:	483e      	ldr	r0, [pc, #248]	@ (800a7dc <__mdiff+0x124>)
 800a6e2:	f000 fb67 	bl	800adb4 <__assert_func>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	b003      	add	sp, #12
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	bfbc      	itt	lt
 800a6f6:	464b      	movlt	r3, r9
 800a6f8:	46a1      	movlt	r9, r4
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a700:	bfba      	itte	lt
 800a702:	461c      	movlt	r4, r3
 800a704:	2501      	movlt	r5, #1
 800a706:	2500      	movge	r5, #0
 800a708:	f7ff fd40 	bl	800a18c <_Balloc>
 800a70c:	4602      	mov	r2, r0
 800a70e:	b918      	cbnz	r0, 800a718 <__mdiff+0x60>
 800a710:	4b31      	ldr	r3, [pc, #196]	@ (800a7d8 <__mdiff+0x120>)
 800a712:	f240 2145 	movw	r1, #581	@ 0x245
 800a716:	e7e3      	b.n	800a6e0 <__mdiff+0x28>
 800a718:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a71c:	6926      	ldr	r6, [r4, #16]
 800a71e:	60c5      	str	r5, [r0, #12]
 800a720:	f109 0310 	add.w	r3, r9, #16
 800a724:	f109 0514 	add.w	r5, r9, #20
 800a728:	f104 0e14 	add.w	lr, r4, #20
 800a72c:	f100 0b14 	add.w	fp, r0, #20
 800a730:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a734:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	46d9      	mov	r9, fp
 800a73c:	f04f 0c00 	mov.w	ip, #0
 800a740:	9b01      	ldr	r3, [sp, #4]
 800a742:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a746:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	fa1f f38a 	uxth.w	r3, sl
 800a750:	4619      	mov	r1, r3
 800a752:	b283      	uxth	r3, r0
 800a754:	1acb      	subs	r3, r1, r3
 800a756:	0c00      	lsrs	r0, r0, #16
 800a758:	4463      	add	r3, ip
 800a75a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a75e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a762:	b29b      	uxth	r3, r3
 800a764:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a768:	4576      	cmp	r6, lr
 800a76a:	f849 3b04 	str.w	r3, [r9], #4
 800a76e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a772:	d8e5      	bhi.n	800a740 <__mdiff+0x88>
 800a774:	1b33      	subs	r3, r6, r4
 800a776:	3b15      	subs	r3, #21
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	3415      	adds	r4, #21
 800a77e:	3304      	adds	r3, #4
 800a780:	42a6      	cmp	r6, r4
 800a782:	bf38      	it	cc
 800a784:	2304      	movcc	r3, #4
 800a786:	441d      	add	r5, r3
 800a788:	445b      	add	r3, fp
 800a78a:	461e      	mov	r6, r3
 800a78c:	462c      	mov	r4, r5
 800a78e:	4544      	cmp	r4, r8
 800a790:	d30e      	bcc.n	800a7b0 <__mdiff+0xf8>
 800a792:	f108 0103 	add.w	r1, r8, #3
 800a796:	1b49      	subs	r1, r1, r5
 800a798:	f021 0103 	bic.w	r1, r1, #3
 800a79c:	3d03      	subs	r5, #3
 800a79e:	45a8      	cmp	r8, r5
 800a7a0:	bf38      	it	cc
 800a7a2:	2100      	movcc	r1, #0
 800a7a4:	440b      	add	r3, r1
 800a7a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7aa:	b191      	cbz	r1, 800a7d2 <__mdiff+0x11a>
 800a7ac:	6117      	str	r7, [r2, #16]
 800a7ae:	e79d      	b.n	800a6ec <__mdiff+0x34>
 800a7b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7b4:	46e6      	mov	lr, ip
 800a7b6:	0c08      	lsrs	r0, r1, #16
 800a7b8:	fa1c fc81 	uxtah	ip, ip, r1
 800a7bc:	4471      	add	r1, lr
 800a7be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7c2:	b289      	uxth	r1, r1
 800a7c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7c8:	f846 1b04 	str.w	r1, [r6], #4
 800a7cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7d0:	e7dd      	b.n	800a78e <__mdiff+0xd6>
 800a7d2:	3f01      	subs	r7, #1
 800a7d4:	e7e7      	b.n	800a7a6 <__mdiff+0xee>
 800a7d6:	bf00      	nop
 800a7d8:	0800b19c 	.word	0x0800b19c
 800a7dc:	0800b1ad 	.word	0x0800b1ad

0800a7e0 <__d2b>:
 800a7e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	ec59 8b10 	vmov	r8, r9, d0
 800a7ec:	4616      	mov	r6, r2
 800a7ee:	f7ff fccd 	bl	800a18c <_Balloc>
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	b930      	cbnz	r0, 800a804 <__d2b+0x24>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	4b23      	ldr	r3, [pc, #140]	@ (800a888 <__d2b+0xa8>)
 800a7fa:	4824      	ldr	r0, [pc, #144]	@ (800a88c <__d2b+0xac>)
 800a7fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a800:	f000 fad8 	bl	800adb4 <__assert_func>
 800a804:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a808:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a80c:	b10d      	cbz	r5, 800a812 <__d2b+0x32>
 800a80e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	f1b8 0300 	subs.w	r3, r8, #0
 800a818:	d023      	beq.n	800a862 <__d2b+0x82>
 800a81a:	4668      	mov	r0, sp
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	f7ff fd7c 	bl	800a31a <__lo0bits>
 800a822:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a826:	b1d0      	cbz	r0, 800a85e <__d2b+0x7e>
 800a828:	f1c0 0320 	rsb	r3, r0, #32
 800a82c:	fa02 f303 	lsl.w	r3, r2, r3
 800a830:	430b      	orrs	r3, r1
 800a832:	40c2      	lsrs	r2, r0
 800a834:	6163      	str	r3, [r4, #20]
 800a836:	9201      	str	r2, [sp, #4]
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	61a3      	str	r3, [r4, #24]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bf0c      	ite	eq
 800a840:	2201      	moveq	r2, #1
 800a842:	2202      	movne	r2, #2
 800a844:	6122      	str	r2, [r4, #16]
 800a846:	b1a5      	cbz	r5, 800a872 <__d2b+0x92>
 800a848:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a84c:	4405      	add	r5, r0
 800a84e:	603d      	str	r5, [r7, #0]
 800a850:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a854:	6030      	str	r0, [r6, #0]
 800a856:	4620      	mov	r0, r4
 800a858:	b003      	add	sp, #12
 800a85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a85e:	6161      	str	r1, [r4, #20]
 800a860:	e7ea      	b.n	800a838 <__d2b+0x58>
 800a862:	a801      	add	r0, sp, #4
 800a864:	f7ff fd59 	bl	800a31a <__lo0bits>
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	6163      	str	r3, [r4, #20]
 800a86c:	3020      	adds	r0, #32
 800a86e:	2201      	movs	r2, #1
 800a870:	e7e8      	b.n	800a844 <__d2b+0x64>
 800a872:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a876:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a87a:	6038      	str	r0, [r7, #0]
 800a87c:	6918      	ldr	r0, [r3, #16]
 800a87e:	f7ff fd2d 	bl	800a2dc <__hi0bits>
 800a882:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a886:	e7e5      	b.n	800a854 <__d2b+0x74>
 800a888:	0800b19c 	.word	0x0800b19c
 800a88c:	0800b1ad 	.word	0x0800b1ad

0800a890 <__sfputc_r>:
 800a890:	6893      	ldr	r3, [r2, #8]
 800a892:	3b01      	subs	r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	b410      	push	{r4}
 800a898:	6093      	str	r3, [r2, #8]
 800a89a:	da08      	bge.n	800a8ae <__sfputc_r+0x1e>
 800a89c:	6994      	ldr	r4, [r2, #24]
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	db01      	blt.n	800a8a6 <__sfputc_r+0x16>
 800a8a2:	290a      	cmp	r1, #10
 800a8a4:	d103      	bne.n	800a8ae <__sfputc_r+0x1e>
 800a8a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8aa:	f000 b9df 	b.w	800ac6c <__swbuf_r>
 800a8ae:	6813      	ldr	r3, [r2, #0]
 800a8b0:	1c58      	adds	r0, r3, #1
 800a8b2:	6010      	str	r0, [r2, #0]
 800a8b4:	7019      	strb	r1, [r3, #0]
 800a8b6:	4608      	mov	r0, r1
 800a8b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <__sfputs_r>:
 800a8be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	460f      	mov	r7, r1
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	18d5      	adds	r5, r2, r3
 800a8c8:	42ac      	cmp	r4, r5
 800a8ca:	d101      	bne.n	800a8d0 <__sfputs_r+0x12>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e007      	b.n	800a8e0 <__sfputs_r+0x22>
 800a8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d4:	463a      	mov	r2, r7
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f7ff ffda 	bl	800a890 <__sfputc_r>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d1f3      	bne.n	800a8c8 <__sfputs_r+0xa>
 800a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8e4 <_vfiprintf_r>:
 800a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	b09d      	sub	sp, #116	@ 0x74
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	4698      	mov	r8, r3
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	b118      	cbz	r0, 800a8fc <_vfiprintf_r+0x18>
 800a8f4:	6a03      	ldr	r3, [r0, #32]
 800a8f6:	b90b      	cbnz	r3, 800a8fc <_vfiprintf_r+0x18>
 800a8f8:	f7fe fbfa 	bl	80090f0 <__sinit>
 800a8fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8fe:	07d9      	lsls	r1, r3, #31
 800a900:	d405      	bmi.n	800a90e <_vfiprintf_r+0x2a>
 800a902:	89ab      	ldrh	r3, [r5, #12]
 800a904:	059a      	lsls	r2, r3, #22
 800a906:	d402      	bmi.n	800a90e <_vfiprintf_r+0x2a>
 800a908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a90a:	f7fe fd50 	bl	80093ae <__retarget_lock_acquire_recursive>
 800a90e:	89ab      	ldrh	r3, [r5, #12]
 800a910:	071b      	lsls	r3, r3, #28
 800a912:	d501      	bpl.n	800a918 <_vfiprintf_r+0x34>
 800a914:	692b      	ldr	r3, [r5, #16]
 800a916:	b99b      	cbnz	r3, 800a940 <_vfiprintf_r+0x5c>
 800a918:	4629      	mov	r1, r5
 800a91a:	4630      	mov	r0, r6
 800a91c:	f000 f9e4 	bl	800ace8 <__swsetup_r>
 800a920:	b170      	cbz	r0, 800a940 <_vfiprintf_r+0x5c>
 800a922:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a924:	07dc      	lsls	r4, r3, #31
 800a926:	d504      	bpl.n	800a932 <_vfiprintf_r+0x4e>
 800a928:	f04f 30ff 	mov.w	r0, #4294967295
 800a92c:	b01d      	add	sp, #116	@ 0x74
 800a92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	0598      	lsls	r0, r3, #22
 800a936:	d4f7      	bmi.n	800a928 <_vfiprintf_r+0x44>
 800a938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a93a:	f7fe fd39 	bl	80093b0 <__retarget_lock_release_recursive>
 800a93e:	e7f3      	b.n	800a928 <_vfiprintf_r+0x44>
 800a940:	2300      	movs	r3, #0
 800a942:	9309      	str	r3, [sp, #36]	@ 0x24
 800a944:	2320      	movs	r3, #32
 800a946:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a94a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a94e:	2330      	movs	r3, #48	@ 0x30
 800a950:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab00 <_vfiprintf_r+0x21c>
 800a954:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a958:	f04f 0901 	mov.w	r9, #1
 800a95c:	4623      	mov	r3, r4
 800a95e:	469a      	mov	sl, r3
 800a960:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a964:	b10a      	cbz	r2, 800a96a <_vfiprintf_r+0x86>
 800a966:	2a25      	cmp	r2, #37	@ 0x25
 800a968:	d1f9      	bne.n	800a95e <_vfiprintf_r+0x7a>
 800a96a:	ebba 0b04 	subs.w	fp, sl, r4
 800a96e:	d00b      	beq.n	800a988 <_vfiprintf_r+0xa4>
 800a970:	465b      	mov	r3, fp
 800a972:	4622      	mov	r2, r4
 800a974:	4629      	mov	r1, r5
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ffa1 	bl	800a8be <__sfputs_r>
 800a97c:	3001      	adds	r0, #1
 800a97e:	f000 80a7 	beq.w	800aad0 <_vfiprintf_r+0x1ec>
 800a982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a984:	445a      	add	r2, fp
 800a986:	9209      	str	r2, [sp, #36]	@ 0x24
 800a988:	f89a 3000 	ldrb.w	r3, [sl]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 809f 	beq.w	800aad0 <_vfiprintf_r+0x1ec>
 800a992:	2300      	movs	r3, #0
 800a994:	f04f 32ff 	mov.w	r2, #4294967295
 800a998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a99c:	f10a 0a01 	add.w	sl, sl, #1
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	9307      	str	r3, [sp, #28]
 800a9a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9aa:	4654      	mov	r4, sl
 800a9ac:	2205      	movs	r2, #5
 800a9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b2:	4853      	ldr	r0, [pc, #332]	@ (800ab00 <_vfiprintf_r+0x21c>)
 800a9b4:	f7f5 fc94 	bl	80002e0 <memchr>
 800a9b8:	9a04      	ldr	r2, [sp, #16]
 800a9ba:	b9d8      	cbnz	r0, 800a9f4 <_vfiprintf_r+0x110>
 800a9bc:	06d1      	lsls	r1, r2, #27
 800a9be:	bf44      	itt	mi
 800a9c0:	2320      	movmi	r3, #32
 800a9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9c6:	0713      	lsls	r3, r2, #28
 800a9c8:	bf44      	itt	mi
 800a9ca:	232b      	movmi	r3, #43	@ 0x2b
 800a9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9d6:	d015      	beq.n	800aa04 <_vfiprintf_r+0x120>
 800a9d8:	9a07      	ldr	r2, [sp, #28]
 800a9da:	4654      	mov	r4, sl
 800a9dc:	2000      	movs	r0, #0
 800a9de:	f04f 0c0a 	mov.w	ip, #10
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e8:	3b30      	subs	r3, #48	@ 0x30
 800a9ea:	2b09      	cmp	r3, #9
 800a9ec:	d94b      	bls.n	800aa86 <_vfiprintf_r+0x1a2>
 800a9ee:	b1b0      	cbz	r0, 800aa1e <_vfiprintf_r+0x13a>
 800a9f0:	9207      	str	r2, [sp, #28]
 800a9f2:	e014      	b.n	800aa1e <_vfiprintf_r+0x13a>
 800a9f4:	eba0 0308 	sub.w	r3, r0, r8
 800a9f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	9304      	str	r3, [sp, #16]
 800aa00:	46a2      	mov	sl, r4
 800aa02:	e7d2      	b.n	800a9aa <_vfiprintf_r+0xc6>
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	1d19      	adds	r1, r3, #4
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	9103      	str	r1, [sp, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	bfbb      	ittet	lt
 800aa10:	425b      	neglt	r3, r3
 800aa12:	f042 0202 	orrlt.w	r2, r2, #2
 800aa16:	9307      	strge	r3, [sp, #28]
 800aa18:	9307      	strlt	r3, [sp, #28]
 800aa1a:	bfb8      	it	lt
 800aa1c:	9204      	strlt	r2, [sp, #16]
 800aa1e:	7823      	ldrb	r3, [r4, #0]
 800aa20:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa22:	d10a      	bne.n	800aa3a <_vfiprintf_r+0x156>
 800aa24:	7863      	ldrb	r3, [r4, #1]
 800aa26:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa28:	d132      	bne.n	800aa90 <_vfiprintf_r+0x1ac>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	1d1a      	adds	r2, r3, #4
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	9203      	str	r2, [sp, #12]
 800aa32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa36:	3402      	adds	r4, #2
 800aa38:	9305      	str	r3, [sp, #20]
 800aa3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab10 <_vfiprintf_r+0x22c>
 800aa3e:	7821      	ldrb	r1, [r4, #0]
 800aa40:	2203      	movs	r2, #3
 800aa42:	4650      	mov	r0, sl
 800aa44:	f7f5 fc4c 	bl	80002e0 <memchr>
 800aa48:	b138      	cbz	r0, 800aa5a <_vfiprintf_r+0x176>
 800aa4a:	9b04      	ldr	r3, [sp, #16]
 800aa4c:	eba0 000a 	sub.w	r0, r0, sl
 800aa50:	2240      	movs	r2, #64	@ 0x40
 800aa52:	4082      	lsls	r2, r0
 800aa54:	4313      	orrs	r3, r2
 800aa56:	3401      	adds	r4, #1
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5e:	4829      	ldr	r0, [pc, #164]	@ (800ab04 <_vfiprintf_r+0x220>)
 800aa60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa64:	2206      	movs	r2, #6
 800aa66:	f7f5 fc3b 	bl	80002e0 <memchr>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d03f      	beq.n	800aaee <_vfiprintf_r+0x20a>
 800aa6e:	4b26      	ldr	r3, [pc, #152]	@ (800ab08 <_vfiprintf_r+0x224>)
 800aa70:	bb1b      	cbnz	r3, 800aaba <_vfiprintf_r+0x1d6>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	3307      	adds	r3, #7
 800aa76:	f023 0307 	bic.w	r3, r3, #7
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	9303      	str	r3, [sp, #12]
 800aa7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa80:	443b      	add	r3, r7
 800aa82:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa84:	e76a      	b.n	800a95c <_vfiprintf_r+0x78>
 800aa86:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	e7a8      	b.n	800a9e2 <_vfiprintf_r+0xfe>
 800aa90:	2300      	movs	r3, #0
 800aa92:	3401      	adds	r4, #1
 800aa94:	9305      	str	r3, [sp, #20]
 800aa96:	4619      	mov	r1, r3
 800aa98:	f04f 0c0a 	mov.w	ip, #10
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa2:	3a30      	subs	r2, #48	@ 0x30
 800aaa4:	2a09      	cmp	r2, #9
 800aaa6:	d903      	bls.n	800aab0 <_vfiprintf_r+0x1cc>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0c6      	beq.n	800aa3a <_vfiprintf_r+0x156>
 800aaac:	9105      	str	r1, [sp, #20]
 800aaae:	e7c4      	b.n	800aa3a <_vfiprintf_r+0x156>
 800aab0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aab4:	4604      	mov	r4, r0
 800aab6:	2301      	movs	r3, #1
 800aab8:	e7f0      	b.n	800aa9c <_vfiprintf_r+0x1b8>
 800aaba:	ab03      	add	r3, sp, #12
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	462a      	mov	r2, r5
 800aac0:	4b12      	ldr	r3, [pc, #72]	@ (800ab0c <_vfiprintf_r+0x228>)
 800aac2:	a904      	add	r1, sp, #16
 800aac4:	4630      	mov	r0, r6
 800aac6:	f7fd fedf 	bl	8008888 <_printf_float>
 800aaca:	4607      	mov	r7, r0
 800aacc:	1c78      	adds	r0, r7, #1
 800aace:	d1d6      	bne.n	800aa7e <_vfiprintf_r+0x19a>
 800aad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aad2:	07d9      	lsls	r1, r3, #31
 800aad4:	d405      	bmi.n	800aae2 <_vfiprintf_r+0x1fe>
 800aad6:	89ab      	ldrh	r3, [r5, #12]
 800aad8:	059a      	lsls	r2, r3, #22
 800aada:	d402      	bmi.n	800aae2 <_vfiprintf_r+0x1fe>
 800aadc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aade:	f7fe fc67 	bl	80093b0 <__retarget_lock_release_recursive>
 800aae2:	89ab      	ldrh	r3, [r5, #12]
 800aae4:	065b      	lsls	r3, r3, #25
 800aae6:	f53f af1f 	bmi.w	800a928 <_vfiprintf_r+0x44>
 800aaea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aaec:	e71e      	b.n	800a92c <_vfiprintf_r+0x48>
 800aaee:	ab03      	add	r3, sp, #12
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	462a      	mov	r2, r5
 800aaf4:	4b05      	ldr	r3, [pc, #20]	@ (800ab0c <_vfiprintf_r+0x228>)
 800aaf6:	a904      	add	r1, sp, #16
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f7fe f94d 	bl	8008d98 <_printf_i>
 800aafe:	e7e4      	b.n	800aaca <_vfiprintf_r+0x1e6>
 800ab00:	0800b308 	.word	0x0800b308
 800ab04:	0800b312 	.word	0x0800b312
 800ab08:	08008889 	.word	0x08008889
 800ab0c:	0800a8bf 	.word	0x0800a8bf
 800ab10:	0800b30e 	.word	0x0800b30e

0800ab14 <__sflush_r>:
 800ab14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1c:	0716      	lsls	r6, r2, #28
 800ab1e:	4605      	mov	r5, r0
 800ab20:	460c      	mov	r4, r1
 800ab22:	d454      	bmi.n	800abce <__sflush_r+0xba>
 800ab24:	684b      	ldr	r3, [r1, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	dc02      	bgt.n	800ab30 <__sflush_r+0x1c>
 800ab2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	dd48      	ble.n	800abc2 <__sflush_r+0xae>
 800ab30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	d045      	beq.n	800abc2 <__sflush_r+0xae>
 800ab36:	2300      	movs	r3, #0
 800ab38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab3c:	682f      	ldr	r7, [r5, #0]
 800ab3e:	6a21      	ldr	r1, [r4, #32]
 800ab40:	602b      	str	r3, [r5, #0]
 800ab42:	d030      	beq.n	800aba6 <__sflush_r+0x92>
 800ab44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	0759      	lsls	r1, r3, #29
 800ab4a:	d505      	bpl.n	800ab58 <__sflush_r+0x44>
 800ab4c:	6863      	ldr	r3, [r4, #4]
 800ab4e:	1ad2      	subs	r2, r2, r3
 800ab50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab52:	b10b      	cbz	r3, 800ab58 <__sflush_r+0x44>
 800ab54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab56:	1ad2      	subs	r2, r2, r3
 800ab58:	2300      	movs	r3, #0
 800ab5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab5c:	6a21      	ldr	r1, [r4, #32]
 800ab5e:	4628      	mov	r0, r5
 800ab60:	47b0      	blx	r6
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	d106      	bne.n	800ab76 <__sflush_r+0x62>
 800ab68:	6829      	ldr	r1, [r5, #0]
 800ab6a:	291d      	cmp	r1, #29
 800ab6c:	d82b      	bhi.n	800abc6 <__sflush_r+0xb2>
 800ab6e:	4a2a      	ldr	r2, [pc, #168]	@ (800ac18 <__sflush_r+0x104>)
 800ab70:	410a      	asrs	r2, r1
 800ab72:	07d6      	lsls	r6, r2, #31
 800ab74:	d427      	bmi.n	800abc6 <__sflush_r+0xb2>
 800ab76:	2200      	movs	r2, #0
 800ab78:	6062      	str	r2, [r4, #4]
 800ab7a:	04d9      	lsls	r1, r3, #19
 800ab7c:	6922      	ldr	r2, [r4, #16]
 800ab7e:	6022      	str	r2, [r4, #0]
 800ab80:	d504      	bpl.n	800ab8c <__sflush_r+0x78>
 800ab82:	1c42      	adds	r2, r0, #1
 800ab84:	d101      	bne.n	800ab8a <__sflush_r+0x76>
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	b903      	cbnz	r3, 800ab8c <__sflush_r+0x78>
 800ab8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab8e:	602f      	str	r7, [r5, #0]
 800ab90:	b1b9      	cbz	r1, 800abc2 <__sflush_r+0xae>
 800ab92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab96:	4299      	cmp	r1, r3
 800ab98:	d002      	beq.n	800aba0 <__sflush_r+0x8c>
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f7ff f9f6 	bl	8009f8c <_free_r>
 800aba0:	2300      	movs	r3, #0
 800aba2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aba4:	e00d      	b.n	800abc2 <__sflush_r+0xae>
 800aba6:	2301      	movs	r3, #1
 800aba8:	4628      	mov	r0, r5
 800abaa:	47b0      	blx	r6
 800abac:	4602      	mov	r2, r0
 800abae:	1c50      	adds	r0, r2, #1
 800abb0:	d1c9      	bne.n	800ab46 <__sflush_r+0x32>
 800abb2:	682b      	ldr	r3, [r5, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d0c6      	beq.n	800ab46 <__sflush_r+0x32>
 800abb8:	2b1d      	cmp	r3, #29
 800abba:	d001      	beq.n	800abc0 <__sflush_r+0xac>
 800abbc:	2b16      	cmp	r3, #22
 800abbe:	d11e      	bne.n	800abfe <__sflush_r+0xea>
 800abc0:	602f      	str	r7, [r5, #0]
 800abc2:	2000      	movs	r0, #0
 800abc4:	e022      	b.n	800ac0c <__sflush_r+0xf8>
 800abc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abca:	b21b      	sxth	r3, r3
 800abcc:	e01b      	b.n	800ac06 <__sflush_r+0xf2>
 800abce:	690f      	ldr	r7, [r1, #16]
 800abd0:	2f00      	cmp	r7, #0
 800abd2:	d0f6      	beq.n	800abc2 <__sflush_r+0xae>
 800abd4:	0793      	lsls	r3, r2, #30
 800abd6:	680e      	ldr	r6, [r1, #0]
 800abd8:	bf08      	it	eq
 800abda:	694b      	ldreq	r3, [r1, #20]
 800abdc:	600f      	str	r7, [r1, #0]
 800abde:	bf18      	it	ne
 800abe0:	2300      	movne	r3, #0
 800abe2:	eba6 0807 	sub.w	r8, r6, r7
 800abe6:	608b      	str	r3, [r1, #8]
 800abe8:	f1b8 0f00 	cmp.w	r8, #0
 800abec:	dde9      	ble.n	800abc2 <__sflush_r+0xae>
 800abee:	6a21      	ldr	r1, [r4, #32]
 800abf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abf2:	4643      	mov	r3, r8
 800abf4:	463a      	mov	r2, r7
 800abf6:	4628      	mov	r0, r5
 800abf8:	47b0      	blx	r6
 800abfa:	2800      	cmp	r0, #0
 800abfc:	dc08      	bgt.n	800ac10 <__sflush_r+0xfc>
 800abfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac10:	4407      	add	r7, r0
 800ac12:	eba8 0800 	sub.w	r8, r8, r0
 800ac16:	e7e7      	b.n	800abe8 <__sflush_r+0xd4>
 800ac18:	dfbffffe 	.word	0xdfbffffe

0800ac1c <_fflush_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	4605      	mov	r5, r0
 800ac22:	460c      	mov	r4, r1
 800ac24:	b913      	cbnz	r3, 800ac2c <_fflush_r+0x10>
 800ac26:	2500      	movs	r5, #0
 800ac28:	4628      	mov	r0, r5
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	b118      	cbz	r0, 800ac36 <_fflush_r+0x1a>
 800ac2e:	6a03      	ldr	r3, [r0, #32]
 800ac30:	b90b      	cbnz	r3, 800ac36 <_fflush_r+0x1a>
 800ac32:	f7fe fa5d 	bl	80090f0 <__sinit>
 800ac36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0f3      	beq.n	800ac26 <_fflush_r+0xa>
 800ac3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac40:	07d0      	lsls	r0, r2, #31
 800ac42:	d404      	bmi.n	800ac4e <_fflush_r+0x32>
 800ac44:	0599      	lsls	r1, r3, #22
 800ac46:	d402      	bmi.n	800ac4e <_fflush_r+0x32>
 800ac48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac4a:	f7fe fbb0 	bl	80093ae <__retarget_lock_acquire_recursive>
 800ac4e:	4628      	mov	r0, r5
 800ac50:	4621      	mov	r1, r4
 800ac52:	f7ff ff5f 	bl	800ab14 <__sflush_r>
 800ac56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac58:	07da      	lsls	r2, r3, #31
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	d4e4      	bmi.n	800ac28 <_fflush_r+0xc>
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	059b      	lsls	r3, r3, #22
 800ac62:	d4e1      	bmi.n	800ac28 <_fflush_r+0xc>
 800ac64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac66:	f7fe fba3 	bl	80093b0 <__retarget_lock_release_recursive>
 800ac6a:	e7dd      	b.n	800ac28 <_fflush_r+0xc>

0800ac6c <__swbuf_r>:
 800ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6e:	460e      	mov	r6, r1
 800ac70:	4614      	mov	r4, r2
 800ac72:	4605      	mov	r5, r0
 800ac74:	b118      	cbz	r0, 800ac7e <__swbuf_r+0x12>
 800ac76:	6a03      	ldr	r3, [r0, #32]
 800ac78:	b90b      	cbnz	r3, 800ac7e <__swbuf_r+0x12>
 800ac7a:	f7fe fa39 	bl	80090f0 <__sinit>
 800ac7e:	69a3      	ldr	r3, [r4, #24]
 800ac80:	60a3      	str	r3, [r4, #8]
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	071a      	lsls	r2, r3, #28
 800ac86:	d501      	bpl.n	800ac8c <__swbuf_r+0x20>
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	b943      	cbnz	r3, 800ac9e <__swbuf_r+0x32>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 f82a 	bl	800ace8 <__swsetup_r>
 800ac94:	b118      	cbz	r0, 800ac9e <__swbuf_r+0x32>
 800ac96:	f04f 37ff 	mov.w	r7, #4294967295
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	6922      	ldr	r2, [r4, #16]
 800aca2:	1a98      	subs	r0, r3, r2
 800aca4:	6963      	ldr	r3, [r4, #20]
 800aca6:	b2f6      	uxtb	r6, r6
 800aca8:	4283      	cmp	r3, r0
 800acaa:	4637      	mov	r7, r6
 800acac:	dc05      	bgt.n	800acba <__swbuf_r+0x4e>
 800acae:	4621      	mov	r1, r4
 800acb0:	4628      	mov	r0, r5
 800acb2:	f7ff ffb3 	bl	800ac1c <_fflush_r>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d1ed      	bne.n	800ac96 <__swbuf_r+0x2a>
 800acba:	68a3      	ldr	r3, [r4, #8]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	60a3      	str	r3, [r4, #8]
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	6022      	str	r2, [r4, #0]
 800acc6:	701e      	strb	r6, [r3, #0]
 800acc8:	6962      	ldr	r2, [r4, #20]
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	429a      	cmp	r2, r3
 800acce:	d004      	beq.n	800acda <__swbuf_r+0x6e>
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	07db      	lsls	r3, r3, #31
 800acd4:	d5e1      	bpl.n	800ac9a <__swbuf_r+0x2e>
 800acd6:	2e0a      	cmp	r6, #10
 800acd8:	d1df      	bne.n	800ac9a <__swbuf_r+0x2e>
 800acda:	4621      	mov	r1, r4
 800acdc:	4628      	mov	r0, r5
 800acde:	f7ff ff9d 	bl	800ac1c <_fflush_r>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d0d9      	beq.n	800ac9a <__swbuf_r+0x2e>
 800ace6:	e7d6      	b.n	800ac96 <__swbuf_r+0x2a>

0800ace8 <__swsetup_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4b29      	ldr	r3, [pc, #164]	@ (800ad90 <__swsetup_r+0xa8>)
 800acec:	4605      	mov	r5, r0
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	460c      	mov	r4, r1
 800acf2:	b118      	cbz	r0, 800acfc <__swsetup_r+0x14>
 800acf4:	6a03      	ldr	r3, [r0, #32]
 800acf6:	b90b      	cbnz	r3, 800acfc <__swsetup_r+0x14>
 800acf8:	f7fe f9fa 	bl	80090f0 <__sinit>
 800acfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad00:	0719      	lsls	r1, r3, #28
 800ad02:	d422      	bmi.n	800ad4a <__swsetup_r+0x62>
 800ad04:	06da      	lsls	r2, r3, #27
 800ad06:	d407      	bmi.n	800ad18 <__swsetup_r+0x30>
 800ad08:	2209      	movs	r2, #9
 800ad0a:	602a      	str	r2, [r5, #0]
 800ad0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad10:	81a3      	strh	r3, [r4, #12]
 800ad12:	f04f 30ff 	mov.w	r0, #4294967295
 800ad16:	e033      	b.n	800ad80 <__swsetup_r+0x98>
 800ad18:	0758      	lsls	r0, r3, #29
 800ad1a:	d512      	bpl.n	800ad42 <__swsetup_r+0x5a>
 800ad1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad1e:	b141      	cbz	r1, 800ad32 <__swsetup_r+0x4a>
 800ad20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad24:	4299      	cmp	r1, r3
 800ad26:	d002      	beq.n	800ad2e <__swsetup_r+0x46>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f7ff f92f 	bl	8009f8c <_free_r>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	6063      	str	r3, [r4, #4]
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f043 0308 	orr.w	r3, r3, #8
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	b94b      	cbnz	r3, 800ad62 <__swsetup_r+0x7a>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad58:	d003      	beq.n	800ad62 <__swsetup_r+0x7a>
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f000 f8b3 	bl	800aec8 <__smakebuf_r>
 800ad62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad66:	f013 0201 	ands.w	r2, r3, #1
 800ad6a:	d00a      	beq.n	800ad82 <__swsetup_r+0x9a>
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	60a2      	str	r2, [r4, #8]
 800ad70:	6962      	ldr	r2, [r4, #20]
 800ad72:	4252      	negs	r2, r2
 800ad74:	61a2      	str	r2, [r4, #24]
 800ad76:	6922      	ldr	r2, [r4, #16]
 800ad78:	b942      	cbnz	r2, 800ad8c <__swsetup_r+0xa4>
 800ad7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad7e:	d1c5      	bne.n	800ad0c <__swsetup_r+0x24>
 800ad80:	bd38      	pop	{r3, r4, r5, pc}
 800ad82:	0799      	lsls	r1, r3, #30
 800ad84:	bf58      	it	pl
 800ad86:	6962      	ldrpl	r2, [r4, #20]
 800ad88:	60a2      	str	r2, [r4, #8]
 800ad8a:	e7f4      	b.n	800ad76 <__swsetup_r+0x8e>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	e7f7      	b.n	800ad80 <__swsetup_r+0x98>
 800ad90:	24000020 	.word	0x24000020

0800ad94 <_sbrk_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d06      	ldr	r5, [pc, #24]	@ (800adb0 <_sbrk_r+0x1c>)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	602b      	str	r3, [r5, #0]
 800ada0:	f7f6 f8de 	bl	8000f60 <_sbrk>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_sbrk_r+0x1a>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_sbrk_r+0x1a>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	24004e08 	.word	0x24004e08

0800adb4 <__assert_func>:
 800adb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adb6:	4614      	mov	r4, r2
 800adb8:	461a      	mov	r2, r3
 800adba:	4b09      	ldr	r3, [pc, #36]	@ (800ade0 <__assert_func+0x2c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4605      	mov	r5, r0
 800adc0:	68d8      	ldr	r0, [r3, #12]
 800adc2:	b954      	cbnz	r4, 800adda <__assert_func+0x26>
 800adc4:	4b07      	ldr	r3, [pc, #28]	@ (800ade4 <__assert_func+0x30>)
 800adc6:	461c      	mov	r4, r3
 800adc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adcc:	9100      	str	r1, [sp, #0]
 800adce:	462b      	mov	r3, r5
 800add0:	4905      	ldr	r1, [pc, #20]	@ (800ade8 <__assert_func+0x34>)
 800add2:	f000 f841 	bl	800ae58 <fiprintf>
 800add6:	f000 f8d5 	bl	800af84 <abort>
 800adda:	4b04      	ldr	r3, [pc, #16]	@ (800adec <__assert_func+0x38>)
 800addc:	e7f4      	b.n	800adc8 <__assert_func+0x14>
 800adde:	bf00      	nop
 800ade0:	24000020 	.word	0x24000020
 800ade4:	0800b35e 	.word	0x0800b35e
 800ade8:	0800b330 	.word	0x0800b330
 800adec:	0800b323 	.word	0x0800b323

0800adf0 <_calloc_r>:
 800adf0:	b570      	push	{r4, r5, r6, lr}
 800adf2:	fba1 5402 	umull	r5, r4, r1, r2
 800adf6:	b93c      	cbnz	r4, 800ae08 <_calloc_r+0x18>
 800adf8:	4629      	mov	r1, r5
 800adfa:	f7ff f93b 	bl	800a074 <_malloc_r>
 800adfe:	4606      	mov	r6, r0
 800ae00:	b928      	cbnz	r0, 800ae0e <_calloc_r+0x1e>
 800ae02:	2600      	movs	r6, #0
 800ae04:	4630      	mov	r0, r6
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	220c      	movs	r2, #12
 800ae0a:	6002      	str	r2, [r0, #0]
 800ae0c:	e7f9      	b.n	800ae02 <_calloc_r+0x12>
 800ae0e:	462a      	mov	r2, r5
 800ae10:	4621      	mov	r1, r4
 800ae12:	f7fe f9f8 	bl	8009206 <memset>
 800ae16:	e7f5      	b.n	800ae04 <_calloc_r+0x14>

0800ae18 <__ascii_mbtowc>:
 800ae18:	b082      	sub	sp, #8
 800ae1a:	b901      	cbnz	r1, 800ae1e <__ascii_mbtowc+0x6>
 800ae1c:	a901      	add	r1, sp, #4
 800ae1e:	b142      	cbz	r2, 800ae32 <__ascii_mbtowc+0x1a>
 800ae20:	b14b      	cbz	r3, 800ae36 <__ascii_mbtowc+0x1e>
 800ae22:	7813      	ldrb	r3, [r2, #0]
 800ae24:	600b      	str	r3, [r1, #0]
 800ae26:	7812      	ldrb	r2, [r2, #0]
 800ae28:	1e10      	subs	r0, r2, #0
 800ae2a:	bf18      	it	ne
 800ae2c:	2001      	movne	r0, #1
 800ae2e:	b002      	add	sp, #8
 800ae30:	4770      	bx	lr
 800ae32:	4610      	mov	r0, r2
 800ae34:	e7fb      	b.n	800ae2e <__ascii_mbtowc+0x16>
 800ae36:	f06f 0001 	mvn.w	r0, #1
 800ae3a:	e7f8      	b.n	800ae2e <__ascii_mbtowc+0x16>

0800ae3c <__ascii_wctomb>:
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	4608      	mov	r0, r1
 800ae40:	b141      	cbz	r1, 800ae54 <__ascii_wctomb+0x18>
 800ae42:	2aff      	cmp	r2, #255	@ 0xff
 800ae44:	d904      	bls.n	800ae50 <__ascii_wctomb+0x14>
 800ae46:	228a      	movs	r2, #138	@ 0x8a
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4e:	4770      	bx	lr
 800ae50:	700a      	strb	r2, [r1, #0]
 800ae52:	2001      	movs	r0, #1
 800ae54:	4770      	bx	lr
	...

0800ae58 <fiprintf>:
 800ae58:	b40e      	push	{r1, r2, r3}
 800ae5a:	b503      	push	{r0, r1, lr}
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	ab03      	add	r3, sp, #12
 800ae60:	4805      	ldr	r0, [pc, #20]	@ (800ae78 <fiprintf+0x20>)
 800ae62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae66:	6800      	ldr	r0, [r0, #0]
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	f7ff fd3b 	bl	800a8e4 <_vfiprintf_r>
 800ae6e:	b002      	add	sp, #8
 800ae70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae74:	b003      	add	sp, #12
 800ae76:	4770      	bx	lr
 800ae78:	24000020 	.word	0x24000020

0800ae7c <__swhatbuf_r>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	460c      	mov	r4, r1
 800ae80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae84:	2900      	cmp	r1, #0
 800ae86:	b096      	sub	sp, #88	@ 0x58
 800ae88:	4615      	mov	r5, r2
 800ae8a:	461e      	mov	r6, r3
 800ae8c:	da0d      	bge.n	800aeaa <__swhatbuf_r+0x2e>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae94:	f04f 0100 	mov.w	r1, #0
 800ae98:	bf14      	ite	ne
 800ae9a:	2340      	movne	r3, #64	@ 0x40
 800ae9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aea0:	2000      	movs	r0, #0
 800aea2:	6031      	str	r1, [r6, #0]
 800aea4:	602b      	str	r3, [r5, #0]
 800aea6:	b016      	add	sp, #88	@ 0x58
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	466a      	mov	r2, sp
 800aeac:	f000 f848 	bl	800af40 <_fstat_r>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	dbec      	blt.n	800ae8e <__swhatbuf_r+0x12>
 800aeb4:	9901      	ldr	r1, [sp, #4]
 800aeb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aeba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aebe:	4259      	negs	r1, r3
 800aec0:	4159      	adcs	r1, r3
 800aec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aec6:	e7eb      	b.n	800aea0 <__swhatbuf_r+0x24>

0800aec8 <__smakebuf_r>:
 800aec8:	898b      	ldrh	r3, [r1, #12]
 800aeca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aecc:	079d      	lsls	r5, r3, #30
 800aece:	4606      	mov	r6, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	d507      	bpl.n	800aee4 <__smakebuf_r+0x1c>
 800aed4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	6123      	str	r3, [r4, #16]
 800aedc:	2301      	movs	r3, #1
 800aede:	6163      	str	r3, [r4, #20]
 800aee0:	b003      	add	sp, #12
 800aee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee4:	ab01      	add	r3, sp, #4
 800aee6:	466a      	mov	r2, sp
 800aee8:	f7ff ffc8 	bl	800ae7c <__swhatbuf_r>
 800aeec:	9f00      	ldr	r7, [sp, #0]
 800aeee:	4605      	mov	r5, r0
 800aef0:	4639      	mov	r1, r7
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7ff f8be 	bl	800a074 <_malloc_r>
 800aef8:	b948      	cbnz	r0, 800af0e <__smakebuf_r+0x46>
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	059a      	lsls	r2, r3, #22
 800af00:	d4ee      	bmi.n	800aee0 <__smakebuf_r+0x18>
 800af02:	f023 0303 	bic.w	r3, r3, #3
 800af06:	f043 0302 	orr.w	r3, r3, #2
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	e7e2      	b.n	800aed4 <__smakebuf_r+0xc>
 800af0e:	89a3      	ldrh	r3, [r4, #12]
 800af10:	6020      	str	r0, [r4, #0]
 800af12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af1e:	b15b      	cbz	r3, 800af38 <__smakebuf_r+0x70>
 800af20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af24:	4630      	mov	r0, r6
 800af26:	f000 f81d 	bl	800af64 <_isatty_r>
 800af2a:	b128      	cbz	r0, 800af38 <__smakebuf_r+0x70>
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	f023 0303 	bic.w	r3, r3, #3
 800af32:	f043 0301 	orr.w	r3, r3, #1
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	431d      	orrs	r5, r3
 800af3c:	81a5      	strh	r5, [r4, #12]
 800af3e:	e7cf      	b.n	800aee0 <__smakebuf_r+0x18>

0800af40 <_fstat_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4d07      	ldr	r5, [pc, #28]	@ (800af60 <_fstat_r+0x20>)
 800af44:	2300      	movs	r3, #0
 800af46:	4604      	mov	r4, r0
 800af48:	4608      	mov	r0, r1
 800af4a:	4611      	mov	r1, r2
 800af4c:	602b      	str	r3, [r5, #0]
 800af4e:	f7f5 ffdf 	bl	8000f10 <_fstat>
 800af52:	1c43      	adds	r3, r0, #1
 800af54:	d102      	bne.n	800af5c <_fstat_r+0x1c>
 800af56:	682b      	ldr	r3, [r5, #0]
 800af58:	b103      	cbz	r3, 800af5c <_fstat_r+0x1c>
 800af5a:	6023      	str	r3, [r4, #0]
 800af5c:	bd38      	pop	{r3, r4, r5, pc}
 800af5e:	bf00      	nop
 800af60:	24004e08 	.word	0x24004e08

0800af64 <_isatty_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d06      	ldr	r5, [pc, #24]	@ (800af80 <_isatty_r+0x1c>)
 800af68:	2300      	movs	r3, #0
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	602b      	str	r3, [r5, #0]
 800af70:	f7f5 ffde 	bl	8000f30 <_isatty>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_isatty_r+0x1a>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_isatty_r+0x1a>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	24004e08 	.word	0x24004e08

0800af84 <abort>:
 800af84:	b508      	push	{r3, lr}
 800af86:	2006      	movs	r0, #6
 800af88:	f000 f82c 	bl	800afe4 <raise>
 800af8c:	2001      	movs	r0, #1
 800af8e:	f7f5 ff6f 	bl	8000e70 <_exit>

0800af92 <_raise_r>:
 800af92:	291f      	cmp	r1, #31
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	4605      	mov	r5, r0
 800af98:	460c      	mov	r4, r1
 800af9a:	d904      	bls.n	800afa6 <_raise_r+0x14>
 800af9c:	2316      	movs	r3, #22
 800af9e:	6003      	str	r3, [r0, #0]
 800afa0:	f04f 30ff 	mov.w	r0, #4294967295
 800afa4:	bd38      	pop	{r3, r4, r5, pc}
 800afa6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800afa8:	b112      	cbz	r2, 800afb0 <_raise_r+0x1e>
 800afaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afae:	b94b      	cbnz	r3, 800afc4 <_raise_r+0x32>
 800afb0:	4628      	mov	r0, r5
 800afb2:	f000 f831 	bl	800b018 <_getpid_r>
 800afb6:	4622      	mov	r2, r4
 800afb8:	4601      	mov	r1, r0
 800afba:	4628      	mov	r0, r5
 800afbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afc0:	f000 b818 	b.w	800aff4 <_kill_r>
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d00a      	beq.n	800afde <_raise_r+0x4c>
 800afc8:	1c59      	adds	r1, r3, #1
 800afca:	d103      	bne.n	800afd4 <_raise_r+0x42>
 800afcc:	2316      	movs	r3, #22
 800afce:	6003      	str	r3, [r0, #0]
 800afd0:	2001      	movs	r0, #1
 800afd2:	e7e7      	b.n	800afa4 <_raise_r+0x12>
 800afd4:	2100      	movs	r1, #0
 800afd6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800afda:	4620      	mov	r0, r4
 800afdc:	4798      	blx	r3
 800afde:	2000      	movs	r0, #0
 800afe0:	e7e0      	b.n	800afa4 <_raise_r+0x12>
	...

0800afe4 <raise>:
 800afe4:	4b02      	ldr	r3, [pc, #8]	@ (800aff0 <raise+0xc>)
 800afe6:	4601      	mov	r1, r0
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	f7ff bfd2 	b.w	800af92 <_raise_r>
 800afee:	bf00      	nop
 800aff0:	24000020 	.word	0x24000020

0800aff4 <_kill_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4d07      	ldr	r5, [pc, #28]	@ (800b014 <_kill_r+0x20>)
 800aff8:	2300      	movs	r3, #0
 800affa:	4604      	mov	r4, r0
 800affc:	4608      	mov	r0, r1
 800affe:	4611      	mov	r1, r2
 800b000:	602b      	str	r3, [r5, #0]
 800b002:	f7f5 ff25 	bl	8000e50 <_kill>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	d102      	bne.n	800b010 <_kill_r+0x1c>
 800b00a:	682b      	ldr	r3, [r5, #0]
 800b00c:	b103      	cbz	r3, 800b010 <_kill_r+0x1c>
 800b00e:	6023      	str	r3, [r4, #0]
 800b010:	bd38      	pop	{r3, r4, r5, pc}
 800b012:	bf00      	nop
 800b014:	24004e08 	.word	0x24004e08

0800b018 <_getpid_r>:
 800b018:	f7f5 bf12 	b.w	8000e40 <_getpid>

0800b01c <_init>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	bf00      	nop
 800b020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b022:	bc08      	pop	{r3}
 800b024:	469e      	mov	lr, r3
 800b026:	4770      	bx	lr

0800b028 <_fini>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	bf00      	nop
 800b02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02e:	bc08      	pop	{r3}
 800b030:	469e      	mov	lr, r3
 800b032:	4770      	bx	lr
