
STM32H755_repo_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afd4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800b278  0800b278  0000c278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b690  0800b690  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b690  0800b690  0000c690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b698  0800b698  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b698  0800b698  0000c698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b69c  0800b69c  0000c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  24000000  0800b6a0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  240001dc  0800b87c  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004e64  0800b87c  0000de64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d11  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f59  00000000  00000000  0002ef1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00032e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d5  00000000  00000000  00034808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017e58  00000000  00000000  00035bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000a00c  00000000  00000000  0004da35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00057a41  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007a78  00000000  00000000  00057a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000009e  00000000  00000000  0005f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b25c 	.word	0x0800b25c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800b25c 	.word	0x0800b25c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <main+0xb4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 faa9 	bl	8000d2c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fcd9 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f847 	bl	8000870 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <main+0xb4>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <main+0xb4>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <main+0xb4>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fff1 	bl	80017e8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f001 f807 	bl	800181c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <main+0xb4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 fa7b 	bl	8000d2c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f907 	bl	8000a48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083a:	f000 f8b9 	bl	80009b0 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 800083e:	f000 f891 	bl	8000964 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000842:	f005 fb01 	bl	8005e48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000846:	4a07      	ldr	r2, [pc, #28]	@ (8000864 <main+0xb8>)
 8000848:	2100      	movs	r1, #0
 800084a:	4807      	ldr	r0, [pc, #28]	@ (8000868 <main+0xbc>)
 800084c:	f005 fb46 	bl	8005edc <osThreadNew>
 8000850:	4603      	mov	r3, r0
 8000852:	4a06      	ldr	r2, [pc, #24]	@ (800086c <main+0xc0>)
 8000854:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000856:	f005 fb1b 	bl	8005e90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085a:	bf00      	nop
 800085c:	e7fd      	b.n	800085a <main+0xae>
 800085e:	bf00      	nop
 8000860:	58024400 	.word	0x58024400
 8000864:	0800b2d0 	.word	0x0800b2d0
 8000868:	08000c01 	.word	0x08000c01
 800086c:	240002d8 	.word	0x240002d8

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	@ 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	224c      	movs	r2, #76	@ 0x4c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f008 fde1 	bl	8009446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fddb 	bl	8009446 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000890:	2004      	movs	r0, #4
 8000892:	f000 ffd7 	bl	8001844 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b30      	ldr	r3, [pc, #192]	@ (800095c <SystemClock_Config+0xec>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a2f      	ldr	r2, [pc, #188]	@ (800095c <SystemClock_Config+0xec>)
 80008a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <SystemClock_Config+0xec>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <SystemClock_Config+0xf0>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000960 <SystemClock_Config+0xf0>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008bc:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <SystemClock_Config+0xf0>)
 80008be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c8:	bf00      	nop
 80008ca:	4b24      	ldr	r3, [pc, #144]	@ (800095c <SystemClock_Config+0xec>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008d6:	d1f8      	bne.n	80008ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008ee:	23f0      	movs	r3, #240	@ 0xf0
 80008f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008f6:	2305      	movs	r3, #5
 80008f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008fe:	2308      	movs	r3, #8
 8000900:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000902:	2300      	movs	r3, #0
 8000904:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fff2 	bl	80018f8 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800091a:	f000 fa07 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	233f      	movs	r3, #63	@ 0x3f
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800092a:	2308      	movs	r3, #8
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000932:	2340      	movs	r3, #64	@ 0x40
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093c:	2340      	movs	r3, #64	@ 0x40
 800093e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2104      	movs	r1, #4
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fc31 	bl	80021ac <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000950:	f000 f9ec 	bl	8000d2c <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3770      	adds	r7, #112	@ 0x70
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58024800 	.word	0x58024800
 8000960:	58000400 	.word	0x58000400

08000964 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_TIM17_Init+0x44>)
 800096a:	4a10      	ldr	r2, [pc, #64]	@ (80009ac <MX_TIM17_Init+0x48>)
 800096c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000974:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_TIM17_Init+0x44>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_TIM17_Init+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_TIM17_Init+0x44>)
 8000996:	f003 fe03 	bl	80045a0 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009a0:	f000 f9c4 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	240001f8 	.word	0x240001f8
 80009ac:	40014800 	.word	0x40014800

080009b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009b6:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <MX_USART3_UART_Init+0x94>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f8:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 80009fa:	f004 f905 	bl	8004c08 <HAL_UART_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 f992 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 8000a0c:	f005 f90d 	bl	8005c2a <HAL_UARTEx_SetTxFifoThreshold>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 f989 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 8000a1e:	f005 f942 	bl	8005ca6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a28:	f000 f980 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_USART3_UART_Init+0x90>)
 8000a2e:	f005 f8c3 	bl	8005bb8 <HAL_UARTEx_DisableFifoMode>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a38:	f000 f978 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000244 	.word	0x24000244
 8000a44:	40004800 	.word	0x40004800

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b62      	ldr	r3, [pc, #392]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	4a60      	ldr	r2, [pc, #384]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b5a      	ldr	r3, [pc, #360]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a82:	4a59      	ldr	r2, [pc, #356]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8c:	4b56      	ldr	r3, [pc, #344]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b53      	ldr	r3, [pc, #332]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa0:	4a51      	ldr	r2, [pc, #324]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	4a4a      	ldr	r2, [pc, #296]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac8:	4b47      	ldr	r3, [pc, #284]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	4b44      	ldr	r3, [pc, #272]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	4a42      	ldr	r2, [pc, #264]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae6:	4b40      	ldr	r3, [pc, #256]	@ (8000be8 <MX_GPIO_Init+0x1a0>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000afa:	483c      	ldr	r0, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x1a4>)
 8000afc:	f000 fe40 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4836      	ldr	r0, [pc, #216]	@ (8000bf0 <MX_GPIO_Init+0x1a8>)
 8000b16:	f000 fc83 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b1a:	2332      	movs	r3, #50	@ 0x32
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2a:	230b      	movs	r3, #11
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	482e      	ldr	r0, [pc, #184]	@ (8000bf0 <MX_GPIO_Init+0x1a8>)
 8000b36:	f000 fc73 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b3a:	2386      	movs	r3, #134	@ 0x86
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4827      	ldr	r0, [pc, #156]	@ (8000bf4 <MX_GPIO_Init+0x1ac>)
 8000b56:	f000 fc63 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b5a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	481e      	ldr	r0, [pc, #120]	@ (8000bec <MX_GPIO_Init+0x1a4>)
 8000b74:	f000 fc54 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4815      	ldr	r0, [pc, #84]	@ (8000bec <MX_GPIO_Init+0x1a4>)
 8000b96:	f000 fc43 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b9a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bac:	230a      	movs	r3, #10
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480f      	ldr	r0, [pc, #60]	@ (8000bf4 <MX_GPIO_Init+0x1ac>)
 8000bb8:	f000 fc32 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bbc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bce:	230b      	movs	r3, #11
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <MX_GPIO_Init+0x1b0>)
 8000bda:	f000 fc21 	bl	8001420 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020400 	.word	0x58020400
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58020000 	.word	0x58020000
 8000bf8:	58021800 	.word	0x58021800
 8000bfc:	00000000 	.word	0x00000000

08000c00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	@ 0x40
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
		HAL_TIM_Base_Start(&htim17);
 8000c08:	483b      	ldr	r0, [pc, #236]	@ (8000cf8 <StartDefaultTask+0xf8>)
 8000c0a:	f003 fd21 	bl	8004650 <HAL_TIM_Base_Start>
		#define CANTIDAD_INTERVALOS 10000000
		double baseIntervalo, fdx, x;
		double acum = 0;
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		long i;

		baseIntervalo = 1.0 / CANTIDAD_INTERVALOS;
 8000c1a:	a331      	add	r3, pc, #196	@ (adr r3, 8000ce0 <StartDefaultTask+0xe0>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9c7 2306 	strd	r2, r3, [r7, #24]

		// Start timer counter
		uint16_t start_t = __HAL_TIM_GET_COUNTER(&htim17);
 8000c24:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <StartDefaultTask+0xf8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2a:	82fb      	strh	r3, [r7, #22]

		// Perform the calculation of Pi
		for( i = 0, x = 0.0; i < CANTIDAD_INTERVALOS; i++ ) {
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c30:	f04f 0200 	mov.w	r2, #0
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c3c:	e024      	b.n	8000c88 <StartDefaultTask+0x88>
			fdx = 4 / ( 1 + x * x );
 8000c3e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000c42:	ee27 7b07 	vmul.f64	d7, d7, d7
 8000c46:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000c4a:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000c4e:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 8000c52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c56:	ed87 7b02 	vstr	d7, [r7, #8]
			acum = acum + ( fdx * baseIntervalo );
 8000c5a:	ed97 6b02 	vldr	d6, [r7, #8]
 8000c5e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c66:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8000c6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c6e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
			x = x + baseIntervalo;
 8000c72:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8000c76:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c7e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		for( i = 0, x = 0.0; i < CANTIDAD_INTERVALOS; i++ ) {
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	3301      	adds	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <StartDefaultTask+0xfc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	dbd6      	blt.n	8000c3e <StartDefaultTask+0x3e>
		}

		// Stop timer and calculate the elapsed time
		uint16_t end_t = __HAL_TIM_GET_COUNTER(&htim17);
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <StartDefaultTask+0xf8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c96:	82bb      	strh	r3, [r7, #20]
		uint16_t total_t = end_t - start_t;
 8000c98:	8aba      	ldrh	r2, [r7, #20]
 8000c9a:	8afb      	ldrh	r3, [r7, #22]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	827b      	strh	r3, [r7, #18]
		printf("Resultado = %20.18lf (%f seconds)\n", acum, ( ( float )total_t * 65535.0 / 240000000.0));
 8000ca0:	8a7b      	ldrh	r3, [r7, #18]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000caa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cae:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000ce8 <StartDefaultTask+0xe8>
 8000cb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cb6:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8000cf0 <StartDefaultTask+0xf0>
 8000cba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cbe:	ed8d 7b00 	vstr	d7, [sp]
 8000cc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000cc6:	480e      	ldr	r0, [pc, #56]	@ (8000d00 <StartDefaultTask+0x100>)
 8000cc8:	f008 fb68 	bl	800939c <iprintf>

	  /* Infinite loop */
	  for(;;)
	  {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin );
 8000ccc:	2101      	movs	r1, #1
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <StartDefaultTask+0x104>)
 8000cd0:	f000 fd6f 	bl	80017b2 <HAL_GPIO_TogglePin>
	    osDelay(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd8:	f005 f992 	bl	8006000 <osDelay>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin );
 8000cdc:	bf00      	nop
 8000cde:	e7f5      	b.n	8000ccc <StartDefaultTask+0xcc>
 8000ce0:	9abcaf48 	.word	0x9abcaf48
 8000ce4:	3e7ad7f2 	.word	0x3e7ad7f2
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	40efffe0 	.word	0x40efffe0
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	41ac9c38 	.word	0x41ac9c38
 8000cf8:	240001f8 	.word	0x240001f8
 8000cfc:	00989680 	.word	0x00989680
 8000d00:	0800b284 	.word	0x0800b284
 8000d04:	58020400 	.word	0x58020400

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fa75 	bl	8001208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40001400 	.word	0x40001400

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_MspInit+0x38>)
 8000d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d44:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <HAL_MspInit+0x38>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_MspInit+0x38>)
 8000d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f06f 0001 	mvn.w	r0, #1
 8000d64:	f000 fb34 	bl	80013d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	58024400 	.word	0x58024400

08000d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <HAL_TIM_Base_MspInit+0x3c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d10e      	bne.n	8000da4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <HAL_TIM_Base_MspInit+0x40>)
 8000d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d8c:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <HAL_TIM_Base_MspInit+0x40>)
 8000d8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <HAL_TIM_Base_MspInit+0x40>)
 8000d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40014800 	.word	0x40014800
 8000db4:	58024400 	.word	0x58024400

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0ba      	sub	sp, #232	@ 0xe8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	22c0      	movs	r2, #192	@ 0xc0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f008 fb34 	bl	8009446 <memset>
  if(huart->Instance==USART3)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a27      	ldr	r2, [pc, #156]	@ (8000e80 <HAL_UART_MspInit+0xc8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d146      	bne.n	8000e76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de8:	f04f 0202 	mov.w	r2, #2
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fda2 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e0a:	f7ff ff8f 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e14:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e1e:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e32:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e64:	2307      	movs	r3, #7
 8000e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e72:	f000 fad5 	bl	8001420 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e76:	bf00      	nop
 8000e78:	37e8      	adds	r7, #232	@ 0xe8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40004800 	.word	0x40004800
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58020c00 	.word	0x58020c00

08000e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b090      	sub	sp, #64	@ 0x40
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b0f      	cmp	r3, #15
 8000e98:	d827      	bhi.n	8000eea <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	2037      	movs	r0, #55	@ 0x37
 8000ea0:	f000 fa96 	bl	80013d0 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ea4:	2037      	movs	r0, #55	@ 0x37
 8000ea6:	f000 faad 	bl	8001404 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000eaa:	4a29      	ldr	r2, [pc, #164]	@ (8000f50 <HAL_InitTick+0xc4>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000eb0:	4b28      	ldr	r3, [pc, #160]	@ (8000f54 <HAL_InitTick+0xc8>)
 8000eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eb6:	4a27      	ldr	r2, [pc, #156]	@ (8000f54 <HAL_InitTick+0xc8>)
 8000eb8:	f043 0320 	orr.w	r3, r3, #32
 8000ebc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <HAL_InitTick+0xc8>)
 8000ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ece:	f107 0210 	add.w	r2, r7, #16
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fcf3 	bl	80028c4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d106      	bne.n	8000ef6 <HAL_InitTick+0x6a>
 8000ee8:	e001      	b.n	8000eee <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e02b      	b.n	8000f46 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eee:	f001 fcbd 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8000ef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000ef4:	e004      	b.n	8000f00 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ef6:	f001 fcb9 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8000efa:	4603      	mov	r3, r0
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f02:	4a15      	ldr	r2, [pc, #84]	@ (8000f58 <HAL_InitTick+0xcc>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	0c9b      	lsrs	r3, r3, #18
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <HAL_InitTick+0xd0>)
 8000f10:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <HAL_InitTick+0xd4>)
 8000f12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_InitTick+0xd0>)
 8000f16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f1a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <HAL_InitTick+0xd0>)
 8000f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f20:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_InitTick+0xd0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <HAL_InitTick+0xd0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f2e:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <HAL_InitTick+0xd0>)
 8000f30:	f003 fb36 	bl	80045a0 <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d104      	bne.n	8000f44 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f3a:	4808      	ldr	r0, [pc, #32]	@ (8000f5c <HAL_InitTick+0xd0>)
 8000f3c:	f003 fbf8 	bl	8004730 <HAL_TIM_Base_Start_IT>
 8000f40:	4603      	mov	r3, r0
 8000f42:	e000      	b.n	8000f46 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3740      	adds	r7, #64	@ 0x40
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24000008 	.word	0x24000008
 8000f54:	58024400 	.word	0x58024400
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	240002dc 	.word	0x240002dc
 8000f60:	40001400 	.word	0x40001400

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <TIM7_IRQHandler+0x10>)
 8000fa2:	f003 fc3d 	bl	8004820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	240002dc 	.word	0x240002dc

08000fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return 1;
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_kill>:

int _kill(int pid, int sig)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fca:	f008 fae5 	bl	8009598 <__errno>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2216      	movs	r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
  return -1;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_exit>:

void _exit (int status)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffe7 	bl	8000fc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ff2:	bf00      	nop
 8000ff4:	e7fd      	b.n	8000ff2 <_exit+0x12>

08000ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e00a      	b.n	800101e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001008:	f3af 8000 	nop.w
 800100c:	4601      	mov	r1, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	60ba      	str	r2, [r7, #8]
 8001014:	b2ca      	uxtb	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	dbf0      	blt.n	8001008 <_read+0x12>
  }

  return len;
 8001026:	687b      	ldr	r3, [r7, #4]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e009      	b.n	8001056 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	60ba      	str	r2, [r7, #8]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	dbf1      	blt.n	8001042 <_write+0x12>
  }
  return len;
 800105e:	687b      	ldr	r3, [r7, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_close>:

int _close(int file)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001090:	605a      	str	r2, [r3, #4]
  return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_isatty>:

int _isatty(int file)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a8:	2301      	movs	r3, #1
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f008 fa4a 	bl	8009598 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	24080000 	.word	0x24080000
 8001130:	00000400 	.word	0x00000400
 8001134:	24000328 	.word	0x24000328
 8001138:	24004e68 	.word	0x24004e68

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001174 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001140:	f7ff fa9e 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	@ (800117c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	@ (8001188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116a:	f008 fa1b 	bl	80095a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fb1d 	bl	80007ac <main>
  bx  lr
 8001172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001178:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800117c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001180:	0800b6a0 	.word	0x0800b6a0
  ldr r2, =_sbss
 8001184:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001188:	24004e64 	.word	0x24004e64

0800118c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC3_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001196:	2003      	movs	r0, #3
 8001198:	f000 f90f 	bl	80013ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800119c:	f001 f9bc 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80011a0:	4602      	mov	r2, r0
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_Init+0x68>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	4913      	ldr	r1, [pc, #76]	@ (80011fc <HAL_Init+0x6c>)
 80011ae:	5ccb      	ldrb	r3, [r1, r3]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_Init+0x68>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <HAL_Init+0x6c>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <HAL_Init+0x70>)
 80011d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <HAL_Init+0x74>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011da:	200f      	movs	r0, #15
 80011dc:	f7ff fe56 	bl	8000e8c <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e002      	b.n	80011f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ea:	f7ff fda5 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400
 80011fc:	0800b2c0 	.word	0x0800b2c0
 8001200:	24000004 	.word	0x24000004
 8001204:	24000000 	.word	0x24000000

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2400000c 	.word	0x2400000c
 800122c:	2400032c 	.word	0x2400032c

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2400032c 	.word	0x2400032c

08001248 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetREVID+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0c1b      	lsrs	r3, r3, #16
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	5c001000 	.word	0x5c001000

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	4313      	orrs	r3, r2
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00
 80012a4:	05fa0000 	.word	0x05fa0000

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	@ (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	@ (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	@ (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	@ 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff4c 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013de:	f7ff ff63 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 80013e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68b9      	ldr	r1, [r7, #8]
 80013e8:	6978      	ldr	r0, [r7, #20]
 80013ea:	f7ff ffb3 	bl	8001354 <NVIC_EncodePriority>
 80013ee:	4602      	mov	r2, r0
 80013f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff82 	bl	8001300 <__NVIC_SetPriority>
}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff56 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	@ 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800142e:	4b89      	ldr	r3, [pc, #548]	@ (8001654 <HAL_GPIO_Init+0x234>)
 8001430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001432:	e194      	b.n	800175e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8186 	beq.w	8001758 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d005      	beq.n	8001464 <HAL_GPIO_Init+0x44>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d130      	bne.n	80014c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149a:	2201      	movs	r2, #1
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f003 0201 	and.w	r2, r3, #1
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d017      	beq.n	8001502 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d123      	bne.n	8001556 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691a      	ldr	r2, [r3, #16]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	69b9      	ldr	r1, [r7, #24]
 8001552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0203 	and.w	r2, r3, #3
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 80e0 	beq.w	8001758 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001598:	4b2f      	ldr	r3, [pc, #188]	@ (8001658 <HAL_GPIO_Init+0x238>)
 800159a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800159e:	4a2e      	ldr	r2, [pc, #184]	@ (8001658 <HAL_GPIO_Init+0x238>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <HAL_GPIO_Init+0x238>)
 80015aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b6:	4a29      	ldr	r2, [pc, #164]	@ (800165c <HAL_GPIO_Init+0x23c>)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a20      	ldr	r2, [pc, #128]	@ (8001660 <HAL_GPIO_Init+0x240>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d052      	beq.n	8001688 <HAL_GPIO_Init+0x268>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001664 <HAL_GPIO_Init+0x244>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d031      	beq.n	800164e <HAL_GPIO_Init+0x22e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001668 <HAL_GPIO_Init+0x248>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d02b      	beq.n	800164a <HAL_GPIO_Init+0x22a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_GPIO_Init+0x24c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d025      	beq.n	8001646 <HAL_GPIO_Init+0x226>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001670 <HAL_GPIO_Init+0x250>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01f      	beq.n	8001642 <HAL_GPIO_Init+0x222>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a1b      	ldr	r2, [pc, #108]	@ (8001674 <HAL_GPIO_Init+0x254>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d019      	beq.n	800163e <HAL_GPIO_Init+0x21e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a1a      	ldr	r2, [pc, #104]	@ (8001678 <HAL_GPIO_Init+0x258>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x21a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a19      	ldr	r2, [pc, #100]	@ (800167c <HAL_GPIO_Init+0x25c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x216>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a18      	ldr	r2, [pc, #96]	@ (8001680 <HAL_GPIO_Init+0x260>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x212>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <HAL_GPIO_Init+0x264>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x20e>
 800162a:	2309      	movs	r3, #9
 800162c:	e02d      	b.n	800168a <HAL_GPIO_Init+0x26a>
 800162e:	230a      	movs	r3, #10
 8001630:	e02b      	b.n	800168a <HAL_GPIO_Init+0x26a>
 8001632:	2308      	movs	r3, #8
 8001634:	e029      	b.n	800168a <HAL_GPIO_Init+0x26a>
 8001636:	2307      	movs	r3, #7
 8001638:	e027      	b.n	800168a <HAL_GPIO_Init+0x26a>
 800163a:	2306      	movs	r3, #6
 800163c:	e025      	b.n	800168a <HAL_GPIO_Init+0x26a>
 800163e:	2305      	movs	r3, #5
 8001640:	e023      	b.n	800168a <HAL_GPIO_Init+0x26a>
 8001642:	2304      	movs	r3, #4
 8001644:	e021      	b.n	800168a <HAL_GPIO_Init+0x26a>
 8001646:	2303      	movs	r3, #3
 8001648:	e01f      	b.n	800168a <HAL_GPIO_Init+0x26a>
 800164a:	2302      	movs	r3, #2
 800164c:	e01d      	b.n	800168a <HAL_GPIO_Init+0x26a>
 800164e:	2301      	movs	r3, #1
 8001650:	e01b      	b.n	800168a <HAL_GPIO_Init+0x26a>
 8001652:	bf00      	nop
 8001654:	58000080 	.word	0x58000080
 8001658:	58024400 	.word	0x58024400
 800165c:	58000400 	.word	0x58000400
 8001660:	58020000 	.word	0x58020000
 8001664:	58020400 	.word	0x58020400
 8001668:	58020800 	.word	0x58020800
 800166c:	58020c00 	.word	0x58020c00
 8001670:	58021000 	.word	0x58021000
 8001674:	58021400 	.word	0x58021400
 8001678:	58021800 	.word	0x58021800
 800167c:	58021c00 	.word	0x58021c00
 8001680:	58022000 	.word	0x58022000
 8001684:	58022400 	.word	0x58022400
 8001688:	2300      	movs	r3, #0
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	f002 0203 	and.w	r2, r2, #3
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	4093      	lsls	r3, r2
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800169a:	4938      	ldr	r1, [pc, #224]	@ (800177c <HAL_GPIO_Init+0x35c>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	3301      	adds	r3, #1
 800175c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	f47f ae63 	bne.w	8001434 <HAL_GPIO_Init+0x14>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3724      	adds	r7, #36	@ 0x24
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	58000400 	.word	0x58000400

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800179c:	e003      	b.n	80017a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	619a      	str	r2, [r3, #24]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017c4:	887a      	ldrh	r2, [r7, #2]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	041a      	lsls	r2, r3, #16
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	400b      	ands	r3, r1
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	619a      	str	r2, [r3, #24]
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80017f0:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <HAL_HSEM_FastTake+0x2c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3320      	adds	r3, #32
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <HAL_HSEM_FastTake+0x30>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	58026400 	.word	0x58026400
 8001818:	80000300 	.word	0x80000300

0800181c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001826:	4906      	ldr	r1, [pc, #24]	@ (8001840 <HAL_HSEM_Release+0x24>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	58026400 	.word	0x58026400

08001844 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800184c:	4b29      	ldr	r3, [pc, #164]	@ (80018f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	2b06      	cmp	r3, #6
 8001856:	d00a      	beq.n	800186e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001858:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d001      	beq.n	800186a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e040      	b.n	80018ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e03e      	b.n	80018ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800186e:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001876:	491f      	ldr	r1, [pc, #124]	@ (80018f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4313      	orrs	r3, r2
 800187c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800187e:	f7ff fcd7 	bl	8001230 <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001884:	e009      	b.n	800189a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001886:	f7ff fcd3 	bl	8001230 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001894:	d901      	bls.n	800189a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e028      	b.n	80018ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018a6:	d1ee      	bne.n	8001886 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b1e      	cmp	r3, #30
 80018ac:	d008      	beq.n	80018c0 <HAL_PWREx_ConfigSupply+0x7c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80018b2:	d005      	beq.n	80018c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b1d      	cmp	r3, #29
 80018b8:	d002      	beq.n	80018c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80018be:	d114      	bne.n	80018ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018c0:	f7ff fcb6 	bl	8001230 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018c6:	e009      	b.n	80018dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018c8:	f7ff fcb2 	bl	8001230 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018d6:	d901      	bls.n	80018dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e007      	b.n	80018ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e8:	d1ee      	bne.n	80018c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	58024800 	.word	0x58024800

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	@ 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	f000 bc48 	b.w	800219c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8088 	beq.w	8001a2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191a:	4b99      	ldr	r3, [pc, #612]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001924:	4b96      	ldr	r3, [pc, #600]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800192a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192c:	2b10      	cmp	r3, #16
 800192e:	d007      	beq.n	8001940 <HAL_RCC_OscConfig+0x48>
 8001930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001932:	2b18      	cmp	r3, #24
 8001934:	d111      	bne.n	800195a <HAL_RCC_OscConfig+0x62>
 8001936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d10c      	bne.n	800195a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	4b8f      	ldr	r3, [pc, #572]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d06d      	beq.n	8001a28 <HAL_RCC_OscConfig+0x130>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d169      	bne.n	8001a28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	f000 bc21 	b.w	800219c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x7a>
 8001964:	4b86      	ldr	r3, [pc, #536]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a85      	ldr	r2, [pc, #532]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e02e      	b.n	80019d0 <HAL_RCC_OscConfig+0xd8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x9c>
 800197a:	4b81      	ldr	r3, [pc, #516]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a80      	ldr	r2, [pc, #512]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b7e      	ldr	r3, [pc, #504]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 800198c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e01d      	b.n	80019d0 <HAL_RCC_OscConfig+0xd8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0xc0>
 800199e:	4b78      	ldr	r3, [pc, #480]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a77      	ldr	r2, [pc, #476]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b75      	ldr	r3, [pc, #468]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a74      	ldr	r2, [pc, #464]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0xd8>
 80019b8:	4b71      	ldr	r3, [pc, #452]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a70      	ldr	r2, [pc, #448]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6d      	ldr	r2, [pc, #436]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff fc2a 	bl	8001230 <HAL_GetTick>
 80019dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fc26 	bl	8001230 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e3d4      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019f2:	4b63      	ldr	r3, [pc, #396]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0xe8>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fc16 	bl	8001230 <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fc12 	bl	8001230 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e3c0      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a1a:	4b59      	ldr	r3, [pc, #356]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x110>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80ca 	beq.w	8001bcc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a38:	4b51      	ldr	r3, [pc, #324]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a42:	4b4f      	ldr	r3, [pc, #316]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a46:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_RCC_OscConfig+0x166>
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2b18      	cmp	r3, #24
 8001a52:	d156      	bne.n	8001b02 <HAL_RCC_OscConfig+0x20a>
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d151      	bne.n	8001b02 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5e:	4b48      	ldr	r3, [pc, #288]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x17e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e392      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a76:	4b42      	ldr	r3, [pc, #264]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 0219 	bic.w	r2, r3, #25
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	493f      	ldr	r1, [pc, #252]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff fbd2 	bl	8001230 <HAL_GetTick>
 8001a8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a90:	f7ff fbce 	bl	8001230 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e37c      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aa2:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	f7ff fbcb 	bl	8001248 <HAL_GetREVID>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d817      	bhi.n	8001aec <HAL_RCC_OscConfig+0x1f4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b40      	cmp	r3, #64	@ 0x40
 8001ac2:	d108      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001acc:	4a2c      	ldr	r2, [pc, #176]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	e07a      	b.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	031b      	lsls	r3, r3, #12
 8001ae4:	4926      	ldr	r1, [pc, #152]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aea:	e06f      	b.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	4921      	ldr	r1, [pc, #132]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b00:	e064      	b.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d047      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0219 	bic.w	r2, r3, #25
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	491a      	ldr	r1, [pc, #104]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb88 	bl	8001230 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff fb84 	bl	8001230 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e332      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b36:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	f7ff fb81 	bl	8001248 <HAL_GetREVID>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d819      	bhi.n	8001b84 <HAL_RCC_OscConfig+0x28c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b40      	cmp	r3, #64	@ 0x40
 8001b56:	d108      	bne.n	8001b6a <HAL_RCC_OscConfig+0x272>
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b60:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b66:	6053      	str	r3, [r2, #4]
 8001b68:	e030      	b.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
 8001b6a:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	031b      	lsls	r3, r3, #12
 8001b78:	4901      	ldr	r1, [pc, #4]	@ (8001b80 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
 8001b7e:	e025      	b.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
 8001b80:	58024400 	.word	0x58024400
 8001b84:	4b9a      	ldr	r3, [pc, #616]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	4997      	ldr	r1, [pc, #604]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
 8001b98:	e018      	b.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9a:	4b95      	ldr	r3, [pc, #596]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a94      	ldr	r2, [pc, #592]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fb43 	bl	8001230 <HAL_GetTick>
 8001baa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff fb3f 	bl	8001230 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e2ed      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bc0:	4b8b      	ldr	r3, [pc, #556]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80a9 	beq.w	8001d2c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bda:	4b85      	ldr	r3, [pc, #532]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001be2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001be4:	4b82      	ldr	r3, [pc, #520]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d007      	beq.n	8001c00 <HAL_RCC_OscConfig+0x308>
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2b18      	cmp	r3, #24
 8001bf4:	d13a      	bne.n	8001c6c <HAL_RCC_OscConfig+0x374>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d135      	bne.n	8001c6c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c00:	4b7b      	ldr	r3, [pc, #492]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_OscConfig+0x320>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b80      	cmp	r3, #128	@ 0x80
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e2c1      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c18:	f7ff fb16 	bl	8001248 <HAL_GetREVID>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d817      	bhi.n	8001c56 <HAL_RCC_OscConfig+0x35e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	d108      	bne.n	8001c40 <HAL_RCC_OscConfig+0x348>
 8001c2e:	4b70      	ldr	r3, [pc, #448]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c36:	4a6e      	ldr	r2, [pc, #440]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c3c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c3e:	e075      	b.n	8001d2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c40:	4b6b      	ldr	r3, [pc, #428]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	069b      	lsls	r3, r3, #26
 8001c4e:	4968      	ldr	r1, [pc, #416]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c54:	e06a      	b.n	8001d2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c56:	4b66      	ldr	r3, [pc, #408]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	061b      	lsls	r3, r3, #24
 8001c64:	4962      	ldr	r1, [pc, #392]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c6a:	e05f      	b.n	8001d2c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d042      	beq.n	8001cfa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c74:	4b5e      	ldr	r3, [pc, #376]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5d      	ldr	r2, [pc, #372]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fad6 	bl	8001230 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c88:	f7ff fad2 	bl	8001230 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e280      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c9a:	4b55      	ldr	r3, [pc, #340]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ca6:	f7ff facf 	bl	8001248 <HAL_GetREVID>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d817      	bhi.n	8001ce4 <HAL_RCC_OscConfig+0x3ec>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d108      	bne.n	8001cce <HAL_RCC_OscConfig+0x3d6>
 8001cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cca:	6053      	str	r3, [r2, #4]
 8001ccc:	e02e      	b.n	8001d2c <HAL_RCC_OscConfig+0x434>
 8001cce:	4b48      	ldr	r3, [pc, #288]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	069b      	lsls	r3, r3, #26
 8001cdc:	4944      	ldr	r1, [pc, #272]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
 8001ce2:	e023      	b.n	8001d2c <HAL_RCC_OscConfig+0x434>
 8001ce4:	4b42      	ldr	r3, [pc, #264]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	493f      	ldr	r1, [pc, #252]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
 8001cf8:	e018      	b.n	8001d2c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa93 	bl	8001230 <HAL_GetTick>
 8001d0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fa8f 	bl	8001230 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e23d      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d20:	4b33      	ldr	r3, [pc, #204]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d036      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d019      	beq.n	8001d74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d40:	4b2b      	ldr	r3, [pc, #172]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d44:	4a2a      	ldr	r2, [pc, #168]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fa70 	bl	8001230 <HAL_GetTick>
 8001d50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff fa6c 	bl	8001230 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e21a      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d66:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x45c>
 8001d72:	e018      	b.n	8001da6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d74:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d78:	4a1d      	ldr	r2, [pc, #116]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff fa56 	bl	8001230 <HAL_GetTick>
 8001d84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff fa52 	bl	8001230 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e200      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d039      	beq.n	8001e26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa33 	bl	8001230 <HAL_GetTick>
 8001dca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dce:	f7ff fa2f 	bl	8001230 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1dd      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x4d6>
 8001dec:	e01b      	b.n	8001e26 <HAL_RCC_OscConfig+0x52e>
 8001dee:	bf00      	nop
 8001df0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001df4:	4b9b      	ldr	r3, [pc, #620]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a9a      	ldr	r2, [pc, #616]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fa16 	bl	8001230 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e08:	f7ff fa12 	bl	8001230 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e1c0      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e1a:	4b92      	ldr	r3, [pc, #584]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8081 	beq.w	8001f36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e34:	4b8c      	ldr	r3, [pc, #560]	@ (8002068 <HAL_RCC_OscConfig+0x770>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a8b      	ldr	r2, [pc, #556]	@ (8002068 <HAL_RCC_OscConfig+0x770>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e40:	f7ff f9f6 	bl	8001230 <HAL_GetTick>
 8001e44:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e48:	f7ff f9f2 	bl	8001230 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	@ 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1a0      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e5a:	4b83      	ldr	r3, [pc, #524]	@ (8002068 <HAL_RCC_OscConfig+0x770>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_OscConfig+0x584>
 8001e6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e72:	4a7c      	ldr	r2, [pc, #496]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e7a:	e02d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5e0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x5a6>
 8001e84:	4b77      	ldr	r3, [pc, #476]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a76      	ldr	r2, [pc, #472]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e90:	4b74      	ldr	r3, [pc, #464]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e94:	4a73      	ldr	r2, [pc, #460]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	f023 0304 	bic.w	r3, r3, #4
 8001e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e9c:	e01c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5e0>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c8>
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb6:	4a6b      	ldr	r2, [pc, #428]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5e0>
 8001ec0:	4b68      	ldr	r3, [pc, #416]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec4:	4a67      	ldr	r2, [pc, #412]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ecc:	4b65      	ldr	r3, [pc, #404]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed0:	4a64      	ldr	r2, [pc, #400]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001ed2:	f023 0304 	bic.w	r3, r3, #4
 8001ed6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d015      	beq.n	8001f0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f9a6 	bl	8001230 <HAL_GetTick>
 8001ee4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f9a2 	bl	8001230 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e14e      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001efe:	4b59      	ldr	r3, [pc, #356]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0ee      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x5f0>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f990 	bl	8001230 <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7ff f98c 	bl	8001230 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e138      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ee      	bne.n	8001f14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 812d 	beq.w	800219a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f40:	4b48      	ldr	r3, [pc, #288]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f48:	2b18      	cmp	r3, #24
 8001f4a:	f000 80bd 	beq.w	80020c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	f040 809e 	bne.w	8002094 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a41      	ldr	r2, [pc, #260]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff f964 	bl	8001230 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff f960 	bl	8001230 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e10e      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f7e:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f8a:	4b36      	ldr	r3, [pc, #216]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001f8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f8e:	4b37      	ldr	r3, [pc, #220]	@ (800206c <HAL_RCC_OscConfig+0x774>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	4931      	ldr	r1, [pc, #196]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	628b      	str	r3, [r1, #40]	@ 0x28
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	025b      	lsls	r3, r3, #9
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	061b      	lsls	r3, r3, #24
 8001fd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001fd4:	4923      	ldr	r1, [pc, #140]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fde:	4a21      	ldr	r2, [pc, #132]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_RCC_OscConfig+0x778>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ff2:	00d2      	lsls	r2, r2, #3
 8001ff4:	491b      	ldr	r1, [pc, #108]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	f023 020c 	bic.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	4917      	ldr	r1, [pc, #92]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800200c:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	f023 0202 	bic.w	r2, r3, #2
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002018:	4912      	ldr	r1, [pc, #72]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 800201a:	4313      	orrs	r3, r2
 800201c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002022:	4a10      	ldr	r2, [pc, #64]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002028:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 800202c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202e:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002034:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203a:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002040:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	4a07      	ldr	r2, [pc, #28]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <HAL_RCC_OscConfig+0x76c>)
 8002054:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff f8e9 	bl	8001230 <HAL_GetTick>
 800205e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002060:	e011      	b.n	8002086 <HAL_RCC_OscConfig+0x78e>
 8002062:	bf00      	nop
 8002064:	58024400 	.word	0x58024400
 8002068:	58024800 	.word	0x58024800
 800206c:	fffffc0c 	.word	0xfffffc0c
 8002070:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f8dc 	bl	8001230 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e08a      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002086:	4b47      	ldr	r3, [pc, #284]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x77c>
 8002092:	e082      	b.n	800219a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a42      	ldr	r2, [pc, #264]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 800209a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff f8c6 	bl	8001230 <HAL_GetTick>
 80020a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff f8c2 	bl	8001230 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e070      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ba:	4b3a      	ldr	r3, [pc, #232]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x7b0>
 80020c6:	e068      	b.n	800219a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020c8:	4b36      	ldr	r3, [pc, #216]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020ce:	4b35      	ldr	r3, [pc, #212]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d031      	beq.n	8002140 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0203 	and.w	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d12a      	bne.n	8002140 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d122      	bne.n	8002140 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d11a      	bne.n	8002140 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	0a5b      	lsrs	r3, r3, #9
 800210e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002116:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d111      	bne.n	8002140 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	0c1b      	lsrs	r3, r3, #16
 8002120:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002128:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d108      	bne.n	8002140 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	0e1b      	lsrs	r3, r3, #24
 8002132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e02b      	b.n	800219c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002144:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 8002146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002148:	08db      	lsrs	r3, r3, #3
 800214a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800214e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	429a      	cmp	r2, r3
 8002158:	d01f      	beq.n	800219a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800215a:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	4a11      	ldr	r2, [pc, #68]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002166:	f7ff f863 	bl	8001230 <HAL_GetTick>
 800216a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800216c:	bf00      	nop
 800216e:	f7ff f85f 	bl	8001230 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	4293      	cmp	r3, r2
 8002178:	d0f9      	beq.n	800216e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 800217c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_RCC_OscConfig+0x8b0>)
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002186:	00d2      	lsls	r2, r2, #3
 8002188:	4906      	ldr	r1, [pc, #24]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 800218a:	4313      	orrs	r3, r2
 800218c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_RCC_OscConfig+0x8ac>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3730      	adds	r7, #48	@ 0x30
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	58024400 	.word	0x58024400
 80021a8:	ffff0007 	.word	0xffff0007

080021ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e19c      	b.n	80024fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b8a      	ldr	r3, [pc, #552]	@ (80023ec <HAL_RCC_ClockConfig+0x240>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b87      	ldr	r3, [pc, #540]	@ (80023ec <HAL_RCC_ClockConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	4985      	ldr	r1, [pc, #532]	@ (80023ec <HAL_RCC_ClockConfig+0x240>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b83      	ldr	r3, [pc, #524]	@ (80023ec <HAL_RCC_ClockConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e184      	b.n	80024fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	4b7b      	ldr	r3, [pc, #492]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002208:	429a      	cmp	r2, r3
 800220a:	d908      	bls.n	800221e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800220c:	4b78      	ldr	r3, [pc, #480]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	4975      	ldr	r1, [pc, #468]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800221a:	4313      	orrs	r3, r2
 800221c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	4b70      	ldr	r3, [pc, #448]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002236:	429a      	cmp	r2, r3
 8002238:	d908      	bls.n	800224c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800223a:	4b6d      	ldr	r3, [pc, #436]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	496a      	ldr	r1, [pc, #424]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	4b64      	ldr	r3, [pc, #400]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002264:	429a      	cmp	r2, r3
 8002266:	d908      	bls.n	800227a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002268:	4b61      	ldr	r3, [pc, #388]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	495e      	ldr	r1, [pc, #376]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 8002276:	4313      	orrs	r3, r2
 8002278:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d010      	beq.n	80022a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002292:	429a      	cmp	r2, r3
 8002294:	d908      	bls.n	80022a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002296:	4b56      	ldr	r3, [pc, #344]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4953      	ldr	r1, [pc, #332]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4b4d      	ldr	r3, [pc, #308]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d908      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c4:	4b4a      	ldr	r3, [pc, #296]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f023 020f 	bic.w	r2, r3, #15
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4947      	ldr	r1, [pc, #284]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d055      	beq.n	800238e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022e2:	4b43      	ldr	r3, [pc, #268]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4940      	ldr	r1, [pc, #256]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d107      	bne.n	800230c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022fc:	4b3c      	ldr	r3, [pc, #240]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d121      	bne.n	800234c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0f6      	b.n	80024fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d107      	bne.n	8002324 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002314:	4b36      	ldr	r3, [pc, #216]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d115      	bne.n	800234c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0ea      	b.n	80024fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800232c:	4b30      	ldr	r3, [pc, #192]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0de      	b.n	80024fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800233c:	4b2c      	ldr	r3, [pc, #176]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d6      	b.n	80024fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800234c:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f023 0207 	bic.w	r2, r3, #7
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4925      	ldr	r1, [pc, #148]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800235a:	4313      	orrs	r3, r2
 800235c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800235e:	f7fe ff67 	bl	8001230 <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002364:	e00a      	b.n	800237c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002366:	f7fe ff63 	bl	8001230 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0be      	b.n	80024fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	429a      	cmp	r2, r3
 800238c:	d1eb      	bne.n	8002366 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d208      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f023 020f 	bic.w	r2, r3, #15
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	490e      	ldr	r1, [pc, #56]	@ (80023f0 <HAL_RCC_ClockConfig+0x244>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_ClockConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d214      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_RCC_ClockConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 020f 	bic.w	r2, r3, #15
 80023d2:	4906      	ldr	r1, [pc, #24]	@ (80023ec <HAL_RCC_ClockConfig+0x240>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <HAL_RCC_ClockConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e086      	b.n	80024fa <HAL_RCC_ClockConfig+0x34e>
 80023ec:	52002000 	.word	0x52002000
 80023f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d010      	beq.n	8002422 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800240c:	429a      	cmp	r2, r3
 800240e:	d208      	bcs.n	8002422 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002410:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	4939      	ldr	r1, [pc, #228]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 800241e:	4313      	orrs	r3, r2
 8002420:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d010      	beq.n	8002450 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	4b34      	ldr	r3, [pc, #208]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800243a:	429a      	cmp	r2, r3
 800243c:	d208      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800243e:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	492e      	ldr	r1, [pc, #184]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 800244c:	4313      	orrs	r3, r2
 800244e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d010      	beq.n	800247e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002468:	429a      	cmp	r2, r3
 800246a:	d208      	bcs.n	800247e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800246c:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4922      	ldr	r1, [pc, #136]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 800247a:	4313      	orrs	r3, r2
 800247c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d010      	beq.n	80024ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002496:	429a      	cmp	r2, r3
 8002498:	d208      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800249a:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4917      	ldr	r1, [pc, #92]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024ac:	f000 f834 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	4912      	ldr	r1, [pc, #72]	@ (8002508 <HAL_RCC_ClockConfig+0x35c>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <HAL_RCC_ClockConfig+0x358>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <HAL_RCC_ClockConfig+0x35c>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <HAL_RCC_ClockConfig+0x360>)
 80024e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <HAL_RCC_ClockConfig+0x364>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_RCC_ClockConfig+0x368>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fccc 	bl	8000e8c <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	58024400 	.word	0x58024400
 8002508:	0800b2c0 	.word	0x0800b2c0
 800250c:	24000004 	.word	0x24000004
 8002510:	24000000 	.word	0x24000000
 8002514:	24000008 	.word	0x24000008

08002518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	@ 0x24
 800251c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251e:	4bb3      	ldr	r3, [pc, #716]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002526:	2b18      	cmp	r3, #24
 8002528:	f200 8155 	bhi.w	80027d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <HAL_RCC_GetSysClockFreq+0x1c>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002599 	.word	0x08002599
 8002538:	080027d7 	.word	0x080027d7
 800253c:	080027d7 	.word	0x080027d7
 8002540:	080027d7 	.word	0x080027d7
 8002544:	080027d7 	.word	0x080027d7
 8002548:	080027d7 	.word	0x080027d7
 800254c:	080027d7 	.word	0x080027d7
 8002550:	080027d7 	.word	0x080027d7
 8002554:	080025bf 	.word	0x080025bf
 8002558:	080027d7 	.word	0x080027d7
 800255c:	080027d7 	.word	0x080027d7
 8002560:	080027d7 	.word	0x080027d7
 8002564:	080027d7 	.word	0x080027d7
 8002568:	080027d7 	.word	0x080027d7
 800256c:	080027d7 	.word	0x080027d7
 8002570:	080027d7 	.word	0x080027d7
 8002574:	080025c5 	.word	0x080025c5
 8002578:	080027d7 	.word	0x080027d7
 800257c:	080027d7 	.word	0x080027d7
 8002580:	080027d7 	.word	0x080027d7
 8002584:	080027d7 	.word	0x080027d7
 8002588:	080027d7 	.word	0x080027d7
 800258c:	080027d7 	.word	0x080027d7
 8002590:	080027d7 	.word	0x080027d7
 8002594:	080025cb 	.word	0x080025cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002598:	4b94      	ldr	r3, [pc, #592]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025a4:	4b91      	ldr	r3, [pc, #580]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	08db      	lsrs	r3, r3, #3
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	4a90      	ldr	r2, [pc, #576]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
 80025b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80025b6:	e111      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025b8:	4b8d      	ldr	r3, [pc, #564]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025ba:	61bb      	str	r3, [r7, #24]
      break;
 80025bc:	e10e      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80025be:	4b8d      	ldr	r3, [pc, #564]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025c0:	61bb      	str	r3, [r7, #24]
      break;
 80025c2:	e10b      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80025c4:	4b8c      	ldr	r3, [pc, #560]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025c6:	61bb      	str	r3, [r7, #24]
      break;
 80025c8:	e108      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025ca:	4b88      	ldr	r3, [pc, #544]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80025d4:	4b85      	ldr	r3, [pc, #532]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025e0:	4b82      	ldr	r3, [pc, #520]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80025ea:	4b80      	ldr	r3, [pc, #512]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ee:	08db      	lsrs	r3, r3, #3
 80025f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002602:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80e1 	beq.w	80027d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b02      	cmp	r3, #2
 8002612:	f000 8083 	beq.w	800271c <HAL_RCC_GetSysClockFreq+0x204>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b02      	cmp	r3, #2
 800261a:	f200 80a1 	bhi.w	8002760 <HAL_RCC_GetSysClockFreq+0x248>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x114>
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d056      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800262a:	e099      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800262c:	4b6f      	ldr	r3, [pc, #444]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d02d      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002638:	4b6c      	ldr	r3, [pc, #432]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	08db      	lsrs	r3, r3, #3
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	4a6b      	ldr	r2, [pc, #428]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	ee07 3a90 	vmov	s15, r3
 8002650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002662:	4b62      	ldr	r3, [pc, #392]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002672:	ed97 6a02 	vldr	s12, [r7, #8]
 8002676:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80027fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800267a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800267e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002692:	e087      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002800 <HAL_RCC_GetSysClockFreq+0x2e8>
 80026a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a6:	4b51      	ldr	r3, [pc, #324]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80027fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80026be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026d6:	e065      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002804 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ea:	4b40      	ldr	r3, [pc, #256]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80026fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80027fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800270a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800270e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002716:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800271a:	e043      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002726:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002808 <HAL_RCC_GetSysClockFreq+0x2f0>
 800272a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272e:	4b2f      	ldr	r3, [pc, #188]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002742:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80027fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800274a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800275e:	e021      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002804 <HAL_RCC_GetSysClockFreq+0x2ec>
 800276e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002772:	4b1e      	ldr	r3, [pc, #120]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002782:	ed97 6a02 	vldr	s12, [r7, #8]
 8002786:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80027fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800278a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800278e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	0a5b      	lsrs	r3, r3, #9
 80027aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027ae:	3301      	adds	r3, #1
 80027b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80027c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c8:	ee17 3a90 	vmov	r3, s15
 80027cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80027ce:	e005      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
      break;
 80027d4:	e002      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80027d6:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027d8:	61bb      	str	r3, [r7, #24]
      break;
 80027da:	bf00      	nop
  }

  return sysclockfreq;
 80027dc:	69bb      	ldr	r3, [r7, #24]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	@ 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	58024400 	.word	0x58024400
 80027f0:	03d09000 	.word	0x03d09000
 80027f4:	003d0900 	.word	0x003d0900
 80027f8:	007a1200 	.word	0x007a1200
 80027fc:	46000000 	.word	0x46000000
 8002800:	4c742400 	.word	0x4c742400
 8002804:	4a742400 	.word	0x4a742400
 8002808:	4af42400 	.word	0x4af42400

0800280c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002812:	f7ff fe81 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCC_GetHCLKFreq+0x50>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490f      	ldr	r1, [pc, #60]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x54>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002830:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_RCC_GetHCLKFreq+0x50>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	4a09      	ldr	r2, [pc, #36]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x54>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <HAL_RCC_GetHCLKFreq+0x58>)
 8002848:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800284a:	4a07      	ldr	r2, [pc, #28]	@ (8002868 <HAL_RCC_GetHCLKFreq+0x5c>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <HAL_RCC_GetHCLKFreq+0x58>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	58024400 	.word	0x58024400
 8002860:	0800b2c0 	.word	0x0800b2c0
 8002864:	24000004 	.word	0x24000004
 8002868:	24000000 	.word	0x24000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002870:	f7ff ffcc 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4904      	ldr	r1, [pc, #16]	@ (8002894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	58024400 	.word	0x58024400
 8002894:	0800b2c0 	.word	0x0800b2c0

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800289c:	f7ff ffb6 	bl	800280c <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	58024400 	.word	0x58024400
 80028c0:	0800b2c0 	.word	0x0800b2c0

080028c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	223f      	movs	r2, #63	@ 0x3f
 80028d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <HAL_RCC_GetClockConfig+0x7c>)
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f003 0207 	and.w	r2, r3, #7
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80028e0:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <HAL_RCC_GetClockConfig+0x7c>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <HAL_RCC_GetClockConfig+0x7c>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_RCC_GetClockConfig+0x7c>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002904:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <HAL_RCC_GetClockConfig+0x7c>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_GetClockConfig+0x7c>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800291c:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <HAL_RCC_GetClockConfig+0x7c>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCC_GetClockConfig+0x80>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	601a      	str	r2, [r3, #0]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	58024400 	.word	0x58024400
 8002944:	52002000 	.word	0x52002000

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800294c:	b0ca      	sub	sp, #296	@ 0x128
 800294e:	af00      	add	r7, sp, #0
 8002950:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800296c:	2500      	movs	r5, #0
 800296e:	ea54 0305 	orrs.w	r3, r4, r5
 8002972:	d049      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800297a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800297e:	d02f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002980:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002984:	d828      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002986:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800298a:	d01a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800298c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002990:	d822      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800299a:	d007      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800299c:	e01c      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800299e:	4bb8      	ldr	r3, [pc, #736]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a2:	4ab7      	ldr	r2, [pc, #732]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029aa:	e01a      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b0:	3308      	adds	r3, #8
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 fc8f 	bl	80042d8 <RCCEx_PLL2_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029c0:	e00f      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c6:	3328      	adds	r3, #40	@ 0x28
 80029c8:	2102      	movs	r1, #2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fd36 	bl	800443c <RCCEx_PLL3_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029d6:	e004      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029de:	e000      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80029e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029ea:	4ba5      	ldr	r3, [pc, #660]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029f8:	4aa1      	ldr	r2, [pc, #644]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029fa:	430b      	orrs	r3, r1
 80029fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002a14:	f04f 0900 	mov.w	r9, #0
 8002a18:	ea58 0309 	orrs.w	r3, r8, r9
 8002a1c:	d047      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d82a      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a28:	a201      	add	r2, pc, #4	@ (adr r2, 8002a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a45 	.word	0x08002a45
 8002a34:	08002a53 	.word	0x08002a53
 8002a38:	08002a69 	.word	0x08002a69
 8002a3c:	08002a87 	.word	0x08002a87
 8002a40:	08002a87 	.word	0x08002a87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a44:	4b8e      	ldr	r3, [pc, #568]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	4a8d      	ldr	r2, [pc, #564]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a50:	e01a      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a56:	3308      	adds	r3, #8
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 fc3c 	bl	80042d8 <RCCEx_PLL2_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a66:	e00f      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6c:	3328      	adds	r3, #40	@ 0x28
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 fce3 	bl	800443c <RCCEx_PLL3_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a7c:	e004      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a84:	e000      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a90:	4b7b      	ldr	r3, [pc, #492]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a94:	f023 0107 	bic.w	r1, r3, #7
 8002a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	4a78      	ldr	r2, [pc, #480]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aa4:	e003      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002aba:	f04f 0b00 	mov.w	fp, #0
 8002abe:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ac2:	d04c      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ace:	d030      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad4:	d829      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ad6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ad8:	d02d      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8002adc:	d825      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ade:	2b80      	cmp	r3, #128	@ 0x80
 8002ae0:	d018      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ae2:	2b80      	cmp	r3, #128	@ 0x80
 8002ae4:	d821      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002aea:	2b40      	cmp	r3, #64	@ 0x40
 8002aec:	d007      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002aee:	e01c      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af0:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	4a62      	ldr	r2, [pc, #392]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002afc:	e01c      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b02:	3308      	adds	r3, #8
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 fbe6 	bl	80042d8 <RCCEx_PLL2_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b12:	e011      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b18:	3328      	adds	r3, #40	@ 0x28
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 fc8d 	bl	800443c <RCCEx_PLL3_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b28:	e006      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b40:	4b4f      	ldr	r3, [pc, #316]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b44:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b54:	e003      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002b6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	d053      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b8a:	d035      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002b8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b90:	d82e      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002b96:	d031      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002b98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002b9c:	d828      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ba2:	d01a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ba8:	d822      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002bae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bb2:	d007      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002bb4:	e01c      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb6:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	4a31      	ldr	r2, [pc, #196]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bc2:	e01c      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc8:	3308      	adds	r3, #8
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 fb83 	bl	80042d8 <RCCEx_PLL2_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bd8:	e011      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bde:	3328      	adds	r3, #40	@ 0x28
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 fc2a 	bl	800443c <RCCEx_PLL3_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bee:	e006      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002bf8:	bf00      	nop
 8002bfa:	e000      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c16:	4a1a      	ldr	r2, [pc, #104]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c1c:	e003      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002c32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002c40:	460b      	mov	r3, r1
 8002c42:	4313      	orrs	r3, r2
 8002c44:	d056      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c52:	d038      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c58:	d831      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c5e:	d034      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002c60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c64:	d82b      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c6a:	d01d      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c70:	d825      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c7c:	e01f      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c7e:	bf00      	nop
 8002c80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c84:	4ba2      	ldr	r3, [pc, #648]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	4aa1      	ldr	r2, [pc, #644]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c90:	e01c      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c96:	3308      	adds	r3, #8
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 fb1c 	bl	80042d8 <RCCEx_PLL2_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ca6:	e011      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cac:	3328      	adds	r3, #40	@ 0x28
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 fbc3 	bl	800443c <RCCEx_PLL3_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cbc:	e006      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ce4:	4a8a      	ldr	r2, [pc, #552]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cea:	e003      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002d0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4313      	orrs	r3, r2
 8002d12:	d03a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1a:	2b30      	cmp	r3, #48	@ 0x30
 8002d1c:	d01f      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d1e:	2b30      	cmp	r3, #48	@ 0x30
 8002d20:	d819      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d815      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d019      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d111      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d32:	4b77      	ldr	r3, [pc, #476]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	4a76      	ldr	r2, [pc, #472]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d3e:	e011      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d44:	3308      	adds	r3, #8
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fac5 	bl	80042d8 <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d5c:	e002      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d6c:	4b68      	ldr	r3, [pc, #416]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7a:	4a65      	ldr	r2, [pc, #404]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d80:	e003      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002d96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002da0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4313      	orrs	r3, r2
 8002da8:	d051      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db4:	d035      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002db6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dba:	d82e      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dc0:	d031      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002dc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dc6:	d828      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dcc:	d01a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dd2:	d822      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ddc:	d007      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002dde:	e01c      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de0:	4b4b      	ldr	r3, [pc, #300]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	4a4a      	ldr	r2, [pc, #296]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002dec:	e01c      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df2:	3308      	adds	r3, #8
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 fa6e 	bl	80042d8 <RCCEx_PLL2_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e02:	e011      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e08:	3328      	adds	r3, #40	@ 0x28
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 fb15 	bl	800443c <RCCEx_PLL3_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e18:	e006      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e20:	e002      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e30:	4b37      	ldr	r3, [pc, #220]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3e:	4a34      	ldr	r2, [pc, #208]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e44:	e003      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002e64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	d056      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e78:	d033      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e7e:	d82c      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e84:	d02f      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002e86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e8a:	d826      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e90:	d02b      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002e92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e96:	d820      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e9c:	d012      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ea2:	d81a      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d022      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eac:	d115      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 fa0e 	bl	80042d8 <RCCEx_PLL2_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ec2:	e015      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	3328      	adds	r3, #40	@ 0x28
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fab5 	bl	800443c <RCCEx_PLL3_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ee0:	e006      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ee2:	bf00      	nop
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ee6:	bf00      	nop
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f06:	4a02      	ldr	r2, [pc, #8]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f0c:	e006      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f0e:	bf00      	nop
 8002f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	d055      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f48:	d033      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4e:	d82c      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f54:	d02f      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5a:	d826      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f60:	d02b      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002f62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f66:	d820      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f6c:	d012      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f72:	d81a      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d022      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f7c:	d115      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f82:	3308      	adds	r3, #8
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 f9a6 	bl	80042d8 <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f92:	e015      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f98:	3328      	adds	r3, #40	@ 0x28
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fa4d 	bl	800443c <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fb0:	e006      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fc8:	4ba3      	ldr	r3, [pc, #652]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fd8:	4a9f      	ldr	r2, [pc, #636]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fde:	e003      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003002:	460b      	mov	r3, r1
 8003004:	4313      	orrs	r3, r2
 8003006:	d037      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003012:	d00e      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003018:	d816      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800301e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003022:	d111      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003024:	4b8c      	ldr	r3, [pc, #560]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	4a8b      	ldr	r2, [pc, #556]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800302a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003030:	e00f      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003036:	3308      	adds	r3, #8
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f001 f94c 	bl	80042d8 <RCCEx_PLL2_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003046:	e004      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800304e:	e000      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800305a:	4b7f      	ldr	r3, [pc, #508]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800305c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800305e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	4a7b      	ldr	r2, [pc, #492]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306a:	430b      	orrs	r3, r1
 800306c:	6513      	str	r3, [r2, #80]	@ 0x50
 800306e:	e003      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800308e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003092:	460b      	mov	r3, r1
 8003094:	4313      	orrs	r3, r2
 8003096:	d039      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d81c      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80030a2:	a201      	add	r2, pc, #4	@ (adr r2, 80030a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030e5 	.word	0x080030e5
 80030ac:	080030b9 	.word	0x080030b9
 80030b0:	080030c7 	.word	0x080030c7
 80030b4:	080030e5 	.word	0x080030e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b8:	4b67      	ldr	r3, [pc, #412]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	4a66      	ldr	r2, [pc, #408]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030c4:	e00f      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ca:	3308      	adds	r3, #8
 80030cc:	2102      	movs	r1, #2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f902 	bl	80042d8 <RCCEx_PLL2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030da:	e004      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80030e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	f023 0103 	bic.w	r1, r3, #3
 80030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030fc:	4a56      	ldr	r2, [pc, #344]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030fe:	430b      	orrs	r3, r1
 8003100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003102:	e003      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003118:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003122:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003126:	460b      	mov	r3, r1
 8003128:	4313      	orrs	r3, r2
 800312a:	f000 809f 	beq.w	800326c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800312e:	4b4b      	ldr	r3, [pc, #300]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a4a      	ldr	r2, [pc, #296]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003138:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800313a:	f7fe f879 	bl	8001230 <HAL_GetTick>
 800313e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003142:	e00b      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fe f874 	bl	8001230 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	@ 0x64
 8003152:	d903      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800315a:	e005      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315c:	4b3f      	ldr	r3, [pc, #252]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ed      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800316c:	2b00      	cmp	r3, #0
 800316e:	d179      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003170:	4b39      	ldr	r3, [pc, #228]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003172:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003178:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800317c:	4053      	eors	r3, r2
 800317e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003186:	4b34      	ldr	r3, [pc, #208]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800318e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003192:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	4a30      	ldr	r2, [pc, #192]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800319e:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031be:	d118      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe f836 	bl	8001230 <HAL_GetTick>
 80031c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c8:	e00d      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe f831 	bl	8001230 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80031da:	429a      	cmp	r2, r3
 80031dc:	d903      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80031e4:	e005      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0eb      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80031f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d129      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320a:	d10e      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800320c:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800321c:	091a      	lsrs	r2, r3, #4
 800321e:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003220:	4013      	ands	r3, r2
 8003222:	4a0d      	ldr	r2, [pc, #52]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003224:	430b      	orrs	r3, r1
 8003226:	6113      	str	r3, [r2, #16]
 8003228:	e005      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003230:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003234:	6113      	str	r3, [r2, #16]
 8003236:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003238:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003248:	430b      	orrs	r3, r1
 800324a:	6713      	str	r3, [r2, #112]	@ 0x70
 800324c:	e00e      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800324e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003256:	e009      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003258:	58024400 	.word	0x58024400
 800325c:	58024800 	.word	0x58024800
 8003260:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f002 0301 	and.w	r3, r2, #1
 8003278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003282:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003286:	460b      	mov	r3, r1
 8003288:	4313      	orrs	r3, r2
 800328a:	f000 8089 	beq.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003294:	2b28      	cmp	r3, #40	@ 0x28
 8003296:	d86b      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003298:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	08003379 	.word	0x08003379
 80032a4:	08003371 	.word	0x08003371
 80032a8:	08003371 	.word	0x08003371
 80032ac:	08003371 	.word	0x08003371
 80032b0:	08003371 	.word	0x08003371
 80032b4:	08003371 	.word	0x08003371
 80032b8:	08003371 	.word	0x08003371
 80032bc:	08003371 	.word	0x08003371
 80032c0:	08003345 	.word	0x08003345
 80032c4:	08003371 	.word	0x08003371
 80032c8:	08003371 	.word	0x08003371
 80032cc:	08003371 	.word	0x08003371
 80032d0:	08003371 	.word	0x08003371
 80032d4:	08003371 	.word	0x08003371
 80032d8:	08003371 	.word	0x08003371
 80032dc:	08003371 	.word	0x08003371
 80032e0:	0800335b 	.word	0x0800335b
 80032e4:	08003371 	.word	0x08003371
 80032e8:	08003371 	.word	0x08003371
 80032ec:	08003371 	.word	0x08003371
 80032f0:	08003371 	.word	0x08003371
 80032f4:	08003371 	.word	0x08003371
 80032f8:	08003371 	.word	0x08003371
 80032fc:	08003371 	.word	0x08003371
 8003300:	08003379 	.word	0x08003379
 8003304:	08003371 	.word	0x08003371
 8003308:	08003371 	.word	0x08003371
 800330c:	08003371 	.word	0x08003371
 8003310:	08003371 	.word	0x08003371
 8003314:	08003371 	.word	0x08003371
 8003318:	08003371 	.word	0x08003371
 800331c:	08003371 	.word	0x08003371
 8003320:	08003379 	.word	0x08003379
 8003324:	08003371 	.word	0x08003371
 8003328:	08003371 	.word	0x08003371
 800332c:	08003371 	.word	0x08003371
 8003330:	08003371 	.word	0x08003371
 8003334:	08003371 	.word	0x08003371
 8003338:	08003371 	.word	0x08003371
 800333c:	08003371 	.word	0x08003371
 8003340:	08003379 	.word	0x08003379
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003348:	3308      	adds	r3, #8
 800334a:	2101      	movs	r1, #1
 800334c:	4618      	mov	r0, r3
 800334e:	f000 ffc3 	bl	80042d8 <RCCEx_PLL2_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003358:	e00f      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	3328      	adds	r3, #40	@ 0x28
 8003360:	2101      	movs	r1, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f001 f86a 	bl	800443c <RCCEx_PLL3_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800336e:	e004      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003382:	4bbf      	ldr	r3, [pc, #764]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003386:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003390:	4abb      	ldr	r2, [pc, #748]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003392:	430b      	orrs	r3, r1
 8003394:	6553      	str	r3, [r2, #84]	@ 0x54
 8003396:	e003      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f002 0302 	and.w	r3, r2, #2
 80033ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80033ba:	460b      	mov	r3, r1
 80033bc:	4313      	orrs	r3, r2
 80033be:	d041      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d824      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80033ca:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033ff 	.word	0x080033ff
 80033dc:	0800341d 	.word	0x0800341d
 80033e0:	0800341d 	.word	0x0800341d
 80033e4:	0800341d 	.word	0x0800341d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	3308      	adds	r3, #8
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 ff71 	bl	80042d8 <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033fc:	e00f      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	3328      	adds	r3, #40	@ 0x28
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f001 f818 	bl	800443c <RCCEx_PLL3_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003412:	e004      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800341c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003426:	4b96      	ldr	r3, [pc, #600]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342a:	f023 0107 	bic.w	r1, r3, #7
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003434:	4a92      	ldr	r2, [pc, #584]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003436:	430b      	orrs	r3, r1
 8003438:	6553      	str	r3, [r2, #84]	@ 0x54
 800343a:	e003      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f002 0304 	and.w	r3, r2, #4
 8003450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800345a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800345e:	460b      	mov	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	d044      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800346c:	2b05      	cmp	r3, #5
 800346e:	d825      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003470:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	080034c5 	.word	0x080034c5
 800347c:	08003491 	.word	0x08003491
 8003480:	080034a7 	.word	0x080034a7
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034c5 	.word	0x080034c5
 800348c:	080034c5 	.word	0x080034c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	3308      	adds	r3, #8
 8003496:	2101      	movs	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f000 ff1d 	bl	80042d8 <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034a4:	e00f      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	3328      	adds	r3, #40	@ 0x28
 80034ac:	2101      	movs	r1, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 ffc4 	bl	800443c <RCCEx_PLL3_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034ba:	e004      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034c2:	e000      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80034c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	f023 0107 	bic.w	r1, r3, #7
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034de:	4a68      	ldr	r2, [pc, #416]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e4:	e003      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f002 0320 	and.w	r3, r2, #32
 80034fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003508:	460b      	mov	r3, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	d055      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003516:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800351a:	d033      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003520:	d82c      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003526:	d02f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800352c:	d826      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800352e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003532:	d02b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003534:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003538:	d820      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800353a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800353e:	d012      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003544:	d81a      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d022      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800354a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800354e:	d115      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003554:	3308      	adds	r3, #8
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f000 febd 	bl	80042d8 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003564:	e015      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	3328      	adds	r3, #40	@ 0x28
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ff64 	bl	800443c <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800357a:	e00a      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003584:	bf00      	nop
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800359a:	4b39      	ldr	r3, [pc, #228]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800359c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	4a35      	ldr	r2, [pc, #212]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80035b0:	e003      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80035d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d058      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80035e6:	d033      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80035e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80035ec:	d82c      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f2:	d02f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f8:	d826      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035fe:	d02b      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003600:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003604:	d820      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003606:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800360a:	d012      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003610:	d81a      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d022      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361a:	d115      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	3308      	adds	r3, #8
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fe57 	bl	80042d8 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003630:	e015      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	3328      	adds	r3, #40	@ 0x28
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fefe 	bl	800443c <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800364e:	e006      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10e      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003676:	4a02      	ldr	r2, [pc, #8]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6593      	str	r3, [r2, #88]	@ 0x58
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800367e:	bf00      	nop
 8003680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003698:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d055      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80036b8:	d033      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80036ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80036be:	d82c      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c4:	d02f      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80036c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ca:	d826      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80036d0:	d02b      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80036d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80036d6:	d820      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036dc:	d012      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80036de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036e2:	d81a      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d022      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ec:	d115      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	3308      	adds	r3, #8
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fdee 	bl	80042d8 <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003702:	e015      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003708:	3328      	adds	r3, #40	@ 0x28
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fe95 	bl	800443c <RCCEx_PLL3_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003718:	e00a      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003722:	bf00      	nop
 8003724:	e004      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800372e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003738:	4ba1      	ldr	r3, [pc, #644]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003748:	4a9d      	ldr	r2, [pc, #628]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800374a:	430b      	orrs	r3, r1
 800374c:	6593      	str	r3, [r2, #88]	@ 0x58
 800374e:	e003      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f002 0308 	and.w	r3, r2, #8
 8003764:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800376e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003772:	460b      	mov	r3, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	d01e      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	3328      	adds	r3, #40	@ 0x28
 800378c:	2102      	movs	r1, #2
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fe54 	bl	800443c <RCCEx_PLL3_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80037a0:	4b87      	ldr	r3, [pc, #540]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b0:	4a83      	ldr	r2, [pc, #524]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b2:	430b      	orrs	r3, r1
 80037b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f002 0310 	and.w	r3, r2, #16
 80037c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80037d0:	460b      	mov	r3, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	d01e      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e2:	d10c      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	3328      	adds	r3, #40	@ 0x28
 80037ea:	2102      	movs	r1, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fe25 	bl	800443c <RCCEx_PLL3_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037fe:	4b70      	ldr	r3, [pc, #448]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003802:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800380e:	4a6c      	ldr	r2, [pc, #432]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800382a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	d03e      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800383c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003840:	d022      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003846:	d81b      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d00b      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003852:	e015      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	3308      	adds	r3, #8
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fd3b 	bl	80042d8 <RCCEx_PLL2_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003868:	e00f      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	3328      	adds	r3, #40	@ 0x28
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fde2 	bl	800443c <RCCEx_PLL3_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800387e:	e004      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003892:	4b4b      	ldr	r3, [pc, #300]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038a2:	4a47      	ldr	r2, [pc, #284]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038a8:	e003      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80038be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038c0:	2300      	movs	r3, #0
 80038c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80038c8:	460b      	mov	r3, r1
 80038ca:	4313      	orrs	r3, r2
 80038cc:	d03b      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038da:	d01f      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80038dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038e0:	d818      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80038e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038e6:	d003      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80038e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038ec:	d007      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80038ee:	e011      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f0:	4b33      	ldr	r3, [pc, #204]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	4a32      	ldr	r2, [pc, #200]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80038fc:	e00f      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	3328      	adds	r3, #40	@ 0x28
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fd98 	bl	800443c <RCCEx_PLL3_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003912:	e004      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800391c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003926:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	4a22      	ldr	r2, [pc, #136]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6553      	str	r3, [r2, #84]	@ 0x54
 800393c:	e003      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003952:	673b      	str	r3, [r7, #112]	@ 0x70
 8003954:	2300      	movs	r3, #0
 8003956:	677b      	str	r3, [r7, #116]	@ 0x74
 8003958:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800395c:	460b      	mov	r3, r1
 800395e:	4313      	orrs	r3, r2
 8003960:	d034      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003970:	d007      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003972:	e011      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003974:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	4a11      	ldr	r2, [pc, #68]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800397a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800397e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003980:	e00e      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	3308      	adds	r3, #8
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fca4 	bl	80042d8 <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800399e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b6:	4a02      	ldr	r2, [pc, #8]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039bc:	e006      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80039d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039da:	2300      	movs	r3, #0
 80039dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	d00c      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	3328      	adds	r3, #40	@ 0x28
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd23 	bl	800443c <RCCEx_PLL3_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a10:	2300      	movs	r3, #0
 8003a12:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	d038      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a2a:	d018      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003a2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a30:	d811      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a36:	d014      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3c:	d80b      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a46:	d106      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4bc3      	ldr	r3, [pc, #780]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	4ac2      	ldr	r2, [pc, #776]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a54:	e008      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a70:	4bb9      	ldr	r3, [pc, #740]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a74:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a80:	4ab5      	ldr	r2, [pc, #724]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aa2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003aac:	4baa      	ldr	r3, [pc, #680]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aba:	4aa7      	ldr	r2, [pc, #668]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003acc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ace:	2300      	movs	r3, #0
 8003ad0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ad2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003adc:	4b9e      	ldr	r3, [pc, #632]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003aec:	4a9a      	ldr	r2, [pc, #616]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aee:	430b      	orrs	r3, r1
 8003af0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b00:	2300      	movs	r3, #0
 8003b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b0e:	4b92      	ldr	r3, [pc, #584]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b12:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1c:	4a8e      	ldr	r2, [pc, #568]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b30:	2300      	movs	r3, #0
 8003b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b3e:	4b86      	ldr	r3, [pc, #536]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	4a85      	ldr	r2, [pc, #532]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b48:	6113      	str	r3, [r2, #16]
 8003b4a:	4b83      	ldr	r3, [pc, #524]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b4c:	6919      	ldr	r1, [r3, #16]
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003b56:	4a80      	ldr	r2, [pc, #512]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003b68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b78:	4b77      	ldr	r3, [pc, #476]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b86:	4a74      	ldr	r2, [pc, #464]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb8:	4a67      	ldr	r2, [pc, #412]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	d011      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	3308      	adds	r3, #8
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fb78 	bl	80042d8 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	2100      	movs	r1, #0
 8003c08:	6239      	str	r1, [r7, #32]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d011      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	3308      	adds	r3, #8
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fb58 	bl	80042d8 <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	2100      	movs	r1, #0
 8003c48:	61b9      	str	r1, [r7, #24]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d011      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	3308      	adds	r3, #8
 8003c60:	2102      	movs	r1, #2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fb38 	bl	80042d8 <RCCEx_PLL2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	2100      	movs	r1, #0
 8003c88:	6139      	str	r1, [r7, #16]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d011      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	3328      	adds	r3, #40	@ 0x28
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fbca 	bl	800443c <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	d011      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	3328      	adds	r3, #40	@ 0x28
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fbaa 	bl	800443c <RCCEx_PLL3_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	2100      	movs	r1, #0
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d14:	460b      	mov	r3, r1
 8003d16:	4313      	orrs	r3, r2
 8003d18:	d011      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1e:	3328      	adds	r3, #40	@ 0x28
 8003d20:	2102      	movs	r1, #2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fb8a 	bl	800443c <RCCEx_PLL3_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003d3e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003d52:	46bd      	mov	sp, r7
 8003d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d58:	58024400 	.word	0x58024400

08003d5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003d60:	f7fe fd54 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4904      	ldr	r1, [pc, #16]	@ (8003d84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	58024400 	.word	0x58024400
 8003d84:	0800b2c0 	.word	0x0800b2c0

08003d88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	@ 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d90:	4ba1      	ldr	r3, [pc, #644]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003d9a:	4b9f      	ldr	r3, [pc, #636]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9e:	0b1b      	lsrs	r3, r3, #12
 8003da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003da4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003da6:	4b9c      	ldr	r3, [pc, #624]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003db2:	4b99      	ldr	r3, [pc, #612]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	08db      	lsrs	r3, r3, #3
 8003db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8111 	beq.w	8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	f000 8083 	beq.w	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	f200 80a1 	bhi.w	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d056      	beq.n	8003ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003df2:	e099      	b.n	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003df4:	4b88      	ldr	r3, [pc, #544]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02d      	beq.n	8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e00:	4b85      	ldr	r3, [pc, #532]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	08db      	lsrs	r3, r3, #3
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	4a84      	ldr	r2, [pc, #528]	@ (800401c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e5a:	e087      	b.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004024 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e9e:	e065      	b.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb2:	4b59      	ldr	r3, [pc, #356]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ec6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee2:	e043      	b.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800402c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	4b48      	ldr	r3, [pc, #288]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f26:	e021      	b.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3a:	4b37      	ldr	r3, [pc, #220]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	0a5b      	lsrs	r3, r3, #9
 8003f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f92:	ee17 2a90 	vmov	r2, s15
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	0c1b      	lsrs	r3, r3, #16
 8003fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fa4:	ee07 3a90 	vmov	s15, r3
 8003fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc0:	ee17 2a90 	vmov	r2, s15
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003fc8:	4b13      	ldr	r3, [pc, #76]	@ (8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	0e1b      	lsrs	r3, r3, #24
 8003fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fe2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fee:	ee17 2a90 	vmov	r2, s15
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ff6:	e008      	b.n	800400a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
}
 800400a:	bf00      	nop
 800400c:	3724      	adds	r7, #36	@ 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	58024400 	.word	0x58024400
 800401c:	03d09000 	.word	0x03d09000
 8004020:	46000000 	.word	0x46000000
 8004024:	4c742400 	.word	0x4c742400
 8004028:	4a742400 	.word	0x4a742400
 800402c:	4af42400 	.word	0x4af42400

08004030 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	@ 0x24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004038:	4ba1      	ldr	r3, [pc, #644]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004042:	4b9f      	ldr	r3, [pc, #636]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	0d1b      	lsrs	r3, r3, #20
 8004048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800404c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800404e:	4b9c      	ldr	r3, [pc, #624]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800405a:	4b99      	ldr	r3, [pc, #612]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	08db      	lsrs	r3, r3, #3
 8004060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004072:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8111 	beq.w	80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b02      	cmp	r3, #2
 8004082:	f000 8083 	beq.w	800418c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b02      	cmp	r3, #2
 800408a:	f200 80a1 	bhi.w	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d056      	beq.n	8004148 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800409a:	e099      	b.n	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800409c:	4b88      	ldr	r3, [pc, #544]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02d      	beq.n	8004104 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040a8:	4b85      	ldr	r3, [pc, #532]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	08db      	lsrs	r3, r3, #3
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	4a84      	ldr	r2, [pc, #528]	@ (80042c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
 80040b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d2:	4b7b      	ldr	r3, [pc, #492]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004102:	e087      	b.n	8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004116:	4b6a      	ldr	r3, [pc, #424]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004126:	ed97 6a03 	vldr	s12, [r7, #12]
 800412a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004146:	e065      	b.n	8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415a:	4b59      	ldr	r3, [pc, #356]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416a:	ed97 6a03 	vldr	s12, [r7, #12]
 800416e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800418a:	e043      	b.n	8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419e:	4b48      	ldr	r3, [pc, #288]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ce:	e021      	b.n	8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e2:	4b37      	ldr	r3, [pc, #220]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004212:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004214:	4b2a      	ldr	r3, [pc, #168]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	0a5b      	lsrs	r3, r3, #9
 800421a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800422a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800422e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423a:	ee17 2a90 	vmov	r2, s15
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004242:	4b1f      	ldr	r3, [pc, #124]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004254:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800425c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004268:	ee17 2a90 	vmov	r2, s15
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004270:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	0e1b      	lsrs	r3, r3, #24
 8004276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800428a:	edd7 6a07 	vldr	s13, [r7, #28]
 800428e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004296:	ee17 2a90 	vmov	r2, s15
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800429e:	e008      	b.n	80042b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
}
 80042b2:	bf00      	nop
 80042b4:	3724      	adds	r7, #36	@ 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	58024400 	.word	0x58024400
 80042c4:	03d09000 	.word	0x03d09000
 80042c8:	46000000 	.word	0x46000000
 80042cc:	4c742400 	.word	0x4c742400
 80042d0:	4a742400 	.word	0x4a742400
 80042d4:	4af42400 	.word	0x4af42400

080042d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042e6:	4b53      	ldr	r3, [pc, #332]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d101      	bne.n	80042f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e099      	b.n	800442a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80042fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004302:	f7fc ff95 	bl	8001230 <HAL_GetTick>
 8004306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004308:	e008      	b.n	800431c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800430a:	f7fc ff91 	bl	8001230 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e086      	b.n	800442a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800431c:	4b45      	ldr	r3, [pc, #276]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004328:	4b42      	ldr	r3, [pc, #264]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	493f      	ldr	r1, [pc, #252]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	628b      	str	r3, [r1, #40]	@ 0x28
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	3b01      	subs	r3, #1
 8004342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	3b01      	subs	r3, #1
 800434c:	025b      	lsls	r3, r3, #9
 800434e:	b29b      	uxth	r3, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	3b01      	subs	r3, #1
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800436c:	4931      	ldr	r1, [pc, #196]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004372:	4b30      	ldr	r3, [pc, #192]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	492d      	ldr	r1, [pc, #180]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004384:	4b2b      	ldr	r3, [pc, #172]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	f023 0220 	bic.w	r2, r3, #32
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	4928      	ldr	r1, [pc, #160]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004396:	4b27      	ldr	r3, [pc, #156]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	4a26      	ldr	r2, [pc, #152]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 800439c:	f023 0310 	bic.w	r3, r3, #16
 80043a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043a2:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a6:	4b24      	ldr	r3, [pc, #144]	@ (8004438 <RCCEx_PLL2_Config+0x160>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	69d2      	ldr	r2, [r2, #28]
 80043ae:	00d2      	lsls	r2, r2, #3
 80043b0:	4920      	ldr	r1, [pc, #128]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043bc:	f043 0310 	orr.w	r3, r3, #16
 80043c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043d4:	e00f      	b.n	80043f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d106      	bne.n	80043ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043dc:	4b15      	ldr	r3, [pc, #84]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043e8:	e005      	b.n	80043f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043ea:	4b12      	ldr	r3, [pc, #72]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	4a11      	ldr	r2, [pc, #68]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 80043fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004402:	f7fc ff15 	bl	8001230 <HAL_GetTick>
 8004406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004408:	e008      	b.n	800441c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800440a:	f7fc ff11 	bl	8001230 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e006      	b.n	800442a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800441c:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <RCCEx_PLL2_Config+0x15c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400
 8004438:	ffff0007 	.word	0xffff0007

0800443c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800444a:	4b53      	ldr	r3, [pc, #332]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 800444c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b03      	cmp	r3, #3
 8004454:	d101      	bne.n	800445a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e099      	b.n	800458e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800445a:	4b4f      	ldr	r3, [pc, #316]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a4e      	ldr	r2, [pc, #312]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004466:	f7fc fee3 	bl	8001230 <HAL_GetTick>
 800446a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800446c:	e008      	b.n	8004480 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800446e:	f7fc fedf 	bl	8001230 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e086      	b.n	800458e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004480:	4b45      	ldr	r3, [pc, #276]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800448c:	4b42      	ldr	r3, [pc, #264]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	051b      	lsls	r3, r3, #20
 800449a:	493f      	ldr	r1, [pc, #252]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 800449c:	4313      	orrs	r3, r2
 800449e:	628b      	str	r3, [r1, #40]	@ 0x28
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	025b      	lsls	r3, r3, #9
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044d0:	4931      	ldr	r1, [pc, #196]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044d6:	4b30      	ldr	r3, [pc, #192]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	492d      	ldr	r1, [pc, #180]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	4928      	ldr	r1, [pc, #160]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044fa:	4b27      	ldr	r3, [pc, #156]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	4a26      	ldr	r2, [pc, #152]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004504:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004506:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800450a:	4b24      	ldr	r3, [pc, #144]	@ (800459c <RCCEx_PLL3_Config+0x160>)
 800450c:	4013      	ands	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	69d2      	ldr	r2, [r2, #28]
 8004512:	00d2      	lsls	r2, r2, #3
 8004514:	4920      	ldr	r1, [pc, #128]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004516:	4313      	orrs	r3, r2
 8004518:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800451a:	4b1f      	ldr	r3, [pc, #124]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004524:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800452c:	4b1a      	ldr	r3, [pc, #104]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004532:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004536:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004538:	e00f      	b.n	800455a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004540:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	4a14      	ldr	r2, [pc, #80]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004546:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800454a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800454c:	e005      	b.n	800455a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800454e:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	4a11      	ldr	r2, [pc, #68]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004554:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004558:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800455a:	4b0f      	ldr	r3, [pc, #60]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a0e      	ldr	r2, [pc, #56]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004566:	f7fc fe63 	bl	8001230 <HAL_GetTick>
 800456a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800456c:	e008      	b.n	8004580 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800456e:	f7fc fe5f 	bl	8001230 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e006      	b.n	800458e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <RCCEx_PLL3_Config+0x15c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	58024400 	.word	0x58024400
 800459c:	ffff0007 	.word	0xffff0007

080045a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e049      	b.n	8004646 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fbd4 	bl	8000d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 fa4e 	bl	8004a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d001      	beq.n	8004668 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e04c      	b.n	8004702 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a26      	ldr	r2, [pc, #152]	@ (8004710 <HAL_TIM_Base_Start+0xc0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d022      	beq.n	80046c0 <HAL_TIM_Base_Start+0x70>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004682:	d01d      	beq.n	80046c0 <HAL_TIM_Base_Start+0x70>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a22      	ldr	r2, [pc, #136]	@ (8004714 <HAL_TIM_Base_Start+0xc4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d018      	beq.n	80046c0 <HAL_TIM_Base_Start+0x70>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a21      	ldr	r2, [pc, #132]	@ (8004718 <HAL_TIM_Base_Start+0xc8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_TIM_Base_Start+0x70>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1f      	ldr	r2, [pc, #124]	@ (800471c <HAL_TIM_Base_Start+0xcc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_TIM_Base_Start+0x70>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004720 <HAL_TIM_Base_Start+0xd0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_TIM_Base_Start+0x70>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <HAL_TIM_Base_Start+0xd4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_TIM_Base_Start+0x70>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <HAL_TIM_Base_Start+0xd8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d115      	bne.n	80046ec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	4b19      	ldr	r3, [pc, #100]	@ (800472c <HAL_TIM_Base_Start+0xdc>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d015      	beq.n	80046fe <HAL_TIM_Base_Start+0xae>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d8:	d011      	beq.n	80046fe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ea:	e008      	b.n	80046fe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e000      	b.n	8004700 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40010000 	.word	0x40010000
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800
 800471c:	40000c00 	.word	0x40000c00
 8004720:	40010400 	.word	0x40010400
 8004724:	40001800 	.word	0x40001800
 8004728:	40014000 	.word	0x40014000
 800472c:	00010007 	.word	0x00010007

08004730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d001      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e054      	b.n	80047f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a26      	ldr	r2, [pc, #152]	@ (8004800 <HAL_TIM_Base_Start_IT+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d022      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004772:	d01d      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a22      	ldr	r2, [pc, #136]	@ (8004804 <HAL_TIM_Base_Start_IT+0xd4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d018      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a21      	ldr	r2, [pc, #132]	@ (8004808 <HAL_TIM_Base_Start_IT+0xd8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d013      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <HAL_TIM_Base_Start_IT+0xdc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00e      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1e      	ldr	r2, [pc, #120]	@ (8004810 <HAL_TIM_Base_Start_IT+0xe0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <HAL_TIM_Base_Start_IT+0xe4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <HAL_TIM_Base_Start_IT+0xe8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d115      	bne.n	80047dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	4b19      	ldr	r3, [pc, #100]	@ (800481c <HAL_TIM_Base_Start_IT+0xec>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d015      	beq.n	80047ee <HAL_TIM_Base_Start_IT+0xbe>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c8:	d011      	beq.n	80047ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	e008      	b.n	80047ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e000      	b.n	80047f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40010400 	.word	0x40010400
 8004814:	40001800 	.word	0x40001800
 8004818:	40014000 	.word	0x40014000
 800481c:	00010007 	.word	0x00010007

08004820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0202 	mvn.w	r2, #2
 8004854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8e9 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8db 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f8ec 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0204 	mvn.w	r2, #4
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8c3 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8b5 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8c6 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0208 	mvn.w	r2, #8
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f89d 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f88f 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8a0 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0210 	mvn.w	r2, #16
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2208      	movs	r2, #8
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f877 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f869 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f87a 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0201 	mvn.w	r2, #1
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc f9be 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f913 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00c      	beq.n	80049de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f90b 	bl	8004bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00c      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f834 	bl	8004a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0220 	mvn.w	r2, #32
 8004a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f8d3 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a46      	ldr	r2, [pc, #280]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9e:	d00f      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a43      	ldr	r2, [pc, #268]	@ (8004bb0 <TIM_Base_SetConfig+0x130>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00b      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a42      	ldr	r2, [pc, #264]	@ (8004bb4 <TIM_Base_SetConfig+0x134>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a41      	ldr	r2, [pc, #260]	@ (8004bb8 <TIM_Base_SetConfig+0x138>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a40      	ldr	r2, [pc, #256]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d108      	bne.n	8004ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a35      	ldr	r2, [pc, #212]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01f      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d01b      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a32      	ldr	r2, [pc, #200]	@ (8004bb0 <TIM_Base_SetConfig+0x130>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d017      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a31      	ldr	r2, [pc, #196]	@ (8004bb4 <TIM_Base_SetConfig+0x134>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a30      	ldr	r2, [pc, #192]	@ (8004bb8 <TIM_Base_SetConfig+0x138>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00f      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2f      	ldr	r2, [pc, #188]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00b      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc0 <TIM_Base_SetConfig+0x140>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc4 <TIM_Base_SetConfig+0x144>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc8 <TIM_Base_SetConfig+0x148>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d108      	bne.n	8004b2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a17      	ldr	r2, [pc, #92]	@ (8004bc0 <TIM_Base_SetConfig+0x140>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a16      	ldr	r2, [pc, #88]	@ (8004bc4 <TIM_Base_SetConfig+0x144>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a15      	ldr	r2, [pc, #84]	@ (8004bc8 <TIM_Base_SetConfig+0x148>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d103      	bne.n	8004b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f023 0201 	bic.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e042      	b.n	8004ca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fc f8c3 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	@ 0x24
 8004c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fd90 	bl	8005778 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f825 	bl	8004ca8 <UART_SetConfig>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e01b      	b.n	8004ca0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fe0f 	bl	80058bc <UART_CheckIdleState>
 8004c9e:	4603      	mov	r3, r0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b092      	sub	sp, #72	@ 0x48
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4bbe      	ldr	r3, [pc, #760]	@ (8004fd0 <UART_SetConfig+0x328>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4ab3      	ldr	r2, [pc, #716]	@ (8004fd4 <UART_SetConfig+0x32c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d10:	4313      	orrs	r3, r2
 8004d12:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	4baf      	ldr	r3, [pc, #700]	@ (8004fd8 <UART_SetConfig+0x330>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	f023 010f 	bic.w	r1, r3, #15
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4aa6      	ldr	r2, [pc, #664]	@ (8004fdc <UART_SetConfig+0x334>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d177      	bne.n	8004e38 <UART_SetConfig+0x190>
 8004d48:	4ba5      	ldr	r3, [pc, #660]	@ (8004fe0 <UART_SetConfig+0x338>)
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d50:	2b28      	cmp	r3, #40	@ 0x28
 8004d52:	d86d      	bhi.n	8004e30 <UART_SetConfig+0x188>
 8004d54:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <UART_SetConfig+0xb4>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004e01 	.word	0x08004e01
 8004d60:	08004e31 	.word	0x08004e31
 8004d64:	08004e31 	.word	0x08004e31
 8004d68:	08004e31 	.word	0x08004e31
 8004d6c:	08004e31 	.word	0x08004e31
 8004d70:	08004e31 	.word	0x08004e31
 8004d74:	08004e31 	.word	0x08004e31
 8004d78:	08004e31 	.word	0x08004e31
 8004d7c:	08004e09 	.word	0x08004e09
 8004d80:	08004e31 	.word	0x08004e31
 8004d84:	08004e31 	.word	0x08004e31
 8004d88:	08004e31 	.word	0x08004e31
 8004d8c:	08004e31 	.word	0x08004e31
 8004d90:	08004e31 	.word	0x08004e31
 8004d94:	08004e31 	.word	0x08004e31
 8004d98:	08004e31 	.word	0x08004e31
 8004d9c:	08004e11 	.word	0x08004e11
 8004da0:	08004e31 	.word	0x08004e31
 8004da4:	08004e31 	.word	0x08004e31
 8004da8:	08004e31 	.word	0x08004e31
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004e31 	.word	0x08004e31
 8004db4:	08004e31 	.word	0x08004e31
 8004db8:	08004e31 	.word	0x08004e31
 8004dbc:	08004e19 	.word	0x08004e19
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004e31 	.word	0x08004e31
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e31 	.word	0x08004e31
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e21 	.word	0x08004e21
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004e31 	.word	0x08004e31
 8004dec:	08004e31 	.word	0x08004e31
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
 8004df8:	08004e31 	.word	0x08004e31
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e06:	e222      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0e:	e21e      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e16:	e21a      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e1e:	e216      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e20:	2320      	movs	r3, #32
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e26:	e212      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e28:	2340      	movs	r3, #64	@ 0x40
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2e:	e20e      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e30:	2380      	movs	r3, #128	@ 0x80
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e36:	e20a      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a69      	ldr	r2, [pc, #420]	@ (8004fe4 <UART_SetConfig+0x33c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d130      	bne.n	8004ea4 <UART_SetConfig+0x1fc>
 8004e42:	4b67      	ldr	r3, [pc, #412]	@ (8004fe0 <UART_SetConfig+0x338>)
 8004e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	d826      	bhi.n	8004e9c <UART_SetConfig+0x1f4>
 8004e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <UART_SetConfig+0x1ac>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e6d 	.word	0x08004e6d
 8004e58:	08004e75 	.word	0x08004e75
 8004e5c:	08004e7d 	.word	0x08004e7d
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e72:	e1ec      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e74:	2304      	movs	r3, #4
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e7a:	e1e8      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e82:	e1e4      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e84:	2310      	movs	r3, #16
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8a:	e1e0      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e92:	e1dc      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e94:	2340      	movs	r3, #64	@ 0x40
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e9a:	e1d8      	b.n	800524e <UART_SetConfig+0x5a6>
 8004e9c:	2380      	movs	r3, #128	@ 0x80
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea2:	e1d4      	b.n	800524e <UART_SetConfig+0x5a6>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8004fe8 <UART_SetConfig+0x340>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d130      	bne.n	8004f10 <UART_SetConfig+0x268>
 8004eae:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe0 <UART_SetConfig+0x338>)
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d826      	bhi.n	8004f08 <UART_SetConfig+0x260>
 8004eba:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec0 <UART_SetConfig+0x218>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ed9 	.word	0x08004ed9
 8004ec4:	08004ee1 	.word	0x08004ee1
 8004ec8:	08004ee9 	.word	0x08004ee9
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ede:	e1b6      	b.n	800524e <UART_SetConfig+0x5a6>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee6:	e1b2      	b.n	800524e <UART_SetConfig+0x5a6>
 8004ee8:	2308      	movs	r3, #8
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eee:	e1ae      	b.n	800524e <UART_SetConfig+0x5a6>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ef6:	e1aa      	b.n	800524e <UART_SetConfig+0x5a6>
 8004ef8:	2320      	movs	r3, #32
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efe:	e1a6      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f00:	2340      	movs	r3, #64	@ 0x40
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f06:	e1a2      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0e:	e19e      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a35      	ldr	r2, [pc, #212]	@ (8004fec <UART_SetConfig+0x344>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d130      	bne.n	8004f7c <UART_SetConfig+0x2d4>
 8004f1a:	4b31      	ldr	r3, [pc, #196]	@ (8004fe0 <UART_SetConfig+0x338>)
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b05      	cmp	r3, #5
 8004f24:	d826      	bhi.n	8004f74 <UART_SetConfig+0x2cc>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <UART_SetConfig+0x284>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f45 	.word	0x08004f45
 8004f30:	08004f4d 	.word	0x08004f4d
 8004f34:	08004f55 	.word	0x08004f55
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4a:	e180      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f52:	e17c      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5a:	e178      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f62:	e174      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f64:	2320      	movs	r3, #32
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6a:	e170      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f6c:	2340      	movs	r3, #64	@ 0x40
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f72:	e16c      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f74:	2380      	movs	r3, #128	@ 0x80
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7a:	e168      	b.n	800524e <UART_SetConfig+0x5a6>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <UART_SetConfig+0x348>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d142      	bne.n	800500c <UART_SetConfig+0x364>
 8004f86:	4b16      	ldr	r3, [pc, #88]	@ (8004fe0 <UART_SetConfig+0x338>)
 8004f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d838      	bhi.n	8005004 <UART_SetConfig+0x35c>
 8004f92:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <UART_SetConfig+0x2f0>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fb1 	.word	0x08004fb1
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004ff5 	.word	0x08004ff5
 8004fac:	08004ffd 	.word	0x08004ffd
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb6:	e14a      	b.n	800524e <UART_SetConfig+0x5a6>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fbe:	e146      	b.n	800524e <UART_SetConfig+0x5a6>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc6:	e142      	b.n	800524e <UART_SetConfig+0x5a6>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fce:	e13e      	b.n	800524e <UART_SetConfig+0x5a6>
 8004fd0:	cfff69f3 	.word	0xcfff69f3
 8004fd4:	58000c00 	.word	0x58000c00
 8004fd8:	11fff4ff 	.word	0x11fff4ff
 8004fdc:	40011000 	.word	0x40011000
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	40004400 	.word	0x40004400
 8004fe8:	40004800 	.word	0x40004800
 8004fec:	40004c00 	.word	0x40004c00
 8004ff0:	40005000 	.word	0x40005000
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffa:	e128      	b.n	800524e <UART_SetConfig+0x5a6>
 8004ffc:	2340      	movs	r3, #64	@ 0x40
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005002:	e124      	b.n	800524e <UART_SetConfig+0x5a6>
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500a:	e120      	b.n	800524e <UART_SetConfig+0x5a6>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4acb      	ldr	r2, [pc, #812]	@ (8005340 <UART_SetConfig+0x698>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d176      	bne.n	8005104 <UART_SetConfig+0x45c>
 8005016:	4bcb      	ldr	r3, [pc, #812]	@ (8005344 <UART_SetConfig+0x69c>)
 8005018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800501e:	2b28      	cmp	r3, #40	@ 0x28
 8005020:	d86c      	bhi.n	80050fc <UART_SetConfig+0x454>
 8005022:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <UART_SetConfig+0x380>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	080050cd 	.word	0x080050cd
 800502c:	080050fd 	.word	0x080050fd
 8005030:	080050fd 	.word	0x080050fd
 8005034:	080050fd 	.word	0x080050fd
 8005038:	080050fd 	.word	0x080050fd
 800503c:	080050fd 	.word	0x080050fd
 8005040:	080050fd 	.word	0x080050fd
 8005044:	080050fd 	.word	0x080050fd
 8005048:	080050d5 	.word	0x080050d5
 800504c:	080050fd 	.word	0x080050fd
 8005050:	080050fd 	.word	0x080050fd
 8005054:	080050fd 	.word	0x080050fd
 8005058:	080050fd 	.word	0x080050fd
 800505c:	080050fd 	.word	0x080050fd
 8005060:	080050fd 	.word	0x080050fd
 8005064:	080050fd 	.word	0x080050fd
 8005068:	080050dd 	.word	0x080050dd
 800506c:	080050fd 	.word	0x080050fd
 8005070:	080050fd 	.word	0x080050fd
 8005074:	080050fd 	.word	0x080050fd
 8005078:	080050fd 	.word	0x080050fd
 800507c:	080050fd 	.word	0x080050fd
 8005080:	080050fd 	.word	0x080050fd
 8005084:	080050fd 	.word	0x080050fd
 8005088:	080050e5 	.word	0x080050e5
 800508c:	080050fd 	.word	0x080050fd
 8005090:	080050fd 	.word	0x080050fd
 8005094:	080050fd 	.word	0x080050fd
 8005098:	080050fd 	.word	0x080050fd
 800509c:	080050fd 	.word	0x080050fd
 80050a0:	080050fd 	.word	0x080050fd
 80050a4:	080050fd 	.word	0x080050fd
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	080050fd 	.word	0x080050fd
 80050b4:	080050fd 	.word	0x080050fd
 80050b8:	080050fd 	.word	0x080050fd
 80050bc:	080050fd 	.word	0x080050fd
 80050c0:	080050fd 	.word	0x080050fd
 80050c4:	080050fd 	.word	0x080050fd
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e0bc      	b.n	800524e <UART_SetConfig+0x5a6>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e0b8      	b.n	800524e <UART_SetConfig+0x5a6>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e0b4      	b.n	800524e <UART_SetConfig+0x5a6>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e0b0      	b.n	800524e <UART_SetConfig+0x5a6>
 80050ec:	2320      	movs	r3, #32
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f2:	e0ac      	b.n	800524e <UART_SetConfig+0x5a6>
 80050f4:	2340      	movs	r3, #64	@ 0x40
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fa:	e0a8      	b.n	800524e <UART_SetConfig+0x5a6>
 80050fc:	2380      	movs	r3, #128	@ 0x80
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005102:	e0a4      	b.n	800524e <UART_SetConfig+0x5a6>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a8f      	ldr	r2, [pc, #572]	@ (8005348 <UART_SetConfig+0x6a0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d130      	bne.n	8005170 <UART_SetConfig+0x4c8>
 800510e:	4b8d      	ldr	r3, [pc, #564]	@ (8005344 <UART_SetConfig+0x69c>)
 8005110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b05      	cmp	r3, #5
 8005118:	d826      	bhi.n	8005168 <UART_SetConfig+0x4c0>
 800511a:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <UART_SetConfig+0x478>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005139 	.word	0x08005139
 8005124:	08005141 	.word	0x08005141
 8005128:	08005149 	.word	0x08005149
 800512c:	08005151 	.word	0x08005151
 8005130:	08005159 	.word	0x08005159
 8005134:	08005161 	.word	0x08005161
 8005138:	2300      	movs	r3, #0
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e086      	b.n	800524e <UART_SetConfig+0x5a6>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005146:	e082      	b.n	800524e <UART_SetConfig+0x5a6>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514e:	e07e      	b.n	800524e <UART_SetConfig+0x5a6>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005156:	e07a      	b.n	800524e <UART_SetConfig+0x5a6>
 8005158:	2320      	movs	r3, #32
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515e:	e076      	b.n	800524e <UART_SetConfig+0x5a6>
 8005160:	2340      	movs	r3, #64	@ 0x40
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005166:	e072      	b.n	800524e <UART_SetConfig+0x5a6>
 8005168:	2380      	movs	r3, #128	@ 0x80
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516e:	e06e      	b.n	800524e <UART_SetConfig+0x5a6>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a75      	ldr	r2, [pc, #468]	@ (800534c <UART_SetConfig+0x6a4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d130      	bne.n	80051dc <UART_SetConfig+0x534>
 800517a:	4b72      	ldr	r3, [pc, #456]	@ (8005344 <UART_SetConfig+0x69c>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b05      	cmp	r3, #5
 8005184:	d826      	bhi.n	80051d4 <UART_SetConfig+0x52c>
 8005186:	a201      	add	r2, pc, #4	@ (adr r2, 800518c <UART_SetConfig+0x4e4>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051a5 	.word	0x080051a5
 8005190:	080051ad 	.word	0x080051ad
 8005194:	080051b5 	.word	0x080051b5
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051aa:	e050      	b.n	800524e <UART_SetConfig+0x5a6>
 80051ac:	2304      	movs	r3, #4
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b2:	e04c      	b.n	800524e <UART_SetConfig+0x5a6>
 80051b4:	2308      	movs	r3, #8
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ba:	e048      	b.n	800524e <UART_SetConfig+0x5a6>
 80051bc:	2310      	movs	r3, #16
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c2:	e044      	b.n	800524e <UART_SetConfig+0x5a6>
 80051c4:	2320      	movs	r3, #32
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ca:	e040      	b.n	800524e <UART_SetConfig+0x5a6>
 80051cc:	2340      	movs	r3, #64	@ 0x40
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d2:	e03c      	b.n	800524e <UART_SetConfig+0x5a6>
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051da:	e038      	b.n	800524e <UART_SetConfig+0x5a6>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5b      	ldr	r2, [pc, #364]	@ (8005350 <UART_SetConfig+0x6a8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d130      	bne.n	8005248 <UART_SetConfig+0x5a0>
 80051e6:	4b57      	ldr	r3, [pc, #348]	@ (8005344 <UART_SetConfig+0x69c>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	d826      	bhi.n	8005240 <UART_SetConfig+0x598>
 80051f2:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <UART_SetConfig+0x550>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005211 	.word	0x08005211
 80051fc:	08005219 	.word	0x08005219
 8005200:	08005221 	.word	0x08005221
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
 8005210:	2302      	movs	r3, #2
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e01a      	b.n	800524e <UART_SetConfig+0x5a6>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521e:	e016      	b.n	800524e <UART_SetConfig+0x5a6>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005226:	e012      	b.n	800524e <UART_SetConfig+0x5a6>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522e:	e00e      	b.n	800524e <UART_SetConfig+0x5a6>
 8005230:	2320      	movs	r3, #32
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005236:	e00a      	b.n	800524e <UART_SetConfig+0x5a6>
 8005238:	2340      	movs	r3, #64	@ 0x40
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523e:	e006      	b.n	800524e <UART_SetConfig+0x5a6>
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005246:	e002      	b.n	800524e <UART_SetConfig+0x5a6>
 8005248:	2380      	movs	r3, #128	@ 0x80
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a3f      	ldr	r2, [pc, #252]	@ (8005350 <UART_SetConfig+0x6a8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	f040 80f8 	bne.w	800544a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800525a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800525e:	2b20      	cmp	r3, #32
 8005260:	dc46      	bgt.n	80052f0 <UART_SetConfig+0x648>
 8005262:	2b02      	cmp	r3, #2
 8005264:	f2c0 8082 	blt.w	800536c <UART_SetConfig+0x6c4>
 8005268:	3b02      	subs	r3, #2
 800526a:	2b1e      	cmp	r3, #30
 800526c:	d87e      	bhi.n	800536c <UART_SetConfig+0x6c4>
 800526e:	a201      	add	r2, pc, #4	@ (adr r2, 8005274 <UART_SetConfig+0x5cc>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	080052f7 	.word	0x080052f7
 8005278:	0800536d 	.word	0x0800536d
 800527c:	080052ff 	.word	0x080052ff
 8005280:	0800536d 	.word	0x0800536d
 8005284:	0800536d 	.word	0x0800536d
 8005288:	0800536d 	.word	0x0800536d
 800528c:	0800530f 	.word	0x0800530f
 8005290:	0800536d 	.word	0x0800536d
 8005294:	0800536d 	.word	0x0800536d
 8005298:	0800536d 	.word	0x0800536d
 800529c:	0800536d 	.word	0x0800536d
 80052a0:	0800536d 	.word	0x0800536d
 80052a4:	0800536d 	.word	0x0800536d
 80052a8:	0800536d 	.word	0x0800536d
 80052ac:	0800531f 	.word	0x0800531f
 80052b0:	0800536d 	.word	0x0800536d
 80052b4:	0800536d 	.word	0x0800536d
 80052b8:	0800536d 	.word	0x0800536d
 80052bc:	0800536d 	.word	0x0800536d
 80052c0:	0800536d 	.word	0x0800536d
 80052c4:	0800536d 	.word	0x0800536d
 80052c8:	0800536d 	.word	0x0800536d
 80052cc:	0800536d 	.word	0x0800536d
 80052d0:	0800536d 	.word	0x0800536d
 80052d4:	0800536d 	.word	0x0800536d
 80052d8:	0800536d 	.word	0x0800536d
 80052dc:	0800536d 	.word	0x0800536d
 80052e0:	0800536d 	.word	0x0800536d
 80052e4:	0800536d 	.word	0x0800536d
 80052e8:	0800536d 	.word	0x0800536d
 80052ec:	0800535f 	.word	0x0800535f
 80052f0:	2b40      	cmp	r3, #64	@ 0x40
 80052f2:	d037      	beq.n	8005364 <UART_SetConfig+0x6bc>
 80052f4:	e03a      	b.n	800536c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80052f6:	f7fe fd31 	bl	8003d5c <HAL_RCCEx_GetD3PCLK1Freq>
 80052fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052fc:	e03c      	b.n	8005378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fd40 	bl	8003d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800530c:	e034      	b.n	8005378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800530e:	f107 0318 	add.w	r3, r7, #24
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fe8c 	bl	8004030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800531c:	e02c      	b.n	8005378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <UART_SetConfig+0x69c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d016      	beq.n	8005358 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800532a:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <UART_SetConfig+0x69c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	08db      	lsrs	r3, r3, #3
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	4a07      	ldr	r2, [pc, #28]	@ (8005354 <UART_SetConfig+0x6ac>)
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800533c:	e01c      	b.n	8005378 <UART_SetConfig+0x6d0>
 800533e:	bf00      	nop
 8005340:	40011400 	.word	0x40011400
 8005344:	58024400 	.word	0x58024400
 8005348:	40007800 	.word	0x40007800
 800534c:	40007c00 	.word	0x40007c00
 8005350:	58000c00 	.word	0x58000c00
 8005354:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005358:	4b9d      	ldr	r3, [pc, #628]	@ (80055d0 <UART_SetConfig+0x928>)
 800535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800535c:	e00c      	b.n	8005378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800535e:	4b9d      	ldr	r3, [pc, #628]	@ (80055d4 <UART_SetConfig+0x92c>)
 8005360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005362:	e009      	b.n	8005378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800536a:	e005      	b.n	8005378 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005376:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 81de 	beq.w	800573c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	4a94      	ldr	r2, [pc, #592]	@ (80055d8 <UART_SetConfig+0x930>)
 8005386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800538a:	461a      	mov	r2, r3
 800538c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005392:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d305      	bcc.n	80053b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d903      	bls.n	80053b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80053b6:	e1c1      	b.n	800573c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ba:	2200      	movs	r2, #0
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	60fa      	str	r2, [r7, #12]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	4a84      	ldr	r2, [pc, #528]	@ (80055d8 <UART_SetConfig+0x930>)
 80053c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2200      	movs	r2, #0
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053da:	f7fa ffd9 	bl	8000390 <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4610      	mov	r0, r2
 80053e4:	4619      	mov	r1, r3
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	020b      	lsls	r3, r1, #8
 80053f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053f4:	0202      	lsls	r2, r0, #8
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	6849      	ldr	r1, [r1, #4]
 80053fa:	0849      	lsrs	r1, r1, #1
 80053fc:	2000      	movs	r0, #0
 80053fe:	460c      	mov	r4, r1
 8005400:	4605      	mov	r5, r0
 8005402:	eb12 0804 	adds.w	r8, r2, r4
 8005406:	eb43 0905 	adc.w	r9, r3, r5
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	469a      	mov	sl, r3
 8005412:	4693      	mov	fp, r2
 8005414:	4652      	mov	r2, sl
 8005416:	465b      	mov	r3, fp
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fa ffb8 	bl	8000390 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4613      	mov	r3, r2
 8005426:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800542e:	d308      	bcc.n	8005442 <UART_SetConfig+0x79a>
 8005430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005436:	d204      	bcs.n	8005442 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800543e:	60da      	str	r2, [r3, #12]
 8005440:	e17c      	b.n	800573c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005448:	e178      	b.n	800573c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005452:	f040 80c5 	bne.w	80055e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005456:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800545a:	2b20      	cmp	r3, #32
 800545c:	dc48      	bgt.n	80054f0 <UART_SetConfig+0x848>
 800545e:	2b00      	cmp	r3, #0
 8005460:	db7b      	blt.n	800555a <UART_SetConfig+0x8b2>
 8005462:	2b20      	cmp	r3, #32
 8005464:	d879      	bhi.n	800555a <UART_SetConfig+0x8b2>
 8005466:	a201      	add	r2, pc, #4	@ (adr r2, 800546c <UART_SetConfig+0x7c4>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054f7 	.word	0x080054f7
 8005470:	080054ff 	.word	0x080054ff
 8005474:	0800555b 	.word	0x0800555b
 8005478:	0800555b 	.word	0x0800555b
 800547c:	08005507 	.word	0x08005507
 8005480:	0800555b 	.word	0x0800555b
 8005484:	0800555b 	.word	0x0800555b
 8005488:	0800555b 	.word	0x0800555b
 800548c:	08005517 	.word	0x08005517
 8005490:	0800555b 	.word	0x0800555b
 8005494:	0800555b 	.word	0x0800555b
 8005498:	0800555b 	.word	0x0800555b
 800549c:	0800555b 	.word	0x0800555b
 80054a0:	0800555b 	.word	0x0800555b
 80054a4:	0800555b 	.word	0x0800555b
 80054a8:	0800555b 	.word	0x0800555b
 80054ac:	08005527 	.word	0x08005527
 80054b0:	0800555b 	.word	0x0800555b
 80054b4:	0800555b 	.word	0x0800555b
 80054b8:	0800555b 	.word	0x0800555b
 80054bc:	0800555b 	.word	0x0800555b
 80054c0:	0800555b 	.word	0x0800555b
 80054c4:	0800555b 	.word	0x0800555b
 80054c8:	0800555b 	.word	0x0800555b
 80054cc:	0800555b 	.word	0x0800555b
 80054d0:	0800555b 	.word	0x0800555b
 80054d4:	0800555b 	.word	0x0800555b
 80054d8:	0800555b 	.word	0x0800555b
 80054dc:	0800555b 	.word	0x0800555b
 80054e0:	0800555b 	.word	0x0800555b
 80054e4:	0800555b 	.word	0x0800555b
 80054e8:	0800555b 	.word	0x0800555b
 80054ec:	0800554d 	.word	0x0800554d
 80054f0:	2b40      	cmp	r3, #64	@ 0x40
 80054f2:	d02e      	beq.n	8005552 <UART_SetConfig+0x8aa>
 80054f4:	e031      	b.n	800555a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f6:	f7fd f9b9 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 80054fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054fc:	e033      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054fe:	f7fd f9cb 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8005502:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005504:	e02f      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe fc3c 	bl	8003d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005514:	e027      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005516:	f107 0318 	add.w	r3, r7, #24
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe fd88 	bl	8004030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005524:	e01f      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005526:	4b2d      	ldr	r3, [pc, #180]	@ (80055dc <UART_SetConfig+0x934>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005532:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <UART_SetConfig+0x934>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	08db      	lsrs	r3, r3, #3
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	4a24      	ldr	r2, [pc, #144]	@ (80055d0 <UART_SetConfig+0x928>)
 800553e:	fa22 f303 	lsr.w	r3, r2, r3
 8005542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005544:	e00f      	b.n	8005566 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005546:	4b22      	ldr	r3, [pc, #136]	@ (80055d0 <UART_SetConfig+0x928>)
 8005548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800554a:	e00c      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800554c:	4b21      	ldr	r3, [pc, #132]	@ (80055d4 <UART_SetConfig+0x92c>)
 800554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005550:	e009      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005564:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 80e7 	beq.w	800573c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <UART_SetConfig+0x930>)
 8005574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005578:	461a      	mov	r2, r3
 800557a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005580:	005a      	lsls	r2, r3, #1
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	441a      	add	r2, r3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005592:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005596:	2b0f      	cmp	r3, #15
 8005598:	d916      	bls.n	80055c8 <UART_SetConfig+0x920>
 800559a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055a0:	d212      	bcs.n	80055c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f023 030f 	bic.w	r3, r3, #15
 80055aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055ba:	4313      	orrs	r3, r2
 80055bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	e0b9      	b.n	800573c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80055ce:	e0b5      	b.n	800573c <UART_SetConfig+0xa94>
 80055d0:	03d09000 	.word	0x03d09000
 80055d4:	003d0900 	.word	0x003d0900
 80055d8:	0800b2f4 	.word	0x0800b2f4
 80055dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80055e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	dc49      	bgt.n	800567c <UART_SetConfig+0x9d4>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	db7c      	blt.n	80056e6 <UART_SetConfig+0xa3e>
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d87a      	bhi.n	80056e6 <UART_SetConfig+0xa3e>
 80055f0:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <UART_SetConfig+0x950>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	08005683 	.word	0x08005683
 80055fc:	0800568b 	.word	0x0800568b
 8005600:	080056e7 	.word	0x080056e7
 8005604:	080056e7 	.word	0x080056e7
 8005608:	08005693 	.word	0x08005693
 800560c:	080056e7 	.word	0x080056e7
 8005610:	080056e7 	.word	0x080056e7
 8005614:	080056e7 	.word	0x080056e7
 8005618:	080056a3 	.word	0x080056a3
 800561c:	080056e7 	.word	0x080056e7
 8005620:	080056e7 	.word	0x080056e7
 8005624:	080056e7 	.word	0x080056e7
 8005628:	080056e7 	.word	0x080056e7
 800562c:	080056e7 	.word	0x080056e7
 8005630:	080056e7 	.word	0x080056e7
 8005634:	080056e7 	.word	0x080056e7
 8005638:	080056b3 	.word	0x080056b3
 800563c:	080056e7 	.word	0x080056e7
 8005640:	080056e7 	.word	0x080056e7
 8005644:	080056e7 	.word	0x080056e7
 8005648:	080056e7 	.word	0x080056e7
 800564c:	080056e7 	.word	0x080056e7
 8005650:	080056e7 	.word	0x080056e7
 8005654:	080056e7 	.word	0x080056e7
 8005658:	080056e7 	.word	0x080056e7
 800565c:	080056e7 	.word	0x080056e7
 8005660:	080056e7 	.word	0x080056e7
 8005664:	080056e7 	.word	0x080056e7
 8005668:	080056e7 	.word	0x080056e7
 800566c:	080056e7 	.word	0x080056e7
 8005670:	080056e7 	.word	0x080056e7
 8005674:	080056e7 	.word	0x080056e7
 8005678:	080056d9 	.word	0x080056d9
 800567c:	2b40      	cmp	r3, #64	@ 0x40
 800567e:	d02e      	beq.n	80056de <UART_SetConfig+0xa36>
 8005680:	e031      	b.n	80056e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005682:	f7fd f8f3 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8005686:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005688:	e033      	b.n	80056f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800568a:	f7fd f905 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 800568e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005690:	e02f      	b.n	80056f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fb76 	bl	8003d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800569c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056a0:	e027      	b.n	80056f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056a2:	f107 0318 	add.w	r3, r7, #24
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fcc2 	bl	8004030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056b0:	e01f      	b.n	80056f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005768 <UART_SetConfig+0xac0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056be:	4b2a      	ldr	r3, [pc, #168]	@ (8005768 <UART_SetConfig+0xac0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	08db      	lsrs	r3, r3, #3
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	4a28      	ldr	r2, [pc, #160]	@ (800576c <UART_SetConfig+0xac4>)
 80056ca:	fa22 f303 	lsr.w	r3, r2, r3
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056d0:	e00f      	b.n	80056f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80056d2:	4b26      	ldr	r3, [pc, #152]	@ (800576c <UART_SetConfig+0xac4>)
 80056d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d6:	e00c      	b.n	80056f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056d8:	4b25      	ldr	r3, [pc, #148]	@ (8005770 <UART_SetConfig+0xac8>)
 80056da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056dc:	e009      	b.n	80056f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e4:	e005      	b.n	80056f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056f0:	bf00      	nop
    }

    if (pclk != 0U)
 80056f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d021      	beq.n	800573c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005774 <UART_SetConfig+0xacc>)
 80056fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005702:	461a      	mov	r2, r3
 8005704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005706:	fbb3 f2f2 	udiv	r2, r3, r2
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	441a      	add	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	2b0f      	cmp	r3, #15
 8005720:	d909      	bls.n	8005736 <UART_SetConfig+0xa8e>
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005728:	d205      	bcs.n	8005736 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	b29a      	uxth	r2, r3
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60da      	str	r2, [r3, #12]
 8005734:	e002      	b.n	800573c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2201      	movs	r2, #1
 8005740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2201      	movs	r2, #1
 8005748:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2200      	movs	r2, #0
 8005750:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005758:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800575c:	4618      	mov	r0, r3
 800575e:	3748      	adds	r7, #72	@ 0x48
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005766:	bf00      	nop
 8005768:	58024400 	.word	0x58024400
 800576c:	03d09000 	.word	0x03d09000
 8005770:	003d0900 	.word	0x003d0900
 8005774:	0800b2f4 	.word	0x0800b2f4

08005778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01a      	beq.n	800588e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005876:	d10a      	bne.n	800588e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b098      	sub	sp, #96	@ 0x60
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058cc:	f7fb fcb0 	bl	8001230 <HAL_GetTick>
 80058d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d12f      	bne.n	8005940 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e8:	2200      	movs	r2, #0
 80058ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f88e 	bl	8005a10 <UART_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d022      	beq.n	8005940 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800590e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005918:	647b      	str	r3, [r7, #68]	@ 0x44
 800591a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800591e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e6      	bne.n	80058fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e063      	b.n	8005a08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d149      	bne.n	80059e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005956:	2200      	movs	r2, #0
 8005958:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f857 	bl	8005a10 <UART_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03c      	beq.n	80059e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	623b      	str	r3, [r7, #32]
   return(result);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800597c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005986:	633b      	str	r3, [r7, #48]	@ 0x30
 8005988:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800598c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e6      	bne.n	8005968 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ba:	61fa      	str	r2, [r7, #28]
 80059bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	69b9      	ldr	r1, [r7, #24]
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	617b      	str	r3, [r7, #20]
   return(result);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e5      	bne.n	800599a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e012      	b.n	8005a08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3758      	adds	r7, #88	@ 0x58
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a20:	e04f      	b.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d04b      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fb fc01 	bl	8001230 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e04e      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d037      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b80      	cmp	r3, #128	@ 0x80
 8005a56:	d034      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b40      	cmp	r3, #64	@ 0x40
 8005a5c:	d031      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d110      	bne.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2208      	movs	r2, #8
 8005a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f839 	bl	8005aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e029      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a9c:	d111      	bne.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f81f 	bl	8005aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e00f      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	bf0c      	ite	eq
 8005ad2:	2301      	moveq	r3, #1
 8005ad4:	2300      	movne	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d0a0      	beq.n	8005a22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b095      	sub	sp, #84	@ 0x54
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e6      	bne.n	8005af4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb4 <UART_EndRxTransfer+0xc8>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e5      	bne.n	8005b26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d118      	bne.n	8005b94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6979      	ldr	r1, [r7, #20]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e6      	bne.n	8005b62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ba8:	bf00      	nop
 8005baa:	3754      	adds	r7, #84	@ 0x54
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	effffffe 	.word	0xeffffffe

08005bb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UARTEx_DisableFifoMode+0x16>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e027      	b.n	8005c1e <HAL_UARTEx_DisableFifoMode+0x66>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e02d      	b.n	8005c9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2224      	movs	r2, #36	@ 0x24
 8005c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0201 	bic.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f850 	bl	8005d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e02d      	b.n	8005d1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	@ 0x24
 8005cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f812 	bl	8005d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d108      	bne.n	8005d46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d44:	e031      	b.n	8005daa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d46:	2310      	movs	r3, #16
 8005d48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d4a:	2310      	movs	r3, #16
 8005d4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	0e5b      	lsrs	r3, r3, #25
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	0f5b      	lsrs	r3, r3, #29
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	7b3a      	ldrb	r2, [r7, #12]
 8005d72:	4911      	ldr	r1, [pc, #68]	@ (8005db8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d74:	5c8a      	ldrb	r2, [r1, r2]
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d7a:	7b3a      	ldrb	r2, [r7, #12]
 8005d7c:	490f      	ldr	r1, [pc, #60]	@ (8005dbc <UARTEx_SetNbDataToProcess+0x98>)
 8005d7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	7b7a      	ldrb	r2, [r7, #13]
 8005d90:	4909      	ldr	r1, [pc, #36]	@ (8005db8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d92:	5c8a      	ldrb	r2, [r1, r2]
 8005d94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d98:	7b7a      	ldrb	r2, [r7, #13]
 8005d9a:	4908      	ldr	r1, [pc, #32]	@ (8005dbc <UARTEx_SetNbDataToProcess+0x98>)
 8005d9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	0800b30c 	.word	0x0800b30c
 8005dbc:	0800b314 	.word	0x0800b314

08005dc0 <__NVIC_SetPriority>:
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	6039      	str	r1, [r7, #0]
 8005dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	db0a      	blt.n	8005dea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	490c      	ldr	r1, [pc, #48]	@ (8005e0c <__NVIC_SetPriority+0x4c>)
 8005dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dde:	0112      	lsls	r2, r2, #4
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	440b      	add	r3, r1
 8005de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005de8:	e00a      	b.n	8005e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	4908      	ldr	r1, [pc, #32]	@ (8005e10 <__NVIC_SetPriority+0x50>)
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	3b04      	subs	r3, #4
 8005df8:	0112      	lsls	r2, r2, #4
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	761a      	strb	r2, [r3, #24]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	e000e100 	.word	0xe000e100
 8005e10:	e000ed00 	.word	0xe000ed00

08005e14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005e18:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <SysTick_Handler+0x1c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005e1c:	f002 f988 	bl	8008130 <xTaskGetSchedulerState>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d001      	beq.n	8005e2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005e26:	f000 fd9f 	bl	8006968 <xPortSysTickHandler>
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	e000e010 	.word	0xe000e010

08005e34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005e38:	2100      	movs	r1, #0
 8005e3a:	f06f 0004 	mvn.w	r0, #4
 8005e3e:	f7ff ffbf 	bl	8005dc0 <__NVIC_SetPriority>
#endif
}
 8005e42:	bf00      	nop
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
 8005e52:	603b      	str	r3, [r7, #0]
  return(result);
 8005e54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e5a:	f06f 0305 	mvn.w	r3, #5
 8005e5e:	607b      	str	r3, [r7, #4]
 8005e60:	e00c      	b.n	8005e7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e62:	4b0a      	ldr	r3, [pc, #40]	@ (8005e8c <osKernelInitialize+0x44>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e6a:	4b08      	ldr	r3, [pc, #32]	@ (8005e8c <osKernelInitialize+0x44>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	607b      	str	r3, [r7, #4]
 8005e74:	e002      	b.n	8005e7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e76:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e7c:	687b      	ldr	r3, [r7, #4]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	24000330 	.word	0x24000330

08005e90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e96:	f3ef 8305 	mrs	r3, IPSR
 8005e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ea2:	f06f 0305 	mvn.w	r3, #5
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	e010      	b.n	8005ecc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <osKernelStart+0x48>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d109      	bne.n	8005ec6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005eb2:	f7ff ffbf 	bl	8005e34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005eb6:	4b08      	ldr	r3, [pc, #32]	@ (8005ed8 <osKernelStart+0x48>)
 8005eb8:	2202      	movs	r2, #2
 8005eba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ebc:	f001 fcd4 	bl	8007868 <vTaskStartScheduler>
      stat = osOK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	607b      	str	r3, [r7, #4]
 8005ec4:	e002      	b.n	8005ecc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ecc:	687b      	ldr	r3, [r7, #4]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	24000330 	.word	0x24000330

08005edc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	@ 0x38
 8005ee0:	af04      	add	r7, sp, #16
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eec:	f3ef 8305 	mrs	r3, IPSR
 8005ef0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ef2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d17e      	bne.n	8005ff6 <osThreadNew+0x11a>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d07b      	beq.n	8005ff6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005efe:	2380      	movs	r3, #128	@ 0x80
 8005f00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f02:	2318      	movs	r3, #24
 8005f04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d045      	beq.n	8005fa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <osThreadNew+0x48>
        name = attr->name;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <osThreadNew+0x6e>
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b38      	cmp	r3, #56	@ 0x38
 8005f3c:	d805      	bhi.n	8005f4a <osThreadNew+0x6e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <osThreadNew+0x72>
        return (NULL);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e054      	b.n	8005ff8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00e      	beq.n	8005f84 <osThreadNew+0xa8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	2ba7      	cmp	r3, #167	@ 0xa7
 8005f6c:	d90a      	bls.n	8005f84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d006      	beq.n	8005f84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <osThreadNew+0xa8>
        mem = 1;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e010      	b.n	8005fa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10c      	bne.n	8005fa6 <osThreadNew+0xca>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d108      	bne.n	8005fa6 <osThreadNew+0xca>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d104      	bne.n	8005fa6 <osThreadNew+0xca>
          mem = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	e001      	b.n	8005fa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d110      	bne.n	8005fce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fb4:	9202      	str	r2, [sp, #8]
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	6a3a      	ldr	r2, [r7, #32]
 8005fc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f001 fa5c 	bl	8007480 <xTaskCreateStatic>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	e013      	b.n	8005ff6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d110      	bne.n	8005ff6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f107 0310 	add.w	r3, r7, #16
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f001 faaa 	bl	8007540 <xTaskCreate>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d001      	beq.n	8005ff6 <osThreadNew+0x11a>
            hTask = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ff6:	693b      	ldr	r3, [r7, #16]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3728      	adds	r7, #40	@ 0x28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006008:	f3ef 8305 	mrs	r3, IPSR
 800600c:	60bb      	str	r3, [r7, #8]
  return(result);
 800600e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <osDelay+0x1c>
    stat = osErrorISR;
 8006014:	f06f 0305 	mvn.w	r3, #5
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	e007      	b.n	800602c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 fbe8 	bl	80077fc <vTaskDelay>
    }
  }

  return (stat);
 800602c:	68fb      	ldr	r3, [r7, #12]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a07      	ldr	r2, [pc, #28]	@ (8006064 <vApplicationGetIdleTaskMemory+0x2c>)
 8006048:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4a06      	ldr	r2, [pc, #24]	@ (8006068 <vApplicationGetIdleTaskMemory+0x30>)
 800604e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2280      	movs	r2, #128	@ 0x80
 8006054:	601a      	str	r2, [r3, #0]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	24000334 	.word	0x24000334
 8006068:	240003dc 	.word	0x240003dc

0800606c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4a07      	ldr	r2, [pc, #28]	@ (8006098 <vApplicationGetTimerTaskMemory+0x2c>)
 800607c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4a06      	ldr	r2, [pc, #24]	@ (800609c <vApplicationGetTimerTaskMemory+0x30>)
 8006082:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800608a:	601a      	str	r2, [r3, #0]
}
 800608c:	bf00      	nop
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	240005dc 	.word	0x240005dc
 800609c:	24000684 	.word	0x24000684

080060a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	@ 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060ac:	f001 fc4c 	bl	8007948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060b0:	4b5c      	ldr	r3, [pc, #368]	@ (8006224 <pvPortMalloc+0x184>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060b8:	f000 f924 	bl	8006304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060bc:	4b5a      	ldr	r3, [pc, #360]	@ (8006228 <pvPortMalloc+0x188>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 8095 	bne.w	80061f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80060d0:	2208      	movs	r2, #8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d015      	beq.n	800610e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f023 0307 	bic.w	r3, r3, #7
 80060e8:	3308      	adds	r3, #8
 80060ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d06f      	beq.n	80061f4 <pvPortMalloc+0x154>
 8006114:	4b45      	ldr	r3, [pc, #276]	@ (800622c <pvPortMalloc+0x18c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d86a      	bhi.n	80061f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800611e:	4b44      	ldr	r3, [pc, #272]	@ (8006230 <pvPortMalloc+0x190>)
 8006120:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006122:	4b43      	ldr	r3, [pc, #268]	@ (8006230 <pvPortMalloc+0x190>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006128:	e004      	b.n	8006134 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d903      	bls.n	8006146 <pvPortMalloc+0xa6>
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f1      	bne.n	800612a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006146:	4b37      	ldr	r3, [pc, #220]	@ (8006224 <pvPortMalloc+0x184>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614c:	429a      	cmp	r2, r3
 800614e:	d051      	beq.n	80061f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2208      	movs	r2, #8
 8006156:	4413      	add	r3, r2
 8006158:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	1ad2      	subs	r2, r2, r3
 800616a:	2308      	movs	r3, #8
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	429a      	cmp	r2, r3
 8006170:	d920      	bls.n	80061b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <pvPortMalloc+0xfc>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	613b      	str	r3, [r7, #16]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061ae:	69b8      	ldr	r0, [r7, #24]
 80061b0:	f000 f90a 	bl	80063c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061b4:	4b1d      	ldr	r3, [pc, #116]	@ (800622c <pvPortMalloc+0x18c>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	4a1b      	ldr	r2, [pc, #108]	@ (800622c <pvPortMalloc+0x18c>)
 80061c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061c2:	4b1a      	ldr	r3, [pc, #104]	@ (800622c <pvPortMalloc+0x18c>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006234 <pvPortMalloc+0x194>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d203      	bcs.n	80061d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061ce:	4b17      	ldr	r3, [pc, #92]	@ (800622c <pvPortMalloc+0x18c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a18      	ldr	r2, [pc, #96]	@ (8006234 <pvPortMalloc+0x194>)
 80061d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	4b13      	ldr	r3, [pc, #76]	@ (8006228 <pvPortMalloc+0x188>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	431a      	orrs	r2, r3
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061ea:	4b13      	ldr	r3, [pc, #76]	@ (8006238 <pvPortMalloc+0x198>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3301      	adds	r3, #1
 80061f0:	4a11      	ldr	r2, [pc, #68]	@ (8006238 <pvPortMalloc+0x198>)
 80061f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061f4:	f001 fbb6 	bl	8007964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00b      	beq.n	800621a <pvPortMalloc+0x17a>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	60fb      	str	r3, [r7, #12]
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <pvPortMalloc+0x176>
	return pvReturn;
 800621a:	69fb      	ldr	r3, [r7, #28]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3728      	adds	r7, #40	@ 0x28
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	2400468c 	.word	0x2400468c
 8006228:	240046a0 	.word	0x240046a0
 800622c:	24004690 	.word	0x24004690
 8006230:	24004684 	.word	0x24004684
 8006234:	24004694 	.word	0x24004694
 8006238:	24004698 	.word	0x24004698

0800623c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d04f      	beq.n	80062ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800624e:	2308      	movs	r3, #8
 8006250:	425b      	negs	r3, r3
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4413      	add	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	4b25      	ldr	r3, [pc, #148]	@ (80062f8 <vPortFree+0xbc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <vPortFree+0x46>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60fb      	str	r3, [r7, #12]
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	e7fd      	b.n	800627e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <vPortFree+0x66>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	60bb      	str	r3, [r7, #8]
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	e7fd      	b.n	800629e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b14      	ldr	r3, [pc, #80]	@ (80062f8 <vPortFree+0xbc>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01e      	beq.n	80062ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11a      	bne.n	80062ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	4b0e      	ldr	r3, [pc, #56]	@ (80062f8 <vPortFree+0xbc>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062c8:	f001 fb3e 	bl	8007948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4b0a      	ldr	r3, [pc, #40]	@ (80062fc <vPortFree+0xc0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	4a09      	ldr	r2, [pc, #36]	@ (80062fc <vPortFree+0xc0>)
 80062d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062da:	6938      	ldr	r0, [r7, #16]
 80062dc:	f000 f874 	bl	80063c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062e0:	4b07      	ldr	r3, [pc, #28]	@ (8006300 <vPortFree+0xc4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a06      	ldr	r2, [pc, #24]	@ (8006300 <vPortFree+0xc4>)
 80062e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062ea:	f001 fb3b 	bl	8007964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062ee:	bf00      	nop
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	240046a0 	.word	0x240046a0
 80062fc:	24004690 	.word	0x24004690
 8006300:	2400469c 	.word	0x2400469c

08006304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800630a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800630e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006310:	4b27      	ldr	r3, [pc, #156]	@ (80063b0 <prvHeapInit+0xac>)
 8006312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3307      	adds	r3, #7
 8006322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0307 	bic.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	4a1f      	ldr	r2, [pc, #124]	@ (80063b0 <prvHeapInit+0xac>)
 8006334:	4413      	add	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800633c:	4a1d      	ldr	r2, [pc, #116]	@ (80063b4 <prvHeapInit+0xb0>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006342:	4b1c      	ldr	r3, [pc, #112]	@ (80063b4 <prvHeapInit+0xb0>)
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006350:	2208      	movs	r2, #8
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0307 	bic.w	r3, r3, #7
 800635e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a15      	ldr	r2, [pc, #84]	@ (80063b8 <prvHeapInit+0xb4>)
 8006364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006366:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <prvHeapInit+0xb4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2200      	movs	r2, #0
 800636c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800636e:	4b12      	ldr	r3, [pc, #72]	@ (80063b8 <prvHeapInit+0xb4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006384:	4b0c      	ldr	r3, [pc, #48]	@ (80063b8 <prvHeapInit+0xb4>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a0a      	ldr	r2, [pc, #40]	@ (80063bc <prvHeapInit+0xb8>)
 8006392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4a09      	ldr	r2, [pc, #36]	@ (80063c0 <prvHeapInit+0xbc>)
 800639a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800639c:	4b09      	ldr	r3, [pc, #36]	@ (80063c4 <prvHeapInit+0xc0>)
 800639e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	24000a84 	.word	0x24000a84
 80063b4:	24004684 	.word	0x24004684
 80063b8:	2400468c 	.word	0x2400468c
 80063bc:	24004694 	.word	0x24004694
 80063c0:	24004690 	.word	0x24004690
 80063c4:	240046a0 	.word	0x240046a0

080063c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063d0:	4b28      	ldr	r3, [pc, #160]	@ (8006474 <prvInsertBlockIntoFreeList+0xac>)
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e002      	b.n	80063dc <prvInsertBlockIntoFreeList+0x14>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d8f7      	bhi.n	80063d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d108      	bne.n	800640a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	441a      	add	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	441a      	add	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d118      	bne.n	8006450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b15      	ldr	r3, [pc, #84]	@ (8006478 <prvInsertBlockIntoFreeList+0xb0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d00d      	beq.n	8006446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	441a      	add	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	e008      	b.n	8006458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006446:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <prvInsertBlockIntoFreeList+0xb0>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e003      	b.n	8006458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	429a      	cmp	r2, r3
 800645e:	d002      	beq.n	8006466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	24004684 	.word	0x24004684
 8006478:	2400468c 	.word	0x2400468c

0800647c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f103 0208 	add.w	r2, r3, #8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f103 0208 	add.w	r2, r3, #8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f103 0208 	add.w	r2, r3, #8
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d103      	bne.n	800653e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e00c      	b.n	8006558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3308      	adds	r3, #8
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e002      	b.n	800654c <vListInsert+0x2e>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	d2f6      	bcs.n	8006546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6892      	ldr	r2, [r2, #8]
 80065a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6852      	ldr	r2, [r2, #4]
 80065b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d103      	bne.n	80065c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	1e5a      	subs	r2, r3, #1
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3b04      	subs	r3, #4
 80065f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b04      	subs	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b04      	subs	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006614:	4a0c      	ldr	r2, [pc, #48]	@ (8006648 <pxPortInitialiseStack+0x64>)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b14      	subs	r3, #20
 800661e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b04      	subs	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f06f 0202 	mvn.w	r2, #2
 8006632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3b20      	subs	r3, #32
 8006638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800663a:	68fb      	ldr	r3, [r7, #12]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	0800664d 	.word	0x0800664d

0800664c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006656:	4b13      	ldr	r3, [pc, #76]	@ (80066a4 <prvTaskExitError+0x58>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d00b      	beq.n	8006678 <prvTaskExitError+0x2c>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <prvTaskExitError+0x28>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	60bb      	str	r3, [r7, #8]
}
 800668a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800668c:	bf00      	nop
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0fc      	beq.n	800668e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	24000010 	.word	0x24000010
	...

080066b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066b0:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <pxCurrentTCBConst2>)
 80066b2:	6819      	ldr	r1, [r3, #0]
 80066b4:	6808      	ldr	r0, [r1, #0]
 80066b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	f380 8809 	msr	PSP, r0
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8811 	msr	BASEPRI, r0
 80066ca:	4770      	bx	lr
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst2>:
 80066d0:	240046ec 	.word	0x240046ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066d8:	4808      	ldr	r0, [pc, #32]	@ (80066fc <prvPortStartFirstTask+0x24>)
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	6800      	ldr	r0, [r0, #0]
 80066de:	f380 8808 	msr	MSP, r0
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8814 	msr	CONTROL, r0
 80066ea:	b662      	cpsie	i
 80066ec:	b661      	cpsie	f
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	df00      	svc	0
 80066f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066fa:	bf00      	nop
 80066fc:	e000ed08 	.word	0xe000ed08

08006700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006706:	4b47      	ldr	r3, [pc, #284]	@ (8006824 <xPortStartScheduler+0x124>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a47      	ldr	r2, [pc, #284]	@ (8006828 <xPortStartScheduler+0x128>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10b      	bne.n	8006728 <xPortStartScheduler+0x28>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006728:	4b3e      	ldr	r3, [pc, #248]	@ (8006824 <xPortStartScheduler+0x124>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a3f      	ldr	r2, [pc, #252]	@ (800682c <xPortStartScheduler+0x12c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10b      	bne.n	800674a <xPortStartScheduler+0x4a>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	60fb      	str	r3, [r7, #12]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800674a:	4b39      	ldr	r3, [pc, #228]	@ (8006830 <xPortStartScheduler+0x130>)
 800674c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	22ff      	movs	r2, #255	@ 0xff
 800675a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800676c:	b2da      	uxtb	r2, r3
 800676e:	4b31      	ldr	r3, [pc, #196]	@ (8006834 <xPortStartScheduler+0x134>)
 8006770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006772:	4b31      	ldr	r3, [pc, #196]	@ (8006838 <xPortStartScheduler+0x138>)
 8006774:	2207      	movs	r2, #7
 8006776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006778:	e009      	b.n	800678e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800677a:	4b2f      	ldr	r3, [pc, #188]	@ (8006838 <xPortStartScheduler+0x138>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3b01      	subs	r3, #1
 8006780:	4a2d      	ldr	r2, [pc, #180]	@ (8006838 <xPortStartScheduler+0x138>)
 8006782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006796:	2b80      	cmp	r3, #128	@ 0x80
 8006798:	d0ef      	beq.n	800677a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800679a:	4b27      	ldr	r3, [pc, #156]	@ (8006838 <xPortStartScheduler+0x138>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1c3 0307 	rsb	r3, r3, #7
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d00b      	beq.n	80067be <xPortStartScheduler+0xbe>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	60bb      	str	r3, [r7, #8]
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	e7fd      	b.n	80067ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067be:	4b1e      	ldr	r3, [pc, #120]	@ (8006838 <xPortStartScheduler+0x138>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006838 <xPortStartScheduler+0x138>)
 80067c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006838 <xPortStartScheduler+0x138>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067d0:	4a19      	ldr	r2, [pc, #100]	@ (8006838 <xPortStartScheduler+0x138>)
 80067d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067dc:	4b17      	ldr	r3, [pc, #92]	@ (800683c <xPortStartScheduler+0x13c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a16      	ldr	r2, [pc, #88]	@ (800683c <xPortStartScheduler+0x13c>)
 80067e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067e8:	4b14      	ldr	r3, [pc, #80]	@ (800683c <xPortStartScheduler+0x13c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a13      	ldr	r2, [pc, #76]	@ (800683c <xPortStartScheduler+0x13c>)
 80067ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067f4:	f000 f8da 	bl	80069ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067f8:	4b11      	ldr	r3, [pc, #68]	@ (8006840 <xPortStartScheduler+0x140>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067fe:	f000 f8f9 	bl	80069f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006802:	4b10      	ldr	r3, [pc, #64]	@ (8006844 <xPortStartScheduler+0x144>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a0f      	ldr	r2, [pc, #60]	@ (8006844 <xPortStartScheduler+0x144>)
 8006808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800680c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800680e:	f7ff ff63 	bl	80066d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006812:	f001 fa0f 	bl	8007c34 <vTaskSwitchContext>
	prvTaskExitError();
 8006816:	f7ff ff19 	bl	800664c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	e000ed00 	.word	0xe000ed00
 8006828:	410fc271 	.word	0x410fc271
 800682c:	410fc270 	.word	0x410fc270
 8006830:	e000e400 	.word	0xe000e400
 8006834:	240046a4 	.word	0x240046a4
 8006838:	240046a8 	.word	0x240046a8
 800683c:	e000ed20 	.word	0xe000ed20
 8006840:	24000010 	.word	0x24000010
 8006844:	e000ef34 	.word	0xe000ef34

08006848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	607b      	str	r3, [r7, #4]
}
 8006860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006862:	4b10      	ldr	r3, [pc, #64]	@ (80068a4 <vPortEnterCritical+0x5c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	4a0e      	ldr	r2, [pc, #56]	@ (80068a4 <vPortEnterCritical+0x5c>)
 800686a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800686c:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <vPortEnterCritical+0x5c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d110      	bne.n	8006896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006874:	4b0c      	ldr	r3, [pc, #48]	@ (80068a8 <vPortEnterCritical+0x60>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <vPortEnterCritical+0x4e>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	603b      	str	r3, [r7, #0]
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	e7fd      	b.n	8006892 <vPortEnterCritical+0x4a>
	}
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	24000010 	.word	0x24000010
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068b2:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <vPortExitCritical+0x50>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <vPortExitCritical+0x26>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	e7fd      	b.n	80068ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068d2:	4b0a      	ldr	r3, [pc, #40]	@ (80068fc <vPortExitCritical+0x50>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	4a08      	ldr	r2, [pc, #32]	@ (80068fc <vPortExitCritical+0x50>)
 80068da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068dc:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <vPortExitCritical+0x50>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d105      	bne.n	80068f0 <vPortExitCritical+0x44>
 80068e4:	2300      	movs	r3, #0
 80068e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	24000010 	.word	0x24000010

08006900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006900:	f3ef 8009 	mrs	r0, PSP
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	4b15      	ldr	r3, [pc, #84]	@ (8006960 <pxCurrentTCBConst>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	f01e 0f10 	tst.w	lr, #16
 8006910:	bf08      	it	eq
 8006912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	6010      	str	r0, [r2, #0]
 800691c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006924:	f380 8811 	msr	BASEPRI, r0
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f001 f980 	bl	8007c34 <vTaskSwitchContext>
 8006934:	f04f 0000 	mov.w	r0, #0
 8006938:	f380 8811 	msr	BASEPRI, r0
 800693c:	bc09      	pop	{r0, r3}
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	6808      	ldr	r0, [r1, #0]
 8006942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006946:	f01e 0f10 	tst.w	lr, #16
 800694a:	bf08      	it	eq
 800694c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006950:	f380 8809 	msr	PSP, r0
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w

08006960 <pxCurrentTCBConst>:
 8006960:	240046ec 	.word	0x240046ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop

08006968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	607b      	str	r3, [r7, #4]
}
 8006980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006982:	f001 f89d 	bl	8007ac0 <xTaskIncrementTick>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800698c:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <xPortSysTickHandler+0x40>)
 800698e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	2300      	movs	r3, #0
 8006996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069b0:	4b0b      	ldr	r3, [pc, #44]	@ (80069e0 <vPortSetupTimerInterrupt+0x34>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069b6:	4b0b      	ldr	r3, [pc, #44]	@ (80069e4 <vPortSetupTimerInterrupt+0x38>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069bc:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <vPortSetupTimerInterrupt+0x3c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	@ (80069ec <vPortSetupTimerInterrupt+0x40>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	099b      	lsrs	r3, r3, #6
 80069c8:	4a09      	ldr	r2, [pc, #36]	@ (80069f0 <vPortSetupTimerInterrupt+0x44>)
 80069ca:	3b01      	subs	r3, #1
 80069cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ce:	4b04      	ldr	r3, [pc, #16]	@ (80069e0 <vPortSetupTimerInterrupt+0x34>)
 80069d0:	2207      	movs	r2, #7
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	e000e010 	.word	0xe000e010
 80069e4:	e000e018 	.word	0xe000e018
 80069e8:	24000000 	.word	0x24000000
 80069ec:	10624dd3 	.word	0x10624dd3
 80069f0:	e000e014 	.word	0xe000e014

080069f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a04 <vPortEnableVFP+0x10>
 80069f8:	6801      	ldr	r1, [r0, #0]
 80069fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069fe:	6001      	str	r1, [r0, #0]
 8006a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a02:	bf00      	nop
 8006a04:	e000ed88 	.word	0xe000ed88

08006a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a0e:	f3ef 8305 	mrs	r3, IPSR
 8006a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b0f      	cmp	r3, #15
 8006a18:	d915      	bls.n	8006a46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a1a:	4a18      	ldr	r2, [pc, #96]	@ (8006a7c <vPortValidateInterruptPriority+0x74>)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a24:	4b16      	ldr	r3, [pc, #88]	@ (8006a80 <vPortValidateInterruptPriority+0x78>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	7afa      	ldrb	r2, [r7, #11]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d20b      	bcs.n	8006a46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	e7fd      	b.n	8006a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a46:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <vPortValidateInterruptPriority+0x7c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a88 <vPortValidateInterruptPriority+0x80>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d90b      	bls.n	8006a6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	603b      	str	r3, [r7, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <vPortValidateInterruptPriority+0x62>
	}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	e000e3f0 	.word	0xe000e3f0
 8006a80:	240046a4 	.word	0x240046a4
 8006a84:	e000ed0c 	.word	0xe000ed0c
 8006a88:	240046a8 	.word	0x240046a8

08006a8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10b      	bne.n	8006ab8 <xQueueGenericReset+0x2c>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60bb      	str	r3, [r7, #8]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ab8:	f7ff fec6 	bl	8006848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	68f9      	ldr	r1, [r7, #12]
 8006ac6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	441a      	add	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	68f9      	ldr	r1, [r7, #12]
 8006aec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006aee:	fb01 f303 	mul.w	r3, r1, r3
 8006af2:	441a      	add	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	22ff      	movs	r2, #255	@ 0xff
 8006afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	22ff      	movs	r2, #255	@ 0xff
 8006b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d114      	bne.n	8006b38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01a      	beq.n	8006b4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3310      	adds	r3, #16
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 f942 	bl	8007da4 <xTaskRemoveFromEventList>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d012      	beq.n	8006b4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <xQueueGenericReset+0xd0>)
 8006b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	e009      	b.n	8006b4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3310      	adds	r3, #16
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff fc9d 	bl	800647c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3324      	adds	r3, #36	@ 0x24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fc98 	bl	800647c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b4c:	f7ff feae 	bl	80068ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b50:	2301      	movs	r3, #1
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	e000ed04 	.word	0xe000ed04

08006b60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	@ 0x38
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <xQueueGenericCreateStatic+0x56>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <xQueueGenericCreateStatic+0x5a>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <xQueueGenericCreateStatic+0x5c>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	623b      	str	r3, [r7, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	e7fd      	b.n	8006bd4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <xQueueGenericCreateStatic+0x84>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <xQueueGenericCreateStatic+0x88>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <xQueueGenericCreateStatic+0x8a>
 8006be8:	2300      	movs	r3, #0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	61fb      	str	r3, [r7, #28]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c06:	2350      	movs	r3, #80	@ 0x50
 8006c08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b50      	cmp	r3, #80	@ 0x50
 8006c0e:	d00b      	beq.n	8006c28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	61bb      	str	r3, [r7, #24]
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	e7fd      	b.n	8006c24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f805 	bl	8006c5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3730      	adds	r7, #48	@ 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e002      	b.n	8006c7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c88:	2101      	movs	r1, #1
 8006c8a:	69b8      	ldr	r0, [r7, #24]
 8006c8c:	f7ff fefe 	bl	8006a8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	78fa      	ldrb	r2, [r7, #3]
 8006c94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08e      	sub	sp, #56	@ 0x38
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10b      	bne.n	8006cd4 <xQueueGenericSend+0x34>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cce:	bf00      	nop
 8006cd0:	bf00      	nop
 8006cd2:	e7fd      	b.n	8006cd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d103      	bne.n	8006ce2 <xQueueGenericSend+0x42>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <xQueueGenericSend+0x46>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <xQueueGenericSend+0x48>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10b      	bne.n	8006d04 <xQueueGenericSend+0x64>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d103      	bne.n	8006d12 <xQueueGenericSend+0x72>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <xQueueGenericSend+0x76>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <xQueueGenericSend+0x78>
 8006d16:	2300      	movs	r3, #0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10b      	bne.n	8006d34 <xQueueGenericSend+0x94>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	623b      	str	r3, [r7, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d34:	f001 f9fc 	bl	8008130 <xTaskGetSchedulerState>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d102      	bne.n	8006d44 <xQueueGenericSend+0xa4>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <xQueueGenericSend+0xa8>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <xQueueGenericSend+0xaa>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <xQueueGenericSend+0xc6>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	61fb      	str	r3, [r7, #28]
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	e7fd      	b.n	8006d62 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d66:	f7ff fd6f 	bl	8006848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <xQueueGenericSend+0xdc>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d129      	bne.n	8006dd0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d82:	f000 fa0f 	bl	80071a4 <prvCopyDataToQueue>
 8006d86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d010      	beq.n	8006db2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	3324      	adds	r3, #36	@ 0x24
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 f805 	bl	8007da4 <xTaskRemoveFromEventList>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d013      	beq.n	8006dc8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006da0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ea0 <xQueueGenericSend+0x200>)
 8006da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	e00a      	b.n	8006dc8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006db8:	4b39      	ldr	r3, [pc, #228]	@ (8006ea0 <xQueueGenericSend+0x200>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dc8:	f7ff fd70 	bl	80068ac <vPortExitCritical>
				return pdPASS;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e063      	b.n	8006e98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dd6:	f7ff fd69 	bl	80068ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e05c      	b.n	8006e98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006de4:	f107 0314 	add.w	r3, r7, #20
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 f83f 	bl	8007e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006df2:	f7ff fd5b 	bl	80068ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006df6:	f000 fda7 	bl	8007948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dfa:	f7ff fd25 	bl	8006848 <vPortEnterCritical>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e04:	b25b      	sxtb	r3, r3
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d103      	bne.n	8006e14 <xQueueGenericSend+0x174>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e1a:	b25b      	sxtb	r3, r3
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d103      	bne.n	8006e2a <xQueueGenericSend+0x18a>
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e2a:	f7ff fd3f 	bl	80068ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e2e:	1d3a      	adds	r2, r7, #4
 8006e30:	f107 0314 	add.w	r3, r7, #20
 8006e34:	4611      	mov	r1, r2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f82e 	bl	8007e98 <xTaskCheckForTimeOut>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d124      	bne.n	8006e8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e44:	f000 faa6 	bl	8007394 <prvIsQueueFull>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d018      	beq.n	8006e80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	3310      	adds	r3, #16
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 ff52 	bl	8007d00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e5e:	f000 fa31 	bl	80072c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e62:	f000 fd7f 	bl	8007964 <xTaskResumeAll>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f47f af7c 	bne.w	8006d66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea0 <xQueueGenericSend+0x200>)
 8006e70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	e772      	b.n	8006d66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e82:	f000 fa1f 	bl	80072c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e86:	f000 fd6d 	bl	8007964 <xTaskResumeAll>
 8006e8a:	e76c      	b.n	8006d66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e8e:	f000 fa19 	bl	80072c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e92:	f000 fd67 	bl	8007964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3738      	adds	r7, #56	@ 0x38
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b090      	sub	sp, #64	@ 0x40
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <xQueueGenericSendFromISR+0x3e>
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <xQueueGenericSendFromISR+0x42>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <xQueueGenericSendFromISR+0x44>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d103      	bne.n	8006f12 <xQueueGenericSendFromISR+0x6e>
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <xQueueGenericSendFromISR+0x72>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <xQueueGenericSendFromISR+0x74>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	623b      	str	r3, [r7, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	e7fd      	b.n	8006f30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f34:	f7ff fd68 	bl	8006a08 <vPortValidateInterruptPriority>
	__asm volatile
 8006f38:	f3ef 8211 	mrs	r2, BASEPRI
 8006f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	61fa      	str	r2, [r7, #28]
 8006f4e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006f50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d302      	bcc.n	8006f66 <xQueueGenericSendFromISR+0xc2>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d12f      	bne.n	8006fc6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f7c:	f000 f912 	bl	80071a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d112      	bne.n	8006fb0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f94:	3324      	adds	r3, #36	@ 0x24
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 ff04 	bl	8007da4 <xTaskRemoveFromEventList>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00e      	beq.n	8006fc0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e007      	b.n	8006fc0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	b25a      	sxtb	r2, r3
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006fc4:	e001      	b.n	8006fca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fcc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f383 8811 	msr	BASEPRI, r3
}
 8006fd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3740      	adds	r7, #64	@ 0x40
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08c      	sub	sp, #48	@ 0x30
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <xQueueReceive+0x32>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	623b      	str	r3, [r7, #32]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d103      	bne.n	8007020 <xQueueReceive+0x40>
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <xQueueReceive+0x44>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <xQueueReceive+0x46>
 8007024:	2300      	movs	r3, #0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <xQueueReceive+0x62>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	61fb      	str	r3, [r7, #28]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007042:	f001 f875 	bl	8008130 <xTaskGetSchedulerState>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <xQueueReceive+0x72>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <xQueueReceive+0x76>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueReceive+0x78>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <xQueueReceive+0x94>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	61bb      	str	r3, [r7, #24]
}
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	e7fd      	b.n	8007070 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007074:	f7ff fbe8 	bl	8006848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01f      	beq.n	80070c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007088:	f000 f8f6 	bl	8007278 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	1e5a      	subs	r2, r3, #1
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00f      	beq.n	80070bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800709c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709e:	3310      	adds	r3, #16
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fe7f 	bl	8007da4 <xTaskRemoveFromEventList>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070ac:	4b3c      	ldr	r3, [pc, #240]	@ (80071a0 <xQueueReceive+0x1c0>)
 80070ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070bc:	f7ff fbf6 	bl	80068ac <vPortExitCritical>
				return pdPASS;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e069      	b.n	8007198 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d103      	bne.n	80070d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070ca:	f7ff fbef 	bl	80068ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e062      	b.n	8007198 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070d8:	f107 0310 	add.w	r3, r7, #16
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fec5 	bl	8007e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070e6:	f7ff fbe1 	bl	80068ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070ea:	f000 fc2d 	bl	8007948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ee:	f7ff fbab 	bl	8006848 <vPortEnterCritical>
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070f8:	b25b      	sxtb	r3, r3
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d103      	bne.n	8007108 <xQueueReceive+0x128>
 8007100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800710e:	b25b      	sxtb	r3, r3
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d103      	bne.n	800711e <xQueueReceive+0x13e>
 8007116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800711e:	f7ff fbc5 	bl	80068ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007122:	1d3a      	adds	r2, r7, #4
 8007124:	f107 0310 	add.w	r3, r7, #16
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f000 feb4 	bl	8007e98 <xTaskCheckForTimeOut>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d123      	bne.n	800717e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007138:	f000 f916 	bl	8007368 <prvIsQueueEmpty>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d017      	beq.n	8007172 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007144:	3324      	adds	r3, #36	@ 0x24
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fdd8 	bl	8007d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007152:	f000 f8b7 	bl	80072c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007156:	f000 fc05 	bl	8007964 <xTaskResumeAll>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d189      	bne.n	8007074 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007160:	4b0f      	ldr	r3, [pc, #60]	@ (80071a0 <xQueueReceive+0x1c0>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	e780      	b.n	8007074 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007174:	f000 f8a6 	bl	80072c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007178:	f000 fbf4 	bl	8007964 <xTaskResumeAll>
 800717c:	e77a      	b.n	8007074 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800717e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007180:	f000 f8a0 	bl	80072c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007184:	f000 fbee 	bl	8007964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800718a:	f000 f8ed 	bl	8007368 <prvIsQueueEmpty>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	f43f af6f 	beq.w	8007074 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007196:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007198:	4618      	mov	r0, r3
 800719a:	3730      	adds	r7, #48	@ 0x30
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10d      	bne.n	80071de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d14d      	bne.n	8007266 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 ffcc 	bl	800816c <xTaskPriorityDisinherit>
 80071d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	609a      	str	r2, [r3, #8]
 80071dc:	e043      	b.n	8007266 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d119      	bne.n	8007218 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6858      	ldr	r0, [r3, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	461a      	mov	r2, r3
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	f002 f9ff 	bl	80095f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fc:	441a      	add	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	d32b      	bcc.n	8007266 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	e026      	b.n	8007266 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68d8      	ldr	r0, [r3, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007220:	461a      	mov	r2, r3
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	f002 f9e5 	bl	80095f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007230:	425b      	negs	r3, r3
 8007232:	441a      	add	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d207      	bcs.n	8007254 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724c:	425b      	negs	r3, r3
 800724e:	441a      	add	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d105      	bne.n	8007266 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	3b01      	subs	r3, #1
 8007264:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800726e:	697b      	ldr	r3, [r7, #20]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d018      	beq.n	80072bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007292:	441a      	add	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d303      	bcc.n	80072ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68d9      	ldr	r1, [r3, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b4:	461a      	mov	r2, r3
 80072b6:	6838      	ldr	r0, [r7, #0]
 80072b8:	f002 f99b 	bl	80095f2 <memcpy>
	}
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072cc:	f7ff fabc 	bl	8006848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072d8:	e011      	b.n	80072fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d012      	beq.n	8007308 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3324      	adds	r3, #36	@ 0x24
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fd5c 	bl	8007da4 <xTaskRemoveFromEventList>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072f2:	f000 fe35 	bl	8007f60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	dce9      	bgt.n	80072da <prvUnlockQueue+0x16>
 8007306:	e000      	b.n	800730a <prvUnlockQueue+0x46>
					break;
 8007308:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	22ff      	movs	r2, #255	@ 0xff
 800730e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007312:	f7ff facb 	bl	80068ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007316:	f7ff fa97 	bl	8006848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007320:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007322:	e011      	b.n	8007348 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d012      	beq.n	8007352 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3310      	adds	r3, #16
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fd37 	bl	8007da4 <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800733c:	f000 fe10 	bl	8007f60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	3b01      	subs	r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dce9      	bgt.n	8007324 <prvUnlockQueue+0x60>
 8007350:	e000      	b.n	8007354 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007352:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	22ff      	movs	r2, #255	@ 0xff
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800735c:	f7ff faa6 	bl	80068ac <vPortExitCritical>
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007370:	f7ff fa6a 	bl	8006848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800737c:	2301      	movs	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e001      	b.n	8007386 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007386:	f7ff fa91 	bl	80068ac <vPortExitCritical>

	return xReturn;
 800738a:	68fb      	ldr	r3, [r7, #12]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800739c:	f7ff fa54 	bl	8006848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d102      	bne.n	80073b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e001      	b.n	80073b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073b6:	f7ff fa79 	bl	80068ac <vPortExitCritical>

	return xReturn;
 80073ba:	68fb      	ldr	r3, [r7, #12]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e014      	b.n	80073fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073d4:	4a0f      	ldr	r2, [pc, #60]	@ (8007414 <vQueueAddToRegistry+0x50>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10b      	bne.n	80073f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073e0:	490c      	ldr	r1, [pc, #48]	@ (8007414 <vQueueAddToRegistry+0x50>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007414 <vQueueAddToRegistry+0x50>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4413      	add	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073f6:	e006      	b.n	8007406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b07      	cmp	r3, #7
 8007402:	d9e7      	bls.n	80073d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	240046ac 	.word	0x240046ac

08007418 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007428:	f7ff fa0e 	bl	8006848 <vPortEnterCritical>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007432:	b25b      	sxtb	r3, r3
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d103      	bne.n	8007442 <vQueueWaitForMessageRestricted+0x2a>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007448:	b25b      	sxtb	r3, r3
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d103      	bne.n	8007458 <vQueueWaitForMessageRestricted+0x40>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007458:	f7ff fa28 	bl	80068ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3324      	adds	r3, #36	@ 0x24
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fc6d 	bl	8007d4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007472:	6978      	ldr	r0, [r7, #20]
 8007474:	f7ff ff26 	bl	80072c4 <prvUnlockQueue>
	}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	@ 0x38
 8007484:	af04      	add	r7, sp, #16
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800748e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10b      	bne.n	80074ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	623b      	str	r3, [r7, #32]
}
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
 80074aa:	e7fd      	b.n	80074a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	61fb      	str	r3, [r7, #28]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ca:	23a8      	movs	r3, #168	@ 0xa8
 80074cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2ba8      	cmp	r3, #168	@ 0xa8
 80074d2:	d00b      	beq.n	80074ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	61bb      	str	r3, [r7, #24]
}
 80074e6:	bf00      	nop
 80074e8:	bf00      	nop
 80074ea:	e7fd      	b.n	80074e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01e      	beq.n	8007532 <xTaskCreateStatic+0xb2>
 80074f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d01b      	beq.n	8007532 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007502:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	2202      	movs	r2, #2
 8007508:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800750c:	2300      	movs	r3, #0
 800750e:	9303      	str	r3, [sp, #12]
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	9302      	str	r3, [sp, #8]
 8007514:	f107 0314 	add.w	r3, r7, #20
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f851 	bl	80075cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800752a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800752c:	f000 f8f6 	bl	800771c <prvAddNewTaskToReadyList>
 8007530:	e001      	b.n	8007536 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007536:	697b      	ldr	r3, [r7, #20]
	}
 8007538:	4618      	mov	r0, r3
 800753a:	3728      	adds	r7, #40	@ 0x28
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08c      	sub	sp, #48	@ 0x30
 8007544:	af04      	add	r7, sp, #16
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	4613      	mov	r3, r2
 800754e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fda3 	bl	80060a0 <pvPortMalloc>
 800755a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00e      	beq.n	8007580 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007562:	20a8      	movs	r0, #168	@ 0xa8
 8007564:	f7fe fd9c 	bl	80060a0 <pvPortMalloc>
 8007568:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	631a      	str	r2, [r3, #48]	@ 0x30
 8007576:	e005      	b.n	8007584 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007578:	6978      	ldr	r0, [r7, #20]
 800757a:	f7fe fe5f 	bl	800623c <vPortFree>
 800757e:	e001      	b.n	8007584 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d017      	beq.n	80075ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	2300      	movs	r3, #0
 8007596:	9303      	str	r3, [sp, #12]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	9302      	str	r3, [sp, #8]
 800759c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f80f 	bl	80075cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075ae:	69f8      	ldr	r0, [r7, #28]
 80075b0:	f000 f8b4 	bl	800771c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075b4:	2301      	movs	r3, #1
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	e002      	b.n	80075c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075c0:	69bb      	ldr	r3, [r7, #24]
	}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	461a      	mov	r2, r3
 80075e4:	21a5      	movs	r1, #165	@ 0xa5
 80075e6:	f001 ff2e 	bl	8009446 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80075f4:	440b      	add	r3, r1
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f023 0307 	bic.w	r3, r3, #7
 8007602:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	617b      	str	r3, [r7, #20]
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	e7fd      	b.n	8007622 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01f      	beq.n	800766c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
 8007630:	e012      	b.n	8007658 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	4413      	add	r3, r2
 8007638:	7819      	ldrb	r1, [r3, #0]
 800763a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	3334      	adds	r3, #52	@ 0x34
 8007642:	460a      	mov	r2, r1
 8007644:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	3301      	adds	r3, #1
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	2b0f      	cmp	r3, #15
 800765c:	d9e9      	bls.n	8007632 <prvInitialiseNewTask+0x66>
 800765e:	e000      	b.n	8007662 <prvInitialiseNewTask+0x96>
			{
				break;
 8007660:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800766a:	e003      	b.n	8007674 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007676:	2b37      	cmp	r3, #55	@ 0x37
 8007678:	d901      	bls.n	800767e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800767a:	2337      	movs	r3, #55	@ 0x37
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007682:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007688:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	2200      	movs	r2, #0
 800768e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007692:	3304      	adds	r3, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe ff11 	bl	80064bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	3318      	adds	r3, #24
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe ff0c 	bl	80064bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	3354      	adds	r3, #84	@ 0x54
 80076ce:	224c      	movs	r2, #76	@ 0x4c
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 feb7 	bl	8009446 <memset>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	4a0d      	ldr	r2, [pc, #52]	@ (8007710 <prvInitialiseNewTask+0x144>)
 80076dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007714 <prvInitialiseNewTask+0x148>)
 80076e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007718 <prvInitialiseNewTask+0x14c>)
 80076e8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	68f9      	ldr	r1, [r7, #12]
 80076ee:	69b8      	ldr	r0, [r7, #24]
 80076f0:	f7fe ff78 	bl	80065e4 <pxPortInitialiseStack>
 80076f4:	4602      	mov	r2, r0
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007706:	bf00      	nop
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	24004d18 	.word	0x24004d18
 8007714:	24004d80 	.word	0x24004d80
 8007718:	24004de8 	.word	0x24004de8

0800771c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007724:	f7ff f890 	bl	8006848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007728:	4b2d      	ldr	r3, [pc, #180]	@ (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	4a2c      	ldr	r2, [pc, #176]	@ (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 8007730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007732:	4b2c      	ldr	r3, [pc, #176]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800773a:	4a2a      	ldr	r2, [pc, #168]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007740:	4b27      	ldr	r3, [pc, #156]	@ (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d110      	bne.n	800776a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007748:	f000 fc2e 	bl	8007fa8 <prvInitialiseTaskLists>
 800774c:	e00d      	b.n	800776a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800774e:	4b26      	ldr	r3, [pc, #152]	@ (80077e8 <prvAddNewTaskToReadyList+0xcc>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007756:	4b23      	ldr	r3, [pc, #140]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007760:	429a      	cmp	r2, r3
 8007762:	d802      	bhi.n	800776a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007764:	4a1f      	ldr	r2, [pc, #124]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800776a:	4b20      	ldr	r3, [pc, #128]	@ (80077ec <prvAddNewTaskToReadyList+0xd0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3301      	adds	r3, #1
 8007770:	4a1e      	ldr	r2, [pc, #120]	@ (80077ec <prvAddNewTaskToReadyList+0xd0>)
 8007772:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007774:	4b1d      	ldr	r3, [pc, #116]	@ (80077ec <prvAddNewTaskToReadyList+0xd0>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007780:	4b1b      	ldr	r3, [pc, #108]	@ (80077f0 <prvAddNewTaskToReadyList+0xd4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d903      	bls.n	8007790 <prvAddNewTaskToReadyList+0x74>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778c:	4a18      	ldr	r2, [pc, #96]	@ (80077f0 <prvAddNewTaskToReadyList+0xd4>)
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4a15      	ldr	r2, [pc, #84]	@ (80077f4 <prvAddNewTaskToReadyList+0xd8>)
 800779e:	441a      	add	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe fe95 	bl	80064d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077ac:	f7ff f87e 	bl	80068ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077b0:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <prvAddNewTaskToReadyList+0xcc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077b8:	4b0a      	ldr	r3, [pc, #40]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d207      	bcs.n	80077d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077c6:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <prvAddNewTaskToReadyList+0xdc>)
 80077c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	24004bc0 	.word	0x24004bc0
 80077e4:	240046ec 	.word	0x240046ec
 80077e8:	24004bcc 	.word	0x24004bcc
 80077ec:	24004bdc 	.word	0x24004bdc
 80077f0:	24004bc8 	.word	0x24004bc8
 80077f4:	240046f0 	.word	0x240046f0
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800780e:	4b14      	ldr	r3, [pc, #80]	@ (8007860 <vTaskDelay+0x64>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00b      	beq.n	800782e <vTaskDelay+0x32>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800782e:	f000 f88b 	bl	8007948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007832:	2100      	movs	r1, #0
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fd09 	bl	800824c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800783a:	f000 f893 	bl	8007964 <xTaskResumeAll>
 800783e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d107      	bne.n	8007856 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007846:	4b07      	ldr	r3, [pc, #28]	@ (8007864 <vTaskDelay+0x68>)
 8007848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	24004be8 	.word	0x24004be8
 8007864:	e000ed04 	.word	0xe000ed04

08007868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08a      	sub	sp, #40	@ 0x28
 800786c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007872:	2300      	movs	r3, #0
 8007874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007876:	463a      	mov	r2, r7
 8007878:	1d39      	adds	r1, r7, #4
 800787a:	f107 0308 	add.w	r3, r7, #8
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fbda 	bl	8006038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	9202      	str	r2, [sp, #8]
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	2300      	movs	r3, #0
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	2300      	movs	r3, #0
 8007894:	460a      	mov	r2, r1
 8007896:	4924      	ldr	r1, [pc, #144]	@ (8007928 <vTaskStartScheduler+0xc0>)
 8007898:	4824      	ldr	r0, [pc, #144]	@ (800792c <vTaskStartScheduler+0xc4>)
 800789a:	f7ff fdf1 	bl	8007480 <xTaskCreateStatic>
 800789e:	4603      	mov	r3, r0
 80078a0:	4a23      	ldr	r2, [pc, #140]	@ (8007930 <vTaskStartScheduler+0xc8>)
 80078a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078a4:	4b22      	ldr	r3, [pc, #136]	@ (8007930 <vTaskStartScheduler+0xc8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078ac:	2301      	movs	r3, #1
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	e001      	b.n	80078b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d102      	bne.n	80078c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078bc:	f000 fd1a 	bl	80082f4 <xTimerCreateTimerTask>
 80078c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d11b      	bne.n	8007900 <vTaskStartScheduler+0x98>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	613b      	str	r3, [r7, #16]
}
 80078da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078dc:	4b15      	ldr	r3, [pc, #84]	@ (8007934 <vTaskStartScheduler+0xcc>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3354      	adds	r3, #84	@ 0x54
 80078e2:	4a15      	ldr	r2, [pc, #84]	@ (8007938 <vTaskStartScheduler+0xd0>)
 80078e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078e6:	4b15      	ldr	r3, [pc, #84]	@ (800793c <vTaskStartScheduler+0xd4>)
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078ee:	4b14      	ldr	r3, [pc, #80]	@ (8007940 <vTaskStartScheduler+0xd8>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078f4:	4b13      	ldr	r3, [pc, #76]	@ (8007944 <vTaskStartScheduler+0xdc>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078fa:	f7fe ff01 	bl	8006700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078fe:	e00f      	b.n	8007920 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d10b      	bne.n	8007920 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	60fb      	str	r3, [r7, #12]
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	e7fd      	b.n	800791c <vTaskStartScheduler+0xb4>
}
 8007920:	bf00      	nop
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	0800b2a8 	.word	0x0800b2a8
 800792c:	08007f79 	.word	0x08007f79
 8007930:	24004be4 	.word	0x24004be4
 8007934:	240046ec 	.word	0x240046ec
 8007938:	24000020 	.word	0x24000020
 800793c:	24004be0 	.word	0x24004be0
 8007940:	24004bcc 	.word	0x24004bcc
 8007944:	24004bc4 	.word	0x24004bc4

08007948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800794c:	4b04      	ldr	r3, [pc, #16]	@ (8007960 <vTaskSuspendAll+0x18>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	4a03      	ldr	r2, [pc, #12]	@ (8007960 <vTaskSuspendAll+0x18>)
 8007954:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007956:	bf00      	nop
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	24004be8 	.word	0x24004be8

08007964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007972:	4b42      	ldr	r3, [pc, #264]	@ (8007a7c <xTaskResumeAll+0x118>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10b      	bne.n	8007992 <xTaskResumeAll+0x2e>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	603b      	str	r3, [r7, #0]
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	e7fd      	b.n	800798e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007992:	f7fe ff59 	bl	8006848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007996:	4b39      	ldr	r3, [pc, #228]	@ (8007a7c <xTaskResumeAll+0x118>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3b01      	subs	r3, #1
 800799c:	4a37      	ldr	r2, [pc, #220]	@ (8007a7c <xTaskResumeAll+0x118>)
 800799e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079a0:	4b36      	ldr	r3, [pc, #216]	@ (8007a7c <xTaskResumeAll+0x118>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d162      	bne.n	8007a6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079a8:	4b35      	ldr	r3, [pc, #212]	@ (8007a80 <xTaskResumeAll+0x11c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d05e      	beq.n	8007a6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b0:	e02f      	b.n	8007a12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b2:	4b34      	ldr	r3, [pc, #208]	@ (8007a84 <xTaskResumeAll+0x120>)
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3318      	adds	r3, #24
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fde6 	bl	8006590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe fde1 	bl	8006590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007a88 <xTaskResumeAll+0x124>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d903      	bls.n	80079e2 <xTaskResumeAll+0x7e>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079de:	4a2a      	ldr	r2, [pc, #168]	@ (8007a88 <xTaskResumeAll+0x124>)
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4a27      	ldr	r2, [pc, #156]	@ (8007a8c <xTaskResumeAll+0x128>)
 80079f0:	441a      	add	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3304      	adds	r3, #4
 80079f6:	4619      	mov	r1, r3
 80079f8:	4610      	mov	r0, r2
 80079fa:	f7fe fd6c 	bl	80064d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a02:	4b23      	ldr	r3, [pc, #140]	@ (8007a90 <xTaskResumeAll+0x12c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d302      	bcc.n	8007a12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007a0c:	4b21      	ldr	r3, [pc, #132]	@ (8007a94 <xTaskResumeAll+0x130>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a12:	4b1c      	ldr	r3, [pc, #112]	@ (8007a84 <xTaskResumeAll+0x120>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1cb      	bne.n	80079b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a20:	f000 fb66 	bl	80080f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a24:	4b1c      	ldr	r3, [pc, #112]	@ (8007a98 <xTaskResumeAll+0x134>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d010      	beq.n	8007a52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a30:	f000 f846 	bl	8007ac0 <xTaskIncrementTick>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007a3a:	4b16      	ldr	r3, [pc, #88]	@ (8007a94 <xTaskResumeAll+0x130>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1f1      	bne.n	8007a30 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007a4c:	4b12      	ldr	r3, [pc, #72]	@ (8007a98 <xTaskResumeAll+0x134>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a52:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <xTaskResumeAll+0x130>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a9c <xTaskResumeAll+0x138>)
 8007a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a6e:	f7fe ff1d 	bl	80068ac <vPortExitCritical>

	return xAlreadyYielded;
 8007a72:	68bb      	ldr	r3, [r7, #8]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	24004be8 	.word	0x24004be8
 8007a80:	24004bc0 	.word	0x24004bc0
 8007a84:	24004b80 	.word	0x24004b80
 8007a88:	24004bc8 	.word	0x24004bc8
 8007a8c:	240046f0 	.word	0x240046f0
 8007a90:	240046ec 	.word	0x240046ec
 8007a94:	24004bd4 	.word	0x24004bd4
 8007a98:	24004bd0 	.word	0x24004bd0
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007aa6:	4b05      	ldr	r3, [pc, #20]	@ (8007abc <xTaskGetTickCount+0x1c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007aac:	687b      	ldr	r3, [r7, #4]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	24004bc4 	.word	0x24004bc4

08007ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aca:	4b4f      	ldr	r3, [pc, #316]	@ (8007c08 <xTaskIncrementTick+0x148>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 8090 	bne.w	8007bf4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8007c0c <xTaskIncrementTick+0x14c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007adc:	4a4b      	ldr	r2, [pc, #300]	@ (8007c0c <xTaskIncrementTick+0x14c>)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d121      	bne.n	8007b2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ae8:	4b49      	ldr	r3, [pc, #292]	@ (8007c10 <xTaskIncrementTick+0x150>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	603b      	str	r3, [r7, #0]
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <xTaskIncrementTick+0x46>
 8007b0a:	4b41      	ldr	r3, [pc, #260]	@ (8007c10 <xTaskIncrementTick+0x150>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	4b40      	ldr	r3, [pc, #256]	@ (8007c14 <xTaskIncrementTick+0x154>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a3e      	ldr	r2, [pc, #248]	@ (8007c10 <xTaskIncrementTick+0x150>)
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	4a3e      	ldr	r2, [pc, #248]	@ (8007c14 <xTaskIncrementTick+0x154>)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c18 <xTaskIncrementTick+0x158>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	4a3c      	ldr	r2, [pc, #240]	@ (8007c18 <xTaskIncrementTick+0x158>)
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	f000 fae2 	bl	80080f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c1c <xTaskIncrementTick+0x15c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d349      	bcc.n	8007bca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b36:	4b36      	ldr	r3, [pc, #216]	@ (8007c10 <xTaskIncrementTick+0x150>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b40:	4b36      	ldr	r3, [pc, #216]	@ (8007c1c <xTaskIncrementTick+0x15c>)
 8007b42:	f04f 32ff 	mov.w	r2, #4294967295
 8007b46:	601a      	str	r2, [r3, #0]
					break;
 8007b48:	e03f      	b.n	8007bca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4a:	4b31      	ldr	r3, [pc, #196]	@ (8007c10 <xTaskIncrementTick+0x150>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d203      	bcs.n	8007b6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b62:	4a2e      	ldr	r2, [pc, #184]	@ (8007c1c <xTaskIncrementTick+0x15c>)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b68:	e02f      	b.n	8007bca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fd0e 	bl	8006590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	3318      	adds	r3, #24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fd05 	bl	8006590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8a:	4b25      	ldr	r3, [pc, #148]	@ (8007c20 <xTaskIncrementTick+0x160>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d903      	bls.n	8007b9a <xTaskIncrementTick+0xda>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b96:	4a22      	ldr	r2, [pc, #136]	@ (8007c20 <xTaskIncrementTick+0x160>)
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c24 <xTaskIncrementTick+0x164>)
 8007ba8:	441a      	add	r2, r3
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7fe fc90 	bl	80064d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bba:	4b1b      	ldr	r3, [pc, #108]	@ (8007c28 <xTaskIncrementTick+0x168>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d3b8      	bcc.n	8007b36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc8:	e7b5      	b.n	8007b36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bca:	4b17      	ldr	r3, [pc, #92]	@ (8007c28 <xTaskIncrementTick+0x168>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd0:	4914      	ldr	r1, [pc, #80]	@ (8007c24 <xTaskIncrementTick+0x164>)
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d901      	bls.n	8007be6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007be2:	2301      	movs	r3, #1
 8007be4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007be6:	4b11      	ldr	r3, [pc, #68]	@ (8007c2c <xTaskIncrementTick+0x16c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d007      	beq.n	8007bfe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	e004      	b.n	8007bfe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c30 <xTaskIncrementTick+0x170>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8007c30 <xTaskIncrementTick+0x170>)
 8007bfc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bfe:	697b      	ldr	r3, [r7, #20]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	24004be8 	.word	0x24004be8
 8007c0c:	24004bc4 	.word	0x24004bc4
 8007c10:	24004b78 	.word	0x24004b78
 8007c14:	24004b7c 	.word	0x24004b7c
 8007c18:	24004bd8 	.word	0x24004bd8
 8007c1c:	24004be0 	.word	0x24004be0
 8007c20:	24004bc8 	.word	0x24004bc8
 8007c24:	240046f0 	.word	0x240046f0
 8007c28:	240046ec 	.word	0x240046ec
 8007c2c:	24004bd4 	.word	0x24004bd4
 8007c30:	24004bd0 	.word	0x24004bd0

08007c34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ce8 <vTaskSwitchContext+0xb4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c42:	4b2a      	ldr	r3, [pc, #168]	@ (8007cec <vTaskSwitchContext+0xb8>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c48:	e047      	b.n	8007cda <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007c4a:	4b28      	ldr	r3, [pc, #160]	@ (8007cec <vTaskSwitchContext+0xb8>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c50:	4b27      	ldr	r3, [pc, #156]	@ (8007cf0 <vTaskSwitchContext+0xbc>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	e011      	b.n	8007c7c <vTaskSwitchContext+0x48>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10b      	bne.n	8007c76 <vTaskSwitchContext+0x42>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <vTaskSwitchContext+0x3e>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	491d      	ldr	r1, [pc, #116]	@ (8007cf4 <vTaskSwitchContext+0xc0>)
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0e3      	beq.n	8007c58 <vTaskSwitchContext+0x24>
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4a16      	ldr	r2, [pc, #88]	@ (8007cf4 <vTaskSwitchContext+0xc0>)
 8007c9c:	4413      	add	r3, r2
 8007c9e:	60bb      	str	r3, [r7, #8]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	605a      	str	r2, [r3, #4]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d104      	bne.n	8007cc0 <vTaskSwitchContext+0x8c>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	605a      	str	r2, [r3, #4]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8007cf8 <vTaskSwitchContext+0xc4>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	4a09      	ldr	r2, [pc, #36]	@ (8007cf0 <vTaskSwitchContext+0xbc>)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cd0:	4b09      	ldr	r3, [pc, #36]	@ (8007cf8 <vTaskSwitchContext+0xc4>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3354      	adds	r3, #84	@ 0x54
 8007cd6:	4a09      	ldr	r2, [pc, #36]	@ (8007cfc <vTaskSwitchContext+0xc8>)
 8007cd8:	6013      	str	r3, [r2, #0]
}
 8007cda:	bf00      	nop
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	24004be8 	.word	0x24004be8
 8007cec:	24004bd4 	.word	0x24004bd4
 8007cf0:	24004bc8 	.word	0x24004bc8
 8007cf4:	240046f0 	.word	0x240046f0
 8007cf8:	240046ec 	.word	0x240046ec
 8007cfc:	24000020 	.word	0x24000020

08007d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	60fb      	str	r3, [r7, #12]
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	e7fd      	b.n	8007d24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d28:	4b07      	ldr	r3, [pc, #28]	@ (8007d48 <vTaskPlaceOnEventList+0x48>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fe fbf4 	bl	800651e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d36:	2101      	movs	r1, #1
 8007d38:	6838      	ldr	r0, [r7, #0]
 8007d3a:	f000 fa87 	bl	800824c <prvAddCurrentTaskToDelayedList>
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	240046ec 	.word	0x240046ec

08007d4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10b      	bne.n	8007d76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	617b      	str	r3, [r7, #20]
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d76:	4b0a      	ldr	r3, [pc, #40]	@ (8007da0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3318      	adds	r3, #24
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7fe fba9 	bl	80064d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	68b8      	ldr	r0, [r7, #8]
 8007d94:	f000 fa5a 	bl	800824c <prvAddCurrentTaskToDelayedList>
	}
 8007d98:	bf00      	nop
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	240046ec 	.word	0x240046ec

08007da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	60fb      	str	r3, [r7, #12]
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	e7fd      	b.n	8007dce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3318      	adds	r3, #24
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe fbda 	bl	8006590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8007e54 <xTaskRemoveFromEventList+0xb0>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11d      	bne.n	8007e20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fbd1 	bl	8006590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df2:	4b19      	ldr	r3, [pc, #100]	@ (8007e58 <xTaskRemoveFromEventList+0xb4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d903      	bls.n	8007e02 <xTaskRemoveFromEventList+0x5e>
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfe:	4a16      	ldr	r2, [pc, #88]	@ (8007e58 <xTaskRemoveFromEventList+0xb4>)
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4a13      	ldr	r2, [pc, #76]	@ (8007e5c <xTaskRemoveFromEventList+0xb8>)
 8007e10:	441a      	add	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3304      	adds	r3, #4
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f7fe fb5c 	bl	80064d6 <vListInsertEnd>
 8007e1e:	e005      	b.n	8007e2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3318      	adds	r3, #24
 8007e24:	4619      	mov	r1, r3
 8007e26:	480e      	ldr	r0, [pc, #56]	@ (8007e60 <xTaskRemoveFromEventList+0xbc>)
 8007e28:	f7fe fb55 	bl	80064d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e30:	4b0c      	ldr	r3, [pc, #48]	@ (8007e64 <xTaskRemoveFromEventList+0xc0>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d905      	bls.n	8007e46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e68 <xTaskRemoveFromEventList+0xc4>)
 8007e40:	2201      	movs	r2, #1
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	e001      	b.n	8007e4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e4a:	697b      	ldr	r3, [r7, #20]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	24004be8 	.word	0x24004be8
 8007e58:	24004bc8 	.word	0x24004bc8
 8007e5c:	240046f0 	.word	0x240046f0
 8007e60:	24004b80 	.word	0x24004b80
 8007e64:	240046ec 	.word	0x240046ec
 8007e68:	24004bd4 	.word	0x24004bd4

08007e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e74:	4b06      	ldr	r3, [pc, #24]	@ (8007e90 <vTaskInternalSetTimeOutState+0x24>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e7c:	4b05      	ldr	r3, [pc, #20]	@ (8007e94 <vTaskInternalSetTimeOutState+0x28>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	605a      	str	r2, [r3, #4]
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	24004bd8 	.word	0x24004bd8
 8007e94:	24004bc4 	.word	0x24004bc4

08007e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10b      	bne.n	8007ec0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	613b      	str	r3, [r7, #16]
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	e7fd      	b.n	8007ebc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	60fb      	str	r3, [r7, #12]
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	e7fd      	b.n	8007eda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007ede:	f7fe fcb3 	bl	8006848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8007f58 <xTaskCheckForTimeOut+0xc0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d102      	bne.n	8007f02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	e023      	b.n	8007f4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4b15      	ldr	r3, [pc, #84]	@ (8007f5c <xTaskCheckForTimeOut+0xc4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d007      	beq.n	8007f1e <xTaskCheckForTimeOut+0x86>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d302      	bcc.n	8007f1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	61fb      	str	r3, [r7, #28]
 8007f1c:	e015      	b.n	8007f4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d20b      	bcs.n	8007f40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	1ad2      	subs	r2, r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff ff99 	bl	8007e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
 8007f3e:	e004      	b.n	8007f4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f46:	2301      	movs	r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f4a:	f7fe fcaf 	bl	80068ac <vPortExitCritical>

	return xReturn;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3720      	adds	r7, #32
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	24004bc4 	.word	0x24004bc4
 8007f5c:	24004bd8 	.word	0x24004bd8

08007f60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f64:	4b03      	ldr	r3, [pc, #12]	@ (8007f74 <vTaskMissedYield+0x14>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
}
 8007f6a:	bf00      	nop
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	24004bd4 	.word	0x24004bd4

08007f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f80:	f000 f852 	bl	8008028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f84:	4b06      	ldr	r3, [pc, #24]	@ (8007fa0 <prvIdleTask+0x28>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d9f9      	bls.n	8007f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f8c:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <prvIdleTask+0x2c>)
 8007f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f9c:	e7f0      	b.n	8007f80 <prvIdleTask+0x8>
 8007f9e:	bf00      	nop
 8007fa0:	240046f0 	.word	0x240046f0
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fae:	2300      	movs	r3, #0
 8007fb0:	607b      	str	r3, [r7, #4]
 8007fb2:	e00c      	b.n	8007fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4a12      	ldr	r2, [pc, #72]	@ (8008008 <prvInitialiseTaskLists+0x60>)
 8007fc0:	4413      	add	r3, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fa5a 	bl	800647c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	607b      	str	r3, [r7, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b37      	cmp	r3, #55	@ 0x37
 8007fd2:	d9ef      	bls.n	8007fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fd4:	480d      	ldr	r0, [pc, #52]	@ (800800c <prvInitialiseTaskLists+0x64>)
 8007fd6:	f7fe fa51 	bl	800647c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fda:	480d      	ldr	r0, [pc, #52]	@ (8008010 <prvInitialiseTaskLists+0x68>)
 8007fdc:	f7fe fa4e 	bl	800647c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fe0:	480c      	ldr	r0, [pc, #48]	@ (8008014 <prvInitialiseTaskLists+0x6c>)
 8007fe2:	f7fe fa4b 	bl	800647c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fe6:	480c      	ldr	r0, [pc, #48]	@ (8008018 <prvInitialiseTaskLists+0x70>)
 8007fe8:	f7fe fa48 	bl	800647c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fec:	480b      	ldr	r0, [pc, #44]	@ (800801c <prvInitialiseTaskLists+0x74>)
 8007fee:	f7fe fa45 	bl	800647c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <prvInitialiseTaskLists+0x78>)
 8007ff4:	4a05      	ldr	r2, [pc, #20]	@ (800800c <prvInitialiseTaskLists+0x64>)
 8007ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <prvInitialiseTaskLists+0x7c>)
 8007ffa:	4a05      	ldr	r2, [pc, #20]	@ (8008010 <prvInitialiseTaskLists+0x68>)
 8007ffc:	601a      	str	r2, [r3, #0]
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	240046f0 	.word	0x240046f0
 800800c:	24004b50 	.word	0x24004b50
 8008010:	24004b64 	.word	0x24004b64
 8008014:	24004b80 	.word	0x24004b80
 8008018:	24004b94 	.word	0x24004b94
 800801c:	24004bac 	.word	0x24004bac
 8008020:	24004b78 	.word	0x24004b78
 8008024:	24004b7c 	.word	0x24004b7c

08008028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800802e:	e019      	b.n	8008064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008030:	f7fe fc0a 	bl	8006848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008034:	4b10      	ldr	r3, [pc, #64]	@ (8008078 <prvCheckTasksWaitingTermination+0x50>)
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	4618      	mov	r0, r3
 8008042:	f7fe faa5 	bl	8006590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <prvCheckTasksWaitingTermination+0x54>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3b01      	subs	r3, #1
 800804c:	4a0b      	ldr	r2, [pc, #44]	@ (800807c <prvCheckTasksWaitingTermination+0x54>)
 800804e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008050:	4b0b      	ldr	r3, [pc, #44]	@ (8008080 <prvCheckTasksWaitingTermination+0x58>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3b01      	subs	r3, #1
 8008056:	4a0a      	ldr	r2, [pc, #40]	@ (8008080 <prvCheckTasksWaitingTermination+0x58>)
 8008058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800805a:	f7fe fc27 	bl	80068ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f810 	bl	8008084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008064:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <prvCheckTasksWaitingTermination+0x58>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e1      	bne.n	8008030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	24004b94 	.word	0x24004b94
 800807c:	24004bc0 	.word	0x24004bc0
 8008080:	24004ba8 	.word	0x24004ba8

08008084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3354      	adds	r3, #84	@ 0x54
 8008090:	4618      	mov	r0, r3
 8008092:	f001 f9f5 	bl	8009480 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800809c:	2b00      	cmp	r3, #0
 800809e:	d108      	bne.n	80080b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe f8c9 	bl	800623c <vPortFree>
				vPortFree( pxTCB );
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fe f8c6 	bl	800623c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080b0:	e019      	b.n	80080e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d103      	bne.n	80080c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7fe f8bd 	bl	800623c <vPortFree>
	}
 80080c2:	e010      	b.n	80080e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d00b      	beq.n	80080e6 <prvDeleteTCB+0x62>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60fb      	str	r3, [r7, #12]
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	e7fd      	b.n	80080e2 <prvDeleteTCB+0x5e>
	}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008128 <prvResetNextTaskUnblockTime+0x38>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008100:	4b0a      	ldr	r3, [pc, #40]	@ (800812c <prvResetNextTaskUnblockTime+0x3c>)
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008108:	e008      	b.n	800811c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810a:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <prvResetNextTaskUnblockTime+0x38>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4a04      	ldr	r2, [pc, #16]	@ (800812c <prvResetNextTaskUnblockTime+0x3c>)
 800811a:	6013      	str	r3, [r2, #0]
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	24004b78 	.word	0x24004b78
 800812c:	24004be0 	.word	0x24004be0

08008130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008136:	4b0b      	ldr	r3, [pc, #44]	@ (8008164 <xTaskGetSchedulerState+0x34>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800813e:	2301      	movs	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	e008      	b.n	8008156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008144:	4b08      	ldr	r3, [pc, #32]	@ (8008168 <xTaskGetSchedulerState+0x38>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800814c:	2302      	movs	r3, #2
 800814e:	607b      	str	r3, [r7, #4]
 8008150:	e001      	b.n	8008156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008156:	687b      	ldr	r3, [r7, #4]
	}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	24004bcc 	.word	0x24004bcc
 8008168:	24004be8 	.word	0x24004be8

0800816c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d058      	beq.n	8008234 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008182:	4b2f      	ldr	r3, [pc, #188]	@ (8008240 <xTaskPriorityDisinherit+0xd4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	429a      	cmp	r2, r3
 800818a:	d00b      	beq.n	80081a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60fb      	str	r3, [r7, #12]
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	e7fd      	b.n	80081a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	60bb      	str	r3, [r7, #8]
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c8:	1e5a      	subs	r2, r3, #1
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d02c      	beq.n	8008234 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d128      	bne.n	8008234 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe f9d2 	bl	8006590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008204:	4b0f      	ldr	r3, [pc, #60]	@ (8008244 <xTaskPriorityDisinherit+0xd8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d903      	bls.n	8008214 <xTaskPriorityDisinherit+0xa8>
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008210:	4a0c      	ldr	r2, [pc, #48]	@ (8008244 <xTaskPriorityDisinherit+0xd8>)
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4a09      	ldr	r2, [pc, #36]	@ (8008248 <xTaskPriorityDisinherit+0xdc>)
 8008222:	441a      	add	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3304      	adds	r3, #4
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f7fe f953 	bl	80064d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008230:	2301      	movs	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008234:	697b      	ldr	r3, [r7, #20]
	}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	240046ec 	.word	0x240046ec
 8008244:	24004bc8 	.word	0x24004bc8
 8008248:	240046f0 	.word	0x240046f0

0800824c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008256:	4b21      	ldr	r3, [pc, #132]	@ (80082dc <prvAddCurrentTaskToDelayedList+0x90>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800825c:	4b20      	ldr	r3, [pc, #128]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3304      	adds	r3, #4
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe f994 	bl	8006590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d10a      	bne.n	8008286 <prvAddCurrentTaskToDelayedList+0x3a>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008276:	4b1a      	ldr	r3, [pc, #104]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4819      	ldr	r0, [pc, #100]	@ (80082e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008280:	f7fe f929 	bl	80064d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008284:	e026      	b.n	80082d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4413      	add	r3, r2
 800828c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800828e:	4b14      	ldr	r3, [pc, #80]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	429a      	cmp	r2, r3
 800829c:	d209      	bcs.n	80082b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829e:	4b12      	ldr	r3, [pc, #72]	@ (80082e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	4b0f      	ldr	r3, [pc, #60]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f7fe f937 	bl	800651e <vListInsert>
}
 80082b0:	e010      	b.n	80082d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b2:	4b0e      	ldr	r3, [pc, #56]	@ (80082ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b0a      	ldr	r3, [pc, #40]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f7fe f92d 	bl	800651e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c4:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d202      	bcs.n	80082d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082ce:	4a08      	ldr	r2, [pc, #32]	@ (80082f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	6013      	str	r3, [r2, #0]
}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	24004bc4 	.word	0x24004bc4
 80082e0:	240046ec 	.word	0x240046ec
 80082e4:	24004bac 	.word	0x24004bac
 80082e8:	24004b7c 	.word	0x24004b7c
 80082ec:	24004b78 	.word	0x24004b78
 80082f0:	24004be0 	.word	0x24004be0

080082f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	@ 0x28
 80082f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082fe:	f000 fb13 	bl	8008928 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008302:	4b1d      	ldr	r3, [pc, #116]	@ (8008378 <xTimerCreateTimerTask+0x84>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d021      	beq.n	800834e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008312:	1d3a      	adds	r2, r7, #4
 8008314:	f107 0108 	add.w	r1, r7, #8
 8008318:	f107 030c 	add.w	r3, r7, #12
 800831c:	4618      	mov	r0, r3
 800831e:	f7fd fea5 	bl	800606c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	9202      	str	r2, [sp, #8]
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	2302      	movs	r3, #2
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2300      	movs	r3, #0
 8008332:	460a      	mov	r2, r1
 8008334:	4911      	ldr	r1, [pc, #68]	@ (800837c <xTimerCreateTimerTask+0x88>)
 8008336:	4812      	ldr	r0, [pc, #72]	@ (8008380 <xTimerCreateTimerTask+0x8c>)
 8008338:	f7ff f8a2 	bl	8007480 <xTaskCreateStatic>
 800833c:	4603      	mov	r3, r0
 800833e:	4a11      	ldr	r2, [pc, #68]	@ (8008384 <xTimerCreateTimerTask+0x90>)
 8008340:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008342:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <xTimerCreateTimerTask+0x90>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800834a:	2301      	movs	r3, #1
 800834c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	613b      	str	r3, [r7, #16]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800836c:	697b      	ldr	r3, [r7, #20]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	24004c1c 	.word	0x24004c1c
 800837c:	0800b2b0 	.word	0x0800b2b0
 8008380:	080084c1 	.word	0x080084c1
 8008384:	24004c20 	.word	0x24004c20

08008388 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	@ 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008396:	2300      	movs	r3, #0
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10b      	bne.n	80083b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	623b      	str	r3, [r7, #32]
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	e7fd      	b.n	80083b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083b8:	4b19      	ldr	r3, [pc, #100]	@ (8008420 <xTimerGenericCommand+0x98>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d02a      	beq.n	8008416 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b05      	cmp	r3, #5
 80083d0:	dc18      	bgt.n	8008404 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083d2:	f7ff fead 	bl	8008130 <xTaskGetSchedulerState>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d109      	bne.n	80083f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083dc:	4b10      	ldr	r3, [pc, #64]	@ (8008420 <xTimerGenericCommand+0x98>)
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	f107 0110 	add.w	r1, r7, #16
 80083e4:	2300      	movs	r3, #0
 80083e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e8:	f7fe fc5a 	bl	8006ca0 <xQueueGenericSend>
 80083ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80083ee:	e012      	b.n	8008416 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008420 <xTimerGenericCommand+0x98>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	f107 0110 	add.w	r1, r7, #16
 80083f8:	2300      	movs	r3, #0
 80083fa:	2200      	movs	r2, #0
 80083fc:	f7fe fc50 	bl	8006ca0 <xQueueGenericSend>
 8008400:	6278      	str	r0, [r7, #36]	@ 0x24
 8008402:	e008      	b.n	8008416 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008404:	4b06      	ldr	r3, [pc, #24]	@ (8008420 <xTimerGenericCommand+0x98>)
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	f107 0110 	add.w	r1, r7, #16
 800840c:	2300      	movs	r3, #0
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	f7fe fd48 	bl	8006ea4 <xQueueGenericSendFromISR>
 8008414:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008418:	4618      	mov	r0, r3
 800841a:	3728      	adds	r7, #40	@ 0x28
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	24004c1c 	.word	0x24004c1c

08008424 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af02      	add	r7, sp, #8
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842e:	4b23      	ldr	r3, [pc, #140]	@ (80084bc <prvProcessExpiredTimer+0x98>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	3304      	adds	r3, #4
 800843c:	4618      	mov	r0, r3
 800843e:	f7fe f8a7 	bl	8006590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d023      	beq.n	8008498 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	699a      	ldr	r2, [r3, #24]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	18d1      	adds	r1, r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	6978      	ldr	r0, [r7, #20]
 800845e:	f000 f8d5 	bl	800860c <prvInsertTimerInActiveList>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d020      	beq.n	80084aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008468:	2300      	movs	r3, #0
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	2300      	movs	r3, #0
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	2100      	movs	r1, #0
 8008472:	6978      	ldr	r0, [r7, #20]
 8008474:	f7ff ff88 	bl	8008388 <xTimerGenericCommand>
 8008478:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d114      	bne.n	80084aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	60fb      	str	r3, [r7, #12]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	6978      	ldr	r0, [r7, #20]
 80084b0:	4798      	blx	r3
}
 80084b2:	bf00      	nop
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	24004c14 	.word	0x24004c14

080084c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084c8:	f107 0308 	add.w	r3, r7, #8
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 f859 	bl	8008584 <prvGetNextExpireTime>
 80084d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4619      	mov	r1, r3
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f805 	bl	80084e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084de:	f000 f8d7 	bl	8008690 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084e2:	bf00      	nop
 80084e4:	e7f0      	b.n	80084c8 <prvTimerTask+0x8>
	...

080084e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084f2:	f7ff fa29 	bl	8007948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084f6:	f107 0308 	add.w	r3, r7, #8
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f866 	bl	80085cc <prvSampleTimeNow>
 8008500:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d130      	bne.n	800856a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <prvProcessTimerOrBlockTask+0x3c>
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	429a      	cmp	r2, r3
 8008514:	d806      	bhi.n	8008524 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008516:	f7ff fa25 	bl	8007964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff ff81 	bl	8008424 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008522:	e024      	b.n	800856e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d008      	beq.n	800853c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800852a:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <prvProcessTimerOrBlockTask+0x90>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <prvProcessTimerOrBlockTask+0x50>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <prvProcessTimerOrBlockTask+0x52>
 8008538:	2300      	movs	r3, #0
 800853a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800853c:	4b0f      	ldr	r3, [pc, #60]	@ (800857c <prvProcessTimerOrBlockTask+0x94>)
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	4619      	mov	r1, r3
 800854a:	f7fe ff65 	bl	8007418 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800854e:	f7ff fa09 	bl	8007964 <xTaskResumeAll>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008558:	4b09      	ldr	r3, [pc, #36]	@ (8008580 <prvProcessTimerOrBlockTask+0x98>)
 800855a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	f3bf 8f6f 	isb	sy
}
 8008568:	e001      	b.n	800856e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800856a:	f7ff f9fb 	bl	8007964 <xTaskResumeAll>
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	24004c18 	.word	0x24004c18
 800857c:	24004c1c 	.word	0x24004c1c
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800858c:	4b0e      	ldr	r3, [pc, #56]	@ (80085c8 <prvGetNextExpireTime+0x44>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <prvGetNextExpireTime+0x16>
 8008596:	2201      	movs	r2, #1
 8008598:	e000      	b.n	800859c <prvGetNextExpireTime+0x18>
 800859a:	2200      	movs	r2, #0
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085a8:	4b07      	ldr	r3, [pc, #28]	@ (80085c8 <prvGetNextExpireTime+0x44>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e001      	b.n	80085b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085b8:	68fb      	ldr	r3, [r7, #12]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	24004c14 	.word	0x24004c14

080085cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085d4:	f7ff fa64 	bl	8007aa0 <xTaskGetTickCount>
 80085d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085da:	4b0b      	ldr	r3, [pc, #44]	@ (8008608 <prvSampleTimeNow+0x3c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d205      	bcs.n	80085f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085e4:	f000 f93a 	bl	800885c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e002      	b.n	80085f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085f6:	4a04      	ldr	r2, [pc, #16]	@ (8008608 <prvSampleTimeNow+0x3c>)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085fc:	68fb      	ldr	r3, [r7, #12]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	24004c24 	.word	0x24004c24

0800860c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	429a      	cmp	r2, r3
 8008630:	d812      	bhi.n	8008658 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	429a      	cmp	r2, r3
 800863e:	d302      	bcc.n	8008646 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	e01b      	b.n	800867e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008646:	4b10      	ldr	r3, [pc, #64]	@ (8008688 <prvInsertTimerInActiveList+0x7c>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3304      	adds	r3, #4
 800864e:	4619      	mov	r1, r3
 8008650:	4610      	mov	r0, r2
 8008652:	f7fd ff64 	bl	800651e <vListInsert>
 8008656:	e012      	b.n	800867e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	429a      	cmp	r2, r3
 800865e:	d206      	bcs.n	800866e <prvInsertTimerInActiveList+0x62>
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d302      	bcc.n	800866e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008668:	2301      	movs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e007      	b.n	800867e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800866e:	4b07      	ldr	r3, [pc, #28]	@ (800868c <prvInsertTimerInActiveList+0x80>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3304      	adds	r3, #4
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f7fd ff50 	bl	800651e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800867e:	697b      	ldr	r3, [r7, #20]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	24004c18 	.word	0x24004c18
 800868c:	24004c14 	.word	0x24004c14

08008690 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08e      	sub	sp, #56	@ 0x38
 8008694:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008696:	e0ce      	b.n	8008836 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	da19      	bge.n	80086d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800869e:	1d3b      	adds	r3, r7, #4
 80086a0:	3304      	adds	r3, #4
 80086a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	61fb      	str	r3, [r7, #28]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086c8:	6850      	ldr	r0, [r2, #4]
 80086ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086cc:	6892      	ldr	r2, [r2, #8]
 80086ce:	4611      	mov	r1, r2
 80086d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f2c0 80ae 	blt.w	8008836 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e8:	3304      	adds	r3, #4
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fd ff50 	bl	8006590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086f0:	463b      	mov	r3, r7
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff ff6a 	bl	80085cc <prvSampleTimeNow>
 80086f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b09      	cmp	r3, #9
 80086fe:	f200 8097 	bhi.w	8008830 <prvProcessReceivedCommands+0x1a0>
 8008702:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <prvProcessReceivedCommands+0x78>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008731 	.word	0x08008731
 800870c:	08008731 	.word	0x08008731
 8008710:	08008731 	.word	0x08008731
 8008714:	080087a7 	.word	0x080087a7
 8008718:	080087bb 	.word	0x080087bb
 800871c:	08008807 	.word	0x08008807
 8008720:	08008731 	.word	0x08008731
 8008724:	08008731 	.word	0x08008731
 8008728:	080087a7 	.word	0x080087a7
 800872c:	080087bb 	.word	0x080087bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	b2da      	uxtb	r2, r3
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	18d1      	adds	r1, r2, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008750:	f7ff ff5c 	bl	800860c <prvInsertTimerInActiveList>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d06c      	beq.n	8008834 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800875a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008760:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b00      	cmp	r3, #0
 800876e:	d061      	beq.n	8008834 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	441a      	add	r2, r3
 8008778:	2300      	movs	r3, #0
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	2300      	movs	r3, #0
 800877e:	2100      	movs	r1, #0
 8008780:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008782:	f7ff fe01 	bl	8008388 <xTimerGenericCommand>
 8008786:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d152      	bne.n	8008834 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	61bb      	str	r3, [r7, #24]
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	e7fd      	b.n	80087a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087ac:	f023 0301 	bic.w	r3, r3, #1
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087b8:	e03d      	b.n	8008836 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	617b      	str	r3, [r7, #20]
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	e7fd      	b.n	80087ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	18d1      	adds	r1, r2, r3
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008800:	f7ff ff04 	bl	800860c <prvInsertTimerInActiveList>
					break;
 8008804:	e017      	b.n	8008836 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008816:	f7fd fd11 	bl	800623c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800881a:	e00c      	b.n	8008836 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800881c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008822:	f023 0301 	bic.w	r3, r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800882e:	e002      	b.n	8008836 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008830:	bf00      	nop
 8008832:	e000      	b.n	8008836 <prvProcessReceivedCommands+0x1a6>
					break;
 8008834:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008836:	4b08      	ldr	r3, [pc, #32]	@ (8008858 <prvProcessReceivedCommands+0x1c8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	1d39      	adds	r1, r7, #4
 800883c:	2200      	movs	r2, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fbce 	bl	8006fe0 <xQueueReceive>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	f47f af26 	bne.w	8008698 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	3730      	adds	r7, #48	@ 0x30
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	24004c1c 	.word	0x24004c1c

0800885c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008862:	e049      	b.n	80088f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008864:	4b2e      	ldr	r3, [pc, #184]	@ (8008920 <prvSwitchTimerLists+0xc4>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886e:	4b2c      	ldr	r3, [pc, #176]	@ (8008920 <prvSwitchTimerLists+0xc4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3304      	adds	r3, #4
 800887c:	4618      	mov	r0, r3
 800887e:	f7fd fe87 	bl	8006590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d02f      	beq.n	80088f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4413      	add	r3, r2
 80088a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d90e      	bls.n	80088c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008920 <prvSwitchTimerLists+0xc4>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3304      	adds	r3, #4
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f7fd fe2c 	bl	800651e <vListInsert>
 80088c6:	e017      	b.n	80088f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088c8:	2300      	movs	r3, #0
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	2100      	movs	r1, #0
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff fd58 	bl	8008388 <xTimerGenericCommand>
 80088d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10b      	bne.n	80088f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	603b      	str	r3, [r7, #0]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088f8:	4b09      	ldr	r3, [pc, #36]	@ (8008920 <prvSwitchTimerLists+0xc4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1b0      	bne.n	8008864 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008902:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <prvSwitchTimerLists+0xc4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008908:	4b06      	ldr	r3, [pc, #24]	@ (8008924 <prvSwitchTimerLists+0xc8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a04      	ldr	r2, [pc, #16]	@ (8008920 <prvSwitchTimerLists+0xc4>)
 800890e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008910:	4a04      	ldr	r2, [pc, #16]	@ (8008924 <prvSwitchTimerLists+0xc8>)
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	6013      	str	r3, [r2, #0]
}
 8008916:	bf00      	nop
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	24004c14 	.word	0x24004c14
 8008924:	24004c18 	.word	0x24004c18

08008928 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800892e:	f7fd ff8b 	bl	8006848 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008932:	4b15      	ldr	r3, [pc, #84]	@ (8008988 <prvCheckForValidListAndQueue+0x60>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d120      	bne.n	800897c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800893a:	4814      	ldr	r0, [pc, #80]	@ (800898c <prvCheckForValidListAndQueue+0x64>)
 800893c:	f7fd fd9e 	bl	800647c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008940:	4813      	ldr	r0, [pc, #76]	@ (8008990 <prvCheckForValidListAndQueue+0x68>)
 8008942:	f7fd fd9b 	bl	800647c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008946:	4b13      	ldr	r3, [pc, #76]	@ (8008994 <prvCheckForValidListAndQueue+0x6c>)
 8008948:	4a10      	ldr	r2, [pc, #64]	@ (800898c <prvCheckForValidListAndQueue+0x64>)
 800894a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800894c:	4b12      	ldr	r3, [pc, #72]	@ (8008998 <prvCheckForValidListAndQueue+0x70>)
 800894e:	4a10      	ldr	r2, [pc, #64]	@ (8008990 <prvCheckForValidListAndQueue+0x68>)
 8008950:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008952:	2300      	movs	r3, #0
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	4b11      	ldr	r3, [pc, #68]	@ (800899c <prvCheckForValidListAndQueue+0x74>)
 8008958:	4a11      	ldr	r2, [pc, #68]	@ (80089a0 <prvCheckForValidListAndQueue+0x78>)
 800895a:	2110      	movs	r1, #16
 800895c:	200a      	movs	r0, #10
 800895e:	f7fe f8ff 	bl	8006b60 <xQueueGenericCreateStatic>
 8008962:	4603      	mov	r3, r0
 8008964:	4a08      	ldr	r2, [pc, #32]	@ (8008988 <prvCheckForValidListAndQueue+0x60>)
 8008966:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008968:	4b07      	ldr	r3, [pc, #28]	@ (8008988 <prvCheckForValidListAndQueue+0x60>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008970:	4b05      	ldr	r3, [pc, #20]	@ (8008988 <prvCheckForValidListAndQueue+0x60>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	490b      	ldr	r1, [pc, #44]	@ (80089a4 <prvCheckForValidListAndQueue+0x7c>)
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fd24 	bl	80073c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800897c:	f7fd ff96 	bl	80068ac <vPortExitCritical>
}
 8008980:	bf00      	nop
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	24004c1c 	.word	0x24004c1c
 800898c:	24004bec 	.word	0x24004bec
 8008990:	24004c00 	.word	0x24004c00
 8008994:	24004c14 	.word	0x24004c14
 8008998:	24004c18 	.word	0x24004c18
 800899c:	24004cc8 	.word	0x24004cc8
 80089a0:	24004c28 	.word	0x24004c28
 80089a4:	0800b2b8 	.word	0x0800b2b8

080089a8 <__cvt>:
 80089a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089aa:	ed2d 8b02 	vpush	{d8}
 80089ae:	eeb0 8b40 	vmov.f64	d8, d0
 80089b2:	b085      	sub	sp, #20
 80089b4:	4617      	mov	r7, r2
 80089b6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80089b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089ba:	ee18 2a90 	vmov	r2, s17
 80089be:	f025 0520 	bic.w	r5, r5, #32
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	bfb6      	itet	lt
 80089c6:	222d      	movlt	r2, #45	@ 0x2d
 80089c8:	2200      	movge	r2, #0
 80089ca:	eeb1 8b40 	vneglt.f64	d8, d0
 80089ce:	2d46      	cmp	r5, #70	@ 0x46
 80089d0:	460c      	mov	r4, r1
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	d004      	beq.n	80089e0 <__cvt+0x38>
 80089d6:	2d45      	cmp	r5, #69	@ 0x45
 80089d8:	d100      	bne.n	80089dc <__cvt+0x34>
 80089da:	3401      	adds	r4, #1
 80089dc:	2102      	movs	r1, #2
 80089de:	e000      	b.n	80089e2 <__cvt+0x3a>
 80089e0:	2103      	movs	r1, #3
 80089e2:	ab03      	add	r3, sp, #12
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	ab02      	add	r3, sp, #8
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	4622      	mov	r2, r4
 80089ec:	4633      	mov	r3, r6
 80089ee:	eeb0 0b48 	vmov.f64	d0, d8
 80089f2:	f000 fe95 	bl	8009720 <_dtoa_r>
 80089f6:	2d47      	cmp	r5, #71	@ 0x47
 80089f8:	d114      	bne.n	8008a24 <__cvt+0x7c>
 80089fa:	07fb      	lsls	r3, r7, #31
 80089fc:	d50a      	bpl.n	8008a14 <__cvt+0x6c>
 80089fe:	1902      	adds	r2, r0, r4
 8008a00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a08:	bf08      	it	eq
 8008a0a:	9203      	streq	r2, [sp, #12]
 8008a0c:	2130      	movs	r1, #48	@ 0x30
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d319      	bcc.n	8008a48 <__cvt+0xa0>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a18:	1a1b      	subs	r3, r3, r0
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	b005      	add	sp, #20
 8008a1e:	ecbd 8b02 	vpop	{d8}
 8008a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a24:	2d46      	cmp	r5, #70	@ 0x46
 8008a26:	eb00 0204 	add.w	r2, r0, r4
 8008a2a:	d1e9      	bne.n	8008a00 <__cvt+0x58>
 8008a2c:	7803      	ldrb	r3, [r0, #0]
 8008a2e:	2b30      	cmp	r3, #48	@ 0x30
 8008a30:	d107      	bne.n	8008a42 <__cvt+0x9a>
 8008a32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3a:	bf1c      	itt	ne
 8008a3c:	f1c4 0401 	rsbne	r4, r4, #1
 8008a40:	6034      	strne	r4, [r6, #0]
 8008a42:	6833      	ldr	r3, [r6, #0]
 8008a44:	441a      	add	r2, r3
 8008a46:	e7db      	b.n	8008a00 <__cvt+0x58>
 8008a48:	1c5c      	adds	r4, r3, #1
 8008a4a:	9403      	str	r4, [sp, #12]
 8008a4c:	7019      	strb	r1, [r3, #0]
 8008a4e:	e7de      	b.n	8008a0e <__cvt+0x66>

08008a50 <__exponent>:
 8008a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a52:	2900      	cmp	r1, #0
 8008a54:	bfba      	itte	lt
 8008a56:	4249      	neglt	r1, r1
 8008a58:	232d      	movlt	r3, #45	@ 0x2d
 8008a5a:	232b      	movge	r3, #43	@ 0x2b
 8008a5c:	2909      	cmp	r1, #9
 8008a5e:	7002      	strb	r2, [r0, #0]
 8008a60:	7043      	strb	r3, [r0, #1]
 8008a62:	dd29      	ble.n	8008ab8 <__exponent+0x68>
 8008a64:	f10d 0307 	add.w	r3, sp, #7
 8008a68:	461d      	mov	r5, r3
 8008a6a:	270a      	movs	r7, #10
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a72:	fb07 1416 	mls	r4, r7, r6, r1
 8008a76:	3430      	adds	r4, #48	@ 0x30
 8008a78:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	2c63      	cmp	r4, #99	@ 0x63
 8008a80:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a84:	4631      	mov	r1, r6
 8008a86:	dcf1      	bgt.n	8008a6c <__exponent+0x1c>
 8008a88:	3130      	adds	r1, #48	@ 0x30
 8008a8a:	1e94      	subs	r4, r2, #2
 8008a8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a90:	1c41      	adds	r1, r0, #1
 8008a92:	4623      	mov	r3, r4
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	d30a      	bcc.n	8008aae <__exponent+0x5e>
 8008a98:	f10d 0309 	add.w	r3, sp, #9
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	42ac      	cmp	r4, r5
 8008aa0:	bf88      	it	hi
 8008aa2:	2300      	movhi	r3, #0
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	4403      	add	r3, r0
 8008aa8:	1a18      	subs	r0, r3, r0
 8008aaa:	b003      	add	sp, #12
 8008aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aae:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ab2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ab6:	e7ed      	b.n	8008a94 <__exponent+0x44>
 8008ab8:	2330      	movs	r3, #48	@ 0x30
 8008aba:	3130      	adds	r1, #48	@ 0x30
 8008abc:	7083      	strb	r3, [r0, #2]
 8008abe:	70c1      	strb	r1, [r0, #3]
 8008ac0:	1d03      	adds	r3, r0, #4
 8008ac2:	e7f1      	b.n	8008aa8 <__exponent+0x58>
 8008ac4:	0000      	movs	r0, r0
	...

08008ac8 <_printf_float>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	b08d      	sub	sp, #52	@ 0x34
 8008ace:	460c      	mov	r4, r1
 8008ad0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	461f      	mov	r7, r3
 8008ad8:	4605      	mov	r5, r0
 8008ada:	f000 fcbd 	bl	8009458 <_localeconv_r>
 8008ade:	f8d0 b000 	ldr.w	fp, [r0]
 8008ae2:	4658      	mov	r0, fp
 8008ae4:	f7f7 fc4c 	bl	8000380 <strlen>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aec:	f8d8 3000 	ldr.w	r3, [r8]
 8008af0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008af4:	6822      	ldr	r2, [r4, #0]
 8008af6:	9005      	str	r0, [sp, #20]
 8008af8:	3307      	adds	r3, #7
 8008afa:	f023 0307 	bic.w	r3, r3, #7
 8008afe:	f103 0108 	add.w	r1, r3, #8
 8008b02:	f8c8 1000 	str.w	r1, [r8]
 8008b06:	ed93 0b00 	vldr	d0, [r3]
 8008b0a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008d68 <_printf_float+0x2a0>
 8008b0e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008b12:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008b1e:	dd24      	ble.n	8008b6a <_printf_float+0xa2>
 8008b20:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b28:	d502      	bpl.n	8008b30 <_printf_float+0x68>
 8008b2a:	232d      	movs	r3, #45	@ 0x2d
 8008b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b30:	498f      	ldr	r1, [pc, #572]	@ (8008d70 <_printf_float+0x2a8>)
 8008b32:	4b90      	ldr	r3, [pc, #576]	@ (8008d74 <_printf_float+0x2ac>)
 8008b34:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008b38:	bf94      	ite	ls
 8008b3a:	4688      	movls	r8, r1
 8008b3c:	4698      	movhi	r8, r3
 8008b3e:	f022 0204 	bic.w	r2, r2, #4
 8008b42:	2303      	movs	r3, #3
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	6022      	str	r2, [r4, #0]
 8008b48:	f04f 0a00 	mov.w	sl, #0
 8008b4c:	9700      	str	r7, [sp, #0]
 8008b4e:	4633      	mov	r3, r6
 8008b50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b52:	4621      	mov	r1, r4
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 f9d1 	bl	8008efc <_printf_common>
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	f040 8089 	bne.w	8008c72 <_printf_float+0x1aa>
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	b00d      	add	sp, #52	@ 0x34
 8008b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	d709      	bvc.n	8008b88 <_printf_float+0xc0>
 8008b74:	ee10 3a90 	vmov	r3, s1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bfbc      	itt	lt
 8008b7c:	232d      	movlt	r3, #45	@ 0x2d
 8008b7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b82:	497d      	ldr	r1, [pc, #500]	@ (8008d78 <_printf_float+0x2b0>)
 8008b84:	4b7d      	ldr	r3, [pc, #500]	@ (8008d7c <_printf_float+0x2b4>)
 8008b86:	e7d5      	b.n	8008b34 <_printf_float+0x6c>
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	1c59      	adds	r1, r3, #1
 8008b8c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008b90:	d139      	bne.n	8008c06 <_printf_float+0x13e>
 8008b92:	2306      	movs	r3, #6
 8008b94:	6063      	str	r3, [r4, #4]
 8008b96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6022      	str	r2, [r4, #0]
 8008b9e:	9303      	str	r3, [sp, #12]
 8008ba0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ba2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008ba6:	ab09      	add	r3, sp, #36	@ 0x24
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	6861      	ldr	r1, [r4, #4]
 8008bac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7ff fef9 	bl	80089a8 <__cvt>
 8008bb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	d129      	bne.n	8008c14 <_printf_float+0x14c>
 8008bc0:	1cc8      	adds	r0, r1, #3
 8008bc2:	db02      	blt.n	8008bca <_printf_float+0x102>
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	dd41      	ble.n	8008c4e <_printf_float+0x186>
 8008bca:	f1a9 0902 	sub.w	r9, r9, #2
 8008bce:	fa5f f989 	uxtb.w	r9, r9
 8008bd2:	3901      	subs	r1, #1
 8008bd4:	464a      	mov	r2, r9
 8008bd6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008bda:	9109      	str	r1, [sp, #36]	@ 0x24
 8008bdc:	f7ff ff38 	bl	8008a50 <__exponent>
 8008be0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008be2:	1813      	adds	r3, r2, r0
 8008be4:	2a01      	cmp	r2, #1
 8008be6:	4682      	mov	sl, r0
 8008be8:	6123      	str	r3, [r4, #16]
 8008bea:	dc02      	bgt.n	8008bf2 <_printf_float+0x12a>
 8008bec:	6822      	ldr	r2, [r4, #0]
 8008bee:	07d2      	lsls	r2, r2, #31
 8008bf0:	d501      	bpl.n	8008bf6 <_printf_float+0x12e>
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0a6      	beq.n	8008b4c <_printf_float+0x84>
 8008bfe:	232d      	movs	r3, #45	@ 0x2d
 8008c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c04:	e7a2      	b.n	8008b4c <_printf_float+0x84>
 8008c06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c0a:	d1c4      	bne.n	8008b96 <_printf_float+0xce>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1c2      	bne.n	8008b96 <_printf_float+0xce>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e7bf      	b.n	8008b94 <_printf_float+0xcc>
 8008c14:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008c18:	d9db      	bls.n	8008bd2 <_printf_float+0x10a>
 8008c1a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008c1e:	d118      	bne.n	8008c52 <_printf_float+0x18a>
 8008c20:	2900      	cmp	r1, #0
 8008c22:	6863      	ldr	r3, [r4, #4]
 8008c24:	dd0b      	ble.n	8008c3e <_printf_float+0x176>
 8008c26:	6121      	str	r1, [r4, #16]
 8008c28:	b913      	cbnz	r3, 8008c30 <_printf_float+0x168>
 8008c2a:	6822      	ldr	r2, [r4, #0]
 8008c2c:	07d0      	lsls	r0, r2, #31
 8008c2e:	d502      	bpl.n	8008c36 <_printf_float+0x16e>
 8008c30:	3301      	adds	r3, #1
 8008c32:	440b      	add	r3, r1
 8008c34:	6123      	str	r3, [r4, #16]
 8008c36:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c38:	f04f 0a00 	mov.w	sl, #0
 8008c3c:	e7db      	b.n	8008bf6 <_printf_float+0x12e>
 8008c3e:	b913      	cbnz	r3, 8008c46 <_printf_float+0x17e>
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	07d2      	lsls	r2, r2, #31
 8008c44:	d501      	bpl.n	8008c4a <_printf_float+0x182>
 8008c46:	3302      	adds	r3, #2
 8008c48:	e7f4      	b.n	8008c34 <_printf_float+0x16c>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e7f2      	b.n	8008c34 <_printf_float+0x16c>
 8008c4e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008c52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c54:	4299      	cmp	r1, r3
 8008c56:	db05      	blt.n	8008c64 <_printf_float+0x19c>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	6121      	str	r1, [r4, #16]
 8008c5c:	07d8      	lsls	r0, r3, #31
 8008c5e:	d5ea      	bpl.n	8008c36 <_printf_float+0x16e>
 8008c60:	1c4b      	adds	r3, r1, #1
 8008c62:	e7e7      	b.n	8008c34 <_printf_float+0x16c>
 8008c64:	2900      	cmp	r1, #0
 8008c66:	bfd4      	ite	le
 8008c68:	f1c1 0202 	rsble	r2, r1, #2
 8008c6c:	2201      	movgt	r2, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	e7e0      	b.n	8008c34 <_printf_float+0x16c>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	055a      	lsls	r2, r3, #21
 8008c76:	d407      	bmi.n	8008c88 <_printf_float+0x1c0>
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	4642      	mov	r2, r8
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b8      	blx	r7
 8008c82:	3001      	adds	r0, #1
 8008c84:	d12a      	bne.n	8008cdc <_printf_float+0x214>
 8008c86:	e76b      	b.n	8008b60 <_printf_float+0x98>
 8008c88:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008c8c:	f240 80e0 	bls.w	8008e50 <_printf_float+0x388>
 8008c90:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008c94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9c:	d133      	bne.n	8008d06 <_printf_float+0x23e>
 8008c9e:	4a38      	ldr	r2, [pc, #224]	@ (8008d80 <_printf_float+0x2b8>)
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f43f af59 	beq.w	8008b60 <_printf_float+0x98>
 8008cae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cb2:	4543      	cmp	r3, r8
 8008cb4:	db02      	blt.n	8008cbc <_printf_float+0x1f4>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	07d8      	lsls	r0, r3, #31
 8008cba:	d50f      	bpl.n	8008cdc <_printf_float+0x214>
 8008cbc:	9b05      	ldr	r3, [sp, #20]
 8008cbe:	465a      	mov	r2, fp
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f43f af4a 	beq.w	8008b60 <_printf_float+0x98>
 8008ccc:	f04f 0900 	mov.w	r9, #0
 8008cd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cd4:	f104 0a1a 	add.w	sl, r4, #26
 8008cd8:	45c8      	cmp	r8, r9
 8008cda:	dc09      	bgt.n	8008cf0 <_printf_float+0x228>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	079b      	lsls	r3, r3, #30
 8008ce0:	f100 8107 	bmi.w	8008ef2 <_printf_float+0x42a>
 8008ce4:	68e0      	ldr	r0, [r4, #12]
 8008ce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ce8:	4298      	cmp	r0, r3
 8008cea:	bfb8      	it	lt
 8008cec:	4618      	movlt	r0, r3
 8008cee:	e739      	b.n	8008b64 <_printf_float+0x9c>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	47b8      	blx	r7
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	f43f af30 	beq.w	8008b60 <_printf_float+0x98>
 8008d00:	f109 0901 	add.w	r9, r9, #1
 8008d04:	e7e8      	b.n	8008cd8 <_printf_float+0x210>
 8008d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	dc3b      	bgt.n	8008d84 <_printf_float+0x2bc>
 8008d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d80 <_printf_float+0x2b8>)
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4631      	mov	r1, r6
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b8      	blx	r7
 8008d16:	3001      	adds	r0, #1
 8008d18:	f43f af22 	beq.w	8008b60 <_printf_float+0x98>
 8008d1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d20:	ea59 0303 	orrs.w	r3, r9, r3
 8008d24:	d102      	bne.n	8008d2c <_printf_float+0x264>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	07d9      	lsls	r1, r3, #31
 8008d2a:	d5d7      	bpl.n	8008cdc <_printf_float+0x214>
 8008d2c:	9b05      	ldr	r3, [sp, #20]
 8008d2e:	465a      	mov	r2, fp
 8008d30:	4631      	mov	r1, r6
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	f43f af12 	beq.w	8008b60 <_printf_float+0x98>
 8008d3c:	f04f 0a00 	mov.w	sl, #0
 8008d40:	f104 0b1a 	add.w	fp, r4, #26
 8008d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d46:	425b      	negs	r3, r3
 8008d48:	4553      	cmp	r3, sl
 8008d4a:	dc01      	bgt.n	8008d50 <_printf_float+0x288>
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	e794      	b.n	8008c7a <_printf_float+0x1b2>
 8008d50:	2301      	movs	r3, #1
 8008d52:	465a      	mov	r2, fp
 8008d54:	4631      	mov	r1, r6
 8008d56:	4628      	mov	r0, r5
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f43f af00 	beq.w	8008b60 <_printf_float+0x98>
 8008d60:	f10a 0a01 	add.w	sl, sl, #1
 8008d64:	e7ee      	b.n	8008d44 <_printf_float+0x27c>
 8008d66:	bf00      	nop
 8008d68:	ffffffff 	.word	0xffffffff
 8008d6c:	7fefffff 	.word	0x7fefffff
 8008d70:	0800b31c 	.word	0x0800b31c
 8008d74:	0800b320 	.word	0x0800b320
 8008d78:	0800b324 	.word	0x0800b324
 8008d7c:	0800b328 	.word	0x0800b328
 8008d80:	0800b32c 	.word	0x0800b32c
 8008d84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d8a:	4553      	cmp	r3, sl
 8008d8c:	bfa8      	it	ge
 8008d8e:	4653      	movge	r3, sl
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	4699      	mov	r9, r3
 8008d94:	dc37      	bgt.n	8008e06 <_printf_float+0x33e>
 8008d96:	2300      	movs	r3, #0
 8008d98:	9307      	str	r3, [sp, #28]
 8008d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d9e:	f104 021a 	add.w	r2, r4, #26
 8008da2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008da4:	9907      	ldr	r1, [sp, #28]
 8008da6:	9306      	str	r3, [sp, #24]
 8008da8:	eba3 0309 	sub.w	r3, r3, r9
 8008dac:	428b      	cmp	r3, r1
 8008dae:	dc31      	bgt.n	8008e14 <_printf_float+0x34c>
 8008db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db2:	459a      	cmp	sl, r3
 8008db4:	dc3b      	bgt.n	8008e2e <_printf_float+0x366>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	07da      	lsls	r2, r3, #31
 8008dba:	d438      	bmi.n	8008e2e <_printf_float+0x366>
 8008dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dbe:	ebaa 0903 	sub.w	r9, sl, r3
 8008dc2:	9b06      	ldr	r3, [sp, #24]
 8008dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8008dc8:	4599      	cmp	r9, r3
 8008dca:	bfa8      	it	ge
 8008dcc:	4699      	movge	r9, r3
 8008dce:	f1b9 0f00 	cmp.w	r9, #0
 8008dd2:	dc34      	bgt.n	8008e3e <_printf_float+0x376>
 8008dd4:	f04f 0800 	mov.w	r8, #0
 8008dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ddc:	f104 0b1a 	add.w	fp, r4, #26
 8008de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de2:	ebaa 0303 	sub.w	r3, sl, r3
 8008de6:	eba3 0309 	sub.w	r3, r3, r9
 8008dea:	4543      	cmp	r3, r8
 8008dec:	f77f af76 	ble.w	8008cdc <_printf_float+0x214>
 8008df0:	2301      	movs	r3, #1
 8008df2:	465a      	mov	r2, fp
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f43f aeb0 	beq.w	8008b60 <_printf_float+0x98>
 8008e00:	f108 0801 	add.w	r8, r8, #1
 8008e04:	e7ec      	b.n	8008de0 <_printf_float+0x318>
 8008e06:	4642      	mov	r2, r8
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	d1c1      	bne.n	8008d96 <_printf_float+0x2ce>
 8008e12:	e6a5      	b.n	8008b60 <_printf_float+0x98>
 8008e14:	2301      	movs	r3, #1
 8008e16:	4631      	mov	r1, r6
 8008e18:	4628      	mov	r0, r5
 8008e1a:	9206      	str	r2, [sp, #24]
 8008e1c:	47b8      	blx	r7
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f43f ae9e 	beq.w	8008b60 <_printf_float+0x98>
 8008e24:	9b07      	ldr	r3, [sp, #28]
 8008e26:	9a06      	ldr	r2, [sp, #24]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	9307      	str	r3, [sp, #28]
 8008e2c:	e7b9      	b.n	8008da2 <_printf_float+0x2da>
 8008e2e:	9b05      	ldr	r3, [sp, #20]
 8008e30:	465a      	mov	r2, fp
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d1bf      	bne.n	8008dbc <_printf_float+0x2f4>
 8008e3c:	e690      	b.n	8008b60 <_printf_float+0x98>
 8008e3e:	9a06      	ldr	r2, [sp, #24]
 8008e40:	464b      	mov	r3, r9
 8008e42:	4442      	add	r2, r8
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d1c2      	bne.n	8008dd4 <_printf_float+0x30c>
 8008e4e:	e687      	b.n	8008b60 <_printf_float+0x98>
 8008e50:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008e54:	f1b9 0f01 	cmp.w	r9, #1
 8008e58:	dc01      	bgt.n	8008e5e <_printf_float+0x396>
 8008e5a:	07db      	lsls	r3, r3, #31
 8008e5c:	d536      	bpl.n	8008ecc <_printf_float+0x404>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4642      	mov	r2, r8
 8008e62:	4631      	mov	r1, r6
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b8      	blx	r7
 8008e68:	3001      	adds	r0, #1
 8008e6a:	f43f ae79 	beq.w	8008b60 <_printf_float+0x98>
 8008e6e:	9b05      	ldr	r3, [sp, #20]
 8008e70:	465a      	mov	r2, fp
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f43f ae71 	beq.w	8008b60 <_printf_float+0x98>
 8008e7e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008e82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e8e:	d018      	beq.n	8008ec2 <_printf_float+0x3fa>
 8008e90:	464b      	mov	r3, r9
 8008e92:	f108 0201 	add.w	r2, r8, #1
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d10c      	bne.n	8008eba <_printf_float+0x3f2>
 8008ea0:	e65e      	b.n	8008b60 <_printf_float+0x98>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	465a      	mov	r2, fp
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b8      	blx	r7
 8008eac:	3001      	adds	r0, #1
 8008eae:	f43f ae57 	beq.w	8008b60 <_printf_float+0x98>
 8008eb2:	f108 0801 	add.w	r8, r8, #1
 8008eb6:	45c8      	cmp	r8, r9
 8008eb8:	dbf3      	blt.n	8008ea2 <_printf_float+0x3da>
 8008eba:	4653      	mov	r3, sl
 8008ebc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ec0:	e6dc      	b.n	8008c7c <_printf_float+0x1b4>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	f104 0b1a 	add.w	fp, r4, #26
 8008eca:	e7f4      	b.n	8008eb6 <_printf_float+0x3ee>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4642      	mov	r2, r8
 8008ed0:	e7e1      	b.n	8008e96 <_printf_float+0x3ce>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	464a      	mov	r2, r9
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	f43f ae3f 	beq.w	8008b60 <_printf_float+0x98>
 8008ee2:	f108 0801 	add.w	r8, r8, #1
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eea:	1a5b      	subs	r3, r3, r1
 8008eec:	4543      	cmp	r3, r8
 8008eee:	dcf0      	bgt.n	8008ed2 <_printf_float+0x40a>
 8008ef0:	e6f8      	b.n	8008ce4 <_printf_float+0x21c>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	f104 0919 	add.w	r9, r4, #25
 8008efa:	e7f4      	b.n	8008ee6 <_printf_float+0x41e>

08008efc <_printf_common>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	4616      	mov	r6, r2
 8008f02:	4698      	mov	r8, r3
 8008f04:	688a      	ldr	r2, [r1, #8]
 8008f06:	690b      	ldr	r3, [r1, #16]
 8008f08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	bfb8      	it	lt
 8008f10:	4613      	movlt	r3, r2
 8008f12:	6033      	str	r3, [r6, #0]
 8008f14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f18:	4607      	mov	r7, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b10a      	cbz	r2, 8008f22 <_printf_common+0x26>
 8008f1e:	3301      	adds	r3, #1
 8008f20:	6033      	str	r3, [r6, #0]
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	0699      	lsls	r1, r3, #26
 8008f26:	bf42      	ittt	mi
 8008f28:	6833      	ldrmi	r3, [r6, #0]
 8008f2a:	3302      	addmi	r3, #2
 8008f2c:	6033      	strmi	r3, [r6, #0]
 8008f2e:	6825      	ldr	r5, [r4, #0]
 8008f30:	f015 0506 	ands.w	r5, r5, #6
 8008f34:	d106      	bne.n	8008f44 <_printf_common+0x48>
 8008f36:	f104 0a19 	add.w	sl, r4, #25
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	6832      	ldr	r2, [r6, #0]
 8008f3e:	1a9b      	subs	r3, r3, r2
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	dc26      	bgt.n	8008f92 <_printf_common+0x96>
 8008f44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	3b00      	subs	r3, #0
 8008f4c:	bf18      	it	ne
 8008f4e:	2301      	movne	r3, #1
 8008f50:	0692      	lsls	r2, r2, #26
 8008f52:	d42b      	bmi.n	8008fac <_printf_common+0xb0>
 8008f54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f58:	4641      	mov	r1, r8
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c8      	blx	r9
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d01e      	beq.n	8008fa0 <_printf_common+0xa4>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	f003 0306 	and.w	r3, r3, #6
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	bf02      	ittt	eq
 8008f6e:	68e5      	ldreq	r5, [r4, #12]
 8008f70:	6833      	ldreq	r3, [r6, #0]
 8008f72:	1aed      	subeq	r5, r5, r3
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	bf0c      	ite	eq
 8008f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f7c:	2500      	movne	r5, #0
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	bfc4      	itt	gt
 8008f82:	1a9b      	subgt	r3, r3, r2
 8008f84:	18ed      	addgt	r5, r5, r3
 8008f86:	2600      	movs	r6, #0
 8008f88:	341a      	adds	r4, #26
 8008f8a:	42b5      	cmp	r5, r6
 8008f8c:	d11a      	bne.n	8008fc4 <_printf_common+0xc8>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e008      	b.n	8008fa4 <_printf_common+0xa8>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4652      	mov	r2, sl
 8008f96:	4641      	mov	r1, r8
 8008f98:	4638      	mov	r0, r7
 8008f9a:	47c8      	blx	r9
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d103      	bne.n	8008fa8 <_printf_common+0xac>
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa8:	3501      	adds	r5, #1
 8008faa:	e7c6      	b.n	8008f3a <_printf_common+0x3e>
 8008fac:	18e1      	adds	r1, r4, r3
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	2030      	movs	r0, #48	@ 0x30
 8008fb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fb6:	4422      	add	r2, r4
 8008fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	e7c7      	b.n	8008f54 <_printf_common+0x58>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4641      	mov	r1, r8
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c8      	blx	r9
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d0e6      	beq.n	8008fa0 <_printf_common+0xa4>
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	e7d9      	b.n	8008f8a <_printf_common+0x8e>
	...

08008fd8 <_printf_i>:
 8008fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	7e0f      	ldrb	r7, [r1, #24]
 8008fde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fe0:	2f78      	cmp	r7, #120	@ 0x78
 8008fe2:	4691      	mov	r9, r2
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	469a      	mov	sl, r3
 8008fea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fee:	d807      	bhi.n	8009000 <_printf_i+0x28>
 8008ff0:	2f62      	cmp	r7, #98	@ 0x62
 8008ff2:	d80a      	bhi.n	800900a <_printf_i+0x32>
 8008ff4:	2f00      	cmp	r7, #0
 8008ff6:	f000 80d2 	beq.w	800919e <_printf_i+0x1c6>
 8008ffa:	2f58      	cmp	r7, #88	@ 0x58
 8008ffc:	f000 80b9 	beq.w	8009172 <_printf_i+0x19a>
 8009000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009008:	e03a      	b.n	8009080 <_printf_i+0xa8>
 800900a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800900e:	2b15      	cmp	r3, #21
 8009010:	d8f6      	bhi.n	8009000 <_printf_i+0x28>
 8009012:	a101      	add	r1, pc, #4	@ (adr r1, 8009018 <_printf_i+0x40>)
 8009014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009018:	08009071 	.word	0x08009071
 800901c:	08009085 	.word	0x08009085
 8009020:	08009001 	.word	0x08009001
 8009024:	08009001 	.word	0x08009001
 8009028:	08009001 	.word	0x08009001
 800902c:	08009001 	.word	0x08009001
 8009030:	08009085 	.word	0x08009085
 8009034:	08009001 	.word	0x08009001
 8009038:	08009001 	.word	0x08009001
 800903c:	08009001 	.word	0x08009001
 8009040:	08009001 	.word	0x08009001
 8009044:	08009185 	.word	0x08009185
 8009048:	080090af 	.word	0x080090af
 800904c:	0800913f 	.word	0x0800913f
 8009050:	08009001 	.word	0x08009001
 8009054:	08009001 	.word	0x08009001
 8009058:	080091a7 	.word	0x080091a7
 800905c:	08009001 	.word	0x08009001
 8009060:	080090af 	.word	0x080090af
 8009064:	08009001 	.word	0x08009001
 8009068:	08009001 	.word	0x08009001
 800906c:	08009147 	.word	0x08009147
 8009070:	6833      	ldr	r3, [r6, #0]
 8009072:	1d1a      	adds	r2, r3, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6032      	str	r2, [r6, #0]
 8009078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800907c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009080:	2301      	movs	r3, #1
 8009082:	e09d      	b.n	80091c0 <_printf_i+0x1e8>
 8009084:	6833      	ldr	r3, [r6, #0]
 8009086:	6820      	ldr	r0, [r4, #0]
 8009088:	1d19      	adds	r1, r3, #4
 800908a:	6031      	str	r1, [r6, #0]
 800908c:	0606      	lsls	r6, r0, #24
 800908e:	d501      	bpl.n	8009094 <_printf_i+0xbc>
 8009090:	681d      	ldr	r5, [r3, #0]
 8009092:	e003      	b.n	800909c <_printf_i+0xc4>
 8009094:	0645      	lsls	r5, r0, #25
 8009096:	d5fb      	bpl.n	8009090 <_printf_i+0xb8>
 8009098:	f9b3 5000 	ldrsh.w	r5, [r3]
 800909c:	2d00      	cmp	r5, #0
 800909e:	da03      	bge.n	80090a8 <_printf_i+0xd0>
 80090a0:	232d      	movs	r3, #45	@ 0x2d
 80090a2:	426d      	negs	r5, r5
 80090a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090a8:	4859      	ldr	r0, [pc, #356]	@ (8009210 <_printf_i+0x238>)
 80090aa:	230a      	movs	r3, #10
 80090ac:	e011      	b.n	80090d2 <_printf_i+0xfa>
 80090ae:	6821      	ldr	r1, [r4, #0]
 80090b0:	6833      	ldr	r3, [r6, #0]
 80090b2:	0608      	lsls	r0, r1, #24
 80090b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80090b8:	d402      	bmi.n	80090c0 <_printf_i+0xe8>
 80090ba:	0649      	lsls	r1, r1, #25
 80090bc:	bf48      	it	mi
 80090be:	b2ad      	uxthmi	r5, r5
 80090c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80090c2:	4853      	ldr	r0, [pc, #332]	@ (8009210 <_printf_i+0x238>)
 80090c4:	6033      	str	r3, [r6, #0]
 80090c6:	bf14      	ite	ne
 80090c8:	230a      	movne	r3, #10
 80090ca:	2308      	moveq	r3, #8
 80090cc:	2100      	movs	r1, #0
 80090ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090d2:	6866      	ldr	r6, [r4, #4]
 80090d4:	60a6      	str	r6, [r4, #8]
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	bfa2      	ittt	ge
 80090da:	6821      	ldrge	r1, [r4, #0]
 80090dc:	f021 0104 	bicge.w	r1, r1, #4
 80090e0:	6021      	strge	r1, [r4, #0]
 80090e2:	b90d      	cbnz	r5, 80090e8 <_printf_i+0x110>
 80090e4:	2e00      	cmp	r6, #0
 80090e6:	d04b      	beq.n	8009180 <_printf_i+0x1a8>
 80090e8:	4616      	mov	r6, r2
 80090ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80090ee:	fb03 5711 	mls	r7, r3, r1, r5
 80090f2:	5dc7      	ldrb	r7, [r0, r7]
 80090f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090f8:	462f      	mov	r7, r5
 80090fa:	42bb      	cmp	r3, r7
 80090fc:	460d      	mov	r5, r1
 80090fe:	d9f4      	bls.n	80090ea <_printf_i+0x112>
 8009100:	2b08      	cmp	r3, #8
 8009102:	d10b      	bne.n	800911c <_printf_i+0x144>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	07df      	lsls	r7, r3, #31
 8009108:	d508      	bpl.n	800911c <_printf_i+0x144>
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	6861      	ldr	r1, [r4, #4]
 800910e:	4299      	cmp	r1, r3
 8009110:	bfde      	ittt	le
 8009112:	2330      	movle	r3, #48	@ 0x30
 8009114:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009118:	f106 36ff 	addle.w	r6, r6, #4294967295
 800911c:	1b92      	subs	r2, r2, r6
 800911e:	6122      	str	r2, [r4, #16]
 8009120:	f8cd a000 	str.w	sl, [sp]
 8009124:	464b      	mov	r3, r9
 8009126:	aa03      	add	r2, sp, #12
 8009128:	4621      	mov	r1, r4
 800912a:	4640      	mov	r0, r8
 800912c:	f7ff fee6 	bl	8008efc <_printf_common>
 8009130:	3001      	adds	r0, #1
 8009132:	d14a      	bne.n	80091ca <_printf_i+0x1f2>
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	b004      	add	sp, #16
 800913a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	f043 0320 	orr.w	r3, r3, #32
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	4833      	ldr	r0, [pc, #204]	@ (8009214 <_printf_i+0x23c>)
 8009148:	2778      	movs	r7, #120	@ 0x78
 800914a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	6831      	ldr	r1, [r6, #0]
 8009152:	061f      	lsls	r7, r3, #24
 8009154:	f851 5b04 	ldr.w	r5, [r1], #4
 8009158:	d402      	bmi.n	8009160 <_printf_i+0x188>
 800915a:	065f      	lsls	r7, r3, #25
 800915c:	bf48      	it	mi
 800915e:	b2ad      	uxthmi	r5, r5
 8009160:	6031      	str	r1, [r6, #0]
 8009162:	07d9      	lsls	r1, r3, #31
 8009164:	bf44      	itt	mi
 8009166:	f043 0320 	orrmi.w	r3, r3, #32
 800916a:	6023      	strmi	r3, [r4, #0]
 800916c:	b11d      	cbz	r5, 8009176 <_printf_i+0x19e>
 800916e:	2310      	movs	r3, #16
 8009170:	e7ac      	b.n	80090cc <_printf_i+0xf4>
 8009172:	4827      	ldr	r0, [pc, #156]	@ (8009210 <_printf_i+0x238>)
 8009174:	e7e9      	b.n	800914a <_printf_i+0x172>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	f023 0320 	bic.w	r3, r3, #32
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	e7f6      	b.n	800916e <_printf_i+0x196>
 8009180:	4616      	mov	r6, r2
 8009182:	e7bd      	b.n	8009100 <_printf_i+0x128>
 8009184:	6833      	ldr	r3, [r6, #0]
 8009186:	6825      	ldr	r5, [r4, #0]
 8009188:	6961      	ldr	r1, [r4, #20]
 800918a:	1d18      	adds	r0, r3, #4
 800918c:	6030      	str	r0, [r6, #0]
 800918e:	062e      	lsls	r6, r5, #24
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	d501      	bpl.n	8009198 <_printf_i+0x1c0>
 8009194:	6019      	str	r1, [r3, #0]
 8009196:	e002      	b.n	800919e <_printf_i+0x1c6>
 8009198:	0668      	lsls	r0, r5, #25
 800919a:	d5fb      	bpl.n	8009194 <_printf_i+0x1bc>
 800919c:	8019      	strh	r1, [r3, #0]
 800919e:	2300      	movs	r3, #0
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	4616      	mov	r6, r2
 80091a4:	e7bc      	b.n	8009120 <_printf_i+0x148>
 80091a6:	6833      	ldr	r3, [r6, #0]
 80091a8:	1d1a      	adds	r2, r3, #4
 80091aa:	6032      	str	r2, [r6, #0]
 80091ac:	681e      	ldr	r6, [r3, #0]
 80091ae:	6862      	ldr	r2, [r4, #4]
 80091b0:	2100      	movs	r1, #0
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7f7 f894 	bl	80002e0 <memchr>
 80091b8:	b108      	cbz	r0, 80091be <_printf_i+0x1e6>
 80091ba:	1b80      	subs	r0, r0, r6
 80091bc:	6060      	str	r0, [r4, #4]
 80091be:	6863      	ldr	r3, [r4, #4]
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	2300      	movs	r3, #0
 80091c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091c8:	e7aa      	b.n	8009120 <_printf_i+0x148>
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	4632      	mov	r2, r6
 80091ce:	4649      	mov	r1, r9
 80091d0:	4640      	mov	r0, r8
 80091d2:	47d0      	blx	sl
 80091d4:	3001      	adds	r0, #1
 80091d6:	d0ad      	beq.n	8009134 <_printf_i+0x15c>
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	079b      	lsls	r3, r3, #30
 80091dc:	d413      	bmi.n	8009206 <_printf_i+0x22e>
 80091de:	68e0      	ldr	r0, [r4, #12]
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	4298      	cmp	r0, r3
 80091e4:	bfb8      	it	lt
 80091e6:	4618      	movlt	r0, r3
 80091e8:	e7a6      	b.n	8009138 <_printf_i+0x160>
 80091ea:	2301      	movs	r3, #1
 80091ec:	4632      	mov	r2, r6
 80091ee:	4649      	mov	r1, r9
 80091f0:	4640      	mov	r0, r8
 80091f2:	47d0      	blx	sl
 80091f4:	3001      	adds	r0, #1
 80091f6:	d09d      	beq.n	8009134 <_printf_i+0x15c>
 80091f8:	3501      	adds	r5, #1
 80091fa:	68e3      	ldr	r3, [r4, #12]
 80091fc:	9903      	ldr	r1, [sp, #12]
 80091fe:	1a5b      	subs	r3, r3, r1
 8009200:	42ab      	cmp	r3, r5
 8009202:	dcf2      	bgt.n	80091ea <_printf_i+0x212>
 8009204:	e7eb      	b.n	80091de <_printf_i+0x206>
 8009206:	2500      	movs	r5, #0
 8009208:	f104 0619 	add.w	r6, r4, #25
 800920c:	e7f5      	b.n	80091fa <_printf_i+0x222>
 800920e:	bf00      	nop
 8009210:	0800b32e 	.word	0x0800b32e
 8009214:	0800b33f 	.word	0x0800b33f

08009218 <std>:
 8009218:	2300      	movs	r3, #0
 800921a:	b510      	push	{r4, lr}
 800921c:	4604      	mov	r4, r0
 800921e:	e9c0 3300 	strd	r3, r3, [r0]
 8009222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009226:	6083      	str	r3, [r0, #8]
 8009228:	8181      	strh	r1, [r0, #12]
 800922a:	6643      	str	r3, [r0, #100]	@ 0x64
 800922c:	81c2      	strh	r2, [r0, #14]
 800922e:	6183      	str	r3, [r0, #24]
 8009230:	4619      	mov	r1, r3
 8009232:	2208      	movs	r2, #8
 8009234:	305c      	adds	r0, #92	@ 0x5c
 8009236:	f000 f906 	bl	8009446 <memset>
 800923a:	4b0d      	ldr	r3, [pc, #52]	@ (8009270 <std+0x58>)
 800923c:	6263      	str	r3, [r4, #36]	@ 0x24
 800923e:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <std+0x5c>)
 8009240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009242:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <std+0x60>)
 8009244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009246:	4b0d      	ldr	r3, [pc, #52]	@ (800927c <std+0x64>)
 8009248:	6323      	str	r3, [r4, #48]	@ 0x30
 800924a:	4b0d      	ldr	r3, [pc, #52]	@ (8009280 <std+0x68>)
 800924c:	6224      	str	r4, [r4, #32]
 800924e:	429c      	cmp	r4, r3
 8009250:	d006      	beq.n	8009260 <std+0x48>
 8009252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009256:	4294      	cmp	r4, r2
 8009258:	d002      	beq.n	8009260 <std+0x48>
 800925a:	33d0      	adds	r3, #208	@ 0xd0
 800925c:	429c      	cmp	r4, r3
 800925e:	d105      	bne.n	800926c <std+0x54>
 8009260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009268:	f000 b9c0 	b.w	80095ec <__retarget_lock_init_recursive>
 800926c:	bd10      	pop	{r4, pc}
 800926e:	bf00      	nop
 8009270:	080093c1 	.word	0x080093c1
 8009274:	080093e3 	.word	0x080093e3
 8009278:	0800941b 	.word	0x0800941b
 800927c:	0800943f 	.word	0x0800943f
 8009280:	24004d18 	.word	0x24004d18

08009284 <stdio_exit_handler>:
 8009284:	4a02      	ldr	r2, [pc, #8]	@ (8009290 <stdio_exit_handler+0xc>)
 8009286:	4903      	ldr	r1, [pc, #12]	@ (8009294 <stdio_exit_handler+0x10>)
 8009288:	4803      	ldr	r0, [pc, #12]	@ (8009298 <stdio_exit_handler+0x14>)
 800928a:	f000 b869 	b.w	8009360 <_fwalk_sglue>
 800928e:	bf00      	nop
 8009290:	24000014 	.word	0x24000014
 8009294:	0800ae5d 	.word	0x0800ae5d
 8009298:	24000024 	.word	0x24000024

0800929c <cleanup_stdio>:
 800929c:	6841      	ldr	r1, [r0, #4]
 800929e:	4b0c      	ldr	r3, [pc, #48]	@ (80092d0 <cleanup_stdio+0x34>)
 80092a0:	4299      	cmp	r1, r3
 80092a2:	b510      	push	{r4, lr}
 80092a4:	4604      	mov	r4, r0
 80092a6:	d001      	beq.n	80092ac <cleanup_stdio+0x10>
 80092a8:	f001 fdd8 	bl	800ae5c <_fflush_r>
 80092ac:	68a1      	ldr	r1, [r4, #8]
 80092ae:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <cleanup_stdio+0x38>)
 80092b0:	4299      	cmp	r1, r3
 80092b2:	d002      	beq.n	80092ba <cleanup_stdio+0x1e>
 80092b4:	4620      	mov	r0, r4
 80092b6:	f001 fdd1 	bl	800ae5c <_fflush_r>
 80092ba:	68e1      	ldr	r1, [r4, #12]
 80092bc:	4b06      	ldr	r3, [pc, #24]	@ (80092d8 <cleanup_stdio+0x3c>)
 80092be:	4299      	cmp	r1, r3
 80092c0:	d004      	beq.n	80092cc <cleanup_stdio+0x30>
 80092c2:	4620      	mov	r0, r4
 80092c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c8:	f001 bdc8 	b.w	800ae5c <_fflush_r>
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	bf00      	nop
 80092d0:	24004d18 	.word	0x24004d18
 80092d4:	24004d80 	.word	0x24004d80
 80092d8:	24004de8 	.word	0x24004de8

080092dc <global_stdio_init.part.0>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	4b0b      	ldr	r3, [pc, #44]	@ (800930c <global_stdio_init.part.0+0x30>)
 80092e0:	4c0b      	ldr	r4, [pc, #44]	@ (8009310 <global_stdio_init.part.0+0x34>)
 80092e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009314 <global_stdio_init.part.0+0x38>)
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	4620      	mov	r0, r4
 80092e8:	2200      	movs	r2, #0
 80092ea:	2104      	movs	r1, #4
 80092ec:	f7ff ff94 	bl	8009218 <std>
 80092f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092f4:	2201      	movs	r2, #1
 80092f6:	2109      	movs	r1, #9
 80092f8:	f7ff ff8e 	bl	8009218 <std>
 80092fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009300:	2202      	movs	r2, #2
 8009302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009306:	2112      	movs	r1, #18
 8009308:	f7ff bf86 	b.w	8009218 <std>
 800930c:	24004e50 	.word	0x24004e50
 8009310:	24004d18 	.word	0x24004d18
 8009314:	08009285 	.word	0x08009285

08009318 <__sfp_lock_acquire>:
 8009318:	4801      	ldr	r0, [pc, #4]	@ (8009320 <__sfp_lock_acquire+0x8>)
 800931a:	f000 b968 	b.w	80095ee <__retarget_lock_acquire_recursive>
 800931e:	bf00      	nop
 8009320:	24004e59 	.word	0x24004e59

08009324 <__sfp_lock_release>:
 8009324:	4801      	ldr	r0, [pc, #4]	@ (800932c <__sfp_lock_release+0x8>)
 8009326:	f000 b963 	b.w	80095f0 <__retarget_lock_release_recursive>
 800932a:	bf00      	nop
 800932c:	24004e59 	.word	0x24004e59

08009330 <__sinit>:
 8009330:	b510      	push	{r4, lr}
 8009332:	4604      	mov	r4, r0
 8009334:	f7ff fff0 	bl	8009318 <__sfp_lock_acquire>
 8009338:	6a23      	ldr	r3, [r4, #32]
 800933a:	b11b      	cbz	r3, 8009344 <__sinit+0x14>
 800933c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009340:	f7ff bff0 	b.w	8009324 <__sfp_lock_release>
 8009344:	4b04      	ldr	r3, [pc, #16]	@ (8009358 <__sinit+0x28>)
 8009346:	6223      	str	r3, [r4, #32]
 8009348:	4b04      	ldr	r3, [pc, #16]	@ (800935c <__sinit+0x2c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1f5      	bne.n	800933c <__sinit+0xc>
 8009350:	f7ff ffc4 	bl	80092dc <global_stdio_init.part.0>
 8009354:	e7f2      	b.n	800933c <__sinit+0xc>
 8009356:	bf00      	nop
 8009358:	0800929d 	.word	0x0800929d
 800935c:	24004e50 	.word	0x24004e50

08009360 <_fwalk_sglue>:
 8009360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009364:	4607      	mov	r7, r0
 8009366:	4688      	mov	r8, r1
 8009368:	4614      	mov	r4, r2
 800936a:	2600      	movs	r6, #0
 800936c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009370:	f1b9 0901 	subs.w	r9, r9, #1
 8009374:	d505      	bpl.n	8009382 <_fwalk_sglue+0x22>
 8009376:	6824      	ldr	r4, [r4, #0]
 8009378:	2c00      	cmp	r4, #0
 800937a:	d1f7      	bne.n	800936c <_fwalk_sglue+0xc>
 800937c:	4630      	mov	r0, r6
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d907      	bls.n	8009398 <_fwalk_sglue+0x38>
 8009388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800938c:	3301      	adds	r3, #1
 800938e:	d003      	beq.n	8009398 <_fwalk_sglue+0x38>
 8009390:	4629      	mov	r1, r5
 8009392:	4638      	mov	r0, r7
 8009394:	47c0      	blx	r8
 8009396:	4306      	orrs	r6, r0
 8009398:	3568      	adds	r5, #104	@ 0x68
 800939a:	e7e9      	b.n	8009370 <_fwalk_sglue+0x10>

0800939c <iprintf>:
 800939c:	b40f      	push	{r0, r1, r2, r3}
 800939e:	b507      	push	{r0, r1, r2, lr}
 80093a0:	4906      	ldr	r1, [pc, #24]	@ (80093bc <iprintf+0x20>)
 80093a2:	ab04      	add	r3, sp, #16
 80093a4:	6808      	ldr	r0, [r1, #0]
 80093a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093aa:	6881      	ldr	r1, [r0, #8]
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	f001 fbb9 	bl	800ab24 <_vfiprintf_r>
 80093b2:	b003      	add	sp, #12
 80093b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b8:	b004      	add	sp, #16
 80093ba:	4770      	bx	lr
 80093bc:	24000020 	.word	0x24000020

080093c0 <__sread>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	460c      	mov	r4, r1
 80093c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c8:	f000 f8c2 	bl	8009550 <_read_r>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	bfab      	itete	ge
 80093d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093d2:	89a3      	ldrhlt	r3, [r4, #12]
 80093d4:	181b      	addge	r3, r3, r0
 80093d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093da:	bfac      	ite	ge
 80093dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093de:	81a3      	strhlt	r3, [r4, #12]
 80093e0:	bd10      	pop	{r4, pc}

080093e2 <__swrite>:
 80093e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e6:	461f      	mov	r7, r3
 80093e8:	898b      	ldrh	r3, [r1, #12]
 80093ea:	05db      	lsls	r3, r3, #23
 80093ec:	4605      	mov	r5, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	4616      	mov	r6, r2
 80093f2:	d505      	bpl.n	8009400 <__swrite+0x1e>
 80093f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f8:	2302      	movs	r3, #2
 80093fa:	2200      	movs	r2, #0
 80093fc:	f000 f896 	bl	800952c <_lseek_r>
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009406:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800940a:	81a3      	strh	r3, [r4, #12]
 800940c:	4632      	mov	r2, r6
 800940e:	463b      	mov	r3, r7
 8009410:	4628      	mov	r0, r5
 8009412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009416:	f000 b8ad 	b.w	8009574 <_write_r>

0800941a <__sseek>:
 800941a:	b510      	push	{r4, lr}
 800941c:	460c      	mov	r4, r1
 800941e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009422:	f000 f883 	bl	800952c <_lseek_r>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	bf15      	itete	ne
 800942c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800942e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009436:	81a3      	strheq	r3, [r4, #12]
 8009438:	bf18      	it	ne
 800943a:	81a3      	strhne	r3, [r4, #12]
 800943c:	bd10      	pop	{r4, pc}

0800943e <__sclose>:
 800943e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009442:	f000 b80d 	b.w	8009460 <_close_r>

08009446 <memset>:
 8009446:	4402      	add	r2, r0
 8009448:	4603      	mov	r3, r0
 800944a:	4293      	cmp	r3, r2
 800944c:	d100      	bne.n	8009450 <memset+0xa>
 800944e:	4770      	bx	lr
 8009450:	f803 1b01 	strb.w	r1, [r3], #1
 8009454:	e7f9      	b.n	800944a <memset+0x4>
	...

08009458 <_localeconv_r>:
 8009458:	4800      	ldr	r0, [pc, #0]	@ (800945c <_localeconv_r+0x4>)
 800945a:	4770      	bx	lr
 800945c:	24000160 	.word	0x24000160

08009460 <_close_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4d06      	ldr	r5, [pc, #24]	@ (800947c <_close_r+0x1c>)
 8009464:	2300      	movs	r3, #0
 8009466:	4604      	mov	r4, r0
 8009468:	4608      	mov	r0, r1
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	f7f7 fdfc 	bl	8001068 <_close>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_close_r+0x1a>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	b103      	cbz	r3, 800947a <_close_r+0x1a>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	24004e54 	.word	0x24004e54

08009480 <_reclaim_reent>:
 8009480:	4b29      	ldr	r3, [pc, #164]	@ (8009528 <_reclaim_reent+0xa8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4283      	cmp	r3, r0
 8009486:	b570      	push	{r4, r5, r6, lr}
 8009488:	4604      	mov	r4, r0
 800948a:	d04b      	beq.n	8009524 <_reclaim_reent+0xa4>
 800948c:	69c3      	ldr	r3, [r0, #28]
 800948e:	b1ab      	cbz	r3, 80094bc <_reclaim_reent+0x3c>
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	b16b      	cbz	r3, 80094b0 <_reclaim_reent+0x30>
 8009494:	2500      	movs	r5, #0
 8009496:	69e3      	ldr	r3, [r4, #28]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	5959      	ldr	r1, [r3, r5]
 800949c:	2900      	cmp	r1, #0
 800949e:	d13b      	bne.n	8009518 <_reclaim_reent+0x98>
 80094a0:	3504      	adds	r5, #4
 80094a2:	2d80      	cmp	r5, #128	@ 0x80
 80094a4:	d1f7      	bne.n	8009496 <_reclaim_reent+0x16>
 80094a6:	69e3      	ldr	r3, [r4, #28]
 80094a8:	4620      	mov	r0, r4
 80094aa:	68d9      	ldr	r1, [r3, #12]
 80094ac:	f000 fe8e 	bl	800a1cc <_free_r>
 80094b0:	69e3      	ldr	r3, [r4, #28]
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	b111      	cbz	r1, 80094bc <_reclaim_reent+0x3c>
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fe88 	bl	800a1cc <_free_r>
 80094bc:	6961      	ldr	r1, [r4, #20]
 80094be:	b111      	cbz	r1, 80094c6 <_reclaim_reent+0x46>
 80094c0:	4620      	mov	r0, r4
 80094c2:	f000 fe83 	bl	800a1cc <_free_r>
 80094c6:	69e1      	ldr	r1, [r4, #28]
 80094c8:	b111      	cbz	r1, 80094d0 <_reclaim_reent+0x50>
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 fe7e 	bl	800a1cc <_free_r>
 80094d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80094d2:	b111      	cbz	r1, 80094da <_reclaim_reent+0x5a>
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fe79 	bl	800a1cc <_free_r>
 80094da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094dc:	b111      	cbz	r1, 80094e4 <_reclaim_reent+0x64>
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 fe74 	bl	800a1cc <_free_r>
 80094e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80094e6:	b111      	cbz	r1, 80094ee <_reclaim_reent+0x6e>
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 fe6f 	bl	800a1cc <_free_r>
 80094ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80094f0:	b111      	cbz	r1, 80094f8 <_reclaim_reent+0x78>
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 fe6a 	bl	800a1cc <_free_r>
 80094f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80094fa:	b111      	cbz	r1, 8009502 <_reclaim_reent+0x82>
 80094fc:	4620      	mov	r0, r4
 80094fe:	f000 fe65 	bl	800a1cc <_free_r>
 8009502:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009504:	b111      	cbz	r1, 800950c <_reclaim_reent+0x8c>
 8009506:	4620      	mov	r0, r4
 8009508:	f000 fe60 	bl	800a1cc <_free_r>
 800950c:	6a23      	ldr	r3, [r4, #32]
 800950e:	b14b      	cbz	r3, 8009524 <_reclaim_reent+0xa4>
 8009510:	4620      	mov	r0, r4
 8009512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009516:	4718      	bx	r3
 8009518:	680e      	ldr	r6, [r1, #0]
 800951a:	4620      	mov	r0, r4
 800951c:	f000 fe56 	bl	800a1cc <_free_r>
 8009520:	4631      	mov	r1, r6
 8009522:	e7bb      	b.n	800949c <_reclaim_reent+0x1c>
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	bf00      	nop
 8009528:	24000020 	.word	0x24000020

0800952c <_lseek_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d07      	ldr	r5, [pc, #28]	@ (800954c <_lseek_r+0x20>)
 8009530:	4604      	mov	r4, r0
 8009532:	4608      	mov	r0, r1
 8009534:	4611      	mov	r1, r2
 8009536:	2200      	movs	r2, #0
 8009538:	602a      	str	r2, [r5, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	f7f7 fdbb 	bl	80010b6 <_lseek>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_lseek_r+0x1e>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_lseek_r+0x1e>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	24004e54 	.word	0x24004e54

08009550 <_read_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d07      	ldr	r5, [pc, #28]	@ (8009570 <_read_r+0x20>)
 8009554:	4604      	mov	r4, r0
 8009556:	4608      	mov	r0, r1
 8009558:	4611      	mov	r1, r2
 800955a:	2200      	movs	r2, #0
 800955c:	602a      	str	r2, [r5, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	f7f7 fd49 	bl	8000ff6 <_read>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_read_r+0x1e>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_read_r+0x1e>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	24004e54 	.word	0x24004e54

08009574 <_write_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d07      	ldr	r5, [pc, #28]	@ (8009594 <_write_r+0x20>)
 8009578:	4604      	mov	r4, r0
 800957a:	4608      	mov	r0, r1
 800957c:	4611      	mov	r1, r2
 800957e:	2200      	movs	r2, #0
 8009580:	602a      	str	r2, [r5, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	f7f7 fd54 	bl	8001030 <_write>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_write_r+0x1e>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_write_r+0x1e>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	24004e54 	.word	0x24004e54

08009598 <__errno>:
 8009598:	4b01      	ldr	r3, [pc, #4]	@ (80095a0 <__errno+0x8>)
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	24000020 	.word	0x24000020

080095a4 <__libc_init_array>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4d0d      	ldr	r5, [pc, #52]	@ (80095dc <__libc_init_array+0x38>)
 80095a8:	4c0d      	ldr	r4, [pc, #52]	@ (80095e0 <__libc_init_array+0x3c>)
 80095aa:	1b64      	subs	r4, r4, r5
 80095ac:	10a4      	asrs	r4, r4, #2
 80095ae:	2600      	movs	r6, #0
 80095b0:	42a6      	cmp	r6, r4
 80095b2:	d109      	bne.n	80095c8 <__libc_init_array+0x24>
 80095b4:	4d0b      	ldr	r5, [pc, #44]	@ (80095e4 <__libc_init_array+0x40>)
 80095b6:	4c0c      	ldr	r4, [pc, #48]	@ (80095e8 <__libc_init_array+0x44>)
 80095b8:	f001 fe50 	bl	800b25c <_init>
 80095bc:	1b64      	subs	r4, r4, r5
 80095be:	10a4      	asrs	r4, r4, #2
 80095c0:	2600      	movs	r6, #0
 80095c2:	42a6      	cmp	r6, r4
 80095c4:	d105      	bne.n	80095d2 <__libc_init_array+0x2e>
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095cc:	4798      	blx	r3
 80095ce:	3601      	adds	r6, #1
 80095d0:	e7ee      	b.n	80095b0 <__libc_init_array+0xc>
 80095d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d6:	4798      	blx	r3
 80095d8:	3601      	adds	r6, #1
 80095da:	e7f2      	b.n	80095c2 <__libc_init_array+0x1e>
 80095dc:	0800b698 	.word	0x0800b698
 80095e0:	0800b698 	.word	0x0800b698
 80095e4:	0800b698 	.word	0x0800b698
 80095e8:	0800b69c 	.word	0x0800b69c

080095ec <__retarget_lock_init_recursive>:
 80095ec:	4770      	bx	lr

080095ee <__retarget_lock_acquire_recursive>:
 80095ee:	4770      	bx	lr

080095f0 <__retarget_lock_release_recursive>:
 80095f0:	4770      	bx	lr

080095f2 <memcpy>:
 80095f2:	440a      	add	r2, r1
 80095f4:	4291      	cmp	r1, r2
 80095f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80095fa:	d100      	bne.n	80095fe <memcpy+0xc>
 80095fc:	4770      	bx	lr
 80095fe:	b510      	push	{r4, lr}
 8009600:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009604:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009608:	4291      	cmp	r1, r2
 800960a:	d1f9      	bne.n	8009600 <memcpy+0xe>
 800960c:	bd10      	pop	{r4, pc}

0800960e <quorem>:
 800960e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009612:	6903      	ldr	r3, [r0, #16]
 8009614:	690c      	ldr	r4, [r1, #16]
 8009616:	42a3      	cmp	r3, r4
 8009618:	4607      	mov	r7, r0
 800961a:	db7e      	blt.n	800971a <quorem+0x10c>
 800961c:	3c01      	subs	r4, #1
 800961e:	f101 0814 	add.w	r8, r1, #20
 8009622:	00a3      	lsls	r3, r4, #2
 8009624:	f100 0514 	add.w	r5, r0, #20
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009638:	3301      	adds	r3, #1
 800963a:	429a      	cmp	r2, r3
 800963c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009640:	fbb2 f6f3 	udiv	r6, r2, r3
 8009644:	d32e      	bcc.n	80096a4 <quorem+0x96>
 8009646:	f04f 0a00 	mov.w	sl, #0
 800964a:	46c4      	mov	ip, r8
 800964c:	46ae      	mov	lr, r5
 800964e:	46d3      	mov	fp, sl
 8009650:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009654:	b298      	uxth	r0, r3
 8009656:	fb06 a000 	mla	r0, r6, r0, sl
 800965a:	0c02      	lsrs	r2, r0, #16
 800965c:	0c1b      	lsrs	r3, r3, #16
 800965e:	fb06 2303 	mla	r3, r6, r3, r2
 8009662:	f8de 2000 	ldr.w	r2, [lr]
 8009666:	b280      	uxth	r0, r0
 8009668:	b292      	uxth	r2, r2
 800966a:	1a12      	subs	r2, r2, r0
 800966c:	445a      	add	r2, fp
 800966e:	f8de 0000 	ldr.w	r0, [lr]
 8009672:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009676:	b29b      	uxth	r3, r3
 8009678:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800967c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009680:	b292      	uxth	r2, r2
 8009682:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009686:	45e1      	cmp	r9, ip
 8009688:	f84e 2b04 	str.w	r2, [lr], #4
 800968c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009690:	d2de      	bcs.n	8009650 <quorem+0x42>
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	58eb      	ldr	r3, [r5, r3]
 8009696:	b92b      	cbnz	r3, 80096a4 <quorem+0x96>
 8009698:	9b01      	ldr	r3, [sp, #4]
 800969a:	3b04      	subs	r3, #4
 800969c:	429d      	cmp	r5, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	d32f      	bcc.n	8009702 <quorem+0xf4>
 80096a2:	613c      	str	r4, [r7, #16]
 80096a4:	4638      	mov	r0, r7
 80096a6:	f001 f90b 	bl	800a8c0 <__mcmp>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	db25      	blt.n	80096fa <quorem+0xec>
 80096ae:	4629      	mov	r1, r5
 80096b0:	2000      	movs	r0, #0
 80096b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80096b6:	f8d1 c000 	ldr.w	ip, [r1]
 80096ba:	fa1f fe82 	uxth.w	lr, r2
 80096be:	fa1f f38c 	uxth.w	r3, ip
 80096c2:	eba3 030e 	sub.w	r3, r3, lr
 80096c6:	4403      	add	r3, r0
 80096c8:	0c12      	lsrs	r2, r2, #16
 80096ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096d8:	45c1      	cmp	r9, r8
 80096da:	f841 3b04 	str.w	r3, [r1], #4
 80096de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096e2:	d2e6      	bcs.n	80096b2 <quorem+0xa4>
 80096e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ec:	b922      	cbnz	r2, 80096f8 <quorem+0xea>
 80096ee:	3b04      	subs	r3, #4
 80096f0:	429d      	cmp	r5, r3
 80096f2:	461a      	mov	r2, r3
 80096f4:	d30b      	bcc.n	800970e <quorem+0x100>
 80096f6:	613c      	str	r4, [r7, #16]
 80096f8:	3601      	adds	r6, #1
 80096fa:	4630      	mov	r0, r6
 80096fc:	b003      	add	sp, #12
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	6812      	ldr	r2, [r2, #0]
 8009704:	3b04      	subs	r3, #4
 8009706:	2a00      	cmp	r2, #0
 8009708:	d1cb      	bne.n	80096a2 <quorem+0x94>
 800970a:	3c01      	subs	r4, #1
 800970c:	e7c6      	b.n	800969c <quorem+0x8e>
 800970e:	6812      	ldr	r2, [r2, #0]
 8009710:	3b04      	subs	r3, #4
 8009712:	2a00      	cmp	r2, #0
 8009714:	d1ef      	bne.n	80096f6 <quorem+0xe8>
 8009716:	3c01      	subs	r4, #1
 8009718:	e7ea      	b.n	80096f0 <quorem+0xe2>
 800971a:	2000      	movs	r0, #0
 800971c:	e7ee      	b.n	80096fc <quorem+0xee>
	...

08009720 <_dtoa_r>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	ed2d 8b02 	vpush	{d8}
 8009728:	69c7      	ldr	r7, [r0, #28]
 800972a:	b091      	sub	sp, #68	@ 0x44
 800972c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009730:	ec55 4b10 	vmov	r4, r5, d0
 8009734:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009736:	9107      	str	r1, [sp, #28]
 8009738:	4681      	mov	r9, r0
 800973a:	9209      	str	r2, [sp, #36]	@ 0x24
 800973c:	930d      	str	r3, [sp, #52]	@ 0x34
 800973e:	b97f      	cbnz	r7, 8009760 <_dtoa_r+0x40>
 8009740:	2010      	movs	r0, #16
 8009742:	f000 fd8d 	bl	800a260 <malloc>
 8009746:	4602      	mov	r2, r0
 8009748:	f8c9 001c 	str.w	r0, [r9, #28]
 800974c:	b920      	cbnz	r0, 8009758 <_dtoa_r+0x38>
 800974e:	4ba0      	ldr	r3, [pc, #640]	@ (80099d0 <_dtoa_r+0x2b0>)
 8009750:	21ef      	movs	r1, #239	@ 0xef
 8009752:	48a0      	ldr	r0, [pc, #640]	@ (80099d4 <_dtoa_r+0x2b4>)
 8009754:	f001 fc4e 	bl	800aff4 <__assert_func>
 8009758:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800975c:	6007      	str	r7, [r0, #0]
 800975e:	60c7      	str	r7, [r0, #12]
 8009760:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009764:	6819      	ldr	r1, [r3, #0]
 8009766:	b159      	cbz	r1, 8009780 <_dtoa_r+0x60>
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	604a      	str	r2, [r1, #4]
 800976c:	2301      	movs	r3, #1
 800976e:	4093      	lsls	r3, r2
 8009770:	608b      	str	r3, [r1, #8]
 8009772:	4648      	mov	r0, r9
 8009774:	f000 fe6a 	bl	800a44c <_Bfree>
 8009778:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	1e2b      	subs	r3, r5, #0
 8009782:	bfbb      	ittet	lt
 8009784:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009788:	9303      	strlt	r3, [sp, #12]
 800978a:	2300      	movge	r3, #0
 800978c:	2201      	movlt	r2, #1
 800978e:	bfac      	ite	ge
 8009790:	6033      	strge	r3, [r6, #0]
 8009792:	6032      	strlt	r2, [r6, #0]
 8009794:	4b90      	ldr	r3, [pc, #576]	@ (80099d8 <_dtoa_r+0x2b8>)
 8009796:	9e03      	ldr	r6, [sp, #12]
 8009798:	43b3      	bics	r3, r6
 800979a:	d110      	bne.n	80097be <_dtoa_r+0x9e>
 800979c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800979e:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80097a8:	4323      	orrs	r3, r4
 80097aa:	f000 84de 	beq.w	800a16a <_dtoa_r+0xa4a>
 80097ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097b0:	4f8a      	ldr	r7, [pc, #552]	@ (80099dc <_dtoa_r+0x2bc>)
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 84e0 	beq.w	800a178 <_dtoa_r+0xa58>
 80097b8:	1cfb      	adds	r3, r7, #3
 80097ba:	f000 bcdb 	b.w	800a174 <_dtoa_r+0xa54>
 80097be:	ed9d 8b02 	vldr	d8, [sp, #8]
 80097c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	d10a      	bne.n	80097e2 <_dtoa_r+0xc2>
 80097cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097ce:	2301      	movs	r3, #1
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097d4:	b113      	cbz	r3, 80097dc <_dtoa_r+0xbc>
 80097d6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80097d8:	4b81      	ldr	r3, [pc, #516]	@ (80099e0 <_dtoa_r+0x2c0>)
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	4f81      	ldr	r7, [pc, #516]	@ (80099e4 <_dtoa_r+0x2c4>)
 80097de:	f000 bccb 	b.w	800a178 <_dtoa_r+0xa58>
 80097e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80097e4:	a90f      	add	r1, sp, #60	@ 0x3c
 80097e6:	4648      	mov	r0, r9
 80097e8:	eeb0 0b48 	vmov.f64	d0, d8
 80097ec:	f001 f918 	bl	800aa20 <__d2b>
 80097f0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80097f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097f6:	9001      	str	r0, [sp, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d045      	beq.n	8009888 <_dtoa_r+0x168>
 80097fc:	eeb0 7b48 	vmov.f64	d7, d8
 8009800:	ee18 1a90 	vmov	r1, s17
 8009804:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009808:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800980c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009810:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009814:	2500      	movs	r5, #0
 8009816:	ee07 1a90 	vmov	s15, r1
 800981a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800981e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80099b8 <_dtoa_r+0x298>
 8009822:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009826:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80099c0 <_dtoa_r+0x2a0>
 800982a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800982e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80099c8 <_dtoa_r+0x2a8>
 8009832:	ee07 3a90 	vmov	s15, r3
 8009836:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800983a:	eeb0 7b46 	vmov.f64	d7, d6
 800983e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009842:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009846:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800984a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800984e:	ee16 8a90 	vmov	r8, s13
 8009852:	d508      	bpl.n	8009866 <_dtoa_r+0x146>
 8009854:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009858:	eeb4 6b47 	vcmp.f64	d6, d7
 800985c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009860:	bf18      	it	ne
 8009862:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009866:	f1b8 0f16 	cmp.w	r8, #22
 800986a:	d82b      	bhi.n	80098c4 <_dtoa_r+0x1a4>
 800986c:	495e      	ldr	r1, [pc, #376]	@ (80099e8 <_dtoa_r+0x2c8>)
 800986e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009872:	ed91 7b00 	vldr	d7, [r1]
 8009876:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987e:	d501      	bpl.n	8009884 <_dtoa_r+0x164>
 8009880:	f108 38ff 	add.w	r8, r8, #4294967295
 8009884:	2100      	movs	r1, #0
 8009886:	e01e      	b.n	80098c6 <_dtoa_r+0x1a6>
 8009888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800988a:	4413      	add	r3, r2
 800988c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009890:	2920      	cmp	r1, #32
 8009892:	bfc1      	itttt	gt
 8009894:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009898:	408e      	lslgt	r6, r1
 800989a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800989e:	fa24 f101 	lsrgt.w	r1, r4, r1
 80098a2:	bfd6      	itet	le
 80098a4:	f1c1 0120 	rsble	r1, r1, #32
 80098a8:	4331      	orrgt	r1, r6
 80098aa:	fa04 f101 	lslle.w	r1, r4, r1
 80098ae:	ee07 1a90 	vmov	s15, r1
 80098b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098b6:	3b01      	subs	r3, #1
 80098b8:	ee17 1a90 	vmov	r1, s15
 80098bc:	2501      	movs	r5, #1
 80098be:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80098c2:	e7a8      	b.n	8009816 <_dtoa_r+0xf6>
 80098c4:	2101      	movs	r1, #1
 80098c6:	1ad2      	subs	r2, r2, r3
 80098c8:	1e53      	subs	r3, r2, #1
 80098ca:	9306      	str	r3, [sp, #24]
 80098cc:	bf45      	ittet	mi
 80098ce:	f1c2 0301 	rsbmi	r3, r2, #1
 80098d2:	9305      	strmi	r3, [sp, #20]
 80098d4:	2300      	movpl	r3, #0
 80098d6:	2300      	movmi	r3, #0
 80098d8:	bf4c      	ite	mi
 80098da:	9306      	strmi	r3, [sp, #24]
 80098dc:	9305      	strpl	r3, [sp, #20]
 80098de:	f1b8 0f00 	cmp.w	r8, #0
 80098e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80098e4:	db18      	blt.n	8009918 <_dtoa_r+0x1f8>
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80098ec:	4443      	add	r3, r8
 80098ee:	9306      	str	r3, [sp, #24]
 80098f0:	2300      	movs	r3, #0
 80098f2:	9a07      	ldr	r2, [sp, #28]
 80098f4:	2a09      	cmp	r2, #9
 80098f6:	d849      	bhi.n	800998c <_dtoa_r+0x26c>
 80098f8:	2a05      	cmp	r2, #5
 80098fa:	bfc4      	itt	gt
 80098fc:	3a04      	subgt	r2, #4
 80098fe:	9207      	strgt	r2, [sp, #28]
 8009900:	9a07      	ldr	r2, [sp, #28]
 8009902:	f1a2 0202 	sub.w	r2, r2, #2
 8009906:	bfcc      	ite	gt
 8009908:	2400      	movgt	r4, #0
 800990a:	2401      	movle	r4, #1
 800990c:	2a03      	cmp	r2, #3
 800990e:	d848      	bhi.n	80099a2 <_dtoa_r+0x282>
 8009910:	e8df f002 	tbb	[pc, r2]
 8009914:	3a2c2e0b 	.word	0x3a2c2e0b
 8009918:	9b05      	ldr	r3, [sp, #20]
 800991a:	2200      	movs	r2, #0
 800991c:	eba3 0308 	sub.w	r3, r3, r8
 8009920:	9305      	str	r3, [sp, #20]
 8009922:	920a      	str	r2, [sp, #40]	@ 0x28
 8009924:	f1c8 0300 	rsb	r3, r8, #0
 8009928:	e7e3      	b.n	80098f2 <_dtoa_r+0x1d2>
 800992a:	2200      	movs	r2, #0
 800992c:	9208      	str	r2, [sp, #32]
 800992e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009930:	2a00      	cmp	r2, #0
 8009932:	dc39      	bgt.n	80099a8 <_dtoa_r+0x288>
 8009934:	f04f 0b01 	mov.w	fp, #1
 8009938:	46da      	mov	sl, fp
 800993a:	465a      	mov	r2, fp
 800993c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009940:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009944:	2100      	movs	r1, #0
 8009946:	2004      	movs	r0, #4
 8009948:	f100 0614 	add.w	r6, r0, #20
 800994c:	4296      	cmp	r6, r2
 800994e:	d930      	bls.n	80099b2 <_dtoa_r+0x292>
 8009950:	6079      	str	r1, [r7, #4]
 8009952:	4648      	mov	r0, r9
 8009954:	9304      	str	r3, [sp, #16]
 8009956:	f000 fd39 	bl	800a3cc <_Balloc>
 800995a:	9b04      	ldr	r3, [sp, #16]
 800995c:	4607      	mov	r7, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	d146      	bne.n	80099f0 <_dtoa_r+0x2d0>
 8009962:	4b22      	ldr	r3, [pc, #136]	@ (80099ec <_dtoa_r+0x2cc>)
 8009964:	4602      	mov	r2, r0
 8009966:	f240 11af 	movw	r1, #431	@ 0x1af
 800996a:	e6f2      	b.n	8009752 <_dtoa_r+0x32>
 800996c:	2201      	movs	r2, #1
 800996e:	e7dd      	b.n	800992c <_dtoa_r+0x20c>
 8009970:	2200      	movs	r2, #0
 8009972:	9208      	str	r2, [sp, #32]
 8009974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009976:	eb08 0b02 	add.w	fp, r8, r2
 800997a:	f10b 0a01 	add.w	sl, fp, #1
 800997e:	4652      	mov	r2, sl
 8009980:	2a01      	cmp	r2, #1
 8009982:	bfb8      	it	lt
 8009984:	2201      	movlt	r2, #1
 8009986:	e7db      	b.n	8009940 <_dtoa_r+0x220>
 8009988:	2201      	movs	r2, #1
 800998a:	e7f2      	b.n	8009972 <_dtoa_r+0x252>
 800998c:	2401      	movs	r4, #1
 800998e:	2200      	movs	r2, #0
 8009990:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009994:	f04f 3bff 	mov.w	fp, #4294967295
 8009998:	2100      	movs	r1, #0
 800999a:	46da      	mov	sl, fp
 800999c:	2212      	movs	r2, #18
 800999e:	9109      	str	r1, [sp, #36]	@ 0x24
 80099a0:	e7ce      	b.n	8009940 <_dtoa_r+0x220>
 80099a2:	2201      	movs	r2, #1
 80099a4:	9208      	str	r2, [sp, #32]
 80099a6:	e7f5      	b.n	8009994 <_dtoa_r+0x274>
 80099a8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80099ac:	46da      	mov	sl, fp
 80099ae:	465a      	mov	r2, fp
 80099b0:	e7c6      	b.n	8009940 <_dtoa_r+0x220>
 80099b2:	3101      	adds	r1, #1
 80099b4:	0040      	lsls	r0, r0, #1
 80099b6:	e7c7      	b.n	8009948 <_dtoa_r+0x228>
 80099b8:	636f4361 	.word	0x636f4361
 80099bc:	3fd287a7 	.word	0x3fd287a7
 80099c0:	8b60c8b3 	.word	0x8b60c8b3
 80099c4:	3fc68a28 	.word	0x3fc68a28
 80099c8:	509f79fb 	.word	0x509f79fb
 80099cc:	3fd34413 	.word	0x3fd34413
 80099d0:	0800b35d 	.word	0x0800b35d
 80099d4:	0800b374 	.word	0x0800b374
 80099d8:	7ff00000 	.word	0x7ff00000
 80099dc:	0800b359 	.word	0x0800b359
 80099e0:	0800b32d 	.word	0x0800b32d
 80099e4:	0800b32c 	.word	0x0800b32c
 80099e8:	0800b470 	.word	0x0800b470
 80099ec:	0800b3cc 	.word	0x0800b3cc
 80099f0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80099f4:	f1ba 0f0e 	cmp.w	sl, #14
 80099f8:	6010      	str	r0, [r2, #0]
 80099fa:	d86f      	bhi.n	8009adc <_dtoa_r+0x3bc>
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	d06d      	beq.n	8009adc <_dtoa_r+0x3bc>
 8009a00:	f1b8 0f00 	cmp.w	r8, #0
 8009a04:	f340 80c2 	ble.w	8009b8c <_dtoa_r+0x46c>
 8009a08:	4aca      	ldr	r2, [pc, #808]	@ (8009d34 <_dtoa_r+0x614>)
 8009a0a:	f008 010f 	and.w	r1, r8, #15
 8009a0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a12:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009a16:	ed92 7b00 	vldr	d7, [r2]
 8009a1a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009a1e:	f000 80a9 	beq.w	8009b74 <_dtoa_r+0x454>
 8009a22:	4ac5      	ldr	r2, [pc, #788]	@ (8009d38 <_dtoa_r+0x618>)
 8009a24:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009a2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a30:	f001 010f 	and.w	r1, r1, #15
 8009a34:	2203      	movs	r2, #3
 8009a36:	48c0      	ldr	r0, [pc, #768]	@ (8009d38 <_dtoa_r+0x618>)
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	f040 809d 	bne.w	8009b78 <_dtoa_r+0x458>
 8009a3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a50:	2900      	cmp	r1, #0
 8009a52:	f000 80c1 	beq.w	8009bd8 <_dtoa_r+0x4b8>
 8009a56:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009a5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a62:	f140 80b9 	bpl.w	8009bd8 <_dtoa_r+0x4b8>
 8009a66:	f1ba 0f00 	cmp.w	sl, #0
 8009a6a:	f000 80b5 	beq.w	8009bd8 <_dtoa_r+0x4b8>
 8009a6e:	f1bb 0f00 	cmp.w	fp, #0
 8009a72:	dd31      	ble.n	8009ad8 <_dtoa_r+0x3b8>
 8009a74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009a78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a80:	f108 31ff 	add.w	r1, r8, #4294967295
 8009a84:	9104      	str	r1, [sp, #16]
 8009a86:	3201      	adds	r2, #1
 8009a88:	465c      	mov	r4, fp
 8009a8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a8e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009a92:	ee07 2a90 	vmov	s15, r2
 8009a96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009a9e:	ee15 2a90 	vmov	r2, s11
 8009aa2:	ec51 0b15 	vmov	r0, r1, d5
 8009aa6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009aaa:	2c00      	cmp	r4, #0
 8009aac:	f040 8098 	bne.w	8009be0 <_dtoa_r+0x4c0>
 8009ab0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009ab4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ab8:	ec41 0b17 	vmov	d7, r0, r1
 8009abc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac4:	f300 8261 	bgt.w	8009f8a <_dtoa_r+0x86a>
 8009ac8:	eeb1 7b47 	vneg.f64	d7, d7
 8009acc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad4:	f100 80f5 	bmi.w	8009cc2 <_dtoa_r+0x5a2>
 8009ad8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009adc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	f2c0 812c 	blt.w	8009d3c <_dtoa_r+0x61c>
 8009ae4:	f1b8 0f0e 	cmp.w	r8, #14
 8009ae8:	f300 8128 	bgt.w	8009d3c <_dtoa_r+0x61c>
 8009aec:	4b91      	ldr	r3, [pc, #580]	@ (8009d34 <_dtoa_r+0x614>)
 8009aee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009af2:	ed93 6b00 	vldr	d6, [r3]
 8009af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	da03      	bge.n	8009b04 <_dtoa_r+0x3e4>
 8009afc:	f1ba 0f00 	cmp.w	sl, #0
 8009b00:	f340 80d2 	ble.w	8009ca8 <_dtoa_r+0x588>
 8009b04:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b0c:	463e      	mov	r6, r7
 8009b0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009b12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009b16:	ee15 3a10 	vmov	r3, s10
 8009b1a:	3330      	adds	r3, #48	@ 0x30
 8009b1c:	f806 3b01 	strb.w	r3, [r6], #1
 8009b20:	1bf3      	subs	r3, r6, r7
 8009b22:	459a      	cmp	sl, r3
 8009b24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009b28:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009b2c:	f040 80f8 	bne.w	8009d20 <_dtoa_r+0x600>
 8009b30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009b34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	f300 80dd 	bgt.w	8009cfa <_dtoa_r+0x5da>
 8009b40:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b48:	d104      	bne.n	8009b54 <_dtoa_r+0x434>
 8009b4a:	ee15 3a10 	vmov	r3, s10
 8009b4e:	07db      	lsls	r3, r3, #31
 8009b50:	f100 80d3 	bmi.w	8009cfa <_dtoa_r+0x5da>
 8009b54:	9901      	ldr	r1, [sp, #4]
 8009b56:	4648      	mov	r0, r9
 8009b58:	f000 fc78 	bl	800a44c <_Bfree>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b60:	7033      	strb	r3, [r6, #0]
 8009b62:	f108 0301 	add.w	r3, r8, #1
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 8304 	beq.w	800a178 <_dtoa_r+0xa58>
 8009b70:	601e      	str	r6, [r3, #0]
 8009b72:	e301      	b.n	800a178 <_dtoa_r+0xa58>
 8009b74:	2202      	movs	r2, #2
 8009b76:	e75e      	b.n	8009a36 <_dtoa_r+0x316>
 8009b78:	07cc      	lsls	r4, r1, #31
 8009b7a:	d504      	bpl.n	8009b86 <_dtoa_r+0x466>
 8009b7c:	ed90 6b00 	vldr	d6, [r0]
 8009b80:	3201      	adds	r2, #1
 8009b82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b86:	1049      	asrs	r1, r1, #1
 8009b88:	3008      	adds	r0, #8
 8009b8a:	e755      	b.n	8009a38 <_dtoa_r+0x318>
 8009b8c:	d022      	beq.n	8009bd4 <_dtoa_r+0x4b4>
 8009b8e:	f1c8 0100 	rsb	r1, r8, #0
 8009b92:	4a68      	ldr	r2, [pc, #416]	@ (8009d34 <_dtoa_r+0x614>)
 8009b94:	f001 000f 	and.w	r0, r1, #15
 8009b98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009b9c:	ed92 7b00 	vldr	d7, [r2]
 8009ba0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009ba4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ba8:	4863      	ldr	r0, [pc, #396]	@ (8009d38 <_dtoa_r+0x618>)
 8009baa:	1109      	asrs	r1, r1, #4
 8009bac:	2400      	movs	r4, #0
 8009bae:	2202      	movs	r2, #2
 8009bb0:	b929      	cbnz	r1, 8009bbe <_dtoa_r+0x49e>
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	f43f af49 	beq.w	8009a4a <_dtoa_r+0x32a>
 8009bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bbc:	e745      	b.n	8009a4a <_dtoa_r+0x32a>
 8009bbe:	07ce      	lsls	r6, r1, #31
 8009bc0:	d505      	bpl.n	8009bce <_dtoa_r+0x4ae>
 8009bc2:	ed90 6b00 	vldr	d6, [r0]
 8009bc6:	3201      	adds	r2, #1
 8009bc8:	2401      	movs	r4, #1
 8009bca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bce:	1049      	asrs	r1, r1, #1
 8009bd0:	3008      	adds	r0, #8
 8009bd2:	e7ed      	b.n	8009bb0 <_dtoa_r+0x490>
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	e738      	b.n	8009a4a <_dtoa_r+0x32a>
 8009bd8:	f8cd 8010 	str.w	r8, [sp, #16]
 8009bdc:	4654      	mov	r4, sl
 8009bde:	e754      	b.n	8009a8a <_dtoa_r+0x36a>
 8009be0:	4a54      	ldr	r2, [pc, #336]	@ (8009d34 <_dtoa_r+0x614>)
 8009be2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009be6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009bea:	9a08      	ldr	r2, [sp, #32]
 8009bec:	ec41 0b17 	vmov	d7, r0, r1
 8009bf0:	443c      	add	r4, r7
 8009bf2:	b34a      	cbz	r2, 8009c48 <_dtoa_r+0x528>
 8009bf4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009bf8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009bfc:	463e      	mov	r6, r7
 8009bfe:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c02:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c06:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c0a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c0e:	ee14 2a90 	vmov	r2, s9
 8009c12:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c16:	3230      	adds	r2, #48	@ 0x30
 8009c18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c24:	f806 2b01 	strb.w	r2, [r6], #1
 8009c28:	d438      	bmi.n	8009c9c <_dtoa_r+0x57c>
 8009c2a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c2e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c36:	d462      	bmi.n	8009cfe <_dtoa_r+0x5de>
 8009c38:	42a6      	cmp	r6, r4
 8009c3a:	f43f af4d 	beq.w	8009ad8 <_dtoa_r+0x3b8>
 8009c3e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009c42:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c46:	e7e0      	b.n	8009c0a <_dtoa_r+0x4ea>
 8009c48:	4621      	mov	r1, r4
 8009c4a:	463e      	mov	r6, r7
 8009c4c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c50:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c54:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c58:	ee14 2a90 	vmov	r2, s9
 8009c5c:	3230      	adds	r2, #48	@ 0x30
 8009c5e:	f806 2b01 	strb.w	r2, [r6], #1
 8009c62:	42a6      	cmp	r6, r4
 8009c64:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c68:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c6c:	d119      	bne.n	8009ca2 <_dtoa_r+0x582>
 8009c6e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009c72:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009c76:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7e:	dc3e      	bgt.n	8009cfe <_dtoa_r+0x5de>
 8009c80:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009c84:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8c:	f57f af24 	bpl.w	8009ad8 <_dtoa_r+0x3b8>
 8009c90:	460e      	mov	r6, r1
 8009c92:	3901      	subs	r1, #1
 8009c94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c98:	2b30      	cmp	r3, #48	@ 0x30
 8009c9a:	d0f9      	beq.n	8009c90 <_dtoa_r+0x570>
 8009c9c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009ca0:	e758      	b.n	8009b54 <_dtoa_r+0x434>
 8009ca2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ca6:	e7d5      	b.n	8009c54 <_dtoa_r+0x534>
 8009ca8:	d10b      	bne.n	8009cc2 <_dtoa_r+0x5a2>
 8009caa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009cae:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009cb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cbe:	f2c0 8161 	blt.w	8009f84 <_dtoa_r+0x864>
 8009cc2:	2400      	movs	r4, #0
 8009cc4:	4625      	mov	r5, r4
 8009cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	463e      	mov	r6, r7
 8009cce:	f04f 0800 	mov.w	r8, #0
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4648      	mov	r0, r9
 8009cd6:	f000 fbb9 	bl	800a44c <_Bfree>
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	d0de      	beq.n	8009c9c <_dtoa_r+0x57c>
 8009cde:	f1b8 0f00 	cmp.w	r8, #0
 8009ce2:	d005      	beq.n	8009cf0 <_dtoa_r+0x5d0>
 8009ce4:	45a8      	cmp	r8, r5
 8009ce6:	d003      	beq.n	8009cf0 <_dtoa_r+0x5d0>
 8009ce8:	4641      	mov	r1, r8
 8009cea:	4648      	mov	r0, r9
 8009cec:	f000 fbae 	bl	800a44c <_Bfree>
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4648      	mov	r0, r9
 8009cf4:	f000 fbaa 	bl	800a44c <_Bfree>
 8009cf8:	e7d0      	b.n	8009c9c <_dtoa_r+0x57c>
 8009cfa:	f8cd 8010 	str.w	r8, [sp, #16]
 8009cfe:	4633      	mov	r3, r6
 8009d00:	461e      	mov	r6, r3
 8009d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d06:	2a39      	cmp	r2, #57	@ 0x39
 8009d08:	d106      	bne.n	8009d18 <_dtoa_r+0x5f8>
 8009d0a:	429f      	cmp	r7, r3
 8009d0c:	d1f8      	bne.n	8009d00 <_dtoa_r+0x5e0>
 8009d0e:	9a04      	ldr	r2, [sp, #16]
 8009d10:	3201      	adds	r2, #1
 8009d12:	9204      	str	r2, [sp, #16]
 8009d14:	2230      	movs	r2, #48	@ 0x30
 8009d16:	703a      	strb	r2, [r7, #0]
 8009d18:	781a      	ldrb	r2, [r3, #0]
 8009d1a:	3201      	adds	r2, #1
 8009d1c:	701a      	strb	r2, [r3, #0]
 8009d1e:	e7bd      	b.n	8009c9c <_dtoa_r+0x57c>
 8009d20:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d2c:	f47f aeef 	bne.w	8009b0e <_dtoa_r+0x3ee>
 8009d30:	e710      	b.n	8009b54 <_dtoa_r+0x434>
 8009d32:	bf00      	nop
 8009d34:	0800b470 	.word	0x0800b470
 8009d38:	0800b448 	.word	0x0800b448
 8009d3c:	9908      	ldr	r1, [sp, #32]
 8009d3e:	2900      	cmp	r1, #0
 8009d40:	f000 80e3 	beq.w	8009f0a <_dtoa_r+0x7ea>
 8009d44:	9907      	ldr	r1, [sp, #28]
 8009d46:	2901      	cmp	r1, #1
 8009d48:	f300 80c8 	bgt.w	8009edc <_dtoa_r+0x7bc>
 8009d4c:	2d00      	cmp	r5, #0
 8009d4e:	f000 80c1 	beq.w	8009ed4 <_dtoa_r+0x7b4>
 8009d52:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d56:	9e05      	ldr	r6, [sp, #20]
 8009d58:	461c      	mov	r4, r3
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	9b05      	ldr	r3, [sp, #20]
 8009d5e:	4413      	add	r3, r2
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	9b06      	ldr	r3, [sp, #24]
 8009d64:	2101      	movs	r1, #1
 8009d66:	4413      	add	r3, r2
 8009d68:	4648      	mov	r0, r9
 8009d6a:	9306      	str	r3, [sp, #24]
 8009d6c:	f000 fc22 	bl	800a5b4 <__i2b>
 8009d70:	9b04      	ldr	r3, [sp, #16]
 8009d72:	4605      	mov	r5, r0
 8009d74:	b166      	cbz	r6, 8009d90 <_dtoa_r+0x670>
 8009d76:	9a06      	ldr	r2, [sp, #24]
 8009d78:	2a00      	cmp	r2, #0
 8009d7a:	dd09      	ble.n	8009d90 <_dtoa_r+0x670>
 8009d7c:	42b2      	cmp	r2, r6
 8009d7e:	9905      	ldr	r1, [sp, #20]
 8009d80:	bfa8      	it	ge
 8009d82:	4632      	movge	r2, r6
 8009d84:	1a89      	subs	r1, r1, r2
 8009d86:	9105      	str	r1, [sp, #20]
 8009d88:	9906      	ldr	r1, [sp, #24]
 8009d8a:	1ab6      	subs	r6, r6, r2
 8009d8c:	1a8a      	subs	r2, r1, r2
 8009d8e:	9206      	str	r2, [sp, #24]
 8009d90:	b1fb      	cbz	r3, 8009dd2 <_dtoa_r+0x6b2>
 8009d92:	9a08      	ldr	r2, [sp, #32]
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	f000 80bc 	beq.w	8009f12 <_dtoa_r+0x7f2>
 8009d9a:	b19c      	cbz	r4, 8009dc4 <_dtoa_r+0x6a4>
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4622      	mov	r2, r4
 8009da0:	4648      	mov	r0, r9
 8009da2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009da4:	f000 fcc6 	bl	800a734 <__pow5mult>
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	4601      	mov	r1, r0
 8009dac:	4605      	mov	r5, r0
 8009dae:	4648      	mov	r0, r9
 8009db0:	f000 fc16 	bl	800a5e0 <__multiply>
 8009db4:	9901      	ldr	r1, [sp, #4]
 8009db6:	9004      	str	r0, [sp, #16]
 8009db8:	4648      	mov	r0, r9
 8009dba:	f000 fb47 	bl	800a44c <_Bfree>
 8009dbe:	9a04      	ldr	r2, [sp, #16]
 8009dc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dc2:	9201      	str	r2, [sp, #4]
 8009dc4:	1b1a      	subs	r2, r3, r4
 8009dc6:	d004      	beq.n	8009dd2 <_dtoa_r+0x6b2>
 8009dc8:	9901      	ldr	r1, [sp, #4]
 8009dca:	4648      	mov	r0, r9
 8009dcc:	f000 fcb2 	bl	800a734 <__pow5mult>
 8009dd0:	9001      	str	r0, [sp, #4]
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f000 fbed 	bl	800a5b4 <__i2b>
 8009dda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ddc:	4604      	mov	r4, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 81d0 	beq.w	800a184 <_dtoa_r+0xa64>
 8009de4:	461a      	mov	r2, r3
 8009de6:	4601      	mov	r1, r0
 8009de8:	4648      	mov	r0, r9
 8009dea:	f000 fca3 	bl	800a734 <__pow5mult>
 8009dee:	9b07      	ldr	r3, [sp, #28]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	4604      	mov	r4, r0
 8009df4:	f300 8095 	bgt.w	8009f22 <_dtoa_r+0x802>
 8009df8:	9b02      	ldr	r3, [sp, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f040 808b 	bne.w	8009f16 <_dtoa_r+0x7f6>
 8009e00:	9b03      	ldr	r3, [sp, #12]
 8009e02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009e06:	2a00      	cmp	r2, #0
 8009e08:	f040 8087 	bne.w	8009f1a <_dtoa_r+0x7fa>
 8009e0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e10:	0d12      	lsrs	r2, r2, #20
 8009e12:	0512      	lsls	r2, r2, #20
 8009e14:	2a00      	cmp	r2, #0
 8009e16:	f000 8082 	beq.w	8009f1e <_dtoa_r+0x7fe>
 8009e1a:	9b05      	ldr	r3, [sp, #20]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	9305      	str	r3, [sp, #20]
 8009e20:	9b06      	ldr	r3, [sp, #24]
 8009e22:	3301      	adds	r3, #1
 8009e24:	9306      	str	r3, [sp, #24]
 8009e26:	2301      	movs	r3, #1
 8009e28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 81af 	beq.w	800a190 <_dtoa_r+0xa70>
 8009e32:	6922      	ldr	r2, [r4, #16]
 8009e34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e38:	6910      	ldr	r0, [r2, #16]
 8009e3a:	f000 fb6f 	bl	800a51c <__hi0bits>
 8009e3e:	f1c0 0020 	rsb	r0, r0, #32
 8009e42:	9b06      	ldr	r3, [sp, #24]
 8009e44:	4418      	add	r0, r3
 8009e46:	f010 001f 	ands.w	r0, r0, #31
 8009e4a:	d076      	beq.n	8009f3a <_dtoa_r+0x81a>
 8009e4c:	f1c0 0220 	rsb	r2, r0, #32
 8009e50:	2a04      	cmp	r2, #4
 8009e52:	dd69      	ble.n	8009f28 <_dtoa_r+0x808>
 8009e54:	9b05      	ldr	r3, [sp, #20]
 8009e56:	f1c0 001c 	rsb	r0, r0, #28
 8009e5a:	4403      	add	r3, r0
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	9b06      	ldr	r3, [sp, #24]
 8009e60:	4406      	add	r6, r0
 8009e62:	4403      	add	r3, r0
 8009e64:	9306      	str	r3, [sp, #24]
 8009e66:	9b05      	ldr	r3, [sp, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	dd05      	ble.n	8009e78 <_dtoa_r+0x758>
 8009e6c:	9901      	ldr	r1, [sp, #4]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	4648      	mov	r0, r9
 8009e72:	f000 fcb9 	bl	800a7e8 <__lshift>
 8009e76:	9001      	str	r0, [sp, #4]
 8009e78:	9b06      	ldr	r3, [sp, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dd05      	ble.n	8009e8a <_dtoa_r+0x76a>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	461a      	mov	r2, r3
 8009e82:	4648      	mov	r0, r9
 8009e84:	f000 fcb0 	bl	800a7e8 <__lshift>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d056      	beq.n	8009f3e <_dtoa_r+0x81e>
 8009e90:	9801      	ldr	r0, [sp, #4]
 8009e92:	4621      	mov	r1, r4
 8009e94:	f000 fd14 	bl	800a8c0 <__mcmp>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	da50      	bge.n	8009f3e <_dtoa_r+0x81e>
 8009e9c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	9901      	ldr	r1, [sp, #4]
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	220a      	movs	r2, #10
 8009ea8:	4648      	mov	r0, r9
 8009eaa:	f000 faf1 	bl	800a490 <__multadd>
 8009eae:	9b08      	ldr	r3, [sp, #32]
 8009eb0:	9001      	str	r0, [sp, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 816e 	beq.w	800a194 <_dtoa_r+0xa74>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	2300      	movs	r3, #0
 8009ebc:	220a      	movs	r2, #10
 8009ebe:	4648      	mov	r0, r9
 8009ec0:	f000 fae6 	bl	800a490 <__multadd>
 8009ec4:	f1bb 0f00 	cmp.w	fp, #0
 8009ec8:	4605      	mov	r5, r0
 8009eca:	dc64      	bgt.n	8009f96 <_dtoa_r+0x876>
 8009ecc:	9b07      	ldr	r3, [sp, #28]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	dc3e      	bgt.n	8009f50 <_dtoa_r+0x830>
 8009ed2:	e060      	b.n	8009f96 <_dtoa_r+0x876>
 8009ed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ed6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009eda:	e73c      	b.n	8009d56 <_dtoa_r+0x636>
 8009edc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	bfbf      	itttt	lt
 8009ee4:	1ae2      	sublt	r2, r4, r3
 8009ee6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ee8:	189b      	addlt	r3, r3, r2
 8009eea:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009eec:	bfae      	itee	ge
 8009eee:	1b1c      	subge	r4, r3, r4
 8009ef0:	4623      	movlt	r3, r4
 8009ef2:	2400      	movlt	r4, #0
 8009ef4:	f1ba 0f00 	cmp.w	sl, #0
 8009ef8:	bfb5      	itete	lt
 8009efa:	9a05      	ldrlt	r2, [sp, #20]
 8009efc:	9e05      	ldrge	r6, [sp, #20]
 8009efe:	eba2 060a 	sublt.w	r6, r2, sl
 8009f02:	4652      	movge	r2, sl
 8009f04:	bfb8      	it	lt
 8009f06:	2200      	movlt	r2, #0
 8009f08:	e727      	b.n	8009d5a <_dtoa_r+0x63a>
 8009f0a:	9e05      	ldr	r6, [sp, #20]
 8009f0c:	9d08      	ldr	r5, [sp, #32]
 8009f0e:	461c      	mov	r4, r3
 8009f10:	e730      	b.n	8009d74 <_dtoa_r+0x654>
 8009f12:	461a      	mov	r2, r3
 8009f14:	e758      	b.n	8009dc8 <_dtoa_r+0x6a8>
 8009f16:	2300      	movs	r3, #0
 8009f18:	e786      	b.n	8009e28 <_dtoa_r+0x708>
 8009f1a:	9b02      	ldr	r3, [sp, #8]
 8009f1c:	e784      	b.n	8009e28 <_dtoa_r+0x708>
 8009f1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f20:	e783      	b.n	8009e2a <_dtoa_r+0x70a>
 8009f22:	2300      	movs	r3, #0
 8009f24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f26:	e784      	b.n	8009e32 <_dtoa_r+0x712>
 8009f28:	d09d      	beq.n	8009e66 <_dtoa_r+0x746>
 8009f2a:	9b05      	ldr	r3, [sp, #20]
 8009f2c:	321c      	adds	r2, #28
 8009f2e:	4413      	add	r3, r2
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	9b06      	ldr	r3, [sp, #24]
 8009f34:	4416      	add	r6, r2
 8009f36:	4413      	add	r3, r2
 8009f38:	e794      	b.n	8009e64 <_dtoa_r+0x744>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	e7f5      	b.n	8009f2a <_dtoa_r+0x80a>
 8009f3e:	f1ba 0f00 	cmp.w	sl, #0
 8009f42:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f46:	46d3      	mov	fp, sl
 8009f48:	dc21      	bgt.n	8009f8e <_dtoa_r+0x86e>
 8009f4a:	9b07      	ldr	r3, [sp, #28]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	dd1e      	ble.n	8009f8e <_dtoa_r+0x86e>
 8009f50:	f1bb 0f00 	cmp.w	fp, #0
 8009f54:	f47f aeb7 	bne.w	8009cc6 <_dtoa_r+0x5a6>
 8009f58:	4621      	mov	r1, r4
 8009f5a:	465b      	mov	r3, fp
 8009f5c:	2205      	movs	r2, #5
 8009f5e:	4648      	mov	r0, r9
 8009f60:	f000 fa96 	bl	800a490 <__multadd>
 8009f64:	4601      	mov	r1, r0
 8009f66:	4604      	mov	r4, r0
 8009f68:	9801      	ldr	r0, [sp, #4]
 8009f6a:	f000 fca9 	bl	800a8c0 <__mcmp>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	f77f aea9 	ble.w	8009cc6 <_dtoa_r+0x5a6>
 8009f74:	463e      	mov	r6, r7
 8009f76:	2331      	movs	r3, #49	@ 0x31
 8009f78:	f806 3b01 	strb.w	r3, [r6], #1
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	e6a4      	b.n	8009cce <_dtoa_r+0x5ae>
 8009f84:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f88:	4654      	mov	r4, sl
 8009f8a:	4625      	mov	r5, r4
 8009f8c:	e7f2      	b.n	8009f74 <_dtoa_r+0x854>
 8009f8e:	9b08      	ldr	r3, [sp, #32]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 8103 	beq.w	800a19c <_dtoa_r+0xa7c>
 8009f96:	2e00      	cmp	r6, #0
 8009f98:	dd05      	ble.n	8009fa6 <_dtoa_r+0x886>
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	4632      	mov	r2, r6
 8009f9e:	4648      	mov	r0, r9
 8009fa0:	f000 fc22 	bl	800a7e8 <__lshift>
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d058      	beq.n	800a05e <_dtoa_r+0x93e>
 8009fac:	6869      	ldr	r1, [r5, #4]
 8009fae:	4648      	mov	r0, r9
 8009fb0:	f000 fa0c 	bl	800a3cc <_Balloc>
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	b928      	cbnz	r0, 8009fc4 <_dtoa_r+0x8a4>
 8009fb8:	4b82      	ldr	r3, [pc, #520]	@ (800a1c4 <_dtoa_r+0xaa4>)
 8009fba:	4602      	mov	r2, r0
 8009fbc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fc0:	f7ff bbc7 	b.w	8009752 <_dtoa_r+0x32>
 8009fc4:	692a      	ldr	r2, [r5, #16]
 8009fc6:	3202      	adds	r2, #2
 8009fc8:	0092      	lsls	r2, r2, #2
 8009fca:	f105 010c 	add.w	r1, r5, #12
 8009fce:	300c      	adds	r0, #12
 8009fd0:	f7ff fb0f 	bl	80095f2 <memcpy>
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4648      	mov	r0, r9
 8009fda:	f000 fc05 	bl	800a7e8 <__lshift>
 8009fde:	1c7b      	adds	r3, r7, #1
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	eb07 030b 	add.w	r3, r7, fp
 8009fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fe8:	9b02      	ldr	r3, [sp, #8]
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	46a8      	mov	r8, r5
 8009ff0:	9308      	str	r3, [sp, #32]
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	9b05      	ldr	r3, [sp, #20]
 8009ff6:	9801      	ldr	r0, [sp, #4]
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	f103 3bff 	add.w	fp, r3, #4294967295
 8009ffe:	f7ff fb06 	bl	800960e <quorem>
 800a002:	4641      	mov	r1, r8
 800a004:	9002      	str	r0, [sp, #8]
 800a006:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a00a:	9801      	ldr	r0, [sp, #4]
 800a00c:	f000 fc58 	bl	800a8c0 <__mcmp>
 800a010:	462a      	mov	r2, r5
 800a012:	9006      	str	r0, [sp, #24]
 800a014:	4621      	mov	r1, r4
 800a016:	4648      	mov	r0, r9
 800a018:	f000 fc6e 	bl	800a8f8 <__mdiff>
 800a01c:	68c2      	ldr	r2, [r0, #12]
 800a01e:	4606      	mov	r6, r0
 800a020:	b9fa      	cbnz	r2, 800a062 <_dtoa_r+0x942>
 800a022:	4601      	mov	r1, r0
 800a024:	9801      	ldr	r0, [sp, #4]
 800a026:	f000 fc4b 	bl	800a8c0 <__mcmp>
 800a02a:	4602      	mov	r2, r0
 800a02c:	4631      	mov	r1, r6
 800a02e:	4648      	mov	r0, r9
 800a030:	920a      	str	r2, [sp, #40]	@ 0x28
 800a032:	f000 fa0b 	bl	800a44c <_Bfree>
 800a036:	9b07      	ldr	r3, [sp, #28]
 800a038:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a03a:	9e05      	ldr	r6, [sp, #20]
 800a03c:	ea43 0102 	orr.w	r1, r3, r2
 800a040:	9b08      	ldr	r3, [sp, #32]
 800a042:	4319      	orrs	r1, r3
 800a044:	d10f      	bne.n	800a066 <_dtoa_r+0x946>
 800a046:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a04a:	d028      	beq.n	800a09e <_dtoa_r+0x97e>
 800a04c:	9b06      	ldr	r3, [sp, #24]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	dd02      	ble.n	800a058 <_dtoa_r+0x938>
 800a052:	9b02      	ldr	r3, [sp, #8]
 800a054:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a058:	f88b a000 	strb.w	sl, [fp]
 800a05c:	e639      	b.n	8009cd2 <_dtoa_r+0x5b2>
 800a05e:	4628      	mov	r0, r5
 800a060:	e7bd      	b.n	8009fde <_dtoa_r+0x8be>
 800a062:	2201      	movs	r2, #1
 800a064:	e7e2      	b.n	800a02c <_dtoa_r+0x90c>
 800a066:	9b06      	ldr	r3, [sp, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	db04      	blt.n	800a076 <_dtoa_r+0x956>
 800a06c:	9907      	ldr	r1, [sp, #28]
 800a06e:	430b      	orrs	r3, r1
 800a070:	9908      	ldr	r1, [sp, #32]
 800a072:	430b      	orrs	r3, r1
 800a074:	d120      	bne.n	800a0b8 <_dtoa_r+0x998>
 800a076:	2a00      	cmp	r2, #0
 800a078:	ddee      	ble.n	800a058 <_dtoa_r+0x938>
 800a07a:	9901      	ldr	r1, [sp, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	4648      	mov	r0, r9
 800a080:	f000 fbb2 	bl	800a7e8 <__lshift>
 800a084:	4621      	mov	r1, r4
 800a086:	9001      	str	r0, [sp, #4]
 800a088:	f000 fc1a 	bl	800a8c0 <__mcmp>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	dc03      	bgt.n	800a098 <_dtoa_r+0x978>
 800a090:	d1e2      	bne.n	800a058 <_dtoa_r+0x938>
 800a092:	f01a 0f01 	tst.w	sl, #1
 800a096:	d0df      	beq.n	800a058 <_dtoa_r+0x938>
 800a098:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a09c:	d1d9      	bne.n	800a052 <_dtoa_r+0x932>
 800a09e:	2339      	movs	r3, #57	@ 0x39
 800a0a0:	f88b 3000 	strb.w	r3, [fp]
 800a0a4:	4633      	mov	r3, r6
 800a0a6:	461e      	mov	r6, r3
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0ae:	2a39      	cmp	r2, #57	@ 0x39
 800a0b0:	d053      	beq.n	800a15a <_dtoa_r+0xa3a>
 800a0b2:	3201      	adds	r2, #1
 800a0b4:	701a      	strb	r2, [r3, #0]
 800a0b6:	e60c      	b.n	8009cd2 <_dtoa_r+0x5b2>
 800a0b8:	2a00      	cmp	r2, #0
 800a0ba:	dd07      	ble.n	800a0cc <_dtoa_r+0x9ac>
 800a0bc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a0c0:	d0ed      	beq.n	800a09e <_dtoa_r+0x97e>
 800a0c2:	f10a 0301 	add.w	r3, sl, #1
 800a0c6:	f88b 3000 	strb.w	r3, [fp]
 800a0ca:	e602      	b.n	8009cd2 <_dtoa_r+0x5b2>
 800a0cc:	9b05      	ldr	r3, [sp, #20]
 800a0ce:	9a05      	ldr	r2, [sp, #20]
 800a0d0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d029      	beq.n	800a12e <_dtoa_r+0xa0e>
 800a0da:	9901      	ldr	r1, [sp, #4]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	220a      	movs	r2, #10
 800a0e0:	4648      	mov	r0, r9
 800a0e2:	f000 f9d5 	bl	800a490 <__multadd>
 800a0e6:	45a8      	cmp	r8, r5
 800a0e8:	9001      	str	r0, [sp, #4]
 800a0ea:	f04f 0300 	mov.w	r3, #0
 800a0ee:	f04f 020a 	mov.w	r2, #10
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	4648      	mov	r0, r9
 800a0f6:	d107      	bne.n	800a108 <_dtoa_r+0x9e8>
 800a0f8:	f000 f9ca 	bl	800a490 <__multadd>
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	4605      	mov	r5, r0
 800a100:	9b05      	ldr	r3, [sp, #20]
 800a102:	3301      	adds	r3, #1
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	e775      	b.n	8009ff4 <_dtoa_r+0x8d4>
 800a108:	f000 f9c2 	bl	800a490 <__multadd>
 800a10c:	4629      	mov	r1, r5
 800a10e:	4680      	mov	r8, r0
 800a110:	2300      	movs	r3, #0
 800a112:	220a      	movs	r2, #10
 800a114:	4648      	mov	r0, r9
 800a116:	f000 f9bb 	bl	800a490 <__multadd>
 800a11a:	4605      	mov	r5, r0
 800a11c:	e7f0      	b.n	800a100 <_dtoa_r+0x9e0>
 800a11e:	f1bb 0f00 	cmp.w	fp, #0
 800a122:	bfcc      	ite	gt
 800a124:	465e      	movgt	r6, fp
 800a126:	2601      	movle	r6, #1
 800a128:	443e      	add	r6, r7
 800a12a:	f04f 0800 	mov.w	r8, #0
 800a12e:	9901      	ldr	r1, [sp, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	4648      	mov	r0, r9
 800a134:	f000 fb58 	bl	800a7e8 <__lshift>
 800a138:	4621      	mov	r1, r4
 800a13a:	9001      	str	r0, [sp, #4]
 800a13c:	f000 fbc0 	bl	800a8c0 <__mcmp>
 800a140:	2800      	cmp	r0, #0
 800a142:	dcaf      	bgt.n	800a0a4 <_dtoa_r+0x984>
 800a144:	d102      	bne.n	800a14c <_dtoa_r+0xa2c>
 800a146:	f01a 0f01 	tst.w	sl, #1
 800a14a:	d1ab      	bne.n	800a0a4 <_dtoa_r+0x984>
 800a14c:	4633      	mov	r3, r6
 800a14e:	461e      	mov	r6, r3
 800a150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a154:	2a30      	cmp	r2, #48	@ 0x30
 800a156:	d0fa      	beq.n	800a14e <_dtoa_r+0xa2e>
 800a158:	e5bb      	b.n	8009cd2 <_dtoa_r+0x5b2>
 800a15a:	429f      	cmp	r7, r3
 800a15c:	d1a3      	bne.n	800a0a6 <_dtoa_r+0x986>
 800a15e:	9b04      	ldr	r3, [sp, #16]
 800a160:	3301      	adds	r3, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	2331      	movs	r3, #49	@ 0x31
 800a166:	703b      	strb	r3, [r7, #0]
 800a168:	e5b3      	b.n	8009cd2 <_dtoa_r+0x5b2>
 800a16a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a16c:	4f16      	ldr	r7, [pc, #88]	@ (800a1c8 <_dtoa_r+0xaa8>)
 800a16e:	b11b      	cbz	r3, 800a178 <_dtoa_r+0xa58>
 800a170:	f107 0308 	add.w	r3, r7, #8
 800a174:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	4638      	mov	r0, r7
 800a17a:	b011      	add	sp, #68	@ 0x44
 800a17c:	ecbd 8b02 	vpop	{d8}
 800a180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a184:	9b07      	ldr	r3, [sp, #28]
 800a186:	2b01      	cmp	r3, #1
 800a188:	f77f ae36 	ble.w	8009df8 <_dtoa_r+0x6d8>
 800a18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a18e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a190:	2001      	movs	r0, #1
 800a192:	e656      	b.n	8009e42 <_dtoa_r+0x722>
 800a194:	f1bb 0f00 	cmp.w	fp, #0
 800a198:	f77f aed7 	ble.w	8009f4a <_dtoa_r+0x82a>
 800a19c:	463e      	mov	r6, r7
 800a19e:	9801      	ldr	r0, [sp, #4]
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	f7ff fa34 	bl	800960e <quorem>
 800a1a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a1aa:	f806 ab01 	strb.w	sl, [r6], #1
 800a1ae:	1bf2      	subs	r2, r6, r7
 800a1b0:	4593      	cmp	fp, r2
 800a1b2:	ddb4      	ble.n	800a11e <_dtoa_r+0x9fe>
 800a1b4:	9901      	ldr	r1, [sp, #4]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	4648      	mov	r0, r9
 800a1bc:	f000 f968 	bl	800a490 <__multadd>
 800a1c0:	9001      	str	r0, [sp, #4]
 800a1c2:	e7ec      	b.n	800a19e <_dtoa_r+0xa7e>
 800a1c4:	0800b3cc 	.word	0x0800b3cc
 800a1c8:	0800b350 	.word	0x0800b350

0800a1cc <_free_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	2900      	cmp	r1, #0
 800a1d2:	d041      	beq.n	800a258 <_free_r+0x8c>
 800a1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d8:	1f0c      	subs	r4, r1, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bfb8      	it	lt
 800a1de:	18e4      	addlt	r4, r4, r3
 800a1e0:	f000 f8e8 	bl	800a3b4 <__malloc_lock>
 800a1e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a25c <_free_r+0x90>)
 800a1e6:	6813      	ldr	r3, [r2, #0]
 800a1e8:	b933      	cbnz	r3, 800a1f8 <_free_r+0x2c>
 800a1ea:	6063      	str	r3, [r4, #4]
 800a1ec:	6014      	str	r4, [r2, #0]
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f4:	f000 b8e4 	b.w	800a3c0 <__malloc_unlock>
 800a1f8:	42a3      	cmp	r3, r4
 800a1fa:	d908      	bls.n	800a20e <_free_r+0x42>
 800a1fc:	6820      	ldr	r0, [r4, #0]
 800a1fe:	1821      	adds	r1, r4, r0
 800a200:	428b      	cmp	r3, r1
 800a202:	bf01      	itttt	eq
 800a204:	6819      	ldreq	r1, [r3, #0]
 800a206:	685b      	ldreq	r3, [r3, #4]
 800a208:	1809      	addeq	r1, r1, r0
 800a20a:	6021      	streq	r1, [r4, #0]
 800a20c:	e7ed      	b.n	800a1ea <_free_r+0x1e>
 800a20e:	461a      	mov	r2, r3
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	b10b      	cbz	r3, 800a218 <_free_r+0x4c>
 800a214:	42a3      	cmp	r3, r4
 800a216:	d9fa      	bls.n	800a20e <_free_r+0x42>
 800a218:	6811      	ldr	r1, [r2, #0]
 800a21a:	1850      	adds	r0, r2, r1
 800a21c:	42a0      	cmp	r0, r4
 800a21e:	d10b      	bne.n	800a238 <_free_r+0x6c>
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	4401      	add	r1, r0
 800a224:	1850      	adds	r0, r2, r1
 800a226:	4283      	cmp	r3, r0
 800a228:	6011      	str	r1, [r2, #0]
 800a22a:	d1e0      	bne.n	800a1ee <_free_r+0x22>
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	6053      	str	r3, [r2, #4]
 800a232:	4408      	add	r0, r1
 800a234:	6010      	str	r0, [r2, #0]
 800a236:	e7da      	b.n	800a1ee <_free_r+0x22>
 800a238:	d902      	bls.n	800a240 <_free_r+0x74>
 800a23a:	230c      	movs	r3, #12
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	e7d6      	b.n	800a1ee <_free_r+0x22>
 800a240:	6820      	ldr	r0, [r4, #0]
 800a242:	1821      	adds	r1, r4, r0
 800a244:	428b      	cmp	r3, r1
 800a246:	bf04      	itt	eq
 800a248:	6819      	ldreq	r1, [r3, #0]
 800a24a:	685b      	ldreq	r3, [r3, #4]
 800a24c:	6063      	str	r3, [r4, #4]
 800a24e:	bf04      	itt	eq
 800a250:	1809      	addeq	r1, r1, r0
 800a252:	6021      	streq	r1, [r4, #0]
 800a254:	6054      	str	r4, [r2, #4]
 800a256:	e7ca      	b.n	800a1ee <_free_r+0x22>
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	bf00      	nop
 800a25c:	24004e60 	.word	0x24004e60

0800a260 <malloc>:
 800a260:	4b02      	ldr	r3, [pc, #8]	@ (800a26c <malloc+0xc>)
 800a262:	4601      	mov	r1, r0
 800a264:	6818      	ldr	r0, [r3, #0]
 800a266:	f000 b825 	b.w	800a2b4 <_malloc_r>
 800a26a:	bf00      	nop
 800a26c:	24000020 	.word	0x24000020

0800a270 <sbrk_aligned>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	4e0f      	ldr	r6, [pc, #60]	@ (800a2b0 <sbrk_aligned+0x40>)
 800a274:	460c      	mov	r4, r1
 800a276:	6831      	ldr	r1, [r6, #0]
 800a278:	4605      	mov	r5, r0
 800a27a:	b911      	cbnz	r1, 800a282 <sbrk_aligned+0x12>
 800a27c:	f000 feaa 	bl	800afd4 <_sbrk_r>
 800a280:	6030      	str	r0, [r6, #0]
 800a282:	4621      	mov	r1, r4
 800a284:	4628      	mov	r0, r5
 800a286:	f000 fea5 	bl	800afd4 <_sbrk_r>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	d103      	bne.n	800a296 <sbrk_aligned+0x26>
 800a28e:	f04f 34ff 	mov.w	r4, #4294967295
 800a292:	4620      	mov	r0, r4
 800a294:	bd70      	pop	{r4, r5, r6, pc}
 800a296:	1cc4      	adds	r4, r0, #3
 800a298:	f024 0403 	bic.w	r4, r4, #3
 800a29c:	42a0      	cmp	r0, r4
 800a29e:	d0f8      	beq.n	800a292 <sbrk_aligned+0x22>
 800a2a0:	1a21      	subs	r1, r4, r0
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 fe96 	bl	800afd4 <_sbrk_r>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d1f2      	bne.n	800a292 <sbrk_aligned+0x22>
 800a2ac:	e7ef      	b.n	800a28e <sbrk_aligned+0x1e>
 800a2ae:	bf00      	nop
 800a2b0:	24004e5c 	.word	0x24004e5c

0800a2b4 <_malloc_r>:
 800a2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b8:	1ccd      	adds	r5, r1, #3
 800a2ba:	f025 0503 	bic.w	r5, r5, #3
 800a2be:	3508      	adds	r5, #8
 800a2c0:	2d0c      	cmp	r5, #12
 800a2c2:	bf38      	it	cc
 800a2c4:	250c      	movcc	r5, #12
 800a2c6:	2d00      	cmp	r5, #0
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	db01      	blt.n	800a2d0 <_malloc_r+0x1c>
 800a2cc:	42a9      	cmp	r1, r5
 800a2ce:	d904      	bls.n	800a2da <_malloc_r+0x26>
 800a2d0:	230c      	movs	r3, #12
 800a2d2:	6033      	str	r3, [r6, #0]
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3b0 <_malloc_r+0xfc>
 800a2de:	f000 f869 	bl	800a3b4 <__malloc_lock>
 800a2e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e6:	461c      	mov	r4, r3
 800a2e8:	bb44      	cbnz	r4, 800a33c <_malloc_r+0x88>
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f7ff ffbf 	bl	800a270 <sbrk_aligned>
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	d158      	bne.n	800a3aa <_malloc_r+0xf6>
 800a2f8:	f8d8 4000 	ldr.w	r4, [r8]
 800a2fc:	4627      	mov	r7, r4
 800a2fe:	2f00      	cmp	r7, #0
 800a300:	d143      	bne.n	800a38a <_malloc_r+0xd6>
 800a302:	2c00      	cmp	r4, #0
 800a304:	d04b      	beq.n	800a39e <_malloc_r+0xea>
 800a306:	6823      	ldr	r3, [r4, #0]
 800a308:	4639      	mov	r1, r7
 800a30a:	4630      	mov	r0, r6
 800a30c:	eb04 0903 	add.w	r9, r4, r3
 800a310:	f000 fe60 	bl	800afd4 <_sbrk_r>
 800a314:	4581      	cmp	r9, r0
 800a316:	d142      	bne.n	800a39e <_malloc_r+0xea>
 800a318:	6821      	ldr	r1, [r4, #0]
 800a31a:	1a6d      	subs	r5, r5, r1
 800a31c:	4629      	mov	r1, r5
 800a31e:	4630      	mov	r0, r6
 800a320:	f7ff ffa6 	bl	800a270 <sbrk_aligned>
 800a324:	3001      	adds	r0, #1
 800a326:	d03a      	beq.n	800a39e <_malloc_r+0xea>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	442b      	add	r3, r5
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	f8d8 3000 	ldr.w	r3, [r8]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	bb62      	cbnz	r2, 800a390 <_malloc_r+0xdc>
 800a336:	f8c8 7000 	str.w	r7, [r8]
 800a33a:	e00f      	b.n	800a35c <_malloc_r+0xa8>
 800a33c:	6822      	ldr	r2, [r4, #0]
 800a33e:	1b52      	subs	r2, r2, r5
 800a340:	d420      	bmi.n	800a384 <_malloc_r+0xd0>
 800a342:	2a0b      	cmp	r2, #11
 800a344:	d917      	bls.n	800a376 <_malloc_r+0xc2>
 800a346:	1961      	adds	r1, r4, r5
 800a348:	42a3      	cmp	r3, r4
 800a34a:	6025      	str	r5, [r4, #0]
 800a34c:	bf18      	it	ne
 800a34e:	6059      	strne	r1, [r3, #4]
 800a350:	6863      	ldr	r3, [r4, #4]
 800a352:	bf08      	it	eq
 800a354:	f8c8 1000 	streq.w	r1, [r8]
 800a358:	5162      	str	r2, [r4, r5]
 800a35a:	604b      	str	r3, [r1, #4]
 800a35c:	4630      	mov	r0, r6
 800a35e:	f000 f82f 	bl	800a3c0 <__malloc_unlock>
 800a362:	f104 000b 	add.w	r0, r4, #11
 800a366:	1d23      	adds	r3, r4, #4
 800a368:	f020 0007 	bic.w	r0, r0, #7
 800a36c:	1ac2      	subs	r2, r0, r3
 800a36e:	bf1c      	itt	ne
 800a370:	1a1b      	subne	r3, r3, r0
 800a372:	50a3      	strne	r3, [r4, r2]
 800a374:	e7af      	b.n	800a2d6 <_malloc_r+0x22>
 800a376:	6862      	ldr	r2, [r4, #4]
 800a378:	42a3      	cmp	r3, r4
 800a37a:	bf0c      	ite	eq
 800a37c:	f8c8 2000 	streq.w	r2, [r8]
 800a380:	605a      	strne	r2, [r3, #4]
 800a382:	e7eb      	b.n	800a35c <_malloc_r+0xa8>
 800a384:	4623      	mov	r3, r4
 800a386:	6864      	ldr	r4, [r4, #4]
 800a388:	e7ae      	b.n	800a2e8 <_malloc_r+0x34>
 800a38a:	463c      	mov	r4, r7
 800a38c:	687f      	ldr	r7, [r7, #4]
 800a38e:	e7b6      	b.n	800a2fe <_malloc_r+0x4a>
 800a390:	461a      	mov	r2, r3
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	42a3      	cmp	r3, r4
 800a396:	d1fb      	bne.n	800a390 <_malloc_r+0xdc>
 800a398:	2300      	movs	r3, #0
 800a39a:	6053      	str	r3, [r2, #4]
 800a39c:	e7de      	b.n	800a35c <_malloc_r+0xa8>
 800a39e:	230c      	movs	r3, #12
 800a3a0:	6033      	str	r3, [r6, #0]
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f000 f80c 	bl	800a3c0 <__malloc_unlock>
 800a3a8:	e794      	b.n	800a2d4 <_malloc_r+0x20>
 800a3aa:	6005      	str	r5, [r0, #0]
 800a3ac:	e7d6      	b.n	800a35c <_malloc_r+0xa8>
 800a3ae:	bf00      	nop
 800a3b0:	24004e60 	.word	0x24004e60

0800a3b4 <__malloc_lock>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	@ (800a3bc <__malloc_lock+0x8>)
 800a3b6:	f7ff b91a 	b.w	80095ee <__retarget_lock_acquire_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	24004e58 	.word	0x24004e58

0800a3c0 <__malloc_unlock>:
 800a3c0:	4801      	ldr	r0, [pc, #4]	@ (800a3c8 <__malloc_unlock+0x8>)
 800a3c2:	f7ff b915 	b.w	80095f0 <__retarget_lock_release_recursive>
 800a3c6:	bf00      	nop
 800a3c8:	24004e58 	.word	0x24004e58

0800a3cc <_Balloc>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	69c6      	ldr	r6, [r0, #28]
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	b976      	cbnz	r6, 800a3f4 <_Balloc+0x28>
 800a3d6:	2010      	movs	r0, #16
 800a3d8:	f7ff ff42 	bl	800a260 <malloc>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	61e0      	str	r0, [r4, #28]
 800a3e0:	b920      	cbnz	r0, 800a3ec <_Balloc+0x20>
 800a3e2:	4b18      	ldr	r3, [pc, #96]	@ (800a444 <_Balloc+0x78>)
 800a3e4:	4818      	ldr	r0, [pc, #96]	@ (800a448 <_Balloc+0x7c>)
 800a3e6:	216b      	movs	r1, #107	@ 0x6b
 800a3e8:	f000 fe04 	bl	800aff4 <__assert_func>
 800a3ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3f0:	6006      	str	r6, [r0, #0]
 800a3f2:	60c6      	str	r6, [r0, #12]
 800a3f4:	69e6      	ldr	r6, [r4, #28]
 800a3f6:	68f3      	ldr	r3, [r6, #12]
 800a3f8:	b183      	cbz	r3, 800a41c <_Balloc+0x50>
 800a3fa:	69e3      	ldr	r3, [r4, #28]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a402:	b9b8      	cbnz	r0, 800a434 <_Balloc+0x68>
 800a404:	2101      	movs	r1, #1
 800a406:	fa01 f605 	lsl.w	r6, r1, r5
 800a40a:	1d72      	adds	r2, r6, #5
 800a40c:	0092      	lsls	r2, r2, #2
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 fe0e 	bl	800b030 <_calloc_r>
 800a414:	b160      	cbz	r0, 800a430 <_Balloc+0x64>
 800a416:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a41a:	e00e      	b.n	800a43a <_Balloc+0x6e>
 800a41c:	2221      	movs	r2, #33	@ 0x21
 800a41e:	2104      	movs	r1, #4
 800a420:	4620      	mov	r0, r4
 800a422:	f000 fe05 	bl	800b030 <_calloc_r>
 800a426:	69e3      	ldr	r3, [r4, #28]
 800a428:	60f0      	str	r0, [r6, #12]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e4      	bne.n	800a3fa <_Balloc+0x2e>
 800a430:	2000      	movs	r0, #0
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	6802      	ldr	r2, [r0, #0]
 800a436:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a43a:	2300      	movs	r3, #0
 800a43c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a440:	e7f7      	b.n	800a432 <_Balloc+0x66>
 800a442:	bf00      	nop
 800a444:	0800b35d 	.word	0x0800b35d
 800a448:	0800b3dd 	.word	0x0800b3dd

0800a44c <_Bfree>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	69c6      	ldr	r6, [r0, #28]
 800a450:	4605      	mov	r5, r0
 800a452:	460c      	mov	r4, r1
 800a454:	b976      	cbnz	r6, 800a474 <_Bfree+0x28>
 800a456:	2010      	movs	r0, #16
 800a458:	f7ff ff02 	bl	800a260 <malloc>
 800a45c:	4602      	mov	r2, r0
 800a45e:	61e8      	str	r0, [r5, #28]
 800a460:	b920      	cbnz	r0, 800a46c <_Bfree+0x20>
 800a462:	4b09      	ldr	r3, [pc, #36]	@ (800a488 <_Bfree+0x3c>)
 800a464:	4809      	ldr	r0, [pc, #36]	@ (800a48c <_Bfree+0x40>)
 800a466:	218f      	movs	r1, #143	@ 0x8f
 800a468:	f000 fdc4 	bl	800aff4 <__assert_func>
 800a46c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a470:	6006      	str	r6, [r0, #0]
 800a472:	60c6      	str	r6, [r0, #12]
 800a474:	b13c      	cbz	r4, 800a486 <_Bfree+0x3a>
 800a476:	69eb      	ldr	r3, [r5, #28]
 800a478:	6862      	ldr	r2, [r4, #4]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a480:	6021      	str	r1, [r4, #0]
 800a482:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	0800b35d 	.word	0x0800b35d
 800a48c:	0800b3dd 	.word	0x0800b3dd

0800a490 <__multadd>:
 800a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a494:	690d      	ldr	r5, [r1, #16]
 800a496:	4607      	mov	r7, r0
 800a498:	460c      	mov	r4, r1
 800a49a:	461e      	mov	r6, r3
 800a49c:	f101 0c14 	add.w	ip, r1, #20
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4a6:	b299      	uxth	r1, r3
 800a4a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a4ac:	0c1e      	lsrs	r6, r3, #16
 800a4ae:	0c0b      	lsrs	r3, r1, #16
 800a4b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a4b4:	b289      	uxth	r1, r1
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4bc:	4285      	cmp	r5, r0
 800a4be:	f84c 1b04 	str.w	r1, [ip], #4
 800a4c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4c6:	dcec      	bgt.n	800a4a2 <__multadd+0x12>
 800a4c8:	b30e      	cbz	r6, 800a50e <__multadd+0x7e>
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	42ab      	cmp	r3, r5
 800a4ce:	dc19      	bgt.n	800a504 <__multadd+0x74>
 800a4d0:	6861      	ldr	r1, [r4, #4]
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	3101      	adds	r1, #1
 800a4d6:	f7ff ff79 	bl	800a3cc <_Balloc>
 800a4da:	4680      	mov	r8, r0
 800a4dc:	b928      	cbnz	r0, 800a4ea <__multadd+0x5a>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a514 <__multadd+0x84>)
 800a4e2:	480d      	ldr	r0, [pc, #52]	@ (800a518 <__multadd+0x88>)
 800a4e4:	21ba      	movs	r1, #186	@ 0xba
 800a4e6:	f000 fd85 	bl	800aff4 <__assert_func>
 800a4ea:	6922      	ldr	r2, [r4, #16]
 800a4ec:	3202      	adds	r2, #2
 800a4ee:	f104 010c 	add.w	r1, r4, #12
 800a4f2:	0092      	lsls	r2, r2, #2
 800a4f4:	300c      	adds	r0, #12
 800a4f6:	f7ff f87c 	bl	80095f2 <memcpy>
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	f7ff ffa5 	bl	800a44c <_Bfree>
 800a502:	4644      	mov	r4, r8
 800a504:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a508:	3501      	adds	r5, #1
 800a50a:	615e      	str	r6, [r3, #20]
 800a50c:	6125      	str	r5, [r4, #16]
 800a50e:	4620      	mov	r0, r4
 800a510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a514:	0800b3cc 	.word	0x0800b3cc
 800a518:	0800b3dd 	.word	0x0800b3dd

0800a51c <__hi0bits>:
 800a51c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a520:	4603      	mov	r3, r0
 800a522:	bf36      	itet	cc
 800a524:	0403      	lslcc	r3, r0, #16
 800a526:	2000      	movcs	r0, #0
 800a528:	2010      	movcc	r0, #16
 800a52a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a52e:	bf3c      	itt	cc
 800a530:	021b      	lslcc	r3, r3, #8
 800a532:	3008      	addcc	r0, #8
 800a534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a538:	bf3c      	itt	cc
 800a53a:	011b      	lslcc	r3, r3, #4
 800a53c:	3004      	addcc	r0, #4
 800a53e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a542:	bf3c      	itt	cc
 800a544:	009b      	lslcc	r3, r3, #2
 800a546:	3002      	addcc	r0, #2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	db05      	blt.n	800a558 <__hi0bits+0x3c>
 800a54c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a550:	f100 0001 	add.w	r0, r0, #1
 800a554:	bf08      	it	eq
 800a556:	2020      	moveq	r0, #32
 800a558:	4770      	bx	lr

0800a55a <__lo0bits>:
 800a55a:	6803      	ldr	r3, [r0, #0]
 800a55c:	4602      	mov	r2, r0
 800a55e:	f013 0007 	ands.w	r0, r3, #7
 800a562:	d00b      	beq.n	800a57c <__lo0bits+0x22>
 800a564:	07d9      	lsls	r1, r3, #31
 800a566:	d421      	bmi.n	800a5ac <__lo0bits+0x52>
 800a568:	0798      	lsls	r0, r3, #30
 800a56a:	bf49      	itett	mi
 800a56c:	085b      	lsrmi	r3, r3, #1
 800a56e:	089b      	lsrpl	r3, r3, #2
 800a570:	2001      	movmi	r0, #1
 800a572:	6013      	strmi	r3, [r2, #0]
 800a574:	bf5c      	itt	pl
 800a576:	6013      	strpl	r3, [r2, #0]
 800a578:	2002      	movpl	r0, #2
 800a57a:	4770      	bx	lr
 800a57c:	b299      	uxth	r1, r3
 800a57e:	b909      	cbnz	r1, 800a584 <__lo0bits+0x2a>
 800a580:	0c1b      	lsrs	r3, r3, #16
 800a582:	2010      	movs	r0, #16
 800a584:	b2d9      	uxtb	r1, r3
 800a586:	b909      	cbnz	r1, 800a58c <__lo0bits+0x32>
 800a588:	3008      	adds	r0, #8
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	0719      	lsls	r1, r3, #28
 800a58e:	bf04      	itt	eq
 800a590:	091b      	lsreq	r3, r3, #4
 800a592:	3004      	addeq	r0, #4
 800a594:	0799      	lsls	r1, r3, #30
 800a596:	bf04      	itt	eq
 800a598:	089b      	lsreq	r3, r3, #2
 800a59a:	3002      	addeq	r0, #2
 800a59c:	07d9      	lsls	r1, r3, #31
 800a59e:	d403      	bmi.n	800a5a8 <__lo0bits+0x4e>
 800a5a0:	085b      	lsrs	r3, r3, #1
 800a5a2:	f100 0001 	add.w	r0, r0, #1
 800a5a6:	d003      	beq.n	800a5b0 <__lo0bits+0x56>
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	4770      	bx	lr
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	4770      	bx	lr
 800a5b0:	2020      	movs	r0, #32
 800a5b2:	4770      	bx	lr

0800a5b4 <__i2b>:
 800a5b4:	b510      	push	{r4, lr}
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	f7ff ff07 	bl	800a3cc <_Balloc>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	b928      	cbnz	r0, 800a5ce <__i2b+0x1a>
 800a5c2:	4b05      	ldr	r3, [pc, #20]	@ (800a5d8 <__i2b+0x24>)
 800a5c4:	4805      	ldr	r0, [pc, #20]	@ (800a5dc <__i2b+0x28>)
 800a5c6:	f240 1145 	movw	r1, #325	@ 0x145
 800a5ca:	f000 fd13 	bl	800aff4 <__assert_func>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	6144      	str	r4, [r0, #20]
 800a5d2:	6103      	str	r3, [r0, #16]
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	bf00      	nop
 800a5d8:	0800b3cc 	.word	0x0800b3cc
 800a5dc:	0800b3dd 	.word	0x0800b3dd

0800a5e0 <__multiply>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	4614      	mov	r4, r2
 800a5e6:	690a      	ldr	r2, [r1, #16]
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	bfa8      	it	ge
 800a5ee:	4623      	movge	r3, r4
 800a5f0:	460f      	mov	r7, r1
 800a5f2:	bfa4      	itt	ge
 800a5f4:	460c      	movge	r4, r1
 800a5f6:	461f      	movge	r7, r3
 800a5f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a5fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a600:	68a3      	ldr	r3, [r4, #8]
 800a602:	6861      	ldr	r1, [r4, #4]
 800a604:	eb0a 0609 	add.w	r6, sl, r9
 800a608:	42b3      	cmp	r3, r6
 800a60a:	b085      	sub	sp, #20
 800a60c:	bfb8      	it	lt
 800a60e:	3101      	addlt	r1, #1
 800a610:	f7ff fedc 	bl	800a3cc <_Balloc>
 800a614:	b930      	cbnz	r0, 800a624 <__multiply+0x44>
 800a616:	4602      	mov	r2, r0
 800a618:	4b44      	ldr	r3, [pc, #272]	@ (800a72c <__multiply+0x14c>)
 800a61a:	4845      	ldr	r0, [pc, #276]	@ (800a730 <__multiply+0x150>)
 800a61c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a620:	f000 fce8 	bl	800aff4 <__assert_func>
 800a624:	f100 0514 	add.w	r5, r0, #20
 800a628:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a62c:	462b      	mov	r3, r5
 800a62e:	2200      	movs	r2, #0
 800a630:	4543      	cmp	r3, r8
 800a632:	d321      	bcc.n	800a678 <__multiply+0x98>
 800a634:	f107 0114 	add.w	r1, r7, #20
 800a638:	f104 0214 	add.w	r2, r4, #20
 800a63c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a640:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a644:	9302      	str	r3, [sp, #8]
 800a646:	1b13      	subs	r3, r2, r4
 800a648:	3b15      	subs	r3, #21
 800a64a:	f023 0303 	bic.w	r3, r3, #3
 800a64e:	3304      	adds	r3, #4
 800a650:	f104 0715 	add.w	r7, r4, #21
 800a654:	42ba      	cmp	r2, r7
 800a656:	bf38      	it	cc
 800a658:	2304      	movcc	r3, #4
 800a65a:	9301      	str	r3, [sp, #4]
 800a65c:	9b02      	ldr	r3, [sp, #8]
 800a65e:	9103      	str	r1, [sp, #12]
 800a660:	428b      	cmp	r3, r1
 800a662:	d80c      	bhi.n	800a67e <__multiply+0x9e>
 800a664:	2e00      	cmp	r6, #0
 800a666:	dd03      	ble.n	800a670 <__multiply+0x90>
 800a668:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d05b      	beq.n	800a728 <__multiply+0x148>
 800a670:	6106      	str	r6, [r0, #16]
 800a672:	b005      	add	sp, #20
 800a674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a678:	f843 2b04 	str.w	r2, [r3], #4
 800a67c:	e7d8      	b.n	800a630 <__multiply+0x50>
 800a67e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a682:	f1ba 0f00 	cmp.w	sl, #0
 800a686:	d024      	beq.n	800a6d2 <__multiply+0xf2>
 800a688:	f104 0e14 	add.w	lr, r4, #20
 800a68c:	46a9      	mov	r9, r5
 800a68e:	f04f 0c00 	mov.w	ip, #0
 800a692:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a696:	f8d9 3000 	ldr.w	r3, [r9]
 800a69a:	fa1f fb87 	uxth.w	fp, r7
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a6a8:	f8d9 7000 	ldr.w	r7, [r9]
 800a6ac:	4463      	add	r3, ip
 800a6ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a6b2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a6b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a6c0:	4572      	cmp	r2, lr
 800a6c2:	f849 3b04 	str.w	r3, [r9], #4
 800a6c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a6ca:	d8e2      	bhi.n	800a692 <__multiply+0xb2>
 800a6cc:	9b01      	ldr	r3, [sp, #4]
 800a6ce:	f845 c003 	str.w	ip, [r5, r3]
 800a6d2:	9b03      	ldr	r3, [sp, #12]
 800a6d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6d8:	3104      	adds	r1, #4
 800a6da:	f1b9 0f00 	cmp.w	r9, #0
 800a6de:	d021      	beq.n	800a724 <__multiply+0x144>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	f104 0c14 	add.w	ip, r4, #20
 800a6e6:	46ae      	mov	lr, r5
 800a6e8:	f04f 0a00 	mov.w	sl, #0
 800a6ec:	f8bc b000 	ldrh.w	fp, [ip]
 800a6f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a6f4:	fb09 770b 	mla	r7, r9, fp, r7
 800a6f8:	4457      	add	r7, sl
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a700:	f84e 3b04 	str.w	r3, [lr], #4
 800a704:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a708:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a70c:	f8be 3000 	ldrh.w	r3, [lr]
 800a710:	fb09 330a 	mla	r3, r9, sl, r3
 800a714:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a718:	4562      	cmp	r2, ip
 800a71a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a71e:	d8e5      	bhi.n	800a6ec <__multiply+0x10c>
 800a720:	9f01      	ldr	r7, [sp, #4]
 800a722:	51eb      	str	r3, [r5, r7]
 800a724:	3504      	adds	r5, #4
 800a726:	e799      	b.n	800a65c <__multiply+0x7c>
 800a728:	3e01      	subs	r6, #1
 800a72a:	e79b      	b.n	800a664 <__multiply+0x84>
 800a72c:	0800b3cc 	.word	0x0800b3cc
 800a730:	0800b3dd 	.word	0x0800b3dd

0800a734 <__pow5mult>:
 800a734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a738:	4615      	mov	r5, r2
 800a73a:	f012 0203 	ands.w	r2, r2, #3
 800a73e:	4607      	mov	r7, r0
 800a740:	460e      	mov	r6, r1
 800a742:	d007      	beq.n	800a754 <__pow5mult+0x20>
 800a744:	4c25      	ldr	r4, [pc, #148]	@ (800a7dc <__pow5mult+0xa8>)
 800a746:	3a01      	subs	r2, #1
 800a748:	2300      	movs	r3, #0
 800a74a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a74e:	f7ff fe9f 	bl	800a490 <__multadd>
 800a752:	4606      	mov	r6, r0
 800a754:	10ad      	asrs	r5, r5, #2
 800a756:	d03d      	beq.n	800a7d4 <__pow5mult+0xa0>
 800a758:	69fc      	ldr	r4, [r7, #28]
 800a75a:	b97c      	cbnz	r4, 800a77c <__pow5mult+0x48>
 800a75c:	2010      	movs	r0, #16
 800a75e:	f7ff fd7f 	bl	800a260 <malloc>
 800a762:	4602      	mov	r2, r0
 800a764:	61f8      	str	r0, [r7, #28]
 800a766:	b928      	cbnz	r0, 800a774 <__pow5mult+0x40>
 800a768:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e0 <__pow5mult+0xac>)
 800a76a:	481e      	ldr	r0, [pc, #120]	@ (800a7e4 <__pow5mult+0xb0>)
 800a76c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a770:	f000 fc40 	bl	800aff4 <__assert_func>
 800a774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a778:	6004      	str	r4, [r0, #0]
 800a77a:	60c4      	str	r4, [r0, #12]
 800a77c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a784:	b94c      	cbnz	r4, 800a79a <__pow5mult+0x66>
 800a786:	f240 2171 	movw	r1, #625	@ 0x271
 800a78a:	4638      	mov	r0, r7
 800a78c:	f7ff ff12 	bl	800a5b4 <__i2b>
 800a790:	2300      	movs	r3, #0
 800a792:	f8c8 0008 	str.w	r0, [r8, #8]
 800a796:	4604      	mov	r4, r0
 800a798:	6003      	str	r3, [r0, #0]
 800a79a:	f04f 0900 	mov.w	r9, #0
 800a79e:	07eb      	lsls	r3, r5, #31
 800a7a0:	d50a      	bpl.n	800a7b8 <__pow5mult+0x84>
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f7ff ff1a 	bl	800a5e0 <__multiply>
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	f7ff fe4b 	bl	800a44c <_Bfree>
 800a7b6:	4646      	mov	r6, r8
 800a7b8:	106d      	asrs	r5, r5, #1
 800a7ba:	d00b      	beq.n	800a7d4 <__pow5mult+0xa0>
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	b938      	cbnz	r0, 800a7d0 <__pow5mult+0x9c>
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	4638      	mov	r0, r7
 800a7c6:	f7ff ff0b 	bl	800a5e0 <__multiply>
 800a7ca:	6020      	str	r0, [r4, #0]
 800a7cc:	f8c0 9000 	str.w	r9, [r0]
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	e7e4      	b.n	800a79e <__pow5mult+0x6a>
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7da:	bf00      	nop
 800a7dc:	0800b438 	.word	0x0800b438
 800a7e0:	0800b35d 	.word	0x0800b35d
 800a7e4:	0800b3dd 	.word	0x0800b3dd

0800a7e8 <__lshift>:
 800a7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	6849      	ldr	r1, [r1, #4]
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7f6:	68a3      	ldr	r3, [r4, #8]
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	4691      	mov	r9, r2
 800a7fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a800:	f108 0601 	add.w	r6, r8, #1
 800a804:	42b3      	cmp	r3, r6
 800a806:	db0b      	blt.n	800a820 <__lshift+0x38>
 800a808:	4638      	mov	r0, r7
 800a80a:	f7ff fddf 	bl	800a3cc <_Balloc>
 800a80e:	4605      	mov	r5, r0
 800a810:	b948      	cbnz	r0, 800a826 <__lshift+0x3e>
 800a812:	4602      	mov	r2, r0
 800a814:	4b28      	ldr	r3, [pc, #160]	@ (800a8b8 <__lshift+0xd0>)
 800a816:	4829      	ldr	r0, [pc, #164]	@ (800a8bc <__lshift+0xd4>)
 800a818:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a81c:	f000 fbea 	bl	800aff4 <__assert_func>
 800a820:	3101      	adds	r1, #1
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	e7ee      	b.n	800a804 <__lshift+0x1c>
 800a826:	2300      	movs	r3, #0
 800a828:	f100 0114 	add.w	r1, r0, #20
 800a82c:	f100 0210 	add.w	r2, r0, #16
 800a830:	4618      	mov	r0, r3
 800a832:	4553      	cmp	r3, sl
 800a834:	db33      	blt.n	800a89e <__lshift+0xb6>
 800a836:	6920      	ldr	r0, [r4, #16]
 800a838:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a83c:	f104 0314 	add.w	r3, r4, #20
 800a840:	f019 091f 	ands.w	r9, r9, #31
 800a844:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a848:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a84c:	d02b      	beq.n	800a8a6 <__lshift+0xbe>
 800a84e:	f1c9 0e20 	rsb	lr, r9, #32
 800a852:	468a      	mov	sl, r1
 800a854:	2200      	movs	r2, #0
 800a856:	6818      	ldr	r0, [r3, #0]
 800a858:	fa00 f009 	lsl.w	r0, r0, r9
 800a85c:	4310      	orrs	r0, r2
 800a85e:	f84a 0b04 	str.w	r0, [sl], #4
 800a862:	f853 2b04 	ldr.w	r2, [r3], #4
 800a866:	459c      	cmp	ip, r3
 800a868:	fa22 f20e 	lsr.w	r2, r2, lr
 800a86c:	d8f3      	bhi.n	800a856 <__lshift+0x6e>
 800a86e:	ebac 0304 	sub.w	r3, ip, r4
 800a872:	3b15      	subs	r3, #21
 800a874:	f023 0303 	bic.w	r3, r3, #3
 800a878:	3304      	adds	r3, #4
 800a87a:	f104 0015 	add.w	r0, r4, #21
 800a87e:	4584      	cmp	ip, r0
 800a880:	bf38      	it	cc
 800a882:	2304      	movcc	r3, #4
 800a884:	50ca      	str	r2, [r1, r3]
 800a886:	b10a      	cbz	r2, 800a88c <__lshift+0xa4>
 800a888:	f108 0602 	add.w	r6, r8, #2
 800a88c:	3e01      	subs	r6, #1
 800a88e:	4638      	mov	r0, r7
 800a890:	612e      	str	r6, [r5, #16]
 800a892:	4621      	mov	r1, r4
 800a894:	f7ff fdda 	bl	800a44c <_Bfree>
 800a898:	4628      	mov	r0, r5
 800a89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a89e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	e7c5      	b.n	800a832 <__lshift+0x4a>
 800a8a6:	3904      	subs	r1, #4
 800a8a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8b0:	459c      	cmp	ip, r3
 800a8b2:	d8f9      	bhi.n	800a8a8 <__lshift+0xc0>
 800a8b4:	e7ea      	b.n	800a88c <__lshift+0xa4>
 800a8b6:	bf00      	nop
 800a8b8:	0800b3cc 	.word	0x0800b3cc
 800a8bc:	0800b3dd 	.word	0x0800b3dd

0800a8c0 <__mcmp>:
 800a8c0:	690a      	ldr	r2, [r1, #16]
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	6900      	ldr	r0, [r0, #16]
 800a8c6:	1a80      	subs	r0, r0, r2
 800a8c8:	b530      	push	{r4, r5, lr}
 800a8ca:	d10e      	bne.n	800a8ea <__mcmp+0x2a>
 800a8cc:	3314      	adds	r3, #20
 800a8ce:	3114      	adds	r1, #20
 800a8d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8e0:	4295      	cmp	r5, r2
 800a8e2:	d003      	beq.n	800a8ec <__mcmp+0x2c>
 800a8e4:	d205      	bcs.n	800a8f2 <__mcmp+0x32>
 800a8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ea:	bd30      	pop	{r4, r5, pc}
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	d3f3      	bcc.n	800a8d8 <__mcmp+0x18>
 800a8f0:	e7fb      	b.n	800a8ea <__mcmp+0x2a>
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	e7f9      	b.n	800a8ea <__mcmp+0x2a>
	...

0800a8f8 <__mdiff>:
 800a8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	4689      	mov	r9, r1
 800a8fe:	4606      	mov	r6, r0
 800a900:	4611      	mov	r1, r2
 800a902:	4648      	mov	r0, r9
 800a904:	4614      	mov	r4, r2
 800a906:	f7ff ffdb 	bl	800a8c0 <__mcmp>
 800a90a:	1e05      	subs	r5, r0, #0
 800a90c:	d112      	bne.n	800a934 <__mdiff+0x3c>
 800a90e:	4629      	mov	r1, r5
 800a910:	4630      	mov	r0, r6
 800a912:	f7ff fd5b 	bl	800a3cc <_Balloc>
 800a916:	4602      	mov	r2, r0
 800a918:	b928      	cbnz	r0, 800a926 <__mdiff+0x2e>
 800a91a:	4b3f      	ldr	r3, [pc, #252]	@ (800aa18 <__mdiff+0x120>)
 800a91c:	f240 2137 	movw	r1, #567	@ 0x237
 800a920:	483e      	ldr	r0, [pc, #248]	@ (800aa1c <__mdiff+0x124>)
 800a922:	f000 fb67 	bl	800aff4 <__assert_func>
 800a926:	2301      	movs	r3, #1
 800a928:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a92c:	4610      	mov	r0, r2
 800a92e:	b003      	add	sp, #12
 800a930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a934:	bfbc      	itt	lt
 800a936:	464b      	movlt	r3, r9
 800a938:	46a1      	movlt	r9, r4
 800a93a:	4630      	mov	r0, r6
 800a93c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a940:	bfba      	itte	lt
 800a942:	461c      	movlt	r4, r3
 800a944:	2501      	movlt	r5, #1
 800a946:	2500      	movge	r5, #0
 800a948:	f7ff fd40 	bl	800a3cc <_Balloc>
 800a94c:	4602      	mov	r2, r0
 800a94e:	b918      	cbnz	r0, 800a958 <__mdiff+0x60>
 800a950:	4b31      	ldr	r3, [pc, #196]	@ (800aa18 <__mdiff+0x120>)
 800a952:	f240 2145 	movw	r1, #581	@ 0x245
 800a956:	e7e3      	b.n	800a920 <__mdiff+0x28>
 800a958:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a95c:	6926      	ldr	r6, [r4, #16]
 800a95e:	60c5      	str	r5, [r0, #12]
 800a960:	f109 0310 	add.w	r3, r9, #16
 800a964:	f109 0514 	add.w	r5, r9, #20
 800a968:	f104 0e14 	add.w	lr, r4, #20
 800a96c:	f100 0b14 	add.w	fp, r0, #20
 800a970:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a974:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a978:	9301      	str	r3, [sp, #4]
 800a97a:	46d9      	mov	r9, fp
 800a97c:	f04f 0c00 	mov.w	ip, #0
 800a980:	9b01      	ldr	r3, [sp, #4]
 800a982:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a986:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a98a:	9301      	str	r3, [sp, #4]
 800a98c:	fa1f f38a 	uxth.w	r3, sl
 800a990:	4619      	mov	r1, r3
 800a992:	b283      	uxth	r3, r0
 800a994:	1acb      	subs	r3, r1, r3
 800a996:	0c00      	lsrs	r0, r0, #16
 800a998:	4463      	add	r3, ip
 800a99a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a99e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9a8:	4576      	cmp	r6, lr
 800a9aa:	f849 3b04 	str.w	r3, [r9], #4
 800a9ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9b2:	d8e5      	bhi.n	800a980 <__mdiff+0x88>
 800a9b4:	1b33      	subs	r3, r6, r4
 800a9b6:	3b15      	subs	r3, #21
 800a9b8:	f023 0303 	bic.w	r3, r3, #3
 800a9bc:	3415      	adds	r4, #21
 800a9be:	3304      	adds	r3, #4
 800a9c0:	42a6      	cmp	r6, r4
 800a9c2:	bf38      	it	cc
 800a9c4:	2304      	movcc	r3, #4
 800a9c6:	441d      	add	r5, r3
 800a9c8:	445b      	add	r3, fp
 800a9ca:	461e      	mov	r6, r3
 800a9cc:	462c      	mov	r4, r5
 800a9ce:	4544      	cmp	r4, r8
 800a9d0:	d30e      	bcc.n	800a9f0 <__mdiff+0xf8>
 800a9d2:	f108 0103 	add.w	r1, r8, #3
 800a9d6:	1b49      	subs	r1, r1, r5
 800a9d8:	f021 0103 	bic.w	r1, r1, #3
 800a9dc:	3d03      	subs	r5, #3
 800a9de:	45a8      	cmp	r8, r5
 800a9e0:	bf38      	it	cc
 800a9e2:	2100      	movcc	r1, #0
 800a9e4:	440b      	add	r3, r1
 800a9e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9ea:	b191      	cbz	r1, 800aa12 <__mdiff+0x11a>
 800a9ec:	6117      	str	r7, [r2, #16]
 800a9ee:	e79d      	b.n	800a92c <__mdiff+0x34>
 800a9f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9f4:	46e6      	mov	lr, ip
 800a9f6:	0c08      	lsrs	r0, r1, #16
 800a9f8:	fa1c fc81 	uxtah	ip, ip, r1
 800a9fc:	4471      	add	r1, lr
 800a9fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa02:	b289      	uxth	r1, r1
 800aa04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa08:	f846 1b04 	str.w	r1, [r6], #4
 800aa0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa10:	e7dd      	b.n	800a9ce <__mdiff+0xd6>
 800aa12:	3f01      	subs	r7, #1
 800aa14:	e7e7      	b.n	800a9e6 <__mdiff+0xee>
 800aa16:	bf00      	nop
 800aa18:	0800b3cc 	.word	0x0800b3cc
 800aa1c:	0800b3dd 	.word	0x0800b3dd

0800aa20 <__d2b>:
 800aa20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa24:	460f      	mov	r7, r1
 800aa26:	2101      	movs	r1, #1
 800aa28:	ec59 8b10 	vmov	r8, r9, d0
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	f7ff fccd 	bl	800a3cc <_Balloc>
 800aa32:	4604      	mov	r4, r0
 800aa34:	b930      	cbnz	r0, 800aa44 <__d2b+0x24>
 800aa36:	4602      	mov	r2, r0
 800aa38:	4b23      	ldr	r3, [pc, #140]	@ (800aac8 <__d2b+0xa8>)
 800aa3a:	4824      	ldr	r0, [pc, #144]	@ (800aacc <__d2b+0xac>)
 800aa3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa40:	f000 fad8 	bl	800aff4 <__assert_func>
 800aa44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa4c:	b10d      	cbz	r5, 800aa52 <__d2b+0x32>
 800aa4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa52:	9301      	str	r3, [sp, #4]
 800aa54:	f1b8 0300 	subs.w	r3, r8, #0
 800aa58:	d023      	beq.n	800aaa2 <__d2b+0x82>
 800aa5a:	4668      	mov	r0, sp
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	f7ff fd7c 	bl	800a55a <__lo0bits>
 800aa62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa66:	b1d0      	cbz	r0, 800aa9e <__d2b+0x7e>
 800aa68:	f1c0 0320 	rsb	r3, r0, #32
 800aa6c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa70:	430b      	orrs	r3, r1
 800aa72:	40c2      	lsrs	r2, r0
 800aa74:	6163      	str	r3, [r4, #20]
 800aa76:	9201      	str	r2, [sp, #4]
 800aa78:	9b01      	ldr	r3, [sp, #4]
 800aa7a:	61a3      	str	r3, [r4, #24]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bf0c      	ite	eq
 800aa80:	2201      	moveq	r2, #1
 800aa82:	2202      	movne	r2, #2
 800aa84:	6122      	str	r2, [r4, #16]
 800aa86:	b1a5      	cbz	r5, 800aab2 <__d2b+0x92>
 800aa88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa8c:	4405      	add	r5, r0
 800aa8e:	603d      	str	r5, [r7, #0]
 800aa90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa94:	6030      	str	r0, [r6, #0]
 800aa96:	4620      	mov	r0, r4
 800aa98:	b003      	add	sp, #12
 800aa9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa9e:	6161      	str	r1, [r4, #20]
 800aaa0:	e7ea      	b.n	800aa78 <__d2b+0x58>
 800aaa2:	a801      	add	r0, sp, #4
 800aaa4:	f7ff fd59 	bl	800a55a <__lo0bits>
 800aaa8:	9b01      	ldr	r3, [sp, #4]
 800aaaa:	6163      	str	r3, [r4, #20]
 800aaac:	3020      	adds	r0, #32
 800aaae:	2201      	movs	r2, #1
 800aab0:	e7e8      	b.n	800aa84 <__d2b+0x64>
 800aab2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aab6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aaba:	6038      	str	r0, [r7, #0]
 800aabc:	6918      	ldr	r0, [r3, #16]
 800aabe:	f7ff fd2d 	bl	800a51c <__hi0bits>
 800aac2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aac6:	e7e5      	b.n	800aa94 <__d2b+0x74>
 800aac8:	0800b3cc 	.word	0x0800b3cc
 800aacc:	0800b3dd 	.word	0x0800b3dd

0800aad0 <__sfputc_r>:
 800aad0:	6893      	ldr	r3, [r2, #8]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	b410      	push	{r4}
 800aad8:	6093      	str	r3, [r2, #8]
 800aada:	da08      	bge.n	800aaee <__sfputc_r+0x1e>
 800aadc:	6994      	ldr	r4, [r2, #24]
 800aade:	42a3      	cmp	r3, r4
 800aae0:	db01      	blt.n	800aae6 <__sfputc_r+0x16>
 800aae2:	290a      	cmp	r1, #10
 800aae4:	d103      	bne.n	800aaee <__sfputc_r+0x1e>
 800aae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaea:	f000 b9df 	b.w	800aeac <__swbuf_r>
 800aaee:	6813      	ldr	r3, [r2, #0]
 800aaf0:	1c58      	adds	r0, r3, #1
 800aaf2:	6010      	str	r0, [r2, #0]
 800aaf4:	7019      	strb	r1, [r3, #0]
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <__sfputs_r>:
 800aafe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab00:	4606      	mov	r6, r0
 800ab02:	460f      	mov	r7, r1
 800ab04:	4614      	mov	r4, r2
 800ab06:	18d5      	adds	r5, r2, r3
 800ab08:	42ac      	cmp	r4, r5
 800ab0a:	d101      	bne.n	800ab10 <__sfputs_r+0x12>
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	e007      	b.n	800ab20 <__sfputs_r+0x22>
 800ab10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab14:	463a      	mov	r2, r7
 800ab16:	4630      	mov	r0, r6
 800ab18:	f7ff ffda 	bl	800aad0 <__sfputc_r>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d1f3      	bne.n	800ab08 <__sfputs_r+0xa>
 800ab20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab24 <_vfiprintf_r>:
 800ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab28:	460d      	mov	r5, r1
 800ab2a:	b09d      	sub	sp, #116	@ 0x74
 800ab2c:	4614      	mov	r4, r2
 800ab2e:	4698      	mov	r8, r3
 800ab30:	4606      	mov	r6, r0
 800ab32:	b118      	cbz	r0, 800ab3c <_vfiprintf_r+0x18>
 800ab34:	6a03      	ldr	r3, [r0, #32]
 800ab36:	b90b      	cbnz	r3, 800ab3c <_vfiprintf_r+0x18>
 800ab38:	f7fe fbfa 	bl	8009330 <__sinit>
 800ab3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab3e:	07d9      	lsls	r1, r3, #31
 800ab40:	d405      	bmi.n	800ab4e <_vfiprintf_r+0x2a>
 800ab42:	89ab      	ldrh	r3, [r5, #12]
 800ab44:	059a      	lsls	r2, r3, #22
 800ab46:	d402      	bmi.n	800ab4e <_vfiprintf_r+0x2a>
 800ab48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab4a:	f7fe fd50 	bl	80095ee <__retarget_lock_acquire_recursive>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	071b      	lsls	r3, r3, #28
 800ab52:	d501      	bpl.n	800ab58 <_vfiprintf_r+0x34>
 800ab54:	692b      	ldr	r3, [r5, #16]
 800ab56:	b99b      	cbnz	r3, 800ab80 <_vfiprintf_r+0x5c>
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f000 f9e4 	bl	800af28 <__swsetup_r>
 800ab60:	b170      	cbz	r0, 800ab80 <_vfiprintf_r+0x5c>
 800ab62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab64:	07dc      	lsls	r4, r3, #31
 800ab66:	d504      	bpl.n	800ab72 <_vfiprintf_r+0x4e>
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	b01d      	add	sp, #116	@ 0x74
 800ab6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab72:	89ab      	ldrh	r3, [r5, #12]
 800ab74:	0598      	lsls	r0, r3, #22
 800ab76:	d4f7      	bmi.n	800ab68 <_vfiprintf_r+0x44>
 800ab78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab7a:	f7fe fd39 	bl	80095f0 <__retarget_lock_release_recursive>
 800ab7e:	e7f3      	b.n	800ab68 <_vfiprintf_r+0x44>
 800ab80:	2300      	movs	r3, #0
 800ab82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab84:	2320      	movs	r3, #32
 800ab86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab8e:	2330      	movs	r3, #48	@ 0x30
 800ab90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad40 <_vfiprintf_r+0x21c>
 800ab94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab98:	f04f 0901 	mov.w	r9, #1
 800ab9c:	4623      	mov	r3, r4
 800ab9e:	469a      	mov	sl, r3
 800aba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aba4:	b10a      	cbz	r2, 800abaa <_vfiprintf_r+0x86>
 800aba6:	2a25      	cmp	r2, #37	@ 0x25
 800aba8:	d1f9      	bne.n	800ab9e <_vfiprintf_r+0x7a>
 800abaa:	ebba 0b04 	subs.w	fp, sl, r4
 800abae:	d00b      	beq.n	800abc8 <_vfiprintf_r+0xa4>
 800abb0:	465b      	mov	r3, fp
 800abb2:	4622      	mov	r2, r4
 800abb4:	4629      	mov	r1, r5
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7ff ffa1 	bl	800aafe <__sfputs_r>
 800abbc:	3001      	adds	r0, #1
 800abbe:	f000 80a7 	beq.w	800ad10 <_vfiprintf_r+0x1ec>
 800abc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abc4:	445a      	add	r2, fp
 800abc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800abc8:	f89a 3000 	ldrb.w	r3, [sl]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 809f 	beq.w	800ad10 <_vfiprintf_r+0x1ec>
 800abd2:	2300      	movs	r3, #0
 800abd4:	f04f 32ff 	mov.w	r2, #4294967295
 800abd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abdc:	f10a 0a01 	add.w	sl, sl, #1
 800abe0:	9304      	str	r3, [sp, #16]
 800abe2:	9307      	str	r3, [sp, #28]
 800abe4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abe8:	931a      	str	r3, [sp, #104]	@ 0x68
 800abea:	4654      	mov	r4, sl
 800abec:	2205      	movs	r2, #5
 800abee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf2:	4853      	ldr	r0, [pc, #332]	@ (800ad40 <_vfiprintf_r+0x21c>)
 800abf4:	f7f5 fb74 	bl	80002e0 <memchr>
 800abf8:	9a04      	ldr	r2, [sp, #16]
 800abfa:	b9d8      	cbnz	r0, 800ac34 <_vfiprintf_r+0x110>
 800abfc:	06d1      	lsls	r1, r2, #27
 800abfe:	bf44      	itt	mi
 800ac00:	2320      	movmi	r3, #32
 800ac02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac06:	0713      	lsls	r3, r2, #28
 800ac08:	bf44      	itt	mi
 800ac0a:	232b      	movmi	r3, #43	@ 0x2b
 800ac0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac10:	f89a 3000 	ldrb.w	r3, [sl]
 800ac14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac16:	d015      	beq.n	800ac44 <_vfiprintf_r+0x120>
 800ac18:	9a07      	ldr	r2, [sp, #28]
 800ac1a:	4654      	mov	r4, sl
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	f04f 0c0a 	mov.w	ip, #10
 800ac22:	4621      	mov	r1, r4
 800ac24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac28:	3b30      	subs	r3, #48	@ 0x30
 800ac2a:	2b09      	cmp	r3, #9
 800ac2c:	d94b      	bls.n	800acc6 <_vfiprintf_r+0x1a2>
 800ac2e:	b1b0      	cbz	r0, 800ac5e <_vfiprintf_r+0x13a>
 800ac30:	9207      	str	r2, [sp, #28]
 800ac32:	e014      	b.n	800ac5e <_vfiprintf_r+0x13a>
 800ac34:	eba0 0308 	sub.w	r3, r0, r8
 800ac38:	fa09 f303 	lsl.w	r3, r9, r3
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	9304      	str	r3, [sp, #16]
 800ac40:	46a2      	mov	sl, r4
 800ac42:	e7d2      	b.n	800abea <_vfiprintf_r+0xc6>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	1d19      	adds	r1, r3, #4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	9103      	str	r1, [sp, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bfbb      	ittet	lt
 800ac50:	425b      	neglt	r3, r3
 800ac52:	f042 0202 	orrlt.w	r2, r2, #2
 800ac56:	9307      	strge	r3, [sp, #28]
 800ac58:	9307      	strlt	r3, [sp, #28]
 800ac5a:	bfb8      	it	lt
 800ac5c:	9204      	strlt	r2, [sp, #16]
 800ac5e:	7823      	ldrb	r3, [r4, #0]
 800ac60:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac62:	d10a      	bne.n	800ac7a <_vfiprintf_r+0x156>
 800ac64:	7863      	ldrb	r3, [r4, #1]
 800ac66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac68:	d132      	bne.n	800acd0 <_vfiprintf_r+0x1ac>
 800ac6a:	9b03      	ldr	r3, [sp, #12]
 800ac6c:	1d1a      	adds	r2, r3, #4
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	9203      	str	r2, [sp, #12]
 800ac72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac76:	3402      	adds	r4, #2
 800ac78:	9305      	str	r3, [sp, #20]
 800ac7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad50 <_vfiprintf_r+0x22c>
 800ac7e:	7821      	ldrb	r1, [r4, #0]
 800ac80:	2203      	movs	r2, #3
 800ac82:	4650      	mov	r0, sl
 800ac84:	f7f5 fb2c 	bl	80002e0 <memchr>
 800ac88:	b138      	cbz	r0, 800ac9a <_vfiprintf_r+0x176>
 800ac8a:	9b04      	ldr	r3, [sp, #16]
 800ac8c:	eba0 000a 	sub.w	r0, r0, sl
 800ac90:	2240      	movs	r2, #64	@ 0x40
 800ac92:	4082      	lsls	r2, r0
 800ac94:	4313      	orrs	r3, r2
 800ac96:	3401      	adds	r4, #1
 800ac98:	9304      	str	r3, [sp, #16]
 800ac9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac9e:	4829      	ldr	r0, [pc, #164]	@ (800ad44 <_vfiprintf_r+0x220>)
 800aca0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aca4:	2206      	movs	r2, #6
 800aca6:	f7f5 fb1b 	bl	80002e0 <memchr>
 800acaa:	2800      	cmp	r0, #0
 800acac:	d03f      	beq.n	800ad2e <_vfiprintf_r+0x20a>
 800acae:	4b26      	ldr	r3, [pc, #152]	@ (800ad48 <_vfiprintf_r+0x224>)
 800acb0:	bb1b      	cbnz	r3, 800acfa <_vfiprintf_r+0x1d6>
 800acb2:	9b03      	ldr	r3, [sp, #12]
 800acb4:	3307      	adds	r3, #7
 800acb6:	f023 0307 	bic.w	r3, r3, #7
 800acba:	3308      	adds	r3, #8
 800acbc:	9303      	str	r3, [sp, #12]
 800acbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc0:	443b      	add	r3, r7
 800acc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800acc4:	e76a      	b.n	800ab9c <_vfiprintf_r+0x78>
 800acc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acca:	460c      	mov	r4, r1
 800accc:	2001      	movs	r0, #1
 800acce:	e7a8      	b.n	800ac22 <_vfiprintf_r+0xfe>
 800acd0:	2300      	movs	r3, #0
 800acd2:	3401      	adds	r4, #1
 800acd4:	9305      	str	r3, [sp, #20]
 800acd6:	4619      	mov	r1, r3
 800acd8:	f04f 0c0a 	mov.w	ip, #10
 800acdc:	4620      	mov	r0, r4
 800acde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ace2:	3a30      	subs	r2, #48	@ 0x30
 800ace4:	2a09      	cmp	r2, #9
 800ace6:	d903      	bls.n	800acf0 <_vfiprintf_r+0x1cc>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d0c6      	beq.n	800ac7a <_vfiprintf_r+0x156>
 800acec:	9105      	str	r1, [sp, #20]
 800acee:	e7c4      	b.n	800ac7a <_vfiprintf_r+0x156>
 800acf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800acf4:	4604      	mov	r4, r0
 800acf6:	2301      	movs	r3, #1
 800acf8:	e7f0      	b.n	800acdc <_vfiprintf_r+0x1b8>
 800acfa:	ab03      	add	r3, sp, #12
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	462a      	mov	r2, r5
 800ad00:	4b12      	ldr	r3, [pc, #72]	@ (800ad4c <_vfiprintf_r+0x228>)
 800ad02:	a904      	add	r1, sp, #16
 800ad04:	4630      	mov	r0, r6
 800ad06:	f7fd fedf 	bl	8008ac8 <_printf_float>
 800ad0a:	4607      	mov	r7, r0
 800ad0c:	1c78      	adds	r0, r7, #1
 800ad0e:	d1d6      	bne.n	800acbe <_vfiprintf_r+0x19a>
 800ad10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad12:	07d9      	lsls	r1, r3, #31
 800ad14:	d405      	bmi.n	800ad22 <_vfiprintf_r+0x1fe>
 800ad16:	89ab      	ldrh	r3, [r5, #12]
 800ad18:	059a      	lsls	r2, r3, #22
 800ad1a:	d402      	bmi.n	800ad22 <_vfiprintf_r+0x1fe>
 800ad1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad1e:	f7fe fc67 	bl	80095f0 <__retarget_lock_release_recursive>
 800ad22:	89ab      	ldrh	r3, [r5, #12]
 800ad24:	065b      	lsls	r3, r3, #25
 800ad26:	f53f af1f 	bmi.w	800ab68 <_vfiprintf_r+0x44>
 800ad2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad2c:	e71e      	b.n	800ab6c <_vfiprintf_r+0x48>
 800ad2e:	ab03      	add	r3, sp, #12
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	462a      	mov	r2, r5
 800ad34:	4b05      	ldr	r3, [pc, #20]	@ (800ad4c <_vfiprintf_r+0x228>)
 800ad36:	a904      	add	r1, sp, #16
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f7fe f94d 	bl	8008fd8 <_printf_i>
 800ad3e:	e7e4      	b.n	800ad0a <_vfiprintf_r+0x1e6>
 800ad40:	0800b538 	.word	0x0800b538
 800ad44:	0800b542 	.word	0x0800b542
 800ad48:	08008ac9 	.word	0x08008ac9
 800ad4c:	0800aaff 	.word	0x0800aaff
 800ad50:	0800b53e 	.word	0x0800b53e

0800ad54 <__sflush_r>:
 800ad54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	0716      	lsls	r6, r2, #28
 800ad5e:	4605      	mov	r5, r0
 800ad60:	460c      	mov	r4, r1
 800ad62:	d454      	bmi.n	800ae0e <__sflush_r+0xba>
 800ad64:	684b      	ldr	r3, [r1, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dc02      	bgt.n	800ad70 <__sflush_r+0x1c>
 800ad6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dd48      	ble.n	800ae02 <__sflush_r+0xae>
 800ad70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	d045      	beq.n	800ae02 <__sflush_r+0xae>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad7c:	682f      	ldr	r7, [r5, #0]
 800ad7e:	6a21      	ldr	r1, [r4, #32]
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	d030      	beq.n	800ade6 <__sflush_r+0x92>
 800ad84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	0759      	lsls	r1, r3, #29
 800ad8a:	d505      	bpl.n	800ad98 <__sflush_r+0x44>
 800ad8c:	6863      	ldr	r3, [r4, #4]
 800ad8e:	1ad2      	subs	r2, r2, r3
 800ad90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad92:	b10b      	cbz	r3, 800ad98 <__sflush_r+0x44>
 800ad94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad96:	1ad2      	subs	r2, r2, r3
 800ad98:	2300      	movs	r3, #0
 800ad9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad9c:	6a21      	ldr	r1, [r4, #32]
 800ad9e:	4628      	mov	r0, r5
 800ada0:	47b0      	blx	r6
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	d106      	bne.n	800adb6 <__sflush_r+0x62>
 800ada8:	6829      	ldr	r1, [r5, #0]
 800adaa:	291d      	cmp	r1, #29
 800adac:	d82b      	bhi.n	800ae06 <__sflush_r+0xb2>
 800adae:	4a2a      	ldr	r2, [pc, #168]	@ (800ae58 <__sflush_r+0x104>)
 800adb0:	410a      	asrs	r2, r1
 800adb2:	07d6      	lsls	r6, r2, #31
 800adb4:	d427      	bmi.n	800ae06 <__sflush_r+0xb2>
 800adb6:	2200      	movs	r2, #0
 800adb8:	6062      	str	r2, [r4, #4]
 800adba:	04d9      	lsls	r1, r3, #19
 800adbc:	6922      	ldr	r2, [r4, #16]
 800adbe:	6022      	str	r2, [r4, #0]
 800adc0:	d504      	bpl.n	800adcc <__sflush_r+0x78>
 800adc2:	1c42      	adds	r2, r0, #1
 800adc4:	d101      	bne.n	800adca <__sflush_r+0x76>
 800adc6:	682b      	ldr	r3, [r5, #0]
 800adc8:	b903      	cbnz	r3, 800adcc <__sflush_r+0x78>
 800adca:	6560      	str	r0, [r4, #84]	@ 0x54
 800adcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adce:	602f      	str	r7, [r5, #0]
 800add0:	b1b9      	cbz	r1, 800ae02 <__sflush_r+0xae>
 800add2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800add6:	4299      	cmp	r1, r3
 800add8:	d002      	beq.n	800ade0 <__sflush_r+0x8c>
 800adda:	4628      	mov	r0, r5
 800addc:	f7ff f9f6 	bl	800a1cc <_free_r>
 800ade0:	2300      	movs	r3, #0
 800ade2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ade4:	e00d      	b.n	800ae02 <__sflush_r+0xae>
 800ade6:	2301      	movs	r3, #1
 800ade8:	4628      	mov	r0, r5
 800adea:	47b0      	blx	r6
 800adec:	4602      	mov	r2, r0
 800adee:	1c50      	adds	r0, r2, #1
 800adf0:	d1c9      	bne.n	800ad86 <__sflush_r+0x32>
 800adf2:	682b      	ldr	r3, [r5, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0c6      	beq.n	800ad86 <__sflush_r+0x32>
 800adf8:	2b1d      	cmp	r3, #29
 800adfa:	d001      	beq.n	800ae00 <__sflush_r+0xac>
 800adfc:	2b16      	cmp	r3, #22
 800adfe:	d11e      	bne.n	800ae3e <__sflush_r+0xea>
 800ae00:	602f      	str	r7, [r5, #0]
 800ae02:	2000      	movs	r0, #0
 800ae04:	e022      	b.n	800ae4c <__sflush_r+0xf8>
 800ae06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae0a:	b21b      	sxth	r3, r3
 800ae0c:	e01b      	b.n	800ae46 <__sflush_r+0xf2>
 800ae0e:	690f      	ldr	r7, [r1, #16]
 800ae10:	2f00      	cmp	r7, #0
 800ae12:	d0f6      	beq.n	800ae02 <__sflush_r+0xae>
 800ae14:	0793      	lsls	r3, r2, #30
 800ae16:	680e      	ldr	r6, [r1, #0]
 800ae18:	bf08      	it	eq
 800ae1a:	694b      	ldreq	r3, [r1, #20]
 800ae1c:	600f      	str	r7, [r1, #0]
 800ae1e:	bf18      	it	ne
 800ae20:	2300      	movne	r3, #0
 800ae22:	eba6 0807 	sub.w	r8, r6, r7
 800ae26:	608b      	str	r3, [r1, #8]
 800ae28:	f1b8 0f00 	cmp.w	r8, #0
 800ae2c:	dde9      	ble.n	800ae02 <__sflush_r+0xae>
 800ae2e:	6a21      	ldr	r1, [r4, #32]
 800ae30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae32:	4643      	mov	r3, r8
 800ae34:	463a      	mov	r2, r7
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b0      	blx	r6
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	dc08      	bgt.n	800ae50 <__sflush_r+0xfc>
 800ae3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae50:	4407      	add	r7, r0
 800ae52:	eba8 0800 	sub.w	r8, r8, r0
 800ae56:	e7e7      	b.n	800ae28 <__sflush_r+0xd4>
 800ae58:	dfbffffe 	.word	0xdfbffffe

0800ae5c <_fflush_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	690b      	ldr	r3, [r1, #16]
 800ae60:	4605      	mov	r5, r0
 800ae62:	460c      	mov	r4, r1
 800ae64:	b913      	cbnz	r3, 800ae6c <_fflush_r+0x10>
 800ae66:	2500      	movs	r5, #0
 800ae68:	4628      	mov	r0, r5
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	b118      	cbz	r0, 800ae76 <_fflush_r+0x1a>
 800ae6e:	6a03      	ldr	r3, [r0, #32]
 800ae70:	b90b      	cbnz	r3, 800ae76 <_fflush_r+0x1a>
 800ae72:	f7fe fa5d 	bl	8009330 <__sinit>
 800ae76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0f3      	beq.n	800ae66 <_fflush_r+0xa>
 800ae7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae80:	07d0      	lsls	r0, r2, #31
 800ae82:	d404      	bmi.n	800ae8e <_fflush_r+0x32>
 800ae84:	0599      	lsls	r1, r3, #22
 800ae86:	d402      	bmi.n	800ae8e <_fflush_r+0x32>
 800ae88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae8a:	f7fe fbb0 	bl	80095ee <__retarget_lock_acquire_recursive>
 800ae8e:	4628      	mov	r0, r5
 800ae90:	4621      	mov	r1, r4
 800ae92:	f7ff ff5f 	bl	800ad54 <__sflush_r>
 800ae96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae98:	07da      	lsls	r2, r3, #31
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	d4e4      	bmi.n	800ae68 <_fflush_r+0xc>
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	059b      	lsls	r3, r3, #22
 800aea2:	d4e1      	bmi.n	800ae68 <_fflush_r+0xc>
 800aea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aea6:	f7fe fba3 	bl	80095f0 <__retarget_lock_release_recursive>
 800aeaa:	e7dd      	b.n	800ae68 <_fflush_r+0xc>

0800aeac <__swbuf_r>:
 800aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeae:	460e      	mov	r6, r1
 800aeb0:	4614      	mov	r4, r2
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	b118      	cbz	r0, 800aebe <__swbuf_r+0x12>
 800aeb6:	6a03      	ldr	r3, [r0, #32]
 800aeb8:	b90b      	cbnz	r3, 800aebe <__swbuf_r+0x12>
 800aeba:	f7fe fa39 	bl	8009330 <__sinit>
 800aebe:	69a3      	ldr	r3, [r4, #24]
 800aec0:	60a3      	str	r3, [r4, #8]
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	071a      	lsls	r2, r3, #28
 800aec6:	d501      	bpl.n	800aecc <__swbuf_r+0x20>
 800aec8:	6923      	ldr	r3, [r4, #16]
 800aeca:	b943      	cbnz	r3, 800aede <__swbuf_r+0x32>
 800aecc:	4621      	mov	r1, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	f000 f82a 	bl	800af28 <__swsetup_r>
 800aed4:	b118      	cbz	r0, 800aede <__swbuf_r+0x32>
 800aed6:	f04f 37ff 	mov.w	r7, #4294967295
 800aeda:	4638      	mov	r0, r7
 800aedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	6922      	ldr	r2, [r4, #16]
 800aee2:	1a98      	subs	r0, r3, r2
 800aee4:	6963      	ldr	r3, [r4, #20]
 800aee6:	b2f6      	uxtb	r6, r6
 800aee8:	4283      	cmp	r3, r0
 800aeea:	4637      	mov	r7, r6
 800aeec:	dc05      	bgt.n	800aefa <__swbuf_r+0x4e>
 800aeee:	4621      	mov	r1, r4
 800aef0:	4628      	mov	r0, r5
 800aef2:	f7ff ffb3 	bl	800ae5c <_fflush_r>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d1ed      	bne.n	800aed6 <__swbuf_r+0x2a>
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	60a3      	str	r3, [r4, #8]
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	6022      	str	r2, [r4, #0]
 800af06:	701e      	strb	r6, [r3, #0]
 800af08:	6962      	ldr	r2, [r4, #20]
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d004      	beq.n	800af1a <__swbuf_r+0x6e>
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	07db      	lsls	r3, r3, #31
 800af14:	d5e1      	bpl.n	800aeda <__swbuf_r+0x2e>
 800af16:	2e0a      	cmp	r6, #10
 800af18:	d1df      	bne.n	800aeda <__swbuf_r+0x2e>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	f7ff ff9d 	bl	800ae5c <_fflush_r>
 800af22:	2800      	cmp	r0, #0
 800af24:	d0d9      	beq.n	800aeda <__swbuf_r+0x2e>
 800af26:	e7d6      	b.n	800aed6 <__swbuf_r+0x2a>

0800af28 <__swsetup_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4b29      	ldr	r3, [pc, #164]	@ (800afd0 <__swsetup_r+0xa8>)
 800af2c:	4605      	mov	r5, r0
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	460c      	mov	r4, r1
 800af32:	b118      	cbz	r0, 800af3c <__swsetup_r+0x14>
 800af34:	6a03      	ldr	r3, [r0, #32]
 800af36:	b90b      	cbnz	r3, 800af3c <__swsetup_r+0x14>
 800af38:	f7fe f9fa 	bl	8009330 <__sinit>
 800af3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af40:	0719      	lsls	r1, r3, #28
 800af42:	d422      	bmi.n	800af8a <__swsetup_r+0x62>
 800af44:	06da      	lsls	r2, r3, #27
 800af46:	d407      	bmi.n	800af58 <__swsetup_r+0x30>
 800af48:	2209      	movs	r2, #9
 800af4a:	602a      	str	r2, [r5, #0]
 800af4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	f04f 30ff 	mov.w	r0, #4294967295
 800af56:	e033      	b.n	800afc0 <__swsetup_r+0x98>
 800af58:	0758      	lsls	r0, r3, #29
 800af5a:	d512      	bpl.n	800af82 <__swsetup_r+0x5a>
 800af5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af5e:	b141      	cbz	r1, 800af72 <__swsetup_r+0x4a>
 800af60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af64:	4299      	cmp	r1, r3
 800af66:	d002      	beq.n	800af6e <__swsetup_r+0x46>
 800af68:	4628      	mov	r0, r5
 800af6a:	f7ff f92f 	bl	800a1cc <_free_r>
 800af6e:	2300      	movs	r3, #0
 800af70:	6363      	str	r3, [r4, #52]	@ 0x34
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af78:	81a3      	strh	r3, [r4, #12]
 800af7a:	2300      	movs	r3, #0
 800af7c:	6063      	str	r3, [r4, #4]
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f043 0308 	orr.w	r3, r3, #8
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	b94b      	cbnz	r3, 800afa2 <__swsetup_r+0x7a>
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af98:	d003      	beq.n	800afa2 <__swsetup_r+0x7a>
 800af9a:	4621      	mov	r1, r4
 800af9c:	4628      	mov	r0, r5
 800af9e:	f000 f8b3 	bl	800b108 <__smakebuf_r>
 800afa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa6:	f013 0201 	ands.w	r2, r3, #1
 800afaa:	d00a      	beq.n	800afc2 <__swsetup_r+0x9a>
 800afac:	2200      	movs	r2, #0
 800afae:	60a2      	str	r2, [r4, #8]
 800afb0:	6962      	ldr	r2, [r4, #20]
 800afb2:	4252      	negs	r2, r2
 800afb4:	61a2      	str	r2, [r4, #24]
 800afb6:	6922      	ldr	r2, [r4, #16]
 800afb8:	b942      	cbnz	r2, 800afcc <__swsetup_r+0xa4>
 800afba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800afbe:	d1c5      	bne.n	800af4c <__swsetup_r+0x24>
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	0799      	lsls	r1, r3, #30
 800afc4:	bf58      	it	pl
 800afc6:	6962      	ldrpl	r2, [r4, #20]
 800afc8:	60a2      	str	r2, [r4, #8]
 800afca:	e7f4      	b.n	800afb6 <__swsetup_r+0x8e>
 800afcc:	2000      	movs	r0, #0
 800afce:	e7f7      	b.n	800afc0 <__swsetup_r+0x98>
 800afd0:	24000020 	.word	0x24000020

0800afd4 <_sbrk_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	@ (800aff0 <_sbrk_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7f6 f876 	bl	80010d0 <_sbrk>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_sbrk_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_sbrk_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	24004e54 	.word	0x24004e54

0800aff4 <__assert_func>:
 800aff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff6:	4614      	mov	r4, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	4b09      	ldr	r3, [pc, #36]	@ (800b020 <__assert_func+0x2c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4605      	mov	r5, r0
 800b000:	68d8      	ldr	r0, [r3, #12]
 800b002:	b954      	cbnz	r4, 800b01a <__assert_func+0x26>
 800b004:	4b07      	ldr	r3, [pc, #28]	@ (800b024 <__assert_func+0x30>)
 800b006:	461c      	mov	r4, r3
 800b008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b00c:	9100      	str	r1, [sp, #0]
 800b00e:	462b      	mov	r3, r5
 800b010:	4905      	ldr	r1, [pc, #20]	@ (800b028 <__assert_func+0x34>)
 800b012:	f000 f841 	bl	800b098 <fiprintf>
 800b016:	f000 f8d5 	bl	800b1c4 <abort>
 800b01a:	4b04      	ldr	r3, [pc, #16]	@ (800b02c <__assert_func+0x38>)
 800b01c:	e7f4      	b.n	800b008 <__assert_func+0x14>
 800b01e:	bf00      	nop
 800b020:	24000020 	.word	0x24000020
 800b024:	0800b58e 	.word	0x0800b58e
 800b028:	0800b560 	.word	0x0800b560
 800b02c:	0800b553 	.word	0x0800b553

0800b030 <_calloc_r>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	fba1 5402 	umull	r5, r4, r1, r2
 800b036:	b93c      	cbnz	r4, 800b048 <_calloc_r+0x18>
 800b038:	4629      	mov	r1, r5
 800b03a:	f7ff f93b 	bl	800a2b4 <_malloc_r>
 800b03e:	4606      	mov	r6, r0
 800b040:	b928      	cbnz	r0, 800b04e <_calloc_r+0x1e>
 800b042:	2600      	movs	r6, #0
 800b044:	4630      	mov	r0, r6
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	220c      	movs	r2, #12
 800b04a:	6002      	str	r2, [r0, #0]
 800b04c:	e7f9      	b.n	800b042 <_calloc_r+0x12>
 800b04e:	462a      	mov	r2, r5
 800b050:	4621      	mov	r1, r4
 800b052:	f7fe f9f8 	bl	8009446 <memset>
 800b056:	e7f5      	b.n	800b044 <_calloc_r+0x14>

0800b058 <__ascii_mbtowc>:
 800b058:	b082      	sub	sp, #8
 800b05a:	b901      	cbnz	r1, 800b05e <__ascii_mbtowc+0x6>
 800b05c:	a901      	add	r1, sp, #4
 800b05e:	b142      	cbz	r2, 800b072 <__ascii_mbtowc+0x1a>
 800b060:	b14b      	cbz	r3, 800b076 <__ascii_mbtowc+0x1e>
 800b062:	7813      	ldrb	r3, [r2, #0]
 800b064:	600b      	str	r3, [r1, #0]
 800b066:	7812      	ldrb	r2, [r2, #0]
 800b068:	1e10      	subs	r0, r2, #0
 800b06a:	bf18      	it	ne
 800b06c:	2001      	movne	r0, #1
 800b06e:	b002      	add	sp, #8
 800b070:	4770      	bx	lr
 800b072:	4610      	mov	r0, r2
 800b074:	e7fb      	b.n	800b06e <__ascii_mbtowc+0x16>
 800b076:	f06f 0001 	mvn.w	r0, #1
 800b07a:	e7f8      	b.n	800b06e <__ascii_mbtowc+0x16>

0800b07c <__ascii_wctomb>:
 800b07c:	4603      	mov	r3, r0
 800b07e:	4608      	mov	r0, r1
 800b080:	b141      	cbz	r1, 800b094 <__ascii_wctomb+0x18>
 800b082:	2aff      	cmp	r2, #255	@ 0xff
 800b084:	d904      	bls.n	800b090 <__ascii_wctomb+0x14>
 800b086:	228a      	movs	r2, #138	@ 0x8a
 800b088:	601a      	str	r2, [r3, #0]
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295
 800b08e:	4770      	bx	lr
 800b090:	700a      	strb	r2, [r1, #0]
 800b092:	2001      	movs	r0, #1
 800b094:	4770      	bx	lr
	...

0800b098 <fiprintf>:
 800b098:	b40e      	push	{r1, r2, r3}
 800b09a:	b503      	push	{r0, r1, lr}
 800b09c:	4601      	mov	r1, r0
 800b09e:	ab03      	add	r3, sp, #12
 800b0a0:	4805      	ldr	r0, [pc, #20]	@ (800b0b8 <fiprintf+0x20>)
 800b0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a6:	6800      	ldr	r0, [r0, #0]
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	f7ff fd3b 	bl	800ab24 <_vfiprintf_r>
 800b0ae:	b002      	add	sp, #8
 800b0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0b4:	b003      	add	sp, #12
 800b0b6:	4770      	bx	lr
 800b0b8:	24000020 	.word	0x24000020

0800b0bc <__swhatbuf_r>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	460c      	mov	r4, r1
 800b0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c4:	2900      	cmp	r1, #0
 800b0c6:	b096      	sub	sp, #88	@ 0x58
 800b0c8:	4615      	mov	r5, r2
 800b0ca:	461e      	mov	r6, r3
 800b0cc:	da0d      	bge.n	800b0ea <__swhatbuf_r+0x2e>
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0d4:	f04f 0100 	mov.w	r1, #0
 800b0d8:	bf14      	ite	ne
 800b0da:	2340      	movne	r3, #64	@ 0x40
 800b0dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	6031      	str	r1, [r6, #0]
 800b0e4:	602b      	str	r3, [r5, #0]
 800b0e6:	b016      	add	sp, #88	@ 0x58
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ea:	466a      	mov	r2, sp
 800b0ec:	f000 f848 	bl	800b180 <_fstat_r>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	dbec      	blt.n	800b0ce <__swhatbuf_r+0x12>
 800b0f4:	9901      	ldr	r1, [sp, #4]
 800b0f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0fe:	4259      	negs	r1, r3
 800b100:	4159      	adcs	r1, r3
 800b102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b106:	e7eb      	b.n	800b0e0 <__swhatbuf_r+0x24>

0800b108 <__smakebuf_r>:
 800b108:	898b      	ldrh	r3, [r1, #12]
 800b10a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b10c:	079d      	lsls	r5, r3, #30
 800b10e:	4606      	mov	r6, r0
 800b110:	460c      	mov	r4, r1
 800b112:	d507      	bpl.n	800b124 <__smakebuf_r+0x1c>
 800b114:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	6123      	str	r3, [r4, #16]
 800b11c:	2301      	movs	r3, #1
 800b11e:	6163      	str	r3, [r4, #20]
 800b120:	b003      	add	sp, #12
 800b122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b124:	ab01      	add	r3, sp, #4
 800b126:	466a      	mov	r2, sp
 800b128:	f7ff ffc8 	bl	800b0bc <__swhatbuf_r>
 800b12c:	9f00      	ldr	r7, [sp, #0]
 800b12e:	4605      	mov	r5, r0
 800b130:	4639      	mov	r1, r7
 800b132:	4630      	mov	r0, r6
 800b134:	f7ff f8be 	bl	800a2b4 <_malloc_r>
 800b138:	b948      	cbnz	r0, 800b14e <__smakebuf_r+0x46>
 800b13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13e:	059a      	lsls	r2, r3, #22
 800b140:	d4ee      	bmi.n	800b120 <__smakebuf_r+0x18>
 800b142:	f023 0303 	bic.w	r3, r3, #3
 800b146:	f043 0302 	orr.w	r3, r3, #2
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	e7e2      	b.n	800b114 <__smakebuf_r+0xc>
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	6020      	str	r0, [r4, #0]
 800b152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	9b01      	ldr	r3, [sp, #4]
 800b15a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b15e:	b15b      	cbz	r3, 800b178 <__smakebuf_r+0x70>
 800b160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b164:	4630      	mov	r0, r6
 800b166:	f000 f81d 	bl	800b1a4 <_isatty_r>
 800b16a:	b128      	cbz	r0, 800b178 <__smakebuf_r+0x70>
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f023 0303 	bic.w	r3, r3, #3
 800b172:	f043 0301 	orr.w	r3, r3, #1
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	431d      	orrs	r5, r3
 800b17c:	81a5      	strh	r5, [r4, #12]
 800b17e:	e7cf      	b.n	800b120 <__smakebuf_r+0x18>

0800b180 <_fstat_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d07      	ldr	r5, [pc, #28]	@ (800b1a0 <_fstat_r+0x20>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	4611      	mov	r1, r2
 800b18c:	602b      	str	r3, [r5, #0]
 800b18e:	f7f5 ff77 	bl	8001080 <_fstat>
 800b192:	1c43      	adds	r3, r0, #1
 800b194:	d102      	bne.n	800b19c <_fstat_r+0x1c>
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	b103      	cbz	r3, 800b19c <_fstat_r+0x1c>
 800b19a:	6023      	str	r3, [r4, #0]
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
 800b19e:	bf00      	nop
 800b1a0:	24004e54 	.word	0x24004e54

0800b1a4 <_isatty_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4d06      	ldr	r5, [pc, #24]	@ (800b1c0 <_isatty_r+0x1c>)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	f7f5 ff76 	bl	80010a0 <_isatty>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_isatty_r+0x1a>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_isatty_r+0x1a>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	24004e54 	.word	0x24004e54

0800b1c4 <abort>:
 800b1c4:	b508      	push	{r3, lr}
 800b1c6:	2006      	movs	r0, #6
 800b1c8:	f000 f82c 	bl	800b224 <raise>
 800b1cc:	2001      	movs	r0, #1
 800b1ce:	f7f5 ff07 	bl	8000fe0 <_exit>

0800b1d2 <_raise_r>:
 800b1d2:	291f      	cmp	r1, #31
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	460c      	mov	r4, r1
 800b1da:	d904      	bls.n	800b1e6 <_raise_r+0x14>
 800b1dc:	2316      	movs	r3, #22
 800b1de:	6003      	str	r3, [r0, #0]
 800b1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1e8:	b112      	cbz	r2, 800b1f0 <_raise_r+0x1e>
 800b1ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1ee:	b94b      	cbnz	r3, 800b204 <_raise_r+0x32>
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f000 f831 	bl	800b258 <_getpid_r>
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	4601      	mov	r1, r0
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b200:	f000 b818 	b.w	800b234 <_kill_r>
 800b204:	2b01      	cmp	r3, #1
 800b206:	d00a      	beq.n	800b21e <_raise_r+0x4c>
 800b208:	1c59      	adds	r1, r3, #1
 800b20a:	d103      	bne.n	800b214 <_raise_r+0x42>
 800b20c:	2316      	movs	r3, #22
 800b20e:	6003      	str	r3, [r0, #0]
 800b210:	2001      	movs	r0, #1
 800b212:	e7e7      	b.n	800b1e4 <_raise_r+0x12>
 800b214:	2100      	movs	r1, #0
 800b216:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b21a:	4620      	mov	r0, r4
 800b21c:	4798      	blx	r3
 800b21e:	2000      	movs	r0, #0
 800b220:	e7e0      	b.n	800b1e4 <_raise_r+0x12>
	...

0800b224 <raise>:
 800b224:	4b02      	ldr	r3, [pc, #8]	@ (800b230 <raise+0xc>)
 800b226:	4601      	mov	r1, r0
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	f7ff bfd2 	b.w	800b1d2 <_raise_r>
 800b22e:	bf00      	nop
 800b230:	24000020 	.word	0x24000020

0800b234 <_kill_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d07      	ldr	r5, [pc, #28]	@ (800b254 <_kill_r+0x20>)
 800b238:	2300      	movs	r3, #0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	4611      	mov	r1, r2
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	f7f5 febd 	bl	8000fc0 <_kill>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d102      	bne.n	800b250 <_kill_r+0x1c>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b103      	cbz	r3, 800b250 <_kill_r+0x1c>
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	bd38      	pop	{r3, r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	24004e54 	.word	0x24004e54

0800b258 <_getpid_r>:
 800b258:	f7f5 beaa 	b.w	8000fb0 <_getpid>

0800b25c <_init>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	bf00      	nop
 800b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b262:	bc08      	pop	{r3}
 800b264:	469e      	mov	lr, r3
 800b266:	4770      	bx	lr

0800b268 <_fini>:
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26a:	bf00      	nop
 800b26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26e:	bc08      	pop	{r3}
 800b270:	469e      	mov	lr, r3
 800b272:	4770      	bx	lr
