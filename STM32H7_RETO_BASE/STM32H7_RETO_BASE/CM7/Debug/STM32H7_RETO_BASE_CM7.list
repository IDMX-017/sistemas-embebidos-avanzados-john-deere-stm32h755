
STM32H7_RETO_BASE_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf8c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  0800c230  0800c230  0000d230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc28  0800cc28  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc28  0800cc28  0000dc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc30  0800cc30  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc30  0800cc30  0000dc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc34  0800cc34  0000dc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800cc38  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  240001d8  0800ce10  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000598  0800ce10  0000e598  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146fa  00000000  00000000  0000e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028de  00000000  00000000  00022900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  000251e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd8  00000000  00000000  00026168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b420  00000000  00000000  00026d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147c1  00000000  00000000  00062160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001818b6  00000000  00000000  00076921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f81d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c8  00000000  00000000  001f821c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ae  00000000  00000000  001fd5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c214 	.word	0x0800c214

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800c214 	.word	0x0800c214

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <NRF24_DelayMicroSeconds+0x3c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <NRF24_DelayMicroSeconds+0x40>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	0c9a      	lsrs	r2, r3, #18
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000bb4:	bf00      	nop
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	60fa      	str	r2, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1fa      	bne.n	8000bb6 <NRF24_DelayMicroSeconds+0x22>
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	24000000 	.word	0x24000000
 8000bd4:	165e9f81 	.word	0x165e9f81

08000bd8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d008      	beq.n	8000bf8 <NRF24_csn+0x20>
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <NRF24_csn+0x38>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <NRF24_csn+0x3c>)
 8000bec:	8811      	ldrh	r1, [r2, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 f9f3 	bl	8002fdc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000bf6:	e007      	b.n	8000c08 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <NRF24_csn+0x38>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <NRF24_csn+0x3c>)
 8000bfe:	8811      	ldrh	r1, [r2, #0]
 8000c00:	2200      	movs	r2, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 f9ea 	bl	8002fdc <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000204 	.word	0x24000204
 8000c14:	24000208 	.word	0x24000208

08000c18 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d008      	beq.n	8000c38 <NRF24_ce+0x20>
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <NRF24_ce+0x38>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <NRF24_ce+0x3c>)
 8000c2c:	8811      	ldrh	r1, [r2, #0]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 f9d3 	bl	8002fdc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000c36:	e007      	b.n	8000c48 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <NRF24_ce+0x38>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <NRF24_ce+0x3c>)
 8000c3e:	8811      	ldrh	r1, [r2, #0]
 8000c40:	2200      	movs	r2, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 f9ca 	bl	8002fdc <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000204 	.word	0x24000204
 8000c54:	2400020a 	.word	0x2400020a

08000c58 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ffb8 	bl	8000bd8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 031f 	and.w	r3, r3, #31
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c72:	f107 010c 	add.w	r1, r7, #12
 8000c76:	2364      	movs	r3, #100	@ 0x64
 8000c78:	2201      	movs	r2, #1
 8000c7a:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <NRF24_read_register+0x4c>)
 8000c7c:	f005 f986 	bl	8005f8c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	1c59      	adds	r1, r3, #1
 8000c86:	2364      	movs	r3, #100	@ 0x64
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <NRF24_read_register+0x4c>)
 8000c8c:	f005 fb6c 	bl	8006368 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c90:	7b7b      	ldrb	r3, [r7, #13]
 8000c92:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff ff9f 	bl	8000bd8 <NRF24_csn>
	return retData;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2400020c 	.word	0x2400020c

08000ca8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff8d 	bl	8000bd8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 031f 	and.w	r3, r3, #31
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000cc8:	f107 010c 	add.w	r1, r7, #12
 8000ccc:	2364      	movs	r3, #100	@ 0x64
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <NRF24_read_registerN+0x4c>)
 8000cd2:	f005 f95b 	bl	8005f8c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	2364      	movs	r3, #100	@ 0x64
 8000cdc:	6839      	ldr	r1, [r7, #0]
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <NRF24_read_registerN+0x4c>)
 8000ce0:	f005 fb42 	bl	8006368 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff ff77 	bl	8000bd8 <NRF24_csn>
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2400020c 	.word	0x2400020c

08000cf8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff65 	bl	8000bd8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000d1c:	f107 010c 	add.w	r1, r7, #12
 8000d20:	2364      	movs	r3, #100	@ 0x64
 8000d22:	2202      	movs	r2, #2
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <NRF24_write_register+0x40>)
 8000d26:	f005 f931 	bl	8005f8c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff54 	bl	8000bd8 <NRF24_csn>
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2400020c 	.word	0x2400020c

08000d3c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff43 	bl	8000bd8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d5c:	f107 010c 	add.w	r1, r7, #12
 8000d60:	2364      	movs	r3, #100	@ 0x64
 8000d62:	2201      	movs	r2, #1
 8000d64:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <NRF24_write_registerN+0x4c>)
 8000d66:	f005 f911 	bl	8005f8c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	2364      	movs	r3, #100	@ 0x64
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <NRF24_write_registerN+0x4c>)
 8000d74:	f005 f90a 	bl	8005f8c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff ff2d 	bl	8000bd8 <NRF24_csn>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2400020c 	.word	0x2400020c

08000d8c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000d98:	f000 fa0a 	bl	80011b0 <NRF24_getPayloadSize>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d303      	bcc.n	8000dae <NRF24_read_payload+0x22>
 8000da6:	f000 fa03 	bl	80011b0 <NRF24_getPayloadSize>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e000      	b.n	8000db0 <NRF24_read_payload+0x24>
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff ff10 	bl	8000bd8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000db8:	2361      	movs	r3, #97	@ 0x61
 8000dba:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000dbc:	f107 010e 	add.w	r1, r7, #14
 8000dc0:	2364      	movs	r3, #100	@ 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <NRF24_read_payload+0x5c>)
 8000dc6:	f005 f8e1 	bl	8005f8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	2364      	movs	r3, #100	@ 0x64
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <NRF24_read_payload+0x5c>)
 8000dd4:	f005 fac8 	bl	8006368 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff fefd 	bl	8000bd8 <NRF24_csn>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2400020c 	.word	0x2400020c

08000dec <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000df0:	21ff      	movs	r1, #255	@ 0xff
 8000df2:	20e1      	movs	r0, #225	@ 0xe1
 8000df4:	f7ff ff80 	bl	8000cf8 <NRF24_write_register>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000e00:	21ff      	movs	r1, #255	@ 0xff
 8000e02:	20e2      	movs	r0, #226	@ 0xe2
 8000e04:	f7ff ff78 	bl	8000cf8 <NRF24_write_register>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f7ff ff20 	bl	8000c58 <NRF24_read_register>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000e28:	b082      	sub	sp, #8
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000e3c:	4b66      	ldr	r3, [pc, #408]	@ (8000fd8 <NRF24_begin+0x1b0>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2288      	movs	r2, #136	@ 0x88
 8000e46:	4619      	mov	r1, r3
 8000e48:	f007 ff4d 	bl	8008ce6 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000e4c:	4a63      	ldr	r2, [pc, #396]	@ (8000fdc <NRF24_begin+0x1b4>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000e52:	4a63      	ldr	r2, [pc, #396]	@ (8000fe0 <NRF24_begin+0x1b8>)
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000e58:	4a62      	ldr	r2, [pc, #392]	@ (8000fe4 <NRF24_begin+0x1bc>)
 8000e5a:	883b      	ldrh	r3, [r7, #0]
 8000e5c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff feba 	bl	8000bd8 <NRF24_csn>
	NRF24_ce(0);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fed7 	bl	8000c18 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e6a:	2005      	movs	r0, #5
 8000e6c:	f001 fd7a 	bl	8002964 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e70:	2108      	movs	r1, #8
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff ff40 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e78:	213f      	movs	r1, #63	@ 0x3f
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff ff3c 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e80:	2103      	movs	r1, #3
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff ff38 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e88:	2103      	movs	r1, #3
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f7ff ff34 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e90:	2103      	movs	r1, #3
 8000e92:	2004      	movs	r0, #4
 8000e94:	f7ff ff30 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e98:	2102      	movs	r1, #2
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f7ff ff2c 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	f7ff ff28 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ea8:	210e      	movs	r1, #14
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f7ff ff24 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2008      	movs	r0, #8
 8000eb4:	f7ff ff20 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2009      	movs	r0, #9
 8000ebc:	f7ff ff1c 	bl	8000cf8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ec0:	23e7      	movs	r3, #231	@ 0xe7
 8000ec2:	733b      	strb	r3, [r7, #12]
 8000ec4:	23e7      	movs	r3, #231	@ 0xe7
 8000ec6:	72fb      	strb	r3, [r7, #11]
 8000ec8:	23e7      	movs	r3, #231	@ 0xe7
 8000eca:	72bb      	strb	r3, [r7, #10]
 8000ecc:	23e7      	movs	r3, #231	@ 0xe7
 8000ece:	727b      	strb	r3, [r7, #9]
 8000ed0:	23e7      	movs	r3, #231	@ 0xe7
 8000ed2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	2205      	movs	r2, #5
 8000eda:	4619      	mov	r1, r3
 8000edc:	200a      	movs	r0, #10
 8000ede:	f7ff ff2d 	bl	8000d3c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000ee2:	23c2      	movs	r3, #194	@ 0xc2
 8000ee4:	733b      	strb	r3, [r7, #12]
 8000ee6:	23c2      	movs	r3, #194	@ 0xc2
 8000ee8:	72fb      	strb	r3, [r7, #11]
 8000eea:	23c2      	movs	r3, #194	@ 0xc2
 8000eec:	72bb      	strb	r3, [r7, #10]
 8000eee:	23c2      	movs	r3, #194	@ 0xc2
 8000ef0:	727b      	strb	r3, [r7, #9]
 8000ef2:	23c2      	movs	r3, #194	@ 0xc2
 8000ef4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2205      	movs	r2, #5
 8000efc:	4619      	mov	r1, r3
 8000efe:	200b      	movs	r0, #11
 8000f00:	f7ff ff1c 	bl	8000d3c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000f04:	21c3      	movs	r1, #195	@ 0xc3
 8000f06:	200c      	movs	r0, #12
 8000f08:	f7ff fef6 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000f0c:	21c4      	movs	r1, #196	@ 0xc4
 8000f0e:	200d      	movs	r0, #13
 8000f10:	f7ff fef2 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000f14:	21c5      	movs	r1, #197	@ 0xc5
 8000f16:	200e      	movs	r0, #14
 8000f18:	f7ff feee 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000f1c:	21c6      	movs	r1, #198	@ 0xc6
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f7ff feea 	bl	8000cf8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000f24:	23e7      	movs	r3, #231	@ 0xe7
 8000f26:	733b      	strb	r3, [r7, #12]
 8000f28:	23e7      	movs	r3, #231	@ 0xe7
 8000f2a:	72fb      	strb	r3, [r7, #11]
 8000f2c:	23e7      	movs	r3, #231	@ 0xe7
 8000f2e:	72bb      	strb	r3, [r7, #10]
 8000f30:	23e7      	movs	r3, #231	@ 0xe7
 8000f32:	727b      	strb	r3, [r7, #9]
 8000f34:	23e7      	movs	r3, #231	@ 0xe7
 8000f36:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2010      	movs	r0, #16
 8000f42:	f7ff fefb 	bl	8000d3c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2011      	movs	r0, #17
 8000f4a:	f7ff fed5 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2012      	movs	r0, #18
 8000f52:	f7ff fed1 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000f56:	2100      	movs	r1, #0
 8000f58:	2013      	movs	r0, #19
 8000f5a:	f7ff fecd 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2014      	movs	r0, #20
 8000f62:	f7ff fec9 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	2015      	movs	r0, #21
 8000f6a:	f7ff fec5 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2016      	movs	r0, #22
 8000f72:	f7ff fec1 	bl	8000cf8 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f76:	f000 fad5 	bl	8001524 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	201c      	movs	r0, #28
 8000f7e:	f7ff febb 	bl	8000cf8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f82:	2100      	movs	r1, #0
 8000f84:	201d      	movs	r0, #29
 8000f86:	f7ff feb7 	bl	8000cf8 <NRF24_write_register>
	printRadioSettings();
 8000f8a:	f000 fae5 	bl	8001558 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f8e:	210f      	movs	r1, #15
 8000f90:	200f      	movs	r0, #15
 8000f92:	f000 f8c5 	bl	8001120 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f9ab 	bl	80012f2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f000 f9e1 	bl	8001364 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 fa24 	bl	80013f0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000fa8:	f000 f976 	bl	8001298 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000fac:	2020      	movs	r0, #32
 8000fae:	f000 f8e7 	bl	8001180 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000fb2:	f000 faae 	bl	8001512 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000fb6:	204c      	movs	r0, #76	@ 0x4c
 8000fb8:	f000 f8cd 	bl	8001156 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000fbc:	f7ff ff16 	bl	8000dec <NRF24_flush_tx>
	NRF24_flush_rx();
 8000fc0:	f7ff ff1c 	bl	8000dfc <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000fc4:	f000 fa3c 	bl	8001440 <NRF24_powerDown>
	
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd2:	b002      	add	sp, #8
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2400020c 	.word	0x2400020c
 8000fdc:	24000204 	.word	0x24000204
 8000fe0:	24000208 	.word	0x24000208
 8000fe4:	2400020a 	.word	0x2400020a

08000fe8 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fe33 	bl	8000c58 <NRF24_read_register>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f043 0303 	orr.w	r3, r3, #3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fe7b 	bl	8000cf8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <NRF24_startListening+0x48>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	4313      	orrs	r3, r2
 800100a:	d004      	beq.n	8001016 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800100c:	2205      	movs	r2, #5
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <NRF24_startListening+0x48>)
 8001010:	200a      	movs	r0, #10
 8001012:	f7ff fe93 	bl	8000d3c <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8001016:	f7ff fee9 	bl	8000dec <NRF24_flush_tx>
	NRF24_flush_rx();
 800101a:	f7ff feef 	bl	8000dfc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fdfa 	bl	8000c18 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001024:	2096      	movs	r0, #150	@ 0x96
 8001026:	f7ff fdb5 	bl	8000b94 <NRF24_DelayMicroSeconds>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	240001f8 	.word	0x240001f8

08001034 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001038:	2000      	movs	r0, #0
 800103a:	f000 fa10 	bl	800145e <NRF24_availablePipe>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	bd80      	pop	{r7, pc}

08001044 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	4619      	mov	r1, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fe99 	bl	8000d8c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800105a:	2017      	movs	r0, #23
 800105c:	f7ff fdfc 	bl	8000c58 <NRF24_read_register>
 8001060:	4603      	mov	r3, r0
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001068:	f7ff fec8 	bl	8000dfc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800106c:	f000 f8ac 	bl	80011c8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf14      	ite	ne
 8001076:	2301      	movne	r3, #1
 8001078:	2300      	moveq	r3, #0
 800107a:	b2db      	uxtb	r3, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4601      	mov	r1, r0
 800108c:	e9c7 2300 	strd	r2, r3, [r7]
 8001090:	460b      	mov	r3, r1
 8001092:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d104      	bne.n	80010a4 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800109a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800109e:	491c      	ldr	r1, [pc, #112]	@ (8001110 <NRF24_openReadingPipe+0x8c>)
 80010a0:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d82d      	bhi.n	8001106 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d808      	bhi.n	80010c2 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <NRF24_openReadingPipe+0x90>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	4639      	mov	r1, r7
 80010b8:	2205      	movs	r2, #5
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe3e 	bl	8000d3c <NRF24_write_registerN>
 80010c0:	e007      	b.n	80010d2 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <NRF24_openReadingPipe+0x90>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	4639      	mov	r1, r7
 80010ca:	2201      	movs	r2, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fe35 	bl	8000d3c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <NRF24_openReadingPipe+0x94>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	4a10      	ldr	r2, [pc, #64]	@ (800111c <NRF24_openReadingPipe+0x98>)
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe0a 	bl	8000cf8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fdb7 	bl	8000c58 <NRF24_read_register>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff fdf9 	bl	8000cf8 <NRF24_write_register>
	}
	
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	240001f8 	.word	0x240001f8
 8001114:	0800c7c0 	.word	0x0800c7c0
 8001118:	0800c7c8 	.word	0x0800c7c8
 800111c:	24000200 	.word	0x24000200

08001120 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	b25a      	sxtb	r2, r3
 8001136:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	b25b      	sxtb	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b25b      	sxtb	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	2004      	movs	r0, #4
 800114a:	f7ff fdd5 	bl	8000cf8 <NRF24_write_register>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001160:	237f      	movs	r3, #127	@ 0x7f
 8001162:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4293      	cmp	r3, r2
 800116a:	bf28      	it	cs
 800116c:	4613      	movcs	r3, r2
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	2005      	movs	r0, #5
 8001174:	f7ff fdc0 	bl	8000cf8 <NRF24_write_register>
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800118a:	2320      	movs	r3, #32
 800118c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4293      	cmp	r3, r2
 8001194:	bf28      	it	cs
 8001196:	4613      	movcs	r3, r2
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <NRF24_setPayloadSize+0x2c>)
 800119c:	701a      	strb	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	24000200 	.word	0x24000200

080011b0 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	return payload_size;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <NRF24_getPayloadSize+0x14>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	24000200 	.word	0x24000200

080011c8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80011cc:	2060      	movs	r0, #96	@ 0x60
 80011ce:	f7ff fd43 	bl	8000c58 <NRF24_read_register>
 80011d2:	4603      	mov	r3, r0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80011dc:	201d      	movs	r0, #29
 80011de:	f7ff fd3b 	bl	8000c58 <NRF24_read_register>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f043 0306 	orr.w	r3, r3, #6
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4619      	mov	r1, r3
 80011ec:	201d      	movs	r0, #29
 80011ee:	f7ff fd83 	bl	8000cf8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80011f2:	201d      	movs	r0, #29
 80011f4:	f7ff fd30 	bl	8000c58 <NRF24_read_register>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80011fe:	f000 f991 	bl	8001524 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001202:	201d      	movs	r0, #29
 8001204:	f7ff fd28 	bl	8000c58 <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	f043 0306 	orr.w	r3, r3, #6
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4619      	mov	r1, r3
 8001212:	201d      	movs	r0, #29
 8001214:	f7ff fd70 	bl	8000cf8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001218:	201c      	movs	r0, #28
 800121a:	f7ff fd1d 	bl	8000c58 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f043 0303 	orr.w	r3, r3, #3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4619      	mov	r1, r3
 8001228:	201c      	movs	r0, #28
 800122a:	f7ff fd65 	bl	8000cf8 <NRF24_write_register>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001238:	201d      	movs	r0, #29
 800123a:	f7ff fd0d 	bl	8000c58 <NRF24_read_register>
 800123e:	4603      	mov	r3, r0
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4619      	mov	r1, r3
 8001248:	201d      	movs	r0, #29
 800124a:	f7ff fd55 	bl	8000cf8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800124e:	201d      	movs	r0, #29
 8001250:	f7ff fd02 	bl	8000c58 <NRF24_read_register>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10c      	bne.n	8001274 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800125a:	f000 f963 	bl	8001524 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800125e:	201d      	movs	r0, #29
 8001260:	f7ff fcfa 	bl	8000c58 <NRF24_read_register>
 8001264:	4603      	mov	r3, r0
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4619      	mov	r1, r3
 800126e:	201d      	movs	r0, #29
 8001270:	f7ff fd42 	bl	8000cf8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001274:	201c      	movs	r0, #28
 8001276:	f7ff fcef 	bl	8000c58 <NRF24_read_register>
 800127a:	4603      	mov	r3, r0
 800127c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	201c      	movs	r0, #28
 8001286:	f7ff fd37 	bl	8000cf8 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800128a:	4b02      	ldr	r3, [pc, #8]	@ (8001294 <NRF24_enableDynamicPayloads+0x60>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
	
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	24000201 	.word	0x24000201

08001298 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800129c:	201d      	movs	r0, #29
 800129e:	f7ff fcdb 	bl	8000c58 <NRF24_read_register>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	201d      	movs	r0, #29
 80012ae:	f7ff fd23 	bl	8000cf8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80012b2:	2100      	movs	r1, #0
 80012b4:	201c      	movs	r0, #28
 80012b6:	f7ff fd1f 	bl	8000cf8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80012ba:	4b02      	ldr	r3, [pc, #8]	@ (80012c4 <NRF24_disableDynamicPayloads+0x2c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	24000201 	.word	0x24000201

080012c8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80012d8:	213f      	movs	r1, #63	@ 0x3f
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fd0c 	bl	8000cf8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80012e0:	e003      	b.n	80012ea <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fd07 	bl	8000cf8 <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012fc:	2006      	movs	r0, #6
 80012fe:	f7ff fcab 	bl	8000c58 <NRF24_read_register>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	f023 0306 	bic.w	r3, r3, #6
 800130c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d104      	bne.n	800131e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	f043 0306 	orr.w	r3, r3, #6
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e019      	b.n	8001352 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d104      	bne.n	800132e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e011      	b.n	8001352 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d104      	bne.n	800133e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e009      	b.n	8001352 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d103      	bne.n	8001352 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	f043 0306 	orr.w	r3, r3, #6
 8001350:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	4619      	mov	r1, r3
 8001356:	2006      	movs	r0, #6
 8001358:	f7ff fcce 	bl	8000cf8 <NRF24_write_register>
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001372:	2006      	movs	r0, #6
 8001374:	f7ff fc70 	bl	8000c58 <NRF24_read_register>
 8001378:	4603      	mov	r3, r0
 800137a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <NRF24_setDataRate+0x88>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001388:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d107      	bne.n	80013a0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <NRF24_setDataRate+0x88>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	e00d      	b.n	80013bc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d107      	bne.n	80013b6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <NRF24_setDataRate+0x88>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	73bb      	strb	r3, [r7, #14]
 80013b4:	e002      	b.n	80013bc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <NRF24_setDataRate+0x88>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	4619      	mov	r1, r3
 80013c0:	2006      	movs	r0, #6
 80013c2:	f7ff fc99 	bl	8000cf8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80013c6:	2006      	movs	r0, #6
 80013c8:	f7ff fc46 	bl	8000c58 <NRF24_read_register>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d102      	bne.n	80013dc <NRF24_setDataRate+0x78>
  {
    result = true;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e002      	b.n	80013e2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <NRF24_setDataRate+0x88>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	24000202 	.word	0x24000202

080013f0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fc2c 	bl	8000c58 <NRF24_read_register>
 8001400:	4603      	mov	r3, r0
 8001402:	f023 030c 	bic.w	r3, r3, #12
 8001406:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00f      	beq.n	800142e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d104      	bne.n	800141e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e007      	b.n	800142e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	4619      	mov	r1, r3
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fc60 	bl	8000cf8 <NRF24_write_register>
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fc07 	bl	8000c58 <NRF24_read_register>
 800144a:	4603      	mov	r3, r0
 800144c:	f023 0302 	bic.w	r3, r3, #2
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4619      	mov	r1, r3
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fc4f 	bl	8000cf8 <NRF24_write_register>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001466:	f7ff fcd1 	bl	8000e0c <NRF24_get_status>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf14      	ite	ne
 8001478:	2301      	movne	r3, #1
 800147a:	2300      	moveq	r3, #0
 800147c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d017      	beq.n	80014b4 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	b2da      	uxtb	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800149a:	2140      	movs	r1, #64	@ 0x40
 800149c:	2007      	movs	r0, #7
 800149e:	f7ff fc2b 	bl	8000cf8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80014ac:	2120      	movs	r1, #32
 80014ae:	2007      	movs	r0, #7
 80014b0:	f7ff fc22 	bl	8000cf8 <NRF24_write_register>
    }
  }
  return result;
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	6039      	str	r1, [r7, #0]
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	4613      	mov	r3, r2
 80014cc:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80014d2:	2320      	movs	r3, #32
 80014d4:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 80014d6:	7afa      	ldrb	r2, [r7, #11]
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	4293      	cmp	r3, r2
 80014dc:	bf28      	it	cs
 80014de:	4613      	movcs	r3, r2
 80014e0:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fb78 	bl	8000bd8 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	f063 0357 	orn	r3, r3, #87	@ 0x57
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	7aba      	ldrb	r2, [r7, #10]
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc1c 	bl	8000d3c <NRF24_write_registerN>
  NRF24_csn(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff fb67 	bl	8000bd8 <NRF24_csn>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001516:	2170      	movs	r1, #112	@ 0x70
 8001518:	2007      	movs	r0, #7
 800151a:	f7ff fbed 	bl	8000cf8 <NRF24_write_register>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fb54 	bl	8000bd8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001530:	2350      	movs	r3, #80	@ 0x50
 8001532:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001534:	2373      	movs	r3, #115	@ 0x73
 8001536:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001538:	1d39      	adds	r1, r7, #4
 800153a:	2364      	movs	r3, #100	@ 0x64
 800153c:	2202      	movs	r2, #2
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <NRF24_ACTIVATE_cmd+0x30>)
 8001540:	f004 fd24 	bl	8005f8c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fb47 	bl	8000bd8 <NRF24_csn>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2400020c 	.word	0x2400020c

08001558 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b0a1      	sub	sp, #132	@ 0x84
 800155c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	49c3      	ldr	r1, [pc, #780]	@ (8001870 <printRadioSettings+0x318>)
 8001564:	4618      	mov	r0, r3
 8001566:	f007 fadb 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff06 	bl	8000380 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	48bd      	ldr	r0, [pc, #756]	@ (8001874 <printRadioSettings+0x31c>)
 8001580:	f005 fa9d 	bl	8006abe <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fb67 	bl	8000c58 <NRF24_read_register>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val & (1 << 3))
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800159c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <printRadioSettings+0x5e>
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	49b2      	ldr	r1, [pc, #712]	@ (8001878 <printRadioSettings+0x320>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f007 fab6 	bl	8008b20 <siprintf>
 80015b4:	e00c      	b.n	80015d0 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	49b0      	ldr	r1, [pc, #704]	@ (800187c <printRadioSettings+0x324>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f007 faaf 	bl	8008b20 <siprintf>
 80015c2:	e005      	b.n	80015d0 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	49ad      	ldr	r1, [pc, #692]	@ (8001880 <printRadioSettings+0x328>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 faa8 	bl	8008b20 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fed3 	bl	8000380 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f107 0108 	add.w	r1, r7, #8
 80015e2:	230a      	movs	r3, #10
 80015e4:	48a3      	ldr	r0, [pc, #652]	@ (8001874 <printRadioSettings+0x31c>)
 80015e6:	f005 fa6a 	bl	8006abe <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fb34 	bl	8000c58 <NRF24_read_register>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80015fa:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bfcc      	ite	gt
 8001602:	2301      	movgt	r3, #1
 8001604:	2300      	movle	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800160a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800160e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001612:	2b00      	cmp	r3, #0
 8001614:	bfcc      	ite	gt
 8001616:	2301      	movgt	r3, #1
 8001618:	2300      	movle	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001622:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001626:	2b00      	cmp	r3, #0
 8001628:	bfcc      	ite	gt
 800162a:	2301      	movgt	r3, #1
 800162c:	2300      	movle	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001632:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001636:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800163a:	2b00      	cmp	r3, #0
 800163c:	bfcc      	ite	gt
 800163e:	2301      	movgt	r3, #1
 8001640:	2300      	movle	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001646:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800164a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164e:	2b00      	cmp	r3, #0
 8001650:	bfcc      	ite	gt
 8001652:	2301      	movgt	r3, #1
 8001654:	2300      	movle	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800165a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800165e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001662:	2b00      	cmp	r3, #0
 8001664:	bfcc      	ite	gt
 8001666:	2301      	movgt	r3, #1
 8001668:	2300      	movle	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f107 0008 	add.w	r0, r7, #8
 8001670:	9303      	str	r3, [sp, #12]
 8001672:	9402      	str	r4, [sp, #8]
 8001674:	9101      	str	r1, [sp, #4]
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	4633      	mov	r3, r6
 800167a:	462a      	mov	r2, r5
 800167c:	4981      	ldr	r1, [pc, #516]	@ (8001884 <printRadioSettings+0x32c>)
 800167e:	f007 fa4f 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fe7a 	bl	8000380 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 0108 	add.w	r1, r7, #8
 8001694:	230a      	movs	r3, #10
 8001696:	4877      	ldr	r0, [pc, #476]	@ (8001874 <printRadioSettings+0x31c>)
 8001698:	f005 fa11 	bl	8006abe <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff fadb 	bl	8000c58 <NRF24_read_register>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016ac:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bfcc      	ite	gt
 80016b4:	2301      	movgt	r3, #1
 80016b6:	2300      	movle	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016c0:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bfcc      	ite	gt
 80016c8:	2301      	movgt	r3, #1
 80016ca:	2300      	movle	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016d0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bfcc      	ite	gt
 80016dc:	2301      	movgt	r3, #1
 80016de:	2300      	movle	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bfcc      	ite	gt
 80016f0:	2301      	movgt	r3, #1
 80016f2:	2300      	movle	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001700:	2b00      	cmp	r3, #0
 8001702:	bfcc      	ite	gt
 8001704:	2301      	movgt	r3, #1
 8001706:	2300      	movle	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800170c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001710:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001714:	2b00      	cmp	r3, #0
 8001716:	bfcc      	ite	gt
 8001718:	2301      	movgt	r3, #1
 800171a:	2300      	movle	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f107 0008 	add.w	r0, r7, #8
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	9402      	str	r4, [sp, #8]
 8001726:	9101      	str	r1, [sp, #4]
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	4633      	mov	r3, r6
 800172c:	462a      	mov	r2, r5
 800172e:	4956      	ldr	r1, [pc, #344]	@ (8001888 <printRadioSettings+0x330>)
 8001730:	f007 f9f6 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe21 	bl	8000380 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	f107 0108 	add.w	r1, r7, #8
 8001746:	230a      	movs	r3, #10
 8001748:	484a      	ldr	r0, [pc, #296]	@ (8001874 <printRadioSettings+0x31c>)
 800174a:	f005 f9b8 	bl	8006abe <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800174e:	2003      	movs	r0, #3
 8001750:	f7ff fa82 	bl	8000c58 <NRF24_read_register>
 8001754:	4603      	mov	r3, r0
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val +=2;
 800175e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001762:	3302      	adds	r3, #2
 8001764:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001768:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4946      	ldr	r1, [pc, #280]	@ (800188c <printRadioSettings+0x334>)
 8001772:	4618      	mov	r0, r3
 8001774:	f007 f9d4 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fdff 	bl	8000380 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	f107 0108 	add.w	r1, r7, #8
 800178a:	230a      	movs	r3, #10
 800178c:	4839      	ldr	r0, [pc, #228]	@ (8001874 <printRadioSettings+0x31c>)
 800178e:	f005 f996 	bl	8006abe <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001792:	2005      	movs	r0, #5
 8001794:	f7ff fa60 	bl	8000c58 <NRF24_read_register>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800179e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80017a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4939      	ldr	r1, [pc, #228]	@ (8001890 <printRadioSettings+0x338>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f007 f9b7 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fde2 	bl	8000380 <strlen>
 80017bc:	4603      	mov	r3, r0
 80017be:	b29a      	uxth	r2, r3
 80017c0:	f107 0108 	add.w	r1, r7, #8
 80017c4:	230a      	movs	r3, #10
 80017c6:	482b      	ldr	r0, [pc, #172]	@ (8001874 <printRadioSettings+0x31c>)
 80017c8:	f005 f979 	bl	8006abe <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80017cc:	2006      	movs	r0, #6
 80017ce:	f7ff fa43 	bl	8000c58 <NRF24_read_register>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80017d8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <printRadioSettings+0x29a>
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	492a      	ldr	r1, [pc, #168]	@ (8001894 <printRadioSettings+0x33c>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f007 f998 	bl	8008b20 <siprintf>
 80017f0:	e005      	b.n	80017fe <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4928      	ldr	r1, [pc, #160]	@ (8001898 <printRadioSettings+0x340>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f007 f991 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fdbc 	bl	8000380 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	f107 0108 	add.w	r1, r7, #8
 8001810:	230a      	movs	r3, #10
 8001812:	4818      	ldr	r0, [pc, #96]	@ (8001874 <printRadioSettings+0x31c>)
 8001814:	f005 f953 	bl	8006abe <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001818:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800181c:	f003 0306 	and.w	r3, r3, #6
 8001820:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val = (reg8Val>>1);
 8001824:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800182e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <printRadioSettings+0x2ec>
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4918      	ldr	r1, [pc, #96]	@ (800189c <printRadioSettings+0x344>)
 800183c:	4618      	mov	r0, r3
 800183e:	f007 f96f 	bl	8008b20 <siprintf>
 8001842:	e03b      	b.n	80018bc <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001844:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <printRadioSettings+0x302>
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	4913      	ldr	r1, [pc, #76]	@ (80018a0 <printRadioSettings+0x348>)
 8001852:	4618      	mov	r0, r3
 8001854:	f007 f964 	bl	8008b20 <siprintf>
 8001858:	e030      	b.n	80018bc <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800185e:	2b02      	cmp	r3, #2
 8001860:	d122      	bne.n	80018a8 <printRadioSettings+0x350>
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	490f      	ldr	r1, [pc, #60]	@ (80018a4 <printRadioSettings+0x34c>)
 8001868:	4618      	mov	r0, r3
 800186a:	f007 f959 	bl	8008b20 <siprintf>
 800186e:	e025      	b.n	80018bc <printRadioSettings+0x364>
 8001870:	0800c230 	.word	0x0800c230
 8001874:	24000294 	.word	0x24000294
 8001878:	0800c264 	.word	0x0800c264
 800187c:	0800c280 	.word	0x0800c280
 8001880:	0800c29c 	.word	0x0800c29c
 8001884:	0800c2b0 	.word	0x0800c2b0
 8001888:	0800c2f4 	.word	0x0800c2f4
 800188c:	0800c340 	.word	0x0800c340
 8001890:	0800c35c 	.word	0x0800c35c
 8001894:	0800c370 	.word	0x0800c370
 8001898:	0800c388 	.word	0x0800c388
 800189c:	0800c3a0 	.word	0x0800c3a0
 80018a0:	0800c3b4 	.word	0x0800c3b4
 80018a4:	0800c3c8 	.word	0x0800c3c8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80018a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d105      	bne.n	80018bc <printRadioSettings+0x364>
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	49d7      	ldr	r1, [pc, #860]	@ (8001c14 <printRadioSettings+0x6bc>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f007 f932 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fd5d 	bl	8000380 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f107 0108 	add.w	r1, r7, #8
 80018ce:	230a      	movs	r3, #10
 80018d0:	48d1      	ldr	r0, [pc, #836]	@ (8001c18 <printRadioSettings+0x6c0>)
 80018d2:	f005 f8f4 	bl	8006abe <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80018d6:	463b      	mov	r3, r7
 80018d8:	2205      	movs	r2, #5
 80018da:	4619      	mov	r1, r3
 80018dc:	200a      	movs	r0, #10
 80018de:	f7ff f9e3 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018e2:	793b      	ldrb	r3, [r7, #4]
 80018e4:	461c      	mov	r4, r3
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	461d      	mov	r5, r3
 80018ea:	78bb      	ldrb	r3, [r7, #2]
 80018ec:	787a      	ldrb	r2, [r7, #1]
 80018ee:	7839      	ldrb	r1, [r7, #0]
 80018f0:	f107 0008 	add.w	r0, r7, #8
 80018f4:	9102      	str	r1, [sp, #8]
 80018f6:	9201      	str	r2, [sp, #4]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	462b      	mov	r3, r5
 80018fc:	4622      	mov	r2, r4
 80018fe:	49c7      	ldr	r1, [pc, #796]	@ (8001c1c <printRadioSettings+0x6c4>)
 8001900:	f007 f90e 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fd39 	bl	8000380 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	48bf      	ldr	r0, [pc, #764]	@ (8001c18 <printRadioSettings+0x6c0>)
 800191a:	f005 f8d0 	bl	8006abe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800191e:	463b      	mov	r3, r7
 8001920:	2205      	movs	r2, #5
 8001922:	4619      	mov	r1, r3
 8001924:	200b      	movs	r0, #11
 8001926:	f7ff f9bf 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800192a:	793b      	ldrb	r3, [r7, #4]
 800192c:	461c      	mov	r4, r3
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	461d      	mov	r5, r3
 8001932:	78bb      	ldrb	r3, [r7, #2]
 8001934:	787a      	ldrb	r2, [r7, #1]
 8001936:	7839      	ldrb	r1, [r7, #0]
 8001938:	f107 0008 	add.w	r0, r7, #8
 800193c:	9102      	str	r1, [sp, #8]
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	462b      	mov	r3, r5
 8001944:	4622      	mov	r2, r4
 8001946:	49b6      	ldr	r1, [pc, #728]	@ (8001c20 <printRadioSettings+0x6c8>)
 8001948:	f007 f8ea 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd15 	bl	8000380 <strlen>
 8001956:	4603      	mov	r3, r0
 8001958:	b29a      	uxth	r2, r3
 800195a:	f107 0108 	add.w	r1, r7, #8
 800195e:	230a      	movs	r3, #10
 8001960:	48ad      	ldr	r0, [pc, #692]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001962:	f005 f8ac 	bl	8006abe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001966:	463b      	mov	r3, r7
 8001968:	2201      	movs	r2, #1
 800196a:	4619      	mov	r1, r3
 800196c:	200c      	movs	r0, #12
 800196e:	f7ff f99b 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001972:	783b      	ldrb	r3, [r7, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	49aa      	ldr	r1, [pc, #680]	@ (8001c24 <printRadioSettings+0x6cc>)
 800197c:	4618      	mov	r0, r3
 800197e:	f007 f8cf 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fcfa 	bl	8000380 <strlen>
 800198c:	4603      	mov	r3, r0
 800198e:	b29a      	uxth	r2, r3
 8001990:	f107 0108 	add.w	r1, r7, #8
 8001994:	230a      	movs	r3, #10
 8001996:	48a0      	ldr	r0, [pc, #640]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001998:	f005 f891 	bl	8006abe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800199c:	463b      	mov	r3, r7
 800199e:	2201      	movs	r2, #1
 80019a0:	4619      	mov	r1, r3
 80019a2:	200d      	movs	r0, #13
 80019a4:	f7ff f980 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019a8:	783b      	ldrb	r3, [r7, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	499d      	ldr	r1, [pc, #628]	@ (8001c28 <printRadioSettings+0x6d0>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f007 f8b4 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fcdf 	bl	8000380 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f107 0108 	add.w	r1, r7, #8
 80019ca:	230a      	movs	r3, #10
 80019cc:	4892      	ldr	r0, [pc, #584]	@ (8001c18 <printRadioSettings+0x6c0>)
 80019ce:	f005 f876 	bl	8006abe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80019d2:	463b      	mov	r3, r7
 80019d4:	2201      	movs	r2, #1
 80019d6:	4619      	mov	r1, r3
 80019d8:	200e      	movs	r0, #14
 80019da:	f7ff f965 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019de:	783b      	ldrb	r3, [r7, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4991      	ldr	r1, [pc, #580]	@ (8001c2c <printRadioSettings+0x6d4>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f007 f899 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fcc4 	bl	8000380 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	230a      	movs	r3, #10
 8001a02:	4885      	ldr	r0, [pc, #532]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001a04:	f005 f85b 	bl	8006abe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f7ff f94a 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001a14:	783b      	ldrb	r3, [r7, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4984      	ldr	r1, [pc, #528]	@ (8001c30 <printRadioSettings+0x6d8>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f007 f87e 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fca9 	bl	8000380 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f107 0108 	add.w	r1, r7, #8
 8001a36:	230a      	movs	r3, #10
 8001a38:	4877      	ldr	r0, [pc, #476]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001a3a:	f005 f840 	bl	8006abe <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2205      	movs	r2, #5
 8001a42:	4619      	mov	r1, r3
 8001a44:	2010      	movs	r0, #16
 8001a46:	f7ff f92f 	bl	8000ca8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001a4a:	793b      	ldrb	r3, [r7, #4]
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	461d      	mov	r5, r3
 8001a52:	78bb      	ldrb	r3, [r7, #2]
 8001a54:	787a      	ldrb	r2, [r7, #1]
 8001a56:	7839      	ldrb	r1, [r7, #0]
 8001a58:	f107 0008 	add.w	r0, r7, #8
 8001a5c:	9102      	str	r1, [sp, #8]
 8001a5e:	9201      	str	r2, [sp, #4]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	462b      	mov	r3, r5
 8001a64:	4622      	mov	r2, r4
 8001a66:	4973      	ldr	r1, [pc, #460]	@ (8001c34 <printRadioSettings+0x6dc>)
 8001a68:	f007 f85a 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fc85 	bl	8000380 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f107 0108 	add.w	r1, r7, #8
 8001a7e:	230a      	movs	r3, #10
 8001a80:	4865      	ldr	r0, [pc, #404]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001a82:	f005 f81c 	bl	8006abe <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a86:	2011      	movs	r0, #17
 8001a88:	f7ff f8e6 	bl	8000c58 <NRF24_read_register>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a92:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4966      	ldr	r1, [pc, #408]	@ (8001c38 <printRadioSettings+0x6e0>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f007 f83d 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fc68 	bl	8000380 <strlen>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f107 0108 	add.w	r1, r7, #8
 8001ab8:	230a      	movs	r3, #10
 8001aba:	4857      	ldr	r0, [pc, #348]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001abc:	f004 ffff 	bl	8006abe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001ac0:	2012      	movs	r0, #18
 8001ac2:	f7ff f8c9 	bl	8000c58 <NRF24_read_register>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001acc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ad0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	4958      	ldr	r1, [pc, #352]	@ (8001c3c <printRadioSettings+0x6e4>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f007 f820 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fc4b 	bl	8000380 <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	f107 0108 	add.w	r1, r7, #8
 8001af2:	230a      	movs	r3, #10
 8001af4:	4848      	ldr	r0, [pc, #288]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001af6:	f004 ffe2 	bl	8006abe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001afa:	2013      	movs	r0, #19
 8001afc:	f7ff f8ac 	bl	8000c58 <NRF24_read_register>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	494b      	ldr	r1, [pc, #300]	@ (8001c40 <printRadioSettings+0x6e8>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f007 f803 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc2e 	bl	8000380 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f107 0108 	add.w	r1, r7, #8
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	483a      	ldr	r0, [pc, #232]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001b30:	f004 ffc5 	bl	8006abe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001b34:	2014      	movs	r0, #20
 8001b36:	f7ff f88f 	bl	8000c58 <NRF24_read_register>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b40:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b44:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	493d      	ldr	r1, [pc, #244]	@ (8001c44 <printRadioSettings+0x6ec>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f006 ffe6 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fc11 	bl	8000380 <strlen>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f107 0108 	add.w	r1, r7, #8
 8001b66:	230a      	movs	r3, #10
 8001b68:	482b      	ldr	r0, [pc, #172]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001b6a:	f004 ffa8 	bl	8006abe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001b6e:	2015      	movs	r0, #21
 8001b70:	f7ff f872 	bl	8000c58 <NRF24_read_register>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b7a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	4930      	ldr	r1, [pc, #192]	@ (8001c48 <printRadioSettings+0x6f0>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f006 ffc9 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fbf4 	bl	8000380 <strlen>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f107 0108 	add.w	r1, r7, #8
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	481d      	ldr	r0, [pc, #116]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001ba4:	f004 ff8b 	bl	8006abe <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001ba8:	2016      	movs	r0, #22
 8001baa:	f7ff f855 	bl	8000c58 <NRF24_read_register>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001bb4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001bb8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	4922      	ldr	r1, [pc, #136]	@ (8001c4c <printRadioSettings+0x6f4>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 ffac 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fbd7 	bl	8000380 <strlen>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f107 0108 	add.w	r1, r7, #8
 8001bda:	230a      	movs	r3, #10
 8001bdc:	480e      	ldr	r0, [pc, #56]	@ (8001c18 <printRadioSettings+0x6c0>)
 8001bde:	f004 ff6e 	bl	8006abe <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001be2:	201c      	movs	r0, #28
 8001be4:	f7ff f838 	bl	8000c58 <NRF24_read_register>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001bf2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bfcc      	ite	gt
 8001bfa:	2301      	movgt	r3, #1
 8001bfc:	2300      	movle	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c02:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c06:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bfcc      	ite	gt
 8001c0e:	2301      	movgt	r3, #1
 8001c10:	2300      	movle	r3, #0
 8001c12:	e01d      	b.n	8001c50 <printRadioSettings+0x6f8>
 8001c14:	0800c3dc 	.word	0x0800c3dc
 8001c18:	24000294 	.word	0x24000294
 8001c1c:	0800c3f0 	.word	0x0800c3f0
 8001c20:	0800c420 	.word	0x0800c420
 8001c24:	0800c450 	.word	0x0800c450
 8001c28:	0800c478 	.word	0x0800c478
 8001c2c:	0800c4a0 	.word	0x0800c4a0
 8001c30:	0800c4c8 	.word	0x0800c4c8
 8001c34:	0800c4f0 	.word	0x0800c4f0
 8001c38:	0800c51c 	.word	0x0800c51c
 8001c3c:	0800c538 	.word	0x0800c538
 8001c40:	0800c554 	.word	0x0800c554
 8001c44:	0800c570 	.word	0x0800c570
 8001c48:	0800c58c 	.word	0x0800c58c
 8001c4c:	0800c5a8 	.word	0x0800c5a8
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c58:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bfcc      	ite	gt
 8001c60:	2301      	movgt	r3, #1
 8001c62:	2300      	movle	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c68:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c6c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bfcc      	ite	gt
 8001c74:	2301      	movgt	r3, #1
 8001c76:	2300      	movle	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c7c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c80:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bfcc      	ite	gt
 8001c88:	2301      	movgt	r3, #1
 8001c8a:	2300      	movle	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c90:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001c94:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bfcc      	ite	gt
 8001c9c:	2301      	movgt	r3, #1
 8001c9e:	2300      	movle	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f107 0008 	add.w	r0, r7, #8
 8001ca6:	9303      	str	r3, [sp, #12]
 8001ca8:	9402      	str	r4, [sp, #8]
 8001caa:	9101      	str	r1, [sp, #4]
 8001cac:	9200      	str	r2, [sp, #0]
 8001cae:	4633      	mov	r3, r6
 8001cb0:	462a      	mov	r2, r5
 8001cb2:	4936      	ldr	r1, [pc, #216]	@ (8001d8c <printRadioSettings+0x834>)
 8001cb4:	f006 ff34 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fb5f 	bl	8000380 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 0108 	add.w	r1, r7, #8
 8001cca:	230a      	movs	r3, #10
 8001ccc:	4830      	ldr	r0, [pc, #192]	@ (8001d90 <printRadioSettings+0x838>)
 8001cce:	f004 fef6 	bl	8006abe <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001cd2:	201d      	movs	r0, #29
 8001cd4:	f7fe ffc0 	bl	8000c58 <NRF24_read_register>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001cde:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <printRadioSettings+0x7a0>
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	4929      	ldr	r1, [pc, #164]	@ (8001d94 <printRadioSettings+0x83c>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f006 ff15 	bl	8008b20 <siprintf>
 8001cf6:	e005      	b.n	8001d04 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	4926      	ldr	r1, [pc, #152]	@ (8001d98 <printRadioSettings+0x840>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f006 ff0e 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fb39 	bl	8000380 <strlen>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f107 0108 	add.w	r1, r7, #8
 8001d16:	230a      	movs	r3, #10
 8001d18:	481d      	ldr	r0, [pc, #116]	@ (8001d90 <printRadioSettings+0x838>)
 8001d1a:	f004 fed0 	bl	8006abe <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001d1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <printRadioSettings+0x7e0>
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	491b      	ldr	r1, [pc, #108]	@ (8001d9c <printRadioSettings+0x844>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f006 fef5 	bl	8008b20 <siprintf>
 8001d36:	e005      	b.n	8001d44 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	4918      	ldr	r1, [pc, #96]	@ (8001da0 <printRadioSettings+0x848>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f006 feee 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb19 	bl	8000380 <strlen>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	f107 0108 	add.w	r1, r7, #8
 8001d56:	230a      	movs	r3, #10
 8001d58:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <printRadioSettings+0x838>)
 8001d5a:	f004 feb0 	bl	8006abe <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4910      	ldr	r1, [pc, #64]	@ (8001da4 <printRadioSettings+0x84c>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f006 fedb 	bl	8008b20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fb06 	bl	8000380 <strlen>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <printRadioSettings+0x838>)
 8001d80:	f004 fe9d 	bl	8006abe <HAL_UART_Transmit>
}
 8001d84:	bf00      	nop
 8001d86:	3774      	adds	r7, #116	@ 0x74
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8c:	0800c5c4 	.word	0x0800c5c4
 8001d90:	24000294 	.word	0x24000294
 8001d94:	0800c610 	.word	0x0800c610
 8001d98:	0800c628 	.word	0x0800c628
 8001d9c:	0800c640 	.word	0x0800c640
 8001da0:	0800c65c 	.word	0x0800c65c
 8001da4:	0800c230 	.word	0x0800c230

08001da8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001da8:	b084      	sub	sp, #16
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	f107 0c08 	add.w	ip, r7, #8
 8001db2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <nrf24_DebugUART_Init+0x2c>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	2294      	movs	r2, #148	@ 0x94
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f006 ff90 	bl	8008ce6 <memcpy>
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dce:	b004      	add	sp, #16
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	24000294 	.word	0x24000294

08001dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b0c1      	sub	sp, #260	@ 0x104
 8001ddc:	af22      	add	r7, sp, #136	@ 0x88
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001dde:	f000 fadf 	bl	80023a0 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001de6:	677b      	str	r3, [r7, #116]	@ 0x74
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001de8:	bf00      	nop
 8001dea:	4b6b      	ldr	r3, [pc, #428]	@ (8001f98 <main+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <main+0x28>
 8001df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df8:	1e5a      	subs	r2, r3, #1
 8001dfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dcf4      	bgt.n	8001dea <main+0x12>
  if ( timeout < 0 )
 8001e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	da01      	bge.n	8001e0a <main+0x32>
  {
  Error_Handler();
 8001e06:	f000 faf7 	bl	80023f8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e0a:	f000 fd19 	bl	8002840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0e:	f000 f8cf 	bl	8001fb0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e12:	f000 f97f 	bl	8002114 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001e16:	4b60      	ldr	r3, [pc, #384]	@ (8001f98 <main+0x1c0>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1c:	4a5e      	ldr	r2, [pc, #376]	@ (8001f98 <main+0x1c0>)
 8001e1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e26:	4b5c      	ldr	r3, [pc, #368]	@ (8001f98 <main+0x1c0>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f001 f8eb 	bl	8003010 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f001 f901 	bl	8003044 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001e42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e46:	677b      	str	r3, [r7, #116]	@ 0x74
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001e48:	bf00      	nop
 8001e4a:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <main+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <main+0x88>
 8001e56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	dcf4      	bgt.n	8001e4a <main+0x72>
if ( timeout < 0 )
 8001e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	da01      	bge.n	8001e6a <main+0x92>
{
Error_Handler();
 8001e66:	f000 fac7 	bl	80023f8 <Error_Handler>
//  const uint64_t pipe_address = 0x11223344AALL;
//  char myRxData[50];
//  char myTxData[50] = "MANGOS_2";
//  char myAckPayload[32] = "Ack by STMF7!";
//
  uint64_t pipe_address = 0x11223344AALL;
 8001e6a:	a349      	add	r3, pc, #292	@ (adr r3, 8001f90 <main+0x1b8>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  char myRxData[50];
  uint8_t buffer[6];
  char myAckPayload[32] = "Ack by STMF7!";
 8001e74:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <main+0x1c4>)
 8001e76:	f107 0408 	add.w	r4, r7, #8
 8001e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e7c:	c407      	stmia	r4!, {r0, r1, r2}
 8001e7e:	8023      	strh	r3, [r4, #0]
 8001e80:	f107 0316 	add.w	r3, r7, #22
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	821a      	strh	r2, [r3, #16]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e90:	f000 fa00 	bl	8002294 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001e94:	f000 f9b2 	bl	80021fc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001e98:	f000 f95a 	bl	8002150 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //SPI
  NRF24_begin(GPIOC, GPIO_PIN_6, GPIO_PIN_7, hspi1); // Ajusta según tu configuración de pines
 8001e9c:	4c40      	ldr	r4, [pc, #256]	@ (8001fa0 <main+0x1c8>)
 8001e9e:	4668      	mov	r0, sp
 8001ea0:	1d23      	adds	r3, r4, #4
 8001ea2:	2284      	movs	r2, #132	@ 0x84
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f006 ff1e 	bl	8008ce6 <memcpy>
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	2280      	movs	r2, #128	@ 0x80
 8001eae:	2140      	movs	r1, #64	@ 0x40
 8001eb0:	483c      	ldr	r0, [pc, #240]	@ (8001fa4 <main+0x1cc>)
 8001eb2:	f7fe ffb9 	bl	8000e28 <NRF24_begin>
//  NRF24_setAutoAck(false);
//  NRF24_setChannel(52); // Canal de RF, asegúrate que coincida con el Arduino
//  NRF24_setDataRate(RF24_2MBPS); // Velocidad de datos, debe coincidir con el Arduino
//  NRF24_startListening(); // Comienza a escuchar
//  NRF24_begin(GPIOC, GPIO_PIN_7, GPIO_PIN_6, hspi5); // Ajusta según tu configuración de pines
	nrf24_DebugUART_Init(huart3);
 8001eb6:	4c3c      	ldr	r4, [pc, #240]	@ (8001fa8 <main+0x1d0>)
 8001eb8:	4668      	mov	r0, sp
 8001eba:	f104 0310 	add.w	r3, r4, #16
 8001ebe:	2284      	movs	r2, #132	@ 0x84
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f006 ff10 	bl	8008ce6 <memcpy>
 8001ec6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001eca:	f7ff ff6d 	bl	8001da8 <nrf24_DebugUART_Init>
	NRF24_openReadingPipe(1, pipe_address); // Abre el pipe 1 con la dirección configurada
 8001ece:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff f8d6 	bl	8001084 <NRF24_openReadingPipe>
	NRF24_setAutoAck(false);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff f9f5 	bl	80012c8 <NRF24_setAutoAck>
	NRF24_setChannel(52); // Canal de RF, asegúrate que coincida con el Arduino
 8001ede:	2034      	movs	r0, #52	@ 0x34
 8001ee0:	f7ff f939 	bl	8001156 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	f7ff f94b 	bl	8001180 <NRF24_setPayloadSize>
	NRF24_setDataRate(RF24_2MBPS); // Velocidad de datos, debe coincidir con el Arduino
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7ff fa3a 	bl	8001364 <NRF24_setDataRate>
	NRF24_enableDynamicPayloads();
 8001ef0:	f7ff f9a0 	bl	8001234 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8001ef4:	f7ff f970 	bl	80011d8 <NRF24_enableAckPayload>
	NRF24_startListening(); // Comienza a escuchar
 8001ef8:	f7ff f876 	bl	8000fe8 <NRF24_startListening>
	printRadioSettings();
 8001efc:	f7ff fb2c 	bl	8001558 <printRadioSettings>
//		  NRF24_write(myTxData, 32);
//		  HAL_Delay(100);
//		}
//	  	  printf("TEST\n\r");

	  	  if(NRF24_available())
 8001f00:	f7ff f898 	bl	8001034 <NRF24_available>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0fa      	beq.n	8001f00 <main+0x128>
	  	  {
			NRF24_read(buffer, 6);
 8001f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f0e:	2106      	movs	r1, #6
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f897 	bl	8001044 <NRF24_read>

			if(buffer[0] == 0xFF && buffer[1] == 0xFF){
 8001f16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f1a:	2bff      	cmp	r3, #255	@ 0xff
 8001f1c:	d103      	bne.n	8001f26 <main+0x14e>
 8001f1e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001f22:	2bff      	cmp	r3, #255	@ 0xff
 8001f24:	d029      	beq.n	8001f7a <main+0x1a2>
//				printf("Coordinates not found\r\n");
			}
			else{
				x = (buffer[0]<<8|buffer[1]);
 8001f26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				y = (buffer[2]<<8|buffer[3]);
 8001f3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b25a      	sxtb	r2, r3
 8001f44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
				a = (buffer[4]<<8|buffer[5]);
 8001f52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
//				snprintf(myRxData, 32, "%u %u %u \r\n", (buffer[0]<<8|buffer[1]), (buffer[2]<<8|buffer[3]), (buffer[4]<<8|buffer[5]));
				printf("x = %u, y = %u, a = %u \r\n", x,y,a);
 8001f68:	f897 1067 	ldrb.w	r1, [r7, #103]	@ 0x67
 8001f6c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8001f70:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001f74:	480d      	ldr	r0, [pc, #52]	@ (8001fac <main+0x1d4>)
 8001f76:	f006 fdc1 	bl	8008afc <iprintf>

			}
//			printf("test");
			NRF24_writeAckPayload(1, myAckPayload, 32);
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	2220      	movs	r2, #32
 8001f80:	4619      	mov	r1, r3
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff fa9b 	bl	80014be <NRF24_writeAckPayload>
	  	  if(NRF24_available())
 8001f88:	e7ba      	b.n	8001f00 <main+0x128>
 8001f8a:	bf00      	nop
 8001f8c:	f3af 8000 	nop.w
 8001f90:	223344aa 	.word	0x223344aa
 8001f94:	00000011 	.word	0x00000011
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	0800c790 	.word	0x0800c790
 8001fa0:	24000328 	.word	0x24000328
 8001fa4:	58020800 	.word	0x58020800
 8001fa8:	240003b0 	.word	0x240003b0
 8001fac:	0800c774 	.word	0x0800c774

08001fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b09e      	sub	sp, #120	@ 0x78
 8001fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fba:	224c      	movs	r2, #76	@ 0x4c
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f006 fe11 	bl	8008be6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	2220      	movs	r2, #32
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f006 fe0a 	bl	8008be6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	f001 f84a 	bl	800306c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8002108 <SystemClock_Config+0x158>)
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	4a49      	ldr	r2, [pc, #292]	@ (8002108 <SystemClock_Config+0x158>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001fe8:	4b47      	ldr	r3, [pc, #284]	@ (8002108 <SystemClock_Config+0x158>)
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b46      	ldr	r3, [pc, #280]	@ (800210c <SystemClock_Config+0x15c>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	4a45      	ldr	r2, [pc, #276]	@ (800210c <SystemClock_Config+0x15c>)
 8001ff8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ffc:	6193      	str	r3, [r2, #24]
 8001ffe:	4b43      	ldr	r3, [pc, #268]	@ (800210c <SystemClock_Config+0x15c>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800200a:	bf00      	nop
 800200c:	4b3f      	ldr	r3, [pc, #252]	@ (800210c <SystemClock_Config+0x15c>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002018:	d1f8      	bne.n	800200c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <SystemClock_Config+0x160>)
 800201c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002020:	4a3b      	ldr	r2, [pc, #236]	@ (8002110 <SystemClock_Config+0x160>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800202a:	4b39      	ldr	r3, [pc, #228]	@ (8002110 <SystemClock_Config+0x160>)
 800202c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002038:	2300      	movs	r3, #0
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4b33      	ldr	r3, [pc, #204]	@ (800210c <SystemClock_Config+0x15c>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a32      	ldr	r2, [pc, #200]	@ (800210c <SystemClock_Config+0x15c>)
 8002042:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b30      	ldr	r3, [pc, #192]	@ (800210c <SystemClock_Config+0x15c>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4b2d      	ldr	r3, [pc, #180]	@ (8002108 <SystemClock_Config+0x158>)
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	4a2c      	ldr	r2, [pc, #176]	@ (8002108 <SystemClock_Config+0x158>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800205e:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <SystemClock_Config+0x158>)
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800206a:	bf00      	nop
 800206c:	4b27      	ldr	r3, [pc, #156]	@ (800210c <SystemClock_Config+0x15c>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002078:	d1f8      	bne.n	800206c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800207a:	2303      	movs	r3, #3
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800207e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002084:	2301      	movs	r3, #1
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002088:	2340      	movs	r3, #64	@ 0x40
 800208a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800208c:	2302      	movs	r3, #2
 800208e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002090:	2302      	movs	r3, #2
 8002092:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002094:	2302      	movs	r3, #2
 8002096:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8002098:	23f0      	movs	r3, #240	@ 0xf0
 800209a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800209c:	2302      	movs	r3, #2
 800209e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020a0:	2302      	movs	r3, #2
 80020a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020a4:	2302      	movs	r3, #2
 80020a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80020a8:	2308      	movs	r3, #8
 80020aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 f831 	bl	8003120 <HAL_RCC_OscConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80020c4:	f000 f998 	bl	80023f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c8:	233f      	movs	r3, #63	@ 0x3f
 80020ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020cc:	2303      	movs	r3, #3
 80020ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80020d4:	2308      	movs	r3, #8
 80020d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020d8:	2340      	movs	r3, #64	@ 0x40
 80020da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020dc:	2340      	movs	r3, #64	@ 0x40
 80020de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020e6:	2340      	movs	r3, #64	@ 0x40
 80020e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	2104      	movs	r1, #4
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fc6f 	bl	80039d4 <HAL_RCC_ClockConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <SystemClock_Config+0x150>
  {
    Error_Handler();
 80020fc:	f000 f97c 	bl	80023f8 <Error_Handler>
  }
}
 8002100:	bf00      	nop
 8002102:	3778      	adds	r7, #120	@ 0x78
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	58000400 	.word	0x58000400
 800210c:	58024800 	.word	0x58024800
 8002110:	58024400 	.word	0x58024400

08002114 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0b0      	sub	sp, #192	@ 0xc0
 8002118:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800211a:	463b      	mov	r3, r7
 800211c:	22c0      	movs	r2, #192	@ 0xc0
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f006 fd60 	bl	8008be6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8002126:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002132:	2300      	movs	r3, #0
 8002134:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002136:	463b      	mov	r3, r7
 8002138:	4618      	mov	r0, r3
 800213a:	f001 ffd7 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8002144:	f000 f958 	bl	80023f8 <Error_Handler>
  }
}
 8002148:	bf00      	nop
 800214a:	37c0      	adds	r7, #192	@ 0xc0
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002154:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 8002156:	4a28      	ldr	r2, [pc, #160]	@ (80021f8 <MX_SPI1_Init+0xa8>)
 8002158:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800215a:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 800215c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002160:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002162:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002168:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 800216a:	2207      	movs	r2, #7
 800216c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002174:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 8002176:	2200      	movs	r2, #0
 8002178:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800217a:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 800217c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002180:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 8002184:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002188:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800218a:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002190:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002196:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 8002198:	2200      	movs	r2, #0
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80021b0:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021b6:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021bc:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021d4:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021e0:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <MX_SPI1_Init+0xa4>)
 80021e2:	f003 fdaf 	bl	8005d44 <HAL_SPI_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80021ec:	f000 f904 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	24000328 	.word	0x24000328
 80021f8:	40013000 	.word	0x40013000

080021fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002200:	4b22      	ldr	r3, [pc, #136]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002202:	4a23      	ldr	r2, [pc, #140]	@ (8002290 <MX_USART3_UART_Init+0x94>)
 8002204:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002208:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800220c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800221a:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <MX_USART3_UART_Init+0x90>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b19      	ldr	r3, [pc, #100]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b17      	ldr	r3, [pc, #92]	@ (800228c <MX_USART3_UART_Init+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <MX_USART3_UART_Init+0x90>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223e:	4b13      	ldr	r3, [pc, #76]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002244:	4811      	ldr	r0, [pc, #68]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002246:	f004 fbea 	bl	8006a1e <HAL_UART_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002250:	f000 f8d2 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002254:	2100      	movs	r1, #0
 8002256:	480d      	ldr	r0, [pc, #52]	@ (800228c <MX_USART3_UART_Init+0x90>)
 8002258:	f005 fc81 	bl	8007b5e <HAL_UARTEx_SetTxFifoThreshold>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002262:	f000 f8c9 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002266:	2100      	movs	r1, #0
 8002268:	4808      	ldr	r0, [pc, #32]	@ (800228c <MX_USART3_UART_Init+0x90>)
 800226a:	f005 fcb6 	bl	8007bda <HAL_UARTEx_SetRxFifoThreshold>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002274:	f000 f8c0 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	@ (800228c <MX_USART3_UART_Init+0x90>)
 800227a:	f005 fc37 	bl	8007aec <HAL_UARTEx_DisableFifoMode>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002284:	f000 f8b8 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	240003b0 	.word	0x240003b0
 8002290:	40004800 	.word	0x40004800

08002294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b0:	4a38      	ldr	r2, [pc, #224]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ba:	4b36      	ldr	r3, [pc, #216]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ce:	4a31      	ldr	r2, [pc, #196]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ec:	4a29      	ldr	r2, [pc, #164]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f6:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <MX_GPIO_Init+0x100>)
 80022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002304:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <MX_GPIO_Init+0x100>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230a:	4a22      	ldr	r2, [pc, #136]	@ (8002394 <MX_GPIO_Init+0x100>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002314:	4b1f      	ldr	r3, [pc, #124]	@ (8002394 <MX_GPIO_Init+0x100>)
 8002316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f244 0101 	movw	r1, #16385	@ 0x4001
 8002328:	481b      	ldr	r0, [pc, #108]	@ (8002398 <MX_GPIO_Init+0x104>)
 800232a:	f000 fe57 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	21c0      	movs	r1, #192	@ 0xc0
 8002332:	481a      	ldr	r0, [pc, #104]	@ (800239c <MX_GPIO_Init+0x108>)
 8002334:	f000 fe52 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002338:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800233c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	4813      	ldr	r0, [pc, #76]	@ (800239c <MX_GPIO_Init+0x108>)
 800234e:	f000 fc95 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8002352:	f244 0301 	movw	r3, #16385	@ 0x4001
 8002356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	480b      	ldr	r0, [pc, #44]	@ (8002398 <MX_GPIO_Init+0x104>)
 800236c:	f000 fc86 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 8002370:	23c0      	movs	r3, #192	@ 0xc0
 8002372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4805      	ldr	r0, [pc, #20]	@ (800239c <MX_GPIO_Init+0x108>)
 8002388:	f000 fc78 	bl	8002c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	@ 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	58024400 	.word	0x58024400
 8002398:	58020400 	.word	0x58020400
 800239c:	58020800 	.word	0x58020800

080023a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80023a6:	463b      	mov	r3, r7
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80023b2:	f000 fbeb 	bl	8002b8c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80023c2:	231f      	movs	r3, #31
 80023c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80023c6:	2387      	movs	r3, #135	@ 0x87
 80023c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80023ce:	2300      	movs	r3, #0
 80023d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023e2:	463b      	mov	r3, r7
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fc09 	bl	8002bfc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023ea:	2004      	movs	r0, #4
 80023ec:	f000 fbe6 	bl	8002bbc <HAL_MPU_Enable>

}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023fc:	b672      	cpsid	i
}
 80023fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <Error_Handler+0x8>

08002404 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800240c:	1d39      	adds	r1, r7, #4
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	2201      	movs	r2, #1
 8002414:	4803      	ldr	r0, [pc, #12]	@ (8002424 <__io_putchar+0x20>)
 8002416:	f004 fb52 	bl	8006abe <HAL_UART_Transmit>
  return ch;
 800241a:	687b      	ldr	r3, [r7, #4]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	240003b0 	.word	0x240003b0

08002428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_MspInit+0x30>)
 8002430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002434:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_MspInit+0x30>)
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_MspInit+0x30>)
 8002440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	58024400 	.word	0x58024400

0800245c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0ba      	sub	sp, #232	@ 0xe8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	22c0      	movs	r2, #192	@ 0xc0
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f006 fbb2 	bl	8008be6 <memset>
  if(hspi->Instance==SPI1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a26      	ldr	r2, [pc, #152]	@ (8002520 <HAL_SPI_MspInit+0xc4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d145      	bne.n	8002518 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800248c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002498:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800249c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 fe22 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80024ae:	f7ff ffa3 	bl	80023f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <HAL_SPI_MspInit+0xc8>)
 80024b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <HAL_SPI_MspInit+0xc8>)
 80024ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_SPI_MspInit+0xc8>)
 80024c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <HAL_SPI_MspInit+0xc8>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <HAL_SPI_MspInit+0xc8>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024e0:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <HAL_SPI_MspInit+0xc8>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024ee:	23e0      	movs	r3, #224	@ 0xe0
 80024f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002506:	2305      	movs	r3, #5
 8002508:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002510:	4619      	mov	r1, r3
 8002512:	4805      	ldr	r0, [pc, #20]	@ (8002528 <HAL_SPI_MspInit+0xcc>)
 8002514:	f000 fbb2 	bl	8002c7c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002518:	bf00      	nop
 800251a:	37e8      	adds	r7, #232	@ 0xe8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40013000 	.word	0x40013000
 8002524:	58024400 	.word	0x58024400
 8002528:	58020000 	.word	0x58020000

0800252c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0ba      	sub	sp, #232	@ 0xe8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	22c0      	movs	r2, #192	@ 0xc0
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f006 fb4a 	bl	8008be6 <memset>
  if(huart->Instance==USART3)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a27      	ldr	r2, [pc, #156]	@ (80025f4 <HAL_UART_MspInit+0xc8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d146      	bne.n	80025ea <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800255c:	f04f 0202 	mov.w	r2, #2
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800256e:	f107 0310 	add.w	r3, r7, #16
 8002572:	4618      	mov	r0, r3
 8002574:	f001 fdba 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800257e:	f7ff ff3b 	bl	80023f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002582:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <HAL_UART_MspInit+0xcc>)
 8002584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002588:	4a1b      	ldr	r2, [pc, #108]	@ (80025f8 <HAL_UART_MspInit+0xcc>)
 800258a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800258e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002592:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <HAL_UART_MspInit+0xcc>)
 8002594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002598:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a0:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_UART_MspInit+0xcc>)
 80025a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a6:	4a14      	ldr	r2, [pc, #80]	@ (80025f8 <HAL_UART_MspInit+0xcc>)
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b0:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_UART_MspInit+0xcc>)
 80025b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80025be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d8:	2307      	movs	r3, #7
 80025da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	@ (80025fc <HAL_UART_MspInit+0xd0>)
 80025e6:	f000 fb49 	bl	8002c7c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80025ea:	bf00      	nop
 80025ec:	37e8      	adds	r7, #232	@ 0xe8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40004800 	.word	0x40004800
 80025f8:	58024400 	.word	0x58024400
 80025fc:	58020c00 	.word	0x58020c00

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <NMI_Handler+0x4>

08002608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <HardFault_Handler+0x4>

08002610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <MemManage_Handler+0x4>

08002618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <BusFault_Handler+0x4>

08002620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <UsageFault_Handler+0x4>

08002628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002656:	f000 f965 	bl	8002924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}

0800265e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  return 1;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_kill>:

int _kill(int pid, int sig)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002678:	f006 fb08 	bl	8008c8c <__errno>
 800267c:	4603      	mov	r3, r0
 800267e:	2216      	movs	r2, #22
 8002680:	601a      	str	r2, [r3, #0]
  return -1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_exit>:

void _exit (int status)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002696:	f04f 31ff 	mov.w	r1, #4294967295
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffe7 	bl	800266e <_kill>
  while (1) {}    /* Make sure we hang here */
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <_exit+0x12>

080026a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e00a      	b.n	80026cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b6:	f3af 8000 	nop.w
 80026ba:	4601      	mov	r1, r0
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	60ba      	str	r2, [r7, #8]
 80026c2:	b2ca      	uxtb	r2, r1
 80026c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3301      	adds	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	dbf0      	blt.n	80026b6 <_read+0x12>
  }

  return len;
 80026d4:	687b      	ldr	r3, [r7, #4]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e009      	b.n	8002704 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	60ba      	str	r2, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fe83 	bl	8002404 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	dbf1      	blt.n	80026f0 <_write+0x12>
  }
  return len;
 800270c:	687b      	ldr	r3, [r7, #4]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <_close>:

int _close(int file)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800273e:	605a      	str	r2, [r3, #4]
  return 0;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <_isatty>:

int _isatty(int file)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <_sbrk+0x5c>)
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <_sbrk+0x60>)
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <_sbrk+0x64>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <_sbrk+0x64>)
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <_sbrk+0x68>)
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d207      	bcs.n	80027c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b0:	f006 fa6c 	bl	8008c8c <__errno>
 80027b4:	4603      	mov	r3, r0
 80027b6:	220c      	movs	r2, #12
 80027b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	e009      	b.n	80027d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c0:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	4a05      	ldr	r2, [pc, #20]	@ (80027e4 <_sbrk+0x64>)
 80027d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d2:	68fb      	ldr	r3, [r7, #12]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	24080000 	.word	0x24080000
 80027e0:	00000400 	.word	0x00000400
 80027e4:	24000444 	.word	0x24000444
 80027e8:	24000598 	.word	0x24000598

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002824 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027f0:	f7fe f93a 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f4:	480c      	ldr	r0, [pc, #48]	@ (8002828 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027f6:	490d      	ldr	r1, [pc, #52]	@ (800282c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002830 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027fc:	e002      	b.n	8002804 <LoopCopyDataInit>

080027fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002802:	3304      	adds	r3, #4

08002804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002808:	d3f9      	bcc.n	80027fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280a:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800280c:	4c0a      	ldr	r4, [pc, #40]	@ (8002838 <LoopFillZerobss+0x22>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002810:	e001      	b.n	8002816 <LoopFillZerobss>

08002812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002814:	3204      	adds	r2, #4

08002816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002818:	d3fb      	bcc.n	8002812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800281a:	f006 fa3d 	bl	8008c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7ff fadb 	bl	8001dd8 <main>
  bx  lr
 8002822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002824:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002828:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800282c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8002830:	0800cc38 	.word	0x0800cc38
  ldr r2, =_sbss
 8002834:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002838:	24000598 	.word	0x24000598

0800283c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC3_IRQHandler>
	...

08002840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002846:	2003      	movs	r0, #3
 8002848:	f000 f96e 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800284c:	f001 fa78 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_Init+0x68>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	4913      	ldr	r1, [pc, #76]	@ (80028ac <HAL_Init+0x6c>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800286a:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <HAL_Init+0x68>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	4a0e      	ldr	r2, [pc, #56]	@ (80028ac <HAL_Init+0x6c>)
 8002874:	5cd3      	ldrb	r3, [r2, r3]
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	4a0b      	ldr	r2, [pc, #44]	@ (80028b0 <HAL_Init+0x70>)
 8002882:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002884:	4a0b      	ldr	r2, [pc, #44]	@ (80028b4 <HAL_Init+0x74>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800288a:	200f      	movs	r0, #15
 800288c:	f000 f814 	bl	80028b8 <HAL_InitTick>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e002      	b.n	80028a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800289a:	f7ff fdc5 	bl	8002428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	58024400 	.word	0x58024400
 80028ac:	0800c7b0 	.word	0x0800c7b0
 80028b0:	24000004 	.word	0x24000004
 80028b4:	24000000 	.word	0x24000000

080028b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028c0:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_InitTick+0x60>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e021      	b.n	8002910 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <HAL_InitTick+0x64>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_InitTick+0x60>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028da:	fbb3 f3f1 	udiv	r3, r3, r1
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f945 	bl	8002b72 <HAL_SYSTICK_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00e      	b.n	8002910 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b0f      	cmp	r3, #15
 80028f6:	d80a      	bhi.n	800290e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f8:	2200      	movs	r2, #0
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	f000 f91d 	bl	8002b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002904:	4a06      	ldr	r2, [pc, #24]	@ (8002920 <HAL_InitTick+0x68>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2400000c 	.word	0x2400000c
 800291c:	24000000 	.word	0x24000000
 8002920:	24000008 	.word	0x24000008

08002924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_IncTick+0x20>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_IncTick+0x24>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4413      	add	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <HAL_IncTick+0x24>)
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	2400000c 	.word	0x2400000c
 8002948:	24000448 	.word	0x24000448

0800294c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return uwTick;
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <HAL_GetTick+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	24000448 	.word	0x24000448

08002964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7ff ffee 	bl	800294c <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d005      	beq.n	800298a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_Delay+0x44>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800298a:	bf00      	nop
 800298c:	f7ff ffde 	bl	800294c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	429a      	cmp	r2, r3
 800299a:	d8f7      	bhi.n	800298c <HAL_Delay+0x28>
  {
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2400000c 	.word	0x2400000c

080029ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <HAL_GetREVID+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0c1b      	lsrs	r3, r3, #16
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	5c001000 	.word	0x5c001000

080029c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x40>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029e0:	4013      	ands	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029ec:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x40>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00
 8002a08:	05fa0000 	.word	0x05fa0000

08002a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <__NVIC_GetPriorityGrouping+0x18>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	@ (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	@ (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	@ 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
         );
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	@ 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af4:	d301      	bcc.n	8002afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00f      	b.n	8002b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afa:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <SysTick_Config+0x40>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b02:	210f      	movs	r1, #15
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f7ff ff8e 	bl	8002a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b0c:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <SysTick_Config+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <SysTick_Config+0x40>)
 8002b14:	2207      	movs	r2, #7
 8002b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff47 	bl	80029c4 <__NVIC_SetPriorityGrouping>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4c:	f7ff ff5e 	bl	8002a0c <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff90 	bl	8002a7c <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5f 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffb2 	bl	8002ae4 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b90:	f3bf 8f5f 	dmb	sy
}
 8002b94:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <HAL_MPU_Disable+0x28>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	4a06      	ldr	r2, [pc, #24]	@ (8002bb4 <HAL_MPU_Disable+0x28>)
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_MPU_Disable+0x2c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	605a      	str	r2, [r3, #4]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00
 8002bb8:	e000ed90 	.word	0xe000ed90

08002bbc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf4 <HAL_MPU_Enable+0x38>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bce:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <HAL_MPU_Enable+0x3c>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	4a09      	ldr	r2, [pc, #36]	@ (8002bf8 <HAL_MPU_Enable+0x3c>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bda:	f3bf 8f4f 	dsb	sy
}
 8002bde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002be0:	f3bf 8f6f 	isb	sy
}
 8002be4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed90 	.word	0xe000ed90
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	785a      	ldrb	r2, [r3, #1]
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_MPU_ConfigRegion+0x7c>)
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <HAL_MPU_ConfigRegion+0x7c>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4a19      	ldr	r2, [pc, #100]	@ (8002c78 <HAL_MPU_ConfigRegion+0x7c>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c18:	4a17      	ldr	r2, [pc, #92]	@ (8002c78 <HAL_MPU_ConfigRegion+0x7c>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7b1b      	ldrb	r3, [r3, #12]
 8002c24:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7adb      	ldrb	r3, [r3, #11]
 8002c2a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7a9b      	ldrb	r3, [r3, #10]
 8002c32:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7b5b      	ldrb	r3, [r3, #13]
 8002c3a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7b9b      	ldrb	r3, [r3, #14]
 8002c42:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7bdb      	ldrb	r3, [r3, #15]
 8002c4a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7a5b      	ldrb	r3, [r3, #9]
 8002c52:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7a1b      	ldrb	r3, [r3, #8]
 8002c5a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c5c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c64:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c66:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c68:	6113      	str	r3, [r2, #16]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000ed90 	.word	0xe000ed90

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c8a:	4b89      	ldr	r3, [pc, #548]	@ (8002eb0 <HAL_GPIO_Init+0x234>)
 8002c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c8e:	e194      	b.n	8002fba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8186 	beq.w	8002fb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d005      	beq.n	8002cc0 <HAL_GPIO_Init+0x44>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d130      	bne.n	8002d22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 0201 	and.w	r2, r3, #1
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d017      	beq.n	8002d5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d123      	bne.n	8002db2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	08da      	lsrs	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	69b9      	ldr	r1, [r7, #24]
 8002dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0203 	and.w	r2, r3, #3
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80e0 	beq.w	8002fb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df4:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb4 <HAL_GPIO_Init+0x238>)
 8002df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb4 <HAL_GPIO_Init+0x238>)
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e04:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <HAL_GPIO_Init+0x238>)
 8002e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e12:	4a29      	ldr	r2, [pc, #164]	@ (8002eb8 <HAL_GPIO_Init+0x23c>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a20      	ldr	r2, [pc, #128]	@ (8002ebc <HAL_GPIO_Init+0x240>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d052      	beq.n	8002ee4 <HAL_GPIO_Init+0x268>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <HAL_GPIO_Init+0x244>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d031      	beq.n	8002eaa <HAL_GPIO_Init+0x22e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec4 <HAL_GPIO_Init+0x248>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02b      	beq.n	8002ea6 <HAL_GPIO_Init+0x22a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <HAL_GPIO_Init+0x24c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d025      	beq.n	8002ea2 <HAL_GPIO_Init+0x226>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1c      	ldr	r2, [pc, #112]	@ (8002ecc <HAL_GPIO_Init+0x250>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01f      	beq.n	8002e9e <HAL_GPIO_Init+0x222>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed0 <HAL_GPIO_Init+0x254>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d019      	beq.n	8002e9a <HAL_GPIO_Init+0x21e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed4 <HAL_GPIO_Init+0x258>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_GPIO_Init+0x21a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a19      	ldr	r2, [pc, #100]	@ (8002ed8 <HAL_GPIO_Init+0x25c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00d      	beq.n	8002e92 <HAL_GPIO_Init+0x216>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a18      	ldr	r2, [pc, #96]	@ (8002edc <HAL_GPIO_Init+0x260>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a17      	ldr	r2, [pc, #92]	@ (8002ee0 <HAL_GPIO_Init+0x264>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_GPIO_Init+0x20e>
 8002e86:	2309      	movs	r3, #9
 8002e88:	e02d      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	e02b      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002e8e:	2308      	movs	r3, #8
 8002e90:	e029      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002e92:	2307      	movs	r3, #7
 8002e94:	e027      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002e96:	2306      	movs	r3, #6
 8002e98:	e025      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	e023      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	e021      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e01f      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e01d      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e01b      	b.n	8002ee6 <HAL_GPIO_Init+0x26a>
 8002eae:	bf00      	nop
 8002eb0:	58000080 	.word	0x58000080
 8002eb4:	58024400 	.word	0x58024400
 8002eb8:	58000400 	.word	0x58000400
 8002ebc:	58020000 	.word	0x58020000
 8002ec0:	58020400 	.word	0x58020400
 8002ec4:	58020800 	.word	0x58020800
 8002ec8:	58020c00 	.word	0x58020c00
 8002ecc:	58021000 	.word	0x58021000
 8002ed0:	58021400 	.word	0x58021400
 8002ed4:	58021800 	.word	0x58021800
 8002ed8:	58021c00 	.word	0x58021c00
 8002edc:	58022000 	.word	0x58022000
 8002ee0:	58022400 	.word	0x58022400
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	f002 0203 	and.w	r2, r2, #3
 8002eec:	0092      	lsls	r2, r2, #2
 8002eee:	4093      	lsls	r3, r2
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef6:	4938      	ldr	r1, [pc, #224]	@ (8002fd8 <HAL_GPIO_Init+0x35c>)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	3302      	adds	r3, #2
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f47f ae63 	bne.w	8002c90 <HAL_GPIO_Init+0x14>
  }
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	3724      	adds	r7, #36	@ 0x24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	58000400 	.word	0x58000400

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003018:	4a08      	ldr	r2, [pc, #32]	@ (800303c <HAL_HSEM_FastTake+0x2c>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3320      	adds	r3, #32
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	4a07      	ldr	r2, [pc, #28]	@ (8003040 <HAL_HSEM_FastTake+0x30>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	58026400 	.word	0x58026400
 8003040:	80000300 	.word	0x80000300

08003044 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800304e:	4906      	ldr	r1, [pc, #24]	@ (8003068 <HAL_HSEM_Release+0x24>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	58026400 	.word	0x58026400

0800306c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003074:	4b29      	ldr	r3, [pc, #164]	@ (800311c <HAL_PWREx_ConfigSupply+0xb0>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	2b06      	cmp	r3, #6
 800307e:	d00a      	beq.n	8003096 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003080:	4b26      	ldr	r3, [pc, #152]	@ (800311c <HAL_PWREx_ConfigSupply+0xb0>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e040      	b.n	8003114 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e03e      	b.n	8003114 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003096:	4b21      	ldr	r3, [pc, #132]	@ (800311c <HAL_PWREx_ConfigSupply+0xb0>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800309e:	491f      	ldr	r1, [pc, #124]	@ (800311c <HAL_PWREx_ConfigSupply+0xb0>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80030a6:	f7ff fc51 	bl	800294c <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030ac:	e009      	b.n	80030c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030ae:	f7ff fc4d 	bl	800294c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030bc:	d901      	bls.n	80030c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e028      	b.n	8003114 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030c2:	4b16      	ldr	r3, [pc, #88]	@ (800311c <HAL_PWREx_ConfigSupply+0xb0>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ce:	d1ee      	bne.n	80030ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b1e      	cmp	r3, #30
 80030d4:	d008      	beq.n	80030e8 <HAL_PWREx_ConfigSupply+0x7c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80030da:	d005      	beq.n	80030e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b1d      	cmp	r3, #29
 80030e0:	d002      	beq.n	80030e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80030e6:	d114      	bne.n	8003112 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80030e8:	f7ff fc30 	bl	800294c <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030ee:	e009      	b.n	8003104 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030f0:	f7ff fc2c 	bl	800294c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030fe:	d901      	bls.n	8003104 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e007      	b.n	8003114 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_PWREx_ConfigSupply+0xb0>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003110:	d1ee      	bne.n	80030f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	58024800 	.word	0x58024800

08003120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	@ 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f000 bc48 	b.w	80039c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8088 	beq.w	8003252 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003142:	4b99      	ldr	r3, [pc, #612]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800314c:	4b96      	ldr	r3, [pc, #600]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 800314e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003154:	2b10      	cmp	r3, #16
 8003156:	d007      	beq.n	8003168 <HAL_RCC_OscConfig+0x48>
 8003158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315a:	2b18      	cmp	r3, #24
 800315c:	d111      	bne.n	8003182 <HAL_RCC_OscConfig+0x62>
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d10c      	bne.n	8003182 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	4b8f      	ldr	r3, [pc, #572]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d06d      	beq.n	8003250 <HAL_RCC_OscConfig+0x130>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d169      	bne.n	8003250 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f000 bc21 	b.w	80039c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x7a>
 800318c:	4b86      	ldr	r3, [pc, #536]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a85      	ldr	r2, [pc, #532]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	e02e      	b.n	80031f8 <HAL_RCC_OscConfig+0xd8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x9c>
 80031a2:	4b81      	ldr	r3, [pc, #516]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a80      	ldr	r2, [pc, #512]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4b7e      	ldr	r3, [pc, #504]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7d      	ldr	r2, [pc, #500]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e01d      	b.n	80031f8 <HAL_RCC_OscConfig+0xd8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0xc0>
 80031c6:	4b78      	ldr	r3, [pc, #480]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a77      	ldr	r2, [pc, #476]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b75      	ldr	r3, [pc, #468]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a74      	ldr	r2, [pc, #464]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xd8>
 80031e0:	4b71      	ldr	r3, [pc, #452]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a70      	ldr	r2, [pc, #448]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b6e      	ldr	r3, [pc, #440]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6d      	ldr	r2, [pc, #436]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7ff fba4 	bl	800294c <HAL_GetTick>
 8003204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7ff fba0 	bl	800294c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	@ 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e3d4      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800321a:	4b63      	ldr	r3, [pc, #396]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xe8>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7ff fb90 	bl	800294c <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003230:	f7ff fb8c 	bl	800294c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	@ 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e3c0      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003242:	4b59      	ldr	r3, [pc, #356]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x110>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80ca 	beq.w	80033f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003260:	4b51      	ldr	r3, [pc, #324]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003268:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800326a:	4b4f      	ldr	r3, [pc, #316]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_RCC_OscConfig+0x166>
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2b18      	cmp	r3, #24
 800327a:	d156      	bne.n	800332a <HAL_RCC_OscConfig+0x20a>
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d151      	bne.n	800332a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003286:	4b48      	ldr	r3, [pc, #288]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_RCC_OscConfig+0x17e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e392      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800329e:	4b42      	ldr	r3, [pc, #264]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0219 	bic.w	r2, r3, #25
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	493f      	ldr	r1, [pc, #252]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7ff fb4c 	bl	800294c <HAL_GetTick>
 80032b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b8:	f7ff fb48 	bl	800294c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e37c      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032ca:	4b37      	ldr	r3, [pc, #220]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d6:	f7ff fb69 	bl	80029ac <HAL_GetREVID>
 80032da:	4603      	mov	r3, r0
 80032dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d817      	bhi.n	8003314 <HAL_RCC_OscConfig+0x1f4>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b40      	cmp	r3, #64	@ 0x40
 80032ea:	d108      	bne.n	80032fe <HAL_RCC_OscConfig+0x1de>
 80032ec:	4b2e      	ldr	r3, [pc, #184]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80032f4:	4a2c      	ldr	r2, [pc, #176]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80032f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032fc:	e07a      	b.n	80033f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	031b      	lsls	r3, r3, #12
 800330c:	4926      	ldr	r1, [pc, #152]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003312:	e06f      	b.n	80033f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b24      	ldr	r3, [pc, #144]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	4921      	ldr	r1, [pc, #132]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003328:	e064      	b.n	80033f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d047      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003332:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 0219 	bic.w	r2, r3, #25
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	491a      	ldr	r1, [pc, #104]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7ff fb02 	bl	800294c <HAL_GetTick>
 8003348:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334c:	f7ff fafe 	bl	800294c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e332      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800335e:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	f7ff fb1f 	bl	80029ac <HAL_GetREVID>
 800336e:	4603      	mov	r3, r0
 8003370:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003374:	4293      	cmp	r3, r2
 8003376:	d819      	bhi.n	80033ac <HAL_RCC_OscConfig+0x28c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b40      	cmp	r3, #64	@ 0x40
 800337e:	d108      	bne.n	8003392 <HAL_RCC_OscConfig+0x272>
 8003380:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003388:	4a07      	ldr	r2, [pc, #28]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800338e:	6053      	str	r3, [r2, #4]
 8003390:	e030      	b.n	80033f4 <HAL_RCC_OscConfig+0x2d4>
 8003392:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	031b      	lsls	r3, r3, #12
 80033a0:	4901      	ldr	r1, [pc, #4]	@ (80033a8 <HAL_RCC_OscConfig+0x288>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
 80033a6:	e025      	b.n	80033f4 <HAL_RCC_OscConfig+0x2d4>
 80033a8:	58024400 	.word	0x58024400
 80033ac:	4b9a      	ldr	r3, [pc, #616]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	4997      	ldr	r1, [pc, #604]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	e018      	b.n	80033f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b95      	ldr	r3, [pc, #596]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a94      	ldr	r2, [pc, #592]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7ff fabd 	bl	800294c <HAL_GetTick>
 80033d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7ff fab9 	bl	800294c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e2ed      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033e8:	4b8b      	ldr	r3, [pc, #556]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80a9 	beq.w	8003554 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003402:	4b85      	ldr	r3, [pc, #532]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800340a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800340c:	4b82      	ldr	r3, [pc, #520]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800340e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003410:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d007      	beq.n	8003428 <HAL_RCC_OscConfig+0x308>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b18      	cmp	r3, #24
 800341c:	d13a      	bne.n	8003494 <HAL_RCC_OscConfig+0x374>
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d135      	bne.n	8003494 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003428:	4b7b      	ldr	r3, [pc, #492]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_OscConfig+0x320>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	2b80      	cmp	r3, #128	@ 0x80
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e2c1      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003440:	f7ff fab4 	bl	80029ac <HAL_GetREVID>
 8003444:	4603      	mov	r3, r0
 8003446:	f241 0203 	movw	r2, #4099	@ 0x1003
 800344a:	4293      	cmp	r3, r2
 800344c:	d817      	bhi.n	800347e <HAL_RCC_OscConfig+0x35e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	2b20      	cmp	r3, #32
 8003454:	d108      	bne.n	8003468 <HAL_RCC_OscConfig+0x348>
 8003456:	4b70      	ldr	r3, [pc, #448]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800345e:	4a6e      	ldr	r2, [pc, #440]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003460:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003464:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003466:	e075      	b.n	8003554 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003468:	4b6b      	ldr	r3, [pc, #428]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	069b      	lsls	r3, r3, #26
 8003476:	4968      	ldr	r1, [pc, #416]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800347c:	e06a      	b.n	8003554 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800347e:	4b66      	ldr	r3, [pc, #408]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	4962      	ldr	r1, [pc, #392]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800348e:	4313      	orrs	r3, r2
 8003490:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003492:	e05f      	b.n	8003554 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d042      	beq.n	8003522 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800349c:	4b5e      	ldr	r3, [pc, #376]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80034a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7ff fa50 	bl	800294c <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034b0:	f7ff fa4c 	bl	800294c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e280      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034c2:	4b55      	ldr	r3, [pc, #340]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ce:	f7ff fa6d 	bl	80029ac <HAL_GetREVID>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034d8:	4293      	cmp	r3, r2
 80034da:	d817      	bhi.n	800350c <HAL_RCC_OscConfig+0x3ec>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d108      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3d6>
 80034e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80034ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80034ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034f2:	6053      	str	r3, [r2, #4]
 80034f4:	e02e      	b.n	8003554 <HAL_RCC_OscConfig+0x434>
 80034f6:	4b48      	ldr	r3, [pc, #288]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	069b      	lsls	r3, r3, #26
 8003504:	4944      	ldr	r1, [pc, #272]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
 800350a:	e023      	b.n	8003554 <HAL_RCC_OscConfig+0x434>
 800350c:	4b42      	ldr	r3, [pc, #264]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	061b      	lsls	r3, r3, #24
 800351a:	493f      	ldr	r1, [pc, #252]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	60cb      	str	r3, [r1, #12]
 8003520:	e018      	b.n	8003554 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003522:	4b3d      	ldr	r3, [pc, #244]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3c      	ldr	r2, [pc, #240]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800352c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7ff fa0d 	bl	800294c <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003536:	f7ff fa09 	bl	800294c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e23d      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003548:	4b33      	ldr	r3, [pc, #204]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d036      	beq.n	80035ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d019      	beq.n	800359c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003568:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800356a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800356c:	4a2a      	ldr	r2, [pc, #168]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7ff f9ea 	bl	800294c <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357c:	f7ff f9e6 	bl	800294c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e21a      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800358e:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 8003590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x45c>
 800359a:	e018      	b.n	80035ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359c:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800359e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7ff f9d0 	bl	800294c <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b0:	f7ff f9cc 	bl	800294c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e200      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80035c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d039      	beq.n	800364e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01c      	beq.n	800361c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 80035e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ee:	f7ff f9ad 	bl	800294c <HAL_GetTick>
 80035f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f6:	f7ff f9a9 	bl	800294c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e1dd      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003608:	4b03      	ldr	r3, [pc, #12]	@ (8003618 <HAL_RCC_OscConfig+0x4f8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4d6>
 8003614:	e01b      	b.n	800364e <HAL_RCC_OscConfig+0x52e>
 8003616:	bf00      	nop
 8003618:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800361c:	4b9b      	ldr	r3, [pc, #620]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a9a      	ldr	r2, [pc, #616]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003626:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003628:	f7ff f990 	bl	800294c <HAL_GetTick>
 800362c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003630:	f7ff f98c 	bl	800294c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1c0      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003642:	4b92      	ldr	r3, [pc, #584]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8081 	beq.w	800375e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800365c:	4b8c      	ldr	r3, [pc, #560]	@ (8003890 <HAL_RCC_OscConfig+0x770>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a8b      	ldr	r2, [pc, #556]	@ (8003890 <HAL_RCC_OscConfig+0x770>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003668:	f7ff f970 	bl	800294c <HAL_GetTick>
 800366c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7ff f96c 	bl	800294c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e1a0      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003682:	4b83      	ldr	r3, [pc, #524]	@ (8003890 <HAL_RCC_OscConfig+0x770>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x584>
 8003696:	4b7d      	ldr	r3, [pc, #500]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	4a7c      	ldr	r2, [pc, #496]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a2:	e02d      	b.n	8003700 <HAL_RCC_OscConfig+0x5e0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCC_OscConfig+0x5a6>
 80036ac:	4b77      	ldr	r3, [pc, #476]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	4a76      	ldr	r2, [pc, #472]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b8:	4b74      	ldr	r3, [pc, #464]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036bc:	4a73      	ldr	r2, [pc, #460]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036be:	f023 0304 	bic.w	r3, r3, #4
 80036c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c4:	e01c      	b.n	8003700 <HAL_RCC_OscConfig+0x5e0>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x5c8>
 80036ce:	4b6f      	ldr	r3, [pc, #444]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	4a6e      	ldr	r2, [pc, #440]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036da:	4b6c      	ldr	r3, [pc, #432]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	4a6b      	ldr	r2, [pc, #428]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0x5e0>
 80036e8:	4b68      	ldr	r3, [pc, #416]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ec:	4a67      	ldr	r2, [pc, #412]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f4:	4b65      	ldr	r3, [pc, #404]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f8:	4a64      	ldr	r2, [pc, #400]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80036fa:	f023 0304 	bic.w	r3, r3, #4
 80036fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d015      	beq.n	8003734 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7ff f920 	bl	800294c <HAL_GetTick>
 800370c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800370e:	e00a      	b.n	8003726 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7ff f91c 	bl	800294c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e14e      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003726:	4b59      	ldr	r3, [pc, #356]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ee      	beq.n	8003710 <HAL_RCC_OscConfig+0x5f0>
 8003732:	e014      	b.n	800375e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7ff f90a 	bl	800294c <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7ff f906 	bl	800294c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e138      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003752:	4b4e      	ldr	r3, [pc, #312]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1ee      	bne.n	800373c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 812d 	beq.w	80039c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003768:	4b48      	ldr	r3, [pc, #288]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003770:	2b18      	cmp	r3, #24
 8003772:	f000 80bd 	beq.w	80038f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	2b02      	cmp	r3, #2
 800377c:	f040 809e 	bne.w	80038bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b42      	ldr	r3, [pc, #264]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a41      	ldr	r2, [pc, #260]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7ff f8de 	bl	800294c <HAL_GetTick>
 8003790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7ff f8da 	bl	800294c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e10e      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037a6:	4b39      	ldr	r3, [pc, #228]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b2:	4b36      	ldr	r3, [pc, #216]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80037b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037b6:	4b37      	ldr	r3, [pc, #220]	@ (8003894 <HAL_RCC_OscConfig+0x774>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037c2:	0112      	lsls	r2, r2, #4
 80037c4:	430a      	orrs	r2, r1
 80037c6:	4931      	ldr	r1, [pc, #196]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	3b01      	subs	r3, #1
 80037d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037da:	3b01      	subs	r3, #1
 80037dc:	025b      	lsls	r3, r3, #9
 80037de:	b29b      	uxth	r3, r3
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	3b01      	subs	r3, #1
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f4:	3b01      	subs	r3, #1
 80037f6:	061b      	lsls	r3, r3, #24
 80037f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80037fc:	4923      	ldr	r1, [pc, #140]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003802:	4b22      	ldr	r3, [pc, #136]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	4a21      	ldr	r2, [pc, #132]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800380e:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003812:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <HAL_RCC_OscConfig+0x778>)
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800381a:	00d2      	lsls	r2, r2, #3
 800381c:	491b      	ldr	r1, [pc, #108]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003822:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	f023 020c 	bic.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	4917      	ldr	r1, [pc, #92]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003830:	4313      	orrs	r3, r2
 8003832:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003834:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	f023 0202 	bic.w	r2, r3, #2
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003840:	4912      	ldr	r1, [pc, #72]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003846:	4b11      	ldr	r3, [pc, #68]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	4a10      	ldr	r2, [pc, #64]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003852:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003856:	4a0d      	ldr	r2, [pc, #52]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800385c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800385e:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800386a:	4b08      	ldr	r3, [pc, #32]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	4a07      	ldr	r2, [pc, #28]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003876:	4b05      	ldr	r3, [pc, #20]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a04      	ldr	r2, [pc, #16]	@ (800388c <HAL_RCC_OscConfig+0x76c>)
 800387c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7ff f863 	bl	800294c <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003888:	e011      	b.n	80038ae <HAL_RCC_OscConfig+0x78e>
 800388a:	bf00      	nop
 800388c:	58024400 	.word	0x58024400
 8003890:	58024800 	.word	0x58024800
 8003894:	fffffc0c 	.word	0xfffffc0c
 8003898:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7ff f856 	bl	800294c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e08a      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038ae:	4b47      	ldr	r3, [pc, #284]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x77c>
 80038ba:	e082      	b.n	80039c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b43      	ldr	r3, [pc, #268]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a42      	ldr	r2, [pc, #264]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7ff f840 	bl	800294c <HAL_GetTick>
 80038cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7ff f83c 	bl	800294c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e070      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038e2:	4b3a      	ldr	r3, [pc, #232]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x7b0>
 80038ee:	e068      	b.n	80039c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038f0:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038f6:	4b35      	ldr	r3, [pc, #212]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	2b01      	cmp	r3, #1
 8003902:	d031      	beq.n	8003968 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f003 0203 	and.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d12a      	bne.n	8003968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d122      	bne.n	8003968 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d11a      	bne.n	8003968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	0a5b      	lsrs	r3, r3, #9
 8003936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d111      	bne.n	8003968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	0c1b      	lsrs	r3, r3, #16
 8003948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003950:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d108      	bne.n	8003968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	0e1b      	lsrs	r3, r3, #24
 800395a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003962:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e02b      	b.n	80039c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800396c:	4b17      	ldr	r3, [pc, #92]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 800396e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003976:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d01f      	beq.n	80039c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003982:	4b12      	ldr	r3, [pc, #72]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	4a11      	ldr	r2, [pc, #68]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800398e:	f7fe ffdd 	bl	800294c <HAL_GetTick>
 8003992:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003994:	bf00      	nop
 8003996:	f7fe ffd9 	bl	800294c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	4293      	cmp	r3, r2
 80039a0:	d0f9      	beq.n	8003996 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80039a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a6:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <HAL_RCC_OscConfig+0x8b0>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80039ae:	00d2      	lsls	r2, r2, #3
 80039b0:	4906      	ldr	r1, [pc, #24]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	4a04      	ldr	r2, [pc, #16]	@ (80039cc <HAL_RCC_OscConfig+0x8ac>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3730      	adds	r7, #48	@ 0x30
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	58024400 	.word	0x58024400
 80039d0:	ffff0007 	.word	0xffff0007

080039d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e19c      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003c14 <HAL_RCC_ClockConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d910      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b87      	ldr	r3, [pc, #540]	@ (8003c14 <HAL_RCC_ClockConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 020f 	bic.w	r2, r3, #15
 80039fe:	4985      	ldr	r1, [pc, #532]	@ (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b83      	ldr	r3, [pc, #524]	@ (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e184      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	4b7b      	ldr	r3, [pc, #492]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d908      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a34:	4b78      	ldr	r3, [pc, #480]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	4975      	ldr	r1, [pc, #468]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	4b70      	ldr	r3, [pc, #448]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d908      	bls.n	8003a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a62:	4b6d      	ldr	r3, [pc, #436]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	496a      	ldr	r1, [pc, #424]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	4b64      	ldr	r3, [pc, #400]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d908      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a90:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	495e      	ldr	r1, [pc, #376]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	4b59      	ldr	r3, [pc, #356]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d908      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003abe:	4b56      	ldr	r3, [pc, #344]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4953      	ldr	r1, [pc, #332]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d010      	beq.n	8003afe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d908      	bls.n	8003afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b4a      	ldr	r3, [pc, #296]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f023 020f 	bic.w	r2, r3, #15
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4947      	ldr	r1, [pc, #284]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d055      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b0a:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4940      	ldr	r1, [pc, #256]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b24:	4b3c      	ldr	r3, [pc, #240]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d121      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0f6      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b3c:	4b36      	ldr	r3, [pc, #216]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d115      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0ea      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b54:	4b30      	ldr	r3, [pc, #192]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0de      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b64:	4b2c      	ldr	r3, [pc, #176]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0d6      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b74:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f023 0207 	bic.w	r2, r3, #7
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4925      	ldr	r1, [pc, #148]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b86:	f7fe fee1 	bl	800294c <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8e:	f7fe fedd 	bl	800294c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0be      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d1eb      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d010      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	4b14      	ldr	r3, [pc, #80]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d208      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd2:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f023 020f 	bic.w	r2, r3, #15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	490e      	ldr	r1, [pc, #56]	@ (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d214      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 020f 	bic.w	r2, r3, #15
 8003bfa:	4906      	ldr	r1, [pc, #24]	@ (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b04      	ldr	r3, [pc, #16]	@ (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e086      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
 8003c14:	52002000 	.word	0x52002000
 8003c18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d208      	bcs.n	8003c4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c38:	4b3c      	ldr	r3, [pc, #240]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	4939      	ldr	r1, [pc, #228]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	4b34      	ldr	r3, [pc, #208]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d208      	bcs.n	8003c78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c66:	4b31      	ldr	r3, [pc, #196]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	492e      	ldr	r1, [pc, #184]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d010      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	4b28      	ldr	r3, [pc, #160]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d208      	bcs.n	8003ca6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c94:	4b25      	ldr	r3, [pc, #148]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	4922      	ldr	r1, [pc, #136]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d010      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d208      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4917      	ldr	r1, [pc, #92]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cd4:	f000 f834 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b14      	ldr	r3, [pc, #80]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	4912      	ldr	r1, [pc, #72]	@ (8003d30 <HAL_RCC_ClockConfig+0x35c>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8003d30 <HAL_RCC_ClockConfig+0x35c>)
 8003cfc:	5cd3      	ldrb	r3, [r2, r3]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
 8003d08:	4a0a      	ldr	r2, [pc, #40]	@ (8003d34 <HAL_RCC_ClockConfig+0x360>)
 8003d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d38 <HAL_RCC_ClockConfig+0x364>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <HAL_RCC_ClockConfig+0x368>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fdce 	bl	80028b8 <HAL_InitTick>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	0800c7b0 	.word	0x0800c7b0
 8003d34:	24000004 	.word	0x24000004
 8003d38:	24000000 	.word	0x24000000
 8003d3c:	24000008 	.word	0x24000008

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	@ 0x24
 8003d44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d46:	4bb3      	ldr	r3, [pc, #716]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d4e:	2b18      	cmp	r3, #24
 8003d50:	f200 8155 	bhi.w	8003ffe <HAL_RCC_GetSysClockFreq+0x2be>
 8003d54:	a201      	add	r2, pc, #4	@ (adr r2, 8003d5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003dc1 	.word	0x08003dc1
 8003d60:	08003fff 	.word	0x08003fff
 8003d64:	08003fff 	.word	0x08003fff
 8003d68:	08003fff 	.word	0x08003fff
 8003d6c:	08003fff 	.word	0x08003fff
 8003d70:	08003fff 	.word	0x08003fff
 8003d74:	08003fff 	.word	0x08003fff
 8003d78:	08003fff 	.word	0x08003fff
 8003d7c:	08003de7 	.word	0x08003de7
 8003d80:	08003fff 	.word	0x08003fff
 8003d84:	08003fff 	.word	0x08003fff
 8003d88:	08003fff 	.word	0x08003fff
 8003d8c:	08003fff 	.word	0x08003fff
 8003d90:	08003fff 	.word	0x08003fff
 8003d94:	08003fff 	.word	0x08003fff
 8003d98:	08003fff 	.word	0x08003fff
 8003d9c:	08003ded 	.word	0x08003ded
 8003da0:	08003fff 	.word	0x08003fff
 8003da4:	08003fff 	.word	0x08003fff
 8003da8:	08003fff 	.word	0x08003fff
 8003dac:	08003fff 	.word	0x08003fff
 8003db0:	08003fff 	.word	0x08003fff
 8003db4:	08003fff 	.word	0x08003fff
 8003db8:	08003fff 	.word	0x08003fff
 8003dbc:	08003df3 	.word	0x08003df3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc0:	4b94      	ldr	r3, [pc, #592]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dcc:	4b91      	ldr	r3, [pc, #580]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	08db      	lsrs	r3, r3, #3
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	4a90      	ldr	r2, [pc, #576]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003dde:	e111      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003de0:	4b8d      	ldr	r3, [pc, #564]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003de2:	61bb      	str	r3, [r7, #24]
      break;
 8003de4:	e10e      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003de6:	4b8d      	ldr	r3, [pc, #564]	@ (800401c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003de8:	61bb      	str	r3, [r7, #24]
      break;
 8003dea:	e10b      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003dec:	4b8c      	ldr	r3, [pc, #560]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dee:	61bb      	str	r3, [r7, #24]
      break;
 8003df0:	e108      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003df2:	4b88      	ldr	r3, [pc, #544]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003dfc:	4b85      	ldr	r3, [pc, #532]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e08:	4b82      	ldr	r3, [pc, #520]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e12:	4b80      	ldr	r3, [pc, #512]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80e1 	beq.w	8003ff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f000 8083 	beq.w	8003f44 <HAL_RCC_GetSysClockFreq+0x204>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	f200 80a1 	bhi.w	8003f88 <HAL_RCC_GetSysClockFreq+0x248>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x114>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d056      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e52:	e099      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e54:	4b6f      	ldr	r3, [pc, #444]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02d      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e60:	4b6c      	ldr	r3, [pc, #432]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8a:	4b62      	ldr	r3, [pc, #392]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003eba:	e087      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004028 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ece:	4b51      	ldr	r3, [pc, #324]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ee2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003efe:	e065      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800402c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f12:	4b40      	ldr	r3, [pc, #256]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f42:	e043      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004030 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f56:	4b2f      	ldr	r3, [pc, #188]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f86:	e021      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800402c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	ee07 3a90 	vmov	s15, r3
 8003fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff0:	ee17 3a90 	vmov	r3, s15
 8003ff4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ff6:	e005      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
      break;
 8003ffc:	e002      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ffe:	4b07      	ldr	r3, [pc, #28]	@ (800401c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004000:	61bb      	str	r3, [r7, #24]
      break;
 8004002:	bf00      	nop
  }

  return sysclockfreq;
 8004004:	69bb      	ldr	r3, [r7, #24]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3724      	adds	r7, #36	@ 0x24
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	58024400 	.word	0x58024400
 8004018:	03d09000 	.word	0x03d09000
 800401c:	003d0900 	.word	0x003d0900
 8004020:	007a1200 	.word	0x007a1200
 8004024:	46000000 	.word	0x46000000
 8004028:	4c742400 	.word	0x4c742400
 800402c:	4a742400 	.word	0x4a742400
 8004030:	4af42400 	.word	0x4af42400

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800403a:	f7ff fe81 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 800403e:	4602      	mov	r2, r0
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_RCC_GetHCLKFreq+0x50>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	490f      	ldr	r1, [pc, #60]	@ (8004088 <HAL_RCC_GetHCLKFreq+0x54>)
 800404c:	5ccb      	ldrb	r3, [r1, r3]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	fa22 f303 	lsr.w	r3, r2, r3
 8004056:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004058:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <HAL_RCC_GetHCLKFreq+0x50>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <HAL_RCC_GetHCLKFreq+0x54>)
 8004062:	5cd3      	ldrb	r3, [r2, r3]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	fa22 f303 	lsr.w	r3, r2, r3
 800406e:	4a07      	ldr	r2, [pc, #28]	@ (800408c <HAL_RCC_GetHCLKFreq+0x58>)
 8004070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004072:	4a07      	ldr	r2, [pc, #28]	@ (8004090 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004078:	4b04      	ldr	r3, [pc, #16]	@ (800408c <HAL_RCC_GetHCLKFreq+0x58>)
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	58024400 	.word	0x58024400
 8004088:	0800c7b0 	.word	0x0800c7b0
 800408c:	24000004 	.word	0x24000004
 8004090:	24000000 	.word	0x24000000

08004094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004098:	f7ff ffcc 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4904      	ldr	r1, [pc, #16]	@ (80040bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	58024400 	.word	0x58024400
 80040bc:	0800c7b0 	.word	0x0800c7b0

080040c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040c4:	f7ff ffb6 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4904      	ldr	r1, [pc, #16]	@ (80040e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	58024400 	.word	0x58024400
 80040e8:	0800c7b0 	.word	0x0800c7b0

080040ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f0:	b0ca      	sub	sp, #296	@ 0x128
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004110:	2500      	movs	r5, #0
 8004112:	ea54 0305 	orrs.w	r3, r4, r5
 8004116:	d049      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004122:	d02f      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004124:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004128:	d828      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800412a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800412e:	d01a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004134:	d822      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800413e:	d007      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004140:	e01c      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004142:	4bb8      	ldr	r3, [pc, #736]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	4ab7      	ldr	r2, [pc, #732]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800414e:	e01a      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004154:	3308      	adds	r3, #8
 8004156:	2102      	movs	r1, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f001 fc8f 	bl	8005a7c <RCCEx_PLL2_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004164:	e00f      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	3328      	adds	r3, #40	@ 0x28
 800416c:	2102      	movs	r1, #2
 800416e:	4618      	mov	r0, r3
 8004170:	f001 fd36 	bl	8005be0 <RCCEx_PLL3_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800417a:	e004      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800418e:	4ba5      	ldr	r3, [pc, #660]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004192:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800419c:	4aa1      	ldr	r2, [pc, #644]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800419e:	430b      	orrs	r3, r1
 80041a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a2:	e003      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80041b8:	f04f 0900 	mov.w	r9, #0
 80041bc:	ea58 0309 	orrs.w	r3, r8, r9
 80041c0:	d047      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d82a      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80041cc:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041e9 	.word	0x080041e9
 80041d8:	080041f7 	.word	0x080041f7
 80041dc:	0800420d 	.word	0x0800420d
 80041e0:	0800422b 	.word	0x0800422b
 80041e4:	0800422b 	.word	0x0800422b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4b8e      	ldr	r3, [pc, #568]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	4a8d      	ldr	r2, [pc, #564]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041f4:	e01a      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	3308      	adds	r3, #8
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 fc3c 	bl	8005a7c <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800420a:	e00f      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004210:	3328      	adds	r3, #40	@ 0x28
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fce3 	bl	8005be0 <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800422a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004234:	4b7b      	ldr	r3, [pc, #492]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004238:	f023 0107 	bic.w	r1, r3, #7
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	4a78      	ldr	r2, [pc, #480]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004244:	430b      	orrs	r3, r1
 8004246:	6513      	str	r3, [r2, #80]	@ 0x50
 8004248:	e003      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800425e:	f04f 0b00 	mov.w	fp, #0
 8004262:	ea5a 030b 	orrs.w	r3, sl, fp
 8004266:	d04c      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004272:	d030      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004278:	d829      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800427a:	2bc0      	cmp	r3, #192	@ 0xc0
 800427c:	d02d      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800427e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004280:	d825      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004282:	2b80      	cmp	r3, #128	@ 0x80
 8004284:	d018      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004286:	2b80      	cmp	r3, #128	@ 0x80
 8004288:	d821      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800428e:	2b40      	cmp	r3, #64	@ 0x40
 8004290:	d007      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004292:	e01c      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4b63      	ldr	r3, [pc, #396]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	4a62      	ldr	r2, [pc, #392]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042a0:	e01c      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	3308      	adds	r3, #8
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 fbe6 	bl	8005a7c <RCCEx_PLL2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042b6:	e011      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	3328      	adds	r3, #40	@ 0x28
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 fc8d 	bl	8005be0 <RCCEx_PLL3_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80042da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80042e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f2:	4a4c      	ldr	r2, [pc, #304]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80042f8:	e003      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800430e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004318:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d053      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800432a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800432e:	d035      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004330:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004334:	d82e      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004336:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800433a:	d031      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800433c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004340:	d828      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004342:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004346:	d01a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800434c:	d822      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004352:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004356:	d007      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004358:	e01c      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435a:	4b32      	ldr	r3, [pc, #200]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	4a31      	ldr	r2, [pc, #196]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004364:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004366:	e01c      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	3308      	adds	r3, #8
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f001 fb83 	bl	8005a7c <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800437c:	e011      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	3328      	adds	r3, #40	@ 0x28
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f001 fc2a 	bl	8005be0 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004392:	e006      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800439a:	e002      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800439c:	bf00      	nop
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80043a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80043aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80043ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043bc:	430b      	orrs	r3, r1
 80043be:	6593      	str	r3, [r2, #88]	@ 0x58
 80043c0:	e003      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80043d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80043e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80043e4:	460b      	mov	r3, r1
 80043e6:	4313      	orrs	r3, r2
 80043e8:	d056      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043f6:	d038      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80043f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043fc:	d831      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004402:	d034      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004404:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004408:	d82b      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800440a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800440e:	d01d      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004410:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004414:	d825      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800441a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004420:	e01f      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004428:	4ba2      	ldr	r3, [pc, #648]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	4aa1      	ldr	r2, [pc, #644]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800442e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004434:	e01c      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	3308      	adds	r3, #8
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f001 fb1c 	bl	8005a7c <RCCEx_PLL2_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800444a:	e011      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	3328      	adds	r3, #40	@ 0x28
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f001 fbc3 	bl	8005be0 <RCCEx_PLL3_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004460:	e006      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004468:	e002      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800446a:	bf00      	nop
 800446c:	e000      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800446e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004478:	4b8e      	ldr	r3, [pc, #568]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004488:	4a8a      	ldr	r2, [pc, #552]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800448a:	430b      	orrs	r3, r1
 800448c:	6593      	str	r3, [r2, #88]	@ 0x58
 800448e:	e003      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80044a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80044ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d03a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044be:	2b30      	cmp	r3, #48	@ 0x30
 80044c0:	d01f      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80044c2:	2b30      	cmp	r3, #48	@ 0x30
 80044c4:	d819      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d00c      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d815      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d019      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d111      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d6:	4b77      	ldr	r3, [pc, #476]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	4a76      	ldr	r2, [pc, #472]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80044e2:	e011      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	3308      	adds	r3, #8
 80044ea:	2102      	movs	r1, #2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 fac5 	bl	8005a7c <RCCEx_PLL2_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80044f8:	e006      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004500:	e002      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004510:	4b68      	ldr	r3, [pc, #416]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004514:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451e:	4a65      	ldr	r2, [pc, #404]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004520:	430b      	orrs	r3, r1
 8004522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800453a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004544:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d051      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004558:	d035      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800455a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455e:	d82e      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004560:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004564:	d031      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004566:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800456a:	d828      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004570:	d01a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004576:	d822      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004580:	d007      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004582:	e01c      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004584:	4b4b      	ldr	r3, [pc, #300]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	4a4a      	ldr	r2, [pc, #296]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800458a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800458e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004590:	e01c      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	3308      	adds	r3, #8
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fa6e 	bl	8005a7c <RCCEx_PLL2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045a6:	e011      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	3328      	adds	r3, #40	@ 0x28
 80045ae:	2100      	movs	r1, #0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 fb15 	bl	8005be0 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045bc:	e006      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045c4:	e002      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80045ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045d4:	4b37      	ldr	r3, [pc, #220]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e2:	4a34      	ldr	r2, [pc, #208]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80045e8:	e003      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80045fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004602:	2300      	movs	r3, #0
 8004604:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004608:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800460c:	460b      	mov	r3, r1
 800460e:	4313      	orrs	r3, r2
 8004610:	d056      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800461c:	d033      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800461e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004622:	d82c      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004624:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004628:	d02f      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800462a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800462e:	d826      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004630:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004634:	d02b      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004636:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800463a:	d820      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800463c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004640:	d012      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004646:	d81a      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d022      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004650:	d115      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	3308      	adds	r3, #8
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f001 fa0e 	bl	8005a7c <RCCEx_PLL2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004666:	e015      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466c:	3328      	adds	r3, #40	@ 0x28
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f001 fab5 	bl	8005be0 <RCCEx_PLL3_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800467c:	e00a      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004684:	e006      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004686:	bf00      	nop
 8004688:	e004      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10d      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800469e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046aa:	4a02      	ldr	r2, [pc, #8]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80046b0:	e006      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80046b2:	bf00      	nop
 80046b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80046cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80046da:	460b      	mov	r3, r1
 80046dc:	4313      	orrs	r3, r2
 80046de:	d055      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ec:	d033      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80046ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046f2:	d82c      	bhi.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f8:	d02f      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80046fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fe:	d826      	bhi.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004700:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004704:	d02b      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004706:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800470a:	d820      	bhi.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800470c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004710:	d012      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004716:	d81a      	bhi.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d022      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800471c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004720:	d115      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	3308      	adds	r3, #8
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f001 f9a6 	bl	8005a7c <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004736:	e015      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473c:	3328      	adds	r3, #40	@ 0x28
 800473e:	2101      	movs	r1, #1
 8004740:	4618      	mov	r0, r3
 8004742:	f001 fa4d 	bl	8005be0 <RCCEx_PLL3_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800474c:	e00a      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004754:	e006      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004756:	bf00      	nop
 8004758:	e004      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800476c:	4ba3      	ldr	r3, [pc, #652]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800477c:	4a9f      	ldr	r2, [pc, #636]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800477e:	430b      	orrs	r3, r1
 8004780:	6593      	str	r3, [r2, #88]	@ 0x58
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80047a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047a6:	460b      	mov	r3, r1
 80047a8:	4313      	orrs	r3, r2
 80047aa:	d037      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80047ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b6:	d00e      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80047b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047bc:	d816      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d018      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80047c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047c6:	d111      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c8:	4b8c      	ldr	r3, [pc, #560]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	4a8b      	ldr	r2, [pc, #556]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047d4:	e00f      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	3308      	adds	r3, #8
 80047dc:	2101      	movs	r1, #1
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 f94c 	bl	8005a7c <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047ea:	e004      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80047f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047fe:	4b7f      	ldr	r3, [pc, #508]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004802:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480c:	4a7b      	ldr	r2, [pc, #492]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800480e:	430b      	orrs	r3, r1
 8004810:	6513      	str	r3, [r2, #80]	@ 0x50
 8004812:	e003      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004832:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004836:	460b      	mov	r3, r1
 8004838:	4313      	orrs	r3, r2
 800483a:	d039      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004842:	2b03      	cmp	r3, #3
 8004844:	d81c      	bhi.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004846:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004889 	.word	0x08004889
 8004850:	0800485d 	.word	0x0800485d
 8004854:	0800486b 	.word	0x0800486b
 8004858:	08004889 	.word	0x08004889
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485c:	4b67      	ldr	r3, [pc, #412]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	4a66      	ldr	r2, [pc, #408]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004868:	e00f      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	3308      	adds	r3, #8
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f902 	bl	8005a7c <RCCEx_PLL2_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800487e:	e004      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004892:	4b5a      	ldr	r3, [pc, #360]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004896:	f023 0103 	bic.w	r1, r3, #3
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a0:	4a56      	ldr	r2, [pc, #344]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048a6:	e003      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80048bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f000 809f 	beq.w	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048de:	f7fe f835 	bl	800294c <HAL_GetTick>
 80048e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048e6:	e00b      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e8:	f7fe f830 	bl	800294c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b64      	cmp	r3, #100	@ 0x64
 80048f6:	d903      	bls.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048fe:	e005      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004900:	4b3f      	ldr	r3, [pc, #252]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0ed      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800490c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004910:	2b00      	cmp	r3, #0
 8004912:	d179      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004914:	4b39      	ldr	r3, [pc, #228]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004916:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004920:	4053      	eors	r3, r2
 8004922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800492a:	4b34      	ldr	r3, [pc, #208]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004932:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004936:	4b31      	ldr	r3, [pc, #196]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493a:	4a30      	ldr	r2, [pc, #192]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004940:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004942:	4b2e      	ldr	r3, [pc, #184]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004946:	4a2d      	ldr	r2, [pc, #180]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800494e:	4a2b      	ldr	r2, [pc, #172]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004950:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004954:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800495e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004962:	d118      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fd fff2 	bl	800294c <HAL_GetTick>
 8004968:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800496c:	e00d      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fd ffed 	bl	800294c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004978:	1ad2      	subs	r2, r2, r3
 800497a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800497e:	429a      	cmp	r2, r3
 8004980:	d903      	bls.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004988:	e005      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800498a:	4b1c      	ldr	r3, [pc, #112]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0eb      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499a:	2b00      	cmp	r3, #0
 800499c:	d129      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ae:	d10e      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80049b0:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049c0:	091a      	lsrs	r2, r3, #4
 80049c2:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	4a0d      	ldr	r2, [pc, #52]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6113      	str	r3, [r2, #16]
 80049cc:	e005      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80049ce:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	4a0a      	ldr	r2, [pc, #40]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80049d8:	6113      	str	r3, [r2, #16]
 80049da:	4b08      	ldr	r3, [pc, #32]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ea:	4a04      	ldr	r2, [pc, #16]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049ec:	430b      	orrs	r3, r1
 80049ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f0:	e00e      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80049fa:	e009      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80049fc:	58024400 	.word	0x58024400
 8004a00:	58024800 	.word	0x58024800
 8004a04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	f002 0301 	and.w	r3, r2, #1
 8004a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a20:	2300      	movs	r3, #0
 8004a22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f000 8089 	beq.w	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a38:	2b28      	cmp	r3, #40	@ 0x28
 8004a3a:	d86b      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004b1d 	.word	0x08004b1d
 8004a48:	08004b15 	.word	0x08004b15
 8004a4c:	08004b15 	.word	0x08004b15
 8004a50:	08004b15 	.word	0x08004b15
 8004a54:	08004b15 	.word	0x08004b15
 8004a58:	08004b15 	.word	0x08004b15
 8004a5c:	08004b15 	.word	0x08004b15
 8004a60:	08004b15 	.word	0x08004b15
 8004a64:	08004ae9 	.word	0x08004ae9
 8004a68:	08004b15 	.word	0x08004b15
 8004a6c:	08004b15 	.word	0x08004b15
 8004a70:	08004b15 	.word	0x08004b15
 8004a74:	08004b15 	.word	0x08004b15
 8004a78:	08004b15 	.word	0x08004b15
 8004a7c:	08004b15 	.word	0x08004b15
 8004a80:	08004b15 	.word	0x08004b15
 8004a84:	08004aff 	.word	0x08004aff
 8004a88:	08004b15 	.word	0x08004b15
 8004a8c:	08004b15 	.word	0x08004b15
 8004a90:	08004b15 	.word	0x08004b15
 8004a94:	08004b15 	.word	0x08004b15
 8004a98:	08004b15 	.word	0x08004b15
 8004a9c:	08004b15 	.word	0x08004b15
 8004aa0:	08004b15 	.word	0x08004b15
 8004aa4:	08004b1d 	.word	0x08004b1d
 8004aa8:	08004b15 	.word	0x08004b15
 8004aac:	08004b15 	.word	0x08004b15
 8004ab0:	08004b15 	.word	0x08004b15
 8004ab4:	08004b15 	.word	0x08004b15
 8004ab8:	08004b15 	.word	0x08004b15
 8004abc:	08004b15 	.word	0x08004b15
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004b1d 	.word	0x08004b1d
 8004ac8:	08004b15 	.word	0x08004b15
 8004acc:	08004b15 	.word	0x08004b15
 8004ad0:	08004b15 	.word	0x08004b15
 8004ad4:	08004b15 	.word	0x08004b15
 8004ad8:	08004b15 	.word	0x08004b15
 8004adc:	08004b15 	.word	0x08004b15
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b1d 	.word	0x08004b1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	3308      	adds	r3, #8
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 ffc3 	bl	8005a7c <RCCEx_PLL2_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004afc:	e00f      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	3328      	adds	r3, #40	@ 0x28
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f86a 	bl	8005be0 <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b12:	e004      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b26:	4bbf      	ldr	r3, [pc, #764]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b34:	4abb      	ldr	r2, [pc, #748]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b36:	430b      	orrs	r3, r1
 8004b38:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b3a:	e003      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f002 0302 	and.w	r3, r2, #2
 8004b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4313      	orrs	r3, r2
 8004b62:	d041      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b6a:	2b05      	cmp	r3, #5
 8004b6c:	d824      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004bc1 	.word	0x08004bc1
 8004b78:	08004b8d 	.word	0x08004b8d
 8004b7c:	08004ba3 	.word	0x08004ba3
 8004b80:	08004bc1 	.word	0x08004bc1
 8004b84:	08004bc1 	.word	0x08004bc1
 8004b88:	08004bc1 	.word	0x08004bc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	3308      	adds	r3, #8
 8004b92:	2101      	movs	r1, #1
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 ff71 	bl	8005a7c <RCCEx_PLL2_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ba0:	e00f      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba6:	3328      	adds	r3, #40	@ 0x28
 8004ba8:	2101      	movs	r1, #1
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f818 	bl	8005be0 <RCCEx_PLL3_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004bb6:	e004      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004bca:	4b96      	ldr	r3, [pc, #600]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bce:	f023 0107 	bic.w	r1, r3, #7
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bd8:	4a92      	ldr	r2, [pc, #584]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bde:	e003      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f002 0304 	and.w	r3, r2, #4
 8004bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bfe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	d044      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c10:	2b05      	cmp	r3, #5
 8004c12:	d825      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004c14:	a201      	add	r2, pc, #4	@ (adr r2, 8004c1c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1a:	bf00      	nop
 8004c1c:	08004c69 	.word	0x08004c69
 8004c20:	08004c35 	.word	0x08004c35
 8004c24:	08004c4b 	.word	0x08004c4b
 8004c28:	08004c69 	.word	0x08004c69
 8004c2c:	08004c69 	.word	0x08004c69
 8004c30:	08004c69 	.word	0x08004c69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	3308      	adds	r3, #8
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 ff1d 	bl	8005a7c <RCCEx_PLL2_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c48:	e00f      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4e:	3328      	adds	r3, #40	@ 0x28
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 ffc4 	bl	8005be0 <RCCEx_PLL3_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c5e:	e004      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c66:	e000      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c72:	4b6c      	ldr	r3, [pc, #432]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c76:	f023 0107 	bic.w	r1, r3, #7
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c82:	4a68      	ldr	r2, [pc, #416]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c88:	e003      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f002 0320 	and.w	r3, r2, #32
 8004c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ca8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004cac:	460b      	mov	r3, r1
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	d055      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cbe:	d033      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc4:	d82c      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cca:	d02f      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd0:	d826      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cd6:	d02b      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004cd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cdc:	d820      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ce2:	d012      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ce8:	d81a      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d022      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004cee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cf2:	d115      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 febd 	bl	8005a7c <RCCEx_PLL2_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d08:	e015      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	3328      	adds	r3, #40	@ 0x28
 8004d10:	2102      	movs	r1, #2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 ff64 	bl	8005be0 <RCCEx_PLL3_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d26:	e006      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d28:	bf00      	nop
 8004d2a:	e004      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d2c:	bf00      	nop
 8004d2e:	e002      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d3e:	4b39      	ldr	r3, [pc, #228]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4e:	4a35      	ldr	r2, [pc, #212]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	d058      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d8a:	d033      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d90:	d82c      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d96:	d02f      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9c:	d826      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004da2:	d02b      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004da4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004da8:	d820      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dae:	d012      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004db4:	d81a      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d022      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbe:	d115      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fe57 	bl	8005a7c <RCCEx_PLL2_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004dd4:	e015      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dda:	3328      	adds	r3, #40	@ 0x28
 8004ddc:	2102      	movs	r1, #2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fefe 	bl	8005be0 <RCCEx_PLL3_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004dea:	e00a      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004df2:	e006      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004df4:	bf00      	nop
 8004df6:	e004      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004df8:	bf00      	nop
 8004dfa:	e002      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10e      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e0a:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e1a:	4a02      	ldr	r2, [pc, #8]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e20:	e006      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	d055      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004e5c:	d033      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004e5e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004e62:	d82c      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e68:	d02f      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004e6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e6e:	d826      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e74:	d02b      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004e76:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e7a:	d820      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e80:	d012      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e86:	d81a      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d022      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e90:	d115      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e96:	3308      	adds	r3, #8
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fdee 	bl	8005a7c <RCCEx_PLL2_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eac:	3328      	adds	r3, #40	@ 0x28
 8004eae:	2102      	movs	r1, #2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fe95 	bl	8005be0 <RCCEx_PLL3_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ec4:	e006      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ec6:	bf00      	nop
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004edc:	4ba1      	ldr	r3, [pc, #644]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004eec:	4a9d      	ldr	r2, [pc, #628]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ef2:	e003      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f002 0308 	and.w	r3, r2, #8
 8004f08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004f16:	460b      	mov	r3, r1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d01e      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	3328      	adds	r3, #40	@ 0x28
 8004f30:	2102      	movs	r1, #2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fe54 	bl	8005be0 <RCCEx_PLL3_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f44:	4b87      	ldr	r3, [pc, #540]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f54:	4a83      	ldr	r2, [pc, #524]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f56:	430b      	orrs	r3, r1
 8004f58:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f002 0310 	and.w	r3, r2, #16
 8004f66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004f74:	460b      	mov	r3, r1
 8004f76:	4313      	orrs	r3, r2
 8004f78:	d01e      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f86:	d10c      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8c:	3328      	adds	r3, #40	@ 0x28
 8004f8e:	2102      	movs	r1, #2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fe25 	bl	8005be0 <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fa2:	4b70      	ldr	r3, [pc, #448]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb2:	4a6c      	ldr	r2, [pc, #432]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	d03e      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fe4:	d022      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fea:	d81b      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff4:	d00b      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004ff6:	e015      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fd3b 	bl	8005a7c <RCCEx_PLL2_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800500c:	e00f      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800500e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005012:	3328      	adds	r3, #40	@ 0x28
 8005014:	2102      	movs	r1, #2
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fde2 	bl	8005be0 <RCCEx_PLL3_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005022:	e004      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800502c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005036:	4b4b      	ldr	r3, [pc, #300]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005042:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005046:	4a47      	ldr	r2, [pc, #284]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005048:	430b      	orrs	r3, r1
 800504a:	6593      	str	r3, [r2, #88]	@ 0x58
 800504c:	e003      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005062:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005064:	2300      	movs	r3, #0
 8005066:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005068:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800506c:	460b      	mov	r3, r1
 800506e:	4313      	orrs	r3, r2
 8005070:	d03b      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800507e:	d01f      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005080:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005084:	d818      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800508a:	d003      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800508c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005090:	d007      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005092:	e011      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005094:	4b33      	ldr	r3, [pc, #204]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	4a32      	ldr	r2, [pc, #200]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800509a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800509e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80050a0:	e00f      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	3328      	adds	r3, #40	@ 0x28
 80050a8:	2101      	movs	r1, #1
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fd98 	bl	8005be0 <RCCEx_PLL3_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80050b6:	e004      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80050c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ca:	4b26      	ldr	r3, [pc, #152]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050da:	4a22      	ldr	r2, [pc, #136]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050dc:	430b      	orrs	r3, r1
 80050de:	6553      	str	r3, [r2, #84]	@ 0x54
 80050e0:	e003      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80050f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80050f8:	2300      	movs	r3, #0
 80050fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80050fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005100:	460b      	mov	r3, r1
 8005102:	4313      	orrs	r3, r2
 8005104:	d034      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005114:	d007      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005116:	e011      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005118:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	4a11      	ldr	r2, [pc, #68]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800511e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005124:	e00e      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512a:	3308      	adds	r3, #8
 800512c:	2102      	movs	r1, #2
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fca4 	bl	8005a7c <RCCEx_PLL2_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800513a:	e003      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10d      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800514c:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800514e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005150:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515a:	4a02      	ldr	r2, [pc, #8]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800515c:	430b      	orrs	r3, r1
 800515e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005160:	e006      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800517c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800517e:	2300      	movs	r3, #0
 8005180:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005182:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	d00c      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005190:	3328      	adds	r3, #40	@ 0x28
 8005192:	2102      	movs	r1, #2
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fd23 	bl	8005be0 <RCCEx_PLL3_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80051b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80051b4:	2300      	movs	r3, #0
 80051b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80051b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80051bc:	460b      	mov	r3, r1
 80051be:	4313      	orrs	r3, r2
 80051c0:	d038      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ce:	d018      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80051d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051d4:	d811      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80051d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051da:	d014      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e0:	d80b      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d011      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ea:	d106      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ec:	4bc3      	ldr	r3, [pc, #780]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	4ac2      	ldr	r2, [pc, #776]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80051f8:	e008      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005200:	e004      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800520a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005214:	4bb9      	ldr	r3, [pc, #740]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005218:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005224:	4ab5      	ldr	r2, [pc, #724]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005226:	430b      	orrs	r3, r1
 8005228:	6553      	str	r3, [r2, #84]	@ 0x54
 800522a:	e003      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005240:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005242:	2300      	movs	r3, #0
 8005244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005246:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800524a:	460b      	mov	r3, r1
 800524c:	4313      	orrs	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005250:	4baa      	ldr	r3, [pc, #680]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005254:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525e:	4aa7      	ldr	r2, [pc, #668]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005260:	430b      	orrs	r3, r1
 8005262:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005270:	653b      	str	r3, [r7, #80]	@ 0x50
 8005272:	2300      	movs	r3, #0
 8005274:	657b      	str	r3, [r7, #84]	@ 0x54
 8005276:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800527a:	460b      	mov	r3, r1
 800527c:	4313      	orrs	r3, r2
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005280:	4b9e      	ldr	r3, [pc, #632]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005290:	4a9a      	ldr	r2, [pc, #616]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005292:	430b      	orrs	r3, r1
 8005294:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80052a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a4:	2300      	movs	r3, #0
 80052a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052b2:	4b92      	ldr	r3, [pc, #584]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c0:	4a8e      	ldr	r2, [pc, #568]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052c2:	430b      	orrs	r3, r1
 80052c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80052d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052d4:	2300      	movs	r3, #0
 80052d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80052dc:	460b      	mov	r3, r1
 80052de:	4313      	orrs	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052e2:	4b86      	ldr	r3, [pc, #536]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	4a85      	ldr	r2, [pc, #532]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052ec:	6113      	str	r3, [r2, #16]
 80052ee:	4b83      	ldr	r3, [pc, #524]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052f0:	6919      	ldr	r1, [r3, #16]
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052fa:	4a80      	ldr	r2, [pc, #512]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800530c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800530e:	2300      	movs	r3, #0
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005312:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005316:	460b      	mov	r3, r1
 8005318:	4313      	orrs	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800531c:	4b77      	ldr	r3, [pc, #476]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800531e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005320:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532a:	4a74      	ldr	r2, [pc, #464]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800532c:	430b      	orrs	r3, r1
 800532e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800533c:	633b      	str	r3, [r7, #48]	@ 0x30
 800533e:	2300      	movs	r3, #0
 8005340:	637b      	str	r3, [r7, #52]	@ 0x34
 8005342:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005346:	460b      	mov	r3, r1
 8005348:	4313      	orrs	r3, r2
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800534c:	4b6b      	ldr	r3, [pc, #428]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800534e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005350:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800535c:	4a67      	ldr	r2, [pc, #412]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800535e:	430b      	orrs	r3, r1
 8005360:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	2100      	movs	r1, #0
 800536c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005374:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005378:	460b      	mov	r3, r1
 800537a:	4313      	orrs	r3, r2
 800537c:	d011      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	3308      	adds	r3, #8
 8005384:	2100      	movs	r1, #0
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fb78 	bl	8005a7c <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	2100      	movs	r1, #0
 80053ac:	6239      	str	r1, [r7, #32]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053b8:	460b      	mov	r3, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	d011      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c2:	3308      	adds	r3, #8
 80053c4:	2101      	movs	r1, #1
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fb58 	bl	8005a7c <RCCEx_PLL2_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	2100      	movs	r1, #0
 80053ec:	61b9      	str	r1, [r7, #24]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d011      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005402:	3308      	adds	r3, #8
 8005404:	2102      	movs	r1, #2
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fb38 	bl	8005a7c <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800541e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	2100      	movs	r1, #0
 800542c:	6139      	str	r1, [r7, #16]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d011      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	3328      	adds	r3, #40	@ 0x28
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fbca 	bl	8005be0 <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	2100      	movs	r1, #0
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005478:	460b      	mov	r3, r1
 800547a:	4313      	orrs	r3, r2
 800547c:	d011      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005482:	3328      	adds	r3, #40	@ 0x28
 8005484:	2101      	movs	r1, #1
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fbaa 	bl	8005be0 <RCCEx_PLL3_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	2100      	movs	r1, #0
 80054ac:	6039      	str	r1, [r7, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80054b8:	460b      	mov	r3, r1
 80054ba:	4313      	orrs	r3, r2
 80054bc:	d011      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c2:	3328      	adds	r3, #40	@ 0x28
 80054c4:	2102      	movs	r1, #2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fb8a 	bl	8005be0 <RCCEx_PLL3_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80054d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80054e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80054f6:	46bd      	mov	sp, r7
 80054f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fc:	58024400 	.word	0x58024400

08005500 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005504:	f7fe fd96 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8005508:	4602      	mov	r2, r0
 800550a:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	4904      	ldr	r1, [pc, #16]	@ (8005528 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005516:	5ccb      	ldrb	r3, [r1, r3]
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	58024400 	.word	0x58024400
 8005528:	0800c7b0 	.word	0x0800c7b0

0800552c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	@ 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005534:	4ba1      	ldr	r3, [pc, #644]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800553e:	4b9f      	ldr	r3, [pc, #636]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	0b1b      	lsrs	r3, r3, #12
 8005544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005548:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800554a:	4b9c      	ldr	r3, [pc, #624]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005556:	4b99      	ldr	r3, [pc, #612]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8111 	beq.w	800579c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b02      	cmp	r3, #2
 800557e:	f000 8083 	beq.w	8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b02      	cmp	r3, #2
 8005586:	f200 80a1 	bhi.w	80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d056      	beq.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005596:	e099      	b.n	80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005598:	4b88      	ldr	r3, [pc, #544]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02d      	beq.n	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a4:	4b85      	ldr	r3, [pc, #532]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	4a84      	ldr	r2, [pc, #528]	@ (80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b7b      	ldr	r3, [pc, #492]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80055fe:	e087      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80057c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b6a      	ldr	r3, [pc, #424]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a03 	vldr	s12, [r7, #12]
 8005626:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005642:	e065      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80057cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005656:	4b59      	ldr	r3, [pc, #356]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005666:	ed97 6a03 	vldr	s12, [r7, #12]
 800566a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800566e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800567a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005686:	e043      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569a:	4b48      	ldr	r3, [pc, #288]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ca:	e021      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80057cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b37      	ldr	r3, [pc, #220]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800570e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005710:	4b2a      	ldr	r3, [pc, #168]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005714:	0a5b      	lsrs	r3, r3, #9
 8005716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800572a:	edd7 6a07 	vldr	s13, [r7, #28]
 800572e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005736:	ee17 2a90 	vmov	r2, s15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800573e:	4b1f      	ldr	r3, [pc, #124]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005758:	edd7 6a07 	vldr	s13, [r7, #28]
 800575c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005764:	ee17 2a90 	vmov	r2, s15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800576e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005770:	0e1b      	lsrs	r3, r3, #24
 8005772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005786:	edd7 6a07 	vldr	s13, [r7, #28]
 800578a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005792:	ee17 2a90 	vmov	r2, s15
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800579a:	e008      	b.n	80057ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
}
 80057ae:	bf00      	nop
 80057b0:	3724      	adds	r7, #36	@ 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	03d09000 	.word	0x03d09000
 80057c4:	46000000 	.word	0x46000000
 80057c8:	4c742400 	.word	0x4c742400
 80057cc:	4a742400 	.word	0x4a742400
 80057d0:	4af42400 	.word	0x4af42400

080057d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	@ 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057dc:	4ba1      	ldr	r3, [pc, #644]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80057e6:	4b9f      	ldr	r3, [pc, #636]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	0d1b      	lsrs	r3, r3, #20
 80057ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80057f2:	4b9c      	ldr	r3, [pc, #624]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80057fe:	4b99      	ldr	r3, [pc, #612]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8111 	beq.w	8005a44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b02      	cmp	r3, #2
 8005826:	f000 8083 	beq.w	8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b02      	cmp	r3, #2
 800582e:	f200 80a1 	bhi.w	8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d056      	beq.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800583e:	e099      	b.n	8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005840:	4b88      	ldr	r3, [pc, #544]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d02d      	beq.n	80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800584c:	4b85      	ldr	r3, [pc, #532]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	08db      	lsrs	r3, r3, #3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	4a84      	ldr	r2, [pc, #528]	@ (8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b7b      	ldr	r3, [pc, #492]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a03 	vldr	s12, [r7, #12]
 800588a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80058a6:	e087      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005a70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ea:	e065      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b59      	ldr	r3, [pc, #356]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005912:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592e:	e043      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b48      	ldr	r3, [pc, #288]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a03 	vldr	s12, [r7, #12]
 8005956:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005972:	e021      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005986:	4b37      	ldr	r3, [pc, #220]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	ed97 6a03 	vldr	s12, [r7, #12]
 800599a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800599e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80059b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	0a5b      	lsrs	r3, r3, #9
 80059be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059de:	ee17 2a90 	vmov	r2, s15
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80059e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	0c1b      	lsrs	r3, r3, #16
 80059ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0c:	ee17 2a90 	vmov	r2, s15
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a14:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3a:	ee17 2a90 	vmov	r2, s15
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a42:	e008      	b.n	8005a56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	609a      	str	r2, [r3, #8]
}
 8005a56:	bf00      	nop
 8005a58:	3724      	adds	r7, #36	@ 0x24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	58024400 	.word	0x58024400
 8005a68:	03d09000 	.word	0x03d09000
 8005a6c:	46000000 	.word	0x46000000
 8005a70:	4c742400 	.word	0x4c742400
 8005a74:	4a742400 	.word	0x4a742400
 8005a78:	4af42400 	.word	0x4af42400

08005a7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a8a:	4b53      	ldr	r3, [pc, #332]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d101      	bne.n	8005a9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e099      	b.n	8005bce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005aa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fc ff51 	bl	800294c <HAL_GetTick>
 8005aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005aac:	e008      	b.n	8005ac0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005aae:	f7fc ff4d 	bl	800294c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e086      	b.n	8005bce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ac0:	4b45      	ldr	r3, [pc, #276]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f0      	bne.n	8005aae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005acc:	4b42      	ldr	r3, [pc, #264]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	031b      	lsls	r3, r3, #12
 8005ada:	493f      	ldr	r1, [pc, #252]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	025b      	lsls	r3, r3, #9
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	061b      	lsls	r3, r3, #24
 8005b0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b10:	4931      	ldr	r1, [pc, #196]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b16:	4b30      	ldr	r3, [pc, #192]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	492d      	ldr	r1, [pc, #180]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b28:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	f023 0220 	bic.w	r2, r3, #32
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	4928      	ldr	r1, [pc, #160]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b3a:	4b27      	ldr	r3, [pc, #156]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3e:	4a26      	ldr	r2, [pc, #152]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b40:	f023 0310 	bic.w	r3, r3, #16
 8005b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b46:	4b24      	ldr	r3, [pc, #144]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b4a:	4b24      	ldr	r3, [pc, #144]	@ (8005bdc <RCCEx_PLL2_Config+0x160>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	69d2      	ldr	r2, [r2, #28]
 8005b52:	00d2      	lsls	r2, r2, #3
 8005b54:	4920      	ldr	r1, [pc, #128]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b60:	f043 0310 	orr.w	r3, r3, #16
 8005b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	4a19      	ldr	r2, [pc, #100]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b78:	e00f      	b.n	8005b9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d106      	bne.n	8005b8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b80:	4b15      	ldr	r3, [pc, #84]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	4a14      	ldr	r2, [pc, #80]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b8c:	e005      	b.n	8005b9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b8e:	4b12      	ldr	r3, [pc, #72]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	4a11      	ldr	r2, [pc, #68]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba6:	f7fc fed1 	bl	800294c <HAL_GetTick>
 8005baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bac:	e008      	b.n	8005bc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bae:	f7fc fecd 	bl	800294c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e006      	b.n	8005bce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bc0:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f0      	beq.n	8005bae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	58024400 	.word	0x58024400
 8005bdc:	ffff0007 	.word	0xffff0007

08005be0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bee:	4b53      	ldr	r3, [pc, #332]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d101      	bne.n	8005bfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e099      	b.n	8005d32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a4e      	ldr	r2, [pc, #312]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c0a:	f7fc fe9f 	bl	800294c <HAL_GetTick>
 8005c0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c10:	e008      	b.n	8005c24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c12:	f7fc fe9b 	bl	800294c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e086      	b.n	8005d32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c24:	4b45      	ldr	r3, [pc, #276]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c30:	4b42      	ldr	r3, [pc, #264]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	051b      	lsls	r3, r3, #20
 8005c3e:	493f      	ldr	r1, [pc, #252]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	025b      	lsls	r3, r3, #9
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	061b      	lsls	r3, r3, #24
 8005c70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c74:	4931      	ldr	r1, [pc, #196]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c7a:	4b30      	ldr	r3, [pc, #192]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	492d      	ldr	r1, [pc, #180]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	4928      	ldr	r1, [pc, #160]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c9e:	4b27      	ldr	r3, [pc, #156]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	4a26      	ldr	r2, [pc, #152]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005caa:	4b24      	ldr	r3, [pc, #144]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cae:	4b24      	ldr	r3, [pc, #144]	@ (8005d40 <RCCEx_PLL3_Config+0x160>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	69d2      	ldr	r2, [r2, #28]
 8005cb6:	00d2      	lsls	r2, r2, #3
 8005cb8:	4920      	ldr	r1, [pc, #128]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	4a19      	ldr	r2, [pc, #100]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005cda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cdc:	e00f      	b.n	8005cfe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d106      	bne.n	8005cf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ce4:	4b15      	ldr	r3, [pc, #84]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	4a14      	ldr	r2, [pc, #80]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cf0:	e005      	b.n	8005cfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cf2:	4b12      	ldr	r3, [pc, #72]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	4a11      	ldr	r2, [pc, #68]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a0e      	ldr	r2, [pc, #56]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fc fe1f 	bl	800294c <HAL_GetTick>
 8005d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d10:	e008      	b.n	8005d24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d12:	f7fc fe1b 	bl	800294c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e006      	b.n	8005d32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d24:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	ffff0007 	.word	0xffff0007

08005d44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e10f      	b.n	8005f76 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a87      	ldr	r2, [pc, #540]	@ (8005f80 <HAL_SPI_Init+0x23c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <HAL_SPI_Init+0x42>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a86      	ldr	r2, [pc, #536]	@ (8005f84 <HAL_SPI_Init+0x240>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00a      	beq.n	8005d86 <HAL_SPI_Init+0x42>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a84      	ldr	r2, [pc, #528]	@ (8005f88 <HAL_SPI_Init+0x244>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d005      	beq.n	8005d86 <HAL_SPI_Init+0x42>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d901      	bls.n	8005d86 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0f7      	b.n	8005f76 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fe2e 	bl	80069e8 <SPI_GetPacketSize>
 8005d8c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a7b      	ldr	r2, [pc, #492]	@ (8005f80 <HAL_SPI_Init+0x23c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00c      	beq.n	8005db2 <HAL_SPI_Init+0x6e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a79      	ldr	r2, [pc, #484]	@ (8005f84 <HAL_SPI_Init+0x240>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d007      	beq.n	8005db2 <HAL_SPI_Init+0x6e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a78      	ldr	r2, [pc, #480]	@ (8005f88 <HAL_SPI_Init+0x244>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d002      	beq.n	8005db2 <HAL_SPI_Init+0x6e>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d811      	bhi.n	8005dd6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005db6:	4a72      	ldr	r2, [pc, #456]	@ (8005f80 <HAL_SPI_Init+0x23c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a70      	ldr	r2, [pc, #448]	@ (8005f84 <HAL_SPI_Init+0x240>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_SPI_Init+0x8c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a6f      	ldr	r2, [pc, #444]	@ (8005f88 <HAL_SPI_Init+0x244>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d104      	bne.n	8005dda <HAL_SPI_Init+0x96>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d901      	bls.n	8005dda <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e0cd      	b.n	8005f76 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fc fb34 	bl	800245c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005e16:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e20:	d119      	bne.n	8005e56 <HAL_SPI_Init+0x112>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e2a:	d103      	bne.n	8005e34 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10c      	bne.n	8005e56 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e44:	d107      	bne.n	8005e56 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00f      	beq.n	8005e82 <HAL_SPI_Init+0x13e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b06      	cmp	r3, #6
 8005e68:	d90b      	bls.n	8005e82 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e007      	b.n	8005e92 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea4:	ea42 0103 	orr.w	r1, r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef2:	ea42 0103 	orr.w	r1, r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d113      	bne.n	8005f32 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40013000 	.word	0x40013000
 8005f84:	40003800 	.word	0x40003800
 8005f88:	40003c00 	.word	0x40003c00

08005f8c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3320      	adds	r3, #32
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa4:	f7fc fcd2 	bl	800294c <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d001      	beq.n	8005fba <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e1d1      	b.n	800635e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_SPI_Transmit+0x3a>
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e1c9      	b.n	800635e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_SPI_Transmit+0x4c>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e1c2      	b.n	800635e <HAL_SPI_Transmit+0x3d2>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006030:	d108      	bne.n	8006044 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	e009      	b.n	8006058 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006056:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	4b96      	ldr	r3, [pc, #600]	@ (80062b8 <HAL_SPI_Transmit+0x32c>)
 8006060:	4013      	ands	r3, r2
 8006062:	88f9      	ldrh	r1, [r7, #6]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	430b      	orrs	r3, r1
 800606a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006084:	d107      	bne.n	8006096 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	2b0f      	cmp	r3, #15
 800609c:	d947      	bls.n	800612e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800609e:	e03f      	b.n	8006120 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d114      	bne.n	80060d8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060be:	1d1a      	adds	r2, r3, #4
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80060d6:	e023      	b.n	8006120 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d8:	f7fc fc38 	bl	800294c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d803      	bhi.n	80060f0 <HAL_SPI_Transmit+0x164>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d102      	bne.n	80060f6 <HAL_SPI_Transmit+0x16a>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d114      	bne.n	8006120 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fba8 	bl	800684c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006102:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e11e      	b.n	800635e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1b9      	bne.n	80060a0 <HAL_SPI_Transmit+0x114>
 800612c:	e0f1      	b.n	8006312 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b07      	cmp	r3, #7
 8006134:	f240 80e6 	bls.w	8006304 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006138:	e05d      	b.n	80061f6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d132      	bne.n	80061ae <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b01      	cmp	r3, #1
 8006152:	d918      	bls.n	8006186 <HAL_SPI_Transmit+0x1fa>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d014      	beq.n	8006186 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800616c:	1d1a      	adds	r2, r3, #4
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b02      	subs	r3, #2
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006184:	e037      	b.n	80061f6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800618a:	881a      	ldrh	r2, [r3, #0]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061ac:	e023      	b.n	80061f6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ae:	f7fc fbcd 	bl	800294c <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d803      	bhi.n	80061c6 <HAL_SPI_Transmit+0x23a>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d102      	bne.n	80061cc <HAL_SPI_Transmit+0x240>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d114      	bne.n	80061f6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fb3d 	bl	800684c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e0b3      	b.n	800635e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d19b      	bne.n	800613a <HAL_SPI_Transmit+0x1ae>
 8006202:	e086      	b.n	8006312 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d154      	bne.n	80062bc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b03      	cmp	r3, #3
 800621c:	d918      	bls.n	8006250 <HAL_SPI_Transmit+0x2c4>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006222:	2b40      	cmp	r3, #64	@ 0x40
 8006224:	d914      	bls.n	8006250 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b04      	subs	r3, #4
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800624e:	e059      	b.n	8006304 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d917      	bls.n	800628c <HAL_SPI_Transmit+0x300>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006268:	881a      	ldrh	r2, [r3, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006272:	1c9a      	adds	r2, r3, #2
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b02      	subs	r3, #2
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800628a:	e03b      	b.n	8006304 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3320      	adds	r3, #32
 8006296:	7812      	ldrb	r2, [r2, #0]
 8006298:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80062b6:	e025      	b.n	8006304 <HAL_SPI_Transmit+0x378>
 80062b8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062bc:	f7fc fb46 	bl	800294c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d803      	bhi.n	80062d4 <HAL_SPI_Transmit+0x348>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d102      	bne.n	80062da <HAL_SPI_Transmit+0x34e>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d114      	bne.n	8006304 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fab6 	bl	800684c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e02c      	b.n	800635e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f af79 	bne.w	8006204 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2200      	movs	r2, #0
 800631a:	2108      	movs	r1, #8
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fb35 	bl	800698c <SPI_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fa87 	bl	800684c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800635c:	2300      	movs	r3, #0
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop

08006368 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	b29b      	uxth	r3, r3
 8006380:	3301      	adds	r3, #1
 8006382:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3330      	adds	r3, #48	@ 0x30
 800638a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800638c:	f7fc fade 	bl	800294c <HAL_GetTick>
 8006390:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b01      	cmp	r3, #1
 800639c:	d001      	beq.n	80063a2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800639e:	2302      	movs	r3, #2
 80063a0:	e250      	b.n	8006844 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_SPI_Receive+0x46>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e248      	b.n	8006844 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_SPI_Receive+0x58>
 80063bc:	2302      	movs	r3, #2
 80063be:	e241      	b.n	8006844 <HAL_SPI_Receive+0x4dc>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2204      	movs	r2, #4
 80063cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006418:	d108      	bne.n	800642c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e009      	b.n	8006440 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800643e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	4b95      	ldr	r3, [pc, #596]	@ (800669c <HAL_SPI_Receive+0x334>)
 8006448:	4013      	ands	r3, r2
 800644a:	88f9      	ldrh	r1, [r7, #6]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	430b      	orrs	r3, r1
 8006452:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800646c:	d107      	bne.n	800647e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800647c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	d96c      	bls.n	8006560 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006486:	e064      	b.n	8006552 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d114      	bne.n	80064c8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ae:	1d1a      	adds	r2, r3, #4
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80064c6:	e044      	b.n	8006552 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	8bfa      	ldrh	r2, [r7, #30]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d919      	bls.n	800650a <HAL_SPI_Receive+0x1a2>
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d014      	beq.n	800650a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064ea:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064f0:	1d1a      	adds	r2, r3, #4
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006508:	e023      	b.n	8006552 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650a:	f7fc fa1f 	bl	800294c <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d803      	bhi.n	8006522 <HAL_SPI_Receive+0x1ba>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d102      	bne.n	8006528 <HAL_SPI_Receive+0x1c0>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d114      	bne.n	8006552 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f98f 	bl	800684c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006534:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e178      	b.n	8006844 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d194      	bne.n	8006488 <HAL_SPI_Receive+0x120>
 800655e:	e15e      	b.n	800681e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b07      	cmp	r3, #7
 8006566:	f240 8153 	bls.w	8006810 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800656a:	e08f      	b.n	800668c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b01      	cmp	r3, #1
 8006580:	d114      	bne.n	80065ac <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	8812      	ldrh	r2, [r2, #0]
 800658a:	b292      	uxth	r2, r2
 800658c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80065aa:	e06f      	b.n	800668c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8bfa      	ldrh	r2, [r7, #30]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d924      	bls.n	8006604 <HAL_SPI_Receive+0x29c>
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01f      	beq.n	8006604 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	8812      	ldrh	r2, [r2, #0]
 80065cc:	b292      	uxth	r2, r2
 80065ce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d4:	1c9a      	adds	r2, r3, #2
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	8812      	ldrh	r2, [r2, #0]
 80065e2:	b292      	uxth	r2, r2
 80065e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ea:	1c9a      	adds	r2, r3, #2
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b02      	subs	r3, #2
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006602:	e043      	b.n	800668c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	d119      	bne.n	8006644 <HAL_SPI_Receive+0x2dc>
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	8812      	ldrh	r2, [r2, #0]
 8006622:	b292      	uxth	r2, r2
 8006624:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006642:	e023      	b.n	800668c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006644:	f7fc f982 	bl	800294c <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d803      	bhi.n	800665c <HAL_SPI_Receive+0x2f4>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d102      	bne.n	8006662 <HAL_SPI_Receive+0x2fa>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d114      	bne.n	800668c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f8f2 	bl	800684c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800666e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e0db      	b.n	8006844 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	f47f af69 	bne.w	800656c <HAL_SPI_Receive+0x204>
 800669a:	e0c0      	b.n	800681e <HAL_SPI_Receive+0x4b6>
 800669c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d117      	bne.n	80066e6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80066e4:	e094      	b.n	8006810 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8bfa      	ldrh	r2, [r7, #30]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d946      	bls.n	8006782 <HAL_SPI_Receive+0x41a>
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d041      	beq.n	8006782 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800670a:	7812      	ldrb	r2, [r2, #0]
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006742:	7812      	ldrb	r2, [r2, #0]
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b04      	subs	r3, #4
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006780:	e046      	b.n	8006810 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b03      	cmp	r3, #3
 800678c:	d81c      	bhi.n	80067c8 <HAL_SPI_Receive+0x460>
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d017      	beq.n	80067c8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80067c6:	e023      	b.n	8006810 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c8:	f7fc f8c0 	bl	800294c <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d803      	bhi.n	80067e0 <HAL_SPI_Receive+0x478>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067de:	d102      	bne.n	80067e6 <HAL_SPI_Receive+0x47e>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d114      	bne.n	8006810 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f830 	bl	800684c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e019      	b.n	8006844 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	f47f af41 	bne.w	80066a0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f814 	bl	800684c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006842:	2300      	movs	r3, #0
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0208 	orr.w	r2, r2, #8
 800686a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699a      	ldr	r2, [r3, #24]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0210 	orr.w	r2, r2, #16
 800687a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6919      	ldr	r1, [r3, #16]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4b3c      	ldr	r3, [pc, #240]	@ (8006988 <SPI_CloseTransfer+0x13c>)
 8006898:	400b      	ands	r3, r1
 800689a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80068aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d014      	beq.n	80068e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00f      	beq.n	80068e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699a      	ldr	r2, [r3, #24]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0220 	orr.w	r2, r2, #32
 80068e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d014      	beq.n	8006918 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00f      	beq.n	8006918 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068fe:	f043 0204 	orr.w	r2, r3, #4
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006916:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00f      	beq.n	8006942 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006928:	f043 0201 	orr.w	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006940:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00f      	beq.n	800696c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006952:	f043 0208 	orr.w	r2, r3, #8
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800696a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	fffffc90 	.word	0xfffffc90

0800698c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800699c:	e010      	b.n	80069c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800699e:	f7fb ffd5 	bl	800294c <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d803      	bhi.n	80069b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d102      	bne.n	80069bc <SPI_WaitOnFlagUntilTimeout+0x30>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e00f      	b.n	80069e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4013      	ands	r3, r2
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	bf0c      	ite	eq
 80069d0:	2301      	moveq	r3, #1
 80069d2:	2300      	movne	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d0df      	beq.n	800699e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	3301      	adds	r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	3307      	adds	r3, #7
 8006a06:	08db      	lsrs	r3, r3, #3
 8006a08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e042      	b.n	8006ab6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fb fd72 	bl	800252c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2224      	movs	r2, #36	@ 0x24
 8006a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fe1f 	bl	80076ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8b4 	bl	8006bdc <UART_SetConfig>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e01b      	b.n	8006ab6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0201 	orr.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fe9e 	bl	80077f0 <UART_CheckIdleState>
 8006ab4:	4603      	mov	r3, r0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b08a      	sub	sp, #40	@ 0x28
 8006ac2:	af02      	add	r7, sp, #8
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d17b      	bne.n	8006bd0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_UART_Transmit+0x26>
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e074      	b.n	8006bd2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2221      	movs	r2, #33	@ 0x21
 8006af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af8:	f7fb ff28 	bl	800294c <HAL_GetTick>
 8006afc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	88fa      	ldrh	r2, [r7, #6]
 8006b02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	88fa      	ldrh	r2, [r7, #6]
 8006b0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b16:	d108      	bne.n	8006b2a <HAL_UART_Transmit+0x6c>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	e003      	b.n	8006b32 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b32:	e030      	b.n	8006b96 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2180      	movs	r1, #128	@ 0x80
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 ff00 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e03d      	b.n	8006bd2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	3302      	adds	r3, #2
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	e007      	b.n	8006b84 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	781a      	ldrb	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	3301      	adds	r3, #1
 8006b82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1c8      	bne.n	8006b34 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2140      	movs	r1, #64	@ 0x40
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fec9 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e006      	b.n	8006bd2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e000      	b.n	8006bd2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006bd0:	2302      	movs	r3, #2
  }
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be0:	b092      	sub	sp, #72	@ 0x48
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4bbe      	ldr	r3, [pc, #760]	@ (8006f04 <UART_SetConfig+0x328>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4ab3      	ldr	r2, [pc, #716]	@ (8006f08 <UART_SetConfig+0x32c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c44:	4313      	orrs	r3, r2
 8006c46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	4baf      	ldr	r3, [pc, #700]	@ (8006f0c <UART_SetConfig+0x330>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	6812      	ldr	r2, [r2, #0]
 8006c56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	f023 010f 	bic.w	r1, r3, #15
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4aa6      	ldr	r2, [pc, #664]	@ (8006f10 <UART_SetConfig+0x334>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d177      	bne.n	8006d6c <UART_SetConfig+0x190>
 8006c7c:	4ba5      	ldr	r3, [pc, #660]	@ (8006f14 <UART_SetConfig+0x338>)
 8006c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c84:	2b28      	cmp	r3, #40	@ 0x28
 8006c86:	d86d      	bhi.n	8006d64 <UART_SetConfig+0x188>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0xb4>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006d35 	.word	0x08006d35
 8006c94:	08006d65 	.word	0x08006d65
 8006c98:	08006d65 	.word	0x08006d65
 8006c9c:	08006d65 	.word	0x08006d65
 8006ca0:	08006d65 	.word	0x08006d65
 8006ca4:	08006d65 	.word	0x08006d65
 8006ca8:	08006d65 	.word	0x08006d65
 8006cac:	08006d65 	.word	0x08006d65
 8006cb0:	08006d3d 	.word	0x08006d3d
 8006cb4:	08006d65 	.word	0x08006d65
 8006cb8:	08006d65 	.word	0x08006d65
 8006cbc:	08006d65 	.word	0x08006d65
 8006cc0:	08006d65 	.word	0x08006d65
 8006cc4:	08006d65 	.word	0x08006d65
 8006cc8:	08006d65 	.word	0x08006d65
 8006ccc:	08006d65 	.word	0x08006d65
 8006cd0:	08006d45 	.word	0x08006d45
 8006cd4:	08006d65 	.word	0x08006d65
 8006cd8:	08006d65 	.word	0x08006d65
 8006cdc:	08006d65 	.word	0x08006d65
 8006ce0:	08006d65 	.word	0x08006d65
 8006ce4:	08006d65 	.word	0x08006d65
 8006ce8:	08006d65 	.word	0x08006d65
 8006cec:	08006d65 	.word	0x08006d65
 8006cf0:	08006d4d 	.word	0x08006d4d
 8006cf4:	08006d65 	.word	0x08006d65
 8006cf8:	08006d65 	.word	0x08006d65
 8006cfc:	08006d65 	.word	0x08006d65
 8006d00:	08006d65 	.word	0x08006d65
 8006d04:	08006d65 	.word	0x08006d65
 8006d08:	08006d65 	.word	0x08006d65
 8006d0c:	08006d65 	.word	0x08006d65
 8006d10:	08006d55 	.word	0x08006d55
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	08006d65 	.word	0x08006d65
 8006d1c:	08006d65 	.word	0x08006d65
 8006d20:	08006d65 	.word	0x08006d65
 8006d24:	08006d65 	.word	0x08006d65
 8006d28:	08006d65 	.word	0x08006d65
 8006d2c:	08006d65 	.word	0x08006d65
 8006d30:	08006d5d 	.word	0x08006d5d
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3a:	e222      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d42:	e21e      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006d44:	2308      	movs	r3, #8
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4a:	e21a      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d52:	e216      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006d54:	2320      	movs	r3, #32
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5a:	e212      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006d5c:	2340      	movs	r3, #64	@ 0x40
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d62:	e20e      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006d64:	2380      	movs	r3, #128	@ 0x80
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6a:	e20a      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a69      	ldr	r2, [pc, #420]	@ (8006f18 <UART_SetConfig+0x33c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d130      	bne.n	8006dd8 <UART_SetConfig+0x1fc>
 8006d76:	4b67      	ldr	r3, [pc, #412]	@ (8006f14 <UART_SetConfig+0x338>)
 8006d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	d826      	bhi.n	8006dd0 <UART_SetConfig+0x1f4>
 8006d82:	a201      	add	r2, pc, #4	@ (adr r2, 8006d88 <UART_SetConfig+0x1ac>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006da1 	.word	0x08006da1
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	08006db1 	.word	0x08006db1
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006dc1 	.word	0x08006dc1
 8006d9c:	08006dc9 	.word	0x08006dc9
 8006da0:	2300      	movs	r3, #0
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da6:	e1ec      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006da8:	2304      	movs	r3, #4
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dae:	e1e8      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006db0:	2308      	movs	r3, #8
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e1e4      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006db8:	2310      	movs	r3, #16
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e1e0      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e1dc      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006dc8:	2340      	movs	r3, #64	@ 0x40
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e1d8      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006dd0:	2380      	movs	r3, #128	@ 0x80
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e1d4      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8006f1c <UART_SetConfig+0x340>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d130      	bne.n	8006e44 <UART_SetConfig+0x268>
 8006de2:	4b4c      	ldr	r3, [pc, #304]	@ (8006f14 <UART_SetConfig+0x338>)
 8006de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	d826      	bhi.n	8006e3c <UART_SetConfig+0x260>
 8006dee:	a201      	add	r2, pc, #4	@ (adr r2, 8006df4 <UART_SetConfig+0x218>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e0d 	.word	0x08006e0d
 8006df8:	08006e15 	.word	0x08006e15
 8006dfc:	08006e1d 	.word	0x08006e1d
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e12:	e1b6      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e14:	2304      	movs	r3, #4
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1a:	e1b2      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e22:	e1ae      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2a:	e1aa      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e2c:	2320      	movs	r3, #32
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e1a6      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e34:	2340      	movs	r3, #64	@ 0x40
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e1a2      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e3c:	2380      	movs	r3, #128	@ 0x80
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e42:	e19e      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a35      	ldr	r2, [pc, #212]	@ (8006f20 <UART_SetConfig+0x344>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d130      	bne.n	8006eb0 <UART_SetConfig+0x2d4>
 8006e4e:	4b31      	ldr	r3, [pc, #196]	@ (8006f14 <UART_SetConfig+0x338>)
 8006e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d826      	bhi.n	8006ea8 <UART_SetConfig+0x2cc>
 8006e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <UART_SetConfig+0x284>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006e79 	.word	0x08006e79
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e89 	.word	0x08006e89
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e99 	.word	0x08006e99
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7e:	e180      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e86:	e17c      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e8e:	e178      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e96:	e174      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006e98:	2320      	movs	r3, #32
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9e:	e170      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006ea0:	2340      	movs	r3, #64	@ 0x40
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e16c      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006ea8:	2380      	movs	r3, #128	@ 0x80
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e168      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f24 <UART_SetConfig+0x348>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d142      	bne.n	8006f40 <UART_SetConfig+0x364>
 8006eba:	4b16      	ldr	r3, [pc, #88]	@ (8006f14 <UART_SetConfig+0x338>)
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d838      	bhi.n	8006f38 <UART_SetConfig+0x35c>
 8006ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <UART_SetConfig+0x2f0>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006ee5 	.word	0x08006ee5
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	08006ef5 	.word	0x08006ef5
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f29 	.word	0x08006f29
 8006ee0:	08006f31 	.word	0x08006f31
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eea:	e14a      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef2:	e146      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efa:	e142      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f02:	e13e      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006f04:	cfff69f3 	.word	0xcfff69f3
 8006f08:	58000c00 	.word	0x58000c00
 8006f0c:	11fff4ff 	.word	0x11fff4ff
 8006f10:	40011000 	.word	0x40011000
 8006f14:	58024400 	.word	0x58024400
 8006f18:	40004400 	.word	0x40004400
 8006f1c:	40004800 	.word	0x40004800
 8006f20:	40004c00 	.word	0x40004c00
 8006f24:	40005000 	.word	0x40005000
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e128      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006f30:	2340      	movs	r3, #64	@ 0x40
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e124      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006f38:	2380      	movs	r3, #128	@ 0x80
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3e:	e120      	b.n	8007182 <UART_SetConfig+0x5a6>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4acb      	ldr	r2, [pc, #812]	@ (8007274 <UART_SetConfig+0x698>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d176      	bne.n	8007038 <UART_SetConfig+0x45c>
 8006f4a:	4bcb      	ldr	r3, [pc, #812]	@ (8007278 <UART_SetConfig+0x69c>)
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f52:	2b28      	cmp	r3, #40	@ 0x28
 8006f54:	d86c      	bhi.n	8007030 <UART_SetConfig+0x454>
 8006f56:	a201      	add	r2, pc, #4	@ (adr r2, 8006f5c <UART_SetConfig+0x380>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08007001 	.word	0x08007001
 8006f60:	08007031 	.word	0x08007031
 8006f64:	08007031 	.word	0x08007031
 8006f68:	08007031 	.word	0x08007031
 8006f6c:	08007031 	.word	0x08007031
 8006f70:	08007031 	.word	0x08007031
 8006f74:	08007031 	.word	0x08007031
 8006f78:	08007031 	.word	0x08007031
 8006f7c:	08007009 	.word	0x08007009
 8006f80:	08007031 	.word	0x08007031
 8006f84:	08007031 	.word	0x08007031
 8006f88:	08007031 	.word	0x08007031
 8006f8c:	08007031 	.word	0x08007031
 8006f90:	08007031 	.word	0x08007031
 8006f94:	08007031 	.word	0x08007031
 8006f98:	08007031 	.word	0x08007031
 8006f9c:	08007011 	.word	0x08007011
 8006fa0:	08007031 	.word	0x08007031
 8006fa4:	08007031 	.word	0x08007031
 8006fa8:	08007031 	.word	0x08007031
 8006fac:	08007031 	.word	0x08007031
 8006fb0:	08007031 	.word	0x08007031
 8006fb4:	08007031 	.word	0x08007031
 8006fb8:	08007031 	.word	0x08007031
 8006fbc:	08007019 	.word	0x08007019
 8006fc0:	08007031 	.word	0x08007031
 8006fc4:	08007031 	.word	0x08007031
 8006fc8:	08007031 	.word	0x08007031
 8006fcc:	08007031 	.word	0x08007031
 8006fd0:	08007031 	.word	0x08007031
 8006fd4:	08007031 	.word	0x08007031
 8006fd8:	08007031 	.word	0x08007031
 8006fdc:	08007021 	.word	0x08007021
 8006fe0:	08007031 	.word	0x08007031
 8006fe4:	08007031 	.word	0x08007031
 8006fe8:	08007031 	.word	0x08007031
 8006fec:	08007031 	.word	0x08007031
 8006ff0:	08007031 	.word	0x08007031
 8006ff4:	08007031 	.word	0x08007031
 8006ff8:	08007031 	.word	0x08007031
 8006ffc:	08007029 	.word	0x08007029
 8007000:	2301      	movs	r3, #1
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007006:	e0bc      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007008:	2304      	movs	r3, #4
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700e:	e0b8      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007010:	2308      	movs	r3, #8
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007016:	e0b4      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007018:	2310      	movs	r3, #16
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701e:	e0b0      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007020:	2320      	movs	r3, #32
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007026:	e0ac      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007028:	2340      	movs	r3, #64	@ 0x40
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702e:	e0a8      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007030:	2380      	movs	r3, #128	@ 0x80
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007036:	e0a4      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a8f      	ldr	r2, [pc, #572]	@ (800727c <UART_SetConfig+0x6a0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d130      	bne.n	80070a4 <UART_SetConfig+0x4c8>
 8007042:	4b8d      	ldr	r3, [pc, #564]	@ (8007278 <UART_SetConfig+0x69c>)
 8007044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	2b05      	cmp	r3, #5
 800704c:	d826      	bhi.n	800709c <UART_SetConfig+0x4c0>
 800704e:	a201      	add	r2, pc, #4	@ (adr r2, 8007054 <UART_SetConfig+0x478>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	0800706d 	.word	0x0800706d
 8007058:	08007075 	.word	0x08007075
 800705c:	0800707d 	.word	0x0800707d
 8007060:	08007085 	.word	0x08007085
 8007064:	0800708d 	.word	0x0800708d
 8007068:	08007095 	.word	0x08007095
 800706c:	2300      	movs	r3, #0
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007072:	e086      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007074:	2304      	movs	r3, #4
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707a:	e082      	b.n	8007182 <UART_SetConfig+0x5a6>
 800707c:	2308      	movs	r3, #8
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007082:	e07e      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007084:	2310      	movs	r3, #16
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e07a      	b.n	8007182 <UART_SetConfig+0x5a6>
 800708c:	2320      	movs	r3, #32
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e076      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007094:	2340      	movs	r3, #64	@ 0x40
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e072      	b.n	8007182 <UART_SetConfig+0x5a6>
 800709c:	2380      	movs	r3, #128	@ 0x80
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e06e      	b.n	8007182 <UART_SetConfig+0x5a6>
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a75      	ldr	r2, [pc, #468]	@ (8007280 <UART_SetConfig+0x6a4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d130      	bne.n	8007110 <UART_SetConfig+0x534>
 80070ae:	4b72      	ldr	r3, [pc, #456]	@ (8007278 <UART_SetConfig+0x69c>)
 80070b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	2b05      	cmp	r3, #5
 80070b8:	d826      	bhi.n	8007108 <UART_SetConfig+0x52c>
 80070ba:	a201      	add	r2, pc, #4	@ (adr r2, 80070c0 <UART_SetConfig+0x4e4>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070d9 	.word	0x080070d9
 80070c4:	080070e1 	.word	0x080070e1
 80070c8:	080070e9 	.word	0x080070e9
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	080070f9 	.word	0x080070f9
 80070d4:	08007101 	.word	0x08007101
 80070d8:	2300      	movs	r3, #0
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070de:	e050      	b.n	8007182 <UART_SetConfig+0x5a6>
 80070e0:	2304      	movs	r3, #4
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e6:	e04c      	b.n	8007182 <UART_SetConfig+0x5a6>
 80070e8:	2308      	movs	r3, #8
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ee:	e048      	b.n	8007182 <UART_SetConfig+0x5a6>
 80070f0:	2310      	movs	r3, #16
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e044      	b.n	8007182 <UART_SetConfig+0x5a6>
 80070f8:	2320      	movs	r3, #32
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e040      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007100:	2340      	movs	r3, #64	@ 0x40
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007106:	e03c      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007108:	2380      	movs	r3, #128	@ 0x80
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e038      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a5b      	ldr	r2, [pc, #364]	@ (8007284 <UART_SetConfig+0x6a8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d130      	bne.n	800717c <UART_SetConfig+0x5a0>
 800711a:	4b57      	ldr	r3, [pc, #348]	@ (8007278 <UART_SetConfig+0x69c>)
 800711c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	2b05      	cmp	r3, #5
 8007124:	d826      	bhi.n	8007174 <UART_SetConfig+0x598>
 8007126:	a201      	add	r2, pc, #4	@ (adr r2, 800712c <UART_SetConfig+0x550>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007145 	.word	0x08007145
 8007130:	0800714d 	.word	0x0800714d
 8007134:	08007155 	.word	0x08007155
 8007138:	0800715d 	.word	0x0800715d
 800713c:	08007165 	.word	0x08007165
 8007140:	0800716d 	.word	0x0800716d
 8007144:	2302      	movs	r3, #2
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714a:	e01a      	b.n	8007182 <UART_SetConfig+0x5a6>
 800714c:	2304      	movs	r3, #4
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007152:	e016      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007154:	2308      	movs	r3, #8
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800715a:	e012      	b.n	8007182 <UART_SetConfig+0x5a6>
 800715c:	2310      	movs	r3, #16
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007162:	e00e      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007164:	2320      	movs	r3, #32
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716a:	e00a      	b.n	8007182 <UART_SetConfig+0x5a6>
 800716c:	2340      	movs	r3, #64	@ 0x40
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007172:	e006      	b.n	8007182 <UART_SetConfig+0x5a6>
 8007174:	2380      	movs	r3, #128	@ 0x80
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717a:	e002      	b.n	8007182 <UART_SetConfig+0x5a6>
 800717c:	2380      	movs	r3, #128	@ 0x80
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a3f      	ldr	r2, [pc, #252]	@ (8007284 <UART_SetConfig+0x6a8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	f040 80f8 	bne.w	800737e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800718e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007192:	2b20      	cmp	r3, #32
 8007194:	dc46      	bgt.n	8007224 <UART_SetConfig+0x648>
 8007196:	2b02      	cmp	r3, #2
 8007198:	f2c0 8082 	blt.w	80072a0 <UART_SetConfig+0x6c4>
 800719c:	3b02      	subs	r3, #2
 800719e:	2b1e      	cmp	r3, #30
 80071a0:	d87e      	bhi.n	80072a0 <UART_SetConfig+0x6c4>
 80071a2:	a201      	add	r2, pc, #4	@ (adr r2, 80071a8 <UART_SetConfig+0x5cc>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	0800722b 	.word	0x0800722b
 80071ac:	080072a1 	.word	0x080072a1
 80071b0:	08007233 	.word	0x08007233
 80071b4:	080072a1 	.word	0x080072a1
 80071b8:	080072a1 	.word	0x080072a1
 80071bc:	080072a1 	.word	0x080072a1
 80071c0:	08007243 	.word	0x08007243
 80071c4:	080072a1 	.word	0x080072a1
 80071c8:	080072a1 	.word	0x080072a1
 80071cc:	080072a1 	.word	0x080072a1
 80071d0:	080072a1 	.word	0x080072a1
 80071d4:	080072a1 	.word	0x080072a1
 80071d8:	080072a1 	.word	0x080072a1
 80071dc:	080072a1 	.word	0x080072a1
 80071e0:	08007253 	.word	0x08007253
 80071e4:	080072a1 	.word	0x080072a1
 80071e8:	080072a1 	.word	0x080072a1
 80071ec:	080072a1 	.word	0x080072a1
 80071f0:	080072a1 	.word	0x080072a1
 80071f4:	080072a1 	.word	0x080072a1
 80071f8:	080072a1 	.word	0x080072a1
 80071fc:	080072a1 	.word	0x080072a1
 8007200:	080072a1 	.word	0x080072a1
 8007204:	080072a1 	.word	0x080072a1
 8007208:	080072a1 	.word	0x080072a1
 800720c:	080072a1 	.word	0x080072a1
 8007210:	080072a1 	.word	0x080072a1
 8007214:	080072a1 	.word	0x080072a1
 8007218:	080072a1 	.word	0x080072a1
 800721c:	080072a1 	.word	0x080072a1
 8007220:	08007293 	.word	0x08007293
 8007224:	2b40      	cmp	r3, #64	@ 0x40
 8007226:	d037      	beq.n	8007298 <UART_SetConfig+0x6bc>
 8007228:	e03a      	b.n	80072a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800722a:	f7fe f969 	bl	8005500 <HAL_RCCEx_GetD3PCLK1Freq>
 800722e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007230:	e03c      	b.n	80072ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe f978 	bl	800552c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800723c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007240:	e034      	b.n	80072ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007242:	f107 0318 	add.w	r3, r7, #24
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fac4 	bl	80057d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007250:	e02c      	b.n	80072ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007252:	4b09      	ldr	r3, [pc, #36]	@ (8007278 <UART_SetConfig+0x69c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d016      	beq.n	800728c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800725e:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <UART_SetConfig+0x69c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	08db      	lsrs	r3, r3, #3
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	4a07      	ldr	r2, [pc, #28]	@ (8007288 <UART_SetConfig+0x6ac>)
 800726a:	fa22 f303 	lsr.w	r3, r2, r3
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007270:	e01c      	b.n	80072ac <UART_SetConfig+0x6d0>
 8007272:	bf00      	nop
 8007274:	40011400 	.word	0x40011400
 8007278:	58024400 	.word	0x58024400
 800727c:	40007800 	.word	0x40007800
 8007280:	40007c00 	.word	0x40007c00
 8007284:	58000c00 	.word	0x58000c00
 8007288:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800728c:	4b9d      	ldr	r3, [pc, #628]	@ (8007504 <UART_SetConfig+0x928>)
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007290:	e00c      	b.n	80072ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007292:	4b9d      	ldr	r3, [pc, #628]	@ (8007508 <UART_SetConfig+0x92c>)
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007296:	e009      	b.n	80072ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729e:	e005      	b.n	80072ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80072aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 81de 	beq.w	8007670 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	4a94      	ldr	r2, [pc, #592]	@ (800750c <UART_SetConfig+0x930>)
 80072ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072be:	461a      	mov	r2, r3
 80072c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80072c6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4413      	add	r3, r2
 80072d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d305      	bcc.n	80072e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d903      	bls.n	80072ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072ea:	e1c1      	b.n	8007670 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ee:	2200      	movs	r2, #0
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	60fa      	str	r2, [r7, #12]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f8:	4a84      	ldr	r2, [pc, #528]	@ (800750c <UART_SetConfig+0x930>)
 80072fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2200      	movs	r2, #0
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800730a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800730e:	f7f9 f9fb 	bl	8000708 <__aeabi_uldivmod>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4610      	mov	r0, r2
 8007318:	4619      	mov	r1, r3
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	020b      	lsls	r3, r1, #8
 8007324:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007328:	0202      	lsls	r2, r0, #8
 800732a:	6979      	ldr	r1, [r7, #20]
 800732c:	6849      	ldr	r1, [r1, #4]
 800732e:	0849      	lsrs	r1, r1, #1
 8007330:	2000      	movs	r0, #0
 8007332:	460c      	mov	r4, r1
 8007334:	4605      	mov	r5, r0
 8007336:	eb12 0804 	adds.w	r8, r2, r4
 800733a:	eb43 0905 	adc.w	r9, r3, r5
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	469a      	mov	sl, r3
 8007346:	4693      	mov	fp, r2
 8007348:	4652      	mov	r2, sl
 800734a:	465b      	mov	r3, fp
 800734c:	4640      	mov	r0, r8
 800734e:	4649      	mov	r1, r9
 8007350:	f7f9 f9da 	bl	8000708 <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4613      	mov	r3, r2
 800735a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007362:	d308      	bcc.n	8007376 <UART_SetConfig+0x79a>
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800736a:	d204      	bcs.n	8007376 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007372:	60da      	str	r2, [r3, #12]
 8007374:	e17c      	b.n	8007670 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800737c:	e178      	b.n	8007670 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007386:	f040 80c5 	bne.w	8007514 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800738a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800738e:	2b20      	cmp	r3, #32
 8007390:	dc48      	bgt.n	8007424 <UART_SetConfig+0x848>
 8007392:	2b00      	cmp	r3, #0
 8007394:	db7b      	blt.n	800748e <UART_SetConfig+0x8b2>
 8007396:	2b20      	cmp	r3, #32
 8007398:	d879      	bhi.n	800748e <UART_SetConfig+0x8b2>
 800739a:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <UART_SetConfig+0x7c4>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	0800742b 	.word	0x0800742b
 80073a4:	08007433 	.word	0x08007433
 80073a8:	0800748f 	.word	0x0800748f
 80073ac:	0800748f 	.word	0x0800748f
 80073b0:	0800743b 	.word	0x0800743b
 80073b4:	0800748f 	.word	0x0800748f
 80073b8:	0800748f 	.word	0x0800748f
 80073bc:	0800748f 	.word	0x0800748f
 80073c0:	0800744b 	.word	0x0800744b
 80073c4:	0800748f 	.word	0x0800748f
 80073c8:	0800748f 	.word	0x0800748f
 80073cc:	0800748f 	.word	0x0800748f
 80073d0:	0800748f 	.word	0x0800748f
 80073d4:	0800748f 	.word	0x0800748f
 80073d8:	0800748f 	.word	0x0800748f
 80073dc:	0800748f 	.word	0x0800748f
 80073e0:	0800745b 	.word	0x0800745b
 80073e4:	0800748f 	.word	0x0800748f
 80073e8:	0800748f 	.word	0x0800748f
 80073ec:	0800748f 	.word	0x0800748f
 80073f0:	0800748f 	.word	0x0800748f
 80073f4:	0800748f 	.word	0x0800748f
 80073f8:	0800748f 	.word	0x0800748f
 80073fc:	0800748f 	.word	0x0800748f
 8007400:	0800748f 	.word	0x0800748f
 8007404:	0800748f 	.word	0x0800748f
 8007408:	0800748f 	.word	0x0800748f
 800740c:	0800748f 	.word	0x0800748f
 8007410:	0800748f 	.word	0x0800748f
 8007414:	0800748f 	.word	0x0800748f
 8007418:	0800748f 	.word	0x0800748f
 800741c:	0800748f 	.word	0x0800748f
 8007420:	08007481 	.word	0x08007481
 8007424:	2b40      	cmp	r3, #64	@ 0x40
 8007426:	d02e      	beq.n	8007486 <UART_SetConfig+0x8aa>
 8007428:	e031      	b.n	800748e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800742a:	f7fc fe33 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 800742e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007430:	e033      	b.n	800749a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007432:	f7fc fe45 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 8007436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007438:	e02f      	b.n	800749a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800743a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe f874 	bl	800552c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007448:	e027      	b.n	800749a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800744a:	f107 0318 	add.w	r3, r7, #24
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe f9c0 	bl	80057d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007458:	e01f      	b.n	800749a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800745a:	4b2d      	ldr	r3, [pc, #180]	@ (8007510 <UART_SetConfig+0x934>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007466:	4b2a      	ldr	r3, [pc, #168]	@ (8007510 <UART_SetConfig+0x934>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	08db      	lsrs	r3, r3, #3
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	4a24      	ldr	r2, [pc, #144]	@ (8007504 <UART_SetConfig+0x928>)
 8007472:	fa22 f303 	lsr.w	r3, r2, r3
 8007476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007478:	e00f      	b.n	800749a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800747a:	4b22      	ldr	r3, [pc, #136]	@ (8007504 <UART_SetConfig+0x928>)
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800747e:	e00c      	b.n	800749a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007480:	4b21      	ldr	r3, [pc, #132]	@ (8007508 <UART_SetConfig+0x92c>)
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007484:	e009      	b.n	800749a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800748a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800748c:	e005      	b.n	800749a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800749a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80e7 	beq.w	8007670 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a6:	4a19      	ldr	r2, [pc, #100]	@ (800750c <UART_SetConfig+0x930>)
 80074a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b4:	005a      	lsls	r2, r3, #1
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	441a      	add	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ca:	2b0f      	cmp	r3, #15
 80074cc:	d916      	bls.n	80074fc <UART_SetConfig+0x920>
 80074ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d4:	d212      	bcs.n	80074fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f023 030f 	bic.w	r3, r3, #15
 80074de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80074ee:	4313      	orrs	r3, r2
 80074f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	e0b9      	b.n	8007670 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007502:	e0b5      	b.n	8007670 <UART_SetConfig+0xa94>
 8007504:	03d09000 	.word	0x03d09000
 8007508:	003d0900 	.word	0x003d0900
 800750c:	0800c7d0 	.word	0x0800c7d0
 8007510:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007514:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007518:	2b20      	cmp	r3, #32
 800751a:	dc49      	bgt.n	80075b0 <UART_SetConfig+0x9d4>
 800751c:	2b00      	cmp	r3, #0
 800751e:	db7c      	blt.n	800761a <UART_SetConfig+0xa3e>
 8007520:	2b20      	cmp	r3, #32
 8007522:	d87a      	bhi.n	800761a <UART_SetConfig+0xa3e>
 8007524:	a201      	add	r2, pc, #4	@ (adr r2, 800752c <UART_SetConfig+0x950>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	080075b7 	.word	0x080075b7
 8007530:	080075bf 	.word	0x080075bf
 8007534:	0800761b 	.word	0x0800761b
 8007538:	0800761b 	.word	0x0800761b
 800753c:	080075c7 	.word	0x080075c7
 8007540:	0800761b 	.word	0x0800761b
 8007544:	0800761b 	.word	0x0800761b
 8007548:	0800761b 	.word	0x0800761b
 800754c:	080075d7 	.word	0x080075d7
 8007550:	0800761b 	.word	0x0800761b
 8007554:	0800761b 	.word	0x0800761b
 8007558:	0800761b 	.word	0x0800761b
 800755c:	0800761b 	.word	0x0800761b
 8007560:	0800761b 	.word	0x0800761b
 8007564:	0800761b 	.word	0x0800761b
 8007568:	0800761b 	.word	0x0800761b
 800756c:	080075e7 	.word	0x080075e7
 8007570:	0800761b 	.word	0x0800761b
 8007574:	0800761b 	.word	0x0800761b
 8007578:	0800761b 	.word	0x0800761b
 800757c:	0800761b 	.word	0x0800761b
 8007580:	0800761b 	.word	0x0800761b
 8007584:	0800761b 	.word	0x0800761b
 8007588:	0800761b 	.word	0x0800761b
 800758c:	0800761b 	.word	0x0800761b
 8007590:	0800761b 	.word	0x0800761b
 8007594:	0800761b 	.word	0x0800761b
 8007598:	0800761b 	.word	0x0800761b
 800759c:	0800761b 	.word	0x0800761b
 80075a0:	0800761b 	.word	0x0800761b
 80075a4:	0800761b 	.word	0x0800761b
 80075a8:	0800761b 	.word	0x0800761b
 80075ac:	0800760d 	.word	0x0800760d
 80075b0:	2b40      	cmp	r3, #64	@ 0x40
 80075b2:	d02e      	beq.n	8007612 <UART_SetConfig+0xa36>
 80075b4:	e031      	b.n	800761a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b6:	f7fc fd6d 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 80075ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075bc:	e033      	b.n	8007626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075be:	f7fc fd7f 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 80075c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075c4:	e02f      	b.n	8007626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fd ffae 	bl	800552c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075d4:	e027      	b.n	8007626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075d6:	f107 0318 	add.w	r3, r7, #24
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe f8fa 	bl	80057d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e4:	e01f      	b.n	8007626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e6:	4b2d      	ldr	r3, [pc, #180]	@ (800769c <UART_SetConfig+0xac0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075f2:	4b2a      	ldr	r3, [pc, #168]	@ (800769c <UART_SetConfig+0xac0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	08db      	lsrs	r3, r3, #3
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	4a28      	ldr	r2, [pc, #160]	@ (80076a0 <UART_SetConfig+0xac4>)
 80075fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007604:	e00f      	b.n	8007626 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007606:	4b26      	ldr	r3, [pc, #152]	@ (80076a0 <UART_SetConfig+0xac4>)
 8007608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800760a:	e00c      	b.n	8007626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800760c:	4b25      	ldr	r3, [pc, #148]	@ (80076a4 <UART_SetConfig+0xac8>)
 800760e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007610:	e009      	b.n	8007626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007618:	e005      	b.n	8007626 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007624:	bf00      	nop
    }

    if (pclk != 0U)
 8007626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007628:	2b00      	cmp	r3, #0
 800762a:	d021      	beq.n	8007670 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007630:	4a1d      	ldr	r2, [pc, #116]	@ (80076a8 <UART_SetConfig+0xacc>)
 8007632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007636:	461a      	mov	r2, r3
 8007638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763a:	fbb3 f2f2 	udiv	r2, r3, r2
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	441a      	add	r2, r3
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	fbb2 f3f3 	udiv	r3, r2, r3
 800764e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	2b0f      	cmp	r3, #15
 8007654:	d909      	bls.n	800766a <UART_SetConfig+0xa8e>
 8007656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800765c:	d205      	bcs.n	800766a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800765e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007660:	b29a      	uxth	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60da      	str	r2, [r3, #12]
 8007668:	e002      	b.n	8007670 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2201      	movs	r2, #1
 8007674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2201      	movs	r2, #1
 800767c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2200      	movs	r2, #0
 8007684:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2200      	movs	r2, #0
 800768a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800768c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007690:	4618      	mov	r0, r3
 8007692:	3748      	adds	r7, #72	@ 0x48
 8007694:	46bd      	mov	sp, r7
 8007696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800769a:	bf00      	nop
 800769c:	58024400 	.word	0x58024400
 80076a0:	03d09000 	.word	0x03d09000
 80076a4:	003d0900 	.word	0x003d0900
 80076a8:	0800c7d0 	.word	0x0800c7d0

080076ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00a      	beq.n	800771a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007740:	f003 0310 	and.w	r3, r3, #16
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01a      	beq.n	80077c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077aa:	d10a      	bne.n	80077c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	605a      	str	r2, [r3, #4]
  }
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b098      	sub	sp, #96	@ 0x60
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007800:	f7fb f8a4 	bl	800294c <HAL_GetTick>
 8007804:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b08      	cmp	r3, #8
 8007812:	d12f      	bne.n	8007874 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800781c:	2200      	movs	r2, #0
 800781e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f88e 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d022      	beq.n	8007874 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800783c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007842:	653b      	str	r3, [r7, #80]	@ 0x50
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784c:	647b      	str	r3, [r7, #68]	@ 0x44
 800784e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800785a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e6      	bne.n	800782e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e063      	b.n	800793c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b04      	cmp	r3, #4
 8007880:	d149      	bne.n	8007916 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007882:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800788a:	2200      	movs	r2, #0
 800788c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f857 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d03c      	beq.n	8007916 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	623b      	str	r3, [r7, #32]
   return(result);
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80078bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e6      	bne.n	800789c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3308      	adds	r3, #8
 80078d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3308      	adds	r3, #8
 80078ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078ee:	61fa      	str	r2, [r7, #28]
 80078f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	617b      	str	r3, [r7, #20]
   return(result);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e5      	bne.n	80078ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e012      	b.n	800793c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3758      	adds	r7, #88	@ 0x58
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007954:	e04f      	b.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d04b      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795e:	f7fa fff5 	bl	800294c <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	429a      	cmp	r2, r3
 800796c:	d302      	bcc.n	8007974 <UART_WaitOnFlagUntilTimeout+0x30>
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e04e      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d037      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b80      	cmp	r3, #128	@ 0x80
 800798a:	d034      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b40      	cmp	r3, #64	@ 0x40
 8007990:	d031      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b08      	cmp	r3, #8
 800799e:	d110      	bne.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2208      	movs	r2, #8
 80079a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f839 	bl	8007a20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2208      	movs	r2, #8
 80079b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e029      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d0:	d111      	bne.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f81f 	bl	8007a20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e00f      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4013      	ands	r3, r2
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d0a0      	beq.n	8007956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b095      	sub	sp, #84	@ 0x54
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e6      	bne.n	8007a28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae8 <UART_EndRxTransfer+0xc8>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d118      	bne.n	8007ac8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab4:	61bb      	str	r3, [r7, #24]
 8007ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6979      	ldr	r1, [r7, #20]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007adc:	bf00      	nop
 8007ade:	3754      	adds	r7, #84	@ 0x54
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	effffffe 	.word	0xeffffffe

08007aec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_UARTEx_DisableFifoMode+0x16>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e027      	b.n	8007b52 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2224      	movs	r2, #36	@ 0x24
 8007b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e02d      	b.n	8007bd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2224      	movs	r2, #36	@ 0x24
 8007b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f850 	bl	8007c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e02d      	b.n	8007c4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2224      	movs	r2, #36	@ 0x24
 8007bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f812 	bl	8007c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d108      	bne.n	8007c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c78:	e031      	b.n	8007cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c7a:	2310      	movs	r3, #16
 8007c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c7e:	2310      	movs	r3, #16
 8007c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	0e5b      	lsrs	r3, r3, #25
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	0f5b      	lsrs	r3, r3, #29
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	7b3a      	ldrb	r2, [r7, #12]
 8007ca6:	4911      	ldr	r1, [pc, #68]	@ (8007cec <UARTEx_SetNbDataToProcess+0x94>)
 8007ca8:	5c8a      	ldrb	r2, [r1, r2]
 8007caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cae:	7b3a      	ldrb	r2, [r7, #12]
 8007cb0:	490f      	ldr	r1, [pc, #60]	@ (8007cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8007cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	7b7a      	ldrb	r2, [r7, #13]
 8007cc4:	4909      	ldr	r1, [pc, #36]	@ (8007cec <UARTEx_SetNbDataToProcess+0x94>)
 8007cc6:	5c8a      	ldrb	r2, [r1, r2]
 8007cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ccc:	7b7a      	ldrb	r2, [r7, #13]
 8007cce:	4908      	ldr	r1, [pc, #32]	@ (8007cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8007cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007cde:	bf00      	nop
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	0800c7e8 	.word	0x0800c7e8
 8007cf0:	0800c7f0 	.word	0x0800c7f0

08007cf4 <__cvt>:
 8007cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf6:	ed2d 8b02 	vpush	{d8}
 8007cfa:	eeb0 8b40 	vmov.f64	d8, d0
 8007cfe:	b085      	sub	sp, #20
 8007d00:	4617      	mov	r7, r2
 8007d02:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007d04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d06:	ee18 2a90 	vmov	r2, s17
 8007d0a:	f025 0520 	bic.w	r5, r5, #32
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	bfb6      	itet	lt
 8007d12:	222d      	movlt	r2, #45	@ 0x2d
 8007d14:	2200      	movge	r2, #0
 8007d16:	eeb1 8b40 	vneglt.f64	d8, d0
 8007d1a:	2d46      	cmp	r5, #70	@ 0x46
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	d004      	beq.n	8007d2c <__cvt+0x38>
 8007d22:	2d45      	cmp	r5, #69	@ 0x45
 8007d24:	d100      	bne.n	8007d28 <__cvt+0x34>
 8007d26:	3401      	adds	r4, #1
 8007d28:	2102      	movs	r1, #2
 8007d2a:	e000      	b.n	8007d2e <__cvt+0x3a>
 8007d2c:	2103      	movs	r1, #3
 8007d2e:	ab03      	add	r3, sp, #12
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	ab02      	add	r3, sp, #8
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	4622      	mov	r2, r4
 8007d38:	4633      	mov	r3, r6
 8007d3a:	eeb0 0b48 	vmov.f64	d0, d8
 8007d3e:	f001 f86f 	bl	8008e20 <_dtoa_r>
 8007d42:	2d47      	cmp	r5, #71	@ 0x47
 8007d44:	d114      	bne.n	8007d70 <__cvt+0x7c>
 8007d46:	07fb      	lsls	r3, r7, #31
 8007d48:	d50a      	bpl.n	8007d60 <__cvt+0x6c>
 8007d4a:	1902      	adds	r2, r0, r4
 8007d4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d54:	bf08      	it	eq
 8007d56:	9203      	streq	r2, [sp, #12]
 8007d58:	2130      	movs	r1, #48	@ 0x30
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d319      	bcc.n	8007d94 <__cvt+0xa0>
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d64:	1a1b      	subs	r3, r3, r0
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	b005      	add	sp, #20
 8007d6a:	ecbd 8b02 	vpop	{d8}
 8007d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d70:	2d46      	cmp	r5, #70	@ 0x46
 8007d72:	eb00 0204 	add.w	r2, r0, r4
 8007d76:	d1e9      	bne.n	8007d4c <__cvt+0x58>
 8007d78:	7803      	ldrb	r3, [r0, #0]
 8007d7a:	2b30      	cmp	r3, #48	@ 0x30
 8007d7c:	d107      	bne.n	8007d8e <__cvt+0x9a>
 8007d7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d86:	bf1c      	itt	ne
 8007d88:	f1c4 0401 	rsbne	r4, r4, #1
 8007d8c:	6034      	strne	r4, [r6, #0]
 8007d8e:	6833      	ldr	r3, [r6, #0]
 8007d90:	441a      	add	r2, r3
 8007d92:	e7db      	b.n	8007d4c <__cvt+0x58>
 8007d94:	1c5c      	adds	r4, r3, #1
 8007d96:	9403      	str	r4, [sp, #12]
 8007d98:	7019      	strb	r1, [r3, #0]
 8007d9a:	e7de      	b.n	8007d5a <__cvt+0x66>

08007d9c <__exponent>:
 8007d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	bfba      	itte	lt
 8007da2:	4249      	neglt	r1, r1
 8007da4:	232d      	movlt	r3, #45	@ 0x2d
 8007da6:	232b      	movge	r3, #43	@ 0x2b
 8007da8:	2909      	cmp	r1, #9
 8007daa:	7002      	strb	r2, [r0, #0]
 8007dac:	7043      	strb	r3, [r0, #1]
 8007dae:	dd29      	ble.n	8007e04 <__exponent+0x68>
 8007db0:	f10d 0307 	add.w	r3, sp, #7
 8007db4:	461d      	mov	r5, r3
 8007db6:	270a      	movs	r7, #10
 8007db8:	461a      	mov	r2, r3
 8007dba:	fbb1 f6f7 	udiv	r6, r1, r7
 8007dbe:	fb07 1416 	mls	r4, r7, r6, r1
 8007dc2:	3430      	adds	r4, #48	@ 0x30
 8007dc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007dc8:	460c      	mov	r4, r1
 8007dca:	2c63      	cmp	r4, #99	@ 0x63
 8007dcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	dcf1      	bgt.n	8007db8 <__exponent+0x1c>
 8007dd4:	3130      	adds	r1, #48	@ 0x30
 8007dd6:	1e94      	subs	r4, r2, #2
 8007dd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ddc:	1c41      	adds	r1, r0, #1
 8007dde:	4623      	mov	r3, r4
 8007de0:	42ab      	cmp	r3, r5
 8007de2:	d30a      	bcc.n	8007dfa <__exponent+0x5e>
 8007de4:	f10d 0309 	add.w	r3, sp, #9
 8007de8:	1a9b      	subs	r3, r3, r2
 8007dea:	42ac      	cmp	r4, r5
 8007dec:	bf88      	it	hi
 8007dee:	2300      	movhi	r3, #0
 8007df0:	3302      	adds	r3, #2
 8007df2:	4403      	add	r3, r0
 8007df4:	1a18      	subs	r0, r3, r0
 8007df6:	b003      	add	sp, #12
 8007df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007dfe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e02:	e7ed      	b.n	8007de0 <__exponent+0x44>
 8007e04:	2330      	movs	r3, #48	@ 0x30
 8007e06:	3130      	adds	r1, #48	@ 0x30
 8007e08:	7083      	strb	r3, [r0, #2]
 8007e0a:	70c1      	strb	r1, [r0, #3]
 8007e0c:	1d03      	adds	r3, r0, #4
 8007e0e:	e7f1      	b.n	8007df4 <__exponent+0x58>

08007e10 <_printf_float>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	b08d      	sub	sp, #52	@ 0x34
 8007e16:	460c      	mov	r4, r1
 8007e18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	461f      	mov	r7, r3
 8007e20:	4605      	mov	r5, r0
 8007e22:	f000 fee9 	bl	8008bf8 <_localeconv_r>
 8007e26:	f8d0 b000 	ldr.w	fp, [r0]
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f7f8 faa8 	bl	8000380 <strlen>
 8007e30:	2300      	movs	r3, #0
 8007e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e34:	f8d8 3000 	ldr.w	r3, [r8]
 8007e38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	9005      	str	r0, [sp, #20]
 8007e40:	3307      	adds	r3, #7
 8007e42:	f023 0307 	bic.w	r3, r3, #7
 8007e46:	f103 0108 	add.w	r1, r3, #8
 8007e4a:	f8c8 1000 	str.w	r1, [r8]
 8007e4e:	ed93 0b00 	vldr	d0, [r3]
 8007e52:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80080b0 <_printf_float+0x2a0>
 8007e56:	eeb0 7bc0 	vabs.f64	d7, d0
 8007e5a:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e62:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007e66:	dd24      	ble.n	8007eb2 <_printf_float+0xa2>
 8007e68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e70:	d502      	bpl.n	8007e78 <_printf_float+0x68>
 8007e72:	232d      	movs	r3, #45	@ 0x2d
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e78:	498f      	ldr	r1, [pc, #572]	@ (80080b8 <_printf_float+0x2a8>)
 8007e7a:	4b90      	ldr	r3, [pc, #576]	@ (80080bc <_printf_float+0x2ac>)
 8007e7c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007e80:	bf94      	ite	ls
 8007e82:	4688      	movls	r8, r1
 8007e84:	4698      	movhi	r8, r3
 8007e86:	f022 0204 	bic.w	r2, r2, #4
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	6022      	str	r2, [r4, #0]
 8007e90:	f04f 0a00 	mov.w	sl, #0
 8007e94:	9700      	str	r7, [sp, #0]
 8007e96:	4633      	mov	r3, r6
 8007e98:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 f9d1 	bl	8008244 <_printf_common>
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	f040 8089 	bne.w	8007fba <_printf_float+0x1aa>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	b00d      	add	sp, #52	@ 0x34
 8007eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb2:	eeb4 0b40 	vcmp.f64	d0, d0
 8007eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eba:	d709      	bvc.n	8007ed0 <_printf_float+0xc0>
 8007ebc:	ee10 3a90 	vmov	r3, s1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bfbc      	itt	lt
 8007ec4:	232d      	movlt	r3, #45	@ 0x2d
 8007ec6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007eca:	497d      	ldr	r1, [pc, #500]	@ (80080c0 <_printf_float+0x2b0>)
 8007ecc:	4b7d      	ldr	r3, [pc, #500]	@ (80080c4 <_printf_float+0x2b4>)
 8007ece:	e7d5      	b.n	8007e7c <_printf_float+0x6c>
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	1c59      	adds	r1, r3, #1
 8007ed4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007ed8:	d139      	bne.n	8007f4e <_printf_float+0x13e>
 8007eda:	2306      	movs	r3, #6
 8007edc:	6063      	str	r3, [r4, #4]
 8007ede:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	9303      	str	r3, [sp, #12]
 8007ee8:	ab0a      	add	r3, sp, #40	@ 0x28
 8007eea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007eee:	ab09      	add	r3, sp, #36	@ 0x24
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	6861      	ldr	r1, [r4, #4]
 8007ef4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7ff fefb 	bl	8007cf4 <__cvt>
 8007efe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f04:	4680      	mov	r8, r0
 8007f06:	d129      	bne.n	8007f5c <_printf_float+0x14c>
 8007f08:	1cc8      	adds	r0, r1, #3
 8007f0a:	db02      	blt.n	8007f12 <_printf_float+0x102>
 8007f0c:	6863      	ldr	r3, [r4, #4]
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	dd41      	ble.n	8007f96 <_printf_float+0x186>
 8007f12:	f1a9 0902 	sub.w	r9, r9, #2
 8007f16:	fa5f f989 	uxtb.w	r9, r9
 8007f1a:	3901      	subs	r1, #1
 8007f1c:	464a      	mov	r2, r9
 8007f1e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007f22:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f24:	f7ff ff3a 	bl	8007d9c <__exponent>
 8007f28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f2a:	1813      	adds	r3, r2, r0
 8007f2c:	2a01      	cmp	r2, #1
 8007f2e:	4682      	mov	sl, r0
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	dc02      	bgt.n	8007f3a <_printf_float+0x12a>
 8007f34:	6822      	ldr	r2, [r4, #0]
 8007f36:	07d2      	lsls	r2, r2, #31
 8007f38:	d501      	bpl.n	8007f3e <_printf_float+0x12e>
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0a6      	beq.n	8007e94 <_printf_float+0x84>
 8007f46:	232d      	movs	r3, #45	@ 0x2d
 8007f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f4c:	e7a2      	b.n	8007e94 <_printf_float+0x84>
 8007f4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f52:	d1c4      	bne.n	8007ede <_printf_float+0xce>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1c2      	bne.n	8007ede <_printf_float+0xce>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7bf      	b.n	8007edc <_printf_float+0xcc>
 8007f5c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007f60:	d9db      	bls.n	8007f1a <_printf_float+0x10a>
 8007f62:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007f66:	d118      	bne.n	8007f9a <_printf_float+0x18a>
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	6863      	ldr	r3, [r4, #4]
 8007f6c:	dd0b      	ble.n	8007f86 <_printf_float+0x176>
 8007f6e:	6121      	str	r1, [r4, #16]
 8007f70:	b913      	cbnz	r3, 8007f78 <_printf_float+0x168>
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	07d0      	lsls	r0, r2, #31
 8007f76:	d502      	bpl.n	8007f7e <_printf_float+0x16e>
 8007f78:	3301      	adds	r3, #1
 8007f7a:	440b      	add	r3, r1
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f80:	f04f 0a00 	mov.w	sl, #0
 8007f84:	e7db      	b.n	8007f3e <_printf_float+0x12e>
 8007f86:	b913      	cbnz	r3, 8007f8e <_printf_float+0x17e>
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	07d2      	lsls	r2, r2, #31
 8007f8c:	d501      	bpl.n	8007f92 <_printf_float+0x182>
 8007f8e:	3302      	adds	r3, #2
 8007f90:	e7f4      	b.n	8007f7c <_printf_float+0x16c>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e7f2      	b.n	8007f7c <_printf_float+0x16c>
 8007f96:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	db05      	blt.n	8007fac <_printf_float+0x19c>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	6121      	str	r1, [r4, #16]
 8007fa4:	07d8      	lsls	r0, r3, #31
 8007fa6:	d5ea      	bpl.n	8007f7e <_printf_float+0x16e>
 8007fa8:	1c4b      	adds	r3, r1, #1
 8007faa:	e7e7      	b.n	8007f7c <_printf_float+0x16c>
 8007fac:	2900      	cmp	r1, #0
 8007fae:	bfd4      	ite	le
 8007fb0:	f1c1 0202 	rsble	r2, r1, #2
 8007fb4:	2201      	movgt	r2, #1
 8007fb6:	4413      	add	r3, r2
 8007fb8:	e7e0      	b.n	8007f7c <_printf_float+0x16c>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	055a      	lsls	r2, r3, #21
 8007fbe:	d407      	bmi.n	8007fd0 <_printf_float+0x1c0>
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	4642      	mov	r2, r8
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d12a      	bne.n	8008024 <_printf_float+0x214>
 8007fce:	e76b      	b.n	8007ea8 <_printf_float+0x98>
 8007fd0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007fd4:	f240 80e0 	bls.w	8008198 <_printf_float+0x388>
 8007fd8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007fdc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe4:	d133      	bne.n	800804e <_printf_float+0x23e>
 8007fe6:	4a38      	ldr	r2, [pc, #224]	@ (80080c8 <_printf_float+0x2b8>)
 8007fe8:	2301      	movs	r3, #1
 8007fea:	4631      	mov	r1, r6
 8007fec:	4628      	mov	r0, r5
 8007fee:	47b8      	blx	r7
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	f43f af59 	beq.w	8007ea8 <_printf_float+0x98>
 8007ff6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007ffa:	4543      	cmp	r3, r8
 8007ffc:	db02      	blt.n	8008004 <_printf_float+0x1f4>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	07d8      	lsls	r0, r3, #31
 8008002:	d50f      	bpl.n	8008024 <_printf_float+0x214>
 8008004:	9b05      	ldr	r3, [sp, #20]
 8008006:	465a      	mov	r2, fp
 8008008:	4631      	mov	r1, r6
 800800a:	4628      	mov	r0, r5
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	f43f af4a 	beq.w	8007ea8 <_printf_float+0x98>
 8008014:	f04f 0900 	mov.w	r9, #0
 8008018:	f108 38ff 	add.w	r8, r8, #4294967295
 800801c:	f104 0a1a 	add.w	sl, r4, #26
 8008020:	45c8      	cmp	r8, r9
 8008022:	dc09      	bgt.n	8008038 <_printf_float+0x228>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	079b      	lsls	r3, r3, #30
 8008028:	f100 8107 	bmi.w	800823a <_printf_float+0x42a>
 800802c:	68e0      	ldr	r0, [r4, #12]
 800802e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008030:	4298      	cmp	r0, r3
 8008032:	bfb8      	it	lt
 8008034:	4618      	movlt	r0, r3
 8008036:	e739      	b.n	8007eac <_printf_float+0x9c>
 8008038:	2301      	movs	r3, #1
 800803a:	4652      	mov	r2, sl
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f af30 	beq.w	8007ea8 <_printf_float+0x98>
 8008048:	f109 0901 	add.w	r9, r9, #1
 800804c:	e7e8      	b.n	8008020 <_printf_float+0x210>
 800804e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008050:	2b00      	cmp	r3, #0
 8008052:	dc3b      	bgt.n	80080cc <_printf_float+0x2bc>
 8008054:	4a1c      	ldr	r2, [pc, #112]	@ (80080c8 <_printf_float+0x2b8>)
 8008056:	2301      	movs	r3, #1
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	f43f af22 	beq.w	8007ea8 <_printf_float+0x98>
 8008064:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008068:	ea59 0303 	orrs.w	r3, r9, r3
 800806c:	d102      	bne.n	8008074 <_printf_float+0x264>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	07d9      	lsls	r1, r3, #31
 8008072:	d5d7      	bpl.n	8008024 <_printf_float+0x214>
 8008074:	9b05      	ldr	r3, [sp, #20]
 8008076:	465a      	mov	r2, fp
 8008078:	4631      	mov	r1, r6
 800807a:	4628      	mov	r0, r5
 800807c:	47b8      	blx	r7
 800807e:	3001      	adds	r0, #1
 8008080:	f43f af12 	beq.w	8007ea8 <_printf_float+0x98>
 8008084:	f04f 0a00 	mov.w	sl, #0
 8008088:	f104 0b1a 	add.w	fp, r4, #26
 800808c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808e:	425b      	negs	r3, r3
 8008090:	4553      	cmp	r3, sl
 8008092:	dc01      	bgt.n	8008098 <_printf_float+0x288>
 8008094:	464b      	mov	r3, r9
 8008096:	e794      	b.n	8007fc2 <_printf_float+0x1b2>
 8008098:	2301      	movs	r3, #1
 800809a:	465a      	mov	r2, fp
 800809c:	4631      	mov	r1, r6
 800809e:	4628      	mov	r0, r5
 80080a0:	47b8      	blx	r7
 80080a2:	3001      	adds	r0, #1
 80080a4:	f43f af00 	beq.w	8007ea8 <_printf_float+0x98>
 80080a8:	f10a 0a01 	add.w	sl, sl, #1
 80080ac:	e7ee      	b.n	800808c <_printf_float+0x27c>
 80080ae:	bf00      	nop
 80080b0:	ffffffff 	.word	0xffffffff
 80080b4:	7fefffff 	.word	0x7fefffff
 80080b8:	0800c7f8 	.word	0x0800c7f8
 80080bc:	0800c7fc 	.word	0x0800c7fc
 80080c0:	0800c800 	.word	0x0800c800
 80080c4:	0800c804 	.word	0x0800c804
 80080c8:	0800c808 	.word	0x0800c808
 80080cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80080ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080d2:	4553      	cmp	r3, sl
 80080d4:	bfa8      	it	ge
 80080d6:	4653      	movge	r3, sl
 80080d8:	2b00      	cmp	r3, #0
 80080da:	4699      	mov	r9, r3
 80080dc:	dc37      	bgt.n	800814e <_printf_float+0x33e>
 80080de:	2300      	movs	r3, #0
 80080e0:	9307      	str	r3, [sp, #28]
 80080e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080e6:	f104 021a 	add.w	r2, r4, #26
 80080ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80080ec:	9907      	ldr	r1, [sp, #28]
 80080ee:	9306      	str	r3, [sp, #24]
 80080f0:	eba3 0309 	sub.w	r3, r3, r9
 80080f4:	428b      	cmp	r3, r1
 80080f6:	dc31      	bgt.n	800815c <_printf_float+0x34c>
 80080f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080fa:	459a      	cmp	sl, r3
 80080fc:	dc3b      	bgt.n	8008176 <_printf_float+0x366>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	07da      	lsls	r2, r3, #31
 8008102:	d438      	bmi.n	8008176 <_printf_float+0x366>
 8008104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008106:	ebaa 0903 	sub.w	r9, sl, r3
 800810a:	9b06      	ldr	r3, [sp, #24]
 800810c:	ebaa 0303 	sub.w	r3, sl, r3
 8008110:	4599      	cmp	r9, r3
 8008112:	bfa8      	it	ge
 8008114:	4699      	movge	r9, r3
 8008116:	f1b9 0f00 	cmp.w	r9, #0
 800811a:	dc34      	bgt.n	8008186 <_printf_float+0x376>
 800811c:	f04f 0800 	mov.w	r8, #0
 8008120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008124:	f104 0b1a 	add.w	fp, r4, #26
 8008128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812a:	ebaa 0303 	sub.w	r3, sl, r3
 800812e:	eba3 0309 	sub.w	r3, r3, r9
 8008132:	4543      	cmp	r3, r8
 8008134:	f77f af76 	ble.w	8008024 <_printf_float+0x214>
 8008138:	2301      	movs	r3, #1
 800813a:	465a      	mov	r2, fp
 800813c:	4631      	mov	r1, r6
 800813e:	4628      	mov	r0, r5
 8008140:	47b8      	blx	r7
 8008142:	3001      	adds	r0, #1
 8008144:	f43f aeb0 	beq.w	8007ea8 <_printf_float+0x98>
 8008148:	f108 0801 	add.w	r8, r8, #1
 800814c:	e7ec      	b.n	8008128 <_printf_float+0x318>
 800814e:	4642      	mov	r2, r8
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	d1c1      	bne.n	80080de <_printf_float+0x2ce>
 800815a:	e6a5      	b.n	8007ea8 <_printf_float+0x98>
 800815c:	2301      	movs	r3, #1
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	9206      	str	r2, [sp, #24]
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f43f ae9e 	beq.w	8007ea8 <_printf_float+0x98>
 800816c:	9b07      	ldr	r3, [sp, #28]
 800816e:	9a06      	ldr	r2, [sp, #24]
 8008170:	3301      	adds	r3, #1
 8008172:	9307      	str	r3, [sp, #28]
 8008174:	e7b9      	b.n	80080ea <_printf_float+0x2da>
 8008176:	9b05      	ldr	r3, [sp, #20]
 8008178:	465a      	mov	r2, fp
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	d1bf      	bne.n	8008104 <_printf_float+0x2f4>
 8008184:	e690      	b.n	8007ea8 <_printf_float+0x98>
 8008186:	9a06      	ldr	r2, [sp, #24]
 8008188:	464b      	mov	r3, r9
 800818a:	4442      	add	r2, r8
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	d1c2      	bne.n	800811c <_printf_float+0x30c>
 8008196:	e687      	b.n	8007ea8 <_printf_float+0x98>
 8008198:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800819c:	f1b9 0f01 	cmp.w	r9, #1
 80081a0:	dc01      	bgt.n	80081a6 <_printf_float+0x396>
 80081a2:	07db      	lsls	r3, r3, #31
 80081a4:	d536      	bpl.n	8008214 <_printf_float+0x404>
 80081a6:	2301      	movs	r3, #1
 80081a8:	4642      	mov	r2, r8
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b8      	blx	r7
 80081b0:	3001      	adds	r0, #1
 80081b2:	f43f ae79 	beq.w	8007ea8 <_printf_float+0x98>
 80081b6:	9b05      	ldr	r3, [sp, #20]
 80081b8:	465a      	mov	r2, fp
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	f43f ae71 	beq.w	8007ea8 <_printf_float+0x98>
 80081c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80081ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80081ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80081d6:	d018      	beq.n	800820a <_printf_float+0x3fa>
 80081d8:	464b      	mov	r3, r9
 80081da:	f108 0201 	add.w	r2, r8, #1
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	d10c      	bne.n	8008202 <_printf_float+0x3f2>
 80081e8:	e65e      	b.n	8007ea8 <_printf_float+0x98>
 80081ea:	2301      	movs	r3, #1
 80081ec:	465a      	mov	r2, fp
 80081ee:	4631      	mov	r1, r6
 80081f0:	4628      	mov	r0, r5
 80081f2:	47b8      	blx	r7
 80081f4:	3001      	adds	r0, #1
 80081f6:	f43f ae57 	beq.w	8007ea8 <_printf_float+0x98>
 80081fa:	f108 0801 	add.w	r8, r8, #1
 80081fe:	45c8      	cmp	r8, r9
 8008200:	dbf3      	blt.n	80081ea <_printf_float+0x3da>
 8008202:	4653      	mov	r3, sl
 8008204:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008208:	e6dc      	b.n	8007fc4 <_printf_float+0x1b4>
 800820a:	f04f 0800 	mov.w	r8, #0
 800820e:	f104 0b1a 	add.w	fp, r4, #26
 8008212:	e7f4      	b.n	80081fe <_printf_float+0x3ee>
 8008214:	2301      	movs	r3, #1
 8008216:	4642      	mov	r2, r8
 8008218:	e7e1      	b.n	80081de <_printf_float+0x3ce>
 800821a:	2301      	movs	r3, #1
 800821c:	464a      	mov	r2, r9
 800821e:	4631      	mov	r1, r6
 8008220:	4628      	mov	r0, r5
 8008222:	47b8      	blx	r7
 8008224:	3001      	adds	r0, #1
 8008226:	f43f ae3f 	beq.w	8007ea8 <_printf_float+0x98>
 800822a:	f108 0801 	add.w	r8, r8, #1
 800822e:	68e3      	ldr	r3, [r4, #12]
 8008230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008232:	1a5b      	subs	r3, r3, r1
 8008234:	4543      	cmp	r3, r8
 8008236:	dcf0      	bgt.n	800821a <_printf_float+0x40a>
 8008238:	e6f8      	b.n	800802c <_printf_float+0x21c>
 800823a:	f04f 0800 	mov.w	r8, #0
 800823e:	f104 0919 	add.w	r9, r4, #25
 8008242:	e7f4      	b.n	800822e <_printf_float+0x41e>

08008244 <_printf_common>:
 8008244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	4616      	mov	r6, r2
 800824a:	4698      	mov	r8, r3
 800824c:	688a      	ldr	r2, [r1, #8]
 800824e:	690b      	ldr	r3, [r1, #16]
 8008250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008254:	4293      	cmp	r3, r2
 8008256:	bfb8      	it	lt
 8008258:	4613      	movlt	r3, r2
 800825a:	6033      	str	r3, [r6, #0]
 800825c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008260:	4607      	mov	r7, r0
 8008262:	460c      	mov	r4, r1
 8008264:	b10a      	cbz	r2, 800826a <_printf_common+0x26>
 8008266:	3301      	adds	r3, #1
 8008268:	6033      	str	r3, [r6, #0]
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	0699      	lsls	r1, r3, #26
 800826e:	bf42      	ittt	mi
 8008270:	6833      	ldrmi	r3, [r6, #0]
 8008272:	3302      	addmi	r3, #2
 8008274:	6033      	strmi	r3, [r6, #0]
 8008276:	6825      	ldr	r5, [r4, #0]
 8008278:	f015 0506 	ands.w	r5, r5, #6
 800827c:	d106      	bne.n	800828c <_printf_common+0x48>
 800827e:	f104 0a19 	add.w	sl, r4, #25
 8008282:	68e3      	ldr	r3, [r4, #12]
 8008284:	6832      	ldr	r2, [r6, #0]
 8008286:	1a9b      	subs	r3, r3, r2
 8008288:	42ab      	cmp	r3, r5
 800828a:	dc26      	bgt.n	80082da <_printf_common+0x96>
 800828c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008290:	6822      	ldr	r2, [r4, #0]
 8008292:	3b00      	subs	r3, #0
 8008294:	bf18      	it	ne
 8008296:	2301      	movne	r3, #1
 8008298:	0692      	lsls	r2, r2, #26
 800829a:	d42b      	bmi.n	80082f4 <_printf_common+0xb0>
 800829c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082a0:	4641      	mov	r1, r8
 80082a2:	4638      	mov	r0, r7
 80082a4:	47c8      	blx	r9
 80082a6:	3001      	adds	r0, #1
 80082a8:	d01e      	beq.n	80082e8 <_printf_common+0xa4>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	6922      	ldr	r2, [r4, #16]
 80082ae:	f003 0306 	and.w	r3, r3, #6
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	bf02      	ittt	eq
 80082b6:	68e5      	ldreq	r5, [r4, #12]
 80082b8:	6833      	ldreq	r3, [r6, #0]
 80082ba:	1aed      	subeq	r5, r5, r3
 80082bc:	68a3      	ldr	r3, [r4, #8]
 80082be:	bf0c      	ite	eq
 80082c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082c4:	2500      	movne	r5, #0
 80082c6:	4293      	cmp	r3, r2
 80082c8:	bfc4      	itt	gt
 80082ca:	1a9b      	subgt	r3, r3, r2
 80082cc:	18ed      	addgt	r5, r5, r3
 80082ce:	2600      	movs	r6, #0
 80082d0:	341a      	adds	r4, #26
 80082d2:	42b5      	cmp	r5, r6
 80082d4:	d11a      	bne.n	800830c <_printf_common+0xc8>
 80082d6:	2000      	movs	r0, #0
 80082d8:	e008      	b.n	80082ec <_printf_common+0xa8>
 80082da:	2301      	movs	r3, #1
 80082dc:	4652      	mov	r2, sl
 80082de:	4641      	mov	r1, r8
 80082e0:	4638      	mov	r0, r7
 80082e2:	47c8      	blx	r9
 80082e4:	3001      	adds	r0, #1
 80082e6:	d103      	bne.n	80082f0 <_printf_common+0xac>
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f0:	3501      	adds	r5, #1
 80082f2:	e7c6      	b.n	8008282 <_printf_common+0x3e>
 80082f4:	18e1      	adds	r1, r4, r3
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	2030      	movs	r0, #48	@ 0x30
 80082fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082fe:	4422      	add	r2, r4
 8008300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008308:	3302      	adds	r3, #2
 800830a:	e7c7      	b.n	800829c <_printf_common+0x58>
 800830c:	2301      	movs	r3, #1
 800830e:	4622      	mov	r2, r4
 8008310:	4641      	mov	r1, r8
 8008312:	4638      	mov	r0, r7
 8008314:	47c8      	blx	r9
 8008316:	3001      	adds	r0, #1
 8008318:	d0e6      	beq.n	80082e8 <_printf_common+0xa4>
 800831a:	3601      	adds	r6, #1
 800831c:	e7d9      	b.n	80082d2 <_printf_common+0x8e>
	...

08008320 <_printf_i>:
 8008320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	7e0f      	ldrb	r7, [r1, #24]
 8008326:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008328:	2f78      	cmp	r7, #120	@ 0x78
 800832a:	4691      	mov	r9, r2
 800832c:	4680      	mov	r8, r0
 800832e:	460c      	mov	r4, r1
 8008330:	469a      	mov	sl, r3
 8008332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008336:	d807      	bhi.n	8008348 <_printf_i+0x28>
 8008338:	2f62      	cmp	r7, #98	@ 0x62
 800833a:	d80a      	bhi.n	8008352 <_printf_i+0x32>
 800833c:	2f00      	cmp	r7, #0
 800833e:	f000 80d2 	beq.w	80084e6 <_printf_i+0x1c6>
 8008342:	2f58      	cmp	r7, #88	@ 0x58
 8008344:	f000 80b9 	beq.w	80084ba <_printf_i+0x19a>
 8008348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800834c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008350:	e03a      	b.n	80083c8 <_printf_i+0xa8>
 8008352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008356:	2b15      	cmp	r3, #21
 8008358:	d8f6      	bhi.n	8008348 <_printf_i+0x28>
 800835a:	a101      	add	r1, pc, #4	@ (adr r1, 8008360 <_printf_i+0x40>)
 800835c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008360:	080083b9 	.word	0x080083b9
 8008364:	080083cd 	.word	0x080083cd
 8008368:	08008349 	.word	0x08008349
 800836c:	08008349 	.word	0x08008349
 8008370:	08008349 	.word	0x08008349
 8008374:	08008349 	.word	0x08008349
 8008378:	080083cd 	.word	0x080083cd
 800837c:	08008349 	.word	0x08008349
 8008380:	08008349 	.word	0x08008349
 8008384:	08008349 	.word	0x08008349
 8008388:	08008349 	.word	0x08008349
 800838c:	080084cd 	.word	0x080084cd
 8008390:	080083f7 	.word	0x080083f7
 8008394:	08008487 	.word	0x08008487
 8008398:	08008349 	.word	0x08008349
 800839c:	08008349 	.word	0x08008349
 80083a0:	080084ef 	.word	0x080084ef
 80083a4:	08008349 	.word	0x08008349
 80083a8:	080083f7 	.word	0x080083f7
 80083ac:	08008349 	.word	0x08008349
 80083b0:	08008349 	.word	0x08008349
 80083b4:	0800848f 	.word	0x0800848f
 80083b8:	6833      	ldr	r3, [r6, #0]
 80083ba:	1d1a      	adds	r2, r3, #4
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6032      	str	r2, [r6, #0]
 80083c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083c8:	2301      	movs	r3, #1
 80083ca:	e09d      	b.n	8008508 <_printf_i+0x1e8>
 80083cc:	6833      	ldr	r3, [r6, #0]
 80083ce:	6820      	ldr	r0, [r4, #0]
 80083d0:	1d19      	adds	r1, r3, #4
 80083d2:	6031      	str	r1, [r6, #0]
 80083d4:	0606      	lsls	r6, r0, #24
 80083d6:	d501      	bpl.n	80083dc <_printf_i+0xbc>
 80083d8:	681d      	ldr	r5, [r3, #0]
 80083da:	e003      	b.n	80083e4 <_printf_i+0xc4>
 80083dc:	0645      	lsls	r5, r0, #25
 80083de:	d5fb      	bpl.n	80083d8 <_printf_i+0xb8>
 80083e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083e4:	2d00      	cmp	r5, #0
 80083e6:	da03      	bge.n	80083f0 <_printf_i+0xd0>
 80083e8:	232d      	movs	r3, #45	@ 0x2d
 80083ea:	426d      	negs	r5, r5
 80083ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083f0:	4859      	ldr	r0, [pc, #356]	@ (8008558 <_printf_i+0x238>)
 80083f2:	230a      	movs	r3, #10
 80083f4:	e011      	b.n	800841a <_printf_i+0xfa>
 80083f6:	6821      	ldr	r1, [r4, #0]
 80083f8:	6833      	ldr	r3, [r6, #0]
 80083fa:	0608      	lsls	r0, r1, #24
 80083fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008400:	d402      	bmi.n	8008408 <_printf_i+0xe8>
 8008402:	0649      	lsls	r1, r1, #25
 8008404:	bf48      	it	mi
 8008406:	b2ad      	uxthmi	r5, r5
 8008408:	2f6f      	cmp	r7, #111	@ 0x6f
 800840a:	4853      	ldr	r0, [pc, #332]	@ (8008558 <_printf_i+0x238>)
 800840c:	6033      	str	r3, [r6, #0]
 800840e:	bf14      	ite	ne
 8008410:	230a      	movne	r3, #10
 8008412:	2308      	moveq	r3, #8
 8008414:	2100      	movs	r1, #0
 8008416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800841a:	6866      	ldr	r6, [r4, #4]
 800841c:	60a6      	str	r6, [r4, #8]
 800841e:	2e00      	cmp	r6, #0
 8008420:	bfa2      	ittt	ge
 8008422:	6821      	ldrge	r1, [r4, #0]
 8008424:	f021 0104 	bicge.w	r1, r1, #4
 8008428:	6021      	strge	r1, [r4, #0]
 800842a:	b90d      	cbnz	r5, 8008430 <_printf_i+0x110>
 800842c:	2e00      	cmp	r6, #0
 800842e:	d04b      	beq.n	80084c8 <_printf_i+0x1a8>
 8008430:	4616      	mov	r6, r2
 8008432:	fbb5 f1f3 	udiv	r1, r5, r3
 8008436:	fb03 5711 	mls	r7, r3, r1, r5
 800843a:	5dc7      	ldrb	r7, [r0, r7]
 800843c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008440:	462f      	mov	r7, r5
 8008442:	42bb      	cmp	r3, r7
 8008444:	460d      	mov	r5, r1
 8008446:	d9f4      	bls.n	8008432 <_printf_i+0x112>
 8008448:	2b08      	cmp	r3, #8
 800844a:	d10b      	bne.n	8008464 <_printf_i+0x144>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	07df      	lsls	r7, r3, #31
 8008450:	d508      	bpl.n	8008464 <_printf_i+0x144>
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	6861      	ldr	r1, [r4, #4]
 8008456:	4299      	cmp	r1, r3
 8008458:	bfde      	ittt	le
 800845a:	2330      	movle	r3, #48	@ 0x30
 800845c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008460:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008464:	1b92      	subs	r2, r2, r6
 8008466:	6122      	str	r2, [r4, #16]
 8008468:	f8cd a000 	str.w	sl, [sp]
 800846c:	464b      	mov	r3, r9
 800846e:	aa03      	add	r2, sp, #12
 8008470:	4621      	mov	r1, r4
 8008472:	4640      	mov	r0, r8
 8008474:	f7ff fee6 	bl	8008244 <_printf_common>
 8008478:	3001      	adds	r0, #1
 800847a:	d14a      	bne.n	8008512 <_printf_i+0x1f2>
 800847c:	f04f 30ff 	mov.w	r0, #4294967295
 8008480:	b004      	add	sp, #16
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	f043 0320 	orr.w	r3, r3, #32
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	4833      	ldr	r0, [pc, #204]	@ (800855c <_printf_i+0x23c>)
 8008490:	2778      	movs	r7, #120	@ 0x78
 8008492:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	6831      	ldr	r1, [r6, #0]
 800849a:	061f      	lsls	r7, r3, #24
 800849c:	f851 5b04 	ldr.w	r5, [r1], #4
 80084a0:	d402      	bmi.n	80084a8 <_printf_i+0x188>
 80084a2:	065f      	lsls	r7, r3, #25
 80084a4:	bf48      	it	mi
 80084a6:	b2ad      	uxthmi	r5, r5
 80084a8:	6031      	str	r1, [r6, #0]
 80084aa:	07d9      	lsls	r1, r3, #31
 80084ac:	bf44      	itt	mi
 80084ae:	f043 0320 	orrmi.w	r3, r3, #32
 80084b2:	6023      	strmi	r3, [r4, #0]
 80084b4:	b11d      	cbz	r5, 80084be <_printf_i+0x19e>
 80084b6:	2310      	movs	r3, #16
 80084b8:	e7ac      	b.n	8008414 <_printf_i+0xf4>
 80084ba:	4827      	ldr	r0, [pc, #156]	@ (8008558 <_printf_i+0x238>)
 80084bc:	e7e9      	b.n	8008492 <_printf_i+0x172>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	f023 0320 	bic.w	r3, r3, #32
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	e7f6      	b.n	80084b6 <_printf_i+0x196>
 80084c8:	4616      	mov	r6, r2
 80084ca:	e7bd      	b.n	8008448 <_printf_i+0x128>
 80084cc:	6833      	ldr	r3, [r6, #0]
 80084ce:	6825      	ldr	r5, [r4, #0]
 80084d0:	6961      	ldr	r1, [r4, #20]
 80084d2:	1d18      	adds	r0, r3, #4
 80084d4:	6030      	str	r0, [r6, #0]
 80084d6:	062e      	lsls	r6, r5, #24
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	d501      	bpl.n	80084e0 <_printf_i+0x1c0>
 80084dc:	6019      	str	r1, [r3, #0]
 80084de:	e002      	b.n	80084e6 <_printf_i+0x1c6>
 80084e0:	0668      	lsls	r0, r5, #25
 80084e2:	d5fb      	bpl.n	80084dc <_printf_i+0x1bc>
 80084e4:	8019      	strh	r1, [r3, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	4616      	mov	r6, r2
 80084ec:	e7bc      	b.n	8008468 <_printf_i+0x148>
 80084ee:	6833      	ldr	r3, [r6, #0]
 80084f0:	1d1a      	adds	r2, r3, #4
 80084f2:	6032      	str	r2, [r6, #0]
 80084f4:	681e      	ldr	r6, [r3, #0]
 80084f6:	6862      	ldr	r2, [r4, #4]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7f7 fef0 	bl	80002e0 <memchr>
 8008500:	b108      	cbz	r0, 8008506 <_printf_i+0x1e6>
 8008502:	1b80      	subs	r0, r0, r6
 8008504:	6060      	str	r0, [r4, #4]
 8008506:	6863      	ldr	r3, [r4, #4]
 8008508:	6123      	str	r3, [r4, #16]
 800850a:	2300      	movs	r3, #0
 800850c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008510:	e7aa      	b.n	8008468 <_printf_i+0x148>
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	4632      	mov	r2, r6
 8008516:	4649      	mov	r1, r9
 8008518:	4640      	mov	r0, r8
 800851a:	47d0      	blx	sl
 800851c:	3001      	adds	r0, #1
 800851e:	d0ad      	beq.n	800847c <_printf_i+0x15c>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	079b      	lsls	r3, r3, #30
 8008524:	d413      	bmi.n	800854e <_printf_i+0x22e>
 8008526:	68e0      	ldr	r0, [r4, #12]
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	4298      	cmp	r0, r3
 800852c:	bfb8      	it	lt
 800852e:	4618      	movlt	r0, r3
 8008530:	e7a6      	b.n	8008480 <_printf_i+0x160>
 8008532:	2301      	movs	r3, #1
 8008534:	4632      	mov	r2, r6
 8008536:	4649      	mov	r1, r9
 8008538:	4640      	mov	r0, r8
 800853a:	47d0      	blx	sl
 800853c:	3001      	adds	r0, #1
 800853e:	d09d      	beq.n	800847c <_printf_i+0x15c>
 8008540:	3501      	adds	r5, #1
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	9903      	ldr	r1, [sp, #12]
 8008546:	1a5b      	subs	r3, r3, r1
 8008548:	42ab      	cmp	r3, r5
 800854a:	dcf2      	bgt.n	8008532 <_printf_i+0x212>
 800854c:	e7eb      	b.n	8008526 <_printf_i+0x206>
 800854e:	2500      	movs	r5, #0
 8008550:	f104 0619 	add.w	r6, r4, #25
 8008554:	e7f5      	b.n	8008542 <_printf_i+0x222>
 8008556:	bf00      	nop
 8008558:	0800c80a 	.word	0x0800c80a
 800855c:	0800c81b 	.word	0x0800c81b

08008560 <_scanf_float>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	b087      	sub	sp, #28
 8008566:	4617      	mov	r7, r2
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	688b      	ldr	r3, [r1, #8]
 800856c:	1e5a      	subs	r2, r3, #1
 800856e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008572:	bf81      	itttt	hi
 8008574:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008578:	eb03 0b05 	addhi.w	fp, r3, r5
 800857c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008580:	608b      	strhi	r3, [r1, #8]
 8008582:	680b      	ldr	r3, [r1, #0]
 8008584:	460a      	mov	r2, r1
 8008586:	f04f 0500 	mov.w	r5, #0
 800858a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800858e:	f842 3b1c 	str.w	r3, [r2], #28
 8008592:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008596:	4680      	mov	r8, r0
 8008598:	460c      	mov	r4, r1
 800859a:	bf98      	it	ls
 800859c:	f04f 0b00 	movls.w	fp, #0
 80085a0:	9201      	str	r2, [sp, #4]
 80085a2:	4616      	mov	r6, r2
 80085a4:	46aa      	mov	sl, r5
 80085a6:	46a9      	mov	r9, r5
 80085a8:	9502      	str	r5, [sp, #8]
 80085aa:	68a2      	ldr	r2, [r4, #8]
 80085ac:	b152      	cbz	r2, 80085c4 <_scanf_float+0x64>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80085b4:	d864      	bhi.n	8008680 <_scanf_float+0x120>
 80085b6:	2b40      	cmp	r3, #64	@ 0x40
 80085b8:	d83c      	bhi.n	8008634 <_scanf_float+0xd4>
 80085ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80085be:	b2c8      	uxtb	r0, r1
 80085c0:	280e      	cmp	r0, #14
 80085c2:	d93a      	bls.n	800863a <_scanf_float+0xda>
 80085c4:	f1b9 0f00 	cmp.w	r9, #0
 80085c8:	d003      	beq.n	80085d2 <_scanf_float+0x72>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085d6:	f1ba 0f01 	cmp.w	sl, #1
 80085da:	f200 8117 	bhi.w	800880c <_scanf_float+0x2ac>
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	429e      	cmp	r6, r3
 80085e2:	f200 8108 	bhi.w	80087f6 <_scanf_float+0x296>
 80085e6:	2001      	movs	r0, #1
 80085e8:	b007      	add	sp, #28
 80085ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80085f2:	2a0d      	cmp	r2, #13
 80085f4:	d8e6      	bhi.n	80085c4 <_scanf_float+0x64>
 80085f6:	a101      	add	r1, pc, #4	@ (adr r1, 80085fc <_scanf_float+0x9c>)
 80085f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085fc:	08008743 	.word	0x08008743
 8008600:	080085c5 	.word	0x080085c5
 8008604:	080085c5 	.word	0x080085c5
 8008608:	080085c5 	.word	0x080085c5
 800860c:	080087a3 	.word	0x080087a3
 8008610:	0800877b 	.word	0x0800877b
 8008614:	080085c5 	.word	0x080085c5
 8008618:	080085c5 	.word	0x080085c5
 800861c:	08008751 	.word	0x08008751
 8008620:	080085c5 	.word	0x080085c5
 8008624:	080085c5 	.word	0x080085c5
 8008628:	080085c5 	.word	0x080085c5
 800862c:	080085c5 	.word	0x080085c5
 8008630:	08008709 	.word	0x08008709
 8008634:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008638:	e7db      	b.n	80085f2 <_scanf_float+0x92>
 800863a:	290e      	cmp	r1, #14
 800863c:	d8c2      	bhi.n	80085c4 <_scanf_float+0x64>
 800863e:	a001      	add	r0, pc, #4	@ (adr r0, 8008644 <_scanf_float+0xe4>)
 8008640:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008644:	080086f9 	.word	0x080086f9
 8008648:	080085c5 	.word	0x080085c5
 800864c:	080086f9 	.word	0x080086f9
 8008650:	0800878f 	.word	0x0800878f
 8008654:	080085c5 	.word	0x080085c5
 8008658:	080086a1 	.word	0x080086a1
 800865c:	080086df 	.word	0x080086df
 8008660:	080086df 	.word	0x080086df
 8008664:	080086df 	.word	0x080086df
 8008668:	080086df 	.word	0x080086df
 800866c:	080086df 	.word	0x080086df
 8008670:	080086df 	.word	0x080086df
 8008674:	080086df 	.word	0x080086df
 8008678:	080086df 	.word	0x080086df
 800867c:	080086df 	.word	0x080086df
 8008680:	2b6e      	cmp	r3, #110	@ 0x6e
 8008682:	d809      	bhi.n	8008698 <_scanf_float+0x138>
 8008684:	2b60      	cmp	r3, #96	@ 0x60
 8008686:	d8b2      	bhi.n	80085ee <_scanf_float+0x8e>
 8008688:	2b54      	cmp	r3, #84	@ 0x54
 800868a:	d07b      	beq.n	8008784 <_scanf_float+0x224>
 800868c:	2b59      	cmp	r3, #89	@ 0x59
 800868e:	d199      	bne.n	80085c4 <_scanf_float+0x64>
 8008690:	2d07      	cmp	r5, #7
 8008692:	d197      	bne.n	80085c4 <_scanf_float+0x64>
 8008694:	2508      	movs	r5, #8
 8008696:	e02c      	b.n	80086f2 <_scanf_float+0x192>
 8008698:	2b74      	cmp	r3, #116	@ 0x74
 800869a:	d073      	beq.n	8008784 <_scanf_float+0x224>
 800869c:	2b79      	cmp	r3, #121	@ 0x79
 800869e:	e7f6      	b.n	800868e <_scanf_float+0x12e>
 80086a0:	6821      	ldr	r1, [r4, #0]
 80086a2:	05c8      	lsls	r0, r1, #23
 80086a4:	d51b      	bpl.n	80086de <_scanf_float+0x17e>
 80086a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80086aa:	6021      	str	r1, [r4, #0]
 80086ac:	f109 0901 	add.w	r9, r9, #1
 80086b0:	f1bb 0f00 	cmp.w	fp, #0
 80086b4:	d003      	beq.n	80086be <_scanf_float+0x15e>
 80086b6:	3201      	adds	r2, #1
 80086b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086bc:	60a2      	str	r2, [r4, #8]
 80086be:	68a3      	ldr	r3, [r4, #8]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	60a3      	str	r3, [r4, #8]
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	3301      	adds	r3, #1
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	607b      	str	r3, [r7, #4]
 80086d2:	f340 8087 	ble.w	80087e4 <_scanf_float+0x284>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	e765      	b.n	80085aa <_scanf_float+0x4a>
 80086de:	eb1a 0105 	adds.w	r1, sl, r5
 80086e2:	f47f af6f 	bne.w	80085c4 <_scanf_float+0x64>
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80086ec:	6022      	str	r2, [r4, #0]
 80086ee:	460d      	mov	r5, r1
 80086f0:	468a      	mov	sl, r1
 80086f2:	f806 3b01 	strb.w	r3, [r6], #1
 80086f6:	e7e2      	b.n	80086be <_scanf_float+0x15e>
 80086f8:	6822      	ldr	r2, [r4, #0]
 80086fa:	0610      	lsls	r0, r2, #24
 80086fc:	f57f af62 	bpl.w	80085c4 <_scanf_float+0x64>
 8008700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008704:	6022      	str	r2, [r4, #0]
 8008706:	e7f4      	b.n	80086f2 <_scanf_float+0x192>
 8008708:	f1ba 0f00 	cmp.w	sl, #0
 800870c:	d10e      	bne.n	800872c <_scanf_float+0x1cc>
 800870e:	f1b9 0f00 	cmp.w	r9, #0
 8008712:	d10e      	bne.n	8008732 <_scanf_float+0x1d2>
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800871a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800871e:	d108      	bne.n	8008732 <_scanf_float+0x1d2>
 8008720:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008724:	6022      	str	r2, [r4, #0]
 8008726:	f04f 0a01 	mov.w	sl, #1
 800872a:	e7e2      	b.n	80086f2 <_scanf_float+0x192>
 800872c:	f1ba 0f02 	cmp.w	sl, #2
 8008730:	d055      	beq.n	80087de <_scanf_float+0x27e>
 8008732:	2d01      	cmp	r5, #1
 8008734:	d002      	beq.n	800873c <_scanf_float+0x1dc>
 8008736:	2d04      	cmp	r5, #4
 8008738:	f47f af44 	bne.w	80085c4 <_scanf_float+0x64>
 800873c:	3501      	adds	r5, #1
 800873e:	b2ed      	uxtb	r5, r5
 8008740:	e7d7      	b.n	80086f2 <_scanf_float+0x192>
 8008742:	f1ba 0f01 	cmp.w	sl, #1
 8008746:	f47f af3d 	bne.w	80085c4 <_scanf_float+0x64>
 800874a:	f04f 0a02 	mov.w	sl, #2
 800874e:	e7d0      	b.n	80086f2 <_scanf_float+0x192>
 8008750:	b97d      	cbnz	r5, 8008772 <_scanf_float+0x212>
 8008752:	f1b9 0f00 	cmp.w	r9, #0
 8008756:	f47f af38 	bne.w	80085ca <_scanf_float+0x6a>
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008760:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008764:	f040 8101 	bne.w	800896a <_scanf_float+0x40a>
 8008768:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800876c:	6022      	str	r2, [r4, #0]
 800876e:	2501      	movs	r5, #1
 8008770:	e7bf      	b.n	80086f2 <_scanf_float+0x192>
 8008772:	2d03      	cmp	r5, #3
 8008774:	d0e2      	beq.n	800873c <_scanf_float+0x1dc>
 8008776:	2d05      	cmp	r5, #5
 8008778:	e7de      	b.n	8008738 <_scanf_float+0x1d8>
 800877a:	2d02      	cmp	r5, #2
 800877c:	f47f af22 	bne.w	80085c4 <_scanf_float+0x64>
 8008780:	2503      	movs	r5, #3
 8008782:	e7b6      	b.n	80086f2 <_scanf_float+0x192>
 8008784:	2d06      	cmp	r5, #6
 8008786:	f47f af1d 	bne.w	80085c4 <_scanf_float+0x64>
 800878a:	2507      	movs	r5, #7
 800878c:	e7b1      	b.n	80086f2 <_scanf_float+0x192>
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	0591      	lsls	r1, r2, #22
 8008792:	f57f af17 	bpl.w	80085c4 <_scanf_float+0x64>
 8008796:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800879a:	6022      	str	r2, [r4, #0]
 800879c:	f8cd 9008 	str.w	r9, [sp, #8]
 80087a0:	e7a7      	b.n	80086f2 <_scanf_float+0x192>
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80087a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80087ac:	d006      	beq.n	80087bc <_scanf_float+0x25c>
 80087ae:	0550      	lsls	r0, r2, #21
 80087b0:	f57f af08 	bpl.w	80085c4 <_scanf_float+0x64>
 80087b4:	f1b9 0f00 	cmp.w	r9, #0
 80087b8:	f000 80d7 	beq.w	800896a <_scanf_float+0x40a>
 80087bc:	0591      	lsls	r1, r2, #22
 80087be:	bf58      	it	pl
 80087c0:	9902      	ldrpl	r1, [sp, #8]
 80087c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087c6:	bf58      	it	pl
 80087c8:	eba9 0101 	subpl.w	r1, r9, r1
 80087cc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80087d0:	bf58      	it	pl
 80087d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80087d6:	6022      	str	r2, [r4, #0]
 80087d8:	f04f 0900 	mov.w	r9, #0
 80087dc:	e789      	b.n	80086f2 <_scanf_float+0x192>
 80087de:	f04f 0a03 	mov.w	sl, #3
 80087e2:	e786      	b.n	80086f2 <_scanf_float+0x192>
 80087e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80087e8:	4639      	mov	r1, r7
 80087ea:	4640      	mov	r0, r8
 80087ec:	4798      	blx	r3
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f43f aedb 	beq.w	80085aa <_scanf_float+0x4a>
 80087f4:	e6e6      	b.n	80085c4 <_scanf_float+0x64>
 80087f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087fe:	463a      	mov	r2, r7
 8008800:	4640      	mov	r0, r8
 8008802:	4798      	blx	r3
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	3b01      	subs	r3, #1
 8008808:	6123      	str	r3, [r4, #16]
 800880a:	e6e8      	b.n	80085de <_scanf_float+0x7e>
 800880c:	1e6b      	subs	r3, r5, #1
 800880e:	2b06      	cmp	r3, #6
 8008810:	d824      	bhi.n	800885c <_scanf_float+0x2fc>
 8008812:	2d02      	cmp	r5, #2
 8008814:	d836      	bhi.n	8008884 <_scanf_float+0x324>
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	429e      	cmp	r6, r3
 800881a:	f67f aee4 	bls.w	80085e6 <_scanf_float+0x86>
 800881e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008822:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008826:	463a      	mov	r2, r7
 8008828:	4640      	mov	r0, r8
 800882a:	4798      	blx	r3
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	3b01      	subs	r3, #1
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	e7f0      	b.n	8008816 <_scanf_float+0x2b6>
 8008834:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008838:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800883c:	463a      	mov	r2, r7
 800883e:	4640      	mov	r0, r8
 8008840:	4798      	blx	r3
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	3b01      	subs	r3, #1
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	f10a 3aff 	add.w	sl, sl, #4294967295
 800884c:	fa5f fa8a 	uxtb.w	sl, sl
 8008850:	f1ba 0f02 	cmp.w	sl, #2
 8008854:	d1ee      	bne.n	8008834 <_scanf_float+0x2d4>
 8008856:	3d03      	subs	r5, #3
 8008858:	b2ed      	uxtb	r5, r5
 800885a:	1b76      	subs	r6, r6, r5
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	05da      	lsls	r2, r3, #23
 8008860:	d530      	bpl.n	80088c4 <_scanf_float+0x364>
 8008862:	055b      	lsls	r3, r3, #21
 8008864:	d511      	bpl.n	800888a <_scanf_float+0x32a>
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	429e      	cmp	r6, r3
 800886a:	f67f aebc 	bls.w	80085e6 <_scanf_float+0x86>
 800886e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008876:	463a      	mov	r2, r7
 8008878:	4640      	mov	r0, r8
 800887a:	4798      	blx	r3
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	3b01      	subs	r3, #1
 8008880:	6123      	str	r3, [r4, #16]
 8008882:	e7f0      	b.n	8008866 <_scanf_float+0x306>
 8008884:	46aa      	mov	sl, r5
 8008886:	46b3      	mov	fp, r6
 8008888:	e7de      	b.n	8008848 <_scanf_float+0x2e8>
 800888a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	2965      	cmp	r1, #101	@ 0x65
 8008892:	f103 33ff 	add.w	r3, r3, #4294967295
 8008896:	f106 35ff 	add.w	r5, r6, #4294967295
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	d00c      	beq.n	80088b8 <_scanf_float+0x358>
 800889e:	2945      	cmp	r1, #69	@ 0x45
 80088a0:	d00a      	beq.n	80088b8 <_scanf_float+0x358>
 80088a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088a6:	463a      	mov	r2, r7
 80088a8:	4640      	mov	r0, r8
 80088aa:	4798      	blx	r3
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	1eb5      	subs	r5, r6, #2
 80088b6:	6123      	str	r3, [r4, #16]
 80088b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088bc:	463a      	mov	r2, r7
 80088be:	4640      	mov	r0, r8
 80088c0:	4798      	blx	r3
 80088c2:	462e      	mov	r6, r5
 80088c4:	6822      	ldr	r2, [r4, #0]
 80088c6:	f012 0210 	ands.w	r2, r2, #16
 80088ca:	d001      	beq.n	80088d0 <_scanf_float+0x370>
 80088cc:	2000      	movs	r0, #0
 80088ce:	e68b      	b.n	80085e8 <_scanf_float+0x88>
 80088d0:	7032      	strb	r2, [r6, #0]
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80088d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088dc:	d11a      	bne.n	8008914 <_scanf_float+0x3b4>
 80088de:	9b02      	ldr	r3, [sp, #8]
 80088e0:	454b      	cmp	r3, r9
 80088e2:	eba3 0209 	sub.w	r2, r3, r9
 80088e6:	d121      	bne.n	800892c <_scanf_float+0x3cc>
 80088e8:	9901      	ldr	r1, [sp, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	4640      	mov	r0, r8
 80088ee:	f002 fb4d 	bl	800af8c <_strtod_r>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	6821      	ldr	r1, [r4, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f011 0f02 	tst.w	r1, #2
 80088fc:	f103 0204 	add.w	r2, r3, #4
 8008900:	d01f      	beq.n	8008942 <_scanf_float+0x3e2>
 8008902:	9903      	ldr	r1, [sp, #12]
 8008904:	600a      	str	r2, [r1, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	ed83 0b00 	vstr	d0, [r3]
 800890c:	68e3      	ldr	r3, [r4, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60e3      	str	r3, [r4, #12]
 8008912:	e7db      	b.n	80088cc <_scanf_float+0x36c>
 8008914:	9b04      	ldr	r3, [sp, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0e6      	beq.n	80088e8 <_scanf_float+0x388>
 800891a:	9905      	ldr	r1, [sp, #20]
 800891c:	230a      	movs	r3, #10
 800891e:	3101      	adds	r1, #1
 8008920:	4640      	mov	r0, r8
 8008922:	f002 fbb3 	bl	800b08c <_strtol_r>
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	9e05      	ldr	r6, [sp, #20]
 800892a:	1ac2      	subs	r2, r0, r3
 800892c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008930:	429e      	cmp	r6, r3
 8008932:	bf28      	it	cs
 8008934:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008938:	490d      	ldr	r1, [pc, #52]	@ (8008970 <_scanf_float+0x410>)
 800893a:	4630      	mov	r0, r6
 800893c:	f000 f8f0 	bl	8008b20 <siprintf>
 8008940:	e7d2      	b.n	80088e8 <_scanf_float+0x388>
 8008942:	f011 0f04 	tst.w	r1, #4
 8008946:	9903      	ldr	r1, [sp, #12]
 8008948:	600a      	str	r2, [r1, #0]
 800894a:	d1dc      	bne.n	8008906 <_scanf_float+0x3a6>
 800894c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008954:	681d      	ldr	r5, [r3, #0]
 8008956:	d705      	bvc.n	8008964 <_scanf_float+0x404>
 8008958:	4806      	ldr	r0, [pc, #24]	@ (8008974 <_scanf_float+0x414>)
 800895a:	f000 f9d3 	bl	8008d04 <nanf>
 800895e:	ed85 0a00 	vstr	s0, [r5]
 8008962:	e7d3      	b.n	800890c <_scanf_float+0x3ac>
 8008964:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008968:	e7f9      	b.n	800895e <_scanf_float+0x3fe>
 800896a:	f04f 0900 	mov.w	r9, #0
 800896e:	e630      	b.n	80085d2 <_scanf_float+0x72>
 8008970:	0800c82c 	.word	0x0800c82c
 8008974:	0800cbc5 	.word	0x0800cbc5

08008978 <std>:
 8008978:	2300      	movs	r3, #0
 800897a:	b510      	push	{r4, lr}
 800897c:	4604      	mov	r4, r0
 800897e:	e9c0 3300 	strd	r3, r3, [r0]
 8008982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008986:	6083      	str	r3, [r0, #8]
 8008988:	8181      	strh	r1, [r0, #12]
 800898a:	6643      	str	r3, [r0, #100]	@ 0x64
 800898c:	81c2      	strh	r2, [r0, #14]
 800898e:	6183      	str	r3, [r0, #24]
 8008990:	4619      	mov	r1, r3
 8008992:	2208      	movs	r2, #8
 8008994:	305c      	adds	r0, #92	@ 0x5c
 8008996:	f000 f926 	bl	8008be6 <memset>
 800899a:	4b0d      	ldr	r3, [pc, #52]	@ (80089d0 <std+0x58>)
 800899c:	6263      	str	r3, [r4, #36]	@ 0x24
 800899e:	4b0d      	ldr	r3, [pc, #52]	@ (80089d4 <std+0x5c>)
 80089a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089a2:	4b0d      	ldr	r3, [pc, #52]	@ (80089d8 <std+0x60>)
 80089a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089a6:	4b0d      	ldr	r3, [pc, #52]	@ (80089dc <std+0x64>)
 80089a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80089aa:	4b0d      	ldr	r3, [pc, #52]	@ (80089e0 <std+0x68>)
 80089ac:	6224      	str	r4, [r4, #32]
 80089ae:	429c      	cmp	r4, r3
 80089b0:	d006      	beq.n	80089c0 <std+0x48>
 80089b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089b6:	4294      	cmp	r4, r2
 80089b8:	d002      	beq.n	80089c0 <std+0x48>
 80089ba:	33d0      	adds	r3, #208	@ 0xd0
 80089bc:	429c      	cmp	r4, r3
 80089be:	d105      	bne.n	80089cc <std+0x54>
 80089c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c8:	f000 b98a 	b.w	8008ce0 <__retarget_lock_init_recursive>
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	bf00      	nop
 80089d0:	08008b61 	.word	0x08008b61
 80089d4:	08008b83 	.word	0x08008b83
 80089d8:	08008bbb 	.word	0x08008bbb
 80089dc:	08008bdf 	.word	0x08008bdf
 80089e0:	2400044c 	.word	0x2400044c

080089e4 <stdio_exit_handler>:
 80089e4:	4a02      	ldr	r2, [pc, #8]	@ (80089f0 <stdio_exit_handler+0xc>)
 80089e6:	4903      	ldr	r1, [pc, #12]	@ (80089f4 <stdio_exit_handler+0x10>)
 80089e8:	4803      	ldr	r0, [pc, #12]	@ (80089f8 <stdio_exit_handler+0x14>)
 80089ea:	f000 b869 	b.w	8008ac0 <_fwalk_sglue>
 80089ee:	bf00      	nop
 80089f0:	24000010 	.word	0x24000010
 80089f4:	0800b6cd 	.word	0x0800b6cd
 80089f8:	24000020 	.word	0x24000020

080089fc <cleanup_stdio>:
 80089fc:	6841      	ldr	r1, [r0, #4]
 80089fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008a30 <cleanup_stdio+0x34>)
 8008a00:	4299      	cmp	r1, r3
 8008a02:	b510      	push	{r4, lr}
 8008a04:	4604      	mov	r4, r0
 8008a06:	d001      	beq.n	8008a0c <cleanup_stdio+0x10>
 8008a08:	f002 fe60 	bl	800b6cc <_fflush_r>
 8008a0c:	68a1      	ldr	r1, [r4, #8]
 8008a0e:	4b09      	ldr	r3, [pc, #36]	@ (8008a34 <cleanup_stdio+0x38>)
 8008a10:	4299      	cmp	r1, r3
 8008a12:	d002      	beq.n	8008a1a <cleanup_stdio+0x1e>
 8008a14:	4620      	mov	r0, r4
 8008a16:	f002 fe59 	bl	800b6cc <_fflush_r>
 8008a1a:	68e1      	ldr	r1, [r4, #12]
 8008a1c:	4b06      	ldr	r3, [pc, #24]	@ (8008a38 <cleanup_stdio+0x3c>)
 8008a1e:	4299      	cmp	r1, r3
 8008a20:	d004      	beq.n	8008a2c <cleanup_stdio+0x30>
 8008a22:	4620      	mov	r0, r4
 8008a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a28:	f002 be50 	b.w	800b6cc <_fflush_r>
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop
 8008a30:	2400044c 	.word	0x2400044c
 8008a34:	240004b4 	.word	0x240004b4
 8008a38:	2400051c 	.word	0x2400051c

08008a3c <global_stdio_init.part.0>:
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a6c <global_stdio_init.part.0+0x30>)
 8008a40:	4c0b      	ldr	r4, [pc, #44]	@ (8008a70 <global_stdio_init.part.0+0x34>)
 8008a42:	4a0c      	ldr	r2, [pc, #48]	@ (8008a74 <global_stdio_init.part.0+0x38>)
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	4620      	mov	r0, r4
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2104      	movs	r1, #4
 8008a4c:	f7ff ff94 	bl	8008978 <std>
 8008a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a54:	2201      	movs	r2, #1
 8008a56:	2109      	movs	r1, #9
 8008a58:	f7ff ff8e 	bl	8008978 <std>
 8008a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a60:	2202      	movs	r2, #2
 8008a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a66:	2112      	movs	r1, #18
 8008a68:	f7ff bf86 	b.w	8008978 <std>
 8008a6c:	24000584 	.word	0x24000584
 8008a70:	2400044c 	.word	0x2400044c
 8008a74:	080089e5 	.word	0x080089e5

08008a78 <__sfp_lock_acquire>:
 8008a78:	4801      	ldr	r0, [pc, #4]	@ (8008a80 <__sfp_lock_acquire+0x8>)
 8008a7a:	f000 b932 	b.w	8008ce2 <__retarget_lock_acquire_recursive>
 8008a7e:	bf00      	nop
 8008a80:	2400058d 	.word	0x2400058d

08008a84 <__sfp_lock_release>:
 8008a84:	4801      	ldr	r0, [pc, #4]	@ (8008a8c <__sfp_lock_release+0x8>)
 8008a86:	f000 b92d 	b.w	8008ce4 <__retarget_lock_release_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	2400058d 	.word	0x2400058d

08008a90 <__sinit>:
 8008a90:	b510      	push	{r4, lr}
 8008a92:	4604      	mov	r4, r0
 8008a94:	f7ff fff0 	bl	8008a78 <__sfp_lock_acquire>
 8008a98:	6a23      	ldr	r3, [r4, #32]
 8008a9a:	b11b      	cbz	r3, 8008aa4 <__sinit+0x14>
 8008a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa0:	f7ff bff0 	b.w	8008a84 <__sfp_lock_release>
 8008aa4:	4b04      	ldr	r3, [pc, #16]	@ (8008ab8 <__sinit+0x28>)
 8008aa6:	6223      	str	r3, [r4, #32]
 8008aa8:	4b04      	ldr	r3, [pc, #16]	@ (8008abc <__sinit+0x2c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1f5      	bne.n	8008a9c <__sinit+0xc>
 8008ab0:	f7ff ffc4 	bl	8008a3c <global_stdio_init.part.0>
 8008ab4:	e7f2      	b.n	8008a9c <__sinit+0xc>
 8008ab6:	bf00      	nop
 8008ab8:	080089fd 	.word	0x080089fd
 8008abc:	24000584 	.word	0x24000584

08008ac0 <_fwalk_sglue>:
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4688      	mov	r8, r1
 8008ac8:	4614      	mov	r4, r2
 8008aca:	2600      	movs	r6, #0
 8008acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8008ad4:	d505      	bpl.n	8008ae2 <_fwalk_sglue+0x22>
 8008ad6:	6824      	ldr	r4, [r4, #0]
 8008ad8:	2c00      	cmp	r4, #0
 8008ada:	d1f7      	bne.n	8008acc <_fwalk_sglue+0xc>
 8008adc:	4630      	mov	r0, r6
 8008ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d907      	bls.n	8008af8 <_fwalk_sglue+0x38>
 8008ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aec:	3301      	adds	r3, #1
 8008aee:	d003      	beq.n	8008af8 <_fwalk_sglue+0x38>
 8008af0:	4629      	mov	r1, r5
 8008af2:	4638      	mov	r0, r7
 8008af4:	47c0      	blx	r8
 8008af6:	4306      	orrs	r6, r0
 8008af8:	3568      	adds	r5, #104	@ 0x68
 8008afa:	e7e9      	b.n	8008ad0 <_fwalk_sglue+0x10>

08008afc <iprintf>:
 8008afc:	b40f      	push	{r0, r1, r2, r3}
 8008afe:	b507      	push	{r0, r1, r2, lr}
 8008b00:	4906      	ldr	r1, [pc, #24]	@ (8008b1c <iprintf+0x20>)
 8008b02:	ab04      	add	r3, sp, #16
 8008b04:	6808      	ldr	r0, [r1, #0]
 8008b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b0a:	6881      	ldr	r1, [r0, #8]
 8008b0c:	9301      	str	r3, [sp, #4]
 8008b0e:	f002 fc41 	bl	800b394 <_vfiprintf_r>
 8008b12:	b003      	add	sp, #12
 8008b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b18:	b004      	add	sp, #16
 8008b1a:	4770      	bx	lr
 8008b1c:	2400001c 	.word	0x2400001c

08008b20 <siprintf>:
 8008b20:	b40e      	push	{r1, r2, r3}
 8008b22:	b500      	push	{lr}
 8008b24:	b09c      	sub	sp, #112	@ 0x70
 8008b26:	ab1d      	add	r3, sp, #116	@ 0x74
 8008b28:	9002      	str	r0, [sp, #8]
 8008b2a:	9006      	str	r0, [sp, #24]
 8008b2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b30:	4809      	ldr	r0, [pc, #36]	@ (8008b58 <siprintf+0x38>)
 8008b32:	9107      	str	r1, [sp, #28]
 8008b34:	9104      	str	r1, [sp, #16]
 8008b36:	4909      	ldr	r1, [pc, #36]	@ (8008b5c <siprintf+0x3c>)
 8008b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3c:	9105      	str	r1, [sp, #20]
 8008b3e:	6800      	ldr	r0, [r0, #0]
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	a902      	add	r1, sp, #8
 8008b44:	f002 fb00 	bl	800b148 <_svfiprintf_r>
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	b01c      	add	sp, #112	@ 0x70
 8008b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b54:	b003      	add	sp, #12
 8008b56:	4770      	bx	lr
 8008b58:	2400001c 	.word	0x2400001c
 8008b5c:	ffff0208 	.word	0xffff0208

08008b60 <__sread>:
 8008b60:	b510      	push	{r4, lr}
 8008b62:	460c      	mov	r4, r1
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	f000 f86c 	bl	8008c44 <_read_r>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	bfab      	itete	ge
 8008b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b72:	89a3      	ldrhlt	r3, [r4, #12]
 8008b74:	181b      	addge	r3, r3, r0
 8008b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b7a:	bfac      	ite	ge
 8008b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b7e:	81a3      	strhlt	r3, [r4, #12]
 8008b80:	bd10      	pop	{r4, pc}

08008b82 <__swrite>:
 8008b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b86:	461f      	mov	r7, r3
 8008b88:	898b      	ldrh	r3, [r1, #12]
 8008b8a:	05db      	lsls	r3, r3, #23
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	4616      	mov	r6, r2
 8008b92:	d505      	bpl.n	8008ba0 <__swrite+0x1e>
 8008b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b98:	2302      	movs	r3, #2
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f000 f840 	bl	8008c20 <_lseek_r>
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008baa:	81a3      	strh	r3, [r4, #12]
 8008bac:	4632      	mov	r2, r6
 8008bae:	463b      	mov	r3, r7
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb6:	f000 b857 	b.w	8008c68 <_write_r>

08008bba <__sseek>:
 8008bba:	b510      	push	{r4, lr}
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc2:	f000 f82d 	bl	8008c20 <_lseek_r>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	bf15      	itete	ne
 8008bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bd6:	81a3      	strheq	r3, [r4, #12]
 8008bd8:	bf18      	it	ne
 8008bda:	81a3      	strhne	r3, [r4, #12]
 8008bdc:	bd10      	pop	{r4, pc}

08008bde <__sclose>:
 8008bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be2:	f000 b80d 	b.w	8008c00 <_close_r>

08008be6 <memset>:
 8008be6:	4402      	add	r2, r0
 8008be8:	4603      	mov	r3, r0
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d100      	bne.n	8008bf0 <memset+0xa>
 8008bee:	4770      	bx	lr
 8008bf0:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf4:	e7f9      	b.n	8008bea <memset+0x4>
	...

08008bf8 <_localeconv_r>:
 8008bf8:	4800      	ldr	r0, [pc, #0]	@ (8008bfc <_localeconv_r+0x4>)
 8008bfa:	4770      	bx	lr
 8008bfc:	2400015c 	.word	0x2400015c

08008c00 <_close_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d06      	ldr	r5, [pc, #24]	@ (8008c1c <_close_r+0x1c>)
 8008c04:	2300      	movs	r3, #0
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	602b      	str	r3, [r5, #0]
 8008c0c:	f7f9 fd83 	bl	8002716 <_close>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_close_r+0x1a>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_close_r+0x1a>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	24000588 	.word	0x24000588

08008c20 <_lseek_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d07      	ldr	r5, [pc, #28]	@ (8008c40 <_lseek_r+0x20>)
 8008c24:	4604      	mov	r4, r0
 8008c26:	4608      	mov	r0, r1
 8008c28:	4611      	mov	r1, r2
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	602a      	str	r2, [r5, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f7f9 fd98 	bl	8002764 <_lseek>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_lseek_r+0x1e>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_lseek_r+0x1e>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	24000588 	.word	0x24000588

08008c44 <_read_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	@ (8008c64 <_read_r+0x20>)
 8008c48:	4604      	mov	r4, r0
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	602a      	str	r2, [r5, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f7f9 fd26 	bl	80026a4 <_read>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_read_r+0x1e>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_read_r+0x1e>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	24000588 	.word	0x24000588

08008c68 <_write_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d07      	ldr	r5, [pc, #28]	@ (8008c88 <_write_r+0x20>)
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	4608      	mov	r0, r1
 8008c70:	4611      	mov	r1, r2
 8008c72:	2200      	movs	r2, #0
 8008c74:	602a      	str	r2, [r5, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f7f9 fd31 	bl	80026de <_write>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_write_r+0x1e>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_write_r+0x1e>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	24000588 	.word	0x24000588

08008c8c <__errno>:
 8008c8c:	4b01      	ldr	r3, [pc, #4]	@ (8008c94 <__errno+0x8>)
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	2400001c 	.word	0x2400001c

08008c98 <__libc_init_array>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8008cd0 <__libc_init_array+0x38>)
 8008c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8008cd4 <__libc_init_array+0x3c>)
 8008c9e:	1b64      	subs	r4, r4, r5
 8008ca0:	10a4      	asrs	r4, r4, #2
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	42a6      	cmp	r6, r4
 8008ca6:	d109      	bne.n	8008cbc <__libc_init_array+0x24>
 8008ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8008cd8 <__libc_init_array+0x40>)
 8008caa:	4c0c      	ldr	r4, [pc, #48]	@ (8008cdc <__libc_init_array+0x44>)
 8008cac:	f003 fab2 	bl	800c214 <_init>
 8008cb0:	1b64      	subs	r4, r4, r5
 8008cb2:	10a4      	asrs	r4, r4, #2
 8008cb4:	2600      	movs	r6, #0
 8008cb6:	42a6      	cmp	r6, r4
 8008cb8:	d105      	bne.n	8008cc6 <__libc_init_array+0x2e>
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc0:	4798      	blx	r3
 8008cc2:	3601      	adds	r6, #1
 8008cc4:	e7ee      	b.n	8008ca4 <__libc_init_array+0xc>
 8008cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cca:	4798      	blx	r3
 8008ccc:	3601      	adds	r6, #1
 8008cce:	e7f2      	b.n	8008cb6 <__libc_init_array+0x1e>
 8008cd0:	0800cc30 	.word	0x0800cc30
 8008cd4:	0800cc30 	.word	0x0800cc30
 8008cd8:	0800cc30 	.word	0x0800cc30
 8008cdc:	0800cc34 	.word	0x0800cc34

08008ce0 <__retarget_lock_init_recursive>:
 8008ce0:	4770      	bx	lr

08008ce2 <__retarget_lock_acquire_recursive>:
 8008ce2:	4770      	bx	lr

08008ce4 <__retarget_lock_release_recursive>:
 8008ce4:	4770      	bx	lr

08008ce6 <memcpy>:
 8008ce6:	440a      	add	r2, r1
 8008ce8:	4291      	cmp	r1, r2
 8008cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cee:	d100      	bne.n	8008cf2 <memcpy+0xc>
 8008cf0:	4770      	bx	lr
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cfc:	4291      	cmp	r1, r2
 8008cfe:	d1f9      	bne.n	8008cf4 <memcpy+0xe>
 8008d00:	bd10      	pop	{r4, pc}
	...

08008d04 <nanf>:
 8008d04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008d0c <nanf+0x8>
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	7fc00000 	.word	0x7fc00000

08008d10 <quorem>:
 8008d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	6903      	ldr	r3, [r0, #16]
 8008d16:	690c      	ldr	r4, [r1, #16]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	db7e      	blt.n	8008e1c <quorem+0x10c>
 8008d1e:	3c01      	subs	r4, #1
 8008d20:	f101 0814 	add.w	r8, r1, #20
 8008d24:	00a3      	lsls	r3, r4, #2
 8008d26:	f100 0514 	add.w	r5, r0, #20
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d42:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d46:	d32e      	bcc.n	8008da6 <quorem+0x96>
 8008d48:	f04f 0a00 	mov.w	sl, #0
 8008d4c:	46c4      	mov	ip, r8
 8008d4e:	46ae      	mov	lr, r5
 8008d50:	46d3      	mov	fp, sl
 8008d52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d56:	b298      	uxth	r0, r3
 8008d58:	fb06 a000 	mla	r0, r6, r0, sl
 8008d5c:	0c02      	lsrs	r2, r0, #16
 8008d5e:	0c1b      	lsrs	r3, r3, #16
 8008d60:	fb06 2303 	mla	r3, r6, r3, r2
 8008d64:	f8de 2000 	ldr.w	r2, [lr]
 8008d68:	b280      	uxth	r0, r0
 8008d6a:	b292      	uxth	r2, r2
 8008d6c:	1a12      	subs	r2, r2, r0
 8008d6e:	445a      	add	r2, fp
 8008d70:	f8de 0000 	ldr.w	r0, [lr]
 8008d74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d82:	b292      	uxth	r2, r2
 8008d84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d88:	45e1      	cmp	r9, ip
 8008d8a:	f84e 2b04 	str.w	r2, [lr], #4
 8008d8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d92:	d2de      	bcs.n	8008d52 <quorem+0x42>
 8008d94:	9b00      	ldr	r3, [sp, #0]
 8008d96:	58eb      	ldr	r3, [r5, r3]
 8008d98:	b92b      	cbnz	r3, 8008da6 <quorem+0x96>
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	3b04      	subs	r3, #4
 8008d9e:	429d      	cmp	r5, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	d32f      	bcc.n	8008e04 <quorem+0xf4>
 8008da4:	613c      	str	r4, [r7, #16]
 8008da6:	4638      	mov	r0, r7
 8008da8:	f001 f954 	bl	800a054 <__mcmp>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	db25      	blt.n	8008dfc <quorem+0xec>
 8008db0:	4629      	mov	r1, r5
 8008db2:	2000      	movs	r0, #0
 8008db4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008db8:	f8d1 c000 	ldr.w	ip, [r1]
 8008dbc:	fa1f fe82 	uxth.w	lr, r2
 8008dc0:	fa1f f38c 	uxth.w	r3, ip
 8008dc4:	eba3 030e 	sub.w	r3, r3, lr
 8008dc8:	4403      	add	r3, r0
 8008dca:	0c12      	lsrs	r2, r2, #16
 8008dcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008dd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dda:	45c1      	cmp	r9, r8
 8008ddc:	f841 3b04 	str.w	r3, [r1], #4
 8008de0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008de4:	d2e6      	bcs.n	8008db4 <quorem+0xa4>
 8008de6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dee:	b922      	cbnz	r2, 8008dfa <quorem+0xea>
 8008df0:	3b04      	subs	r3, #4
 8008df2:	429d      	cmp	r5, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	d30b      	bcc.n	8008e10 <quorem+0x100>
 8008df8:	613c      	str	r4, [r7, #16]
 8008dfa:	3601      	adds	r6, #1
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	b003      	add	sp, #12
 8008e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e04:	6812      	ldr	r2, [r2, #0]
 8008e06:	3b04      	subs	r3, #4
 8008e08:	2a00      	cmp	r2, #0
 8008e0a:	d1cb      	bne.n	8008da4 <quorem+0x94>
 8008e0c:	3c01      	subs	r4, #1
 8008e0e:	e7c6      	b.n	8008d9e <quorem+0x8e>
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	3b04      	subs	r3, #4
 8008e14:	2a00      	cmp	r2, #0
 8008e16:	d1ef      	bne.n	8008df8 <quorem+0xe8>
 8008e18:	3c01      	subs	r4, #1
 8008e1a:	e7ea      	b.n	8008df2 <quorem+0xe2>
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	e7ee      	b.n	8008dfe <quorem+0xee>

08008e20 <_dtoa_r>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	ed2d 8b02 	vpush	{d8}
 8008e28:	69c7      	ldr	r7, [r0, #28]
 8008e2a:	b091      	sub	sp, #68	@ 0x44
 8008e2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e30:	ec55 4b10 	vmov	r4, r5, d0
 8008e34:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008e36:	9107      	str	r1, [sp, #28]
 8008e38:	4681      	mov	r9, r0
 8008e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e3e:	b97f      	cbnz	r7, 8008e60 <_dtoa_r+0x40>
 8008e40:	2010      	movs	r0, #16
 8008e42:	f000 fd8d 	bl	8009960 <malloc>
 8008e46:	4602      	mov	r2, r0
 8008e48:	f8c9 001c 	str.w	r0, [r9, #28]
 8008e4c:	b920      	cbnz	r0, 8008e58 <_dtoa_r+0x38>
 8008e4e:	4ba0      	ldr	r3, [pc, #640]	@ (80090d0 <_dtoa_r+0x2b0>)
 8008e50:	21ef      	movs	r1, #239	@ 0xef
 8008e52:	48a0      	ldr	r0, [pc, #640]	@ (80090d4 <_dtoa_r+0x2b4>)
 8008e54:	f002 fd3c 	bl	800b8d0 <__assert_func>
 8008e58:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e5c:	6007      	str	r7, [r0, #0]
 8008e5e:	60c7      	str	r7, [r0, #12]
 8008e60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e64:	6819      	ldr	r1, [r3, #0]
 8008e66:	b159      	cbz	r1, 8008e80 <_dtoa_r+0x60>
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	604a      	str	r2, [r1, #4]
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	4093      	lsls	r3, r2
 8008e70:	608b      	str	r3, [r1, #8]
 8008e72:	4648      	mov	r0, r9
 8008e74:	f000 fe6a 	bl	8009b4c <_Bfree>
 8008e78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	1e2b      	subs	r3, r5, #0
 8008e82:	bfbb      	ittet	lt
 8008e84:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e88:	9303      	strlt	r3, [sp, #12]
 8008e8a:	2300      	movge	r3, #0
 8008e8c:	2201      	movlt	r2, #1
 8008e8e:	bfac      	ite	ge
 8008e90:	6033      	strge	r3, [r6, #0]
 8008e92:	6032      	strlt	r2, [r6, #0]
 8008e94:	4b90      	ldr	r3, [pc, #576]	@ (80090d8 <_dtoa_r+0x2b8>)
 8008e96:	9e03      	ldr	r6, [sp, #12]
 8008e98:	43b3      	bics	r3, r6
 8008e9a:	d110      	bne.n	8008ebe <_dtoa_r+0x9e>
 8008e9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008ea8:	4323      	orrs	r3, r4
 8008eaa:	f000 84de 	beq.w	800986a <_dtoa_r+0xa4a>
 8008eae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008eb0:	4f8a      	ldr	r7, [pc, #552]	@ (80090dc <_dtoa_r+0x2bc>)
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 84e0 	beq.w	8009878 <_dtoa_r+0xa58>
 8008eb8:	1cfb      	adds	r3, r7, #3
 8008eba:	f000 bcdb 	b.w	8009874 <_dtoa_r+0xa54>
 8008ebe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008ec2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eca:	d10a      	bne.n	8008ee2 <_dtoa_r+0xc2>
 8008ecc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ece:	2301      	movs	r3, #1
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ed4:	b113      	cbz	r3, 8008edc <_dtoa_r+0xbc>
 8008ed6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008ed8:	4b81      	ldr	r3, [pc, #516]	@ (80090e0 <_dtoa_r+0x2c0>)
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	4f81      	ldr	r7, [pc, #516]	@ (80090e4 <_dtoa_r+0x2c4>)
 8008ede:	f000 bccb 	b.w	8009878 <_dtoa_r+0xa58>
 8008ee2:	aa0e      	add	r2, sp, #56	@ 0x38
 8008ee4:	a90f      	add	r1, sp, #60	@ 0x3c
 8008ee6:	4648      	mov	r0, r9
 8008ee8:	eeb0 0b48 	vmov.f64	d0, d8
 8008eec:	f001 f9d2 	bl	800a294 <__d2b>
 8008ef0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008ef4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ef6:	9001      	str	r0, [sp, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d045      	beq.n	8008f88 <_dtoa_r+0x168>
 8008efc:	eeb0 7b48 	vmov.f64	d7, d8
 8008f00:	ee18 1a90 	vmov	r1, s17
 8008f04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008f08:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008f0c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008f10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008f14:	2500      	movs	r5, #0
 8008f16:	ee07 1a90 	vmov	s15, r1
 8008f1a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008f1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80090b8 <_dtoa_r+0x298>
 8008f22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f26:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80090c0 <_dtoa_r+0x2a0>
 8008f2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008f2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80090c8 <_dtoa_r+0x2a8>
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008f3a:	eeb0 7b46 	vmov.f64	d7, d6
 8008f3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008f42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008f46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4e:	ee16 8a90 	vmov	r8, s13
 8008f52:	d508      	bpl.n	8008f66 <_dtoa_r+0x146>
 8008f54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008f58:	eeb4 6b47 	vcmp.f64	d6, d7
 8008f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f60:	bf18      	it	ne
 8008f62:	f108 38ff 	addne.w	r8, r8, #4294967295
 8008f66:	f1b8 0f16 	cmp.w	r8, #22
 8008f6a:	d82b      	bhi.n	8008fc4 <_dtoa_r+0x1a4>
 8008f6c:	495e      	ldr	r1, [pc, #376]	@ (80090e8 <_dtoa_r+0x2c8>)
 8008f6e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008f72:	ed91 7b00 	vldr	d7, [r1]
 8008f76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7e:	d501      	bpl.n	8008f84 <_dtoa_r+0x164>
 8008f80:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f84:	2100      	movs	r1, #0
 8008f86:	e01e      	b.n	8008fc6 <_dtoa_r+0x1a6>
 8008f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008f90:	2920      	cmp	r1, #32
 8008f92:	bfc1      	itttt	gt
 8008f94:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008f98:	408e      	lslgt	r6, r1
 8008f9a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8008f9e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008fa2:	bfd6      	itet	le
 8008fa4:	f1c1 0120 	rsble	r1, r1, #32
 8008fa8:	4331      	orrgt	r1, r6
 8008faa:	fa04 f101 	lslle.w	r1, r4, r1
 8008fae:	ee07 1a90 	vmov	s15, r1
 8008fb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	ee17 1a90 	vmov	r1, s15
 8008fbc:	2501      	movs	r5, #1
 8008fbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008fc2:	e7a8      	b.n	8008f16 <_dtoa_r+0xf6>
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	1e53      	subs	r3, r2, #1
 8008fca:	9306      	str	r3, [sp, #24]
 8008fcc:	bf45      	ittet	mi
 8008fce:	f1c2 0301 	rsbmi	r3, r2, #1
 8008fd2:	9305      	strmi	r3, [sp, #20]
 8008fd4:	2300      	movpl	r3, #0
 8008fd6:	2300      	movmi	r3, #0
 8008fd8:	bf4c      	ite	mi
 8008fda:	9306      	strmi	r3, [sp, #24]
 8008fdc:	9305      	strpl	r3, [sp, #20]
 8008fde:	f1b8 0f00 	cmp.w	r8, #0
 8008fe2:	910c      	str	r1, [sp, #48]	@ 0x30
 8008fe4:	db18      	blt.n	8009018 <_dtoa_r+0x1f8>
 8008fe6:	9b06      	ldr	r3, [sp, #24]
 8008fe8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008fec:	4443      	add	r3, r8
 8008fee:	9306      	str	r3, [sp, #24]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9a07      	ldr	r2, [sp, #28]
 8008ff4:	2a09      	cmp	r2, #9
 8008ff6:	d849      	bhi.n	800908c <_dtoa_r+0x26c>
 8008ff8:	2a05      	cmp	r2, #5
 8008ffa:	bfc4      	itt	gt
 8008ffc:	3a04      	subgt	r2, #4
 8008ffe:	9207      	strgt	r2, [sp, #28]
 8009000:	9a07      	ldr	r2, [sp, #28]
 8009002:	f1a2 0202 	sub.w	r2, r2, #2
 8009006:	bfcc      	ite	gt
 8009008:	2400      	movgt	r4, #0
 800900a:	2401      	movle	r4, #1
 800900c:	2a03      	cmp	r2, #3
 800900e:	d848      	bhi.n	80090a2 <_dtoa_r+0x282>
 8009010:	e8df f002 	tbb	[pc, r2]
 8009014:	3a2c2e0b 	.word	0x3a2c2e0b
 8009018:	9b05      	ldr	r3, [sp, #20]
 800901a:	2200      	movs	r2, #0
 800901c:	eba3 0308 	sub.w	r3, r3, r8
 8009020:	9305      	str	r3, [sp, #20]
 8009022:	920a      	str	r2, [sp, #40]	@ 0x28
 8009024:	f1c8 0300 	rsb	r3, r8, #0
 8009028:	e7e3      	b.n	8008ff2 <_dtoa_r+0x1d2>
 800902a:	2200      	movs	r2, #0
 800902c:	9208      	str	r2, [sp, #32]
 800902e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009030:	2a00      	cmp	r2, #0
 8009032:	dc39      	bgt.n	80090a8 <_dtoa_r+0x288>
 8009034:	f04f 0b01 	mov.w	fp, #1
 8009038:	46da      	mov	sl, fp
 800903a:	465a      	mov	r2, fp
 800903c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009040:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009044:	2100      	movs	r1, #0
 8009046:	2004      	movs	r0, #4
 8009048:	f100 0614 	add.w	r6, r0, #20
 800904c:	4296      	cmp	r6, r2
 800904e:	d930      	bls.n	80090b2 <_dtoa_r+0x292>
 8009050:	6079      	str	r1, [r7, #4]
 8009052:	4648      	mov	r0, r9
 8009054:	9304      	str	r3, [sp, #16]
 8009056:	f000 fd39 	bl	8009acc <_Balloc>
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	4607      	mov	r7, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	d146      	bne.n	80090f0 <_dtoa_r+0x2d0>
 8009062:	4b22      	ldr	r3, [pc, #136]	@ (80090ec <_dtoa_r+0x2cc>)
 8009064:	4602      	mov	r2, r0
 8009066:	f240 11af 	movw	r1, #431	@ 0x1af
 800906a:	e6f2      	b.n	8008e52 <_dtoa_r+0x32>
 800906c:	2201      	movs	r2, #1
 800906e:	e7dd      	b.n	800902c <_dtoa_r+0x20c>
 8009070:	2200      	movs	r2, #0
 8009072:	9208      	str	r2, [sp, #32]
 8009074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009076:	eb08 0b02 	add.w	fp, r8, r2
 800907a:	f10b 0a01 	add.w	sl, fp, #1
 800907e:	4652      	mov	r2, sl
 8009080:	2a01      	cmp	r2, #1
 8009082:	bfb8      	it	lt
 8009084:	2201      	movlt	r2, #1
 8009086:	e7db      	b.n	8009040 <_dtoa_r+0x220>
 8009088:	2201      	movs	r2, #1
 800908a:	e7f2      	b.n	8009072 <_dtoa_r+0x252>
 800908c:	2401      	movs	r4, #1
 800908e:	2200      	movs	r2, #0
 8009090:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009094:	f04f 3bff 	mov.w	fp, #4294967295
 8009098:	2100      	movs	r1, #0
 800909a:	46da      	mov	sl, fp
 800909c:	2212      	movs	r2, #18
 800909e:	9109      	str	r1, [sp, #36]	@ 0x24
 80090a0:	e7ce      	b.n	8009040 <_dtoa_r+0x220>
 80090a2:	2201      	movs	r2, #1
 80090a4:	9208      	str	r2, [sp, #32]
 80090a6:	e7f5      	b.n	8009094 <_dtoa_r+0x274>
 80090a8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80090ac:	46da      	mov	sl, fp
 80090ae:	465a      	mov	r2, fp
 80090b0:	e7c6      	b.n	8009040 <_dtoa_r+0x220>
 80090b2:	3101      	adds	r1, #1
 80090b4:	0040      	lsls	r0, r0, #1
 80090b6:	e7c7      	b.n	8009048 <_dtoa_r+0x228>
 80090b8:	636f4361 	.word	0x636f4361
 80090bc:	3fd287a7 	.word	0x3fd287a7
 80090c0:	8b60c8b3 	.word	0x8b60c8b3
 80090c4:	3fc68a28 	.word	0x3fc68a28
 80090c8:	509f79fb 	.word	0x509f79fb
 80090cc:	3fd34413 	.word	0x3fd34413
 80090d0:	0800c83e 	.word	0x0800c83e
 80090d4:	0800c855 	.word	0x0800c855
 80090d8:	7ff00000 	.word	0x7ff00000
 80090dc:	0800c83a 	.word	0x0800c83a
 80090e0:	0800c809 	.word	0x0800c809
 80090e4:	0800c808 	.word	0x0800c808
 80090e8:	0800c950 	.word	0x0800c950
 80090ec:	0800c8ad 	.word	0x0800c8ad
 80090f0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80090f4:	f1ba 0f0e 	cmp.w	sl, #14
 80090f8:	6010      	str	r0, [r2, #0]
 80090fa:	d86f      	bhi.n	80091dc <_dtoa_r+0x3bc>
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	d06d      	beq.n	80091dc <_dtoa_r+0x3bc>
 8009100:	f1b8 0f00 	cmp.w	r8, #0
 8009104:	f340 80c2 	ble.w	800928c <_dtoa_r+0x46c>
 8009108:	4aca      	ldr	r2, [pc, #808]	@ (8009434 <_dtoa_r+0x614>)
 800910a:	f008 010f 	and.w	r1, r8, #15
 800910e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009112:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009116:	ed92 7b00 	vldr	d7, [r2]
 800911a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800911e:	f000 80a9 	beq.w	8009274 <_dtoa_r+0x454>
 8009122:	4ac5      	ldr	r2, [pc, #788]	@ (8009438 <_dtoa_r+0x618>)
 8009124:	ed92 6b08 	vldr	d6, [r2, #32]
 8009128:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800912c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009130:	f001 010f 	and.w	r1, r1, #15
 8009134:	2203      	movs	r2, #3
 8009136:	48c0      	ldr	r0, [pc, #768]	@ (8009438 <_dtoa_r+0x618>)
 8009138:	2900      	cmp	r1, #0
 800913a:	f040 809d 	bne.w	8009278 <_dtoa_r+0x458>
 800913e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009142:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009146:	ed8d 7b02 	vstr	d7, [sp, #8]
 800914a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800914c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009150:	2900      	cmp	r1, #0
 8009152:	f000 80c1 	beq.w	80092d8 <_dtoa_r+0x4b8>
 8009156:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800915a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009162:	f140 80b9 	bpl.w	80092d8 <_dtoa_r+0x4b8>
 8009166:	f1ba 0f00 	cmp.w	sl, #0
 800916a:	f000 80b5 	beq.w	80092d8 <_dtoa_r+0x4b8>
 800916e:	f1bb 0f00 	cmp.w	fp, #0
 8009172:	dd31      	ble.n	80091d8 <_dtoa_r+0x3b8>
 8009174:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009178:	ee27 7b06 	vmul.f64	d7, d7, d6
 800917c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009180:	f108 31ff 	add.w	r1, r8, #4294967295
 8009184:	9104      	str	r1, [sp, #16]
 8009186:	3201      	adds	r2, #1
 8009188:	465c      	mov	r4, fp
 800918a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800918e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009192:	ee07 2a90 	vmov	s15, r2
 8009196:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800919a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800919e:	ee15 2a90 	vmov	r2, s11
 80091a2:	ec51 0b15 	vmov	r0, r1, d5
 80091a6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80091aa:	2c00      	cmp	r4, #0
 80091ac:	f040 8098 	bne.w	80092e0 <_dtoa_r+0x4c0>
 80091b0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80091b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80091b8:	ec41 0b17 	vmov	d7, r0, r1
 80091bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80091c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c4:	f300 8261 	bgt.w	800968a <_dtoa_r+0x86a>
 80091c8:	eeb1 7b47 	vneg.f64	d7, d7
 80091cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80091d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d4:	f100 80f5 	bmi.w	80093c2 <_dtoa_r+0x5a2>
 80091d8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80091dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80091de:	2a00      	cmp	r2, #0
 80091e0:	f2c0 812c 	blt.w	800943c <_dtoa_r+0x61c>
 80091e4:	f1b8 0f0e 	cmp.w	r8, #14
 80091e8:	f300 8128 	bgt.w	800943c <_dtoa_r+0x61c>
 80091ec:	4b91      	ldr	r3, [pc, #580]	@ (8009434 <_dtoa_r+0x614>)
 80091ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80091f2:	ed93 6b00 	vldr	d6, [r3]
 80091f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da03      	bge.n	8009204 <_dtoa_r+0x3e4>
 80091fc:	f1ba 0f00 	cmp.w	sl, #0
 8009200:	f340 80d2 	ble.w	80093a8 <_dtoa_r+0x588>
 8009204:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009208:	ed9d 7b02 	vldr	d7, [sp, #8]
 800920c:	463e      	mov	r6, r7
 800920e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009212:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009216:	ee15 3a10 	vmov	r3, s10
 800921a:	3330      	adds	r3, #48	@ 0x30
 800921c:	f806 3b01 	strb.w	r3, [r6], #1
 8009220:	1bf3      	subs	r3, r6, r7
 8009222:	459a      	cmp	sl, r3
 8009224:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009228:	eea3 7b46 	vfms.f64	d7, d3, d6
 800922c:	f040 80f8 	bne.w	8009420 <_dtoa_r+0x600>
 8009230:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009234:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800923c:	f300 80dd 	bgt.w	80093fa <_dtoa_r+0x5da>
 8009240:	eeb4 7b46 	vcmp.f64	d7, d6
 8009244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009248:	d104      	bne.n	8009254 <_dtoa_r+0x434>
 800924a:	ee15 3a10 	vmov	r3, s10
 800924e:	07db      	lsls	r3, r3, #31
 8009250:	f100 80d3 	bmi.w	80093fa <_dtoa_r+0x5da>
 8009254:	9901      	ldr	r1, [sp, #4]
 8009256:	4648      	mov	r0, r9
 8009258:	f000 fc78 	bl	8009b4c <_Bfree>
 800925c:	2300      	movs	r3, #0
 800925e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009260:	7033      	strb	r3, [r6, #0]
 8009262:	f108 0301 	add.w	r3, r8, #1
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8304 	beq.w	8009878 <_dtoa_r+0xa58>
 8009270:	601e      	str	r6, [r3, #0]
 8009272:	e301      	b.n	8009878 <_dtoa_r+0xa58>
 8009274:	2202      	movs	r2, #2
 8009276:	e75e      	b.n	8009136 <_dtoa_r+0x316>
 8009278:	07cc      	lsls	r4, r1, #31
 800927a:	d504      	bpl.n	8009286 <_dtoa_r+0x466>
 800927c:	ed90 6b00 	vldr	d6, [r0]
 8009280:	3201      	adds	r2, #1
 8009282:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009286:	1049      	asrs	r1, r1, #1
 8009288:	3008      	adds	r0, #8
 800928a:	e755      	b.n	8009138 <_dtoa_r+0x318>
 800928c:	d022      	beq.n	80092d4 <_dtoa_r+0x4b4>
 800928e:	f1c8 0100 	rsb	r1, r8, #0
 8009292:	4a68      	ldr	r2, [pc, #416]	@ (8009434 <_dtoa_r+0x614>)
 8009294:	f001 000f 	and.w	r0, r1, #15
 8009298:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800929c:	ed92 7b00 	vldr	d7, [r2]
 80092a0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80092a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092a8:	4863      	ldr	r0, [pc, #396]	@ (8009438 <_dtoa_r+0x618>)
 80092aa:	1109      	asrs	r1, r1, #4
 80092ac:	2400      	movs	r4, #0
 80092ae:	2202      	movs	r2, #2
 80092b0:	b929      	cbnz	r1, 80092be <_dtoa_r+0x49e>
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	f43f af49 	beq.w	800914a <_dtoa_r+0x32a>
 80092b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092bc:	e745      	b.n	800914a <_dtoa_r+0x32a>
 80092be:	07ce      	lsls	r6, r1, #31
 80092c0:	d505      	bpl.n	80092ce <_dtoa_r+0x4ae>
 80092c2:	ed90 6b00 	vldr	d6, [r0]
 80092c6:	3201      	adds	r2, #1
 80092c8:	2401      	movs	r4, #1
 80092ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092ce:	1049      	asrs	r1, r1, #1
 80092d0:	3008      	adds	r0, #8
 80092d2:	e7ed      	b.n	80092b0 <_dtoa_r+0x490>
 80092d4:	2202      	movs	r2, #2
 80092d6:	e738      	b.n	800914a <_dtoa_r+0x32a>
 80092d8:	f8cd 8010 	str.w	r8, [sp, #16]
 80092dc:	4654      	mov	r4, sl
 80092de:	e754      	b.n	800918a <_dtoa_r+0x36a>
 80092e0:	4a54      	ldr	r2, [pc, #336]	@ (8009434 <_dtoa_r+0x614>)
 80092e2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80092e6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80092ea:	9a08      	ldr	r2, [sp, #32]
 80092ec:	ec41 0b17 	vmov	d7, r0, r1
 80092f0:	443c      	add	r4, r7
 80092f2:	b34a      	cbz	r2, 8009348 <_dtoa_r+0x528>
 80092f4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80092f8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80092fc:	463e      	mov	r6, r7
 80092fe:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009302:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009306:	ee35 7b47 	vsub.f64	d7, d5, d7
 800930a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800930e:	ee14 2a90 	vmov	r2, s9
 8009312:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009316:	3230      	adds	r2, #48	@ 0x30
 8009318:	ee36 6b45 	vsub.f64	d6, d6, d5
 800931c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009324:	f806 2b01 	strb.w	r2, [r6], #1
 8009328:	d438      	bmi.n	800939c <_dtoa_r+0x57c>
 800932a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800932e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009336:	d462      	bmi.n	80093fe <_dtoa_r+0x5de>
 8009338:	42a6      	cmp	r6, r4
 800933a:	f43f af4d 	beq.w	80091d8 <_dtoa_r+0x3b8>
 800933e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009342:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009346:	e7e0      	b.n	800930a <_dtoa_r+0x4ea>
 8009348:	4621      	mov	r1, r4
 800934a:	463e      	mov	r6, r7
 800934c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009350:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009354:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009358:	ee14 2a90 	vmov	r2, s9
 800935c:	3230      	adds	r2, #48	@ 0x30
 800935e:	f806 2b01 	strb.w	r2, [r6], #1
 8009362:	42a6      	cmp	r6, r4
 8009364:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009368:	ee36 6b45 	vsub.f64	d6, d6, d5
 800936c:	d119      	bne.n	80093a2 <_dtoa_r+0x582>
 800936e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009372:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009376:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800937a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937e:	dc3e      	bgt.n	80093fe <_dtoa_r+0x5de>
 8009380:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009384:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938c:	f57f af24 	bpl.w	80091d8 <_dtoa_r+0x3b8>
 8009390:	460e      	mov	r6, r1
 8009392:	3901      	subs	r1, #1
 8009394:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009398:	2b30      	cmp	r3, #48	@ 0x30
 800939a:	d0f9      	beq.n	8009390 <_dtoa_r+0x570>
 800939c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80093a0:	e758      	b.n	8009254 <_dtoa_r+0x434>
 80093a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80093a6:	e7d5      	b.n	8009354 <_dtoa_r+0x534>
 80093a8:	d10b      	bne.n	80093c2 <_dtoa_r+0x5a2>
 80093aa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80093ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80093b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80093ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093be:	f2c0 8161 	blt.w	8009684 <_dtoa_r+0x864>
 80093c2:	2400      	movs	r4, #0
 80093c4:	4625      	mov	r5, r4
 80093c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c8:	43db      	mvns	r3, r3
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	463e      	mov	r6, r7
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	4621      	mov	r1, r4
 80093d4:	4648      	mov	r0, r9
 80093d6:	f000 fbb9 	bl	8009b4c <_Bfree>
 80093da:	2d00      	cmp	r5, #0
 80093dc:	d0de      	beq.n	800939c <_dtoa_r+0x57c>
 80093de:	f1b8 0f00 	cmp.w	r8, #0
 80093e2:	d005      	beq.n	80093f0 <_dtoa_r+0x5d0>
 80093e4:	45a8      	cmp	r8, r5
 80093e6:	d003      	beq.n	80093f0 <_dtoa_r+0x5d0>
 80093e8:	4641      	mov	r1, r8
 80093ea:	4648      	mov	r0, r9
 80093ec:	f000 fbae 	bl	8009b4c <_Bfree>
 80093f0:	4629      	mov	r1, r5
 80093f2:	4648      	mov	r0, r9
 80093f4:	f000 fbaa 	bl	8009b4c <_Bfree>
 80093f8:	e7d0      	b.n	800939c <_dtoa_r+0x57c>
 80093fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80093fe:	4633      	mov	r3, r6
 8009400:	461e      	mov	r6, r3
 8009402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009406:	2a39      	cmp	r2, #57	@ 0x39
 8009408:	d106      	bne.n	8009418 <_dtoa_r+0x5f8>
 800940a:	429f      	cmp	r7, r3
 800940c:	d1f8      	bne.n	8009400 <_dtoa_r+0x5e0>
 800940e:	9a04      	ldr	r2, [sp, #16]
 8009410:	3201      	adds	r2, #1
 8009412:	9204      	str	r2, [sp, #16]
 8009414:	2230      	movs	r2, #48	@ 0x30
 8009416:	703a      	strb	r2, [r7, #0]
 8009418:	781a      	ldrb	r2, [r3, #0]
 800941a:	3201      	adds	r2, #1
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	e7bd      	b.n	800939c <_dtoa_r+0x57c>
 8009420:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009424:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942c:	f47f aeef 	bne.w	800920e <_dtoa_r+0x3ee>
 8009430:	e710      	b.n	8009254 <_dtoa_r+0x434>
 8009432:	bf00      	nop
 8009434:	0800c950 	.word	0x0800c950
 8009438:	0800c928 	.word	0x0800c928
 800943c:	9908      	ldr	r1, [sp, #32]
 800943e:	2900      	cmp	r1, #0
 8009440:	f000 80e3 	beq.w	800960a <_dtoa_r+0x7ea>
 8009444:	9907      	ldr	r1, [sp, #28]
 8009446:	2901      	cmp	r1, #1
 8009448:	f300 80c8 	bgt.w	80095dc <_dtoa_r+0x7bc>
 800944c:	2d00      	cmp	r5, #0
 800944e:	f000 80c1 	beq.w	80095d4 <_dtoa_r+0x7b4>
 8009452:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009456:	9e05      	ldr	r6, [sp, #20]
 8009458:	461c      	mov	r4, r3
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	9b05      	ldr	r3, [sp, #20]
 800945e:	4413      	add	r3, r2
 8009460:	9305      	str	r3, [sp, #20]
 8009462:	9b06      	ldr	r3, [sp, #24]
 8009464:	2101      	movs	r1, #1
 8009466:	4413      	add	r3, r2
 8009468:	4648      	mov	r0, r9
 800946a:	9306      	str	r3, [sp, #24]
 800946c:	f000 fc6c 	bl	8009d48 <__i2b>
 8009470:	9b04      	ldr	r3, [sp, #16]
 8009472:	4605      	mov	r5, r0
 8009474:	b166      	cbz	r6, 8009490 <_dtoa_r+0x670>
 8009476:	9a06      	ldr	r2, [sp, #24]
 8009478:	2a00      	cmp	r2, #0
 800947a:	dd09      	ble.n	8009490 <_dtoa_r+0x670>
 800947c:	42b2      	cmp	r2, r6
 800947e:	9905      	ldr	r1, [sp, #20]
 8009480:	bfa8      	it	ge
 8009482:	4632      	movge	r2, r6
 8009484:	1a89      	subs	r1, r1, r2
 8009486:	9105      	str	r1, [sp, #20]
 8009488:	9906      	ldr	r1, [sp, #24]
 800948a:	1ab6      	subs	r6, r6, r2
 800948c:	1a8a      	subs	r2, r1, r2
 800948e:	9206      	str	r2, [sp, #24]
 8009490:	b1fb      	cbz	r3, 80094d2 <_dtoa_r+0x6b2>
 8009492:	9a08      	ldr	r2, [sp, #32]
 8009494:	2a00      	cmp	r2, #0
 8009496:	f000 80bc 	beq.w	8009612 <_dtoa_r+0x7f2>
 800949a:	b19c      	cbz	r4, 80094c4 <_dtoa_r+0x6a4>
 800949c:	4629      	mov	r1, r5
 800949e:	4622      	mov	r2, r4
 80094a0:	4648      	mov	r0, r9
 80094a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094a4:	f000 fd10 	bl	8009ec8 <__pow5mult>
 80094a8:	9a01      	ldr	r2, [sp, #4]
 80094aa:	4601      	mov	r1, r0
 80094ac:	4605      	mov	r5, r0
 80094ae:	4648      	mov	r0, r9
 80094b0:	f000 fc60 	bl	8009d74 <__multiply>
 80094b4:	9901      	ldr	r1, [sp, #4]
 80094b6:	9004      	str	r0, [sp, #16]
 80094b8:	4648      	mov	r0, r9
 80094ba:	f000 fb47 	bl	8009b4c <_Bfree>
 80094be:	9a04      	ldr	r2, [sp, #16]
 80094c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094c2:	9201      	str	r2, [sp, #4]
 80094c4:	1b1a      	subs	r2, r3, r4
 80094c6:	d004      	beq.n	80094d2 <_dtoa_r+0x6b2>
 80094c8:	9901      	ldr	r1, [sp, #4]
 80094ca:	4648      	mov	r0, r9
 80094cc:	f000 fcfc 	bl	8009ec8 <__pow5mult>
 80094d0:	9001      	str	r0, [sp, #4]
 80094d2:	2101      	movs	r1, #1
 80094d4:	4648      	mov	r0, r9
 80094d6:	f000 fc37 	bl	8009d48 <__i2b>
 80094da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094dc:	4604      	mov	r4, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 81d0 	beq.w	8009884 <_dtoa_r+0xa64>
 80094e4:	461a      	mov	r2, r3
 80094e6:	4601      	mov	r1, r0
 80094e8:	4648      	mov	r0, r9
 80094ea:	f000 fced 	bl	8009ec8 <__pow5mult>
 80094ee:	9b07      	ldr	r3, [sp, #28]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	4604      	mov	r4, r0
 80094f4:	f300 8095 	bgt.w	8009622 <_dtoa_r+0x802>
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f040 808b 	bne.w	8009616 <_dtoa_r+0x7f6>
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009506:	2a00      	cmp	r2, #0
 8009508:	f040 8087 	bne.w	800961a <_dtoa_r+0x7fa>
 800950c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009510:	0d12      	lsrs	r2, r2, #20
 8009512:	0512      	lsls	r2, r2, #20
 8009514:	2a00      	cmp	r2, #0
 8009516:	f000 8082 	beq.w	800961e <_dtoa_r+0x7fe>
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	3301      	adds	r3, #1
 800951e:	9305      	str	r3, [sp, #20]
 8009520:	9b06      	ldr	r3, [sp, #24]
 8009522:	3301      	adds	r3, #1
 8009524:	9306      	str	r3, [sp, #24]
 8009526:	2301      	movs	r3, #1
 8009528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800952a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 81af 	beq.w	8009890 <_dtoa_r+0xa70>
 8009532:	6922      	ldr	r2, [r4, #16]
 8009534:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009538:	6910      	ldr	r0, [r2, #16]
 800953a:	f000 fbb9 	bl	8009cb0 <__hi0bits>
 800953e:	f1c0 0020 	rsb	r0, r0, #32
 8009542:	9b06      	ldr	r3, [sp, #24]
 8009544:	4418      	add	r0, r3
 8009546:	f010 001f 	ands.w	r0, r0, #31
 800954a:	d076      	beq.n	800963a <_dtoa_r+0x81a>
 800954c:	f1c0 0220 	rsb	r2, r0, #32
 8009550:	2a04      	cmp	r2, #4
 8009552:	dd69      	ble.n	8009628 <_dtoa_r+0x808>
 8009554:	9b05      	ldr	r3, [sp, #20]
 8009556:	f1c0 001c 	rsb	r0, r0, #28
 800955a:	4403      	add	r3, r0
 800955c:	9305      	str	r3, [sp, #20]
 800955e:	9b06      	ldr	r3, [sp, #24]
 8009560:	4406      	add	r6, r0
 8009562:	4403      	add	r3, r0
 8009564:	9306      	str	r3, [sp, #24]
 8009566:	9b05      	ldr	r3, [sp, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	dd05      	ble.n	8009578 <_dtoa_r+0x758>
 800956c:	9901      	ldr	r1, [sp, #4]
 800956e:	461a      	mov	r2, r3
 8009570:	4648      	mov	r0, r9
 8009572:	f000 fd03 	bl	8009f7c <__lshift>
 8009576:	9001      	str	r0, [sp, #4]
 8009578:	9b06      	ldr	r3, [sp, #24]
 800957a:	2b00      	cmp	r3, #0
 800957c:	dd05      	ble.n	800958a <_dtoa_r+0x76a>
 800957e:	4621      	mov	r1, r4
 8009580:	461a      	mov	r2, r3
 8009582:	4648      	mov	r0, r9
 8009584:	f000 fcfa 	bl	8009f7c <__lshift>
 8009588:	4604      	mov	r4, r0
 800958a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800958c:	2b00      	cmp	r3, #0
 800958e:	d056      	beq.n	800963e <_dtoa_r+0x81e>
 8009590:	9801      	ldr	r0, [sp, #4]
 8009592:	4621      	mov	r1, r4
 8009594:	f000 fd5e 	bl	800a054 <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	da50      	bge.n	800963e <_dtoa_r+0x81e>
 800959c:	f108 33ff 	add.w	r3, r8, #4294967295
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	9901      	ldr	r1, [sp, #4]
 80095a4:	2300      	movs	r3, #0
 80095a6:	220a      	movs	r2, #10
 80095a8:	4648      	mov	r0, r9
 80095aa:	f000 faf1 	bl	8009b90 <__multadd>
 80095ae:	9b08      	ldr	r3, [sp, #32]
 80095b0:	9001      	str	r0, [sp, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 816e 	beq.w	8009894 <_dtoa_r+0xa74>
 80095b8:	4629      	mov	r1, r5
 80095ba:	2300      	movs	r3, #0
 80095bc:	220a      	movs	r2, #10
 80095be:	4648      	mov	r0, r9
 80095c0:	f000 fae6 	bl	8009b90 <__multadd>
 80095c4:	f1bb 0f00 	cmp.w	fp, #0
 80095c8:	4605      	mov	r5, r0
 80095ca:	dc64      	bgt.n	8009696 <_dtoa_r+0x876>
 80095cc:	9b07      	ldr	r3, [sp, #28]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	dc3e      	bgt.n	8009650 <_dtoa_r+0x830>
 80095d2:	e060      	b.n	8009696 <_dtoa_r+0x876>
 80095d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80095da:	e73c      	b.n	8009456 <_dtoa_r+0x636>
 80095dc:	f10a 34ff 	add.w	r4, sl, #4294967295
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	bfbf      	itttt	lt
 80095e4:	1ae2      	sublt	r2, r4, r3
 80095e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80095e8:	189b      	addlt	r3, r3, r2
 80095ea:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80095ec:	bfae      	itee	ge
 80095ee:	1b1c      	subge	r4, r3, r4
 80095f0:	4623      	movlt	r3, r4
 80095f2:	2400      	movlt	r4, #0
 80095f4:	f1ba 0f00 	cmp.w	sl, #0
 80095f8:	bfb5      	itete	lt
 80095fa:	9a05      	ldrlt	r2, [sp, #20]
 80095fc:	9e05      	ldrge	r6, [sp, #20]
 80095fe:	eba2 060a 	sublt.w	r6, r2, sl
 8009602:	4652      	movge	r2, sl
 8009604:	bfb8      	it	lt
 8009606:	2200      	movlt	r2, #0
 8009608:	e727      	b.n	800945a <_dtoa_r+0x63a>
 800960a:	9e05      	ldr	r6, [sp, #20]
 800960c:	9d08      	ldr	r5, [sp, #32]
 800960e:	461c      	mov	r4, r3
 8009610:	e730      	b.n	8009474 <_dtoa_r+0x654>
 8009612:	461a      	mov	r2, r3
 8009614:	e758      	b.n	80094c8 <_dtoa_r+0x6a8>
 8009616:	2300      	movs	r3, #0
 8009618:	e786      	b.n	8009528 <_dtoa_r+0x708>
 800961a:	9b02      	ldr	r3, [sp, #8]
 800961c:	e784      	b.n	8009528 <_dtoa_r+0x708>
 800961e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009620:	e783      	b.n	800952a <_dtoa_r+0x70a>
 8009622:	2300      	movs	r3, #0
 8009624:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009626:	e784      	b.n	8009532 <_dtoa_r+0x712>
 8009628:	d09d      	beq.n	8009566 <_dtoa_r+0x746>
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	321c      	adds	r2, #28
 800962e:	4413      	add	r3, r2
 8009630:	9305      	str	r3, [sp, #20]
 8009632:	9b06      	ldr	r3, [sp, #24]
 8009634:	4416      	add	r6, r2
 8009636:	4413      	add	r3, r2
 8009638:	e794      	b.n	8009564 <_dtoa_r+0x744>
 800963a:	4602      	mov	r2, r0
 800963c:	e7f5      	b.n	800962a <_dtoa_r+0x80a>
 800963e:	f1ba 0f00 	cmp.w	sl, #0
 8009642:	f8cd 8010 	str.w	r8, [sp, #16]
 8009646:	46d3      	mov	fp, sl
 8009648:	dc21      	bgt.n	800968e <_dtoa_r+0x86e>
 800964a:	9b07      	ldr	r3, [sp, #28]
 800964c:	2b02      	cmp	r3, #2
 800964e:	dd1e      	ble.n	800968e <_dtoa_r+0x86e>
 8009650:	f1bb 0f00 	cmp.w	fp, #0
 8009654:	f47f aeb7 	bne.w	80093c6 <_dtoa_r+0x5a6>
 8009658:	4621      	mov	r1, r4
 800965a:	465b      	mov	r3, fp
 800965c:	2205      	movs	r2, #5
 800965e:	4648      	mov	r0, r9
 8009660:	f000 fa96 	bl	8009b90 <__multadd>
 8009664:	4601      	mov	r1, r0
 8009666:	4604      	mov	r4, r0
 8009668:	9801      	ldr	r0, [sp, #4]
 800966a:	f000 fcf3 	bl	800a054 <__mcmp>
 800966e:	2800      	cmp	r0, #0
 8009670:	f77f aea9 	ble.w	80093c6 <_dtoa_r+0x5a6>
 8009674:	463e      	mov	r6, r7
 8009676:	2331      	movs	r3, #49	@ 0x31
 8009678:	f806 3b01 	strb.w	r3, [r6], #1
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	3301      	adds	r3, #1
 8009680:	9304      	str	r3, [sp, #16]
 8009682:	e6a4      	b.n	80093ce <_dtoa_r+0x5ae>
 8009684:	f8cd 8010 	str.w	r8, [sp, #16]
 8009688:	4654      	mov	r4, sl
 800968a:	4625      	mov	r5, r4
 800968c:	e7f2      	b.n	8009674 <_dtoa_r+0x854>
 800968e:	9b08      	ldr	r3, [sp, #32]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8103 	beq.w	800989c <_dtoa_r+0xa7c>
 8009696:	2e00      	cmp	r6, #0
 8009698:	dd05      	ble.n	80096a6 <_dtoa_r+0x886>
 800969a:	4629      	mov	r1, r5
 800969c:	4632      	mov	r2, r6
 800969e:	4648      	mov	r0, r9
 80096a0:	f000 fc6c 	bl	8009f7c <__lshift>
 80096a4:	4605      	mov	r5, r0
 80096a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d058      	beq.n	800975e <_dtoa_r+0x93e>
 80096ac:	6869      	ldr	r1, [r5, #4]
 80096ae:	4648      	mov	r0, r9
 80096b0:	f000 fa0c 	bl	8009acc <_Balloc>
 80096b4:	4606      	mov	r6, r0
 80096b6:	b928      	cbnz	r0, 80096c4 <_dtoa_r+0x8a4>
 80096b8:	4b82      	ldr	r3, [pc, #520]	@ (80098c4 <_dtoa_r+0xaa4>)
 80096ba:	4602      	mov	r2, r0
 80096bc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096c0:	f7ff bbc7 	b.w	8008e52 <_dtoa_r+0x32>
 80096c4:	692a      	ldr	r2, [r5, #16]
 80096c6:	3202      	adds	r2, #2
 80096c8:	0092      	lsls	r2, r2, #2
 80096ca:	f105 010c 	add.w	r1, r5, #12
 80096ce:	300c      	adds	r0, #12
 80096d0:	f7ff fb09 	bl	8008ce6 <memcpy>
 80096d4:	2201      	movs	r2, #1
 80096d6:	4631      	mov	r1, r6
 80096d8:	4648      	mov	r0, r9
 80096da:	f000 fc4f 	bl	8009f7c <__lshift>
 80096de:	1c7b      	adds	r3, r7, #1
 80096e0:	9305      	str	r3, [sp, #20]
 80096e2:	eb07 030b 	add.w	r3, r7, fp
 80096e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80096e8:	9b02      	ldr	r3, [sp, #8]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	46a8      	mov	r8, r5
 80096f0:	9308      	str	r3, [sp, #32]
 80096f2:	4605      	mov	r5, r0
 80096f4:	9b05      	ldr	r3, [sp, #20]
 80096f6:	9801      	ldr	r0, [sp, #4]
 80096f8:	4621      	mov	r1, r4
 80096fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80096fe:	f7ff fb07 	bl	8008d10 <quorem>
 8009702:	4641      	mov	r1, r8
 8009704:	9002      	str	r0, [sp, #8]
 8009706:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800970a:	9801      	ldr	r0, [sp, #4]
 800970c:	f000 fca2 	bl	800a054 <__mcmp>
 8009710:	462a      	mov	r2, r5
 8009712:	9006      	str	r0, [sp, #24]
 8009714:	4621      	mov	r1, r4
 8009716:	4648      	mov	r0, r9
 8009718:	f000 fcb8 	bl	800a08c <__mdiff>
 800971c:	68c2      	ldr	r2, [r0, #12]
 800971e:	4606      	mov	r6, r0
 8009720:	b9fa      	cbnz	r2, 8009762 <_dtoa_r+0x942>
 8009722:	4601      	mov	r1, r0
 8009724:	9801      	ldr	r0, [sp, #4]
 8009726:	f000 fc95 	bl	800a054 <__mcmp>
 800972a:	4602      	mov	r2, r0
 800972c:	4631      	mov	r1, r6
 800972e:	4648      	mov	r0, r9
 8009730:	920a      	str	r2, [sp, #40]	@ 0x28
 8009732:	f000 fa0b 	bl	8009b4c <_Bfree>
 8009736:	9b07      	ldr	r3, [sp, #28]
 8009738:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800973a:	9e05      	ldr	r6, [sp, #20]
 800973c:	ea43 0102 	orr.w	r1, r3, r2
 8009740:	9b08      	ldr	r3, [sp, #32]
 8009742:	4319      	orrs	r1, r3
 8009744:	d10f      	bne.n	8009766 <_dtoa_r+0x946>
 8009746:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800974a:	d028      	beq.n	800979e <_dtoa_r+0x97e>
 800974c:	9b06      	ldr	r3, [sp, #24]
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd02      	ble.n	8009758 <_dtoa_r+0x938>
 8009752:	9b02      	ldr	r3, [sp, #8]
 8009754:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009758:	f88b a000 	strb.w	sl, [fp]
 800975c:	e639      	b.n	80093d2 <_dtoa_r+0x5b2>
 800975e:	4628      	mov	r0, r5
 8009760:	e7bd      	b.n	80096de <_dtoa_r+0x8be>
 8009762:	2201      	movs	r2, #1
 8009764:	e7e2      	b.n	800972c <_dtoa_r+0x90c>
 8009766:	9b06      	ldr	r3, [sp, #24]
 8009768:	2b00      	cmp	r3, #0
 800976a:	db04      	blt.n	8009776 <_dtoa_r+0x956>
 800976c:	9907      	ldr	r1, [sp, #28]
 800976e:	430b      	orrs	r3, r1
 8009770:	9908      	ldr	r1, [sp, #32]
 8009772:	430b      	orrs	r3, r1
 8009774:	d120      	bne.n	80097b8 <_dtoa_r+0x998>
 8009776:	2a00      	cmp	r2, #0
 8009778:	ddee      	ble.n	8009758 <_dtoa_r+0x938>
 800977a:	9901      	ldr	r1, [sp, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	4648      	mov	r0, r9
 8009780:	f000 fbfc 	bl	8009f7c <__lshift>
 8009784:	4621      	mov	r1, r4
 8009786:	9001      	str	r0, [sp, #4]
 8009788:	f000 fc64 	bl	800a054 <__mcmp>
 800978c:	2800      	cmp	r0, #0
 800978e:	dc03      	bgt.n	8009798 <_dtoa_r+0x978>
 8009790:	d1e2      	bne.n	8009758 <_dtoa_r+0x938>
 8009792:	f01a 0f01 	tst.w	sl, #1
 8009796:	d0df      	beq.n	8009758 <_dtoa_r+0x938>
 8009798:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800979c:	d1d9      	bne.n	8009752 <_dtoa_r+0x932>
 800979e:	2339      	movs	r3, #57	@ 0x39
 80097a0:	f88b 3000 	strb.w	r3, [fp]
 80097a4:	4633      	mov	r3, r6
 80097a6:	461e      	mov	r6, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097ae:	2a39      	cmp	r2, #57	@ 0x39
 80097b0:	d053      	beq.n	800985a <_dtoa_r+0xa3a>
 80097b2:	3201      	adds	r2, #1
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	e60c      	b.n	80093d2 <_dtoa_r+0x5b2>
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	dd07      	ble.n	80097cc <_dtoa_r+0x9ac>
 80097bc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80097c0:	d0ed      	beq.n	800979e <_dtoa_r+0x97e>
 80097c2:	f10a 0301 	add.w	r3, sl, #1
 80097c6:	f88b 3000 	strb.w	r3, [fp]
 80097ca:	e602      	b.n	80093d2 <_dtoa_r+0x5b2>
 80097cc:	9b05      	ldr	r3, [sp, #20]
 80097ce:	9a05      	ldr	r2, [sp, #20]
 80097d0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80097d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d029      	beq.n	800982e <_dtoa_r+0xa0e>
 80097da:	9901      	ldr	r1, [sp, #4]
 80097dc:	2300      	movs	r3, #0
 80097de:	220a      	movs	r2, #10
 80097e0:	4648      	mov	r0, r9
 80097e2:	f000 f9d5 	bl	8009b90 <__multadd>
 80097e6:	45a8      	cmp	r8, r5
 80097e8:	9001      	str	r0, [sp, #4]
 80097ea:	f04f 0300 	mov.w	r3, #0
 80097ee:	f04f 020a 	mov.w	r2, #10
 80097f2:	4641      	mov	r1, r8
 80097f4:	4648      	mov	r0, r9
 80097f6:	d107      	bne.n	8009808 <_dtoa_r+0x9e8>
 80097f8:	f000 f9ca 	bl	8009b90 <__multadd>
 80097fc:	4680      	mov	r8, r0
 80097fe:	4605      	mov	r5, r0
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	3301      	adds	r3, #1
 8009804:	9305      	str	r3, [sp, #20]
 8009806:	e775      	b.n	80096f4 <_dtoa_r+0x8d4>
 8009808:	f000 f9c2 	bl	8009b90 <__multadd>
 800980c:	4629      	mov	r1, r5
 800980e:	4680      	mov	r8, r0
 8009810:	2300      	movs	r3, #0
 8009812:	220a      	movs	r2, #10
 8009814:	4648      	mov	r0, r9
 8009816:	f000 f9bb 	bl	8009b90 <__multadd>
 800981a:	4605      	mov	r5, r0
 800981c:	e7f0      	b.n	8009800 <_dtoa_r+0x9e0>
 800981e:	f1bb 0f00 	cmp.w	fp, #0
 8009822:	bfcc      	ite	gt
 8009824:	465e      	movgt	r6, fp
 8009826:	2601      	movle	r6, #1
 8009828:	443e      	add	r6, r7
 800982a:	f04f 0800 	mov.w	r8, #0
 800982e:	9901      	ldr	r1, [sp, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	4648      	mov	r0, r9
 8009834:	f000 fba2 	bl	8009f7c <__lshift>
 8009838:	4621      	mov	r1, r4
 800983a:	9001      	str	r0, [sp, #4]
 800983c:	f000 fc0a 	bl	800a054 <__mcmp>
 8009840:	2800      	cmp	r0, #0
 8009842:	dcaf      	bgt.n	80097a4 <_dtoa_r+0x984>
 8009844:	d102      	bne.n	800984c <_dtoa_r+0xa2c>
 8009846:	f01a 0f01 	tst.w	sl, #1
 800984a:	d1ab      	bne.n	80097a4 <_dtoa_r+0x984>
 800984c:	4633      	mov	r3, r6
 800984e:	461e      	mov	r6, r3
 8009850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009854:	2a30      	cmp	r2, #48	@ 0x30
 8009856:	d0fa      	beq.n	800984e <_dtoa_r+0xa2e>
 8009858:	e5bb      	b.n	80093d2 <_dtoa_r+0x5b2>
 800985a:	429f      	cmp	r7, r3
 800985c:	d1a3      	bne.n	80097a6 <_dtoa_r+0x986>
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	3301      	adds	r3, #1
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	2331      	movs	r3, #49	@ 0x31
 8009866:	703b      	strb	r3, [r7, #0]
 8009868:	e5b3      	b.n	80093d2 <_dtoa_r+0x5b2>
 800986a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800986c:	4f16      	ldr	r7, [pc, #88]	@ (80098c8 <_dtoa_r+0xaa8>)
 800986e:	b11b      	cbz	r3, 8009878 <_dtoa_r+0xa58>
 8009870:	f107 0308 	add.w	r3, r7, #8
 8009874:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	4638      	mov	r0, r7
 800987a:	b011      	add	sp, #68	@ 0x44
 800987c:	ecbd 8b02 	vpop	{d8}
 8009880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009884:	9b07      	ldr	r3, [sp, #28]
 8009886:	2b01      	cmp	r3, #1
 8009888:	f77f ae36 	ble.w	80094f8 <_dtoa_r+0x6d8>
 800988c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800988e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009890:	2001      	movs	r0, #1
 8009892:	e656      	b.n	8009542 <_dtoa_r+0x722>
 8009894:	f1bb 0f00 	cmp.w	fp, #0
 8009898:	f77f aed7 	ble.w	800964a <_dtoa_r+0x82a>
 800989c:	463e      	mov	r6, r7
 800989e:	9801      	ldr	r0, [sp, #4]
 80098a0:	4621      	mov	r1, r4
 80098a2:	f7ff fa35 	bl	8008d10 <quorem>
 80098a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80098aa:	f806 ab01 	strb.w	sl, [r6], #1
 80098ae:	1bf2      	subs	r2, r6, r7
 80098b0:	4593      	cmp	fp, r2
 80098b2:	ddb4      	ble.n	800981e <_dtoa_r+0x9fe>
 80098b4:	9901      	ldr	r1, [sp, #4]
 80098b6:	2300      	movs	r3, #0
 80098b8:	220a      	movs	r2, #10
 80098ba:	4648      	mov	r0, r9
 80098bc:	f000 f968 	bl	8009b90 <__multadd>
 80098c0:	9001      	str	r0, [sp, #4]
 80098c2:	e7ec      	b.n	800989e <_dtoa_r+0xa7e>
 80098c4:	0800c8ad 	.word	0x0800c8ad
 80098c8:	0800c831 	.word	0x0800c831

080098cc <_free_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4605      	mov	r5, r0
 80098d0:	2900      	cmp	r1, #0
 80098d2:	d041      	beq.n	8009958 <_free_r+0x8c>
 80098d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d8:	1f0c      	subs	r4, r1, #4
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bfb8      	it	lt
 80098de:	18e4      	addlt	r4, r4, r3
 80098e0:	f000 f8e8 	bl	8009ab4 <__malloc_lock>
 80098e4:	4a1d      	ldr	r2, [pc, #116]	@ (800995c <_free_r+0x90>)
 80098e6:	6813      	ldr	r3, [r2, #0]
 80098e8:	b933      	cbnz	r3, 80098f8 <_free_r+0x2c>
 80098ea:	6063      	str	r3, [r4, #4]
 80098ec:	6014      	str	r4, [r2, #0]
 80098ee:	4628      	mov	r0, r5
 80098f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f4:	f000 b8e4 	b.w	8009ac0 <__malloc_unlock>
 80098f8:	42a3      	cmp	r3, r4
 80098fa:	d908      	bls.n	800990e <_free_r+0x42>
 80098fc:	6820      	ldr	r0, [r4, #0]
 80098fe:	1821      	adds	r1, r4, r0
 8009900:	428b      	cmp	r3, r1
 8009902:	bf01      	itttt	eq
 8009904:	6819      	ldreq	r1, [r3, #0]
 8009906:	685b      	ldreq	r3, [r3, #4]
 8009908:	1809      	addeq	r1, r1, r0
 800990a:	6021      	streq	r1, [r4, #0]
 800990c:	e7ed      	b.n	80098ea <_free_r+0x1e>
 800990e:	461a      	mov	r2, r3
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	b10b      	cbz	r3, 8009918 <_free_r+0x4c>
 8009914:	42a3      	cmp	r3, r4
 8009916:	d9fa      	bls.n	800990e <_free_r+0x42>
 8009918:	6811      	ldr	r1, [r2, #0]
 800991a:	1850      	adds	r0, r2, r1
 800991c:	42a0      	cmp	r0, r4
 800991e:	d10b      	bne.n	8009938 <_free_r+0x6c>
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	4401      	add	r1, r0
 8009924:	1850      	adds	r0, r2, r1
 8009926:	4283      	cmp	r3, r0
 8009928:	6011      	str	r1, [r2, #0]
 800992a:	d1e0      	bne.n	80098ee <_free_r+0x22>
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	6053      	str	r3, [r2, #4]
 8009932:	4408      	add	r0, r1
 8009934:	6010      	str	r0, [r2, #0]
 8009936:	e7da      	b.n	80098ee <_free_r+0x22>
 8009938:	d902      	bls.n	8009940 <_free_r+0x74>
 800993a:	230c      	movs	r3, #12
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	e7d6      	b.n	80098ee <_free_r+0x22>
 8009940:	6820      	ldr	r0, [r4, #0]
 8009942:	1821      	adds	r1, r4, r0
 8009944:	428b      	cmp	r3, r1
 8009946:	bf04      	itt	eq
 8009948:	6819      	ldreq	r1, [r3, #0]
 800994a:	685b      	ldreq	r3, [r3, #4]
 800994c:	6063      	str	r3, [r4, #4]
 800994e:	bf04      	itt	eq
 8009950:	1809      	addeq	r1, r1, r0
 8009952:	6021      	streq	r1, [r4, #0]
 8009954:	6054      	str	r4, [r2, #4]
 8009956:	e7ca      	b.n	80098ee <_free_r+0x22>
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	24000594 	.word	0x24000594

08009960 <malloc>:
 8009960:	4b02      	ldr	r3, [pc, #8]	@ (800996c <malloc+0xc>)
 8009962:	4601      	mov	r1, r0
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	f000 b825 	b.w	80099b4 <_malloc_r>
 800996a:	bf00      	nop
 800996c:	2400001c 	.word	0x2400001c

08009970 <sbrk_aligned>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	4e0f      	ldr	r6, [pc, #60]	@ (80099b0 <sbrk_aligned+0x40>)
 8009974:	460c      	mov	r4, r1
 8009976:	6831      	ldr	r1, [r6, #0]
 8009978:	4605      	mov	r5, r0
 800997a:	b911      	cbnz	r1, 8009982 <sbrk_aligned+0x12>
 800997c:	f001 ff8e 	bl	800b89c <_sbrk_r>
 8009980:	6030      	str	r0, [r6, #0]
 8009982:	4621      	mov	r1, r4
 8009984:	4628      	mov	r0, r5
 8009986:	f001 ff89 	bl	800b89c <_sbrk_r>
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	d103      	bne.n	8009996 <sbrk_aligned+0x26>
 800998e:	f04f 34ff 	mov.w	r4, #4294967295
 8009992:	4620      	mov	r0, r4
 8009994:	bd70      	pop	{r4, r5, r6, pc}
 8009996:	1cc4      	adds	r4, r0, #3
 8009998:	f024 0403 	bic.w	r4, r4, #3
 800999c:	42a0      	cmp	r0, r4
 800999e:	d0f8      	beq.n	8009992 <sbrk_aligned+0x22>
 80099a0:	1a21      	subs	r1, r4, r0
 80099a2:	4628      	mov	r0, r5
 80099a4:	f001 ff7a 	bl	800b89c <_sbrk_r>
 80099a8:	3001      	adds	r0, #1
 80099aa:	d1f2      	bne.n	8009992 <sbrk_aligned+0x22>
 80099ac:	e7ef      	b.n	800998e <sbrk_aligned+0x1e>
 80099ae:	bf00      	nop
 80099b0:	24000590 	.word	0x24000590

080099b4 <_malloc_r>:
 80099b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b8:	1ccd      	adds	r5, r1, #3
 80099ba:	f025 0503 	bic.w	r5, r5, #3
 80099be:	3508      	adds	r5, #8
 80099c0:	2d0c      	cmp	r5, #12
 80099c2:	bf38      	it	cc
 80099c4:	250c      	movcc	r5, #12
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	4606      	mov	r6, r0
 80099ca:	db01      	blt.n	80099d0 <_malloc_r+0x1c>
 80099cc:	42a9      	cmp	r1, r5
 80099ce:	d904      	bls.n	80099da <_malloc_r+0x26>
 80099d0:	230c      	movs	r3, #12
 80099d2:	6033      	str	r3, [r6, #0]
 80099d4:	2000      	movs	r0, #0
 80099d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ab0 <_malloc_r+0xfc>
 80099de:	f000 f869 	bl	8009ab4 <__malloc_lock>
 80099e2:	f8d8 3000 	ldr.w	r3, [r8]
 80099e6:	461c      	mov	r4, r3
 80099e8:	bb44      	cbnz	r4, 8009a3c <_malloc_r+0x88>
 80099ea:	4629      	mov	r1, r5
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7ff ffbf 	bl	8009970 <sbrk_aligned>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	4604      	mov	r4, r0
 80099f6:	d158      	bne.n	8009aaa <_malloc_r+0xf6>
 80099f8:	f8d8 4000 	ldr.w	r4, [r8]
 80099fc:	4627      	mov	r7, r4
 80099fe:	2f00      	cmp	r7, #0
 8009a00:	d143      	bne.n	8009a8a <_malloc_r+0xd6>
 8009a02:	2c00      	cmp	r4, #0
 8009a04:	d04b      	beq.n	8009a9e <_malloc_r+0xea>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	4639      	mov	r1, r7
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	eb04 0903 	add.w	r9, r4, r3
 8009a10:	f001 ff44 	bl	800b89c <_sbrk_r>
 8009a14:	4581      	cmp	r9, r0
 8009a16:	d142      	bne.n	8009a9e <_malloc_r+0xea>
 8009a18:	6821      	ldr	r1, [r4, #0]
 8009a1a:	1a6d      	subs	r5, r5, r1
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7ff ffa6 	bl	8009970 <sbrk_aligned>
 8009a24:	3001      	adds	r0, #1
 8009a26:	d03a      	beq.n	8009a9e <_malloc_r+0xea>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	442b      	add	r3, r5
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	bb62      	cbnz	r2, 8009a90 <_malloc_r+0xdc>
 8009a36:	f8c8 7000 	str.w	r7, [r8]
 8009a3a:	e00f      	b.n	8009a5c <_malloc_r+0xa8>
 8009a3c:	6822      	ldr	r2, [r4, #0]
 8009a3e:	1b52      	subs	r2, r2, r5
 8009a40:	d420      	bmi.n	8009a84 <_malloc_r+0xd0>
 8009a42:	2a0b      	cmp	r2, #11
 8009a44:	d917      	bls.n	8009a76 <_malloc_r+0xc2>
 8009a46:	1961      	adds	r1, r4, r5
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	6025      	str	r5, [r4, #0]
 8009a4c:	bf18      	it	ne
 8009a4e:	6059      	strne	r1, [r3, #4]
 8009a50:	6863      	ldr	r3, [r4, #4]
 8009a52:	bf08      	it	eq
 8009a54:	f8c8 1000 	streq.w	r1, [r8]
 8009a58:	5162      	str	r2, [r4, r5]
 8009a5a:	604b      	str	r3, [r1, #4]
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f000 f82f 	bl	8009ac0 <__malloc_unlock>
 8009a62:	f104 000b 	add.w	r0, r4, #11
 8009a66:	1d23      	adds	r3, r4, #4
 8009a68:	f020 0007 	bic.w	r0, r0, #7
 8009a6c:	1ac2      	subs	r2, r0, r3
 8009a6e:	bf1c      	itt	ne
 8009a70:	1a1b      	subne	r3, r3, r0
 8009a72:	50a3      	strne	r3, [r4, r2]
 8009a74:	e7af      	b.n	80099d6 <_malloc_r+0x22>
 8009a76:	6862      	ldr	r2, [r4, #4]
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	bf0c      	ite	eq
 8009a7c:	f8c8 2000 	streq.w	r2, [r8]
 8009a80:	605a      	strne	r2, [r3, #4]
 8009a82:	e7eb      	b.n	8009a5c <_malloc_r+0xa8>
 8009a84:	4623      	mov	r3, r4
 8009a86:	6864      	ldr	r4, [r4, #4]
 8009a88:	e7ae      	b.n	80099e8 <_malloc_r+0x34>
 8009a8a:	463c      	mov	r4, r7
 8009a8c:	687f      	ldr	r7, [r7, #4]
 8009a8e:	e7b6      	b.n	80099fe <_malloc_r+0x4a>
 8009a90:	461a      	mov	r2, r3
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	42a3      	cmp	r3, r4
 8009a96:	d1fb      	bne.n	8009a90 <_malloc_r+0xdc>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	6053      	str	r3, [r2, #4]
 8009a9c:	e7de      	b.n	8009a5c <_malloc_r+0xa8>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	6033      	str	r3, [r6, #0]
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f000 f80c 	bl	8009ac0 <__malloc_unlock>
 8009aa8:	e794      	b.n	80099d4 <_malloc_r+0x20>
 8009aaa:	6005      	str	r5, [r0, #0]
 8009aac:	e7d6      	b.n	8009a5c <_malloc_r+0xa8>
 8009aae:	bf00      	nop
 8009ab0:	24000594 	.word	0x24000594

08009ab4 <__malloc_lock>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	@ (8009abc <__malloc_lock+0x8>)
 8009ab6:	f7ff b914 	b.w	8008ce2 <__retarget_lock_acquire_recursive>
 8009aba:	bf00      	nop
 8009abc:	2400058c 	.word	0x2400058c

08009ac0 <__malloc_unlock>:
 8009ac0:	4801      	ldr	r0, [pc, #4]	@ (8009ac8 <__malloc_unlock+0x8>)
 8009ac2:	f7ff b90f 	b.w	8008ce4 <__retarget_lock_release_recursive>
 8009ac6:	bf00      	nop
 8009ac8:	2400058c 	.word	0x2400058c

08009acc <_Balloc>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	69c6      	ldr	r6, [r0, #28]
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	b976      	cbnz	r6, 8009af4 <_Balloc+0x28>
 8009ad6:	2010      	movs	r0, #16
 8009ad8:	f7ff ff42 	bl	8009960 <malloc>
 8009adc:	4602      	mov	r2, r0
 8009ade:	61e0      	str	r0, [r4, #28]
 8009ae0:	b920      	cbnz	r0, 8009aec <_Balloc+0x20>
 8009ae2:	4b18      	ldr	r3, [pc, #96]	@ (8009b44 <_Balloc+0x78>)
 8009ae4:	4818      	ldr	r0, [pc, #96]	@ (8009b48 <_Balloc+0x7c>)
 8009ae6:	216b      	movs	r1, #107	@ 0x6b
 8009ae8:	f001 fef2 	bl	800b8d0 <__assert_func>
 8009aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af0:	6006      	str	r6, [r0, #0]
 8009af2:	60c6      	str	r6, [r0, #12]
 8009af4:	69e6      	ldr	r6, [r4, #28]
 8009af6:	68f3      	ldr	r3, [r6, #12]
 8009af8:	b183      	cbz	r3, 8009b1c <_Balloc+0x50>
 8009afa:	69e3      	ldr	r3, [r4, #28]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b02:	b9b8      	cbnz	r0, 8009b34 <_Balloc+0x68>
 8009b04:	2101      	movs	r1, #1
 8009b06:	fa01 f605 	lsl.w	r6, r1, r5
 8009b0a:	1d72      	adds	r2, r6, #5
 8009b0c:	0092      	lsls	r2, r2, #2
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f001 fefc 	bl	800b90c <_calloc_r>
 8009b14:	b160      	cbz	r0, 8009b30 <_Balloc+0x64>
 8009b16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b1a:	e00e      	b.n	8009b3a <_Balloc+0x6e>
 8009b1c:	2221      	movs	r2, #33	@ 0x21
 8009b1e:	2104      	movs	r1, #4
 8009b20:	4620      	mov	r0, r4
 8009b22:	f001 fef3 	bl	800b90c <_calloc_r>
 8009b26:	69e3      	ldr	r3, [r4, #28]
 8009b28:	60f0      	str	r0, [r6, #12]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e4      	bne.n	8009afa <_Balloc+0x2e>
 8009b30:	2000      	movs	r0, #0
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	6802      	ldr	r2, [r0, #0]
 8009b36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b40:	e7f7      	b.n	8009b32 <_Balloc+0x66>
 8009b42:	bf00      	nop
 8009b44:	0800c83e 	.word	0x0800c83e
 8009b48:	0800c8be 	.word	0x0800c8be

08009b4c <_Bfree>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	69c6      	ldr	r6, [r0, #28]
 8009b50:	4605      	mov	r5, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	b976      	cbnz	r6, 8009b74 <_Bfree+0x28>
 8009b56:	2010      	movs	r0, #16
 8009b58:	f7ff ff02 	bl	8009960 <malloc>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	61e8      	str	r0, [r5, #28]
 8009b60:	b920      	cbnz	r0, 8009b6c <_Bfree+0x20>
 8009b62:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <_Bfree+0x3c>)
 8009b64:	4809      	ldr	r0, [pc, #36]	@ (8009b8c <_Bfree+0x40>)
 8009b66:	218f      	movs	r1, #143	@ 0x8f
 8009b68:	f001 feb2 	bl	800b8d0 <__assert_func>
 8009b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b70:	6006      	str	r6, [r0, #0]
 8009b72:	60c6      	str	r6, [r0, #12]
 8009b74:	b13c      	cbz	r4, 8009b86 <_Bfree+0x3a>
 8009b76:	69eb      	ldr	r3, [r5, #28]
 8009b78:	6862      	ldr	r2, [r4, #4]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b80:	6021      	str	r1, [r4, #0]
 8009b82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	0800c83e 	.word	0x0800c83e
 8009b8c:	0800c8be 	.word	0x0800c8be

08009b90 <__multadd>:
 8009b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	690d      	ldr	r5, [r1, #16]
 8009b96:	4607      	mov	r7, r0
 8009b98:	460c      	mov	r4, r1
 8009b9a:	461e      	mov	r6, r3
 8009b9c:	f101 0c14 	add.w	ip, r1, #20
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ba6:	b299      	uxth	r1, r3
 8009ba8:	fb02 6101 	mla	r1, r2, r1, r6
 8009bac:	0c1e      	lsrs	r6, r3, #16
 8009bae:	0c0b      	lsrs	r3, r1, #16
 8009bb0:	fb02 3306 	mla	r3, r2, r6, r3
 8009bb4:	b289      	uxth	r1, r1
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bbc:	4285      	cmp	r5, r0
 8009bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8009bc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bc6:	dcec      	bgt.n	8009ba2 <__multadd+0x12>
 8009bc8:	b30e      	cbz	r6, 8009c0e <__multadd+0x7e>
 8009bca:	68a3      	ldr	r3, [r4, #8]
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	dc19      	bgt.n	8009c04 <__multadd+0x74>
 8009bd0:	6861      	ldr	r1, [r4, #4]
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	3101      	adds	r1, #1
 8009bd6:	f7ff ff79 	bl	8009acc <_Balloc>
 8009bda:	4680      	mov	r8, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <__multadd+0x5a>
 8009bde:	4602      	mov	r2, r0
 8009be0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c14 <__multadd+0x84>)
 8009be2:	480d      	ldr	r0, [pc, #52]	@ (8009c18 <__multadd+0x88>)
 8009be4:	21ba      	movs	r1, #186	@ 0xba
 8009be6:	f001 fe73 	bl	800b8d0 <__assert_func>
 8009bea:	6922      	ldr	r2, [r4, #16]
 8009bec:	3202      	adds	r2, #2
 8009bee:	f104 010c 	add.w	r1, r4, #12
 8009bf2:	0092      	lsls	r2, r2, #2
 8009bf4:	300c      	adds	r0, #12
 8009bf6:	f7ff f876 	bl	8008ce6 <memcpy>
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff ffa5 	bl	8009b4c <_Bfree>
 8009c02:	4644      	mov	r4, r8
 8009c04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c08:	3501      	adds	r5, #1
 8009c0a:	615e      	str	r6, [r3, #20]
 8009c0c:	6125      	str	r5, [r4, #16]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c14:	0800c8ad 	.word	0x0800c8ad
 8009c18:	0800c8be 	.word	0x0800c8be

08009c1c <__s2b>:
 8009c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c20:	460c      	mov	r4, r1
 8009c22:	4615      	mov	r5, r2
 8009c24:	461f      	mov	r7, r3
 8009c26:	2209      	movs	r2, #9
 8009c28:	3308      	adds	r3, #8
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c30:	2100      	movs	r1, #0
 8009c32:	2201      	movs	r2, #1
 8009c34:	429a      	cmp	r2, r3
 8009c36:	db09      	blt.n	8009c4c <__s2b+0x30>
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7ff ff47 	bl	8009acc <_Balloc>
 8009c3e:	b940      	cbnz	r0, 8009c52 <__s2b+0x36>
 8009c40:	4602      	mov	r2, r0
 8009c42:	4b19      	ldr	r3, [pc, #100]	@ (8009ca8 <__s2b+0x8c>)
 8009c44:	4819      	ldr	r0, [pc, #100]	@ (8009cac <__s2b+0x90>)
 8009c46:	21d3      	movs	r1, #211	@ 0xd3
 8009c48:	f001 fe42 	bl	800b8d0 <__assert_func>
 8009c4c:	0052      	lsls	r2, r2, #1
 8009c4e:	3101      	adds	r1, #1
 8009c50:	e7f0      	b.n	8009c34 <__s2b+0x18>
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	6143      	str	r3, [r0, #20]
 8009c56:	2d09      	cmp	r5, #9
 8009c58:	f04f 0301 	mov.w	r3, #1
 8009c5c:	6103      	str	r3, [r0, #16]
 8009c5e:	dd16      	ble.n	8009c8e <__s2b+0x72>
 8009c60:	f104 0909 	add.w	r9, r4, #9
 8009c64:	46c8      	mov	r8, r9
 8009c66:	442c      	add	r4, r5
 8009c68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c6c:	4601      	mov	r1, r0
 8009c6e:	3b30      	subs	r3, #48	@ 0x30
 8009c70:	220a      	movs	r2, #10
 8009c72:	4630      	mov	r0, r6
 8009c74:	f7ff ff8c 	bl	8009b90 <__multadd>
 8009c78:	45a0      	cmp	r8, r4
 8009c7a:	d1f5      	bne.n	8009c68 <__s2b+0x4c>
 8009c7c:	f1a5 0408 	sub.w	r4, r5, #8
 8009c80:	444c      	add	r4, r9
 8009c82:	1b2d      	subs	r5, r5, r4
 8009c84:	1963      	adds	r3, r4, r5
 8009c86:	42bb      	cmp	r3, r7
 8009c88:	db04      	blt.n	8009c94 <__s2b+0x78>
 8009c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c8e:	340a      	adds	r4, #10
 8009c90:	2509      	movs	r5, #9
 8009c92:	e7f6      	b.n	8009c82 <__s2b+0x66>
 8009c94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c98:	4601      	mov	r1, r0
 8009c9a:	3b30      	subs	r3, #48	@ 0x30
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff ff76 	bl	8009b90 <__multadd>
 8009ca4:	e7ee      	b.n	8009c84 <__s2b+0x68>
 8009ca6:	bf00      	nop
 8009ca8:	0800c8ad 	.word	0x0800c8ad
 8009cac:	0800c8be 	.word	0x0800c8be

08009cb0 <__hi0bits>:
 8009cb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	bf36      	itet	cc
 8009cb8:	0403      	lslcc	r3, r0, #16
 8009cba:	2000      	movcs	r0, #0
 8009cbc:	2010      	movcc	r0, #16
 8009cbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cc2:	bf3c      	itt	cc
 8009cc4:	021b      	lslcc	r3, r3, #8
 8009cc6:	3008      	addcc	r0, #8
 8009cc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ccc:	bf3c      	itt	cc
 8009cce:	011b      	lslcc	r3, r3, #4
 8009cd0:	3004      	addcc	r0, #4
 8009cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cd6:	bf3c      	itt	cc
 8009cd8:	009b      	lslcc	r3, r3, #2
 8009cda:	3002      	addcc	r0, #2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	db05      	blt.n	8009cec <__hi0bits+0x3c>
 8009ce0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ce4:	f100 0001 	add.w	r0, r0, #1
 8009ce8:	bf08      	it	eq
 8009cea:	2020      	moveq	r0, #32
 8009cec:	4770      	bx	lr

08009cee <__lo0bits>:
 8009cee:	6803      	ldr	r3, [r0, #0]
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	f013 0007 	ands.w	r0, r3, #7
 8009cf6:	d00b      	beq.n	8009d10 <__lo0bits+0x22>
 8009cf8:	07d9      	lsls	r1, r3, #31
 8009cfa:	d421      	bmi.n	8009d40 <__lo0bits+0x52>
 8009cfc:	0798      	lsls	r0, r3, #30
 8009cfe:	bf49      	itett	mi
 8009d00:	085b      	lsrmi	r3, r3, #1
 8009d02:	089b      	lsrpl	r3, r3, #2
 8009d04:	2001      	movmi	r0, #1
 8009d06:	6013      	strmi	r3, [r2, #0]
 8009d08:	bf5c      	itt	pl
 8009d0a:	6013      	strpl	r3, [r2, #0]
 8009d0c:	2002      	movpl	r0, #2
 8009d0e:	4770      	bx	lr
 8009d10:	b299      	uxth	r1, r3
 8009d12:	b909      	cbnz	r1, 8009d18 <__lo0bits+0x2a>
 8009d14:	0c1b      	lsrs	r3, r3, #16
 8009d16:	2010      	movs	r0, #16
 8009d18:	b2d9      	uxtb	r1, r3
 8009d1a:	b909      	cbnz	r1, 8009d20 <__lo0bits+0x32>
 8009d1c:	3008      	adds	r0, #8
 8009d1e:	0a1b      	lsrs	r3, r3, #8
 8009d20:	0719      	lsls	r1, r3, #28
 8009d22:	bf04      	itt	eq
 8009d24:	091b      	lsreq	r3, r3, #4
 8009d26:	3004      	addeq	r0, #4
 8009d28:	0799      	lsls	r1, r3, #30
 8009d2a:	bf04      	itt	eq
 8009d2c:	089b      	lsreq	r3, r3, #2
 8009d2e:	3002      	addeq	r0, #2
 8009d30:	07d9      	lsls	r1, r3, #31
 8009d32:	d403      	bmi.n	8009d3c <__lo0bits+0x4e>
 8009d34:	085b      	lsrs	r3, r3, #1
 8009d36:	f100 0001 	add.w	r0, r0, #1
 8009d3a:	d003      	beq.n	8009d44 <__lo0bits+0x56>
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	4770      	bx	lr
 8009d40:	2000      	movs	r0, #0
 8009d42:	4770      	bx	lr
 8009d44:	2020      	movs	r0, #32
 8009d46:	4770      	bx	lr

08009d48 <__i2b>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	f7ff febd 	bl	8009acc <_Balloc>
 8009d52:	4602      	mov	r2, r0
 8009d54:	b928      	cbnz	r0, 8009d62 <__i2b+0x1a>
 8009d56:	4b05      	ldr	r3, [pc, #20]	@ (8009d6c <__i2b+0x24>)
 8009d58:	4805      	ldr	r0, [pc, #20]	@ (8009d70 <__i2b+0x28>)
 8009d5a:	f240 1145 	movw	r1, #325	@ 0x145
 8009d5e:	f001 fdb7 	bl	800b8d0 <__assert_func>
 8009d62:	2301      	movs	r3, #1
 8009d64:	6144      	str	r4, [r0, #20]
 8009d66:	6103      	str	r3, [r0, #16]
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	bf00      	nop
 8009d6c:	0800c8ad 	.word	0x0800c8ad
 8009d70:	0800c8be 	.word	0x0800c8be

08009d74 <__multiply>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	4614      	mov	r4, r2
 8009d7a:	690a      	ldr	r2, [r1, #16]
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	bfa8      	it	ge
 8009d82:	4623      	movge	r3, r4
 8009d84:	460f      	mov	r7, r1
 8009d86:	bfa4      	itt	ge
 8009d88:	460c      	movge	r4, r1
 8009d8a:	461f      	movge	r7, r3
 8009d8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009d90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009d94:	68a3      	ldr	r3, [r4, #8]
 8009d96:	6861      	ldr	r1, [r4, #4]
 8009d98:	eb0a 0609 	add.w	r6, sl, r9
 8009d9c:	42b3      	cmp	r3, r6
 8009d9e:	b085      	sub	sp, #20
 8009da0:	bfb8      	it	lt
 8009da2:	3101      	addlt	r1, #1
 8009da4:	f7ff fe92 	bl	8009acc <_Balloc>
 8009da8:	b930      	cbnz	r0, 8009db8 <__multiply+0x44>
 8009daa:	4602      	mov	r2, r0
 8009dac:	4b44      	ldr	r3, [pc, #272]	@ (8009ec0 <__multiply+0x14c>)
 8009dae:	4845      	ldr	r0, [pc, #276]	@ (8009ec4 <__multiply+0x150>)
 8009db0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009db4:	f001 fd8c 	bl	800b8d0 <__assert_func>
 8009db8:	f100 0514 	add.w	r5, r0, #20
 8009dbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dc0:	462b      	mov	r3, r5
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	4543      	cmp	r3, r8
 8009dc6:	d321      	bcc.n	8009e0c <__multiply+0x98>
 8009dc8:	f107 0114 	add.w	r1, r7, #20
 8009dcc:	f104 0214 	add.w	r2, r4, #20
 8009dd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009dd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009dd8:	9302      	str	r3, [sp, #8]
 8009dda:	1b13      	subs	r3, r2, r4
 8009ddc:	3b15      	subs	r3, #21
 8009dde:	f023 0303 	bic.w	r3, r3, #3
 8009de2:	3304      	adds	r3, #4
 8009de4:	f104 0715 	add.w	r7, r4, #21
 8009de8:	42ba      	cmp	r2, r7
 8009dea:	bf38      	it	cc
 8009dec:	2304      	movcc	r3, #4
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	9b02      	ldr	r3, [sp, #8]
 8009df2:	9103      	str	r1, [sp, #12]
 8009df4:	428b      	cmp	r3, r1
 8009df6:	d80c      	bhi.n	8009e12 <__multiply+0x9e>
 8009df8:	2e00      	cmp	r6, #0
 8009dfa:	dd03      	ble.n	8009e04 <__multiply+0x90>
 8009dfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d05b      	beq.n	8009ebc <__multiply+0x148>
 8009e04:	6106      	str	r6, [r0, #16]
 8009e06:	b005      	add	sp, #20
 8009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	f843 2b04 	str.w	r2, [r3], #4
 8009e10:	e7d8      	b.n	8009dc4 <__multiply+0x50>
 8009e12:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e16:	f1ba 0f00 	cmp.w	sl, #0
 8009e1a:	d024      	beq.n	8009e66 <__multiply+0xf2>
 8009e1c:	f104 0e14 	add.w	lr, r4, #20
 8009e20:	46a9      	mov	r9, r5
 8009e22:	f04f 0c00 	mov.w	ip, #0
 8009e26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e2a:	f8d9 3000 	ldr.w	r3, [r9]
 8009e2e:	fa1f fb87 	uxth.w	fp, r7
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009e3c:	f8d9 7000 	ldr.w	r7, [r9]
 8009e40:	4463      	add	r3, ip
 8009e42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e46:	fb0a c70b 	mla	r7, sl, fp, ip
 8009e4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e54:	4572      	cmp	r2, lr
 8009e56:	f849 3b04 	str.w	r3, [r9], #4
 8009e5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e5e:	d8e2      	bhi.n	8009e26 <__multiply+0xb2>
 8009e60:	9b01      	ldr	r3, [sp, #4]
 8009e62:	f845 c003 	str.w	ip, [r5, r3]
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e6c:	3104      	adds	r1, #4
 8009e6e:	f1b9 0f00 	cmp.w	r9, #0
 8009e72:	d021      	beq.n	8009eb8 <__multiply+0x144>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	f104 0c14 	add.w	ip, r4, #20
 8009e7a:	46ae      	mov	lr, r5
 8009e7c:	f04f 0a00 	mov.w	sl, #0
 8009e80:	f8bc b000 	ldrh.w	fp, [ip]
 8009e84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009e88:	fb09 770b 	mla	r7, r9, fp, r7
 8009e8c:	4457      	add	r7, sl
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e94:	f84e 3b04 	str.w	r3, [lr], #4
 8009e98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ea0:	f8be 3000 	ldrh.w	r3, [lr]
 8009ea4:	fb09 330a 	mla	r3, r9, sl, r3
 8009ea8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009eac:	4562      	cmp	r2, ip
 8009eae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009eb2:	d8e5      	bhi.n	8009e80 <__multiply+0x10c>
 8009eb4:	9f01      	ldr	r7, [sp, #4]
 8009eb6:	51eb      	str	r3, [r5, r7]
 8009eb8:	3504      	adds	r5, #4
 8009eba:	e799      	b.n	8009df0 <__multiply+0x7c>
 8009ebc:	3e01      	subs	r6, #1
 8009ebe:	e79b      	b.n	8009df8 <__multiply+0x84>
 8009ec0:	0800c8ad 	.word	0x0800c8ad
 8009ec4:	0800c8be 	.word	0x0800c8be

08009ec8 <__pow5mult>:
 8009ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	4615      	mov	r5, r2
 8009ece:	f012 0203 	ands.w	r2, r2, #3
 8009ed2:	4607      	mov	r7, r0
 8009ed4:	460e      	mov	r6, r1
 8009ed6:	d007      	beq.n	8009ee8 <__pow5mult+0x20>
 8009ed8:	4c25      	ldr	r4, [pc, #148]	@ (8009f70 <__pow5mult+0xa8>)
 8009eda:	3a01      	subs	r2, #1
 8009edc:	2300      	movs	r3, #0
 8009ede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ee2:	f7ff fe55 	bl	8009b90 <__multadd>
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	10ad      	asrs	r5, r5, #2
 8009eea:	d03d      	beq.n	8009f68 <__pow5mult+0xa0>
 8009eec:	69fc      	ldr	r4, [r7, #28]
 8009eee:	b97c      	cbnz	r4, 8009f10 <__pow5mult+0x48>
 8009ef0:	2010      	movs	r0, #16
 8009ef2:	f7ff fd35 	bl	8009960 <malloc>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	61f8      	str	r0, [r7, #28]
 8009efa:	b928      	cbnz	r0, 8009f08 <__pow5mult+0x40>
 8009efc:	4b1d      	ldr	r3, [pc, #116]	@ (8009f74 <__pow5mult+0xac>)
 8009efe:	481e      	ldr	r0, [pc, #120]	@ (8009f78 <__pow5mult+0xb0>)
 8009f00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f04:	f001 fce4 	bl	800b8d0 <__assert_func>
 8009f08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f0c:	6004      	str	r4, [r0, #0]
 8009f0e:	60c4      	str	r4, [r0, #12]
 8009f10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f18:	b94c      	cbnz	r4, 8009f2e <__pow5mult+0x66>
 8009f1a:	f240 2171 	movw	r1, #625	@ 0x271
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f7ff ff12 	bl	8009d48 <__i2b>
 8009f24:	2300      	movs	r3, #0
 8009f26:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	6003      	str	r3, [r0, #0]
 8009f2e:	f04f 0900 	mov.w	r9, #0
 8009f32:	07eb      	lsls	r3, r5, #31
 8009f34:	d50a      	bpl.n	8009f4c <__pow5mult+0x84>
 8009f36:	4631      	mov	r1, r6
 8009f38:	4622      	mov	r2, r4
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f7ff ff1a 	bl	8009d74 <__multiply>
 8009f40:	4631      	mov	r1, r6
 8009f42:	4680      	mov	r8, r0
 8009f44:	4638      	mov	r0, r7
 8009f46:	f7ff fe01 	bl	8009b4c <_Bfree>
 8009f4a:	4646      	mov	r6, r8
 8009f4c:	106d      	asrs	r5, r5, #1
 8009f4e:	d00b      	beq.n	8009f68 <__pow5mult+0xa0>
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	b938      	cbnz	r0, 8009f64 <__pow5mult+0x9c>
 8009f54:	4622      	mov	r2, r4
 8009f56:	4621      	mov	r1, r4
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ff0b 	bl	8009d74 <__multiply>
 8009f5e:	6020      	str	r0, [r4, #0]
 8009f60:	f8c0 9000 	str.w	r9, [r0]
 8009f64:	4604      	mov	r4, r0
 8009f66:	e7e4      	b.n	8009f32 <__pow5mult+0x6a>
 8009f68:	4630      	mov	r0, r6
 8009f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f6e:	bf00      	nop
 8009f70:	0800c918 	.word	0x0800c918
 8009f74:	0800c83e 	.word	0x0800c83e
 8009f78:	0800c8be 	.word	0x0800c8be

08009f7c <__lshift>:
 8009f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	460c      	mov	r4, r1
 8009f82:	6849      	ldr	r1, [r1, #4]
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	4691      	mov	r9, r2
 8009f90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f94:	f108 0601 	add.w	r6, r8, #1
 8009f98:	42b3      	cmp	r3, r6
 8009f9a:	db0b      	blt.n	8009fb4 <__lshift+0x38>
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f7ff fd95 	bl	8009acc <_Balloc>
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	b948      	cbnz	r0, 8009fba <__lshift+0x3e>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	4b28      	ldr	r3, [pc, #160]	@ (800a04c <__lshift+0xd0>)
 8009faa:	4829      	ldr	r0, [pc, #164]	@ (800a050 <__lshift+0xd4>)
 8009fac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009fb0:	f001 fc8e 	bl	800b8d0 <__assert_func>
 8009fb4:	3101      	adds	r1, #1
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	e7ee      	b.n	8009f98 <__lshift+0x1c>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f100 0114 	add.w	r1, r0, #20
 8009fc0:	f100 0210 	add.w	r2, r0, #16
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	4553      	cmp	r3, sl
 8009fc8:	db33      	blt.n	800a032 <__lshift+0xb6>
 8009fca:	6920      	ldr	r0, [r4, #16]
 8009fcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fd0:	f104 0314 	add.w	r3, r4, #20
 8009fd4:	f019 091f 	ands.w	r9, r9, #31
 8009fd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fe0:	d02b      	beq.n	800a03a <__lshift+0xbe>
 8009fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8009fe6:	468a      	mov	sl, r1
 8009fe8:	2200      	movs	r2, #0
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	fa00 f009 	lsl.w	r0, r0, r9
 8009ff0:	4310      	orrs	r0, r2
 8009ff2:	f84a 0b04 	str.w	r0, [sl], #4
 8009ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffa:	459c      	cmp	ip, r3
 8009ffc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a000:	d8f3      	bhi.n	8009fea <__lshift+0x6e>
 800a002:	ebac 0304 	sub.w	r3, ip, r4
 800a006:	3b15      	subs	r3, #21
 800a008:	f023 0303 	bic.w	r3, r3, #3
 800a00c:	3304      	adds	r3, #4
 800a00e:	f104 0015 	add.w	r0, r4, #21
 800a012:	4584      	cmp	ip, r0
 800a014:	bf38      	it	cc
 800a016:	2304      	movcc	r3, #4
 800a018:	50ca      	str	r2, [r1, r3]
 800a01a:	b10a      	cbz	r2, 800a020 <__lshift+0xa4>
 800a01c:	f108 0602 	add.w	r6, r8, #2
 800a020:	3e01      	subs	r6, #1
 800a022:	4638      	mov	r0, r7
 800a024:	612e      	str	r6, [r5, #16]
 800a026:	4621      	mov	r1, r4
 800a028:	f7ff fd90 	bl	8009b4c <_Bfree>
 800a02c:	4628      	mov	r0, r5
 800a02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a032:	f842 0f04 	str.w	r0, [r2, #4]!
 800a036:	3301      	adds	r3, #1
 800a038:	e7c5      	b.n	8009fc6 <__lshift+0x4a>
 800a03a:	3904      	subs	r1, #4
 800a03c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a040:	f841 2f04 	str.w	r2, [r1, #4]!
 800a044:	459c      	cmp	ip, r3
 800a046:	d8f9      	bhi.n	800a03c <__lshift+0xc0>
 800a048:	e7ea      	b.n	800a020 <__lshift+0xa4>
 800a04a:	bf00      	nop
 800a04c:	0800c8ad 	.word	0x0800c8ad
 800a050:	0800c8be 	.word	0x0800c8be

0800a054 <__mcmp>:
 800a054:	690a      	ldr	r2, [r1, #16]
 800a056:	4603      	mov	r3, r0
 800a058:	6900      	ldr	r0, [r0, #16]
 800a05a:	1a80      	subs	r0, r0, r2
 800a05c:	b530      	push	{r4, r5, lr}
 800a05e:	d10e      	bne.n	800a07e <__mcmp+0x2a>
 800a060:	3314      	adds	r3, #20
 800a062:	3114      	adds	r1, #20
 800a064:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a068:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a06c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a070:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a074:	4295      	cmp	r5, r2
 800a076:	d003      	beq.n	800a080 <__mcmp+0x2c>
 800a078:	d205      	bcs.n	800a086 <__mcmp+0x32>
 800a07a:	f04f 30ff 	mov.w	r0, #4294967295
 800a07e:	bd30      	pop	{r4, r5, pc}
 800a080:	42a3      	cmp	r3, r4
 800a082:	d3f3      	bcc.n	800a06c <__mcmp+0x18>
 800a084:	e7fb      	b.n	800a07e <__mcmp+0x2a>
 800a086:	2001      	movs	r0, #1
 800a088:	e7f9      	b.n	800a07e <__mcmp+0x2a>
	...

0800a08c <__mdiff>:
 800a08c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	4689      	mov	r9, r1
 800a092:	4606      	mov	r6, r0
 800a094:	4611      	mov	r1, r2
 800a096:	4648      	mov	r0, r9
 800a098:	4614      	mov	r4, r2
 800a09a:	f7ff ffdb 	bl	800a054 <__mcmp>
 800a09e:	1e05      	subs	r5, r0, #0
 800a0a0:	d112      	bne.n	800a0c8 <__mdiff+0x3c>
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f7ff fd11 	bl	8009acc <_Balloc>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	b928      	cbnz	r0, 800a0ba <__mdiff+0x2e>
 800a0ae:	4b3f      	ldr	r3, [pc, #252]	@ (800a1ac <__mdiff+0x120>)
 800a0b0:	f240 2137 	movw	r1, #567	@ 0x237
 800a0b4:	483e      	ldr	r0, [pc, #248]	@ (800a1b0 <__mdiff+0x124>)
 800a0b6:	f001 fc0b 	bl	800b8d0 <__assert_func>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	b003      	add	sp, #12
 800a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	bfbc      	itt	lt
 800a0ca:	464b      	movlt	r3, r9
 800a0cc:	46a1      	movlt	r9, r4
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0d4:	bfba      	itte	lt
 800a0d6:	461c      	movlt	r4, r3
 800a0d8:	2501      	movlt	r5, #1
 800a0da:	2500      	movge	r5, #0
 800a0dc:	f7ff fcf6 	bl	8009acc <_Balloc>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	b918      	cbnz	r0, 800a0ec <__mdiff+0x60>
 800a0e4:	4b31      	ldr	r3, [pc, #196]	@ (800a1ac <__mdiff+0x120>)
 800a0e6:	f240 2145 	movw	r1, #581	@ 0x245
 800a0ea:	e7e3      	b.n	800a0b4 <__mdiff+0x28>
 800a0ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0f0:	6926      	ldr	r6, [r4, #16]
 800a0f2:	60c5      	str	r5, [r0, #12]
 800a0f4:	f109 0310 	add.w	r3, r9, #16
 800a0f8:	f109 0514 	add.w	r5, r9, #20
 800a0fc:	f104 0e14 	add.w	lr, r4, #20
 800a100:	f100 0b14 	add.w	fp, r0, #20
 800a104:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a108:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a10c:	9301      	str	r3, [sp, #4]
 800a10e:	46d9      	mov	r9, fp
 800a110:	f04f 0c00 	mov.w	ip, #0
 800a114:	9b01      	ldr	r3, [sp, #4]
 800a116:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a11a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	fa1f f38a 	uxth.w	r3, sl
 800a124:	4619      	mov	r1, r3
 800a126:	b283      	uxth	r3, r0
 800a128:	1acb      	subs	r3, r1, r3
 800a12a:	0c00      	lsrs	r0, r0, #16
 800a12c:	4463      	add	r3, ip
 800a12e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a132:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a136:	b29b      	uxth	r3, r3
 800a138:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a13c:	4576      	cmp	r6, lr
 800a13e:	f849 3b04 	str.w	r3, [r9], #4
 800a142:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a146:	d8e5      	bhi.n	800a114 <__mdiff+0x88>
 800a148:	1b33      	subs	r3, r6, r4
 800a14a:	3b15      	subs	r3, #21
 800a14c:	f023 0303 	bic.w	r3, r3, #3
 800a150:	3415      	adds	r4, #21
 800a152:	3304      	adds	r3, #4
 800a154:	42a6      	cmp	r6, r4
 800a156:	bf38      	it	cc
 800a158:	2304      	movcc	r3, #4
 800a15a:	441d      	add	r5, r3
 800a15c:	445b      	add	r3, fp
 800a15e:	461e      	mov	r6, r3
 800a160:	462c      	mov	r4, r5
 800a162:	4544      	cmp	r4, r8
 800a164:	d30e      	bcc.n	800a184 <__mdiff+0xf8>
 800a166:	f108 0103 	add.w	r1, r8, #3
 800a16a:	1b49      	subs	r1, r1, r5
 800a16c:	f021 0103 	bic.w	r1, r1, #3
 800a170:	3d03      	subs	r5, #3
 800a172:	45a8      	cmp	r8, r5
 800a174:	bf38      	it	cc
 800a176:	2100      	movcc	r1, #0
 800a178:	440b      	add	r3, r1
 800a17a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a17e:	b191      	cbz	r1, 800a1a6 <__mdiff+0x11a>
 800a180:	6117      	str	r7, [r2, #16]
 800a182:	e79d      	b.n	800a0c0 <__mdiff+0x34>
 800a184:	f854 1b04 	ldr.w	r1, [r4], #4
 800a188:	46e6      	mov	lr, ip
 800a18a:	0c08      	lsrs	r0, r1, #16
 800a18c:	fa1c fc81 	uxtah	ip, ip, r1
 800a190:	4471      	add	r1, lr
 800a192:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a196:	b289      	uxth	r1, r1
 800a198:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a19c:	f846 1b04 	str.w	r1, [r6], #4
 800a1a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1a4:	e7dd      	b.n	800a162 <__mdiff+0xd6>
 800a1a6:	3f01      	subs	r7, #1
 800a1a8:	e7e7      	b.n	800a17a <__mdiff+0xee>
 800a1aa:	bf00      	nop
 800a1ac:	0800c8ad 	.word	0x0800c8ad
 800a1b0:	0800c8be 	.word	0x0800c8be

0800a1b4 <__ulp>:
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	ed8d 0b00 	vstr	d0, [sp]
 800a1ba:	9a01      	ldr	r2, [sp, #4]
 800a1bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a1fc <__ulp+0x48>)
 800a1be:	4013      	ands	r3, r2
 800a1c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	dc08      	bgt.n	800a1da <__ulp+0x26>
 800a1c8:	425b      	negs	r3, r3
 800a1ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a1ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1d2:	da04      	bge.n	800a1de <__ulp+0x2a>
 800a1d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a1d8:	4113      	asrs	r3, r2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	e008      	b.n	800a1f0 <__ulp+0x3c>
 800a1de:	f1a2 0314 	sub.w	r3, r2, #20
 800a1e2:	2b1e      	cmp	r3, #30
 800a1e4:	bfda      	itte	le
 800a1e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a1ea:	40da      	lsrle	r2, r3
 800a1ec:	2201      	movgt	r2, #1
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	ec41 0b10 	vmov	d0, r0, r1
 800a1f8:	b002      	add	sp, #8
 800a1fa:	4770      	bx	lr
 800a1fc:	7ff00000 	.word	0x7ff00000

0800a200 <__b2d>:
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	6906      	ldr	r6, [r0, #16]
 800a206:	f100 0814 	add.w	r8, r0, #20
 800a20a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a20e:	1f37      	subs	r7, r6, #4
 800a210:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a214:	4610      	mov	r0, r2
 800a216:	f7ff fd4b 	bl	8009cb0 <__hi0bits>
 800a21a:	f1c0 0320 	rsb	r3, r0, #32
 800a21e:	280a      	cmp	r0, #10
 800a220:	600b      	str	r3, [r1, #0]
 800a222:	491b      	ldr	r1, [pc, #108]	@ (800a290 <__b2d+0x90>)
 800a224:	dc15      	bgt.n	800a252 <__b2d+0x52>
 800a226:	f1c0 0c0b 	rsb	ip, r0, #11
 800a22a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a22e:	45b8      	cmp	r8, r7
 800a230:	ea43 0501 	orr.w	r5, r3, r1
 800a234:	bf34      	ite	cc
 800a236:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a23a:	2300      	movcs	r3, #0
 800a23c:	3015      	adds	r0, #21
 800a23e:	fa02 f000 	lsl.w	r0, r2, r0
 800a242:	fa23 f30c 	lsr.w	r3, r3, ip
 800a246:	4303      	orrs	r3, r0
 800a248:	461c      	mov	r4, r3
 800a24a:	ec45 4b10 	vmov	d0, r4, r5
 800a24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a252:	45b8      	cmp	r8, r7
 800a254:	bf3a      	itte	cc
 800a256:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a25a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a25e:	2300      	movcs	r3, #0
 800a260:	380b      	subs	r0, #11
 800a262:	d012      	beq.n	800a28a <__b2d+0x8a>
 800a264:	f1c0 0120 	rsb	r1, r0, #32
 800a268:	fa23 f401 	lsr.w	r4, r3, r1
 800a26c:	4082      	lsls	r2, r0
 800a26e:	4322      	orrs	r2, r4
 800a270:	4547      	cmp	r7, r8
 800a272:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a276:	bf8c      	ite	hi
 800a278:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a27c:	2200      	movls	r2, #0
 800a27e:	4083      	lsls	r3, r0
 800a280:	40ca      	lsrs	r2, r1
 800a282:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a286:	4313      	orrs	r3, r2
 800a288:	e7de      	b.n	800a248 <__b2d+0x48>
 800a28a:	ea42 0501 	orr.w	r5, r2, r1
 800a28e:	e7db      	b.n	800a248 <__b2d+0x48>
 800a290:	3ff00000 	.word	0x3ff00000

0800a294 <__d2b>:
 800a294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a298:	460f      	mov	r7, r1
 800a29a:	2101      	movs	r1, #1
 800a29c:	ec59 8b10 	vmov	r8, r9, d0
 800a2a0:	4616      	mov	r6, r2
 800a2a2:	f7ff fc13 	bl	8009acc <_Balloc>
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	b930      	cbnz	r0, 800a2b8 <__d2b+0x24>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	4b23      	ldr	r3, [pc, #140]	@ (800a33c <__d2b+0xa8>)
 800a2ae:	4824      	ldr	r0, [pc, #144]	@ (800a340 <__d2b+0xac>)
 800a2b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a2b4:	f001 fb0c 	bl	800b8d0 <__assert_func>
 800a2b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2c0:	b10d      	cbz	r5, 800a2c6 <__d2b+0x32>
 800a2c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	f1b8 0300 	subs.w	r3, r8, #0
 800a2cc:	d023      	beq.n	800a316 <__d2b+0x82>
 800a2ce:	4668      	mov	r0, sp
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	f7ff fd0c 	bl	8009cee <__lo0bits>
 800a2d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2da:	b1d0      	cbz	r0, 800a312 <__d2b+0x7e>
 800a2dc:	f1c0 0320 	rsb	r3, r0, #32
 800a2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	40c2      	lsrs	r2, r0
 800a2e8:	6163      	str	r3, [r4, #20]
 800a2ea:	9201      	str	r2, [sp, #4]
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	61a3      	str	r3, [r4, #24]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bf0c      	ite	eq
 800a2f4:	2201      	moveq	r2, #1
 800a2f6:	2202      	movne	r2, #2
 800a2f8:	6122      	str	r2, [r4, #16]
 800a2fa:	b1a5      	cbz	r5, 800a326 <__d2b+0x92>
 800a2fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a300:	4405      	add	r5, r0
 800a302:	603d      	str	r5, [r7, #0]
 800a304:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a308:	6030      	str	r0, [r6, #0]
 800a30a:	4620      	mov	r0, r4
 800a30c:	b003      	add	sp, #12
 800a30e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a312:	6161      	str	r1, [r4, #20]
 800a314:	e7ea      	b.n	800a2ec <__d2b+0x58>
 800a316:	a801      	add	r0, sp, #4
 800a318:	f7ff fce9 	bl	8009cee <__lo0bits>
 800a31c:	9b01      	ldr	r3, [sp, #4]
 800a31e:	6163      	str	r3, [r4, #20]
 800a320:	3020      	adds	r0, #32
 800a322:	2201      	movs	r2, #1
 800a324:	e7e8      	b.n	800a2f8 <__d2b+0x64>
 800a326:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a32a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a32e:	6038      	str	r0, [r7, #0]
 800a330:	6918      	ldr	r0, [r3, #16]
 800a332:	f7ff fcbd 	bl	8009cb0 <__hi0bits>
 800a336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a33a:	e7e5      	b.n	800a308 <__d2b+0x74>
 800a33c:	0800c8ad 	.word	0x0800c8ad
 800a340:	0800c8be 	.word	0x0800c8be

0800a344 <__ratio>:
 800a344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a348:	4688      	mov	r8, r1
 800a34a:	4669      	mov	r1, sp
 800a34c:	4681      	mov	r9, r0
 800a34e:	f7ff ff57 	bl	800a200 <__b2d>
 800a352:	a901      	add	r1, sp, #4
 800a354:	4640      	mov	r0, r8
 800a356:	ec55 4b10 	vmov	r4, r5, d0
 800a35a:	f7ff ff51 	bl	800a200 <__b2d>
 800a35e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a362:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a36c:	1a5b      	subs	r3, r3, r1
 800a36e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a372:	ec57 6b10 	vmov	r6, r7, d0
 800a376:	2b00      	cmp	r3, #0
 800a378:	bfd6      	itet	le
 800a37a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a37e:	462a      	movgt	r2, r5
 800a380:	463a      	movle	r2, r7
 800a382:	46ab      	mov	fp, r5
 800a384:	46a2      	mov	sl, r4
 800a386:	bfce      	itee	gt
 800a388:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a38c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a390:	ee00 3a90 	vmovle	s1, r3
 800a394:	ec4b ab17 	vmov	d7, sl, fp
 800a398:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a39c:	b003      	add	sp, #12
 800a39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3a2 <__copybits>:
 800a3a2:	3901      	subs	r1, #1
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	1149      	asrs	r1, r1, #5
 800a3a8:	6914      	ldr	r4, [r2, #16]
 800a3aa:	3101      	adds	r1, #1
 800a3ac:	f102 0314 	add.w	r3, r2, #20
 800a3b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3b8:	1f05      	subs	r5, r0, #4
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	d30c      	bcc.n	800a3d8 <__copybits+0x36>
 800a3be:	1aa3      	subs	r3, r4, r2
 800a3c0:	3b11      	subs	r3, #17
 800a3c2:	f023 0303 	bic.w	r3, r3, #3
 800a3c6:	3211      	adds	r2, #17
 800a3c8:	42a2      	cmp	r2, r4
 800a3ca:	bf88      	it	hi
 800a3cc:	2300      	movhi	r3, #0
 800a3ce:	4418      	add	r0, r3
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4288      	cmp	r0, r1
 800a3d4:	d305      	bcc.n	800a3e2 <__copybits+0x40>
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
 800a3d8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3dc:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3e0:	e7eb      	b.n	800a3ba <__copybits+0x18>
 800a3e2:	f840 3b04 	str.w	r3, [r0], #4
 800a3e6:	e7f4      	b.n	800a3d2 <__copybits+0x30>

0800a3e8 <__any_on>:
 800a3e8:	f100 0214 	add.w	r2, r0, #20
 800a3ec:	6900      	ldr	r0, [r0, #16]
 800a3ee:	114b      	asrs	r3, r1, #5
 800a3f0:	4298      	cmp	r0, r3
 800a3f2:	b510      	push	{r4, lr}
 800a3f4:	db11      	blt.n	800a41a <__any_on+0x32>
 800a3f6:	dd0a      	ble.n	800a40e <__any_on+0x26>
 800a3f8:	f011 011f 	ands.w	r1, r1, #31
 800a3fc:	d007      	beq.n	800a40e <__any_on+0x26>
 800a3fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a402:	fa24 f001 	lsr.w	r0, r4, r1
 800a406:	fa00 f101 	lsl.w	r1, r0, r1
 800a40a:	428c      	cmp	r4, r1
 800a40c:	d10b      	bne.n	800a426 <__any_on+0x3e>
 800a40e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a412:	4293      	cmp	r3, r2
 800a414:	d803      	bhi.n	800a41e <__any_on+0x36>
 800a416:	2000      	movs	r0, #0
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	4603      	mov	r3, r0
 800a41c:	e7f7      	b.n	800a40e <__any_on+0x26>
 800a41e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a422:	2900      	cmp	r1, #0
 800a424:	d0f5      	beq.n	800a412 <__any_on+0x2a>
 800a426:	2001      	movs	r0, #1
 800a428:	e7f6      	b.n	800a418 <__any_on+0x30>

0800a42a <sulp>:
 800a42a:	b570      	push	{r4, r5, r6, lr}
 800a42c:	4604      	mov	r4, r0
 800a42e:	460d      	mov	r5, r1
 800a430:	4616      	mov	r6, r2
 800a432:	ec45 4b10 	vmov	d0, r4, r5
 800a436:	f7ff febd 	bl	800a1b4 <__ulp>
 800a43a:	b17e      	cbz	r6, 800a45c <sulp+0x32>
 800a43c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a440:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a444:	2b00      	cmp	r3, #0
 800a446:	dd09      	ble.n	800a45c <sulp+0x32>
 800a448:	051b      	lsls	r3, r3, #20
 800a44a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a44e:	2000      	movs	r0, #0
 800a450:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a454:	ec41 0b17 	vmov	d7, r0, r1
 800a458:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a460 <_strtod_l>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	ed2d 8b0a 	vpush	{d8-d12}
 800a468:	b097      	sub	sp, #92	@ 0x5c
 800a46a:	4688      	mov	r8, r1
 800a46c:	920e      	str	r2, [sp, #56]	@ 0x38
 800a46e:	2200      	movs	r2, #0
 800a470:	9212      	str	r2, [sp, #72]	@ 0x48
 800a472:	9005      	str	r0, [sp, #20]
 800a474:	f04f 0a00 	mov.w	sl, #0
 800a478:	f04f 0b00 	mov.w	fp, #0
 800a47c:	460a      	mov	r2, r1
 800a47e:	9211      	str	r2, [sp, #68]	@ 0x44
 800a480:	7811      	ldrb	r1, [r2, #0]
 800a482:	292b      	cmp	r1, #43	@ 0x2b
 800a484:	d04c      	beq.n	800a520 <_strtod_l+0xc0>
 800a486:	d839      	bhi.n	800a4fc <_strtod_l+0x9c>
 800a488:	290d      	cmp	r1, #13
 800a48a:	d833      	bhi.n	800a4f4 <_strtod_l+0x94>
 800a48c:	2908      	cmp	r1, #8
 800a48e:	d833      	bhi.n	800a4f8 <_strtod_l+0x98>
 800a490:	2900      	cmp	r1, #0
 800a492:	d03c      	beq.n	800a50e <_strtod_l+0xae>
 800a494:	2200      	movs	r2, #0
 800a496:	9208      	str	r2, [sp, #32]
 800a498:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a49a:	782a      	ldrb	r2, [r5, #0]
 800a49c:	2a30      	cmp	r2, #48	@ 0x30
 800a49e:	f040 80b5 	bne.w	800a60c <_strtod_l+0x1ac>
 800a4a2:	786a      	ldrb	r2, [r5, #1]
 800a4a4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4a8:	2a58      	cmp	r2, #88	@ 0x58
 800a4aa:	d170      	bne.n	800a58e <_strtod_l+0x12e>
 800a4ac:	9302      	str	r3, [sp, #8]
 800a4ae:	9b08      	ldr	r3, [sp, #32]
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	ab12      	add	r3, sp, #72	@ 0x48
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	4a8b      	ldr	r2, [pc, #556]	@ (800a6e4 <_strtod_l+0x284>)
 800a4b8:	9805      	ldr	r0, [sp, #20]
 800a4ba:	ab13      	add	r3, sp, #76	@ 0x4c
 800a4bc:	a911      	add	r1, sp, #68	@ 0x44
 800a4be:	f001 faa1 	bl	800ba04 <__gethex>
 800a4c2:	f010 060f 	ands.w	r6, r0, #15
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	d005      	beq.n	800a4d6 <_strtod_l+0x76>
 800a4ca:	2e06      	cmp	r6, #6
 800a4cc:	d12a      	bne.n	800a524 <_strtod_l+0xc4>
 800a4ce:	3501      	adds	r5, #1
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	9511      	str	r5, [sp, #68]	@ 0x44
 800a4d4:	9308      	str	r3, [sp, #32]
 800a4d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f040 852f 	bne.w	800af3c <_strtod_l+0xadc>
 800a4de:	9b08      	ldr	r3, [sp, #32]
 800a4e0:	ec4b ab10 	vmov	d0, sl, fp
 800a4e4:	b1cb      	cbz	r3, 800a51a <_strtod_l+0xba>
 800a4e6:	eeb1 0b40 	vneg.f64	d0, d0
 800a4ea:	b017      	add	sp, #92	@ 0x5c
 800a4ec:	ecbd 8b0a 	vpop	{d8-d12}
 800a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	2920      	cmp	r1, #32
 800a4f6:	d1cd      	bne.n	800a494 <_strtod_l+0x34>
 800a4f8:	3201      	adds	r2, #1
 800a4fa:	e7c0      	b.n	800a47e <_strtod_l+0x1e>
 800a4fc:	292d      	cmp	r1, #45	@ 0x2d
 800a4fe:	d1c9      	bne.n	800a494 <_strtod_l+0x34>
 800a500:	2101      	movs	r1, #1
 800a502:	9108      	str	r1, [sp, #32]
 800a504:	1c51      	adds	r1, r2, #1
 800a506:	9111      	str	r1, [sp, #68]	@ 0x44
 800a508:	7852      	ldrb	r2, [r2, #1]
 800a50a:	2a00      	cmp	r2, #0
 800a50c:	d1c4      	bne.n	800a498 <_strtod_l+0x38>
 800a50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a510:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 850f 	bne.w	800af38 <_strtod_l+0xad8>
 800a51a:	ec4b ab10 	vmov	d0, sl, fp
 800a51e:	e7e4      	b.n	800a4ea <_strtod_l+0x8a>
 800a520:	2100      	movs	r1, #0
 800a522:	e7ee      	b.n	800a502 <_strtod_l+0xa2>
 800a524:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a526:	b13a      	cbz	r2, 800a538 <_strtod_l+0xd8>
 800a528:	2135      	movs	r1, #53	@ 0x35
 800a52a:	a814      	add	r0, sp, #80	@ 0x50
 800a52c:	f7ff ff39 	bl	800a3a2 <__copybits>
 800a530:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a532:	9805      	ldr	r0, [sp, #20]
 800a534:	f7ff fb0a 	bl	8009b4c <_Bfree>
 800a538:	1e73      	subs	r3, r6, #1
 800a53a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d806      	bhi.n	800a54e <_strtod_l+0xee>
 800a540:	e8df f003 	tbb	[pc, r3]
 800a544:	201d0314 	.word	0x201d0314
 800a548:	14          	.byte	0x14
 800a549:	00          	.byte	0x00
 800a54a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a54e:	05e3      	lsls	r3, r4, #23
 800a550:	bf48      	it	mi
 800a552:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a556:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a55a:	0d1b      	lsrs	r3, r3, #20
 800a55c:	051b      	lsls	r3, r3, #20
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1b9      	bne.n	800a4d6 <_strtod_l+0x76>
 800a562:	f7fe fb93 	bl	8008c8c <__errno>
 800a566:	2322      	movs	r3, #34	@ 0x22
 800a568:	6003      	str	r3, [r0, #0]
 800a56a:	e7b4      	b.n	800a4d6 <_strtod_l+0x76>
 800a56c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a570:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a574:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a578:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a57c:	e7e7      	b.n	800a54e <_strtod_l+0xee>
 800a57e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800a6ec <_strtod_l+0x28c>
 800a582:	e7e4      	b.n	800a54e <_strtod_l+0xee>
 800a584:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a588:	f04f 3aff 	mov.w	sl, #4294967295
 800a58c:	e7df      	b.n	800a54e <_strtod_l+0xee>
 800a58e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	9211      	str	r2, [sp, #68]	@ 0x44
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b30      	cmp	r3, #48	@ 0x30
 800a598:	d0f9      	beq.n	800a58e <_strtod_l+0x12e>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d09b      	beq.n	800a4d6 <_strtod_l+0x76>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	2600      	movs	r6, #0
 800a5a2:	9307      	str	r3, [sp, #28]
 800a5a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5a8:	46b1      	mov	r9, r6
 800a5aa:	4635      	mov	r5, r6
 800a5ac:	220a      	movs	r2, #10
 800a5ae:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a5b0:	7804      	ldrb	r4, [r0, #0]
 800a5b2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a5b6:	b2d9      	uxtb	r1, r3
 800a5b8:	2909      	cmp	r1, #9
 800a5ba:	d929      	bls.n	800a610 <_strtod_l+0x1b0>
 800a5bc:	494a      	ldr	r1, [pc, #296]	@ (800a6e8 <_strtod_l+0x288>)
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f001 f95a 	bl	800b878 <strncmp>
 800a5c4:	b378      	cbz	r0, 800a626 <_strtod_l+0x1c6>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	462b      	mov	r3, r5
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	9006      	str	r0, [sp, #24]
 800a5d0:	2a65      	cmp	r2, #101	@ 0x65
 800a5d2:	d001      	beq.n	800a5d8 <_strtod_l+0x178>
 800a5d4:	2a45      	cmp	r2, #69	@ 0x45
 800a5d6:	d117      	bne.n	800a608 <_strtod_l+0x1a8>
 800a5d8:	b91b      	cbnz	r3, 800a5e2 <_strtod_l+0x182>
 800a5da:	9b07      	ldr	r3, [sp, #28]
 800a5dc:	4303      	orrs	r3, r0
 800a5de:	d096      	beq.n	800a50e <_strtod_l+0xae>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a5e6:	f108 0201 	add.w	r2, r8, #1
 800a5ea:	9211      	str	r2, [sp, #68]	@ 0x44
 800a5ec:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a5f0:	2a2b      	cmp	r2, #43	@ 0x2b
 800a5f2:	d06b      	beq.n	800a6cc <_strtod_l+0x26c>
 800a5f4:	2a2d      	cmp	r2, #45	@ 0x2d
 800a5f6:	d071      	beq.n	800a6dc <_strtod_l+0x27c>
 800a5f8:	f04f 0e00 	mov.w	lr, #0
 800a5fc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a600:	2c09      	cmp	r4, #9
 800a602:	d979      	bls.n	800a6f8 <_strtod_l+0x298>
 800a604:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a608:	2400      	movs	r4, #0
 800a60a:	e094      	b.n	800a736 <_strtod_l+0x2d6>
 800a60c:	2300      	movs	r3, #0
 800a60e:	e7c7      	b.n	800a5a0 <_strtod_l+0x140>
 800a610:	2d08      	cmp	r5, #8
 800a612:	f100 0001 	add.w	r0, r0, #1
 800a616:	bfd4      	ite	le
 800a618:	fb02 3909 	mlale	r9, r2, r9, r3
 800a61c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800a620:	3501      	adds	r5, #1
 800a622:	9011      	str	r0, [sp, #68]	@ 0x44
 800a624:	e7c3      	b.n	800a5ae <_strtod_l+0x14e>
 800a626:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	9211      	str	r2, [sp, #68]	@ 0x44
 800a62c:	785a      	ldrb	r2, [r3, #1]
 800a62e:	b375      	cbz	r5, 800a68e <_strtod_l+0x22e>
 800a630:	4607      	mov	r7, r0
 800a632:	462b      	mov	r3, r5
 800a634:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a638:	2909      	cmp	r1, #9
 800a63a:	d913      	bls.n	800a664 <_strtod_l+0x204>
 800a63c:	2101      	movs	r1, #1
 800a63e:	9106      	str	r1, [sp, #24]
 800a640:	e7c6      	b.n	800a5d0 <_strtod_l+0x170>
 800a642:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	9211      	str	r2, [sp, #68]	@ 0x44
 800a648:	785a      	ldrb	r2, [r3, #1]
 800a64a:	3001      	adds	r0, #1
 800a64c:	2a30      	cmp	r2, #48	@ 0x30
 800a64e:	d0f8      	beq.n	800a642 <_strtod_l+0x1e2>
 800a650:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a654:	2b08      	cmp	r3, #8
 800a656:	f200 8476 	bhi.w	800af46 <_strtod_l+0xae6>
 800a65a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a65c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a65e:	4607      	mov	r7, r0
 800a660:	2000      	movs	r0, #0
 800a662:	4603      	mov	r3, r0
 800a664:	3a30      	subs	r2, #48	@ 0x30
 800a666:	f100 0101 	add.w	r1, r0, #1
 800a66a:	d023      	beq.n	800a6b4 <_strtod_l+0x254>
 800a66c:	440f      	add	r7, r1
 800a66e:	eb00 0c03 	add.w	ip, r0, r3
 800a672:	4619      	mov	r1, r3
 800a674:	240a      	movs	r4, #10
 800a676:	4561      	cmp	r1, ip
 800a678:	d10b      	bne.n	800a692 <_strtod_l+0x232>
 800a67a:	1c5c      	adds	r4, r3, #1
 800a67c:	4403      	add	r3, r0
 800a67e:	2b08      	cmp	r3, #8
 800a680:	4404      	add	r4, r0
 800a682:	dc11      	bgt.n	800a6a8 <_strtod_l+0x248>
 800a684:	230a      	movs	r3, #10
 800a686:	fb03 2909 	mla	r9, r3, r9, r2
 800a68a:	2100      	movs	r1, #0
 800a68c:	e013      	b.n	800a6b6 <_strtod_l+0x256>
 800a68e:	4628      	mov	r0, r5
 800a690:	e7dc      	b.n	800a64c <_strtod_l+0x1ec>
 800a692:	2908      	cmp	r1, #8
 800a694:	f101 0101 	add.w	r1, r1, #1
 800a698:	dc02      	bgt.n	800a6a0 <_strtod_l+0x240>
 800a69a:	fb04 f909 	mul.w	r9, r4, r9
 800a69e:	e7ea      	b.n	800a676 <_strtod_l+0x216>
 800a6a0:	2910      	cmp	r1, #16
 800a6a2:	bfd8      	it	le
 800a6a4:	4366      	mulle	r6, r4
 800a6a6:	e7e6      	b.n	800a676 <_strtod_l+0x216>
 800a6a8:	2b0f      	cmp	r3, #15
 800a6aa:	dcee      	bgt.n	800a68a <_strtod_l+0x22a>
 800a6ac:	230a      	movs	r3, #10
 800a6ae:	fb03 2606 	mla	r6, r3, r6, r2
 800a6b2:	e7ea      	b.n	800a68a <_strtod_l+0x22a>
 800a6b4:	461c      	mov	r4, r3
 800a6b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	9211      	str	r2, [sp, #68]	@ 0x44
 800a6bc:	785a      	ldrb	r2, [r3, #1]
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	e7b7      	b.n	800a634 <_strtod_l+0x1d4>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	2700      	movs	r7, #0
 800a6c8:	9306      	str	r3, [sp, #24]
 800a6ca:	e786      	b.n	800a5da <_strtod_l+0x17a>
 800a6cc:	f04f 0e00 	mov.w	lr, #0
 800a6d0:	f108 0202 	add.w	r2, r8, #2
 800a6d4:	9211      	str	r2, [sp, #68]	@ 0x44
 800a6d6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a6da:	e78f      	b.n	800a5fc <_strtod_l+0x19c>
 800a6dc:	f04f 0e01 	mov.w	lr, #1
 800a6e0:	e7f6      	b.n	800a6d0 <_strtod_l+0x270>
 800a6e2:	bf00      	nop
 800a6e4:	0800ca30 	.word	0x0800ca30
 800a6e8:	0800ca18 	.word	0x0800ca18
 800a6ec:	7ff00000 	.word	0x7ff00000
 800a6f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a6f2:	1c54      	adds	r4, r2, #1
 800a6f4:	9411      	str	r4, [sp, #68]	@ 0x44
 800a6f6:	7852      	ldrb	r2, [r2, #1]
 800a6f8:	2a30      	cmp	r2, #48	@ 0x30
 800a6fa:	d0f9      	beq.n	800a6f0 <_strtod_l+0x290>
 800a6fc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a700:	2c08      	cmp	r4, #8
 800a702:	d881      	bhi.n	800a608 <_strtod_l+0x1a8>
 800a704:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a708:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a70a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a70c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a70e:	1c51      	adds	r1, r2, #1
 800a710:	9111      	str	r1, [sp, #68]	@ 0x44
 800a712:	7852      	ldrb	r2, [r2, #1]
 800a714:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a718:	2c09      	cmp	r4, #9
 800a71a:	d938      	bls.n	800a78e <_strtod_l+0x32e>
 800a71c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a71e:	1b0c      	subs	r4, r1, r4
 800a720:	2c08      	cmp	r4, #8
 800a722:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a726:	dc02      	bgt.n	800a72e <_strtod_l+0x2ce>
 800a728:	4564      	cmp	r4, ip
 800a72a:	bfa8      	it	ge
 800a72c:	4664      	movge	r4, ip
 800a72e:	f1be 0f00 	cmp.w	lr, #0
 800a732:	d000      	beq.n	800a736 <_strtod_l+0x2d6>
 800a734:	4264      	negs	r4, r4
 800a736:	2b00      	cmp	r3, #0
 800a738:	d14e      	bne.n	800a7d8 <_strtod_l+0x378>
 800a73a:	9b07      	ldr	r3, [sp, #28]
 800a73c:	4318      	orrs	r0, r3
 800a73e:	f47f aeca 	bne.w	800a4d6 <_strtod_l+0x76>
 800a742:	9b06      	ldr	r3, [sp, #24]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f47f aee2 	bne.w	800a50e <_strtod_l+0xae>
 800a74a:	2a69      	cmp	r2, #105	@ 0x69
 800a74c:	d027      	beq.n	800a79e <_strtod_l+0x33e>
 800a74e:	dc24      	bgt.n	800a79a <_strtod_l+0x33a>
 800a750:	2a49      	cmp	r2, #73	@ 0x49
 800a752:	d024      	beq.n	800a79e <_strtod_l+0x33e>
 800a754:	2a4e      	cmp	r2, #78	@ 0x4e
 800a756:	f47f aeda 	bne.w	800a50e <_strtod_l+0xae>
 800a75a:	4997      	ldr	r1, [pc, #604]	@ (800a9b8 <_strtod_l+0x558>)
 800a75c:	a811      	add	r0, sp, #68	@ 0x44
 800a75e:	f001 fb73 	bl	800be48 <__match>
 800a762:	2800      	cmp	r0, #0
 800a764:	f43f aed3 	beq.w	800a50e <_strtod_l+0xae>
 800a768:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b28      	cmp	r3, #40	@ 0x28
 800a76e:	d12d      	bne.n	800a7cc <_strtod_l+0x36c>
 800a770:	4992      	ldr	r1, [pc, #584]	@ (800a9bc <_strtod_l+0x55c>)
 800a772:	aa14      	add	r2, sp, #80	@ 0x50
 800a774:	a811      	add	r0, sp, #68	@ 0x44
 800a776:	f001 fb7b 	bl	800be70 <__hexnan>
 800a77a:	2805      	cmp	r0, #5
 800a77c:	d126      	bne.n	800a7cc <_strtod_l+0x36c>
 800a77e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a780:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a784:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a788:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a78c:	e6a3      	b.n	800a4d6 <_strtod_l+0x76>
 800a78e:	240a      	movs	r4, #10
 800a790:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a794:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a798:	e7b8      	b.n	800a70c <_strtod_l+0x2ac>
 800a79a:	2a6e      	cmp	r2, #110	@ 0x6e
 800a79c:	e7db      	b.n	800a756 <_strtod_l+0x2f6>
 800a79e:	4988      	ldr	r1, [pc, #544]	@ (800a9c0 <_strtod_l+0x560>)
 800a7a0:	a811      	add	r0, sp, #68	@ 0x44
 800a7a2:	f001 fb51 	bl	800be48 <__match>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f43f aeb1 	beq.w	800a50e <_strtod_l+0xae>
 800a7ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7ae:	4985      	ldr	r1, [pc, #532]	@ (800a9c4 <_strtod_l+0x564>)
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	a811      	add	r0, sp, #68	@ 0x44
 800a7b4:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7b6:	f001 fb47 	bl	800be48 <__match>
 800a7ba:	b910      	cbnz	r0, 800a7c2 <_strtod_l+0x362>
 800a7bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7be:	3301      	adds	r3, #1
 800a7c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7c2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800a9d8 <_strtod_l+0x578>
 800a7c6:	f04f 0a00 	mov.w	sl, #0
 800a7ca:	e684      	b.n	800a4d6 <_strtod_l+0x76>
 800a7cc:	487e      	ldr	r0, [pc, #504]	@ (800a9c8 <_strtod_l+0x568>)
 800a7ce:	f001 f877 	bl	800b8c0 <nan>
 800a7d2:	ec5b ab10 	vmov	sl, fp, d0
 800a7d6:	e67e      	b.n	800a4d6 <_strtod_l+0x76>
 800a7d8:	ee07 9a90 	vmov	s15, r9
 800a7dc:	1be2      	subs	r2, r4, r7
 800a7de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a7e2:	2d00      	cmp	r5, #0
 800a7e4:	bf08      	it	eq
 800a7e6:	461d      	moveq	r5, r3
 800a7e8:	2b10      	cmp	r3, #16
 800a7ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	bfa8      	it	ge
 800a7f0:	2210      	movge	r2, #16
 800a7f2:	2b09      	cmp	r3, #9
 800a7f4:	ec5b ab17 	vmov	sl, fp, d7
 800a7f8:	dc15      	bgt.n	800a826 <_strtod_l+0x3c6>
 800a7fa:	1be1      	subs	r1, r4, r7
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	f43f ae6a 	beq.w	800a4d6 <_strtod_l+0x76>
 800a802:	eba4 0107 	sub.w	r1, r4, r7
 800a806:	dd72      	ble.n	800a8ee <_strtod_l+0x48e>
 800a808:	2916      	cmp	r1, #22
 800a80a:	dc59      	bgt.n	800a8c0 <_strtod_l+0x460>
 800a80c:	4b6f      	ldr	r3, [pc, #444]	@ (800a9cc <_strtod_l+0x56c>)
 800a80e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a814:	ed93 7b00 	vldr	d7, [r3]
 800a818:	ec4b ab16 	vmov	d6, sl, fp
 800a81c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a820:	ec5b ab17 	vmov	sl, fp, d7
 800a824:	e657      	b.n	800a4d6 <_strtod_l+0x76>
 800a826:	4969      	ldr	r1, [pc, #420]	@ (800a9cc <_strtod_l+0x56c>)
 800a828:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a82c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a830:	ee06 6a90 	vmov	s13, r6
 800a834:	2b0f      	cmp	r3, #15
 800a836:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a83a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a83e:	ec5b ab16 	vmov	sl, fp, d6
 800a842:	ddda      	ble.n	800a7fa <_strtod_l+0x39a>
 800a844:	1a9a      	subs	r2, r3, r2
 800a846:	1be1      	subs	r1, r4, r7
 800a848:	440a      	add	r2, r1
 800a84a:	2a00      	cmp	r2, #0
 800a84c:	f340 8094 	ble.w	800a978 <_strtod_l+0x518>
 800a850:	f012 000f 	ands.w	r0, r2, #15
 800a854:	d00a      	beq.n	800a86c <_strtod_l+0x40c>
 800a856:	495d      	ldr	r1, [pc, #372]	@ (800a9cc <_strtod_l+0x56c>)
 800a858:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a85c:	ed91 7b00 	vldr	d7, [r1]
 800a860:	ec4b ab16 	vmov	d6, sl, fp
 800a864:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a868:	ec5b ab17 	vmov	sl, fp, d7
 800a86c:	f032 020f 	bics.w	r2, r2, #15
 800a870:	d073      	beq.n	800a95a <_strtod_l+0x4fa>
 800a872:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a876:	dd47      	ble.n	800a908 <_strtod_l+0x4a8>
 800a878:	2400      	movs	r4, #0
 800a87a:	4625      	mov	r5, r4
 800a87c:	9407      	str	r4, [sp, #28]
 800a87e:	4626      	mov	r6, r4
 800a880:	9a05      	ldr	r2, [sp, #20]
 800a882:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a9d8 <_strtod_l+0x578>
 800a886:	2322      	movs	r3, #34	@ 0x22
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	f04f 0a00 	mov.w	sl, #0
 800a88e:	9b07      	ldr	r3, [sp, #28]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f43f ae20 	beq.w	800a4d6 <_strtod_l+0x76>
 800a896:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a898:	9805      	ldr	r0, [sp, #20]
 800a89a:	f7ff f957 	bl	8009b4c <_Bfree>
 800a89e:	9805      	ldr	r0, [sp, #20]
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	f7ff f953 	bl	8009b4c <_Bfree>
 800a8a6:	9805      	ldr	r0, [sp, #20]
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	f7ff f94f 	bl	8009b4c <_Bfree>
 800a8ae:	9907      	ldr	r1, [sp, #28]
 800a8b0:	9805      	ldr	r0, [sp, #20]
 800a8b2:	f7ff f94b 	bl	8009b4c <_Bfree>
 800a8b6:	9805      	ldr	r0, [sp, #20]
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	f7ff f947 	bl	8009b4c <_Bfree>
 800a8be:	e60a      	b.n	800a4d6 <_strtod_l+0x76>
 800a8c0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a8c4:	1be0      	subs	r0, r4, r7
 800a8c6:	4281      	cmp	r1, r0
 800a8c8:	dbbc      	blt.n	800a844 <_strtod_l+0x3e4>
 800a8ca:	4a40      	ldr	r2, [pc, #256]	@ (800a9cc <_strtod_l+0x56c>)
 800a8cc:	f1c3 030f 	rsb	r3, r3, #15
 800a8d0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a8d4:	ed91 7b00 	vldr	d7, [r1]
 800a8d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8da:	ec4b ab16 	vmov	d6, sl, fp
 800a8de:	1acb      	subs	r3, r1, r3
 800a8e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a8e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8e8:	ed92 6b00 	vldr	d6, [r2]
 800a8ec:	e796      	b.n	800a81c <_strtod_l+0x3bc>
 800a8ee:	3116      	adds	r1, #22
 800a8f0:	dba8      	blt.n	800a844 <_strtod_l+0x3e4>
 800a8f2:	4b36      	ldr	r3, [pc, #216]	@ (800a9cc <_strtod_l+0x56c>)
 800a8f4:	1b3c      	subs	r4, r7, r4
 800a8f6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a8fa:	ed94 7b00 	vldr	d7, [r4]
 800a8fe:	ec4b ab16 	vmov	d6, sl, fp
 800a902:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a906:	e78b      	b.n	800a820 <_strtod_l+0x3c0>
 800a908:	2000      	movs	r0, #0
 800a90a:	ec4b ab17 	vmov	d7, sl, fp
 800a90e:	4e30      	ldr	r6, [pc, #192]	@ (800a9d0 <_strtod_l+0x570>)
 800a910:	1112      	asrs	r2, r2, #4
 800a912:	4601      	mov	r1, r0
 800a914:	2a01      	cmp	r2, #1
 800a916:	dc23      	bgt.n	800a960 <_strtod_l+0x500>
 800a918:	b108      	cbz	r0, 800a91e <_strtod_l+0x4be>
 800a91a:	ec5b ab17 	vmov	sl, fp, d7
 800a91e:	4a2c      	ldr	r2, [pc, #176]	@ (800a9d0 <_strtod_l+0x570>)
 800a920:	482c      	ldr	r0, [pc, #176]	@ (800a9d4 <_strtod_l+0x574>)
 800a922:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a926:	ed92 7b00 	vldr	d7, [r2]
 800a92a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a92e:	ec4b ab16 	vmov	d6, sl, fp
 800a932:	4a29      	ldr	r2, [pc, #164]	@ (800a9d8 <_strtod_l+0x578>)
 800a934:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a938:	ee17 1a90 	vmov	r1, s15
 800a93c:	400a      	ands	r2, r1
 800a93e:	4282      	cmp	r2, r0
 800a940:	ec5b ab17 	vmov	sl, fp, d7
 800a944:	d898      	bhi.n	800a878 <_strtod_l+0x418>
 800a946:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a94a:	4282      	cmp	r2, r0
 800a94c:	bf86      	itte	hi
 800a94e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a9dc <_strtod_l+0x57c>
 800a952:	f04f 3aff 	movhi.w	sl, #4294967295
 800a956:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a95a:	2200      	movs	r2, #0
 800a95c:	9206      	str	r2, [sp, #24]
 800a95e:	e076      	b.n	800aa4e <_strtod_l+0x5ee>
 800a960:	f012 0f01 	tst.w	r2, #1
 800a964:	d004      	beq.n	800a970 <_strtod_l+0x510>
 800a966:	ed96 6b00 	vldr	d6, [r6]
 800a96a:	2001      	movs	r0, #1
 800a96c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a970:	3101      	adds	r1, #1
 800a972:	1052      	asrs	r2, r2, #1
 800a974:	3608      	adds	r6, #8
 800a976:	e7cd      	b.n	800a914 <_strtod_l+0x4b4>
 800a978:	d0ef      	beq.n	800a95a <_strtod_l+0x4fa>
 800a97a:	4252      	negs	r2, r2
 800a97c:	f012 000f 	ands.w	r0, r2, #15
 800a980:	d00a      	beq.n	800a998 <_strtod_l+0x538>
 800a982:	4912      	ldr	r1, [pc, #72]	@ (800a9cc <_strtod_l+0x56c>)
 800a984:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a988:	ed91 7b00 	vldr	d7, [r1]
 800a98c:	ec4b ab16 	vmov	d6, sl, fp
 800a990:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a994:	ec5b ab17 	vmov	sl, fp, d7
 800a998:	1112      	asrs	r2, r2, #4
 800a99a:	d0de      	beq.n	800a95a <_strtod_l+0x4fa>
 800a99c:	2a1f      	cmp	r2, #31
 800a99e:	dd1f      	ble.n	800a9e0 <_strtod_l+0x580>
 800a9a0:	2400      	movs	r4, #0
 800a9a2:	4625      	mov	r5, r4
 800a9a4:	9407      	str	r4, [sp, #28]
 800a9a6:	4626      	mov	r6, r4
 800a9a8:	9a05      	ldr	r2, [sp, #20]
 800a9aa:	2322      	movs	r3, #34	@ 0x22
 800a9ac:	f04f 0a00 	mov.w	sl, #0
 800a9b0:	f04f 0b00 	mov.w	fp, #0
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	e76a      	b.n	800a88e <_strtod_l+0x42e>
 800a9b8:	0800c805 	.word	0x0800c805
 800a9bc:	0800ca1c 	.word	0x0800ca1c
 800a9c0:	0800c7fd 	.word	0x0800c7fd
 800a9c4:	0800c834 	.word	0x0800c834
 800a9c8:	0800cbc5 	.word	0x0800cbc5
 800a9cc:	0800c950 	.word	0x0800c950
 800a9d0:	0800c928 	.word	0x0800c928
 800a9d4:	7ca00000 	.word	0x7ca00000
 800a9d8:	7ff00000 	.word	0x7ff00000
 800a9dc:	7fefffff 	.word	0x7fefffff
 800a9e0:	f012 0110 	ands.w	r1, r2, #16
 800a9e4:	bf18      	it	ne
 800a9e6:	216a      	movne	r1, #106	@ 0x6a
 800a9e8:	9106      	str	r1, [sp, #24]
 800a9ea:	ec4b ab17 	vmov	d7, sl, fp
 800a9ee:	49b0      	ldr	r1, [pc, #704]	@ (800acb0 <_strtod_l+0x850>)
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	07d6      	lsls	r6, r2, #31
 800a9f4:	d504      	bpl.n	800aa00 <_strtod_l+0x5a0>
 800a9f6:	ed91 6b00 	vldr	d6, [r1]
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa00:	1052      	asrs	r2, r2, #1
 800aa02:	f101 0108 	add.w	r1, r1, #8
 800aa06:	d1f4      	bne.n	800a9f2 <_strtod_l+0x592>
 800aa08:	b108      	cbz	r0, 800aa0e <_strtod_l+0x5ae>
 800aa0a:	ec5b ab17 	vmov	sl, fp, d7
 800aa0e:	9a06      	ldr	r2, [sp, #24]
 800aa10:	b1b2      	cbz	r2, 800aa40 <_strtod_l+0x5e0>
 800aa12:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800aa16:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800aa1a:	2a00      	cmp	r2, #0
 800aa1c:	4658      	mov	r0, fp
 800aa1e:	dd0f      	ble.n	800aa40 <_strtod_l+0x5e0>
 800aa20:	2a1f      	cmp	r2, #31
 800aa22:	dd55      	ble.n	800aad0 <_strtod_l+0x670>
 800aa24:	2a34      	cmp	r2, #52	@ 0x34
 800aa26:	bfde      	ittt	le
 800aa28:	f04f 32ff 	movle.w	r2, #4294967295
 800aa2c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800aa30:	408a      	lslle	r2, r1
 800aa32:	f04f 0a00 	mov.w	sl, #0
 800aa36:	bfcc      	ite	gt
 800aa38:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa3c:	ea02 0b00 	andle.w	fp, r2, r0
 800aa40:	ec4b ab17 	vmov	d7, sl, fp
 800aa44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa4c:	d0a8      	beq.n	800a9a0 <_strtod_l+0x540>
 800aa4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa50:	9805      	ldr	r0, [sp, #20]
 800aa52:	f8cd 9000 	str.w	r9, [sp]
 800aa56:	462a      	mov	r2, r5
 800aa58:	f7ff f8e0 	bl	8009c1c <__s2b>
 800aa5c:	9007      	str	r0, [sp, #28]
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f43f af0a 	beq.w	800a878 <_strtod_l+0x418>
 800aa64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa66:	1b3f      	subs	r7, r7, r4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	bfb4      	ite	lt
 800aa6c:	463b      	movlt	r3, r7
 800aa6e:	2300      	movge	r3, #0
 800aa70:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa74:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800aca0 <_strtod_l+0x840>
 800aa78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa7c:	2400      	movs	r4, #0
 800aa7e:	930d      	str	r3, [sp, #52]	@ 0x34
 800aa80:	4625      	mov	r5, r4
 800aa82:	9b07      	ldr	r3, [sp, #28]
 800aa84:	9805      	ldr	r0, [sp, #20]
 800aa86:	6859      	ldr	r1, [r3, #4]
 800aa88:	f7ff f820 	bl	8009acc <_Balloc>
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f43f aef6 	beq.w	800a880 <_strtod_l+0x420>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	ec4b ab19 	vmov	d9, sl, fp
 800aa9c:	3202      	adds	r2, #2
 800aa9e:	f103 010c 	add.w	r1, r3, #12
 800aaa2:	0092      	lsls	r2, r2, #2
 800aaa4:	300c      	adds	r0, #12
 800aaa6:	f7fe f91e 	bl	8008ce6 <memcpy>
 800aaaa:	eeb0 0b49 	vmov.f64	d0, d9
 800aaae:	9805      	ldr	r0, [sp, #20]
 800aab0:	aa14      	add	r2, sp, #80	@ 0x50
 800aab2:	a913      	add	r1, sp, #76	@ 0x4c
 800aab4:	f7ff fbee 	bl	800a294 <__d2b>
 800aab8:	9012      	str	r0, [sp, #72]	@ 0x48
 800aaba:	2800      	cmp	r0, #0
 800aabc:	f43f aee0 	beq.w	800a880 <_strtod_l+0x420>
 800aac0:	9805      	ldr	r0, [sp, #20]
 800aac2:	2101      	movs	r1, #1
 800aac4:	f7ff f940 	bl	8009d48 <__i2b>
 800aac8:	4605      	mov	r5, r0
 800aaca:	b940      	cbnz	r0, 800aade <_strtod_l+0x67e>
 800aacc:	2500      	movs	r5, #0
 800aace:	e6d7      	b.n	800a880 <_strtod_l+0x420>
 800aad0:	f04f 31ff 	mov.w	r1, #4294967295
 800aad4:	fa01 f202 	lsl.w	r2, r1, r2
 800aad8:	ea02 0a0a 	and.w	sl, r2, sl
 800aadc:	e7b0      	b.n	800aa40 <_strtod_l+0x5e0>
 800aade:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800aae0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aae2:	2f00      	cmp	r7, #0
 800aae4:	bfab      	itete	ge
 800aae6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800aae8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800aaea:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800aaee:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800aaf2:	bfac      	ite	ge
 800aaf4:	eb07 0903 	addge.w	r9, r7, r3
 800aaf8:	eba3 0807 	sublt.w	r8, r3, r7
 800aafc:	9b06      	ldr	r3, [sp, #24]
 800aafe:	1aff      	subs	r7, r7, r3
 800ab00:	4417      	add	r7, r2
 800ab02:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ab06:	4a6b      	ldr	r2, [pc, #428]	@ (800acb4 <_strtod_l+0x854>)
 800ab08:	3f01      	subs	r7, #1
 800ab0a:	4297      	cmp	r7, r2
 800ab0c:	da51      	bge.n	800abb2 <_strtod_l+0x752>
 800ab0e:	1bd1      	subs	r1, r2, r7
 800ab10:	291f      	cmp	r1, #31
 800ab12:	eba3 0301 	sub.w	r3, r3, r1
 800ab16:	f04f 0201 	mov.w	r2, #1
 800ab1a:	dc3e      	bgt.n	800ab9a <_strtod_l+0x73a>
 800ab1c:	408a      	lsls	r2, r1
 800ab1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab20:	2200      	movs	r2, #0
 800ab22:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ab24:	eb09 0703 	add.w	r7, r9, r3
 800ab28:	4498      	add	r8, r3
 800ab2a:	9b06      	ldr	r3, [sp, #24]
 800ab2c:	45b9      	cmp	r9, r7
 800ab2e:	4498      	add	r8, r3
 800ab30:	464b      	mov	r3, r9
 800ab32:	bfa8      	it	ge
 800ab34:	463b      	movge	r3, r7
 800ab36:	4543      	cmp	r3, r8
 800ab38:	bfa8      	it	ge
 800ab3a:	4643      	movge	r3, r8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	bfc2      	ittt	gt
 800ab40:	1aff      	subgt	r7, r7, r3
 800ab42:	eba8 0803 	subgt.w	r8, r8, r3
 800ab46:	eba9 0903 	subgt.w	r9, r9, r3
 800ab4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dd16      	ble.n	800ab7e <_strtod_l+0x71e>
 800ab50:	4629      	mov	r1, r5
 800ab52:	9805      	ldr	r0, [sp, #20]
 800ab54:	461a      	mov	r2, r3
 800ab56:	f7ff f9b7 	bl	8009ec8 <__pow5mult>
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d0b5      	beq.n	800aacc <_strtod_l+0x66c>
 800ab60:	4601      	mov	r1, r0
 800ab62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ab64:	9805      	ldr	r0, [sp, #20]
 800ab66:	f7ff f905 	bl	8009d74 <__multiply>
 800ab6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f43f ae87 	beq.w	800a880 <_strtod_l+0x420>
 800ab72:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ab74:	9805      	ldr	r0, [sp, #20]
 800ab76:	f7fe ffe9 	bl	8009b4c <_Bfree>
 800ab7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab7c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab7e:	2f00      	cmp	r7, #0
 800ab80:	dc1b      	bgt.n	800abba <_strtod_l+0x75a>
 800ab82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dd21      	ble.n	800abcc <_strtod_l+0x76c>
 800ab88:	4631      	mov	r1, r6
 800ab8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab8c:	9805      	ldr	r0, [sp, #20]
 800ab8e:	f7ff f99b 	bl	8009ec8 <__pow5mult>
 800ab92:	4606      	mov	r6, r0
 800ab94:	b9d0      	cbnz	r0, 800abcc <_strtod_l+0x76c>
 800ab96:	2600      	movs	r6, #0
 800ab98:	e672      	b.n	800a880 <_strtod_l+0x420>
 800ab9a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ab9e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800aba2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800aba6:	37e2      	adds	r7, #226	@ 0xe2
 800aba8:	fa02 f107 	lsl.w	r1, r2, r7
 800abac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800abae:	920c      	str	r2, [sp, #48]	@ 0x30
 800abb0:	e7b8      	b.n	800ab24 <_strtod_l+0x6c4>
 800abb2:	2200      	movs	r2, #0
 800abb4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800abb6:	2201      	movs	r2, #1
 800abb8:	e7f9      	b.n	800abae <_strtod_l+0x74e>
 800abba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800abbc:	9805      	ldr	r0, [sp, #20]
 800abbe:	463a      	mov	r2, r7
 800abc0:	f7ff f9dc 	bl	8009f7c <__lshift>
 800abc4:	9012      	str	r0, [sp, #72]	@ 0x48
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d1db      	bne.n	800ab82 <_strtod_l+0x722>
 800abca:	e659      	b.n	800a880 <_strtod_l+0x420>
 800abcc:	f1b8 0f00 	cmp.w	r8, #0
 800abd0:	dd07      	ble.n	800abe2 <_strtod_l+0x782>
 800abd2:	4631      	mov	r1, r6
 800abd4:	9805      	ldr	r0, [sp, #20]
 800abd6:	4642      	mov	r2, r8
 800abd8:	f7ff f9d0 	bl	8009f7c <__lshift>
 800abdc:	4606      	mov	r6, r0
 800abde:	2800      	cmp	r0, #0
 800abe0:	d0d9      	beq.n	800ab96 <_strtod_l+0x736>
 800abe2:	f1b9 0f00 	cmp.w	r9, #0
 800abe6:	dd08      	ble.n	800abfa <_strtod_l+0x79a>
 800abe8:	4629      	mov	r1, r5
 800abea:	9805      	ldr	r0, [sp, #20]
 800abec:	464a      	mov	r2, r9
 800abee:	f7ff f9c5 	bl	8009f7c <__lshift>
 800abf2:	4605      	mov	r5, r0
 800abf4:	2800      	cmp	r0, #0
 800abf6:	f43f ae43 	beq.w	800a880 <_strtod_l+0x420>
 800abfa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800abfc:	9805      	ldr	r0, [sp, #20]
 800abfe:	4632      	mov	r2, r6
 800ac00:	f7ff fa44 	bl	800a08c <__mdiff>
 800ac04:	4604      	mov	r4, r0
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f43f ae3a 	beq.w	800a880 <_strtod_l+0x420>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ac12:	60c3      	str	r3, [r0, #12]
 800ac14:	4629      	mov	r1, r5
 800ac16:	f7ff fa1d 	bl	800a054 <__mcmp>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	da4e      	bge.n	800acbc <_strtod_l+0x85c>
 800ac1e:	ea58 080a 	orrs.w	r8, r8, sl
 800ac22:	d174      	bne.n	800ad0e <_strtod_l+0x8ae>
 800ac24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d170      	bne.n	800ad0e <_strtod_l+0x8ae>
 800ac2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac30:	0d1b      	lsrs	r3, r3, #20
 800ac32:	051b      	lsls	r3, r3, #20
 800ac34:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac38:	d969      	bls.n	800ad0e <_strtod_l+0x8ae>
 800ac3a:	6963      	ldr	r3, [r4, #20]
 800ac3c:	b913      	cbnz	r3, 800ac44 <_strtod_l+0x7e4>
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	dd64      	ble.n	800ad0e <_strtod_l+0x8ae>
 800ac44:	4621      	mov	r1, r4
 800ac46:	2201      	movs	r2, #1
 800ac48:	9805      	ldr	r0, [sp, #20]
 800ac4a:	f7ff f997 	bl	8009f7c <__lshift>
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4604      	mov	r4, r0
 800ac52:	f7ff f9ff 	bl	800a054 <__mcmp>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	dd59      	ble.n	800ad0e <_strtod_l+0x8ae>
 800ac5a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac5e:	9a06      	ldr	r2, [sp, #24]
 800ac60:	0d1b      	lsrs	r3, r3, #20
 800ac62:	051b      	lsls	r3, r3, #20
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	d070      	beq.n	800ad4a <_strtod_l+0x8ea>
 800ac68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac6c:	d86d      	bhi.n	800ad4a <_strtod_l+0x8ea>
 800ac6e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ac72:	f67f ae99 	bls.w	800a9a8 <_strtod_l+0x548>
 800ac76:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800aca8 <_strtod_l+0x848>
 800ac7a:	ec4b ab16 	vmov	d6, sl, fp
 800ac7e:	4b0e      	ldr	r3, [pc, #56]	@ (800acb8 <_strtod_l+0x858>)
 800ac80:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ac84:	ee17 2a90 	vmov	r2, s15
 800ac88:	4013      	ands	r3, r2
 800ac8a:	ec5b ab17 	vmov	sl, fp, d7
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f47f ae01 	bne.w	800a896 <_strtod_l+0x436>
 800ac94:	9a05      	ldr	r2, [sp, #20]
 800ac96:	2322      	movs	r3, #34	@ 0x22
 800ac98:	6013      	str	r3, [r2, #0]
 800ac9a:	e5fc      	b.n	800a896 <_strtod_l+0x436>
 800ac9c:	f3af 8000 	nop.w
 800aca0:	ffc00000 	.word	0xffc00000
 800aca4:	41dfffff 	.word	0x41dfffff
 800aca8:	00000000 	.word	0x00000000
 800acac:	39500000 	.word	0x39500000
 800acb0:	0800ca48 	.word	0x0800ca48
 800acb4:	fffffc02 	.word	0xfffffc02
 800acb8:	7ff00000 	.word	0x7ff00000
 800acbc:	46d9      	mov	r9, fp
 800acbe:	d15d      	bne.n	800ad7c <_strtod_l+0x91c>
 800acc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acc4:	f1b8 0f00 	cmp.w	r8, #0
 800acc8:	d02a      	beq.n	800ad20 <_strtod_l+0x8c0>
 800acca:	4aab      	ldr	r2, [pc, #684]	@ (800af78 <_strtod_l+0xb18>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d12a      	bne.n	800ad26 <_strtod_l+0x8c6>
 800acd0:	9b06      	ldr	r3, [sp, #24]
 800acd2:	4652      	mov	r2, sl
 800acd4:	b1fb      	cbz	r3, 800ad16 <_strtod_l+0x8b6>
 800acd6:	4ba9      	ldr	r3, [pc, #676]	@ (800af7c <_strtod_l+0xb1c>)
 800acd8:	ea0b 0303 	and.w	r3, fp, r3
 800acdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ace0:	f04f 31ff 	mov.w	r1, #4294967295
 800ace4:	d81a      	bhi.n	800ad1c <_strtod_l+0x8bc>
 800ace6:	0d1b      	lsrs	r3, r3, #20
 800ace8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800acec:	fa01 f303 	lsl.w	r3, r1, r3
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d118      	bne.n	800ad26 <_strtod_l+0x8c6>
 800acf4:	4ba2      	ldr	r3, [pc, #648]	@ (800af80 <_strtod_l+0xb20>)
 800acf6:	4599      	cmp	r9, r3
 800acf8:	d102      	bne.n	800ad00 <_strtod_l+0x8a0>
 800acfa:	3201      	adds	r2, #1
 800acfc:	f43f adc0 	beq.w	800a880 <_strtod_l+0x420>
 800ad00:	4b9e      	ldr	r3, [pc, #632]	@ (800af7c <_strtod_l+0xb1c>)
 800ad02:	ea09 0303 	and.w	r3, r9, r3
 800ad06:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ad0a:	f04f 0a00 	mov.w	sl, #0
 800ad0e:	9b06      	ldr	r3, [sp, #24]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1b0      	bne.n	800ac76 <_strtod_l+0x816>
 800ad14:	e5bf      	b.n	800a896 <_strtod_l+0x436>
 800ad16:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1a:	e7e9      	b.n	800acf0 <_strtod_l+0x890>
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	e7e7      	b.n	800acf0 <_strtod_l+0x890>
 800ad20:	ea53 030a 	orrs.w	r3, r3, sl
 800ad24:	d099      	beq.n	800ac5a <_strtod_l+0x7fa>
 800ad26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad28:	b1c3      	cbz	r3, 800ad5c <_strtod_l+0x8fc>
 800ad2a:	ea13 0f09 	tst.w	r3, r9
 800ad2e:	d0ee      	beq.n	800ad0e <_strtod_l+0x8ae>
 800ad30:	9a06      	ldr	r2, [sp, #24]
 800ad32:	4650      	mov	r0, sl
 800ad34:	4659      	mov	r1, fp
 800ad36:	f1b8 0f00 	cmp.w	r8, #0
 800ad3a:	d013      	beq.n	800ad64 <_strtod_l+0x904>
 800ad3c:	f7ff fb75 	bl	800a42a <sulp>
 800ad40:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ad44:	ec5b ab17 	vmov	sl, fp, d7
 800ad48:	e7e1      	b.n	800ad0e <_strtod_l+0x8ae>
 800ad4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad56:	f04f 3aff 	mov.w	sl, #4294967295
 800ad5a:	e7d8      	b.n	800ad0e <_strtod_l+0x8ae>
 800ad5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad5e:	ea13 0f0a 	tst.w	r3, sl
 800ad62:	e7e4      	b.n	800ad2e <_strtod_l+0x8ce>
 800ad64:	f7ff fb61 	bl	800a42a <sulp>
 800ad68:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ad6c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ad70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad74:	ec5b ab10 	vmov	sl, fp, d0
 800ad78:	d1c9      	bne.n	800ad0e <_strtod_l+0x8ae>
 800ad7a:	e615      	b.n	800a9a8 <_strtod_l+0x548>
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f7ff fae0 	bl	800a344 <__ratio>
 800ad84:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ad88:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ad8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad90:	d85d      	bhi.n	800ae4e <_strtod_l+0x9ee>
 800ad92:	f1b8 0f00 	cmp.w	r8, #0
 800ad96:	d164      	bne.n	800ae62 <_strtod_l+0xa02>
 800ad98:	f1ba 0f00 	cmp.w	sl, #0
 800ad9c:	d14b      	bne.n	800ae36 <_strtod_l+0x9d6>
 800ad9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ada2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d160      	bne.n	800ae6c <_strtod_l+0xa0c>
 800adaa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800adae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800adb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb6:	d401      	bmi.n	800adbc <_strtod_l+0x95c>
 800adb8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800adbc:	eeb1 ab48 	vneg.f64	d10, d8
 800adc0:	486e      	ldr	r0, [pc, #440]	@ (800af7c <_strtod_l+0xb1c>)
 800adc2:	4970      	ldr	r1, [pc, #448]	@ (800af84 <_strtod_l+0xb24>)
 800adc4:	ea09 0700 	and.w	r7, r9, r0
 800adc8:	428f      	cmp	r7, r1
 800adca:	ec53 2b1a 	vmov	r2, r3, d10
 800adce:	d17d      	bne.n	800aecc <_strtod_l+0xa6c>
 800add0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800add4:	ec4b ab1c 	vmov	d12, sl, fp
 800add8:	eeb0 0b4c 	vmov.f64	d0, d12
 800addc:	f7ff f9ea 	bl	800a1b4 <__ulp>
 800ade0:	4866      	ldr	r0, [pc, #408]	@ (800af7c <_strtod_l+0xb1c>)
 800ade2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ade6:	ee1c 3a90 	vmov	r3, s25
 800adea:	4a67      	ldr	r2, [pc, #412]	@ (800af88 <_strtod_l+0xb28>)
 800adec:	ea03 0100 	and.w	r1, r3, r0
 800adf0:	4291      	cmp	r1, r2
 800adf2:	ec5b ab1c 	vmov	sl, fp, d12
 800adf6:	d93c      	bls.n	800ae72 <_strtod_l+0xa12>
 800adf8:	ee19 2a90 	vmov	r2, s19
 800adfc:	4b60      	ldr	r3, [pc, #384]	@ (800af80 <_strtod_l+0xb20>)
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d104      	bne.n	800ae0c <_strtod_l+0x9ac>
 800ae02:	ee19 3a10 	vmov	r3, s18
 800ae06:	3301      	adds	r3, #1
 800ae08:	f43f ad3a 	beq.w	800a880 <_strtod_l+0x420>
 800ae0c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800af80 <_strtod_l+0xb20>
 800ae10:	f04f 3aff 	mov.w	sl, #4294967295
 800ae14:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae16:	9805      	ldr	r0, [sp, #20]
 800ae18:	f7fe fe98 	bl	8009b4c <_Bfree>
 800ae1c:	9805      	ldr	r0, [sp, #20]
 800ae1e:	4631      	mov	r1, r6
 800ae20:	f7fe fe94 	bl	8009b4c <_Bfree>
 800ae24:	9805      	ldr	r0, [sp, #20]
 800ae26:	4629      	mov	r1, r5
 800ae28:	f7fe fe90 	bl	8009b4c <_Bfree>
 800ae2c:	9805      	ldr	r0, [sp, #20]
 800ae2e:	4621      	mov	r1, r4
 800ae30:	f7fe fe8c 	bl	8009b4c <_Bfree>
 800ae34:	e625      	b.n	800aa82 <_strtod_l+0x622>
 800ae36:	f1ba 0f01 	cmp.w	sl, #1
 800ae3a:	d103      	bne.n	800ae44 <_strtod_l+0x9e4>
 800ae3c:	f1bb 0f00 	cmp.w	fp, #0
 800ae40:	f43f adb2 	beq.w	800a9a8 <_strtod_l+0x548>
 800ae44:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ae48:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ae4c:	e7b8      	b.n	800adc0 <_strtod_l+0x960>
 800ae4e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ae52:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	d0af      	beq.n	800adbc <_strtod_l+0x95c>
 800ae5c:	eeb0 ab48 	vmov.f64	d10, d8
 800ae60:	e7ae      	b.n	800adc0 <_strtod_l+0x960>
 800ae62:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ae66:	eeb0 8b4a 	vmov.f64	d8, d10
 800ae6a:	e7a9      	b.n	800adc0 <_strtod_l+0x960>
 800ae6c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ae70:	e7a6      	b.n	800adc0 <_strtod_l+0x960>
 800ae72:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ae76:	9b06      	ldr	r3, [sp, #24]
 800ae78:	46d9      	mov	r9, fp
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1ca      	bne.n	800ae14 <_strtod_l+0x9b4>
 800ae7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae82:	0d1b      	lsrs	r3, r3, #20
 800ae84:	051b      	lsls	r3, r3, #20
 800ae86:	429f      	cmp	r7, r3
 800ae88:	d1c4      	bne.n	800ae14 <_strtod_l+0x9b4>
 800ae8a:	ec51 0b18 	vmov	r0, r1, d8
 800ae8e:	f7f5 fc53 	bl	8000738 <__aeabi_d2lz>
 800ae92:	f7f5 fc0b 	bl	80006ac <__aeabi_l2d>
 800ae96:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ae9a:	ec41 0b17 	vmov	d7, r0, r1
 800ae9e:	ea49 090a 	orr.w	r9, r9, sl
 800aea2:	ea59 0908 	orrs.w	r9, r9, r8
 800aea6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800aeaa:	d03c      	beq.n	800af26 <_strtod_l+0xac6>
 800aeac:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800af60 <_strtod_l+0xb00>
 800aeb0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb8:	f53f aced 	bmi.w	800a896 <_strtod_l+0x436>
 800aebc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800af68 <_strtod_l+0xb08>
 800aec0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec8:	dda4      	ble.n	800ae14 <_strtod_l+0x9b4>
 800aeca:	e4e4      	b.n	800a896 <_strtod_l+0x436>
 800aecc:	9906      	ldr	r1, [sp, #24]
 800aece:	b1e1      	cbz	r1, 800af0a <_strtod_l+0xaaa>
 800aed0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800aed4:	d819      	bhi.n	800af0a <_strtod_l+0xaaa>
 800aed6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800aeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aede:	d811      	bhi.n	800af04 <_strtod_l+0xaa4>
 800aee0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800aee4:	ee18 3a10 	vmov	r3, s16
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	bf38      	it	cc
 800aeec:	2301      	movcc	r3, #1
 800aeee:	ee08 3a10 	vmov	s16, r3
 800aef2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800aef6:	f1b8 0f00 	cmp.w	r8, #0
 800aefa:	d111      	bne.n	800af20 <_strtod_l+0xac0>
 800aefc:	eeb1 7b48 	vneg.f64	d7, d8
 800af00:	ec53 2b17 	vmov	r2, r3, d7
 800af04:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800af08:	1bcb      	subs	r3, r1, r7
 800af0a:	eeb0 0b49 	vmov.f64	d0, d9
 800af0e:	ec43 2b1a 	vmov	d10, r2, r3
 800af12:	f7ff f94f 	bl	800a1b4 <__ulp>
 800af16:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800af1a:	ec5b ab19 	vmov	sl, fp, d9
 800af1e:	e7aa      	b.n	800ae76 <_strtod_l+0xa16>
 800af20:	eeb0 7b48 	vmov.f64	d7, d8
 800af24:	e7ec      	b.n	800af00 <_strtod_l+0xaa0>
 800af26:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800af70 <_strtod_l+0xb10>
 800af2a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800af2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af32:	f57f af6f 	bpl.w	800ae14 <_strtod_l+0x9b4>
 800af36:	e4ae      	b.n	800a896 <_strtod_l+0x436>
 800af38:	2300      	movs	r3, #0
 800af3a:	9308      	str	r3, [sp, #32]
 800af3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	f7ff bacc 	b.w	800a4de <_strtod_l+0x7e>
 800af46:	2a65      	cmp	r2, #101	@ 0x65
 800af48:	f43f abbc 	beq.w	800a6c4 <_strtod_l+0x264>
 800af4c:	2a45      	cmp	r2, #69	@ 0x45
 800af4e:	f43f abb9 	beq.w	800a6c4 <_strtod_l+0x264>
 800af52:	2301      	movs	r3, #1
 800af54:	9306      	str	r3, [sp, #24]
 800af56:	f7ff bbf0 	b.w	800a73a <_strtod_l+0x2da>
 800af5a:	bf00      	nop
 800af5c:	f3af 8000 	nop.w
 800af60:	94a03595 	.word	0x94a03595
 800af64:	3fdfffff 	.word	0x3fdfffff
 800af68:	35afe535 	.word	0x35afe535
 800af6c:	3fe00000 	.word	0x3fe00000
 800af70:	94a03595 	.word	0x94a03595
 800af74:	3fcfffff 	.word	0x3fcfffff
 800af78:	000fffff 	.word	0x000fffff
 800af7c:	7ff00000 	.word	0x7ff00000
 800af80:	7fefffff 	.word	0x7fefffff
 800af84:	7fe00000 	.word	0x7fe00000
 800af88:	7c9fffff 	.word	0x7c9fffff

0800af8c <_strtod_r>:
 800af8c:	4b01      	ldr	r3, [pc, #4]	@ (800af94 <_strtod_r+0x8>)
 800af8e:	f7ff ba67 	b.w	800a460 <_strtod_l>
 800af92:	bf00      	nop
 800af94:	2400006c 	.word	0x2400006c

0800af98 <_strtol_l.constprop.0>:
 800af98:	2b24      	cmp	r3, #36	@ 0x24
 800af9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af9e:	4686      	mov	lr, r0
 800afa0:	4690      	mov	r8, r2
 800afa2:	d801      	bhi.n	800afa8 <_strtol_l.constprop.0+0x10>
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d106      	bne.n	800afb6 <_strtol_l.constprop.0+0x1e>
 800afa8:	f7fd fe70 	bl	8008c8c <__errno>
 800afac:	2316      	movs	r3, #22
 800afae:	6003      	str	r3, [r0, #0]
 800afb0:	2000      	movs	r0, #0
 800afb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb6:	4834      	ldr	r0, [pc, #208]	@ (800b088 <_strtol_l.constprop.0+0xf0>)
 800afb8:	460d      	mov	r5, r1
 800afba:	462a      	mov	r2, r5
 800afbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afc0:	5d06      	ldrb	r6, [r0, r4]
 800afc2:	f016 0608 	ands.w	r6, r6, #8
 800afc6:	d1f8      	bne.n	800afba <_strtol_l.constprop.0+0x22>
 800afc8:	2c2d      	cmp	r4, #45	@ 0x2d
 800afca:	d12d      	bne.n	800b028 <_strtol_l.constprop.0+0x90>
 800afcc:	782c      	ldrb	r4, [r5, #0]
 800afce:	2601      	movs	r6, #1
 800afd0:	1c95      	adds	r5, r2, #2
 800afd2:	f033 0210 	bics.w	r2, r3, #16
 800afd6:	d109      	bne.n	800afec <_strtol_l.constprop.0+0x54>
 800afd8:	2c30      	cmp	r4, #48	@ 0x30
 800afda:	d12a      	bne.n	800b032 <_strtol_l.constprop.0+0x9a>
 800afdc:	782a      	ldrb	r2, [r5, #0]
 800afde:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800afe2:	2a58      	cmp	r2, #88	@ 0x58
 800afe4:	d125      	bne.n	800b032 <_strtol_l.constprop.0+0x9a>
 800afe6:	786c      	ldrb	r4, [r5, #1]
 800afe8:	2310      	movs	r3, #16
 800afea:	3502      	adds	r5, #2
 800afec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aff0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aff4:	2200      	movs	r2, #0
 800aff6:	fbbc f9f3 	udiv	r9, ip, r3
 800affa:	4610      	mov	r0, r2
 800affc:	fb03 ca19 	mls	sl, r3, r9, ip
 800b000:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b004:	2f09      	cmp	r7, #9
 800b006:	d81b      	bhi.n	800b040 <_strtol_l.constprop.0+0xa8>
 800b008:	463c      	mov	r4, r7
 800b00a:	42a3      	cmp	r3, r4
 800b00c:	dd27      	ble.n	800b05e <_strtol_l.constprop.0+0xc6>
 800b00e:	1c57      	adds	r7, r2, #1
 800b010:	d007      	beq.n	800b022 <_strtol_l.constprop.0+0x8a>
 800b012:	4581      	cmp	r9, r0
 800b014:	d320      	bcc.n	800b058 <_strtol_l.constprop.0+0xc0>
 800b016:	d101      	bne.n	800b01c <_strtol_l.constprop.0+0x84>
 800b018:	45a2      	cmp	sl, r4
 800b01a:	db1d      	blt.n	800b058 <_strtol_l.constprop.0+0xc0>
 800b01c:	fb00 4003 	mla	r0, r0, r3, r4
 800b020:	2201      	movs	r2, #1
 800b022:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b026:	e7eb      	b.n	800b000 <_strtol_l.constprop.0+0x68>
 800b028:	2c2b      	cmp	r4, #43	@ 0x2b
 800b02a:	bf04      	itt	eq
 800b02c:	782c      	ldrbeq	r4, [r5, #0]
 800b02e:	1c95      	addeq	r5, r2, #2
 800b030:	e7cf      	b.n	800afd2 <_strtol_l.constprop.0+0x3a>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1da      	bne.n	800afec <_strtol_l.constprop.0+0x54>
 800b036:	2c30      	cmp	r4, #48	@ 0x30
 800b038:	bf0c      	ite	eq
 800b03a:	2308      	moveq	r3, #8
 800b03c:	230a      	movne	r3, #10
 800b03e:	e7d5      	b.n	800afec <_strtol_l.constprop.0+0x54>
 800b040:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b044:	2f19      	cmp	r7, #25
 800b046:	d801      	bhi.n	800b04c <_strtol_l.constprop.0+0xb4>
 800b048:	3c37      	subs	r4, #55	@ 0x37
 800b04a:	e7de      	b.n	800b00a <_strtol_l.constprop.0+0x72>
 800b04c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b050:	2f19      	cmp	r7, #25
 800b052:	d804      	bhi.n	800b05e <_strtol_l.constprop.0+0xc6>
 800b054:	3c57      	subs	r4, #87	@ 0x57
 800b056:	e7d8      	b.n	800b00a <_strtol_l.constprop.0+0x72>
 800b058:	f04f 32ff 	mov.w	r2, #4294967295
 800b05c:	e7e1      	b.n	800b022 <_strtol_l.constprop.0+0x8a>
 800b05e:	1c53      	adds	r3, r2, #1
 800b060:	d108      	bne.n	800b074 <_strtol_l.constprop.0+0xdc>
 800b062:	2322      	movs	r3, #34	@ 0x22
 800b064:	f8ce 3000 	str.w	r3, [lr]
 800b068:	4660      	mov	r0, ip
 800b06a:	f1b8 0f00 	cmp.w	r8, #0
 800b06e:	d0a0      	beq.n	800afb2 <_strtol_l.constprop.0+0x1a>
 800b070:	1e69      	subs	r1, r5, #1
 800b072:	e006      	b.n	800b082 <_strtol_l.constprop.0+0xea>
 800b074:	b106      	cbz	r6, 800b078 <_strtol_l.constprop.0+0xe0>
 800b076:	4240      	negs	r0, r0
 800b078:	f1b8 0f00 	cmp.w	r8, #0
 800b07c:	d099      	beq.n	800afb2 <_strtol_l.constprop.0+0x1a>
 800b07e:	2a00      	cmp	r2, #0
 800b080:	d1f6      	bne.n	800b070 <_strtol_l.constprop.0+0xd8>
 800b082:	f8c8 1000 	str.w	r1, [r8]
 800b086:	e794      	b.n	800afb2 <_strtol_l.constprop.0+0x1a>
 800b088:	0800ca71 	.word	0x0800ca71

0800b08c <_strtol_r>:
 800b08c:	f7ff bf84 	b.w	800af98 <_strtol_l.constprop.0>

0800b090 <__ssputs_r>:
 800b090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b094:	688e      	ldr	r6, [r1, #8]
 800b096:	461f      	mov	r7, r3
 800b098:	42be      	cmp	r6, r7
 800b09a:	680b      	ldr	r3, [r1, #0]
 800b09c:	4682      	mov	sl, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	4690      	mov	r8, r2
 800b0a2:	d82d      	bhi.n	800b100 <__ssputs_r+0x70>
 800b0a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0ac:	d026      	beq.n	800b0fc <__ssputs_r+0x6c>
 800b0ae:	6965      	ldr	r5, [r4, #20]
 800b0b0:	6909      	ldr	r1, [r1, #16]
 800b0b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0b6:	eba3 0901 	sub.w	r9, r3, r1
 800b0ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0be:	1c7b      	adds	r3, r7, #1
 800b0c0:	444b      	add	r3, r9
 800b0c2:	106d      	asrs	r5, r5, #1
 800b0c4:	429d      	cmp	r5, r3
 800b0c6:	bf38      	it	cc
 800b0c8:	461d      	movcc	r5, r3
 800b0ca:	0553      	lsls	r3, r2, #21
 800b0cc:	d527      	bpl.n	800b11e <__ssputs_r+0x8e>
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7fe fc70 	bl	80099b4 <_malloc_r>
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	b360      	cbz	r0, 800b132 <__ssputs_r+0xa2>
 800b0d8:	6921      	ldr	r1, [r4, #16]
 800b0da:	464a      	mov	r2, r9
 800b0dc:	f7fd fe03 	bl	8008ce6 <memcpy>
 800b0e0:	89a3      	ldrh	r3, [r4, #12]
 800b0e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b0e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	6126      	str	r6, [r4, #16]
 800b0ee:	6165      	str	r5, [r4, #20]
 800b0f0:	444e      	add	r6, r9
 800b0f2:	eba5 0509 	sub.w	r5, r5, r9
 800b0f6:	6026      	str	r6, [r4, #0]
 800b0f8:	60a5      	str	r5, [r4, #8]
 800b0fa:	463e      	mov	r6, r7
 800b0fc:	42be      	cmp	r6, r7
 800b0fe:	d900      	bls.n	800b102 <__ssputs_r+0x72>
 800b100:	463e      	mov	r6, r7
 800b102:	6820      	ldr	r0, [r4, #0]
 800b104:	4632      	mov	r2, r6
 800b106:	4641      	mov	r1, r8
 800b108:	f000 fb9c 	bl	800b844 <memmove>
 800b10c:	68a3      	ldr	r3, [r4, #8]
 800b10e:	1b9b      	subs	r3, r3, r6
 800b110:	60a3      	str	r3, [r4, #8]
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	4433      	add	r3, r6
 800b116:	6023      	str	r3, [r4, #0]
 800b118:	2000      	movs	r0, #0
 800b11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11e:	462a      	mov	r2, r5
 800b120:	f000 ff53 	bl	800bfca <_realloc_r>
 800b124:	4606      	mov	r6, r0
 800b126:	2800      	cmp	r0, #0
 800b128:	d1e0      	bne.n	800b0ec <__ssputs_r+0x5c>
 800b12a:	6921      	ldr	r1, [r4, #16]
 800b12c:	4650      	mov	r0, sl
 800b12e:	f7fe fbcd 	bl	80098cc <_free_r>
 800b132:	230c      	movs	r3, #12
 800b134:	f8ca 3000 	str.w	r3, [sl]
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	e7e9      	b.n	800b11a <__ssputs_r+0x8a>
	...

0800b148 <_svfiprintf_r>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	4698      	mov	r8, r3
 800b14e:	898b      	ldrh	r3, [r1, #12]
 800b150:	061b      	lsls	r3, r3, #24
 800b152:	b09d      	sub	sp, #116	@ 0x74
 800b154:	4607      	mov	r7, r0
 800b156:	460d      	mov	r5, r1
 800b158:	4614      	mov	r4, r2
 800b15a:	d510      	bpl.n	800b17e <_svfiprintf_r+0x36>
 800b15c:	690b      	ldr	r3, [r1, #16]
 800b15e:	b973      	cbnz	r3, 800b17e <_svfiprintf_r+0x36>
 800b160:	2140      	movs	r1, #64	@ 0x40
 800b162:	f7fe fc27 	bl	80099b4 <_malloc_r>
 800b166:	6028      	str	r0, [r5, #0]
 800b168:	6128      	str	r0, [r5, #16]
 800b16a:	b930      	cbnz	r0, 800b17a <_svfiprintf_r+0x32>
 800b16c:	230c      	movs	r3, #12
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	f04f 30ff 	mov.w	r0, #4294967295
 800b174:	b01d      	add	sp, #116	@ 0x74
 800b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17a:	2340      	movs	r3, #64	@ 0x40
 800b17c:	616b      	str	r3, [r5, #20]
 800b17e:	2300      	movs	r3, #0
 800b180:	9309      	str	r3, [sp, #36]	@ 0x24
 800b182:	2320      	movs	r3, #32
 800b184:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b188:	f8cd 800c 	str.w	r8, [sp, #12]
 800b18c:	2330      	movs	r3, #48	@ 0x30
 800b18e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b32c <_svfiprintf_r+0x1e4>
 800b192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b196:	f04f 0901 	mov.w	r9, #1
 800b19a:	4623      	mov	r3, r4
 800b19c:	469a      	mov	sl, r3
 800b19e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a2:	b10a      	cbz	r2, 800b1a8 <_svfiprintf_r+0x60>
 800b1a4:	2a25      	cmp	r2, #37	@ 0x25
 800b1a6:	d1f9      	bne.n	800b19c <_svfiprintf_r+0x54>
 800b1a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ac:	d00b      	beq.n	800b1c6 <_svfiprintf_r+0x7e>
 800b1ae:	465b      	mov	r3, fp
 800b1b0:	4622      	mov	r2, r4
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	f7ff ff6b 	bl	800b090 <__ssputs_r>
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	f000 80a7 	beq.w	800b30e <_svfiprintf_r+0x1c6>
 800b1c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1c2:	445a      	add	r2, fp
 800b1c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 809f 	beq.w	800b30e <_svfiprintf_r+0x1c6>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1da:	f10a 0a01 	add.w	sl, sl, #1
 800b1de:	9304      	str	r3, [sp, #16]
 800b1e0:	9307      	str	r3, [sp, #28]
 800b1e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1e8:	4654      	mov	r4, sl
 800b1ea:	2205      	movs	r2, #5
 800b1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f0:	484e      	ldr	r0, [pc, #312]	@ (800b32c <_svfiprintf_r+0x1e4>)
 800b1f2:	f7f5 f875 	bl	80002e0 <memchr>
 800b1f6:	9a04      	ldr	r2, [sp, #16]
 800b1f8:	b9d8      	cbnz	r0, 800b232 <_svfiprintf_r+0xea>
 800b1fa:	06d0      	lsls	r0, r2, #27
 800b1fc:	bf44      	itt	mi
 800b1fe:	2320      	movmi	r3, #32
 800b200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b204:	0711      	lsls	r1, r2, #28
 800b206:	bf44      	itt	mi
 800b208:	232b      	movmi	r3, #43	@ 0x2b
 800b20a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b20e:	f89a 3000 	ldrb.w	r3, [sl]
 800b212:	2b2a      	cmp	r3, #42	@ 0x2a
 800b214:	d015      	beq.n	800b242 <_svfiprintf_r+0xfa>
 800b216:	9a07      	ldr	r2, [sp, #28]
 800b218:	4654      	mov	r4, sl
 800b21a:	2000      	movs	r0, #0
 800b21c:	f04f 0c0a 	mov.w	ip, #10
 800b220:	4621      	mov	r1, r4
 800b222:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b226:	3b30      	subs	r3, #48	@ 0x30
 800b228:	2b09      	cmp	r3, #9
 800b22a:	d94b      	bls.n	800b2c4 <_svfiprintf_r+0x17c>
 800b22c:	b1b0      	cbz	r0, 800b25c <_svfiprintf_r+0x114>
 800b22e:	9207      	str	r2, [sp, #28]
 800b230:	e014      	b.n	800b25c <_svfiprintf_r+0x114>
 800b232:	eba0 0308 	sub.w	r3, r0, r8
 800b236:	fa09 f303 	lsl.w	r3, r9, r3
 800b23a:	4313      	orrs	r3, r2
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	46a2      	mov	sl, r4
 800b240:	e7d2      	b.n	800b1e8 <_svfiprintf_r+0xa0>
 800b242:	9b03      	ldr	r3, [sp, #12]
 800b244:	1d19      	adds	r1, r3, #4
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	9103      	str	r1, [sp, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfbb      	ittet	lt
 800b24e:	425b      	neglt	r3, r3
 800b250:	f042 0202 	orrlt.w	r2, r2, #2
 800b254:	9307      	strge	r3, [sp, #28]
 800b256:	9307      	strlt	r3, [sp, #28]
 800b258:	bfb8      	it	lt
 800b25a:	9204      	strlt	r2, [sp, #16]
 800b25c:	7823      	ldrb	r3, [r4, #0]
 800b25e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b260:	d10a      	bne.n	800b278 <_svfiprintf_r+0x130>
 800b262:	7863      	ldrb	r3, [r4, #1]
 800b264:	2b2a      	cmp	r3, #42	@ 0x2a
 800b266:	d132      	bne.n	800b2ce <_svfiprintf_r+0x186>
 800b268:	9b03      	ldr	r3, [sp, #12]
 800b26a:	1d1a      	adds	r2, r3, #4
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	9203      	str	r2, [sp, #12]
 800b270:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b274:	3402      	adds	r4, #2
 800b276:	9305      	str	r3, [sp, #20]
 800b278:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b33c <_svfiprintf_r+0x1f4>
 800b27c:	7821      	ldrb	r1, [r4, #0]
 800b27e:	2203      	movs	r2, #3
 800b280:	4650      	mov	r0, sl
 800b282:	f7f5 f82d 	bl	80002e0 <memchr>
 800b286:	b138      	cbz	r0, 800b298 <_svfiprintf_r+0x150>
 800b288:	9b04      	ldr	r3, [sp, #16]
 800b28a:	eba0 000a 	sub.w	r0, r0, sl
 800b28e:	2240      	movs	r2, #64	@ 0x40
 800b290:	4082      	lsls	r2, r0
 800b292:	4313      	orrs	r3, r2
 800b294:	3401      	adds	r4, #1
 800b296:	9304      	str	r3, [sp, #16]
 800b298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b29c:	4824      	ldr	r0, [pc, #144]	@ (800b330 <_svfiprintf_r+0x1e8>)
 800b29e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2a2:	2206      	movs	r2, #6
 800b2a4:	f7f5 f81c 	bl	80002e0 <memchr>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d036      	beq.n	800b31a <_svfiprintf_r+0x1d2>
 800b2ac:	4b21      	ldr	r3, [pc, #132]	@ (800b334 <_svfiprintf_r+0x1ec>)
 800b2ae:	bb1b      	cbnz	r3, 800b2f8 <_svfiprintf_r+0x1b0>
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	3307      	adds	r3, #7
 800b2b4:	f023 0307 	bic.w	r3, r3, #7
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	9303      	str	r3, [sp, #12]
 800b2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2be:	4433      	add	r3, r6
 800b2c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2c2:	e76a      	b.n	800b19a <_svfiprintf_r+0x52>
 800b2c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	2001      	movs	r0, #1
 800b2cc:	e7a8      	b.n	800b220 <_svfiprintf_r+0xd8>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	3401      	adds	r4, #1
 800b2d2:	9305      	str	r3, [sp, #20]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	f04f 0c0a 	mov.w	ip, #10
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2e0:	3a30      	subs	r2, #48	@ 0x30
 800b2e2:	2a09      	cmp	r2, #9
 800b2e4:	d903      	bls.n	800b2ee <_svfiprintf_r+0x1a6>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0c6      	beq.n	800b278 <_svfiprintf_r+0x130>
 800b2ea:	9105      	str	r1, [sp, #20]
 800b2ec:	e7c4      	b.n	800b278 <_svfiprintf_r+0x130>
 800b2ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e7f0      	b.n	800b2da <_svfiprintf_r+0x192>
 800b2f8:	ab03      	add	r3, sp, #12
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	462a      	mov	r2, r5
 800b2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b338 <_svfiprintf_r+0x1f0>)
 800b300:	a904      	add	r1, sp, #16
 800b302:	4638      	mov	r0, r7
 800b304:	f7fc fd84 	bl	8007e10 <_printf_float>
 800b308:	1c42      	adds	r2, r0, #1
 800b30a:	4606      	mov	r6, r0
 800b30c:	d1d6      	bne.n	800b2bc <_svfiprintf_r+0x174>
 800b30e:	89ab      	ldrh	r3, [r5, #12]
 800b310:	065b      	lsls	r3, r3, #25
 800b312:	f53f af2d 	bmi.w	800b170 <_svfiprintf_r+0x28>
 800b316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b318:	e72c      	b.n	800b174 <_svfiprintf_r+0x2c>
 800b31a:	ab03      	add	r3, sp, #12
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	462a      	mov	r2, r5
 800b320:	4b05      	ldr	r3, [pc, #20]	@ (800b338 <_svfiprintf_r+0x1f0>)
 800b322:	a904      	add	r1, sp, #16
 800b324:	4638      	mov	r0, r7
 800b326:	f7fc fffb 	bl	8008320 <_printf_i>
 800b32a:	e7ed      	b.n	800b308 <_svfiprintf_r+0x1c0>
 800b32c:	0800cb71 	.word	0x0800cb71
 800b330:	0800cb7b 	.word	0x0800cb7b
 800b334:	08007e11 	.word	0x08007e11
 800b338:	0800b091 	.word	0x0800b091
 800b33c:	0800cb77 	.word	0x0800cb77

0800b340 <__sfputc_r>:
 800b340:	6893      	ldr	r3, [r2, #8]
 800b342:	3b01      	subs	r3, #1
 800b344:	2b00      	cmp	r3, #0
 800b346:	b410      	push	{r4}
 800b348:	6093      	str	r3, [r2, #8]
 800b34a:	da08      	bge.n	800b35e <__sfputc_r+0x1e>
 800b34c:	6994      	ldr	r4, [r2, #24]
 800b34e:	42a3      	cmp	r3, r4
 800b350:	db01      	blt.n	800b356 <__sfputc_r+0x16>
 800b352:	290a      	cmp	r1, #10
 800b354:	d103      	bne.n	800b35e <__sfputc_r+0x1e>
 800b356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b35a:	f000 b9df 	b.w	800b71c <__swbuf_r>
 800b35e:	6813      	ldr	r3, [r2, #0]
 800b360:	1c58      	adds	r0, r3, #1
 800b362:	6010      	str	r0, [r2, #0]
 800b364:	7019      	strb	r1, [r3, #0]
 800b366:	4608      	mov	r0, r1
 800b368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <__sfputs_r>:
 800b36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b370:	4606      	mov	r6, r0
 800b372:	460f      	mov	r7, r1
 800b374:	4614      	mov	r4, r2
 800b376:	18d5      	adds	r5, r2, r3
 800b378:	42ac      	cmp	r4, r5
 800b37a:	d101      	bne.n	800b380 <__sfputs_r+0x12>
 800b37c:	2000      	movs	r0, #0
 800b37e:	e007      	b.n	800b390 <__sfputs_r+0x22>
 800b380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b384:	463a      	mov	r2, r7
 800b386:	4630      	mov	r0, r6
 800b388:	f7ff ffda 	bl	800b340 <__sfputc_r>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d1f3      	bne.n	800b378 <__sfputs_r+0xa>
 800b390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b394 <_vfiprintf_r>:
 800b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b398:	460d      	mov	r5, r1
 800b39a:	b09d      	sub	sp, #116	@ 0x74
 800b39c:	4614      	mov	r4, r2
 800b39e:	4698      	mov	r8, r3
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	b118      	cbz	r0, 800b3ac <_vfiprintf_r+0x18>
 800b3a4:	6a03      	ldr	r3, [r0, #32]
 800b3a6:	b90b      	cbnz	r3, 800b3ac <_vfiprintf_r+0x18>
 800b3a8:	f7fd fb72 	bl	8008a90 <__sinit>
 800b3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3ae:	07d9      	lsls	r1, r3, #31
 800b3b0:	d405      	bmi.n	800b3be <_vfiprintf_r+0x2a>
 800b3b2:	89ab      	ldrh	r3, [r5, #12]
 800b3b4:	059a      	lsls	r2, r3, #22
 800b3b6:	d402      	bmi.n	800b3be <_vfiprintf_r+0x2a>
 800b3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ba:	f7fd fc92 	bl	8008ce2 <__retarget_lock_acquire_recursive>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	071b      	lsls	r3, r3, #28
 800b3c2:	d501      	bpl.n	800b3c8 <_vfiprintf_r+0x34>
 800b3c4:	692b      	ldr	r3, [r5, #16]
 800b3c6:	b99b      	cbnz	r3, 800b3f0 <_vfiprintf_r+0x5c>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f000 f9e4 	bl	800b798 <__swsetup_r>
 800b3d0:	b170      	cbz	r0, 800b3f0 <_vfiprintf_r+0x5c>
 800b3d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3d4:	07dc      	lsls	r4, r3, #31
 800b3d6:	d504      	bpl.n	800b3e2 <_vfiprintf_r+0x4e>
 800b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3dc:	b01d      	add	sp, #116	@ 0x74
 800b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e2:	89ab      	ldrh	r3, [r5, #12]
 800b3e4:	0598      	lsls	r0, r3, #22
 800b3e6:	d4f7      	bmi.n	800b3d8 <_vfiprintf_r+0x44>
 800b3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ea:	f7fd fc7b 	bl	8008ce4 <__retarget_lock_release_recursive>
 800b3ee:	e7f3      	b.n	800b3d8 <_vfiprintf_r+0x44>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f4:	2320      	movs	r3, #32
 800b3f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3fe:	2330      	movs	r3, #48	@ 0x30
 800b400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5b0 <_vfiprintf_r+0x21c>
 800b404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b408:	f04f 0901 	mov.w	r9, #1
 800b40c:	4623      	mov	r3, r4
 800b40e:	469a      	mov	sl, r3
 800b410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b414:	b10a      	cbz	r2, 800b41a <_vfiprintf_r+0x86>
 800b416:	2a25      	cmp	r2, #37	@ 0x25
 800b418:	d1f9      	bne.n	800b40e <_vfiprintf_r+0x7a>
 800b41a:	ebba 0b04 	subs.w	fp, sl, r4
 800b41e:	d00b      	beq.n	800b438 <_vfiprintf_r+0xa4>
 800b420:	465b      	mov	r3, fp
 800b422:	4622      	mov	r2, r4
 800b424:	4629      	mov	r1, r5
 800b426:	4630      	mov	r0, r6
 800b428:	f7ff ffa1 	bl	800b36e <__sfputs_r>
 800b42c:	3001      	adds	r0, #1
 800b42e:	f000 80a7 	beq.w	800b580 <_vfiprintf_r+0x1ec>
 800b432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b434:	445a      	add	r2, fp
 800b436:	9209      	str	r2, [sp, #36]	@ 0x24
 800b438:	f89a 3000 	ldrb.w	r3, [sl]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 809f 	beq.w	800b580 <_vfiprintf_r+0x1ec>
 800b442:	2300      	movs	r3, #0
 800b444:	f04f 32ff 	mov.w	r2, #4294967295
 800b448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b44c:	f10a 0a01 	add.w	sl, sl, #1
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	9307      	str	r3, [sp, #28]
 800b454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b458:	931a      	str	r3, [sp, #104]	@ 0x68
 800b45a:	4654      	mov	r4, sl
 800b45c:	2205      	movs	r2, #5
 800b45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b462:	4853      	ldr	r0, [pc, #332]	@ (800b5b0 <_vfiprintf_r+0x21c>)
 800b464:	f7f4 ff3c 	bl	80002e0 <memchr>
 800b468:	9a04      	ldr	r2, [sp, #16]
 800b46a:	b9d8      	cbnz	r0, 800b4a4 <_vfiprintf_r+0x110>
 800b46c:	06d1      	lsls	r1, r2, #27
 800b46e:	bf44      	itt	mi
 800b470:	2320      	movmi	r3, #32
 800b472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b476:	0713      	lsls	r3, r2, #28
 800b478:	bf44      	itt	mi
 800b47a:	232b      	movmi	r3, #43	@ 0x2b
 800b47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b480:	f89a 3000 	ldrb.w	r3, [sl]
 800b484:	2b2a      	cmp	r3, #42	@ 0x2a
 800b486:	d015      	beq.n	800b4b4 <_vfiprintf_r+0x120>
 800b488:	9a07      	ldr	r2, [sp, #28]
 800b48a:	4654      	mov	r4, sl
 800b48c:	2000      	movs	r0, #0
 800b48e:	f04f 0c0a 	mov.w	ip, #10
 800b492:	4621      	mov	r1, r4
 800b494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b498:	3b30      	subs	r3, #48	@ 0x30
 800b49a:	2b09      	cmp	r3, #9
 800b49c:	d94b      	bls.n	800b536 <_vfiprintf_r+0x1a2>
 800b49e:	b1b0      	cbz	r0, 800b4ce <_vfiprintf_r+0x13a>
 800b4a0:	9207      	str	r2, [sp, #28]
 800b4a2:	e014      	b.n	800b4ce <_vfiprintf_r+0x13a>
 800b4a4:	eba0 0308 	sub.w	r3, r0, r8
 800b4a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	9304      	str	r3, [sp, #16]
 800b4b0:	46a2      	mov	sl, r4
 800b4b2:	e7d2      	b.n	800b45a <_vfiprintf_r+0xc6>
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	1d19      	adds	r1, r3, #4
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	9103      	str	r1, [sp, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	bfbb      	ittet	lt
 800b4c0:	425b      	neglt	r3, r3
 800b4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b4c6:	9307      	strge	r3, [sp, #28]
 800b4c8:	9307      	strlt	r3, [sp, #28]
 800b4ca:	bfb8      	it	lt
 800b4cc:	9204      	strlt	r2, [sp, #16]
 800b4ce:	7823      	ldrb	r3, [r4, #0]
 800b4d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4d2:	d10a      	bne.n	800b4ea <_vfiprintf_r+0x156>
 800b4d4:	7863      	ldrb	r3, [r4, #1]
 800b4d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4d8:	d132      	bne.n	800b540 <_vfiprintf_r+0x1ac>
 800b4da:	9b03      	ldr	r3, [sp, #12]
 800b4dc:	1d1a      	adds	r2, r3, #4
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	9203      	str	r2, [sp, #12]
 800b4e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4e6:	3402      	adds	r4, #2
 800b4e8:	9305      	str	r3, [sp, #20]
 800b4ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5c0 <_vfiprintf_r+0x22c>
 800b4ee:	7821      	ldrb	r1, [r4, #0]
 800b4f0:	2203      	movs	r2, #3
 800b4f2:	4650      	mov	r0, sl
 800b4f4:	f7f4 fef4 	bl	80002e0 <memchr>
 800b4f8:	b138      	cbz	r0, 800b50a <_vfiprintf_r+0x176>
 800b4fa:	9b04      	ldr	r3, [sp, #16]
 800b4fc:	eba0 000a 	sub.w	r0, r0, sl
 800b500:	2240      	movs	r2, #64	@ 0x40
 800b502:	4082      	lsls	r2, r0
 800b504:	4313      	orrs	r3, r2
 800b506:	3401      	adds	r4, #1
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50e:	4829      	ldr	r0, [pc, #164]	@ (800b5b4 <_vfiprintf_r+0x220>)
 800b510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b514:	2206      	movs	r2, #6
 800b516:	f7f4 fee3 	bl	80002e0 <memchr>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d03f      	beq.n	800b59e <_vfiprintf_r+0x20a>
 800b51e:	4b26      	ldr	r3, [pc, #152]	@ (800b5b8 <_vfiprintf_r+0x224>)
 800b520:	bb1b      	cbnz	r3, 800b56a <_vfiprintf_r+0x1d6>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	3307      	adds	r3, #7
 800b526:	f023 0307 	bic.w	r3, r3, #7
 800b52a:	3308      	adds	r3, #8
 800b52c:	9303      	str	r3, [sp, #12]
 800b52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b530:	443b      	add	r3, r7
 800b532:	9309      	str	r3, [sp, #36]	@ 0x24
 800b534:	e76a      	b.n	800b40c <_vfiprintf_r+0x78>
 800b536:	fb0c 3202 	mla	r2, ip, r2, r3
 800b53a:	460c      	mov	r4, r1
 800b53c:	2001      	movs	r0, #1
 800b53e:	e7a8      	b.n	800b492 <_vfiprintf_r+0xfe>
 800b540:	2300      	movs	r3, #0
 800b542:	3401      	adds	r4, #1
 800b544:	9305      	str	r3, [sp, #20]
 800b546:	4619      	mov	r1, r3
 800b548:	f04f 0c0a 	mov.w	ip, #10
 800b54c:	4620      	mov	r0, r4
 800b54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b552:	3a30      	subs	r2, #48	@ 0x30
 800b554:	2a09      	cmp	r2, #9
 800b556:	d903      	bls.n	800b560 <_vfiprintf_r+0x1cc>
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0c6      	beq.n	800b4ea <_vfiprintf_r+0x156>
 800b55c:	9105      	str	r1, [sp, #20]
 800b55e:	e7c4      	b.n	800b4ea <_vfiprintf_r+0x156>
 800b560:	fb0c 2101 	mla	r1, ip, r1, r2
 800b564:	4604      	mov	r4, r0
 800b566:	2301      	movs	r3, #1
 800b568:	e7f0      	b.n	800b54c <_vfiprintf_r+0x1b8>
 800b56a:	ab03      	add	r3, sp, #12
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	462a      	mov	r2, r5
 800b570:	4b12      	ldr	r3, [pc, #72]	@ (800b5bc <_vfiprintf_r+0x228>)
 800b572:	a904      	add	r1, sp, #16
 800b574:	4630      	mov	r0, r6
 800b576:	f7fc fc4b 	bl	8007e10 <_printf_float>
 800b57a:	4607      	mov	r7, r0
 800b57c:	1c78      	adds	r0, r7, #1
 800b57e:	d1d6      	bne.n	800b52e <_vfiprintf_r+0x19a>
 800b580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b582:	07d9      	lsls	r1, r3, #31
 800b584:	d405      	bmi.n	800b592 <_vfiprintf_r+0x1fe>
 800b586:	89ab      	ldrh	r3, [r5, #12]
 800b588:	059a      	lsls	r2, r3, #22
 800b58a:	d402      	bmi.n	800b592 <_vfiprintf_r+0x1fe>
 800b58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b58e:	f7fd fba9 	bl	8008ce4 <__retarget_lock_release_recursive>
 800b592:	89ab      	ldrh	r3, [r5, #12]
 800b594:	065b      	lsls	r3, r3, #25
 800b596:	f53f af1f 	bmi.w	800b3d8 <_vfiprintf_r+0x44>
 800b59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b59c:	e71e      	b.n	800b3dc <_vfiprintf_r+0x48>
 800b59e:	ab03      	add	r3, sp, #12
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4b05      	ldr	r3, [pc, #20]	@ (800b5bc <_vfiprintf_r+0x228>)
 800b5a6:	a904      	add	r1, sp, #16
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7fc feb9 	bl	8008320 <_printf_i>
 800b5ae:	e7e4      	b.n	800b57a <_vfiprintf_r+0x1e6>
 800b5b0:	0800cb71 	.word	0x0800cb71
 800b5b4:	0800cb7b 	.word	0x0800cb7b
 800b5b8:	08007e11 	.word	0x08007e11
 800b5bc:	0800b36f 	.word	0x0800b36f
 800b5c0:	0800cb77 	.word	0x0800cb77

0800b5c4 <__sflush_r>:
 800b5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5cc:	0716      	lsls	r6, r2, #28
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	d454      	bmi.n	800b67e <__sflush_r+0xba>
 800b5d4:	684b      	ldr	r3, [r1, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dc02      	bgt.n	800b5e0 <__sflush_r+0x1c>
 800b5da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dd48      	ble.n	800b672 <__sflush_r+0xae>
 800b5e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d045      	beq.n	800b672 <__sflush_r+0xae>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5ec:	682f      	ldr	r7, [r5, #0]
 800b5ee:	6a21      	ldr	r1, [r4, #32]
 800b5f0:	602b      	str	r3, [r5, #0]
 800b5f2:	d030      	beq.n	800b656 <__sflush_r+0x92>
 800b5f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	0759      	lsls	r1, r3, #29
 800b5fa:	d505      	bpl.n	800b608 <__sflush_r+0x44>
 800b5fc:	6863      	ldr	r3, [r4, #4]
 800b5fe:	1ad2      	subs	r2, r2, r3
 800b600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b602:	b10b      	cbz	r3, 800b608 <__sflush_r+0x44>
 800b604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b606:	1ad2      	subs	r2, r2, r3
 800b608:	2300      	movs	r3, #0
 800b60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b60c:	6a21      	ldr	r1, [r4, #32]
 800b60e:	4628      	mov	r0, r5
 800b610:	47b0      	blx	r6
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	d106      	bne.n	800b626 <__sflush_r+0x62>
 800b618:	6829      	ldr	r1, [r5, #0]
 800b61a:	291d      	cmp	r1, #29
 800b61c:	d82b      	bhi.n	800b676 <__sflush_r+0xb2>
 800b61e:	4a2a      	ldr	r2, [pc, #168]	@ (800b6c8 <__sflush_r+0x104>)
 800b620:	410a      	asrs	r2, r1
 800b622:	07d6      	lsls	r6, r2, #31
 800b624:	d427      	bmi.n	800b676 <__sflush_r+0xb2>
 800b626:	2200      	movs	r2, #0
 800b628:	6062      	str	r2, [r4, #4]
 800b62a:	04d9      	lsls	r1, r3, #19
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	6022      	str	r2, [r4, #0]
 800b630:	d504      	bpl.n	800b63c <__sflush_r+0x78>
 800b632:	1c42      	adds	r2, r0, #1
 800b634:	d101      	bne.n	800b63a <__sflush_r+0x76>
 800b636:	682b      	ldr	r3, [r5, #0]
 800b638:	b903      	cbnz	r3, 800b63c <__sflush_r+0x78>
 800b63a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b63e:	602f      	str	r7, [r5, #0]
 800b640:	b1b9      	cbz	r1, 800b672 <__sflush_r+0xae>
 800b642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b646:	4299      	cmp	r1, r3
 800b648:	d002      	beq.n	800b650 <__sflush_r+0x8c>
 800b64a:	4628      	mov	r0, r5
 800b64c:	f7fe f93e 	bl	80098cc <_free_r>
 800b650:	2300      	movs	r3, #0
 800b652:	6363      	str	r3, [r4, #52]	@ 0x34
 800b654:	e00d      	b.n	800b672 <__sflush_r+0xae>
 800b656:	2301      	movs	r3, #1
 800b658:	4628      	mov	r0, r5
 800b65a:	47b0      	blx	r6
 800b65c:	4602      	mov	r2, r0
 800b65e:	1c50      	adds	r0, r2, #1
 800b660:	d1c9      	bne.n	800b5f6 <__sflush_r+0x32>
 800b662:	682b      	ldr	r3, [r5, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d0c6      	beq.n	800b5f6 <__sflush_r+0x32>
 800b668:	2b1d      	cmp	r3, #29
 800b66a:	d001      	beq.n	800b670 <__sflush_r+0xac>
 800b66c:	2b16      	cmp	r3, #22
 800b66e:	d11e      	bne.n	800b6ae <__sflush_r+0xea>
 800b670:	602f      	str	r7, [r5, #0]
 800b672:	2000      	movs	r0, #0
 800b674:	e022      	b.n	800b6bc <__sflush_r+0xf8>
 800b676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b67a:	b21b      	sxth	r3, r3
 800b67c:	e01b      	b.n	800b6b6 <__sflush_r+0xf2>
 800b67e:	690f      	ldr	r7, [r1, #16]
 800b680:	2f00      	cmp	r7, #0
 800b682:	d0f6      	beq.n	800b672 <__sflush_r+0xae>
 800b684:	0793      	lsls	r3, r2, #30
 800b686:	680e      	ldr	r6, [r1, #0]
 800b688:	bf08      	it	eq
 800b68a:	694b      	ldreq	r3, [r1, #20]
 800b68c:	600f      	str	r7, [r1, #0]
 800b68e:	bf18      	it	ne
 800b690:	2300      	movne	r3, #0
 800b692:	eba6 0807 	sub.w	r8, r6, r7
 800b696:	608b      	str	r3, [r1, #8]
 800b698:	f1b8 0f00 	cmp.w	r8, #0
 800b69c:	dde9      	ble.n	800b672 <__sflush_r+0xae>
 800b69e:	6a21      	ldr	r1, [r4, #32]
 800b6a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6a2:	4643      	mov	r3, r8
 800b6a4:	463a      	mov	r2, r7
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	47b0      	blx	r6
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	dc08      	bgt.n	800b6c0 <__sflush_r+0xfc>
 800b6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6b6:	81a3      	strh	r3, [r4, #12]
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c0:	4407      	add	r7, r0
 800b6c2:	eba8 0800 	sub.w	r8, r8, r0
 800b6c6:	e7e7      	b.n	800b698 <__sflush_r+0xd4>
 800b6c8:	dfbffffe 	.word	0xdfbffffe

0800b6cc <_fflush_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	690b      	ldr	r3, [r1, #16]
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	b913      	cbnz	r3, 800b6dc <_fflush_r+0x10>
 800b6d6:	2500      	movs	r5, #0
 800b6d8:	4628      	mov	r0, r5
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	b118      	cbz	r0, 800b6e6 <_fflush_r+0x1a>
 800b6de:	6a03      	ldr	r3, [r0, #32]
 800b6e0:	b90b      	cbnz	r3, 800b6e6 <_fflush_r+0x1a>
 800b6e2:	f7fd f9d5 	bl	8008a90 <__sinit>
 800b6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0f3      	beq.n	800b6d6 <_fflush_r+0xa>
 800b6ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6f0:	07d0      	lsls	r0, r2, #31
 800b6f2:	d404      	bmi.n	800b6fe <_fflush_r+0x32>
 800b6f4:	0599      	lsls	r1, r3, #22
 800b6f6:	d402      	bmi.n	800b6fe <_fflush_r+0x32>
 800b6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6fa:	f7fd faf2 	bl	8008ce2 <__retarget_lock_acquire_recursive>
 800b6fe:	4628      	mov	r0, r5
 800b700:	4621      	mov	r1, r4
 800b702:	f7ff ff5f 	bl	800b5c4 <__sflush_r>
 800b706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b708:	07da      	lsls	r2, r3, #31
 800b70a:	4605      	mov	r5, r0
 800b70c:	d4e4      	bmi.n	800b6d8 <_fflush_r+0xc>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	059b      	lsls	r3, r3, #22
 800b712:	d4e1      	bmi.n	800b6d8 <_fflush_r+0xc>
 800b714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b716:	f7fd fae5 	bl	8008ce4 <__retarget_lock_release_recursive>
 800b71a:	e7dd      	b.n	800b6d8 <_fflush_r+0xc>

0800b71c <__swbuf_r>:
 800b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71e:	460e      	mov	r6, r1
 800b720:	4614      	mov	r4, r2
 800b722:	4605      	mov	r5, r0
 800b724:	b118      	cbz	r0, 800b72e <__swbuf_r+0x12>
 800b726:	6a03      	ldr	r3, [r0, #32]
 800b728:	b90b      	cbnz	r3, 800b72e <__swbuf_r+0x12>
 800b72a:	f7fd f9b1 	bl	8008a90 <__sinit>
 800b72e:	69a3      	ldr	r3, [r4, #24]
 800b730:	60a3      	str	r3, [r4, #8]
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	071a      	lsls	r2, r3, #28
 800b736:	d501      	bpl.n	800b73c <__swbuf_r+0x20>
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	b943      	cbnz	r3, 800b74e <__swbuf_r+0x32>
 800b73c:	4621      	mov	r1, r4
 800b73e:	4628      	mov	r0, r5
 800b740:	f000 f82a 	bl	800b798 <__swsetup_r>
 800b744:	b118      	cbz	r0, 800b74e <__swbuf_r+0x32>
 800b746:	f04f 37ff 	mov.w	r7, #4294967295
 800b74a:	4638      	mov	r0, r7
 800b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	6922      	ldr	r2, [r4, #16]
 800b752:	1a98      	subs	r0, r3, r2
 800b754:	6963      	ldr	r3, [r4, #20]
 800b756:	b2f6      	uxtb	r6, r6
 800b758:	4283      	cmp	r3, r0
 800b75a:	4637      	mov	r7, r6
 800b75c:	dc05      	bgt.n	800b76a <__swbuf_r+0x4e>
 800b75e:	4621      	mov	r1, r4
 800b760:	4628      	mov	r0, r5
 800b762:	f7ff ffb3 	bl	800b6cc <_fflush_r>
 800b766:	2800      	cmp	r0, #0
 800b768:	d1ed      	bne.n	800b746 <__swbuf_r+0x2a>
 800b76a:	68a3      	ldr	r3, [r4, #8]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	60a3      	str	r3, [r4, #8]
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	1c5a      	adds	r2, r3, #1
 800b774:	6022      	str	r2, [r4, #0]
 800b776:	701e      	strb	r6, [r3, #0]
 800b778:	6962      	ldr	r2, [r4, #20]
 800b77a:	1c43      	adds	r3, r0, #1
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d004      	beq.n	800b78a <__swbuf_r+0x6e>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	07db      	lsls	r3, r3, #31
 800b784:	d5e1      	bpl.n	800b74a <__swbuf_r+0x2e>
 800b786:	2e0a      	cmp	r6, #10
 800b788:	d1df      	bne.n	800b74a <__swbuf_r+0x2e>
 800b78a:	4621      	mov	r1, r4
 800b78c:	4628      	mov	r0, r5
 800b78e:	f7ff ff9d 	bl	800b6cc <_fflush_r>
 800b792:	2800      	cmp	r0, #0
 800b794:	d0d9      	beq.n	800b74a <__swbuf_r+0x2e>
 800b796:	e7d6      	b.n	800b746 <__swbuf_r+0x2a>

0800b798 <__swsetup_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4b29      	ldr	r3, [pc, #164]	@ (800b840 <__swsetup_r+0xa8>)
 800b79c:	4605      	mov	r5, r0
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	b118      	cbz	r0, 800b7ac <__swsetup_r+0x14>
 800b7a4:	6a03      	ldr	r3, [r0, #32]
 800b7a6:	b90b      	cbnz	r3, 800b7ac <__swsetup_r+0x14>
 800b7a8:	f7fd f972 	bl	8008a90 <__sinit>
 800b7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b0:	0719      	lsls	r1, r3, #28
 800b7b2:	d422      	bmi.n	800b7fa <__swsetup_r+0x62>
 800b7b4:	06da      	lsls	r2, r3, #27
 800b7b6:	d407      	bmi.n	800b7c8 <__swsetup_r+0x30>
 800b7b8:	2209      	movs	r2, #9
 800b7ba:	602a      	str	r2, [r5, #0]
 800b7bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7c0:	81a3      	strh	r3, [r4, #12]
 800b7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c6:	e033      	b.n	800b830 <__swsetup_r+0x98>
 800b7c8:	0758      	lsls	r0, r3, #29
 800b7ca:	d512      	bpl.n	800b7f2 <__swsetup_r+0x5a>
 800b7cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7ce:	b141      	cbz	r1, 800b7e2 <__swsetup_r+0x4a>
 800b7d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7d4:	4299      	cmp	r1, r3
 800b7d6:	d002      	beq.n	800b7de <__swsetup_r+0x46>
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f7fe f877 	bl	80098cc <_free_r>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7e8:	81a3      	strh	r3, [r4, #12]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	6063      	str	r3, [r4, #4]
 800b7ee:	6923      	ldr	r3, [r4, #16]
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f043 0308 	orr.w	r3, r3, #8
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	6923      	ldr	r3, [r4, #16]
 800b7fc:	b94b      	cbnz	r3, 800b812 <__swsetup_r+0x7a>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b808:	d003      	beq.n	800b812 <__swsetup_r+0x7a>
 800b80a:	4621      	mov	r1, r4
 800b80c:	4628      	mov	r0, r5
 800b80e:	f000 fc4f 	bl	800c0b0 <__smakebuf_r>
 800b812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b816:	f013 0201 	ands.w	r2, r3, #1
 800b81a:	d00a      	beq.n	800b832 <__swsetup_r+0x9a>
 800b81c:	2200      	movs	r2, #0
 800b81e:	60a2      	str	r2, [r4, #8]
 800b820:	6962      	ldr	r2, [r4, #20]
 800b822:	4252      	negs	r2, r2
 800b824:	61a2      	str	r2, [r4, #24]
 800b826:	6922      	ldr	r2, [r4, #16]
 800b828:	b942      	cbnz	r2, 800b83c <__swsetup_r+0xa4>
 800b82a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b82e:	d1c5      	bne.n	800b7bc <__swsetup_r+0x24>
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	0799      	lsls	r1, r3, #30
 800b834:	bf58      	it	pl
 800b836:	6962      	ldrpl	r2, [r4, #20]
 800b838:	60a2      	str	r2, [r4, #8]
 800b83a:	e7f4      	b.n	800b826 <__swsetup_r+0x8e>
 800b83c:	2000      	movs	r0, #0
 800b83e:	e7f7      	b.n	800b830 <__swsetup_r+0x98>
 800b840:	2400001c 	.word	0x2400001c

0800b844 <memmove>:
 800b844:	4288      	cmp	r0, r1
 800b846:	b510      	push	{r4, lr}
 800b848:	eb01 0402 	add.w	r4, r1, r2
 800b84c:	d902      	bls.n	800b854 <memmove+0x10>
 800b84e:	4284      	cmp	r4, r0
 800b850:	4623      	mov	r3, r4
 800b852:	d807      	bhi.n	800b864 <memmove+0x20>
 800b854:	1e43      	subs	r3, r0, #1
 800b856:	42a1      	cmp	r1, r4
 800b858:	d008      	beq.n	800b86c <memmove+0x28>
 800b85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b85e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b862:	e7f8      	b.n	800b856 <memmove+0x12>
 800b864:	4402      	add	r2, r0
 800b866:	4601      	mov	r1, r0
 800b868:	428a      	cmp	r2, r1
 800b86a:	d100      	bne.n	800b86e <memmove+0x2a>
 800b86c:	bd10      	pop	{r4, pc}
 800b86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b876:	e7f7      	b.n	800b868 <memmove+0x24>

0800b878 <strncmp>:
 800b878:	b510      	push	{r4, lr}
 800b87a:	b16a      	cbz	r2, 800b898 <strncmp+0x20>
 800b87c:	3901      	subs	r1, #1
 800b87e:	1884      	adds	r4, r0, r2
 800b880:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b884:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b888:	429a      	cmp	r2, r3
 800b88a:	d103      	bne.n	800b894 <strncmp+0x1c>
 800b88c:	42a0      	cmp	r0, r4
 800b88e:	d001      	beq.n	800b894 <strncmp+0x1c>
 800b890:	2a00      	cmp	r2, #0
 800b892:	d1f5      	bne.n	800b880 <strncmp+0x8>
 800b894:	1ad0      	subs	r0, r2, r3
 800b896:	bd10      	pop	{r4, pc}
 800b898:	4610      	mov	r0, r2
 800b89a:	e7fc      	b.n	800b896 <strncmp+0x1e>

0800b89c <_sbrk_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d06      	ldr	r5, [pc, #24]	@ (800b8b8 <_sbrk_r+0x1c>)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	f7f6 ff6a 	bl	8002780 <_sbrk>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d102      	bne.n	800b8b6 <_sbrk_r+0x1a>
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	b103      	cbz	r3, 800b8b6 <_sbrk_r+0x1a>
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	24000588 	.word	0x24000588
 800b8bc:	00000000 	.word	0x00000000

0800b8c0 <nan>:
 800b8c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b8c8 <nan+0x8>
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	00000000 	.word	0x00000000
 800b8cc:	7ff80000 	.word	0x7ff80000

0800b8d0 <__assert_func>:
 800b8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8d2:	4614      	mov	r4, r2
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	4b09      	ldr	r3, [pc, #36]	@ (800b8fc <__assert_func+0x2c>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4605      	mov	r5, r0
 800b8dc:	68d8      	ldr	r0, [r3, #12]
 800b8de:	b954      	cbnz	r4, 800b8f6 <__assert_func+0x26>
 800b8e0:	4b07      	ldr	r3, [pc, #28]	@ (800b900 <__assert_func+0x30>)
 800b8e2:	461c      	mov	r4, r3
 800b8e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8e8:	9100      	str	r1, [sp, #0]
 800b8ea:	462b      	mov	r3, r5
 800b8ec:	4905      	ldr	r1, [pc, #20]	@ (800b904 <__assert_func+0x34>)
 800b8ee:	f000 fba7 	bl	800c040 <fiprintf>
 800b8f2:	f000 fc3b 	bl	800c16c <abort>
 800b8f6:	4b04      	ldr	r3, [pc, #16]	@ (800b908 <__assert_func+0x38>)
 800b8f8:	e7f4      	b.n	800b8e4 <__assert_func+0x14>
 800b8fa:	bf00      	nop
 800b8fc:	2400001c 	.word	0x2400001c
 800b900:	0800cbc5 	.word	0x0800cbc5
 800b904:	0800cb97 	.word	0x0800cb97
 800b908:	0800cb8a 	.word	0x0800cb8a

0800b90c <_calloc_r>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	fba1 5402 	umull	r5, r4, r1, r2
 800b912:	b93c      	cbnz	r4, 800b924 <_calloc_r+0x18>
 800b914:	4629      	mov	r1, r5
 800b916:	f7fe f84d 	bl	80099b4 <_malloc_r>
 800b91a:	4606      	mov	r6, r0
 800b91c:	b928      	cbnz	r0, 800b92a <_calloc_r+0x1e>
 800b91e:	2600      	movs	r6, #0
 800b920:	4630      	mov	r0, r6
 800b922:	bd70      	pop	{r4, r5, r6, pc}
 800b924:	220c      	movs	r2, #12
 800b926:	6002      	str	r2, [r0, #0]
 800b928:	e7f9      	b.n	800b91e <_calloc_r+0x12>
 800b92a:	462a      	mov	r2, r5
 800b92c:	4621      	mov	r1, r4
 800b92e:	f7fd f95a 	bl	8008be6 <memset>
 800b932:	e7f5      	b.n	800b920 <_calloc_r+0x14>

0800b934 <rshift>:
 800b934:	6903      	ldr	r3, [r0, #16]
 800b936:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b93a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b93e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b942:	f100 0414 	add.w	r4, r0, #20
 800b946:	dd45      	ble.n	800b9d4 <rshift+0xa0>
 800b948:	f011 011f 	ands.w	r1, r1, #31
 800b94c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b950:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b954:	d10c      	bne.n	800b970 <rshift+0x3c>
 800b956:	f100 0710 	add.w	r7, r0, #16
 800b95a:	4629      	mov	r1, r5
 800b95c:	42b1      	cmp	r1, r6
 800b95e:	d334      	bcc.n	800b9ca <rshift+0x96>
 800b960:	1a9b      	subs	r3, r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	1eea      	subs	r2, r5, #3
 800b966:	4296      	cmp	r6, r2
 800b968:	bf38      	it	cc
 800b96a:	2300      	movcc	r3, #0
 800b96c:	4423      	add	r3, r4
 800b96e:	e015      	b.n	800b99c <rshift+0x68>
 800b970:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b974:	f1c1 0820 	rsb	r8, r1, #32
 800b978:	40cf      	lsrs	r7, r1
 800b97a:	f105 0e04 	add.w	lr, r5, #4
 800b97e:	46a1      	mov	r9, r4
 800b980:	4576      	cmp	r6, lr
 800b982:	46f4      	mov	ip, lr
 800b984:	d815      	bhi.n	800b9b2 <rshift+0x7e>
 800b986:	1a9a      	subs	r2, r3, r2
 800b988:	0092      	lsls	r2, r2, #2
 800b98a:	3a04      	subs	r2, #4
 800b98c:	3501      	adds	r5, #1
 800b98e:	42ae      	cmp	r6, r5
 800b990:	bf38      	it	cc
 800b992:	2200      	movcc	r2, #0
 800b994:	18a3      	adds	r3, r4, r2
 800b996:	50a7      	str	r7, [r4, r2]
 800b998:	b107      	cbz	r7, 800b99c <rshift+0x68>
 800b99a:	3304      	adds	r3, #4
 800b99c:	1b1a      	subs	r2, r3, r4
 800b99e:	42a3      	cmp	r3, r4
 800b9a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b9a4:	bf08      	it	eq
 800b9a6:	2300      	moveq	r3, #0
 800b9a8:	6102      	str	r2, [r0, #16]
 800b9aa:	bf08      	it	eq
 800b9ac:	6143      	streq	r3, [r0, #20]
 800b9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9b2:	f8dc c000 	ldr.w	ip, [ip]
 800b9b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b9ba:	ea4c 0707 	orr.w	r7, ip, r7
 800b9be:	f849 7b04 	str.w	r7, [r9], #4
 800b9c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9c6:	40cf      	lsrs	r7, r1
 800b9c8:	e7da      	b.n	800b980 <rshift+0x4c>
 800b9ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800b9ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800b9d2:	e7c3      	b.n	800b95c <rshift+0x28>
 800b9d4:	4623      	mov	r3, r4
 800b9d6:	e7e1      	b.n	800b99c <rshift+0x68>

0800b9d8 <__hexdig_fun>:
 800b9d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b9dc:	2b09      	cmp	r3, #9
 800b9de:	d802      	bhi.n	800b9e6 <__hexdig_fun+0xe>
 800b9e0:	3820      	subs	r0, #32
 800b9e2:	b2c0      	uxtb	r0, r0
 800b9e4:	4770      	bx	lr
 800b9e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b9ea:	2b05      	cmp	r3, #5
 800b9ec:	d801      	bhi.n	800b9f2 <__hexdig_fun+0x1a>
 800b9ee:	3847      	subs	r0, #71	@ 0x47
 800b9f0:	e7f7      	b.n	800b9e2 <__hexdig_fun+0xa>
 800b9f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b9f6:	2b05      	cmp	r3, #5
 800b9f8:	d801      	bhi.n	800b9fe <__hexdig_fun+0x26>
 800b9fa:	3827      	subs	r0, #39	@ 0x27
 800b9fc:	e7f1      	b.n	800b9e2 <__hexdig_fun+0xa>
 800b9fe:	2000      	movs	r0, #0
 800ba00:	4770      	bx	lr
	...

0800ba04 <__gethex>:
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	b085      	sub	sp, #20
 800ba0a:	468a      	mov	sl, r1
 800ba0c:	9302      	str	r3, [sp, #8]
 800ba0e:	680b      	ldr	r3, [r1, #0]
 800ba10:	9001      	str	r0, [sp, #4]
 800ba12:	4690      	mov	r8, r2
 800ba14:	1c9c      	adds	r4, r3, #2
 800ba16:	46a1      	mov	r9, r4
 800ba18:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ba1c:	2830      	cmp	r0, #48	@ 0x30
 800ba1e:	d0fa      	beq.n	800ba16 <__gethex+0x12>
 800ba20:	eba9 0303 	sub.w	r3, r9, r3
 800ba24:	f1a3 0b02 	sub.w	fp, r3, #2
 800ba28:	f7ff ffd6 	bl	800b9d8 <__hexdig_fun>
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d168      	bne.n	800bb04 <__gethex+0x100>
 800ba32:	49a0      	ldr	r1, [pc, #640]	@ (800bcb4 <__gethex+0x2b0>)
 800ba34:	2201      	movs	r2, #1
 800ba36:	4648      	mov	r0, r9
 800ba38:	f7ff ff1e 	bl	800b878 <strncmp>
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d167      	bne.n	800bb12 <__gethex+0x10e>
 800ba42:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ba46:	4626      	mov	r6, r4
 800ba48:	f7ff ffc6 	bl	800b9d8 <__hexdig_fun>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d062      	beq.n	800bb16 <__gethex+0x112>
 800ba50:	4623      	mov	r3, r4
 800ba52:	7818      	ldrb	r0, [r3, #0]
 800ba54:	2830      	cmp	r0, #48	@ 0x30
 800ba56:	4699      	mov	r9, r3
 800ba58:	f103 0301 	add.w	r3, r3, #1
 800ba5c:	d0f9      	beq.n	800ba52 <__gethex+0x4e>
 800ba5e:	f7ff ffbb 	bl	800b9d8 <__hexdig_fun>
 800ba62:	fab0 f580 	clz	r5, r0
 800ba66:	096d      	lsrs	r5, r5, #5
 800ba68:	f04f 0b01 	mov.w	fp, #1
 800ba6c:	464a      	mov	r2, r9
 800ba6e:	4616      	mov	r6, r2
 800ba70:	3201      	adds	r2, #1
 800ba72:	7830      	ldrb	r0, [r6, #0]
 800ba74:	f7ff ffb0 	bl	800b9d8 <__hexdig_fun>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d1f8      	bne.n	800ba6e <__gethex+0x6a>
 800ba7c:	498d      	ldr	r1, [pc, #564]	@ (800bcb4 <__gethex+0x2b0>)
 800ba7e:	2201      	movs	r2, #1
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff fef9 	bl	800b878 <strncmp>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d13f      	bne.n	800bb0a <__gethex+0x106>
 800ba8a:	b944      	cbnz	r4, 800ba9e <__gethex+0x9a>
 800ba8c:	1c74      	adds	r4, r6, #1
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4616      	mov	r6, r2
 800ba92:	3201      	adds	r2, #1
 800ba94:	7830      	ldrb	r0, [r6, #0]
 800ba96:	f7ff ff9f 	bl	800b9d8 <__hexdig_fun>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d1f8      	bne.n	800ba90 <__gethex+0x8c>
 800ba9e:	1ba4      	subs	r4, r4, r6
 800baa0:	00a7      	lsls	r7, r4, #2
 800baa2:	7833      	ldrb	r3, [r6, #0]
 800baa4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800baa8:	2b50      	cmp	r3, #80	@ 0x50
 800baaa:	d13e      	bne.n	800bb2a <__gethex+0x126>
 800baac:	7873      	ldrb	r3, [r6, #1]
 800baae:	2b2b      	cmp	r3, #43	@ 0x2b
 800bab0:	d033      	beq.n	800bb1a <__gethex+0x116>
 800bab2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bab4:	d034      	beq.n	800bb20 <__gethex+0x11c>
 800bab6:	1c71      	adds	r1, r6, #1
 800bab8:	2400      	movs	r4, #0
 800baba:	7808      	ldrb	r0, [r1, #0]
 800babc:	f7ff ff8c 	bl	800b9d8 <__hexdig_fun>
 800bac0:	1e43      	subs	r3, r0, #1
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b18      	cmp	r3, #24
 800bac6:	d830      	bhi.n	800bb2a <__gethex+0x126>
 800bac8:	f1a0 0210 	sub.w	r2, r0, #16
 800bacc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bad0:	f7ff ff82 	bl	800b9d8 <__hexdig_fun>
 800bad4:	f100 3cff 	add.w	ip, r0, #4294967295
 800bad8:	fa5f fc8c 	uxtb.w	ip, ip
 800badc:	f1bc 0f18 	cmp.w	ip, #24
 800bae0:	f04f 030a 	mov.w	r3, #10
 800bae4:	d91e      	bls.n	800bb24 <__gethex+0x120>
 800bae6:	b104      	cbz	r4, 800baea <__gethex+0xe6>
 800bae8:	4252      	negs	r2, r2
 800baea:	4417      	add	r7, r2
 800baec:	f8ca 1000 	str.w	r1, [sl]
 800baf0:	b1ed      	cbz	r5, 800bb2e <__gethex+0x12a>
 800baf2:	f1bb 0f00 	cmp.w	fp, #0
 800baf6:	bf0c      	ite	eq
 800baf8:	2506      	moveq	r5, #6
 800bafa:	2500      	movne	r5, #0
 800bafc:	4628      	mov	r0, r5
 800bafe:	b005      	add	sp, #20
 800bb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb04:	2500      	movs	r5, #0
 800bb06:	462c      	mov	r4, r5
 800bb08:	e7b0      	b.n	800ba6c <__gethex+0x68>
 800bb0a:	2c00      	cmp	r4, #0
 800bb0c:	d1c7      	bne.n	800ba9e <__gethex+0x9a>
 800bb0e:	4627      	mov	r7, r4
 800bb10:	e7c7      	b.n	800baa2 <__gethex+0x9e>
 800bb12:	464e      	mov	r6, r9
 800bb14:	462f      	mov	r7, r5
 800bb16:	2501      	movs	r5, #1
 800bb18:	e7c3      	b.n	800baa2 <__gethex+0x9e>
 800bb1a:	2400      	movs	r4, #0
 800bb1c:	1cb1      	adds	r1, r6, #2
 800bb1e:	e7cc      	b.n	800baba <__gethex+0xb6>
 800bb20:	2401      	movs	r4, #1
 800bb22:	e7fb      	b.n	800bb1c <__gethex+0x118>
 800bb24:	fb03 0002 	mla	r0, r3, r2, r0
 800bb28:	e7ce      	b.n	800bac8 <__gethex+0xc4>
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	e7de      	b.n	800baec <__gethex+0xe8>
 800bb2e:	eba6 0309 	sub.w	r3, r6, r9
 800bb32:	3b01      	subs	r3, #1
 800bb34:	4629      	mov	r1, r5
 800bb36:	2b07      	cmp	r3, #7
 800bb38:	dc0a      	bgt.n	800bb50 <__gethex+0x14c>
 800bb3a:	9801      	ldr	r0, [sp, #4]
 800bb3c:	f7fd ffc6 	bl	8009acc <_Balloc>
 800bb40:	4604      	mov	r4, r0
 800bb42:	b940      	cbnz	r0, 800bb56 <__gethex+0x152>
 800bb44:	4b5c      	ldr	r3, [pc, #368]	@ (800bcb8 <__gethex+0x2b4>)
 800bb46:	4602      	mov	r2, r0
 800bb48:	21e4      	movs	r1, #228	@ 0xe4
 800bb4a:	485c      	ldr	r0, [pc, #368]	@ (800bcbc <__gethex+0x2b8>)
 800bb4c:	f7ff fec0 	bl	800b8d0 <__assert_func>
 800bb50:	3101      	adds	r1, #1
 800bb52:	105b      	asrs	r3, r3, #1
 800bb54:	e7ef      	b.n	800bb36 <__gethex+0x132>
 800bb56:	f100 0a14 	add.w	sl, r0, #20
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	4655      	mov	r5, sl
 800bb5e:	469b      	mov	fp, r3
 800bb60:	45b1      	cmp	r9, r6
 800bb62:	d337      	bcc.n	800bbd4 <__gethex+0x1d0>
 800bb64:	f845 bb04 	str.w	fp, [r5], #4
 800bb68:	eba5 050a 	sub.w	r5, r5, sl
 800bb6c:	10ad      	asrs	r5, r5, #2
 800bb6e:	6125      	str	r5, [r4, #16]
 800bb70:	4658      	mov	r0, fp
 800bb72:	f7fe f89d 	bl	8009cb0 <__hi0bits>
 800bb76:	016d      	lsls	r5, r5, #5
 800bb78:	f8d8 6000 	ldr.w	r6, [r8]
 800bb7c:	1a2d      	subs	r5, r5, r0
 800bb7e:	42b5      	cmp	r5, r6
 800bb80:	dd54      	ble.n	800bc2c <__gethex+0x228>
 800bb82:	1bad      	subs	r5, r5, r6
 800bb84:	4629      	mov	r1, r5
 800bb86:	4620      	mov	r0, r4
 800bb88:	f7fe fc2e 	bl	800a3e8 <__any_on>
 800bb8c:	4681      	mov	r9, r0
 800bb8e:	b178      	cbz	r0, 800bbb0 <__gethex+0x1ac>
 800bb90:	1e6b      	subs	r3, r5, #1
 800bb92:	1159      	asrs	r1, r3, #5
 800bb94:	f003 021f 	and.w	r2, r3, #31
 800bb98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb9c:	f04f 0901 	mov.w	r9, #1
 800bba0:	fa09 f202 	lsl.w	r2, r9, r2
 800bba4:	420a      	tst	r2, r1
 800bba6:	d003      	beq.n	800bbb0 <__gethex+0x1ac>
 800bba8:	454b      	cmp	r3, r9
 800bbaa:	dc36      	bgt.n	800bc1a <__gethex+0x216>
 800bbac:	f04f 0902 	mov.w	r9, #2
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f7ff febe 	bl	800b934 <rshift>
 800bbb8:	442f      	add	r7, r5
 800bbba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbbe:	42bb      	cmp	r3, r7
 800bbc0:	da42      	bge.n	800bc48 <__gethex+0x244>
 800bbc2:	9801      	ldr	r0, [sp, #4]
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	f7fd ffc1 	bl	8009b4c <_Bfree>
 800bbca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbcc:	2300      	movs	r3, #0
 800bbce:	6013      	str	r3, [r2, #0]
 800bbd0:	25a3      	movs	r5, #163	@ 0xa3
 800bbd2:	e793      	b.n	800bafc <__gethex+0xf8>
 800bbd4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bbd8:	2a2e      	cmp	r2, #46	@ 0x2e
 800bbda:	d012      	beq.n	800bc02 <__gethex+0x1fe>
 800bbdc:	2b20      	cmp	r3, #32
 800bbde:	d104      	bne.n	800bbea <__gethex+0x1e6>
 800bbe0:	f845 bb04 	str.w	fp, [r5], #4
 800bbe4:	f04f 0b00 	mov.w	fp, #0
 800bbe8:	465b      	mov	r3, fp
 800bbea:	7830      	ldrb	r0, [r6, #0]
 800bbec:	9303      	str	r3, [sp, #12]
 800bbee:	f7ff fef3 	bl	800b9d8 <__hexdig_fun>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	f000 000f 	and.w	r0, r0, #15
 800bbf8:	4098      	lsls	r0, r3
 800bbfa:	ea4b 0b00 	orr.w	fp, fp, r0
 800bbfe:	3304      	adds	r3, #4
 800bc00:	e7ae      	b.n	800bb60 <__gethex+0x15c>
 800bc02:	45b1      	cmp	r9, r6
 800bc04:	d8ea      	bhi.n	800bbdc <__gethex+0x1d8>
 800bc06:	492b      	ldr	r1, [pc, #172]	@ (800bcb4 <__gethex+0x2b0>)
 800bc08:	9303      	str	r3, [sp, #12]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7ff fe33 	bl	800b878 <strncmp>
 800bc12:	9b03      	ldr	r3, [sp, #12]
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1e1      	bne.n	800bbdc <__gethex+0x1d8>
 800bc18:	e7a2      	b.n	800bb60 <__gethex+0x15c>
 800bc1a:	1ea9      	subs	r1, r5, #2
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f7fe fbe3 	bl	800a3e8 <__any_on>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0c2      	beq.n	800bbac <__gethex+0x1a8>
 800bc26:	f04f 0903 	mov.w	r9, #3
 800bc2a:	e7c1      	b.n	800bbb0 <__gethex+0x1ac>
 800bc2c:	da09      	bge.n	800bc42 <__gethex+0x23e>
 800bc2e:	1b75      	subs	r5, r6, r5
 800bc30:	4621      	mov	r1, r4
 800bc32:	9801      	ldr	r0, [sp, #4]
 800bc34:	462a      	mov	r2, r5
 800bc36:	f7fe f9a1 	bl	8009f7c <__lshift>
 800bc3a:	1b7f      	subs	r7, r7, r5
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	f100 0a14 	add.w	sl, r0, #20
 800bc42:	f04f 0900 	mov.w	r9, #0
 800bc46:	e7b8      	b.n	800bbba <__gethex+0x1b6>
 800bc48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc4c:	42bd      	cmp	r5, r7
 800bc4e:	dd6f      	ble.n	800bd30 <__gethex+0x32c>
 800bc50:	1bed      	subs	r5, r5, r7
 800bc52:	42ae      	cmp	r6, r5
 800bc54:	dc34      	bgt.n	800bcc0 <__gethex+0x2bc>
 800bc56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d022      	beq.n	800bca4 <__gethex+0x2a0>
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d024      	beq.n	800bcac <__gethex+0x2a8>
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d115      	bne.n	800bc92 <__gethex+0x28e>
 800bc66:	42ae      	cmp	r6, r5
 800bc68:	d113      	bne.n	800bc92 <__gethex+0x28e>
 800bc6a:	2e01      	cmp	r6, #1
 800bc6c:	d10b      	bne.n	800bc86 <__gethex+0x282>
 800bc6e:	9a02      	ldr	r2, [sp, #8]
 800bc70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc74:	6013      	str	r3, [r2, #0]
 800bc76:	2301      	movs	r3, #1
 800bc78:	6123      	str	r3, [r4, #16]
 800bc7a:	f8ca 3000 	str.w	r3, [sl]
 800bc7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc80:	2562      	movs	r5, #98	@ 0x62
 800bc82:	601c      	str	r4, [r3, #0]
 800bc84:	e73a      	b.n	800bafc <__gethex+0xf8>
 800bc86:	1e71      	subs	r1, r6, #1
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f7fe fbad 	bl	800a3e8 <__any_on>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d1ed      	bne.n	800bc6e <__gethex+0x26a>
 800bc92:	9801      	ldr	r0, [sp, #4]
 800bc94:	4621      	mov	r1, r4
 800bc96:	f7fd ff59 	bl	8009b4c <_Bfree>
 800bc9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	6013      	str	r3, [r2, #0]
 800bca0:	2550      	movs	r5, #80	@ 0x50
 800bca2:	e72b      	b.n	800bafc <__gethex+0xf8>
 800bca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1f3      	bne.n	800bc92 <__gethex+0x28e>
 800bcaa:	e7e0      	b.n	800bc6e <__gethex+0x26a>
 800bcac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1dd      	bne.n	800bc6e <__gethex+0x26a>
 800bcb2:	e7ee      	b.n	800bc92 <__gethex+0x28e>
 800bcb4:	0800ca18 	.word	0x0800ca18
 800bcb8:	0800c8ad 	.word	0x0800c8ad
 800bcbc:	0800cbc6 	.word	0x0800cbc6
 800bcc0:	1e6f      	subs	r7, r5, #1
 800bcc2:	f1b9 0f00 	cmp.w	r9, #0
 800bcc6:	d130      	bne.n	800bd2a <__gethex+0x326>
 800bcc8:	b127      	cbz	r7, 800bcd4 <__gethex+0x2d0>
 800bcca:	4639      	mov	r1, r7
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7fe fb8b 	bl	800a3e8 <__any_on>
 800bcd2:	4681      	mov	r9, r0
 800bcd4:	117a      	asrs	r2, r7, #5
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bcdc:	f007 071f 	and.w	r7, r7, #31
 800bce0:	40bb      	lsls	r3, r7
 800bce2:	4213      	tst	r3, r2
 800bce4:	4629      	mov	r1, r5
 800bce6:	4620      	mov	r0, r4
 800bce8:	bf18      	it	ne
 800bcea:	f049 0902 	orrne.w	r9, r9, #2
 800bcee:	f7ff fe21 	bl	800b934 <rshift>
 800bcf2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bcf6:	1b76      	subs	r6, r6, r5
 800bcf8:	2502      	movs	r5, #2
 800bcfa:	f1b9 0f00 	cmp.w	r9, #0
 800bcfe:	d047      	beq.n	800bd90 <__gethex+0x38c>
 800bd00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d015      	beq.n	800bd34 <__gethex+0x330>
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d017      	beq.n	800bd3c <__gethex+0x338>
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d109      	bne.n	800bd24 <__gethex+0x320>
 800bd10:	f019 0f02 	tst.w	r9, #2
 800bd14:	d006      	beq.n	800bd24 <__gethex+0x320>
 800bd16:	f8da 3000 	ldr.w	r3, [sl]
 800bd1a:	ea49 0903 	orr.w	r9, r9, r3
 800bd1e:	f019 0f01 	tst.w	r9, #1
 800bd22:	d10e      	bne.n	800bd42 <__gethex+0x33e>
 800bd24:	f045 0510 	orr.w	r5, r5, #16
 800bd28:	e032      	b.n	800bd90 <__gethex+0x38c>
 800bd2a:	f04f 0901 	mov.w	r9, #1
 800bd2e:	e7d1      	b.n	800bcd4 <__gethex+0x2d0>
 800bd30:	2501      	movs	r5, #1
 800bd32:	e7e2      	b.n	800bcfa <__gethex+0x2f6>
 800bd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd36:	f1c3 0301 	rsb	r3, r3, #1
 800bd3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0f0      	beq.n	800bd24 <__gethex+0x320>
 800bd42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd46:	f104 0314 	add.w	r3, r4, #20
 800bd4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bd4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bd52:	f04f 0c00 	mov.w	ip, #0
 800bd56:	4618      	mov	r0, r3
 800bd58:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bd60:	d01b      	beq.n	800bd9a <__gethex+0x396>
 800bd62:	3201      	adds	r2, #1
 800bd64:	6002      	str	r2, [r0, #0]
 800bd66:	2d02      	cmp	r5, #2
 800bd68:	f104 0314 	add.w	r3, r4, #20
 800bd6c:	d13c      	bne.n	800bde8 <__gethex+0x3e4>
 800bd6e:	f8d8 2000 	ldr.w	r2, [r8]
 800bd72:	3a01      	subs	r2, #1
 800bd74:	42b2      	cmp	r2, r6
 800bd76:	d109      	bne.n	800bd8c <__gethex+0x388>
 800bd78:	1171      	asrs	r1, r6, #5
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd80:	f006 061f 	and.w	r6, r6, #31
 800bd84:	fa02 f606 	lsl.w	r6, r2, r6
 800bd88:	421e      	tst	r6, r3
 800bd8a:	d13a      	bne.n	800be02 <__gethex+0x3fe>
 800bd8c:	f045 0520 	orr.w	r5, r5, #32
 800bd90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd92:	601c      	str	r4, [r3, #0]
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	601f      	str	r7, [r3, #0]
 800bd98:	e6b0      	b.n	800bafc <__gethex+0xf8>
 800bd9a:	4299      	cmp	r1, r3
 800bd9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bda0:	d8d9      	bhi.n	800bd56 <__gethex+0x352>
 800bda2:	68a3      	ldr	r3, [r4, #8]
 800bda4:	459b      	cmp	fp, r3
 800bda6:	db17      	blt.n	800bdd8 <__gethex+0x3d4>
 800bda8:	6861      	ldr	r1, [r4, #4]
 800bdaa:	9801      	ldr	r0, [sp, #4]
 800bdac:	3101      	adds	r1, #1
 800bdae:	f7fd fe8d 	bl	8009acc <_Balloc>
 800bdb2:	4681      	mov	r9, r0
 800bdb4:	b918      	cbnz	r0, 800bdbe <__gethex+0x3ba>
 800bdb6:	4b1a      	ldr	r3, [pc, #104]	@ (800be20 <__gethex+0x41c>)
 800bdb8:	4602      	mov	r2, r0
 800bdba:	2184      	movs	r1, #132	@ 0x84
 800bdbc:	e6c5      	b.n	800bb4a <__gethex+0x146>
 800bdbe:	6922      	ldr	r2, [r4, #16]
 800bdc0:	3202      	adds	r2, #2
 800bdc2:	f104 010c 	add.w	r1, r4, #12
 800bdc6:	0092      	lsls	r2, r2, #2
 800bdc8:	300c      	adds	r0, #12
 800bdca:	f7fc ff8c 	bl	8008ce6 <memcpy>
 800bdce:	4621      	mov	r1, r4
 800bdd0:	9801      	ldr	r0, [sp, #4]
 800bdd2:	f7fd febb 	bl	8009b4c <_Bfree>
 800bdd6:	464c      	mov	r4, r9
 800bdd8:	6923      	ldr	r3, [r4, #16]
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bde0:	6122      	str	r2, [r4, #16]
 800bde2:	2201      	movs	r2, #1
 800bde4:	615a      	str	r2, [r3, #20]
 800bde6:	e7be      	b.n	800bd66 <__gethex+0x362>
 800bde8:	6922      	ldr	r2, [r4, #16]
 800bdea:	455a      	cmp	r2, fp
 800bdec:	dd0b      	ble.n	800be06 <__gethex+0x402>
 800bdee:	2101      	movs	r1, #1
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f7ff fd9f 	bl	800b934 <rshift>
 800bdf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdfa:	3701      	adds	r7, #1
 800bdfc:	42bb      	cmp	r3, r7
 800bdfe:	f6ff aee0 	blt.w	800bbc2 <__gethex+0x1be>
 800be02:	2501      	movs	r5, #1
 800be04:	e7c2      	b.n	800bd8c <__gethex+0x388>
 800be06:	f016 061f 	ands.w	r6, r6, #31
 800be0a:	d0fa      	beq.n	800be02 <__gethex+0x3fe>
 800be0c:	4453      	add	r3, sl
 800be0e:	f1c6 0620 	rsb	r6, r6, #32
 800be12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be16:	f7fd ff4b 	bl	8009cb0 <__hi0bits>
 800be1a:	42b0      	cmp	r0, r6
 800be1c:	dbe7      	blt.n	800bdee <__gethex+0x3ea>
 800be1e:	e7f0      	b.n	800be02 <__gethex+0x3fe>
 800be20:	0800c8ad 	.word	0x0800c8ad

0800be24 <L_shift>:
 800be24:	f1c2 0208 	rsb	r2, r2, #8
 800be28:	0092      	lsls	r2, r2, #2
 800be2a:	b570      	push	{r4, r5, r6, lr}
 800be2c:	f1c2 0620 	rsb	r6, r2, #32
 800be30:	6843      	ldr	r3, [r0, #4]
 800be32:	6804      	ldr	r4, [r0, #0]
 800be34:	fa03 f506 	lsl.w	r5, r3, r6
 800be38:	432c      	orrs	r4, r5
 800be3a:	40d3      	lsrs	r3, r2
 800be3c:	6004      	str	r4, [r0, #0]
 800be3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800be42:	4288      	cmp	r0, r1
 800be44:	d3f4      	bcc.n	800be30 <L_shift+0xc>
 800be46:	bd70      	pop	{r4, r5, r6, pc}

0800be48 <__match>:
 800be48:	b530      	push	{r4, r5, lr}
 800be4a:	6803      	ldr	r3, [r0, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be52:	b914      	cbnz	r4, 800be5a <__match+0x12>
 800be54:	6003      	str	r3, [r0, #0]
 800be56:	2001      	movs	r0, #1
 800be58:	bd30      	pop	{r4, r5, pc}
 800be5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800be62:	2d19      	cmp	r5, #25
 800be64:	bf98      	it	ls
 800be66:	3220      	addls	r2, #32
 800be68:	42a2      	cmp	r2, r4
 800be6a:	d0f0      	beq.n	800be4e <__match+0x6>
 800be6c:	2000      	movs	r0, #0
 800be6e:	e7f3      	b.n	800be58 <__match+0x10>

0800be70 <__hexnan>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	680b      	ldr	r3, [r1, #0]
 800be76:	6801      	ldr	r1, [r0, #0]
 800be78:	115e      	asrs	r6, r3, #5
 800be7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be7e:	f013 031f 	ands.w	r3, r3, #31
 800be82:	b087      	sub	sp, #28
 800be84:	bf18      	it	ne
 800be86:	3604      	addne	r6, #4
 800be88:	2500      	movs	r5, #0
 800be8a:	1f37      	subs	r7, r6, #4
 800be8c:	4682      	mov	sl, r0
 800be8e:	4690      	mov	r8, r2
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	f846 5c04 	str.w	r5, [r6, #-4]
 800be96:	46b9      	mov	r9, r7
 800be98:	463c      	mov	r4, r7
 800be9a:	9502      	str	r5, [sp, #8]
 800be9c:	46ab      	mov	fp, r5
 800be9e:	784a      	ldrb	r2, [r1, #1]
 800bea0:	1c4b      	adds	r3, r1, #1
 800bea2:	9303      	str	r3, [sp, #12]
 800bea4:	b342      	cbz	r2, 800bef8 <__hexnan+0x88>
 800bea6:	4610      	mov	r0, r2
 800bea8:	9105      	str	r1, [sp, #20]
 800beaa:	9204      	str	r2, [sp, #16]
 800beac:	f7ff fd94 	bl	800b9d8 <__hexdig_fun>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d151      	bne.n	800bf58 <__hexnan+0xe8>
 800beb4:	9a04      	ldr	r2, [sp, #16]
 800beb6:	9905      	ldr	r1, [sp, #20]
 800beb8:	2a20      	cmp	r2, #32
 800beba:	d818      	bhi.n	800beee <__hexnan+0x7e>
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	459b      	cmp	fp, r3
 800bec0:	dd13      	ble.n	800beea <__hexnan+0x7a>
 800bec2:	454c      	cmp	r4, r9
 800bec4:	d206      	bcs.n	800bed4 <__hexnan+0x64>
 800bec6:	2d07      	cmp	r5, #7
 800bec8:	dc04      	bgt.n	800bed4 <__hexnan+0x64>
 800beca:	462a      	mov	r2, r5
 800becc:	4649      	mov	r1, r9
 800bece:	4620      	mov	r0, r4
 800bed0:	f7ff ffa8 	bl	800be24 <L_shift>
 800bed4:	4544      	cmp	r4, r8
 800bed6:	d952      	bls.n	800bf7e <__hexnan+0x10e>
 800bed8:	2300      	movs	r3, #0
 800beda:	f1a4 0904 	sub.w	r9, r4, #4
 800bede:	f844 3c04 	str.w	r3, [r4, #-4]
 800bee2:	f8cd b008 	str.w	fp, [sp, #8]
 800bee6:	464c      	mov	r4, r9
 800bee8:	461d      	mov	r5, r3
 800beea:	9903      	ldr	r1, [sp, #12]
 800beec:	e7d7      	b.n	800be9e <__hexnan+0x2e>
 800beee:	2a29      	cmp	r2, #41	@ 0x29
 800bef0:	d157      	bne.n	800bfa2 <__hexnan+0x132>
 800bef2:	3102      	adds	r1, #2
 800bef4:	f8ca 1000 	str.w	r1, [sl]
 800bef8:	f1bb 0f00 	cmp.w	fp, #0
 800befc:	d051      	beq.n	800bfa2 <__hexnan+0x132>
 800befe:	454c      	cmp	r4, r9
 800bf00:	d206      	bcs.n	800bf10 <__hexnan+0xa0>
 800bf02:	2d07      	cmp	r5, #7
 800bf04:	dc04      	bgt.n	800bf10 <__hexnan+0xa0>
 800bf06:	462a      	mov	r2, r5
 800bf08:	4649      	mov	r1, r9
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f7ff ff8a 	bl	800be24 <L_shift>
 800bf10:	4544      	cmp	r4, r8
 800bf12:	d936      	bls.n	800bf82 <__hexnan+0x112>
 800bf14:	f1a8 0204 	sub.w	r2, r8, #4
 800bf18:	4623      	mov	r3, r4
 800bf1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf22:	429f      	cmp	r7, r3
 800bf24:	d2f9      	bcs.n	800bf1a <__hexnan+0xaa>
 800bf26:	1b3b      	subs	r3, r7, r4
 800bf28:	f023 0303 	bic.w	r3, r3, #3
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	3401      	adds	r4, #1
 800bf30:	3e03      	subs	r6, #3
 800bf32:	42b4      	cmp	r4, r6
 800bf34:	bf88      	it	hi
 800bf36:	2304      	movhi	r3, #4
 800bf38:	4443      	add	r3, r8
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f843 2b04 	str.w	r2, [r3], #4
 800bf40:	429f      	cmp	r7, r3
 800bf42:	d2fb      	bcs.n	800bf3c <__hexnan+0xcc>
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	b91b      	cbnz	r3, 800bf50 <__hexnan+0xe0>
 800bf48:	4547      	cmp	r7, r8
 800bf4a:	d128      	bne.n	800bf9e <__hexnan+0x12e>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	2005      	movs	r0, #5
 800bf52:	b007      	add	sp, #28
 800bf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf58:	3501      	adds	r5, #1
 800bf5a:	2d08      	cmp	r5, #8
 800bf5c:	f10b 0b01 	add.w	fp, fp, #1
 800bf60:	dd06      	ble.n	800bf70 <__hexnan+0x100>
 800bf62:	4544      	cmp	r4, r8
 800bf64:	d9c1      	bls.n	800beea <__hexnan+0x7a>
 800bf66:	2300      	movs	r3, #0
 800bf68:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf6c:	2501      	movs	r5, #1
 800bf6e:	3c04      	subs	r4, #4
 800bf70:	6822      	ldr	r2, [r4, #0]
 800bf72:	f000 000f 	and.w	r0, r0, #15
 800bf76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bf7a:	6020      	str	r0, [r4, #0]
 800bf7c:	e7b5      	b.n	800beea <__hexnan+0x7a>
 800bf7e:	2508      	movs	r5, #8
 800bf80:	e7b3      	b.n	800beea <__hexnan+0x7a>
 800bf82:	9b01      	ldr	r3, [sp, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0dd      	beq.n	800bf44 <__hexnan+0xd4>
 800bf88:	f1c3 0320 	rsb	r3, r3, #32
 800bf8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf90:	40da      	lsrs	r2, r3
 800bf92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bf96:	4013      	ands	r3, r2
 800bf98:	f846 3c04 	str.w	r3, [r6, #-4]
 800bf9c:	e7d2      	b.n	800bf44 <__hexnan+0xd4>
 800bf9e:	3f04      	subs	r7, #4
 800bfa0:	e7d0      	b.n	800bf44 <__hexnan+0xd4>
 800bfa2:	2004      	movs	r0, #4
 800bfa4:	e7d5      	b.n	800bf52 <__hexnan+0xe2>

0800bfa6 <__ascii_mbtowc>:
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	b901      	cbnz	r1, 800bfac <__ascii_mbtowc+0x6>
 800bfaa:	a901      	add	r1, sp, #4
 800bfac:	b142      	cbz	r2, 800bfc0 <__ascii_mbtowc+0x1a>
 800bfae:	b14b      	cbz	r3, 800bfc4 <__ascii_mbtowc+0x1e>
 800bfb0:	7813      	ldrb	r3, [r2, #0]
 800bfb2:	600b      	str	r3, [r1, #0]
 800bfb4:	7812      	ldrb	r2, [r2, #0]
 800bfb6:	1e10      	subs	r0, r2, #0
 800bfb8:	bf18      	it	ne
 800bfba:	2001      	movne	r0, #1
 800bfbc:	b002      	add	sp, #8
 800bfbe:	4770      	bx	lr
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	e7fb      	b.n	800bfbc <__ascii_mbtowc+0x16>
 800bfc4:	f06f 0001 	mvn.w	r0, #1
 800bfc8:	e7f8      	b.n	800bfbc <__ascii_mbtowc+0x16>

0800bfca <_realloc_r>:
 800bfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfce:	4680      	mov	r8, r0
 800bfd0:	4615      	mov	r5, r2
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	b921      	cbnz	r1, 800bfe0 <_realloc_r+0x16>
 800bfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	4611      	mov	r1, r2
 800bfdc:	f7fd bcea 	b.w	80099b4 <_malloc_r>
 800bfe0:	b92a      	cbnz	r2, 800bfee <_realloc_r+0x24>
 800bfe2:	f7fd fc73 	bl	80098cc <_free_r>
 800bfe6:	2400      	movs	r4, #0
 800bfe8:	4620      	mov	r0, r4
 800bfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfee:	f000 f8c4 	bl	800c17a <_malloc_usable_size_r>
 800bff2:	4285      	cmp	r5, r0
 800bff4:	4606      	mov	r6, r0
 800bff6:	d802      	bhi.n	800bffe <_realloc_r+0x34>
 800bff8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bffc:	d8f4      	bhi.n	800bfe8 <_realloc_r+0x1e>
 800bffe:	4629      	mov	r1, r5
 800c000:	4640      	mov	r0, r8
 800c002:	f7fd fcd7 	bl	80099b4 <_malloc_r>
 800c006:	4607      	mov	r7, r0
 800c008:	2800      	cmp	r0, #0
 800c00a:	d0ec      	beq.n	800bfe6 <_realloc_r+0x1c>
 800c00c:	42b5      	cmp	r5, r6
 800c00e:	462a      	mov	r2, r5
 800c010:	4621      	mov	r1, r4
 800c012:	bf28      	it	cs
 800c014:	4632      	movcs	r2, r6
 800c016:	f7fc fe66 	bl	8008ce6 <memcpy>
 800c01a:	4621      	mov	r1, r4
 800c01c:	4640      	mov	r0, r8
 800c01e:	f7fd fc55 	bl	80098cc <_free_r>
 800c022:	463c      	mov	r4, r7
 800c024:	e7e0      	b.n	800bfe8 <_realloc_r+0x1e>

0800c026 <__ascii_wctomb>:
 800c026:	4603      	mov	r3, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	b141      	cbz	r1, 800c03e <__ascii_wctomb+0x18>
 800c02c:	2aff      	cmp	r2, #255	@ 0xff
 800c02e:	d904      	bls.n	800c03a <__ascii_wctomb+0x14>
 800c030:	228a      	movs	r2, #138	@ 0x8a
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	f04f 30ff 	mov.w	r0, #4294967295
 800c038:	4770      	bx	lr
 800c03a:	700a      	strb	r2, [r1, #0]
 800c03c:	2001      	movs	r0, #1
 800c03e:	4770      	bx	lr

0800c040 <fiprintf>:
 800c040:	b40e      	push	{r1, r2, r3}
 800c042:	b503      	push	{r0, r1, lr}
 800c044:	4601      	mov	r1, r0
 800c046:	ab03      	add	r3, sp, #12
 800c048:	4805      	ldr	r0, [pc, #20]	@ (800c060 <fiprintf+0x20>)
 800c04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c04e:	6800      	ldr	r0, [r0, #0]
 800c050:	9301      	str	r3, [sp, #4]
 800c052:	f7ff f99f 	bl	800b394 <_vfiprintf_r>
 800c056:	b002      	add	sp, #8
 800c058:	f85d eb04 	ldr.w	lr, [sp], #4
 800c05c:	b003      	add	sp, #12
 800c05e:	4770      	bx	lr
 800c060:	2400001c 	.word	0x2400001c

0800c064 <__swhatbuf_r>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	460c      	mov	r4, r1
 800c068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06c:	2900      	cmp	r1, #0
 800c06e:	b096      	sub	sp, #88	@ 0x58
 800c070:	4615      	mov	r5, r2
 800c072:	461e      	mov	r6, r3
 800c074:	da0d      	bge.n	800c092 <__swhatbuf_r+0x2e>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c07c:	f04f 0100 	mov.w	r1, #0
 800c080:	bf14      	ite	ne
 800c082:	2340      	movne	r3, #64	@ 0x40
 800c084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c088:	2000      	movs	r0, #0
 800c08a:	6031      	str	r1, [r6, #0]
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	b016      	add	sp, #88	@ 0x58
 800c090:	bd70      	pop	{r4, r5, r6, pc}
 800c092:	466a      	mov	r2, sp
 800c094:	f000 f848 	bl	800c128 <_fstat_r>
 800c098:	2800      	cmp	r0, #0
 800c09a:	dbec      	blt.n	800c076 <__swhatbuf_r+0x12>
 800c09c:	9901      	ldr	r1, [sp, #4]
 800c09e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0a6:	4259      	negs	r1, r3
 800c0a8:	4159      	adcs	r1, r3
 800c0aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0ae:	e7eb      	b.n	800c088 <__swhatbuf_r+0x24>

0800c0b0 <__smakebuf_r>:
 800c0b0:	898b      	ldrh	r3, [r1, #12]
 800c0b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0b4:	079d      	lsls	r5, r3, #30
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	d507      	bpl.n	800c0cc <__smakebuf_r+0x1c>
 800c0bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	6123      	str	r3, [r4, #16]
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	6163      	str	r3, [r4, #20]
 800c0c8:	b003      	add	sp, #12
 800c0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0cc:	ab01      	add	r3, sp, #4
 800c0ce:	466a      	mov	r2, sp
 800c0d0:	f7ff ffc8 	bl	800c064 <__swhatbuf_r>
 800c0d4:	9f00      	ldr	r7, [sp, #0]
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	4639      	mov	r1, r7
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7fd fc6a 	bl	80099b4 <_malloc_r>
 800c0e0:	b948      	cbnz	r0, 800c0f6 <__smakebuf_r+0x46>
 800c0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e6:	059a      	lsls	r2, r3, #22
 800c0e8:	d4ee      	bmi.n	800c0c8 <__smakebuf_r+0x18>
 800c0ea:	f023 0303 	bic.w	r3, r3, #3
 800c0ee:	f043 0302 	orr.w	r3, r3, #2
 800c0f2:	81a3      	strh	r3, [r4, #12]
 800c0f4:	e7e2      	b.n	800c0bc <__smakebuf_r+0xc>
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	6020      	str	r0, [r4, #0]
 800c0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	9b01      	ldr	r3, [sp, #4]
 800c102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c106:	b15b      	cbz	r3, 800c120 <__smakebuf_r+0x70>
 800c108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c10c:	4630      	mov	r0, r6
 800c10e:	f000 f81d 	bl	800c14c <_isatty_r>
 800c112:	b128      	cbz	r0, 800c120 <__smakebuf_r+0x70>
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f023 0303 	bic.w	r3, r3, #3
 800c11a:	f043 0301 	orr.w	r3, r3, #1
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	431d      	orrs	r5, r3
 800c124:	81a5      	strh	r5, [r4, #12]
 800c126:	e7cf      	b.n	800c0c8 <__smakebuf_r+0x18>

0800c128 <_fstat_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4d07      	ldr	r5, [pc, #28]	@ (800c148 <_fstat_r+0x20>)
 800c12c:	2300      	movs	r3, #0
 800c12e:	4604      	mov	r4, r0
 800c130:	4608      	mov	r0, r1
 800c132:	4611      	mov	r1, r2
 800c134:	602b      	str	r3, [r5, #0]
 800c136:	f7f6 fafa 	bl	800272e <_fstat>
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	d102      	bne.n	800c144 <_fstat_r+0x1c>
 800c13e:	682b      	ldr	r3, [r5, #0]
 800c140:	b103      	cbz	r3, 800c144 <_fstat_r+0x1c>
 800c142:	6023      	str	r3, [r4, #0]
 800c144:	bd38      	pop	{r3, r4, r5, pc}
 800c146:	bf00      	nop
 800c148:	24000588 	.word	0x24000588

0800c14c <_isatty_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d06      	ldr	r5, [pc, #24]	@ (800c168 <_isatty_r+0x1c>)
 800c150:	2300      	movs	r3, #0
 800c152:	4604      	mov	r4, r0
 800c154:	4608      	mov	r0, r1
 800c156:	602b      	str	r3, [r5, #0]
 800c158:	f7f6 faf9 	bl	800274e <_isatty>
 800c15c:	1c43      	adds	r3, r0, #1
 800c15e:	d102      	bne.n	800c166 <_isatty_r+0x1a>
 800c160:	682b      	ldr	r3, [r5, #0]
 800c162:	b103      	cbz	r3, 800c166 <_isatty_r+0x1a>
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	bd38      	pop	{r3, r4, r5, pc}
 800c168:	24000588 	.word	0x24000588

0800c16c <abort>:
 800c16c:	b508      	push	{r3, lr}
 800c16e:	2006      	movs	r0, #6
 800c170:	f000 f834 	bl	800c1dc <raise>
 800c174:	2001      	movs	r0, #1
 800c176:	f7f6 fa8a 	bl	800268e <_exit>

0800c17a <_malloc_usable_size_r>:
 800c17a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c17e:	1f18      	subs	r0, r3, #4
 800c180:	2b00      	cmp	r3, #0
 800c182:	bfbc      	itt	lt
 800c184:	580b      	ldrlt	r3, [r1, r0]
 800c186:	18c0      	addlt	r0, r0, r3
 800c188:	4770      	bx	lr

0800c18a <_raise_r>:
 800c18a:	291f      	cmp	r1, #31
 800c18c:	b538      	push	{r3, r4, r5, lr}
 800c18e:	4605      	mov	r5, r0
 800c190:	460c      	mov	r4, r1
 800c192:	d904      	bls.n	800c19e <_raise_r+0x14>
 800c194:	2316      	movs	r3, #22
 800c196:	6003      	str	r3, [r0, #0]
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	bd38      	pop	{r3, r4, r5, pc}
 800c19e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1a0:	b112      	cbz	r2, 800c1a8 <_raise_r+0x1e>
 800c1a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1a6:	b94b      	cbnz	r3, 800c1bc <_raise_r+0x32>
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	f000 f831 	bl	800c210 <_getpid_r>
 800c1ae:	4622      	mov	r2, r4
 800c1b0:	4601      	mov	r1, r0
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1b8:	f000 b818 	b.w	800c1ec <_kill_r>
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d00a      	beq.n	800c1d6 <_raise_r+0x4c>
 800c1c0:	1c59      	adds	r1, r3, #1
 800c1c2:	d103      	bne.n	800c1cc <_raise_r+0x42>
 800c1c4:	2316      	movs	r3, #22
 800c1c6:	6003      	str	r3, [r0, #0]
 800c1c8:	2001      	movs	r0, #1
 800c1ca:	e7e7      	b.n	800c19c <_raise_r+0x12>
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	4798      	blx	r3
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	e7e0      	b.n	800c19c <_raise_r+0x12>
	...

0800c1dc <raise>:
 800c1dc:	4b02      	ldr	r3, [pc, #8]	@ (800c1e8 <raise+0xc>)
 800c1de:	4601      	mov	r1, r0
 800c1e0:	6818      	ldr	r0, [r3, #0]
 800c1e2:	f7ff bfd2 	b.w	800c18a <_raise_r>
 800c1e6:	bf00      	nop
 800c1e8:	2400001c 	.word	0x2400001c

0800c1ec <_kill_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	@ (800c20c <_kill_r+0x20>)
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	602b      	str	r3, [r5, #0]
 800c1fa:	f7f6 fa38 	bl	800266e <_kill>
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	d102      	bne.n	800c208 <_kill_r+0x1c>
 800c202:	682b      	ldr	r3, [r5, #0]
 800c204:	b103      	cbz	r3, 800c208 <_kill_r+0x1c>
 800c206:	6023      	str	r3, [r4, #0]
 800c208:	bd38      	pop	{r3, r4, r5, pc}
 800c20a:	bf00      	nop
 800c20c:	24000588 	.word	0x24000588

0800c210 <_getpid_r>:
 800c210:	f7f6 ba25 	b.w	800265e <_getpid>

0800c214 <_init>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	bf00      	nop
 800c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21a:	bc08      	pop	{r3}
 800c21c:	469e      	mov	lr, r3
 800c21e:	4770      	bx	lr

0800c220 <_fini>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr
