
stm32h755_dspsetup_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08008358  08008358  00009358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d8  080088d8  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080088d8  080088d8  000098d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088e0  080088e0  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e0  080088e0  000098e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e4  080088e4  000098e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  080088e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  240001dc  08008ac4  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000460  08008ac4  0000a460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100dd  00000000  00000000  0000a20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000211b  00000000  00000000  0001a2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0001c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008eb  00000000  00000000  0001cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039bfa  00000000  00000000  0001d8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100b6  00000000  00000000  0005749d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ac65  00000000  00000000  00067553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e21b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb8  00000000  00000000  001e21fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001e60b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008340 	.word	0x08008340

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08008340 	.word	0x08008340

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b68      	ldr	r3, [pc, #416]	@ (800095c <main+0x1b0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 fa15 	bl	8000c04 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fbb9 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f8c9 	bl	8000974 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b5e      	ldr	r3, [pc, #376]	@ (800095c <main+0x1b0>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a5c      	ldr	r2, [pc, #368]	@ (800095c <main+0x1b0>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b5a      	ldr	r3, [pc, #360]	@ (800095c <main+0x1b0>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 ff2f 	bl	8001664 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f000 ff45 	bl	8001698 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b51      	ldr	r3, [pc, #324]	@ (800095c <main+0x1b0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 f9e7 	bl	8000c04 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f963 	bl	8000b00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083a:	f000 f915 	bl	8000a68 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t Buffer[30];

     for(n=0;n<N;n++){
 800083e:	4b48      	ldr	r3, [pc, #288]	@ (8000960 <main+0x1b4>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e020      	b.n	8000888 <main+0xdc>
       s[n]=sin(w0*(float)n);
 8000846:	4b46      	ldr	r3, [pc, #280]	@ (8000960 <main+0x1b4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000852:	4b44      	ldr	r3, [pc, #272]	@ (8000964 <main+0x1b8>)
 8000854:	edd3 7a00 	vldr	s15, [r3]
 8000858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000860:	eeb0 0b47 	vmov.f64	d0, d7
 8000864:	f006 ffa0 	bl	80077a8 <sin>
 8000868:	eeb0 7b40 	vmov.f64	d7, d0
 800086c:	4b3c      	ldr	r3, [pc, #240]	@ (8000960 <main+0x1b4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000874:	4a3c      	ldr	r2, [pc, #240]	@ (8000968 <main+0x1bc>)
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	edc3 7a00 	vstr	s15, [r3]
     for(n=0;n<N;n++){
 800087e:	4b38      	ldr	r3, [pc, #224]	@ (8000960 <main+0x1b4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a36      	ldr	r2, [pc, #216]	@ (8000960 <main+0x1b4>)
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b35      	ldr	r3, [pc, #212]	@ (8000960 <main+0x1b4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b1f      	cmp	r3, #31
 800088e:	ddda      	ble.n	8000846 <main+0x9a>


     FloatTOintType ToBuff;

    while (1) {
  	Buffer[0] = 0x6D;
 8000890:	236d      	movs	r3, #109	@ 0x6d
 8000892:	733b      	strb	r3, [r7, #12]
  	HAL_UART_Transmit(&huart3, Buffer, 1, 1000);
 8000894:	f107 010c 	add.w	r1, r7, #12
 8000898:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089c:	2201      	movs	r2, #1
 800089e:	4833      	ldr	r0, [pc, #204]	@ (800096c <main+0x1c0>)
 80008a0:	f003 fada 	bl	8003e58 <HAL_UART_Transmit>
  	HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fbe5 	bl	8001074 <HAL_Delay>
  	Buffer[0] = 96;//Modified from 16 to 32
 80008aa:	2360      	movs	r3, #96	@ 0x60
 80008ac:	733b      	strb	r3, [r7, #12]
  	HAL_UART_Transmit(&huart3, Buffer, 1, 1000);
 80008ae:	f107 010c 	add.w	r1, r7, #12
 80008b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b6:	2201      	movs	r2, #1
 80008b8:	482c      	ldr	r0, [pc, #176]	@ (800096c <main+0x1c0>)
 80008ba:	f003 facd 	bl	8003e58 <HAL_UART_Transmit>
  	HAL_Delay(10);
 80008be:	200a      	movs	r0, #10
 80008c0:	f000 fbd8 	bl	8001074 <HAL_Delay>

  	for(n=0;n<96;n++){//Modified from 16 to 32
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <main+0x1b4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e03a      	b.n	8000942 <main+0x196>
  	   s[n]=sin(w0*(float)n);
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <main+0x1b4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	ee07 3a90 	vmov	s15, r3
 80008d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008d8:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <main+0x1b8>)
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e6:	eeb0 0b47 	vmov.f64	d0, d7
 80008ea:	f006 ff5d 	bl	80077a8 <sin>
 80008ee:	eeb0 7b40 	vmov.f64	d7, d0
 80008f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <main+0x1b4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000968 <main+0x1bc>)
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	edc3 7a00 	vstr	s15, [r3]
  	   ToBuff.valf = s[n];
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <main+0x1b4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	@ (8000968 <main+0x1bc>)
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60bb      	str	r3, [r7, #8]
  	   Buffer[0] = ToBuff.vali8[0];
 8000912:	7a3b      	ldrb	r3, [r7, #8]
 8000914:	733b      	strb	r3, [r7, #12]
  	   Buffer[1] = ToBuff.vali8[1];
 8000916:	7a7b      	ldrb	r3, [r7, #9]
 8000918:	737b      	strb	r3, [r7, #13]
  	   Buffer[2] = ToBuff.vali8[2];
 800091a:	7abb      	ldrb	r3, [r7, #10]
 800091c:	73bb      	strb	r3, [r7, #14]
  	   Buffer[3] = ToBuff.vali8[3];
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	73fb      	strb	r3, [r7, #15]
  	   HAL_UART_Transmit(&huart3, Buffer, 4, 1000);
 8000922:	f107 010c 	add.w	r1, r7, #12
 8000926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092a:	2204      	movs	r2, #4
 800092c:	480f      	ldr	r0, [pc, #60]	@ (800096c <main+0x1c0>)
 800092e:	f003 fa93 	bl	8003e58 <HAL_UART_Transmit>
  	   HAL_Delay(10);
 8000932:	200a      	movs	r0, #10
 8000934:	f000 fb9e 	bl	8001074 <HAL_Delay>
  	for(n=0;n<96;n++){//Modified from 16 to 32
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <main+0x1b4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <main+0x1b4>)
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <main+0x1b4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b5f      	cmp	r3, #95	@ 0x5f
 8000948:	ddc0      	ble.n	80008cc <main+0x120>
  	}
  	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800094a:	2101      	movs	r1, #1
 800094c:	4808      	ldr	r0, [pc, #32]	@ (8000970 <main+0x1c4>)
 800094e:	f000 fe6e 	bl	800162e <HAL_GPIO_TogglePin>
  	HAL_Delay(10);
 8000952:	200a      	movs	r0, #10
 8000954:	f000 fb8e 	bl	8001074 <HAL_Delay>
  	Buffer[0] = 0x6D;
 8000958:	e79a      	b.n	8000890 <main+0xe4>
 800095a:	bf00      	nop
 800095c:	58024400 	.word	0x58024400
 8000960:	24000288 	.word	0x24000288
 8000964:	24000008 	.word	0x24000008
 8000968:	2400028c 	.word	0x2400028c
 800096c:	240001f8 	.word	0x240001f8
 8000970:	58020400 	.word	0x58020400

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	@ 0x70
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	224c      	movs	r2, #76	@ 0x4c
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f005 f859 	bl	8005a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f005 f853 	bl	8005a3a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000994:	2004      	movs	r0, #4
 8000996:	f000 fe93 	bl	80016c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <SystemClock_Config+0xec>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a60 <SystemClock_Config+0xec>)
 80009a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <SystemClock_Config+0xec>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009c0:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009cc:	bf00      	nop
 80009ce:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <SystemClock_Config+0xec>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009da:	d1f8      	bne.n	80009ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009f2:	2378      	movs	r3, #120	@ 0x78
 80009f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 feae 	bl	8001774 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a1e:	f000 f8f1 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	233f      	movs	r3, #63	@ 0x3f
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a32:	2340      	movs	r3, #64	@ 0x40
 8000a34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a40:	2340      	movs	r3, #64	@ 0x40
 8000a42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2104      	movs	r1, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fac1 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a54:	f000 f8d6 	bl	8000c04 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3770      	adds	r7, #112	@ 0x70
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58024800 	.word	0x58024800
 8000a64:	58000400 	.word	0x58000400

08000a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a6e:	4a23      	ldr	r2, [pc, #140]	@ (8000afc <MX_USART3_UART_Init+0x94>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab0:	4811      	ldr	r0, [pc, #68]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ab2:	f003 f981 	bl	8003db8 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000abc:	f000 f8a2 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ac4:	f004 f9b4 	bl	8004e30 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ace:	f000 f899 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ad6:	f004 f9e9 	bl	8004eac <HAL_UARTEx_SetRxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae0:	f000 f890 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_USART3_UART_Init+0x90>)
 8000ae6:	f004 f96a 	bl	8004dbe <HAL_UARTEx_DisableFifoMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f000 f888 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	240001f8 	.word	0x240001f8
 8000afc:	40004800 	.word	0x40004800

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b38      	ldr	r3, [pc, #224]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a36      	ldr	r2, [pc, #216]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b34:	4b30      	ldr	r3, [pc, #192]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b44:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	4a27      	ldr	r2, [pc, #156]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	4a20      	ldr	r2, [pc, #128]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a18      	ldr	r2, [pc, #96]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_GPIO_Init+0xf8>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bb2:	4812      	ldr	r0, [pc, #72]	@ (8000bfc <MX_GPIO_Init+0xfc>)
 8000bb4:	f000 fd22 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <MX_GPIO_Init+0x100>)
 8000bce:	f000 fb65 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000bd2:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_GPIO_Init+0xfc>)
 8000bec:	f000 fb56 	bl	800129c <HAL_GPIO_Init>

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	58020400 	.word	0x58020400
 8000c00:	58020800 	.word	0x58020800

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <Error_Handler+0x8>

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_MspInit+0x30>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c1c:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <HAL_MspInit+0x30>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_MspInit+0x30>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	58024400 	.word	0x58024400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0b8      	sub	sp, #224	@ 0xe0
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	22bc      	movs	r2, #188	@ 0xbc
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 fee8 	bl	8005a3a <memset>
  if(huart->Instance==USART3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <HAL_UART_MspInit+0xc0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d142      	bne.n	8000cfa <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c74:	2302      	movs	r3, #2
 8000c76:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fd30 	bl	80026e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c8e:	f7ff ffb9 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <HAL_UART_MspInit+0xc4>)
 8000c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c98:	4a1b      	ldr	r2, [pc, #108]	@ (8000d08 <HAL_UART_MspInit+0xc4>)
 8000c9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_UART_MspInit+0xc4>)
 8000ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ca8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <HAL_UART_MspInit+0xc4>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <HAL_UART_MspInit+0xc4>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_UART_MspInit+0xc4>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <HAL_UART_MspInit+0xc8>)
 8000cf6:	f000 fad1 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	37e0      	adds	r7, #224	@ 0xe0
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004800 	.word	0x40004800
 8000d08:	58024400 	.word	0x58024400
 8000d0c:	58020c00 	.word	0x58020c00

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d66:	f000 f965 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
	return 1;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_kill>:

int _kill(int pid, int sig)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d88:	f004 feaa 	bl	8005ae0 <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2216      	movs	r2, #22
 8000d90:	601a      	str	r2, [r3, #0]
	return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_exit>:

void _exit (int status)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000da6:	f04f 31ff 	mov.w	r1, #4294967295
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffe7 	bl	8000d7e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <_exit+0x12>

08000db4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
	}

return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
	}
	return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f004 fe0e 	bl	8005ae0 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	24080000 	.word	0x24080000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	2400030c 	.word	0x2400030c
 8000ef8:	24000460 	.word	0x24000460

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f00:	f7ff fbbe 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f004 fddf 	bl	8005aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fc3d 	bl	80007ac <main>
  bx  lr
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f3c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8000f40:	080088e8 	.word	0x080088e8
  ldr r2, =_sbss
 8000f44:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8000f48:	24000460 	.word	0x24000460

08000f4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC3_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f96e 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f5c:	f001 f9ee 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_Init+0x68>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	4913      	ldr	r1, [pc, #76]	@ (8000fbc <HAL_Init+0x6c>)
 8000f6e:	5ccb      	ldrb	r3, [r1, r3]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_Init+0x68>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_Init+0x6c>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_Init+0x70>)
 8000f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f94:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <HAL_Init+0x74>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f814 	bl	8000fc8 <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e002      	b.n	8000fb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000faa:	f7ff fe31 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	08008358 	.word	0x08008358
 8000fc0:	24000004 	.word	0x24000004
 8000fc4:	24000000 	.word	0x24000000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_InitTick+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e021      	b.n	8001020 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <HAL_InitTick+0x64>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <HAL_InitTick+0x60>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f945 	bl	8001282 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f91d 	bl	800124e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <HAL_InitTick+0x68>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	24000010 	.word	0x24000010
 800102c:	24000000 	.word	0x24000000
 8001030:	2400000c 	.word	0x2400000c

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	24000010 	.word	0x24000010
 8001058:	24000310 	.word	0x24000310

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	24000310 	.word	0x24000310

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24000010 	.word	0x24000010

080010bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <HAL_GetREVID+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0c1b      	lsrs	r3, r3, #16
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	5c001000 	.word	0x5c001000

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <__NVIC_SetPriorityGrouping+0x40>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <__NVIC_SetPriorityGrouping+0x40>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	05fa0000 	.word	0x05fa0000

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	@ (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	@ (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	@ 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f7ff ff8e 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff47 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff5e 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffb2 	bl	80011f4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012aa:	4b89      	ldr	r3, [pc, #548]	@ (80014d0 <HAL_GPIO_Init+0x234>)
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ae:	e194      	b.n	80015da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8186 	beq.w	80015d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_GPIO_Init+0x44>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d017      	beq.n	800137e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d123      	bne.n	80013d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	69b9      	ldr	r1, [r7, #24]
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0203 	and.w	r2, r3, #3
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80e0 	beq.w	80015d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <HAL_GPIO_Init+0x238>)
 8001416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800141a:	4a2e      	ldr	r2, [pc, #184]	@ (80014d4 <HAL_GPIO_Init+0x238>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <HAL_GPIO_Init+0x238>)
 8001426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a29      	ldr	r2, [pc, #164]	@ (80014d8 <HAL_GPIO_Init+0x23c>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a20      	ldr	r2, [pc, #128]	@ (80014dc <HAL_GPIO_Init+0x240>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d052      	beq.n	8001504 <HAL_GPIO_Init+0x268>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1f      	ldr	r2, [pc, #124]	@ (80014e0 <HAL_GPIO_Init+0x244>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d031      	beq.n	80014ca <HAL_GPIO_Init+0x22e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1e      	ldr	r2, [pc, #120]	@ (80014e4 <HAL_GPIO_Init+0x248>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d02b      	beq.n	80014c6 <HAL_GPIO_Init+0x22a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <HAL_GPIO_Init+0x24c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x226>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <HAL_GPIO_Init+0x250>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x222>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <HAL_GPIO_Init+0x254>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x21e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <HAL_GPIO_Init+0x258>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x21a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <HAL_GPIO_Init+0x25c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x216>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a18      	ldr	r2, [pc, #96]	@ (80014fc <HAL_GPIO_Init+0x260>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x212>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <HAL_GPIO_Init+0x264>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x20e>
 80014a6:	2309      	movs	r3, #9
 80014a8:	e02d      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014aa:	230a      	movs	r3, #10
 80014ac:	e02b      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014ae:	2308      	movs	r3, #8
 80014b0:	e029      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e027      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e025      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014ba:	2305      	movs	r3, #5
 80014bc:	e023      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014be:	2304      	movs	r3, #4
 80014c0:	e021      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e01f      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e01d      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e01b      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014ce:	bf00      	nop
 80014d0:	58000080 	.word	0x58000080
 80014d4:	58024400 	.word	0x58024400
 80014d8:	58000400 	.word	0x58000400
 80014dc:	58020000 	.word	0x58020000
 80014e0:	58020400 	.word	0x58020400
 80014e4:	58020800 	.word	0x58020800
 80014e8:	58020c00 	.word	0x58020c00
 80014ec:	58021000 	.word	0x58021000
 80014f0:	58021400 	.word	0x58021400
 80014f4:	58021800 	.word	0x58021800
 80014f8:	58021c00 	.word	0x58021c00
 80014fc:	58022000 	.word	0x58022000
 8001500:	58022400 	.word	0x58022400
 8001504:	2300      	movs	r3, #0
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001516:	4938      	ldr	r1, [pc, #224]	@ (80015f8 <HAL_GPIO_Init+0x35c>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800154a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001578:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f47f ae63 	bne.w	80012b0 <HAL_GPIO_Init+0x14>
  }
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	3724      	adds	r7, #36	@ 0x24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	58000400 	.word	0x58000400

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	041a      	lsls	r2, r3, #16
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43d9      	mvns	r1, r3
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	400b      	ands	r3, r1
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800166c:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <HAL_HSEM_FastTake+0x2c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3320      	adds	r3, #32
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_HSEM_FastTake+0x30>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e000      	b.n	8001682 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	58026400 	.word	0x58026400
 8001694:	80000300 	.word	0x80000300

08001698 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016a2:	4906      	ldr	r1, [pc, #24]	@ (80016bc <HAL_HSEM_Release+0x24>)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	58026400 	.word	0x58026400

080016c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016c8:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d00a      	beq.n	80016ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016d4:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e040      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e03e      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016ea:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80016f2:	491f      	ldr	r1, [pc, #124]	@ (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016fa:	f7ff fcaf 	bl	800105c <HAL_GetTick>
 80016fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001700:	e009      	b.n	8001716 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001702:	f7ff fcab 	bl	800105c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001710:	d901      	bls.n	8001716 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e028      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001722:	d1ee      	bne.n	8001702 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b1e      	cmp	r3, #30
 8001728:	d008      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b2e      	cmp	r3, #46	@ 0x2e
 800172e:	d005      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b1d      	cmp	r3, #29
 8001734:	d002      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b2d      	cmp	r3, #45	@ 0x2d
 800173a:	d114      	bne.n	8001766 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800173c:	f7ff fc8e 	bl	800105c <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001742:	e009      	b.n	8001758 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001744:	f7ff fc8a 	bl	800105c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001752:	d901      	bls.n	8001758 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e007      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001764:	d1ee      	bne.n	8001744 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	58024800 	.word	0x58024800

08001774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	@ 0x30
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f000 bc1d 	b.w	8001fc2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8087 	beq.w	80018a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001796:	4b99      	ldr	r3, [pc, #612]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017a0:	4b96      	ldr	r3, [pc, #600]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d007      	beq.n	80017bc <HAL_RCC_OscConfig+0x48>
 80017ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ae:	2b18      	cmp	r3, #24
 80017b0:	d110      	bne.n	80017d4 <HAL_RCC_OscConfig+0x60>
 80017b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d10b      	bne.n	80017d4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	4b8f      	ldr	r3, [pc, #572]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d06c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x12e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d168      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e3f6      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017dc:	d106      	bne.n	80017ec <HAL_RCC_OscConfig+0x78>
 80017de:	4b87      	ldr	r3, [pc, #540]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a86      	ldr	r2, [pc, #536]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e02e      	b.n	800184a <HAL_RCC_OscConfig+0xd6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10c      	bne.n	800180e <HAL_RCC_OscConfig+0x9a>
 80017f4:	4b81      	ldr	r3, [pc, #516]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a80      	ldr	r2, [pc, #512]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b7e      	ldr	r3, [pc, #504]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a7d      	ldr	r2, [pc, #500]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e01d      	b.n	800184a <HAL_RCC_OscConfig+0xd6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001816:	d10c      	bne.n	8001832 <HAL_RCC_OscConfig+0xbe>
 8001818:	4b78      	ldr	r3, [pc, #480]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a77      	ldr	r2, [pc, #476]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 800181e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b75      	ldr	r3, [pc, #468]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a74      	ldr	r2, [pc, #464]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e00b      	b.n	800184a <HAL_RCC_OscConfig+0xd6>
 8001832:	4b72      	ldr	r3, [pc, #456]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a71      	ldr	r2, [pc, #452]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b6f      	ldr	r3, [pc, #444]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6e      	ldr	r2, [pc, #440]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001844:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001848:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d013      	beq.n	800187a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff fc03 	bl	800105c <HAL_GetTick>
 8001856:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185a:	f7ff fbff 	bl	800105c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	@ 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e3aa      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186c:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0xe6>
 8001878:	e014      	b.n	80018a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fbef 	bl	800105c <HAL_GetTick>
 800187e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001882:	f7ff fbeb 	bl	800105c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b64      	cmp	r3, #100	@ 0x64
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e396      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001894:	4b59      	ldr	r3, [pc, #356]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x10e>
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80cb 	beq.w	8001a48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b2:	4b52      	ldr	r3, [pc, #328]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018bc:	4b4f      	ldr	r3, [pc, #316]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_RCC_OscConfig+0x164>
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	2b18      	cmp	r3, #24
 80018cc:	d156      	bne.n	800197c <HAL_RCC_OscConfig+0x208>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d151      	bne.n	800197c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d8:	4b48      	ldr	r3, [pc, #288]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x17c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e368      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018f0:	4b42      	ldr	r3, [pc, #264]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 0219 	bic.w	r2, r3, #25
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	493f      	ldr	r1, [pc, #252]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001902:	f7ff fbab 	bl	800105c <HAL_GetTick>
 8001906:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fba7 	bl	800105c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e352      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191c:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	f7ff fbc8 	bl	80010bc <HAL_GetREVID>
 800192c:	4603      	mov	r3, r0
 800192e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001932:	4293      	cmp	r3, r2
 8001934:	d817      	bhi.n	8001966 <HAL_RCC_OscConfig+0x1f2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b40      	cmp	r3, #64	@ 0x40
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x1dc>
 800193e:	4b2f      	ldr	r3, [pc, #188]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001946:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194e:	e07b      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	031b      	lsls	r3, r3, #12
 800195e:	4927      	ldr	r1, [pc, #156]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	e070      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	4921      	ldr	r1, [pc, #132]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197a:	e065      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d048      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001984:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 0219 	bic.w	r2, r3, #25
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	491a      	ldr	r1, [pc, #104]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff fb61 	bl	800105c <HAL_GetTick>
 800199a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fb5d 	bl	800105c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e308      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	f7ff fb7e 	bl	80010bc <HAL_GetREVID>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d81a      	bhi.n	8001a00 <HAL_RCC_OscConfig+0x28c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b40      	cmp	r3, #64	@ 0x40
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0x270>
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e0:	6053      	str	r3, [r2, #4]
 80019e2:	e031      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	031b      	lsls	r3, r3, #12
 80019f2:	4902      	ldr	r1, [pc, #8]	@ (80019fc <HAL_RCC_OscConfig+0x288>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
 80019f8:	e026      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
 80019fa:	bf00      	nop
 80019fc:	58024400 	.word	0x58024400
 8001a00:	4b9a      	ldr	r3, [pc, #616]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	4997      	ldr	r1, [pc, #604]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e018      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b95      	ldr	r3, [pc, #596]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a94      	ldr	r2, [pc, #592]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fb1b 	bl	800105c <HAL_GetTick>
 8001a26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fb17 	bl	800105c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e2c2      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3c:	4b8b      	ldr	r3, [pc, #556]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a9 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a56:	4b85      	ldr	r3, [pc, #532]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a60:	4b82      	ldr	r3, [pc, #520]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a64:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d007      	beq.n	8001a7c <HAL_RCC_OscConfig+0x308>
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b18      	cmp	r3, #24
 8001a70:	d13a      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x374>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d135      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x320>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b80      	cmp	r3, #128	@ 0x80
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e296      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a94:	f7ff fb12 	bl	80010bc <HAL_GetREVID>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d817      	bhi.n	8001ad2 <HAL_RCC_OscConfig+0x35e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_OscConfig+0x348>
 8001aaa:	4b70      	ldr	r3, [pc, #448]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ab8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aba:	e075      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001abc:	4b6b      	ldr	r3, [pc, #428]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	069b      	lsls	r3, r3, #26
 8001aca:	4968      	ldr	r1, [pc, #416]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ad0:	e06a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ad2:	4b66      	ldr	r3, [pc, #408]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	4962      	ldr	r1, [pc, #392]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae6:	e05f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d042      	beq.n	8001b76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001af0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff faae 	bl	800105c <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b04:	f7ff faaa 	bl	800105c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e255      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b16:	4b55      	ldr	r3, [pc, #340]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b22:	f7ff facb 	bl	80010bc <HAL_GetREVID>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d817      	bhi.n	8001b60 <HAL_RCC_OscConfig+0x3ec>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d108      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3d6>
 8001b38:	4b4c      	ldr	r3, [pc, #304]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b40:	4a4a      	ldr	r2, [pc, #296]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b46:	6053      	str	r3, [r2, #4]
 8001b48:	e02e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
 8001b4a:	4b48      	ldr	r3, [pc, #288]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	069b      	lsls	r3, r3, #26
 8001b58:	4944      	ldr	r1, [pc, #272]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	e023      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
 8001b60:	4b42      	ldr	r3, [pc, #264]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	493f      	ldr	r1, [pc, #252]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
 8001b74:	e018      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b76:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa6b 	bl	800105c <HAL_GetTick>
 8001b86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fa67 	bl	800105c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e212      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b9c:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d036      	beq.n	8001c22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d019      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fa48 	bl	800105c <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fa44 	bl	800105c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1ef      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x45c>
 8001bee:	e018      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fa2e 	bl	800105c <HAL_GetTick>
 8001c00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fa2a 	bl	800105c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1d5      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d039      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fa0b 	bl	800105c <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c4a:	f7ff fa07 	bl	800105c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1b2      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4d6>
 8001c68:	e01b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x52e>
 8001c6a:	bf00      	nop
 8001c6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c70:	4b9b      	ldr	r3, [pc, #620]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a9a      	ldr	r2, [pc, #616]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f9ee 	bl	800105c <HAL_GetTick>
 8001c80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c84:	f7ff f9ea 	bl	800105c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e195      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c96:	4b92      	ldr	r3, [pc, #584]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8081 	beq.w	8001db2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cb0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a8b      	ldr	r2, [pc, #556]	@ (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff f9ce 	bl	800105c <HAL_GetTick>
 8001cc0:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7ff f9ca 	bl	800105c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	@ 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e175      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd6:	4b83      	ldr	r3, [pc, #524]	@ (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x584>
 8001cea:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cee:	4a7c      	ldr	r2, [pc, #496]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf6:	e02d      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5a6>
 8001d00:	4b77      	ldr	r3, [pc, #476]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d04:	4a76      	ldr	r2, [pc, #472]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0c:	4b74      	ldr	r3, [pc, #464]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d10:	4a73      	ldr	r2, [pc, #460]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c8>
 8001d22:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d32:	4a6b      	ldr	r2, [pc, #428]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001d3c:	4b68      	ldr	r3, [pc, #416]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d40:	4a67      	ldr	r2, [pc, #412]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d48:	4b65      	ldr	r3, [pc, #404]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4c:	4a64      	ldr	r2, [pc, #400]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d015      	beq.n	8001d88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f97e 	bl	800105c <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff f97a 	bl	800105c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e123      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d7a:	4b59      	ldr	r3, [pc, #356]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0ee      	beq.n	8001d64 <HAL_RCC_OscConfig+0x5f0>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f968 	bl	800105c <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff f964 	bl	800105c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e10d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ee      	bne.n	8001d90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8102 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dbc:	4b48      	ldr	r3, [pc, #288]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dc4:	2b18      	cmp	r3, #24
 8001dc6:	f000 80bd 	beq.w	8001f44 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	f040 809e 	bne.w	8001f10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b42      	ldr	r3, [pc, #264]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a41      	ldr	r2, [pc, #260]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f93c 	bl	800105c <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff f938 	bl	800105c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0e3      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e06:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ee8 <HAL_RCC_OscConfig+0x774>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	4931      	ldr	r1, [pc, #196]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	3b01      	subs	r3, #1
 8001e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	061b      	lsls	r3, r3, #24
 8001e4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e50:	4923      	ldr	r1, [pc, #140]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e66:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <HAL_RCC_OscConfig+0x778>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e6e:	00d2      	lsls	r2, r2, #3
 8001e70:	491b      	ldr	r1, [pc, #108]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7a:	f023 020c 	bic.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4917      	ldr	r1, [pc, #92]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	f023 0202 	bic.w	r2, r3, #2
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e94:	4912      	ldr	r1, [pc, #72]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eca:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff f8c1 	bl	800105c <HAL_GetTick>
 8001eda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001edc:	e011      	b.n	8001f02 <HAL_RCC_OscConfig+0x78e>
 8001ede:	bf00      	nop
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58024800 	.word	0x58024800
 8001ee8:	fffffc0c 	.word	0xfffffc0c
 8001eec:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff f8b4 	bl	800105c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e05f      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f02:	4b32      	ldr	r3, [pc, #200]	@ (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x77c>
 8001f0e:	e057      	b.n	8001fc0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2d      	ldr	r2, [pc, #180]	@ (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f89e 	bl	800105c <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff f89a 	bl	800105c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e045      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f36:	4b25      	ldr	r3, [pc, #148]	@ (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x7b0>
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f44:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d031      	beq.n	8001fbc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d12a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d122      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0a5b      	lsrs	r3, r3, #9
 8001f8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	0e1b      	lsrs	r3, r3, #24
 8001fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3730      	adds	r7, #48	@ 0x30
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	58024400 	.word	0x58024400

08001fd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e19c      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d910      	bls.n	8002014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b87      	ldr	r3, [pc, #540]	@ (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 020f 	bic.w	r2, r3, #15
 8001ffa:	4985      	ldr	r1, [pc, #532]	@ (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b83      	ldr	r3, [pc, #524]	@ (8002210 <HAL_RCC_ClockConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e184      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	4b7b      	ldr	r3, [pc, #492]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800202c:	429a      	cmp	r2, r3
 800202e:	d908      	bls.n	8002042 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002030:	4b78      	ldr	r3, [pc, #480]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	4975      	ldr	r1, [pc, #468]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 800203e:	4313      	orrs	r3, r2
 8002040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	4b70      	ldr	r3, [pc, #448]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800205a:	429a      	cmp	r2, r3
 800205c:	d908      	bls.n	8002070 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800205e:	4b6d      	ldr	r3, [pc, #436]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	496a      	ldr	r1, [pc, #424]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 800206c:	4313      	orrs	r3, r2
 800206e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	4b64      	ldr	r3, [pc, #400]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002088:	429a      	cmp	r2, r3
 800208a:	d908      	bls.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800208c:	4b61      	ldr	r3, [pc, #388]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	495e      	ldr	r1, [pc, #376]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 800209a:	4313      	orrs	r3, r2
 800209c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020ba:	4b56      	ldr	r3, [pc, #344]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4953      	ldr	r1, [pc, #332]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d908      	bls.n	80020fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f023 020f 	bic.w	r2, r3, #15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4947      	ldr	r1, [pc, #284]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d055      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002106:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4940      	ldr	r1, [pc, #256]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002114:	4313      	orrs	r3, r2
 8002116:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002120:	4b3c      	ldr	r3, [pc, #240]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d121      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0f6      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002138:	4b36      	ldr	r3, [pc, #216]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d115      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0ea      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002150:	4b30      	ldr	r3, [pc, #192]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0de      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002160:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0d6      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002170:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f023 0207 	bic.w	r2, r3, #7
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4925      	ldr	r1, [pc, #148]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 800217e:	4313      	orrs	r3, r2
 8002180:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7fe ff6b 	bl	800105c <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7fe ff67 	bl	800105c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0be      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d1eb      	bne.n	800218a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d208      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	490e      	ldr	r1, [pc, #56]	@ (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d214      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 020f 	bic.w	r2, r3, #15
 80021f6:	4906      	ldr	r1, [pc, #24]	@ (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <HAL_RCC_ClockConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e086      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
 8002210:	52002000 	.word	0x52002000
 8002214:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	4b3f      	ldr	r3, [pc, #252]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002230:	429a      	cmp	r2, r3
 8002232:	d208      	bcs.n	8002246 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002234:	4b3c      	ldr	r3, [pc, #240]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4939      	ldr	r1, [pc, #228]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002242:	4313      	orrs	r3, r2
 8002244:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	4b34      	ldr	r3, [pc, #208]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800225e:	429a      	cmp	r2, r3
 8002260:	d208      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002262:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	492e      	ldr	r1, [pc, #184]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002270:	4313      	orrs	r3, r2
 8002272:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800228c:	429a      	cmp	r2, r3
 800228e:	d208      	bcs.n	80022a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002290:	4b25      	ldr	r3, [pc, #148]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4922      	ldr	r1, [pc, #136]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d010      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d208      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022be:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4917      	ldr	r1, [pc, #92]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022d0:	f000 f834 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	4912      	ldr	r1, [pc, #72]	@ (800232c <HAL_RCC_ClockConfig+0x35c>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_RCC_ClockConfig+0x35c>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_RCC_ClockConfig+0x360>)
 8002306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002308:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <HAL_RCC_ClockConfig+0x364>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_RCC_ClockConfig+0x368>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fe58 	bl	8000fc8 <HAL_InitTick>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	58024400 	.word	0x58024400
 800232c:	08008358 	.word	0x08008358
 8002330:	24000004 	.word	0x24000004
 8002334:	24000000 	.word	0x24000000
 8002338:	2400000c 	.word	0x2400000c

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002342:	4bb3      	ldr	r3, [pc, #716]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800234a:	2b18      	cmp	r3, #24
 800234c:	f200 8155 	bhi.w	80025fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002350:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	080023bd 	.word	0x080023bd
 800235c:	080025fb 	.word	0x080025fb
 8002360:	080025fb 	.word	0x080025fb
 8002364:	080025fb 	.word	0x080025fb
 8002368:	080025fb 	.word	0x080025fb
 800236c:	080025fb 	.word	0x080025fb
 8002370:	080025fb 	.word	0x080025fb
 8002374:	080025fb 	.word	0x080025fb
 8002378:	080023e3 	.word	0x080023e3
 800237c:	080025fb 	.word	0x080025fb
 8002380:	080025fb 	.word	0x080025fb
 8002384:	080025fb 	.word	0x080025fb
 8002388:	080025fb 	.word	0x080025fb
 800238c:	080025fb 	.word	0x080025fb
 8002390:	080025fb 	.word	0x080025fb
 8002394:	080025fb 	.word	0x080025fb
 8002398:	080023e9 	.word	0x080023e9
 800239c:	080025fb 	.word	0x080025fb
 80023a0:	080025fb 	.word	0x080025fb
 80023a4:	080025fb 	.word	0x080025fb
 80023a8:	080025fb 	.word	0x080025fb
 80023ac:	080025fb 	.word	0x080025fb
 80023b0:	080025fb 	.word	0x080025fb
 80023b4:	080025fb 	.word	0x080025fb
 80023b8:	080023ef 	.word	0x080023ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023bc:	4b94      	ldr	r3, [pc, #592]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023c8:	4b91      	ldr	r3, [pc, #580]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	4a90      	ldr	r2, [pc, #576]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023da:	e111      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023de:	61bb      	str	r3, [r7, #24]
    break;
 80023e0:	e10e      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023e4:	61bb      	str	r3, [r7, #24]
    break;
 80023e6:	e10b      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023e8:	4b8c      	ldr	r3, [pc, #560]	@ (800261c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023ea:	61bb      	str	r3, [r7, #24]
    break;
 80023ec:	e108      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023ee:	4b88      	ldr	r3, [pc, #544]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023f8:	4b85      	ldr	r3, [pc, #532]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002402:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002404:	4b82      	ldr	r3, [pc, #520]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800240e:	4b80      	ldr	r3, [pc, #512]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80e1 	beq.w	80025f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b02      	cmp	r3, #2
 8002436:	f000 8083 	beq.w	8002540 <HAL_RCC_GetSysClockFreq+0x204>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b02      	cmp	r3, #2
 800243e:	f200 80a1 	bhi.w	8002584 <HAL_RCC_GetSysClockFreq+0x248>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x114>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d056      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800244e:	e099      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002450:	4b6f      	ldr	r3, [pc, #444]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02d      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800245c:	4b6c      	ldr	r3, [pc, #432]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	4a6b      	ldr	r2, [pc, #428]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b62      	ldr	r3, [pc, #392]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a02 	vldr	s12, [r7, #8]
 800249a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024b6:	e087      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002624 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ca:	4b51      	ldr	r3, [pc, #324]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024da:	ed97 6a02 	vldr	s12, [r7, #8]
 80024de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024fa:	e065      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002628 <HAL_RCC_GetSysClockFreq+0x2ec>
 800250a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250e:	4b40      	ldr	r3, [pc, #256]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002522:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800252a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800253e:	e043      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800262c <HAL_RCC_GetSysClockFreq+0x2f0>
 800254e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002552:	4b2f      	ldr	r3, [pc, #188]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002562:	ed97 6a02 	vldr	s12, [r7, #8]
 8002566:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800256a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800256e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800257a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002582:	e021      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002628 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002596:	4b1e      	ldr	r3, [pc, #120]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	0a5b      	lsrs	r3, r3, #9
 80025ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025d2:	3301      	adds	r3, #1
 80025d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
 80025f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025f2:	e005      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
    break;
 80025f8:	e002      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025fc:	61bb      	str	r3, [r7, #24]
    break;
 80025fe:	bf00      	nop
  }

  return sysclockfreq;
 8002600:	69bb      	ldr	r3, [r7, #24]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	@ 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	58024400 	.word	0x58024400
 8002614:	03d09000 	.word	0x03d09000
 8002618:	003d0900 	.word	0x003d0900
 800261c:	007a1200 	.word	0x007a1200
 8002620:	46000000 	.word	0x46000000
 8002624:	4c742400 	.word	0x4c742400
 8002628:	4a742400 	.word	0x4a742400
 800262c:	4af42400 	.word	0x4af42400

08002630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002636:	f7ff fe81 	bl	800233c <HAL_RCC_GetSysClockFreq>
 800263a:	4602      	mov	r2, r0
 800263c:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_RCC_GetHCLKFreq+0x50>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	490f      	ldr	r1, [pc, #60]	@ (8002684 <HAL_RCC_GetHCLKFreq+0x54>)
 8002648:	5ccb      	ldrb	r3, [r1, r3]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_RCC_GetHCLKFreq+0x50>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	4a09      	ldr	r2, [pc, #36]	@ (8002684 <HAL_RCC_GetHCLKFreq+0x54>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <HAL_RCC_GetHCLKFreq+0x58>)
 800266c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800266e:	4a07      	ldr	r2, [pc, #28]	@ (800268c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002674:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <HAL_RCC_GetHCLKFreq+0x58>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	58024400 	.word	0x58024400
 8002684:	08008358 	.word	0x08008358
 8002688:	24000004 	.word	0x24000004
 800268c:	24000000 	.word	0x24000000

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002694:	f7ff ffcc 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4904      	ldr	r1, [pc, #16]	@ (80026b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	08008358 	.word	0x08008358

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80026c0:	f7ff ffb6 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4904      	ldr	r1, [pc, #16]	@ (80026e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	58024400 	.word	0x58024400
 80026e4:	08008358 	.word	0x08008358

080026e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026f0:	2300      	movs	r3, #0
 80026f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026f4:	2300      	movs	r3, #0
 80026f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d03f      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002708:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800270c:	d02a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800270e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002712:	d824      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002718:	d018      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800271a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800271e:	d81e      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002724:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002728:	d007      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800272a:	e018      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800272c:	4ba3      	ldr	r3, [pc, #652]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	4aa2      	ldr	r2, [pc, #648]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002736:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002738:	e015      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	2102      	movs	r1, #2
 8002740:	4618      	mov	r0, r3
 8002742:	f001 f9d5 	bl	8003af0 <RCCEx_PLL2_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800274a:	e00c      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3324      	adds	r3, #36	@ 0x24
 8002750:	2102      	movs	r1, #2
 8002752:	4618      	mov	r0, r3
 8002754:	f001 fa7e 	bl	8003c54 <RCCEx_PLL3_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800275c:	e003      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
      break;
 8002762:	e000      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800276c:	4b93      	ldr	r3, [pc, #588]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800276e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002770:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002778:	4990      	ldr	r1, [pc, #576]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	650b      	str	r3, [r1, #80]	@ 0x50
 800277e:	e001      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d03d      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002794:	2b04      	cmp	r3, #4
 8002796:	d826      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b5 	.word	0x080027b5
 80027a4:	080027c3 	.word	0x080027c3
 80027a8:	080027d5 	.word	0x080027d5
 80027ac:	080027ed 	.word	0x080027ed
 80027b0:	080027ed 	.word	0x080027ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b4:	4b81      	ldr	r3, [pc, #516]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	4a80      	ldr	r2, [pc, #512]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027be:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027c0:	e015      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 f991 	bl	8003af0 <RCCEx_PLL2_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3324      	adds	r3, #36	@ 0x24
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 fa3a 	bl	8003c54 <RCCEx_PLL3_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4b71      	ldr	r3, [pc, #452]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f8:	f023 0207 	bic.w	r2, r3, #7
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002800:	496e      	ldr	r1, [pc, #440]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	650b      	str	r3, [r1, #80]	@ 0x50
 8002806:	e001      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002814:	2b00      	cmp	r3, #0
 8002816:	d042      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002820:	d02b      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002826:	d825      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002828:	2bc0      	cmp	r3, #192	@ 0xc0
 800282a:	d028      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800282c:	2bc0      	cmp	r3, #192	@ 0xc0
 800282e:	d821      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002830:	2b80      	cmp	r3, #128	@ 0x80
 8002832:	d016      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002834:	2b80      	cmp	r3, #128	@ 0x80
 8002836:	d81d      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800283c:	2b40      	cmp	r3, #64	@ 0x40
 800283e:	d007      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002840:	e018      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002842:	4b5e      	ldr	r3, [pc, #376]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	4a5d      	ldr	r2, [pc, #372]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800284e:	e017      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f001 f94a 	bl	8003af0 <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002860:	e00e      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3324      	adds	r3, #36	@ 0x24
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f9f3 	bl	8003c54 <RCCEx_PLL3_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002872:	e005      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	75fb      	strb	r3, [r7, #23]
      break;
 8002878:	e002      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800287a:	bf00      	nop
 800287c:	e000      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800287e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002886:	4b4d      	ldr	r3, [pc, #308]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288a:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	494a      	ldr	r1, [pc, #296]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	650b      	str	r3, [r1, #80]	@ 0x50
 8002898:	e001      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289a:	7dfb      	ldrb	r3, [r7, #23]
 800289c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d049      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028b4:	d030      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80028b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028ba:	d82a      	bhi.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80028c0:	d02c      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80028c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80028c6:	d824      	bhi.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028cc:	d018      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80028ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028d2:	d81e      	bhi.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80028d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028dc:	d007      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80028de:	e018      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e0:	4b36      	ldr	r3, [pc, #216]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	4a35      	ldr	r2, [pc, #212]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028ec:	e017      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 f8fb 	bl	8003af0 <RCCEx_PLL2_Config>
 80028fa:	4603      	mov	r3, r0
 80028fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028fe:	e00e      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3324      	adds	r3, #36	@ 0x24
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f001 f9a4 	bl	8003c54 <RCCEx_PLL3_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002910:	e005      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
      break;
 8002916:	e002      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800291c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002924:	4b25      	ldr	r3, [pc, #148]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002932:	4922      	ldr	r1, [pc, #136]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	658b      	str	r3, [r1, #88]	@ 0x58
 8002938:	e001      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002946:	2b00      	cmp	r3, #0
 8002948:	d04b      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002950:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002954:	d030      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002956:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800295a:	d82a      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800295c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002960:	d02e      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002962:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002966:	d824      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002968:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800296c:	d018      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800296e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002972:	d81e      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d007      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800297e:	e018      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002980:	4b0e      	ldr	r3, [pc, #56]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	4a0d      	ldr	r2, [pc, #52]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800298c:	e019      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f001 f8ab 	bl	8003af0 <RCCEx_PLL2_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800299e:	e010      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3324      	adds	r3, #36	@ 0x24
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 f954 	bl	8003c54 <RCCEx_PLL3_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b0:	e007      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
      break;
 80029b6:	e004      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80029b8:	bf00      	nop
 80029ba:	e002      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80029bc:	58024400 	.word	0x58024400
      break;
 80029c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80029c8:	4b99      	ldr	r3, [pc, #612]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029cc:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80029d6:	4996      	ldr	r1, [pc, #600]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	658b      	str	r3, [r1, #88]	@ 0x58
 80029dc:	e001      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d032      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f2:	2b30      	cmp	r3, #48	@ 0x30
 80029f4:	d01c      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80029f6:	2b30      	cmp	r3, #48	@ 0x30
 80029f8:	d817      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d00c      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d813      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d10f      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a0a:	4b89      	ldr	r3, [pc, #548]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	4a88      	ldr	r2, [pc, #544]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a16:	e00e      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 f866 	bl	8003af0 <RCCEx_PLL2_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a28:	e005      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a3c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a48:	4979      	ldr	r1, [pc, #484]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002a4e:	e001      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d047      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a68:	d030      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a6e:	d82a      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a74:	d02c      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a7a:	d824      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a80:	d018      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a86:	d81e      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a90:	d007      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002a92:	e018      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a94:	4b66      	ldr	r3, [pc, #408]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	4a65      	ldr	r2, [pc, #404]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002aa0:	e017      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 f821 	bl	8003af0 <RCCEx_PLL2_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ab2:	e00e      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3324      	adds	r3, #36	@ 0x24
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 f8ca 	bl	8003c54 <RCCEx_PLL3_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ac4:	e005      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ad8:	4b55      	ldr	r3, [pc, #340]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002adc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae4:	4952      	ldr	r1, [pc, #328]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	650b      	str	r3, [r1, #80]	@ 0x50
 8002aea:	e001      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d049      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b04:	d02e      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0a:	d828      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b10:	d02a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002b12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b16:	d822      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b1c:	d026      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002b1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b22:	d81c      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b28:	d010      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002b2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b2e:	d816      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01d      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b38:	d111      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 ffd5 	bl	8003af0 <RCCEx_PLL2_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b4a:	e012      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3324      	adds	r3, #36	@ 0x24
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 f87e 	bl	8003c54 <RCCEx_PLL3_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b5c:	e009      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
      break;
 8002b62:	e006      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b64:	bf00      	nop
 8002b66:	e004      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b68:	bf00      	nop
 8002b6a:	e002      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b78:	4b2d      	ldr	r3, [pc, #180]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b7c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b84:	492a      	ldr	r1, [pc, #168]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	650b      	str	r3, [r1, #80]	@ 0x50
 8002b8a:	e001      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d04d      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba6:	d02e      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bac:	d828      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb2:	d02a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb8:	d822      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bbe:	d026      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002bc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bc4:	d81c      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bca:	d010      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bd0:	d816      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01d      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bda:	d111      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 ff84 	bl	8003af0 <RCCEx_PLL2_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bec:	e012      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3324      	adds	r3, #36	@ 0x24
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 f82d 	bl	8003c54 <RCCEx_PLL3_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bfe:	e009      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
      break;
 8002c04:	e006      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c06:	bf00      	nop
 8002c08:	e004      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e002      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c28:	4901      	ldr	r1, [pc, #4]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	658b      	str	r3, [r1, #88]	@ 0x58
 8002c2e:	e003      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d02f      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c4c:	d00e      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c52:	d814      	bhi.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c5c:	d10f      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c5e:	4baf      	ldr	r3, [pc, #700]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4aae      	ldr	r2, [pc, #696]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c6a:	e00c      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	2101      	movs	r1, #1
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 ff3c 	bl	8003af0 <RCCEx_PLL2_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c7c:	e003      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
      break;
 8002c82:	e000      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c8c:	4ba3      	ldr	r3, [pc, #652]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c90:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c98:	49a0      	ldr	r1, [pc, #640]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	650b      	str	r3, [r1, #80]	@ 0x50
 8002c9e:	e001      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d032      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d81b      	bhi.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cf7 	.word	0x08002cf7
 8002cc4:	08002cd1 	.word	0x08002cd1
 8002cc8:	08002cdf 	.word	0x08002cdf
 8002ccc:	08002cf7 	.word	0x08002cf7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd0:	4b92      	ldr	r3, [pc, #584]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	4a91      	ldr	r2, [pc, #580]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cdc:	e00c      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 ff03 	bl	8003af0 <RCCEx_PLL2_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cee:	e003      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cfe:	4b87      	ldr	r3, [pc, #540]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	4984      	ldr	r1, [pc, #528]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002d10:	e001      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8086 	beq.w	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d24:	4b7e      	ldr	r3, [pc, #504]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7d      	ldr	r2, [pc, #500]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d30:	f7fe f994 	bl	800105c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d36:	e009      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d38:	f7fe f990 	bl	800105c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	@ 0x64
 8002d44:	d902      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	75fb      	strb	r3, [r7, #23]
        break;
 8002d4a:	e005      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4c:	4b74      	ldr	r3, [pc, #464]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ef      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d166      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d68:	4053      	eors	r3, r2
 8002d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d013      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d72:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d7c:	4b67      	ldr	r3, [pc, #412]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d80:	4a66      	ldr	r2, [pc, #408]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d86:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d88:	4b64      	ldr	r3, [pc, #400]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8c:	4a63      	ldr	r2, [pc, #396]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d92:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d94:	4a61      	ldr	r2, [pc, #388]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da4:	d115      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe f959 	bl	800105c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe f955 	bl	800105c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d902      	bls.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	75fb      	strb	r3, [r7, #23]
            break;
 8002dc4:	e005      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dc6:	4b55      	ldr	r3, [pc, #340]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0ed      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d126      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002de6:	d10d      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002de8:	4b4c      	ldr	r3, [pc, #304]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002df6:	0919      	lsrs	r1, r3, #4
 8002df8:	4b4a      	ldr	r3, [pc, #296]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	4947      	ldr	r1, [pc, #284]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	610b      	str	r3, [r1, #16]
 8002e02:	e005      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002e04:	4b45      	ldr	r3, [pc, #276]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	4a44      	ldr	r2, [pc, #272]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e0e:	6113      	str	r3, [r2, #16]
 8002e10:	4b42      	ldr	r3, [pc, #264]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1e:	493f      	ldr	r1, [pc, #252]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	670b      	str	r3, [r1, #112]	@ 0x70
 8002e24:	e004      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
 8002e28:	75bb      	strb	r3, [r7, #22]
 8002e2a:	e001      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8085 	beq.w	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e42:	2b28      	cmp	r3, #40	@ 0x28
 8002e44:	d866      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002e46:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002f29 	.word	0x08002f29
 8002e50:	08002f15 	.word	0x08002f15
 8002e54:	08002f15 	.word	0x08002f15
 8002e58:	08002f15 	.word	0x08002f15
 8002e5c:	08002f15 	.word	0x08002f15
 8002e60:	08002f15 	.word	0x08002f15
 8002e64:	08002f15 	.word	0x08002f15
 8002e68:	08002f15 	.word	0x08002f15
 8002e6c:	08002ef1 	.word	0x08002ef1
 8002e70:	08002f15 	.word	0x08002f15
 8002e74:	08002f15 	.word	0x08002f15
 8002e78:	08002f15 	.word	0x08002f15
 8002e7c:	08002f15 	.word	0x08002f15
 8002e80:	08002f15 	.word	0x08002f15
 8002e84:	08002f15 	.word	0x08002f15
 8002e88:	08002f15 	.word	0x08002f15
 8002e8c:	08002f03 	.word	0x08002f03
 8002e90:	08002f15 	.word	0x08002f15
 8002e94:	08002f15 	.word	0x08002f15
 8002e98:	08002f15 	.word	0x08002f15
 8002e9c:	08002f15 	.word	0x08002f15
 8002ea0:	08002f15 	.word	0x08002f15
 8002ea4:	08002f15 	.word	0x08002f15
 8002ea8:	08002f15 	.word	0x08002f15
 8002eac:	08002f29 	.word	0x08002f29
 8002eb0:	08002f15 	.word	0x08002f15
 8002eb4:	08002f15 	.word	0x08002f15
 8002eb8:	08002f15 	.word	0x08002f15
 8002ebc:	08002f15 	.word	0x08002f15
 8002ec0:	08002f15 	.word	0x08002f15
 8002ec4:	08002f15 	.word	0x08002f15
 8002ec8:	08002f15 	.word	0x08002f15
 8002ecc:	08002f29 	.word	0x08002f29
 8002ed0:	08002f15 	.word	0x08002f15
 8002ed4:	08002f15 	.word	0x08002f15
 8002ed8:	08002f15 	.word	0x08002f15
 8002edc:	08002f15 	.word	0x08002f15
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	08002f15 	.word	0x08002f15
 8002ee8:	08002f15 	.word	0x08002f15
 8002eec:	08002f29 	.word	0x08002f29
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fdfa 	bl	8003af0 <RCCEx_PLL2_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f00:	e013      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3324      	adds	r3, #36	@ 0x24
 8002f06:	2101      	movs	r1, #1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fea3 	bl	8003c54 <RCCEx_PLL3_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f12:	e00a      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	75fb      	strb	r3, [r7, #23]
      break;
 8002f18:	e007      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f1a:	bf00      	nop
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	58024800 	.word	0x58024800
 8002f24:	00ffffcf 	.word	0x00ffffcf
      break;
 8002f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f30:	4b96      	ldr	r3, [pc, #600]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f34:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f3c:	4993      	ldr	r1, [pc, #588]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	654b      	str	r3, [r1, #84]	@ 0x54
 8002f42:	e001      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d038      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d821      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f62:	bf00      	nop
 8002f64:	08002fa7 	.word	0x08002fa7
 8002f68:	08002f7d 	.word	0x08002f7d
 8002f6c:	08002f8f 	.word	0x08002f8f
 8002f70:	08002fa7 	.word	0x08002fa7
 8002f74:	08002fa7 	.word	0x08002fa7
 8002f78:	08002fa7 	.word	0x08002fa7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	2101      	movs	r1, #1
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fdb4 	bl	8003af0 <RCCEx_PLL2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f8c:	e00c      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3324      	adds	r3, #36	@ 0x24
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fe5d 	bl	8003c54 <RCCEx_PLL3_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fae:	4b77      	ldr	r3, [pc, #476]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	4974      	ldr	r1, [pc, #464]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	654b      	str	r3, [r1, #84]	@ 0x54
 8002fc0:	e001      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d821      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08003027 	.word	0x08003027
 8002fe8:	08002ffd 	.word	0x08002ffd
 8002fec:	0800300f 	.word	0x0800300f
 8002ff0:	08003027 	.word	0x08003027
 8002ff4:	08003027 	.word	0x08003027
 8002ff8:	08003027 	.word	0x08003027
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fd74 	bl	8003af0 <RCCEx_PLL2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800300c:	e00c      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3324      	adds	r3, #36	@ 0x24
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fe1d 	bl	8003c54 <RCCEx_PLL3_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800301e:	e003      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
      break;
 8003024:	e000      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800302e:	4b57      	ldr	r3, [pc, #348]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	f023 0207 	bic.w	r2, r3, #7
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303c:	4953      	ldr	r1, [pc, #332]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	658b      	str	r3, [r1, #88]	@ 0x58
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d04b      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800305e:	d02e      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003064:	d828      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306a:	d02a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003070:	d822      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003072:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003076:	d026      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003078:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800307c:	d81c      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800307e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003082:	d010      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003088:	d816      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01d      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800308e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003092:	d111      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fd28 	bl	8003af0 <RCCEx_PLL2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030a4:	e012      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3324      	adds	r3, #36	@ 0x24
 80030aa:	2102      	movs	r1, #2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fdd1 	bl	8003c54 <RCCEx_PLL3_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
      break;
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80030be:	bf00      	nop
 80030c0:	e004      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80030c2:	bf00      	nop
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80030ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d2:	4b2e      	ldr	r3, [pc, #184]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d6:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e0:	492a      	ldr	r1, [pc, #168]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	654b      	str	r3, [r1, #84]	@ 0x54
 80030e6:	e001      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d04d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003102:	d02e      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003104:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003108:	d828      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310e:	d02a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003114:	d822      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003116:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800311a:	d026      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800311c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003120:	d81c      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003122:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003126:	d010      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800312c:	d816      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01d      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003136:	d111      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fcd6 	bl	8003af0 <RCCEx_PLL2_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003148:	e012      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3324      	adds	r3, #36	@ 0x24
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fd7f 	bl	8003c54 <RCCEx_PLL3_Config>
 8003156:	4603      	mov	r3, r0
 8003158:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800315a:	e009      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	75fb      	strb	r3, [r7, #23]
      break;
 8003160:	e006      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003162:	bf00      	nop
 8003164:	e004      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800316e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003176:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003184:	4901      	ldr	r1, [pc, #4]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003186:	4313      	orrs	r3, r2
 8003188:	658b      	str	r3, [r1, #88]	@ 0x58
 800318a:	e003      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800318c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d04b      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80031aa:	d02e      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80031ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80031b0:	d828      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031b6:	d02a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80031b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031bc:	d822      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80031c2:	d026      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80031c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80031c8:	d81c      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ce:	d010      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80031d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031d4:	d816      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01d      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031de:	d111      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fc82 	bl	8003af0 <RCCEx_PLL2_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031f0:	e012      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3324      	adds	r3, #36	@ 0x24
 80031f6:	2102      	movs	r1, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fd2b 	bl	8003c54 <RCCEx_PLL3_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003202:	e009      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	75fb      	strb	r3, [r7, #23]
      break;
 8003208:	e006      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800320a:	bf00      	nop
 800320c:	e004      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800320e:	bf00      	nop
 8003210:	e002      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800321e:	4b9d      	ldr	r3, [pc, #628]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800322c:	4999      	ldr	r1, [pc, #612]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800322e:	4313      	orrs	r3, r2
 8003230:	658b      	str	r3, [r1, #88]	@ 0x58
 8003232:	e001      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324e:	d10a      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3324      	adds	r3, #36	@ 0x24
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fcfc 	bl	8003c54 <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003266:	4b8b      	ldr	r3, [pc, #556]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003274:	4987      	ldr	r1, [pc, #540]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003276:	4313      	orrs	r3, r2
 8003278:	654b      	str	r3, [r1, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800328c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003290:	d10a      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3324      	adds	r3, #36	@ 0x24
 8003296:	2102      	movs	r1, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fcdb 	bl	8003c54 <RCCEx_PLL3_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b6:	4977      	ldr	r1, [pc, #476]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d034      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032d2:	d01d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80032d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032d8:	d817      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e2:	d009      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80032e4:	e011      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fbff 	bl	8003af0 <RCCEx_PLL2_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032f6:	e00c      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3324      	adds	r3, #36	@ 0x24
 80032fc:	2102      	movs	r1, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fca8 	bl	8003c54 <RCCEx_PLL3_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003308:	e003      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
      break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003318:	4b5e      	ldr	r3, [pc, #376]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003326:	495b      	ldr	r1, [pc, #364]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003328:	4313      	orrs	r3, r2
 800332a:	658b      	str	r3, [r1, #88]	@ 0x58
 800332c:	e001      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d033      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003344:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003348:	d01c      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800334a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800334e:	d816      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003350:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003354:	d003      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003356:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800335a:	d007      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800335c:	e00f      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335e:	4b4d      	ldr	r3, [pc, #308]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	4a4c      	ldr	r2, [pc, #304]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003368:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800336a:	e00c      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3324      	adds	r3, #36	@ 0x24
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fc6e 	bl	8003c54 <RCCEx_PLL3_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800337c:	e003      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
      break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800338c:	4b41      	ldr	r3, [pc, #260]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800338e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003390:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800339a:	493e      	ldr	r1, [pc, #248]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800339c:	4313      	orrs	r3, r2
 800339e:	654b      	str	r3, [r1, #84]	@ 0x54
 80033a0:	e001      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d029      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033be:	d007      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80033c0:	e00f      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c2:	4b34      	ldr	r3, [pc, #208]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	4a33      	ldr	r2, [pc, #204]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033ce:	e00b      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	2102      	movs	r1, #2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fb8a 	bl	8003af0 <RCCEx_PLL2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033e0:	e002      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
      break;
 80033e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033ee:	4b29      	ldr	r3, [pc, #164]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	4926      	ldr	r1, [pc, #152]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003400:	e001      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3324      	adds	r3, #36	@ 0x24
 8003416:	2102      	movs	r1, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fc1b 	bl	8003c54 <RCCEx_PLL3_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d033      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800343c:	d017      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800343e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003442:	d811      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003448:	d013      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800344a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800344e:	d80b      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003458:	d106      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345a:	4b0e      	ldr	r3, [pc, #56]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800345c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345e:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003464:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003466:	e007      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
      break;
 800346c:	e004      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800347e:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800348a:	4902      	ldr	r1, [pc, #8]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800348c:	4313      	orrs	r3, r2
 800348e:	654b      	str	r3, [r1, #84]	@ 0x54
 8003490:	e004      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003492:	bf00      	nop
 8003494:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034a8:	4b31      	ldr	r3, [pc, #196]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	492e      	ldr	r1, [pc, #184]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	650b      	str	r3, [r1, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80034c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034d4:	4926      	ldr	r1, [pc, #152]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034e6:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f2:	491f      	ldr	r1, [pc, #124]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800350a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800350e:	6113      	str	r3, [r2, #16]
 8003510:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800351a:	4915      	ldr	r1, [pc, #84]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800351c:	4313      	orrs	r3, r2
 800351e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	da08      	bge.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003528:	4b11      	ldr	r3, [pc, #68]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800352a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003534:	490e      	ldr	r1, [pc, #56]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003536:	4313      	orrs	r3, r2
 8003538:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003546:	4b0a      	ldr	r3, [pc, #40]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	4906      	ldr	r1, [pc, #24]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003556:	4313      	orrs	r3, r2
 8003558:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  if (status == HAL_OK)
 800355a:	7dbb      	ldrb	r3, [r7, #22]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	58024400 	.word	0x58024400

08003574 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003578:	f7ff f85a 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	@ (800359c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	58024400 	.word	0x58024400
 800359c:	08008358 	.word	0x08008358

080035a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	@ 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035a8:	4ba1      	ldr	r3, [pc, #644]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80035b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b6:	0b1b      	lsrs	r3, r3, #12
 80035b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80035be:	4b9c      	ldr	r3, [pc, #624]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80035ca:	4b99      	ldr	r3, [pc, #612]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	08db      	lsrs	r3, r3, #3
 80035d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8111 	beq.w	8003810 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f000 8083 	beq.w	80036fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	f200 80a1 	bhi.w	8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d056      	beq.n	80036b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800360a:	e099      	b.n	8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800360c:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02d      	beq.n	8003674 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003618:	4b85      	ldr	r3, [pc, #532]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	08db      	lsrs	r3, r3, #3
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	4a84      	ldr	r2, [pc, #528]	@ (8003834 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003642:	4b7b      	ldr	r3, [pc, #492]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003652:	ed97 6a03 	vldr	s12, [r7, #12]
 8003656:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800365a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800365e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003672:	e087      	b.n	8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800383c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003686:	4b6a      	ldr	r3, [pc, #424]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003696:	ed97 6a03 	vldr	s12, [r7, #12]
 800369a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800369e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036b6:	e065      	b.n	8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ca:	4b59      	ldr	r3, [pc, #356]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036da:	ed97 6a03 	vldr	s12, [r7, #12]
 80036de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036fa:	e043      	b.n	8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	4b48      	ldr	r3, [pc, #288]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003722:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800373e:	e021      	b.n	8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003752:	4b37      	ldr	r3, [pc, #220]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003762:	ed97 6a03 	vldr	s12, [r7, #12]
 8003766:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003782:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003784:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	0a5b      	lsrs	r3, r3, #9
 800378a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003796:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800379a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800379e:	edd7 6a07 	vldr	s13, [r7, #28]
 80037a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037aa:	ee17 2a90 	vmov	r2, s15
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80037b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80037d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d8:	ee17 2a90 	vmov	r2, s15
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80037e0:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	0e1b      	lsrs	r3, r3, #24
 80037e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80037fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003806:	ee17 2a90 	vmov	r2, s15
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800380e:	e008      	b.n	8003822 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
}
 8003822:	bf00      	nop
 8003824:	3724      	adds	r7, #36	@ 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
 8003834:	03d09000 	.word	0x03d09000
 8003838:	46000000 	.word	0x46000000
 800383c:	4c742400 	.word	0x4c742400
 8003840:	4a742400 	.word	0x4a742400
 8003844:	4af42400 	.word	0x4af42400

08003848 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	@ 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003850:	4ba1      	ldr	r3, [pc, #644]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800385a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	0d1b      	lsrs	r3, r3, #20
 8003860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003864:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003866:	4b9c      	ldr	r3, [pc, #624]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003872:	4b99      	ldr	r3, [pc, #612]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	08db      	lsrs	r3, r3, #3
 8003878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8111 	beq.w	8003ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b02      	cmp	r3, #2
 800389a:	f000 8083 	beq.w	80039a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	f200 80a1 	bhi.w	80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d056      	beq.n	8003960 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80038b2:	e099      	b.n	80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b4:	4b88      	ldr	r3, [pc, #544]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02d      	beq.n	800391c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038c0:	4b85      	ldr	r3, [pc, #532]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	08db      	lsrs	r3, r3, #3
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	4a84      	ldr	r2, [pc, #528]	@ (8003adc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ea:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800391a:	e087      	b.n	8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800392a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003942:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800395e:	e065      	b.n	8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003972:	4b59      	ldr	r3, [pc, #356]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003982:	ed97 6a03 	vldr	s12, [r7, #12]
 8003986:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039a2:	e043      	b.n	8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80039b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b6:	4b48      	ldr	r3, [pc, #288]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039e6:	e021      	b.n	8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80039f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fa:	4b37      	ldr	r3, [pc, #220]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	0a5b      	lsrs	r3, r3, #9
 8003a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a52:	ee17 2a90 	vmov	r2, s15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	0c1b      	lsrs	r3, r3, #16
 8003a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a64:	ee07 3a90 	vmov	s15, r3
 8003a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a80:	ee17 2a90 	vmov	r2, s15
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003a88:	4b13      	ldr	r3, [pc, #76]	@ (8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	0e1b      	lsrs	r3, r3, #24
 8003a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aae:	ee17 2a90 	vmov	r2, s15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ab6:	e008      	b.n	8003aca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
}
 8003aca:	bf00      	nop
 8003acc:	3724      	adds	r7, #36	@ 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	58024400 	.word	0x58024400
 8003adc:	03d09000 	.word	0x03d09000
 8003ae0:	46000000 	.word	0x46000000
 8003ae4:	4c742400 	.word	0x4c742400
 8003ae8:	4a742400 	.word	0x4a742400
 8003aec:	4af42400 	.word	0x4af42400

08003af0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003afe:	4b53      	ldr	r3, [pc, #332]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d101      	bne.n	8003b0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e099      	b.n	8003c42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4e      	ldr	r2, [pc, #312]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1a:	f7fd fa9f 	bl	800105c <HAL_GetTick>
 8003b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b22:	f7fd fa9b 	bl	800105c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e086      	b.n	8003c42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b34:	4b45      	ldr	r3, [pc, #276]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f0      	bne.n	8003b22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b40:	4b42      	ldr	r3, [pc, #264]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	031b      	lsls	r3, r3, #12
 8003b4e:	493f      	ldr	r1, [pc, #252]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	025b      	lsls	r3, r3, #9
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b84:	4931      	ldr	r1, [pc, #196]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b8a:	4b30      	ldr	r3, [pc, #192]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	492d      	ldr	r1, [pc, #180]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	f023 0220 	bic.w	r2, r3, #32
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	4928      	ldr	r1, [pc, #160]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bae:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb2:	4a26      	ldr	r2, [pc, #152]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003bb4:	f023 0310 	bic.w	r3, r3, #16
 8003bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003bba:	4b24      	ldr	r3, [pc, #144]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bbe:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <RCCEx_PLL2_Config+0x160>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	69d2      	ldr	r2, [r2, #28]
 8003bc6:	00d2      	lsls	r2, r2, #3
 8003bc8:	4920      	ldr	r1, [pc, #128]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003bce:	4b1f      	ldr	r3, [pc, #124]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003bd4:	f043 0310 	orr.w	r3, r3, #16
 8003bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003be0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	4a19      	ldr	r2, [pc, #100]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003be6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003bea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003bec:	e00f      	b.n	8003c0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d106      	bne.n	8003c02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003bf4:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	4a14      	ldr	r2, [pc, #80]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003c00:	e005      	b.n	8003c0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c02:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	4a11      	ldr	r2, [pc, #68]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003c08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a0e      	ldr	r2, [pc, #56]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003c14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1a:	f7fd fa1f 	bl	800105c <HAL_GetTick>
 8003c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c20:	e008      	b.n	8003c34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c22:	f7fd fa1b 	bl	800105c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e006      	b.n	8003c42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <RCCEx_PLL2_Config+0x15c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	ffff0007 	.word	0xffff0007

08003c54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c62:	4b53      	ldr	r3, [pc, #332]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d101      	bne.n	8003c72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e099      	b.n	8003da6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c72:	4b4f      	ldr	r3, [pc, #316]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a4e      	ldr	r2, [pc, #312]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7e:	f7fd f9ed 	bl	800105c <HAL_GetTick>
 8003c82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c86:	f7fd f9e9 	bl	800105c <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e086      	b.n	8003da6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c98:	4b45      	ldr	r3, [pc, #276]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ca4:	4b42      	ldr	r3, [pc, #264]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	051b      	lsls	r3, r3, #20
 8003cb2:	493f      	ldr	r1, [pc, #252]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	025b      	lsls	r3, r3, #9
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	061b      	lsls	r3, r3, #24
 8003ce4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ce8:	4931      	ldr	r1, [pc, #196]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003cee:	4b30      	ldr	r3, [pc, #192]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	492d      	ldr	r1, [pc, #180]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d00:	4b2b      	ldr	r3, [pc, #172]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	4928      	ldr	r1, [pc, #160]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d12:	4b27      	ldr	r3, [pc, #156]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	4a26      	ldr	r2, [pc, #152]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d1e:	4b24      	ldr	r3, [pc, #144]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d22:	4b24      	ldr	r3, [pc, #144]	@ (8003db4 <RCCEx_PLL3_Config+0x160>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	69d2      	ldr	r2, [r2, #28]
 8003d2a:	00d2      	lsls	r2, r2, #3
 8003d2c:	4920      	ldr	r1, [pc, #128]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d32:	4b1f      	ldr	r3, [pc, #124]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	4a1e      	ldr	r2, [pc, #120]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d44:	4b1a      	ldr	r3, [pc, #104]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003d50:	e00f      	b.n	8003d72 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d58:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	4a14      	ldr	r2, [pc, #80]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003d64:	e005      	b.n	8003d72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d66:	4b12      	ldr	r3, [pc, #72]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	4a11      	ldr	r2, [pc, #68]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d72:	4b0f      	ldr	r3, [pc, #60]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a0e      	ldr	r2, [pc, #56]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7e:	f7fd f96d 	bl	800105c <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d84:	e008      	b.n	8003d98 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d86:	f7fd f969 	bl	800105c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e006      	b.n	8003da6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <RCCEx_PLL3_Config+0x15c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	58024400 	.word	0x58024400
 8003db4:	ffff0007 	.word	0xffff0007

08003db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e042      	b.n	8003e50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7fc ff31 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2224      	movs	r2, #36	@ 0x24
 8003de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0201 	bic.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8c2 	bl	8003f84 <UART_SetConfig>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e022      	b.n	8003e50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fe1e 	bl	8004a54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fea5 	bl	8004b98 <UART_CheckIdleState>
 8003e4e:	4603      	mov	r3, r0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	@ 0x28
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	f040 8083 	bne.w	8003f7a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_Transmit+0x28>
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e07b      	b.n	8003f7c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Transmit+0x3a>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e074      	b.n	8003f7c <HAL_UART_Transmit+0x124>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2221      	movs	r2, #33	@ 0x21
 8003ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eaa:	f7fd f8d7 	bl	800105c <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	88fa      	ldrh	r2, [r7, #6]
 8003eb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	88fa      	ldrh	r2, [r7, #6]
 8003ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec8:	d108      	bne.n	8003edc <HAL_UART_Transmit+0x84>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e003      	b.n	8003ee4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8003eec:	e02c      	b.n	8003f48 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fe98 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e039      	b.n	8003f7c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3302      	adds	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e007      	b.n	8003f36 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1cc      	bne.n	8003eee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2140      	movs	r1, #64	@ 0x40
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fe65 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e006      	b.n	8003f7c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b092      	sub	sp, #72	@ 0x48
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4bbe      	ldr	r3, [pc, #760]	@ (80042ac <UART_SetConfig+0x328>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4ab3      	ldr	r2, [pc, #716]	@ (80042b0 <UART_SetConfig+0x32c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fec:	4313      	orrs	r3, r2
 8003fee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	4baf      	ldr	r3, [pc, #700]	@ (80042b4 <UART_SetConfig+0x330>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004000:	430b      	orrs	r3, r1
 8004002:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	f023 010f 	bic.w	r1, r3, #15
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4aa6      	ldr	r2, [pc, #664]	@ (80042b8 <UART_SetConfig+0x334>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d177      	bne.n	8004114 <UART_SetConfig+0x190>
 8004024:	4ba5      	ldr	r3, [pc, #660]	@ (80042bc <UART_SetConfig+0x338>)
 8004026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800402c:	2b28      	cmp	r3, #40	@ 0x28
 800402e:	d86d      	bhi.n	800410c <UART_SetConfig+0x188>
 8004030:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <UART_SetConfig+0xb4>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	080040dd 	.word	0x080040dd
 800403c:	0800410d 	.word	0x0800410d
 8004040:	0800410d 	.word	0x0800410d
 8004044:	0800410d 	.word	0x0800410d
 8004048:	0800410d 	.word	0x0800410d
 800404c:	0800410d 	.word	0x0800410d
 8004050:	0800410d 	.word	0x0800410d
 8004054:	0800410d 	.word	0x0800410d
 8004058:	080040e5 	.word	0x080040e5
 800405c:	0800410d 	.word	0x0800410d
 8004060:	0800410d 	.word	0x0800410d
 8004064:	0800410d 	.word	0x0800410d
 8004068:	0800410d 	.word	0x0800410d
 800406c:	0800410d 	.word	0x0800410d
 8004070:	0800410d 	.word	0x0800410d
 8004074:	0800410d 	.word	0x0800410d
 8004078:	080040ed 	.word	0x080040ed
 800407c:	0800410d 	.word	0x0800410d
 8004080:	0800410d 	.word	0x0800410d
 8004084:	0800410d 	.word	0x0800410d
 8004088:	0800410d 	.word	0x0800410d
 800408c:	0800410d 	.word	0x0800410d
 8004090:	0800410d 	.word	0x0800410d
 8004094:	0800410d 	.word	0x0800410d
 8004098:	080040f5 	.word	0x080040f5
 800409c:	0800410d 	.word	0x0800410d
 80040a0:	0800410d 	.word	0x0800410d
 80040a4:	0800410d 	.word	0x0800410d
 80040a8:	0800410d 	.word	0x0800410d
 80040ac:	0800410d 	.word	0x0800410d
 80040b0:	0800410d 	.word	0x0800410d
 80040b4:	0800410d 	.word	0x0800410d
 80040b8:	080040fd 	.word	0x080040fd
 80040bc:	0800410d 	.word	0x0800410d
 80040c0:	0800410d 	.word	0x0800410d
 80040c4:	0800410d 	.word	0x0800410d
 80040c8:	0800410d 	.word	0x0800410d
 80040cc:	0800410d 	.word	0x0800410d
 80040d0:	0800410d 	.word	0x0800410d
 80040d4:	0800410d 	.word	0x0800410d
 80040d8:	08004105 	.word	0x08004105
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040e2:	e222      	b.n	800452a <UART_SetConfig+0x5a6>
 80040e4:	2304      	movs	r3, #4
 80040e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040ea:	e21e      	b.n	800452a <UART_SetConfig+0x5a6>
 80040ec:	2308      	movs	r3, #8
 80040ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040f2:	e21a      	b.n	800452a <UART_SetConfig+0x5a6>
 80040f4:	2310      	movs	r3, #16
 80040f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040fa:	e216      	b.n	800452a <UART_SetConfig+0x5a6>
 80040fc:	2320      	movs	r3, #32
 80040fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004102:	e212      	b.n	800452a <UART_SetConfig+0x5a6>
 8004104:	2340      	movs	r3, #64	@ 0x40
 8004106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800410a:	e20e      	b.n	800452a <UART_SetConfig+0x5a6>
 800410c:	2380      	movs	r3, #128	@ 0x80
 800410e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004112:	e20a      	b.n	800452a <UART_SetConfig+0x5a6>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a69      	ldr	r2, [pc, #420]	@ (80042c0 <UART_SetConfig+0x33c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d130      	bne.n	8004180 <UART_SetConfig+0x1fc>
 800411e:	4b67      	ldr	r3, [pc, #412]	@ (80042bc <UART_SetConfig+0x338>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	2b05      	cmp	r3, #5
 8004128:	d826      	bhi.n	8004178 <UART_SetConfig+0x1f4>
 800412a:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <UART_SetConfig+0x1ac>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004149 	.word	0x08004149
 8004134:	08004151 	.word	0x08004151
 8004138:	08004159 	.word	0x08004159
 800413c:	08004161 	.word	0x08004161
 8004140:	08004169 	.word	0x08004169
 8004144:	08004171 	.word	0x08004171
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800414e:	e1ec      	b.n	800452a <UART_SetConfig+0x5a6>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004156:	e1e8      	b.n	800452a <UART_SetConfig+0x5a6>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800415e:	e1e4      	b.n	800452a <UART_SetConfig+0x5a6>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004166:	e1e0      	b.n	800452a <UART_SetConfig+0x5a6>
 8004168:	2320      	movs	r3, #32
 800416a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800416e:	e1dc      	b.n	800452a <UART_SetConfig+0x5a6>
 8004170:	2340      	movs	r3, #64	@ 0x40
 8004172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004176:	e1d8      	b.n	800452a <UART_SetConfig+0x5a6>
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800417e:	e1d4      	b.n	800452a <UART_SetConfig+0x5a6>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a4f      	ldr	r2, [pc, #316]	@ (80042c4 <UART_SetConfig+0x340>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d130      	bne.n	80041ec <UART_SetConfig+0x268>
 800418a:	4b4c      	ldr	r3, [pc, #304]	@ (80042bc <UART_SetConfig+0x338>)
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	2b05      	cmp	r3, #5
 8004194:	d826      	bhi.n	80041e4 <UART_SetConfig+0x260>
 8004196:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <UART_SetConfig+0x218>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041b5 	.word	0x080041b5
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	080041c5 	.word	0x080041c5
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ba:	e1b6      	b.n	800452a <UART_SetConfig+0x5a6>
 80041bc:	2304      	movs	r3, #4
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041c2:	e1b2      	b.n	800452a <UART_SetConfig+0x5a6>
 80041c4:	2308      	movs	r3, #8
 80041c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ca:	e1ae      	b.n	800452a <UART_SetConfig+0x5a6>
 80041cc:	2310      	movs	r3, #16
 80041ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041d2:	e1aa      	b.n	800452a <UART_SetConfig+0x5a6>
 80041d4:	2320      	movs	r3, #32
 80041d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041da:	e1a6      	b.n	800452a <UART_SetConfig+0x5a6>
 80041dc:	2340      	movs	r3, #64	@ 0x40
 80041de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041e2:	e1a2      	b.n	800452a <UART_SetConfig+0x5a6>
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ea:	e19e      	b.n	800452a <UART_SetConfig+0x5a6>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a35      	ldr	r2, [pc, #212]	@ (80042c8 <UART_SetConfig+0x344>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d130      	bne.n	8004258 <UART_SetConfig+0x2d4>
 80041f6:	4b31      	ldr	r3, [pc, #196]	@ (80042bc <UART_SetConfig+0x338>)
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d826      	bhi.n	8004250 <UART_SetConfig+0x2cc>
 8004202:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <UART_SetConfig+0x284>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004221 	.word	0x08004221
 800420c:	08004229 	.word	0x08004229
 8004210:	08004231 	.word	0x08004231
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	08004249 	.word	0x08004249
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004226:	e180      	b.n	800452a <UART_SetConfig+0x5a6>
 8004228:	2304      	movs	r3, #4
 800422a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800422e:	e17c      	b.n	800452a <UART_SetConfig+0x5a6>
 8004230:	2308      	movs	r3, #8
 8004232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004236:	e178      	b.n	800452a <UART_SetConfig+0x5a6>
 8004238:	2310      	movs	r3, #16
 800423a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800423e:	e174      	b.n	800452a <UART_SetConfig+0x5a6>
 8004240:	2320      	movs	r3, #32
 8004242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004246:	e170      	b.n	800452a <UART_SetConfig+0x5a6>
 8004248:	2340      	movs	r3, #64	@ 0x40
 800424a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800424e:	e16c      	b.n	800452a <UART_SetConfig+0x5a6>
 8004250:	2380      	movs	r3, #128	@ 0x80
 8004252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004256:	e168      	b.n	800452a <UART_SetConfig+0x5a6>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1b      	ldr	r2, [pc, #108]	@ (80042cc <UART_SetConfig+0x348>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d142      	bne.n	80042e8 <UART_SetConfig+0x364>
 8004262:	4b16      	ldr	r3, [pc, #88]	@ (80042bc <UART_SetConfig+0x338>)
 8004264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	2b05      	cmp	r3, #5
 800426c:	d838      	bhi.n	80042e0 <UART_SetConfig+0x35c>
 800426e:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <UART_SetConfig+0x2f0>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	0800428d 	.word	0x0800428d
 8004278:	08004295 	.word	0x08004295
 800427c:	0800429d 	.word	0x0800429d
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042d1 	.word	0x080042d1
 8004288:	080042d9 	.word	0x080042d9
 800428c:	2300      	movs	r3, #0
 800428e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004292:	e14a      	b.n	800452a <UART_SetConfig+0x5a6>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800429a:	e146      	b.n	800452a <UART_SetConfig+0x5a6>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042a2:	e142      	b.n	800452a <UART_SetConfig+0x5a6>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042aa:	e13e      	b.n	800452a <UART_SetConfig+0x5a6>
 80042ac:	cfff69f3 	.word	0xcfff69f3
 80042b0:	58000c00 	.word	0x58000c00
 80042b4:	11fff4ff 	.word	0x11fff4ff
 80042b8:	40011000 	.word	0x40011000
 80042bc:	58024400 	.word	0x58024400
 80042c0:	40004400 	.word	0x40004400
 80042c4:	40004800 	.word	0x40004800
 80042c8:	40004c00 	.word	0x40004c00
 80042cc:	40005000 	.word	0x40005000
 80042d0:	2320      	movs	r3, #32
 80042d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042d6:	e128      	b.n	800452a <UART_SetConfig+0x5a6>
 80042d8:	2340      	movs	r3, #64	@ 0x40
 80042da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042de:	e124      	b.n	800452a <UART_SetConfig+0x5a6>
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042e6:	e120      	b.n	800452a <UART_SetConfig+0x5a6>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4acb      	ldr	r2, [pc, #812]	@ (800461c <UART_SetConfig+0x698>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d176      	bne.n	80043e0 <UART_SetConfig+0x45c>
 80042f2:	4bcb      	ldr	r3, [pc, #812]	@ (8004620 <UART_SetConfig+0x69c>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042fa:	2b28      	cmp	r3, #40	@ 0x28
 80042fc:	d86c      	bhi.n	80043d8 <UART_SetConfig+0x454>
 80042fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <UART_SetConfig+0x380>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	080043a9 	.word	0x080043a9
 8004308:	080043d9 	.word	0x080043d9
 800430c:	080043d9 	.word	0x080043d9
 8004310:	080043d9 	.word	0x080043d9
 8004314:	080043d9 	.word	0x080043d9
 8004318:	080043d9 	.word	0x080043d9
 800431c:	080043d9 	.word	0x080043d9
 8004320:	080043d9 	.word	0x080043d9
 8004324:	080043b1 	.word	0x080043b1
 8004328:	080043d9 	.word	0x080043d9
 800432c:	080043d9 	.word	0x080043d9
 8004330:	080043d9 	.word	0x080043d9
 8004334:	080043d9 	.word	0x080043d9
 8004338:	080043d9 	.word	0x080043d9
 800433c:	080043d9 	.word	0x080043d9
 8004340:	080043d9 	.word	0x080043d9
 8004344:	080043b9 	.word	0x080043b9
 8004348:	080043d9 	.word	0x080043d9
 800434c:	080043d9 	.word	0x080043d9
 8004350:	080043d9 	.word	0x080043d9
 8004354:	080043d9 	.word	0x080043d9
 8004358:	080043d9 	.word	0x080043d9
 800435c:	080043d9 	.word	0x080043d9
 8004360:	080043d9 	.word	0x080043d9
 8004364:	080043c1 	.word	0x080043c1
 8004368:	080043d9 	.word	0x080043d9
 800436c:	080043d9 	.word	0x080043d9
 8004370:	080043d9 	.word	0x080043d9
 8004374:	080043d9 	.word	0x080043d9
 8004378:	080043d9 	.word	0x080043d9
 800437c:	080043d9 	.word	0x080043d9
 8004380:	080043d9 	.word	0x080043d9
 8004384:	080043c9 	.word	0x080043c9
 8004388:	080043d9 	.word	0x080043d9
 800438c:	080043d9 	.word	0x080043d9
 8004390:	080043d9 	.word	0x080043d9
 8004394:	080043d9 	.word	0x080043d9
 8004398:	080043d9 	.word	0x080043d9
 800439c:	080043d9 	.word	0x080043d9
 80043a0:	080043d9 	.word	0x080043d9
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ae:	e0bc      	b.n	800452a <UART_SetConfig+0x5a6>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043b6:	e0b8      	b.n	800452a <UART_SetConfig+0x5a6>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043be:	e0b4      	b.n	800452a <UART_SetConfig+0x5a6>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c6:	e0b0      	b.n	800452a <UART_SetConfig+0x5a6>
 80043c8:	2320      	movs	r3, #32
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ce:	e0ac      	b.n	800452a <UART_SetConfig+0x5a6>
 80043d0:	2340      	movs	r3, #64	@ 0x40
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043d6:	e0a8      	b.n	800452a <UART_SetConfig+0x5a6>
 80043d8:	2380      	movs	r3, #128	@ 0x80
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043de:	e0a4      	b.n	800452a <UART_SetConfig+0x5a6>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a8f      	ldr	r2, [pc, #572]	@ (8004624 <UART_SetConfig+0x6a0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d130      	bne.n	800444c <UART_SetConfig+0x4c8>
 80043ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004620 <UART_SetConfig+0x69c>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d826      	bhi.n	8004444 <UART_SetConfig+0x4c0>
 80043f6:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <UART_SetConfig+0x478>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441a:	e086      	b.n	800452a <UART_SetConfig+0x5a6>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004422:	e082      	b.n	800452a <UART_SetConfig+0x5a6>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442a:	e07e      	b.n	800452a <UART_SetConfig+0x5a6>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004432:	e07a      	b.n	800452a <UART_SetConfig+0x5a6>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443a:	e076      	b.n	800452a <UART_SetConfig+0x5a6>
 800443c:	2340      	movs	r3, #64	@ 0x40
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004442:	e072      	b.n	800452a <UART_SetConfig+0x5a6>
 8004444:	2380      	movs	r3, #128	@ 0x80
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800444a:	e06e      	b.n	800452a <UART_SetConfig+0x5a6>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a75      	ldr	r2, [pc, #468]	@ (8004628 <UART_SetConfig+0x6a4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d130      	bne.n	80044b8 <UART_SetConfig+0x534>
 8004456:	4b72      	ldr	r3, [pc, #456]	@ (8004620 <UART_SetConfig+0x69c>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b05      	cmp	r3, #5
 8004460:	d826      	bhi.n	80044b0 <UART_SetConfig+0x52c>
 8004462:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <UART_SetConfig+0x4e4>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
 8004470:	08004491 	.word	0x08004491
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004486:	e050      	b.n	800452a <UART_SetConfig+0x5a6>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800448e:	e04c      	b.n	800452a <UART_SetConfig+0x5a6>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004496:	e048      	b.n	800452a <UART_SetConfig+0x5a6>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449e:	e044      	b.n	800452a <UART_SetConfig+0x5a6>
 80044a0:	2320      	movs	r3, #32
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a6:	e040      	b.n	800452a <UART_SetConfig+0x5a6>
 80044a8:	2340      	movs	r3, #64	@ 0x40
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ae:	e03c      	b.n	800452a <UART_SetConfig+0x5a6>
 80044b0:	2380      	movs	r3, #128	@ 0x80
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044b6:	e038      	b.n	800452a <UART_SetConfig+0x5a6>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a5b      	ldr	r2, [pc, #364]	@ (800462c <UART_SetConfig+0x6a8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d130      	bne.n	8004524 <UART_SetConfig+0x5a0>
 80044c2:	4b57      	ldr	r3, [pc, #348]	@ (8004620 <UART_SetConfig+0x69c>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d826      	bhi.n	800451c <UART_SetConfig+0x598>
 80044ce:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <UART_SetConfig+0x550>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044ed 	.word	0x080044ed
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	2302      	movs	r3, #2
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f2:	e01a      	b.n	800452a <UART_SetConfig+0x5a6>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044fa:	e016      	b.n	800452a <UART_SetConfig+0x5a6>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004502:	e012      	b.n	800452a <UART_SetConfig+0x5a6>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800450a:	e00e      	b.n	800452a <UART_SetConfig+0x5a6>
 800450c:	2320      	movs	r3, #32
 800450e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004512:	e00a      	b.n	800452a <UART_SetConfig+0x5a6>
 8004514:	2340      	movs	r3, #64	@ 0x40
 8004516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800451a:	e006      	b.n	800452a <UART_SetConfig+0x5a6>
 800451c:	2380      	movs	r3, #128	@ 0x80
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004522:	e002      	b.n	800452a <UART_SetConfig+0x5a6>
 8004524:	2380      	movs	r3, #128	@ 0x80
 8004526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3f      	ldr	r2, [pc, #252]	@ (800462c <UART_SetConfig+0x6a8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	f040 80f8 	bne.w	8004726 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004536:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800453a:	2b20      	cmp	r3, #32
 800453c:	dc46      	bgt.n	80045cc <UART_SetConfig+0x648>
 800453e:	2b02      	cmp	r3, #2
 8004540:	f2c0 8082 	blt.w	8004648 <UART_SetConfig+0x6c4>
 8004544:	3b02      	subs	r3, #2
 8004546:	2b1e      	cmp	r3, #30
 8004548:	d87e      	bhi.n	8004648 <UART_SetConfig+0x6c4>
 800454a:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <UART_SetConfig+0x5cc>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	080045d3 	.word	0x080045d3
 8004554:	08004649 	.word	0x08004649
 8004558:	080045db 	.word	0x080045db
 800455c:	08004649 	.word	0x08004649
 8004560:	08004649 	.word	0x08004649
 8004564:	08004649 	.word	0x08004649
 8004568:	080045eb 	.word	0x080045eb
 800456c:	08004649 	.word	0x08004649
 8004570:	08004649 	.word	0x08004649
 8004574:	08004649 	.word	0x08004649
 8004578:	08004649 	.word	0x08004649
 800457c:	08004649 	.word	0x08004649
 8004580:	08004649 	.word	0x08004649
 8004584:	08004649 	.word	0x08004649
 8004588:	080045fb 	.word	0x080045fb
 800458c:	08004649 	.word	0x08004649
 8004590:	08004649 	.word	0x08004649
 8004594:	08004649 	.word	0x08004649
 8004598:	08004649 	.word	0x08004649
 800459c:	08004649 	.word	0x08004649
 80045a0:	08004649 	.word	0x08004649
 80045a4:	08004649 	.word	0x08004649
 80045a8:	08004649 	.word	0x08004649
 80045ac:	08004649 	.word	0x08004649
 80045b0:	08004649 	.word	0x08004649
 80045b4:	08004649 	.word	0x08004649
 80045b8:	08004649 	.word	0x08004649
 80045bc:	08004649 	.word	0x08004649
 80045c0:	08004649 	.word	0x08004649
 80045c4:	08004649 	.word	0x08004649
 80045c8:	0800463b 	.word	0x0800463b
 80045cc:	2b40      	cmp	r3, #64	@ 0x40
 80045ce:	d037      	beq.n	8004640 <UART_SetConfig+0x6bc>
 80045d0:	e03a      	b.n	8004648 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80045d2:	f7fe ffcf 	bl	8003574 <HAL_RCCEx_GetD3PCLK1Freq>
 80045d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80045d8:	e03c      	b.n	8004654 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe ffde 	bl	80035a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045e8:	e034      	b.n	8004654 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045ea:	f107 0318 	add.w	r3, r7, #24
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff f92a 	bl	8003848 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045f8:	e02c      	b.n	8004654 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045fa:	4b09      	ldr	r3, [pc, #36]	@ (8004620 <UART_SetConfig+0x69c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004606:	4b06      	ldr	r3, [pc, #24]	@ (8004620 <UART_SetConfig+0x69c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	08db      	lsrs	r3, r3, #3
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	4a07      	ldr	r2, [pc, #28]	@ (8004630 <UART_SetConfig+0x6ac>)
 8004612:	fa22 f303 	lsr.w	r3, r2, r3
 8004616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004618:	e01c      	b.n	8004654 <UART_SetConfig+0x6d0>
 800461a:	bf00      	nop
 800461c:	40011400 	.word	0x40011400
 8004620:	58024400 	.word	0x58024400
 8004624:	40007800 	.word	0x40007800
 8004628:	40007c00 	.word	0x40007c00
 800462c:	58000c00 	.word	0x58000c00
 8004630:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004634:	4b9d      	ldr	r3, [pc, #628]	@ (80048ac <UART_SetConfig+0x928>)
 8004636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004638:	e00c      	b.n	8004654 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800463a:	4b9d      	ldr	r3, [pc, #628]	@ (80048b0 <UART_SetConfig+0x92c>)
 800463c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800463e:	e009      	b.n	8004654 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004646:	e005      	b.n	8004654 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004652:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 81de 	beq.w	8004a18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	4a94      	ldr	r2, [pc, #592]	@ (80048b4 <UART_SetConfig+0x930>)
 8004662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004666:	461a      	mov	r2, r3
 8004668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466a:	fbb3 f3f2 	udiv	r3, r3, r2
 800466e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800467c:	429a      	cmp	r2, r3
 800467e:	d305      	bcc.n	800468c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004688:	429a      	cmp	r2, r3
 800468a:	d903      	bls.n	8004694 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004692:	e1c1      	b.n	8004a18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004696:	2200      	movs	r2, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	60fa      	str	r2, [r7, #12]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	4a84      	ldr	r2, [pc, #528]	@ (80048b4 <UART_SetConfig+0x930>)
 80046a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2200      	movs	r2, #0
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	607a      	str	r2, [r7, #4]
 80046ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046b6:	f7fb fe6b 	bl	8000390 <__aeabi_uldivmod>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	020b      	lsls	r3, r1, #8
 80046cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046d0:	0202      	lsls	r2, r0, #8
 80046d2:	6979      	ldr	r1, [r7, #20]
 80046d4:	6849      	ldr	r1, [r1, #4]
 80046d6:	0849      	lsrs	r1, r1, #1
 80046d8:	2000      	movs	r0, #0
 80046da:	460c      	mov	r4, r1
 80046dc:	4605      	mov	r5, r0
 80046de:	eb12 0804 	adds.w	r8, r2, r4
 80046e2:	eb43 0905 	adc.w	r9, r3, r5
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	469a      	mov	sl, r3
 80046ee:	4693      	mov	fp, r2
 80046f0:	4652      	mov	r2, sl
 80046f2:	465b      	mov	r3, fp
 80046f4:	4640      	mov	r0, r8
 80046f6:	4649      	mov	r1, r9
 80046f8:	f7fb fe4a 	bl	8000390 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4613      	mov	r3, r2
 8004702:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470a:	d308      	bcc.n	800471e <UART_SetConfig+0x79a>
 800470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004712:	d204      	bcs.n	800471e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	e17c      	b.n	8004a18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004724:	e178      	b.n	8004a18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800472e:	f040 80c5 	bne.w	80048bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004732:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004736:	2b20      	cmp	r3, #32
 8004738:	dc48      	bgt.n	80047cc <UART_SetConfig+0x848>
 800473a:	2b00      	cmp	r3, #0
 800473c:	db7b      	blt.n	8004836 <UART_SetConfig+0x8b2>
 800473e:	2b20      	cmp	r3, #32
 8004740:	d879      	bhi.n	8004836 <UART_SetConfig+0x8b2>
 8004742:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <UART_SetConfig+0x7c4>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	080047d3 	.word	0x080047d3
 800474c:	080047db 	.word	0x080047db
 8004750:	08004837 	.word	0x08004837
 8004754:	08004837 	.word	0x08004837
 8004758:	080047e3 	.word	0x080047e3
 800475c:	08004837 	.word	0x08004837
 8004760:	08004837 	.word	0x08004837
 8004764:	08004837 	.word	0x08004837
 8004768:	080047f3 	.word	0x080047f3
 800476c:	08004837 	.word	0x08004837
 8004770:	08004837 	.word	0x08004837
 8004774:	08004837 	.word	0x08004837
 8004778:	08004837 	.word	0x08004837
 800477c:	08004837 	.word	0x08004837
 8004780:	08004837 	.word	0x08004837
 8004784:	08004837 	.word	0x08004837
 8004788:	08004803 	.word	0x08004803
 800478c:	08004837 	.word	0x08004837
 8004790:	08004837 	.word	0x08004837
 8004794:	08004837 	.word	0x08004837
 8004798:	08004837 	.word	0x08004837
 800479c:	08004837 	.word	0x08004837
 80047a0:	08004837 	.word	0x08004837
 80047a4:	08004837 	.word	0x08004837
 80047a8:	08004837 	.word	0x08004837
 80047ac:	08004837 	.word	0x08004837
 80047b0:	08004837 	.word	0x08004837
 80047b4:	08004837 	.word	0x08004837
 80047b8:	08004837 	.word	0x08004837
 80047bc:	08004837 	.word	0x08004837
 80047c0:	08004837 	.word	0x08004837
 80047c4:	08004837 	.word	0x08004837
 80047c8:	08004829 	.word	0x08004829
 80047cc:	2b40      	cmp	r3, #64	@ 0x40
 80047ce:	d02e      	beq.n	800482e <UART_SetConfig+0x8aa>
 80047d0:	e031      	b.n	8004836 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d2:	f7fd ff5d 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 80047d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047d8:	e033      	b.n	8004842 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047da:	f7fd ff6f 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 80047de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047e0:	e02f      	b.n	8004842 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe feda 	bl	80035a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047f0:	e027      	b.n	8004842 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f2:	f107 0318 	add.w	r3, r7, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff f826 	bl	8003848 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004800:	e01f      	b.n	8004842 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004802:	4b2d      	ldr	r3, [pc, #180]	@ (80048b8 <UART_SetConfig+0x934>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800480e:	4b2a      	ldr	r3, [pc, #168]	@ (80048b8 <UART_SetConfig+0x934>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	08db      	lsrs	r3, r3, #3
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	4a24      	ldr	r2, [pc, #144]	@ (80048ac <UART_SetConfig+0x928>)
 800481a:	fa22 f303 	lsr.w	r3, r2, r3
 800481e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004820:	e00f      	b.n	8004842 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004822:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <UART_SetConfig+0x928>)
 8004824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004826:	e00c      	b.n	8004842 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004828:	4b21      	ldr	r3, [pc, #132]	@ (80048b0 <UART_SetConfig+0x92c>)
 800482a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800482c:	e009      	b.n	8004842 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004834:	e005      	b.n	8004842 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004840:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80e7 	beq.w	8004a18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <UART_SetConfig+0x930>)
 8004850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004854:	461a      	mov	r2, r3
 8004856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004858:	fbb3 f3f2 	udiv	r3, r3, r2
 800485c:	005a      	lsls	r2, r3, #1
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	441a      	add	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	fbb2 f3f3 	udiv	r3, r2, r3
 800486e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004872:	2b0f      	cmp	r3, #15
 8004874:	d916      	bls.n	80048a4 <UART_SetConfig+0x920>
 8004876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487c:	d212      	bcs.n	80048a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	b29b      	uxth	r3, r3
 8004882:	f023 030f 	bic.w	r3, r3, #15
 8004886:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	b29b      	uxth	r3, r3
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	b29a      	uxth	r2, r3
 8004894:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004896:	4313      	orrs	r3, r2
 8004898:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	e0b9      	b.n	8004a18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80048aa:	e0b5      	b.n	8004a18 <UART_SetConfig+0xa94>
 80048ac:	03d09000 	.word	0x03d09000
 80048b0:	003d0900 	.word	0x003d0900
 80048b4:	08008368 	.word	0x08008368
 80048b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80048bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	dc49      	bgt.n	8004958 <UART_SetConfig+0x9d4>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	db7c      	blt.n	80049c2 <UART_SetConfig+0xa3e>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d87a      	bhi.n	80049c2 <UART_SetConfig+0xa3e>
 80048cc:	a201      	add	r2, pc, #4	@ (adr r2, 80048d4 <UART_SetConfig+0x950>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	0800495f 	.word	0x0800495f
 80048d8:	08004967 	.word	0x08004967
 80048dc:	080049c3 	.word	0x080049c3
 80048e0:	080049c3 	.word	0x080049c3
 80048e4:	0800496f 	.word	0x0800496f
 80048e8:	080049c3 	.word	0x080049c3
 80048ec:	080049c3 	.word	0x080049c3
 80048f0:	080049c3 	.word	0x080049c3
 80048f4:	0800497f 	.word	0x0800497f
 80048f8:	080049c3 	.word	0x080049c3
 80048fc:	080049c3 	.word	0x080049c3
 8004900:	080049c3 	.word	0x080049c3
 8004904:	080049c3 	.word	0x080049c3
 8004908:	080049c3 	.word	0x080049c3
 800490c:	080049c3 	.word	0x080049c3
 8004910:	080049c3 	.word	0x080049c3
 8004914:	0800498f 	.word	0x0800498f
 8004918:	080049c3 	.word	0x080049c3
 800491c:	080049c3 	.word	0x080049c3
 8004920:	080049c3 	.word	0x080049c3
 8004924:	080049c3 	.word	0x080049c3
 8004928:	080049c3 	.word	0x080049c3
 800492c:	080049c3 	.word	0x080049c3
 8004930:	080049c3 	.word	0x080049c3
 8004934:	080049c3 	.word	0x080049c3
 8004938:	080049c3 	.word	0x080049c3
 800493c:	080049c3 	.word	0x080049c3
 8004940:	080049c3 	.word	0x080049c3
 8004944:	080049c3 	.word	0x080049c3
 8004948:	080049c3 	.word	0x080049c3
 800494c:	080049c3 	.word	0x080049c3
 8004950:	080049c3 	.word	0x080049c3
 8004954:	080049b5 	.word	0x080049b5
 8004958:	2b40      	cmp	r3, #64	@ 0x40
 800495a:	d02e      	beq.n	80049ba <UART_SetConfig+0xa36>
 800495c:	e031      	b.n	80049c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495e:	f7fd fe97 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8004962:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004964:	e033      	b.n	80049ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004966:	f7fd fea9 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 800496a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800496c:	e02f      	b.n	80049ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800496e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fe14 	bl	80035a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800497c:	e027      	b.n	80049ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800497e:	f107 0318 	add.w	r3, r7, #24
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe ff60 	bl	8003848 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800498c:	e01f      	b.n	80049ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800498e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <UART_SetConfig+0xac0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800499a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a44 <UART_SetConfig+0xac0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	08db      	lsrs	r3, r3, #3
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	4a28      	ldr	r2, [pc, #160]	@ (8004a48 <UART_SetConfig+0xac4>)
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049ac:	e00f      	b.n	80049ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80049ae:	4b26      	ldr	r3, [pc, #152]	@ (8004a48 <UART_SetConfig+0xac4>)
 80049b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049b2:	e00c      	b.n	80049ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049b4:	4b25      	ldr	r3, [pc, #148]	@ (8004a4c <UART_SetConfig+0xac8>)
 80049b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049b8:	e009      	b.n	80049ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049c0:	e005      	b.n	80049ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80049cc:	bf00      	nop
    }

    if (pclk != 0U)
 80049ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d021      	beq.n	8004a18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a50 <UART_SetConfig+0xacc>)
 80049da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049de:	461a      	mov	r2, r3
 80049e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	441a      	add	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	d909      	bls.n	8004a12 <UART_SetConfig+0xa8e>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a04:	d205      	bcs.n	8004a12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	e002      	b.n	8004a18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8004a34:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3748      	adds	r7, #72	@ 0x48
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
 8004a48:	03d09000 	.word	0x03d09000
 8004a4c:	003d0900 	.word	0x003d0900
 8004a50:	08008368 	.word	0x08008368

08004a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b52:	d10a      	bne.n	8004b6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba8:	f7fc fa58 	bl	800105c <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d10e      	bne.n	8004bda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f82f 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e025      	b.n	8004c26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d10e      	bne.n	8004c06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f819 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e00f      	b.n	8004c26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b09c      	sub	sp, #112	@ 0x70
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3e:	e0a9      	b.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	f000 80a5 	beq.w	8004d94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4a:	f7fc fa07 	bl	800105c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d140      	bne.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c70:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004c74:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c80:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004cb2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004cb4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004cb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e069      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d051      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cfe:	d149      	bne.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e6      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d5c:	623a      	str	r2, [r7, #32]
 8004d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	69f9      	ldr	r1, [r7, #28]
 8004d62:	6a3a      	ldr	r2, [r7, #32]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e010      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	f43f af46 	beq.w	8004c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3770      	adds	r7, #112	@ 0x70
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e027      	b.n	8004e24 <HAL_UARTEx_DisableFifoMode+0x66>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	@ 0x24
 8004de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e02d      	b.n	8004ea4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	@ 0x24
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f84f 	bl	8004f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e02d      	b.n	8004f20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	@ 0x24
 8004ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f811 	bl	8004f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d108      	bne.n	8004f4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f48:	e031      	b.n	8004fae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f4a:	2310      	movs	r3, #16
 8004f4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f4e:	2310      	movs	r3, #16
 8004f50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	0e5b      	lsrs	r3, r3, #25
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	0f5b      	lsrs	r3, r3, #29
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f72:	7bbb      	ldrb	r3, [r7, #14]
 8004f74:	7b3a      	ldrb	r2, [r7, #12]
 8004f76:	4911      	ldr	r1, [pc, #68]	@ (8004fbc <UARTEx_SetNbDataToProcess+0x94>)
 8004f78:	5c8a      	ldrb	r2, [r1, r2]
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f7e:	7b3a      	ldrb	r2, [r7, #12]
 8004f80:	490f      	ldr	r1, [pc, #60]	@ (8004fc0 <UARTEx_SetNbDataToProcess+0x98>)
 8004f82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f84:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	7b7a      	ldrb	r2, [r7, #13]
 8004f94:	4909      	ldr	r1, [pc, #36]	@ (8004fbc <UARTEx_SetNbDataToProcess+0x94>)
 8004f96:	5c8a      	ldrb	r2, [r1, r2]
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f9c:	7b7a      	ldrb	r2, [r7, #13]
 8004f9e:	4908      	ldr	r1, [pc, #32]	@ (8004fc0 <UARTEx_SetNbDataToProcess+0x98>)
 8004fa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	08008380 	.word	0x08008380
 8004fc0:	08008388 	.word	0x08008388

08004fc4 <__cvt>:
 8004fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc6:	ed2d 8b02 	vpush	{d8}
 8004fca:	eeb0 8b40 	vmov.f64	d8, d0
 8004fce:	b085      	sub	sp, #20
 8004fd0:	4617      	mov	r7, r2
 8004fd2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004fd4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fd6:	ee18 2a90 	vmov	r2, s17
 8004fda:	f025 0520 	bic.w	r5, r5, #32
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	bfb6      	itet	lt
 8004fe2:	222d      	movlt	r2, #45	@ 0x2d
 8004fe4:	2200      	movge	r2, #0
 8004fe6:	eeb1 8b40 	vneglt.f64	d8, d0
 8004fea:	2d46      	cmp	r5, #70	@ 0x46
 8004fec:	460c      	mov	r4, r1
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	d004      	beq.n	8004ffc <__cvt+0x38>
 8004ff2:	2d45      	cmp	r5, #69	@ 0x45
 8004ff4:	d100      	bne.n	8004ff8 <__cvt+0x34>
 8004ff6:	3401      	adds	r4, #1
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	e000      	b.n	8004ffe <__cvt+0x3a>
 8004ffc:	2103      	movs	r1, #3
 8004ffe:	ab03      	add	r3, sp, #12
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	ab02      	add	r3, sp, #8
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	4622      	mov	r2, r4
 8005008:	4633      	mov	r3, r6
 800500a:	eeb0 0b48 	vmov.f64	d0, d8
 800500e:	f000 fe1f 	bl	8005c50 <_dtoa_r>
 8005012:	2d47      	cmp	r5, #71	@ 0x47
 8005014:	d114      	bne.n	8005040 <__cvt+0x7c>
 8005016:	07fb      	lsls	r3, r7, #31
 8005018:	d50a      	bpl.n	8005030 <__cvt+0x6c>
 800501a:	1902      	adds	r2, r0, r4
 800501c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005024:	bf08      	it	eq
 8005026:	9203      	streq	r2, [sp, #12]
 8005028:	2130      	movs	r1, #48	@ 0x30
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	4293      	cmp	r3, r2
 800502e:	d319      	bcc.n	8005064 <__cvt+0xa0>
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005034:	1a1b      	subs	r3, r3, r0
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	b005      	add	sp, #20
 800503a:	ecbd 8b02 	vpop	{d8}
 800503e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005040:	2d46      	cmp	r5, #70	@ 0x46
 8005042:	eb00 0204 	add.w	r2, r0, r4
 8005046:	d1e9      	bne.n	800501c <__cvt+0x58>
 8005048:	7803      	ldrb	r3, [r0, #0]
 800504a:	2b30      	cmp	r3, #48	@ 0x30
 800504c:	d107      	bne.n	800505e <__cvt+0x9a>
 800504e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	bf1c      	itt	ne
 8005058:	f1c4 0401 	rsbne	r4, r4, #1
 800505c:	6034      	strne	r4, [r6, #0]
 800505e:	6833      	ldr	r3, [r6, #0]
 8005060:	441a      	add	r2, r3
 8005062:	e7db      	b.n	800501c <__cvt+0x58>
 8005064:	1c5c      	adds	r4, r3, #1
 8005066:	9403      	str	r4, [sp, #12]
 8005068:	7019      	strb	r1, [r3, #0]
 800506a:	e7de      	b.n	800502a <__cvt+0x66>

0800506c <__exponent>:
 800506c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506e:	2900      	cmp	r1, #0
 8005070:	bfba      	itte	lt
 8005072:	4249      	neglt	r1, r1
 8005074:	232d      	movlt	r3, #45	@ 0x2d
 8005076:	232b      	movge	r3, #43	@ 0x2b
 8005078:	2909      	cmp	r1, #9
 800507a:	7002      	strb	r2, [r0, #0]
 800507c:	7043      	strb	r3, [r0, #1]
 800507e:	dd29      	ble.n	80050d4 <__exponent+0x68>
 8005080:	f10d 0307 	add.w	r3, sp, #7
 8005084:	461d      	mov	r5, r3
 8005086:	270a      	movs	r7, #10
 8005088:	461a      	mov	r2, r3
 800508a:	fbb1 f6f7 	udiv	r6, r1, r7
 800508e:	fb07 1416 	mls	r4, r7, r6, r1
 8005092:	3430      	adds	r4, #48	@ 0x30
 8005094:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005098:	460c      	mov	r4, r1
 800509a:	2c63      	cmp	r4, #99	@ 0x63
 800509c:	f103 33ff 	add.w	r3, r3, #4294967295
 80050a0:	4631      	mov	r1, r6
 80050a2:	dcf1      	bgt.n	8005088 <__exponent+0x1c>
 80050a4:	3130      	adds	r1, #48	@ 0x30
 80050a6:	1e94      	subs	r4, r2, #2
 80050a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050ac:	1c41      	adds	r1, r0, #1
 80050ae:	4623      	mov	r3, r4
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	d30a      	bcc.n	80050ca <__exponent+0x5e>
 80050b4:	f10d 0309 	add.w	r3, sp, #9
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	42ac      	cmp	r4, r5
 80050bc:	bf88      	it	hi
 80050be:	2300      	movhi	r3, #0
 80050c0:	3302      	adds	r3, #2
 80050c2:	4403      	add	r3, r0
 80050c4:	1a18      	subs	r0, r3, r0
 80050c6:	b003      	add	sp, #12
 80050c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 80050ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 80050d2:	e7ed      	b.n	80050b0 <__exponent+0x44>
 80050d4:	2330      	movs	r3, #48	@ 0x30
 80050d6:	3130      	adds	r1, #48	@ 0x30
 80050d8:	7083      	strb	r3, [r0, #2]
 80050da:	70c1      	strb	r1, [r0, #3]
 80050dc:	1d03      	adds	r3, r0, #4
 80050de:	e7f1      	b.n	80050c4 <__exponent+0x58>

080050e0 <_printf_float>:
 80050e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e4:	b08d      	sub	sp, #52	@ 0x34
 80050e6:	460c      	mov	r4, r1
 80050e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80050ec:	4616      	mov	r6, r2
 80050ee:	461f      	mov	r7, r3
 80050f0:	4605      	mov	r5, r0
 80050f2:	f000 fcab 	bl	8005a4c <_localeconv_r>
 80050f6:	f8d0 b000 	ldr.w	fp, [r0]
 80050fa:	4658      	mov	r0, fp
 80050fc:	f7fb f940 	bl	8000380 <strlen>
 8005100:	2300      	movs	r3, #0
 8005102:	930a      	str	r3, [sp, #40]	@ 0x28
 8005104:	f8d8 3000 	ldr.w	r3, [r8]
 8005108:	f894 9018 	ldrb.w	r9, [r4, #24]
 800510c:	6822      	ldr	r2, [r4, #0]
 800510e:	9005      	str	r0, [sp, #20]
 8005110:	3307      	adds	r3, #7
 8005112:	f023 0307 	bic.w	r3, r3, #7
 8005116:	f103 0108 	add.w	r1, r3, #8
 800511a:	f8c8 1000 	str.w	r1, [r8]
 800511e:	ed93 0b00 	vldr	d0, [r3]
 8005122:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8005380 <_printf_float+0x2a0>
 8005126:	eeb0 7bc0 	vabs.f64	d7, d0
 800512a:	eeb4 7b46 	vcmp.f64	d7, d6
 800512e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005132:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8005136:	dd24      	ble.n	8005182 <_printf_float+0xa2>
 8005138:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800513c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005140:	d502      	bpl.n	8005148 <_printf_float+0x68>
 8005142:	232d      	movs	r3, #45	@ 0x2d
 8005144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005148:	498f      	ldr	r1, [pc, #572]	@ (8005388 <_printf_float+0x2a8>)
 800514a:	4b90      	ldr	r3, [pc, #576]	@ (800538c <_printf_float+0x2ac>)
 800514c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8005150:	bf94      	ite	ls
 8005152:	4688      	movls	r8, r1
 8005154:	4698      	movhi	r8, r3
 8005156:	f022 0204 	bic.w	r2, r2, #4
 800515a:	2303      	movs	r3, #3
 800515c:	6123      	str	r3, [r4, #16]
 800515e:	6022      	str	r2, [r4, #0]
 8005160:	f04f 0a00 	mov.w	sl, #0
 8005164:	9700      	str	r7, [sp, #0]
 8005166:	4633      	mov	r3, r6
 8005168:	aa0b      	add	r2, sp, #44	@ 0x2c
 800516a:	4621      	mov	r1, r4
 800516c:	4628      	mov	r0, r5
 800516e:	f000 f9d1 	bl	8005514 <_printf_common>
 8005172:	3001      	adds	r0, #1
 8005174:	f040 8089 	bne.w	800528a <_printf_float+0x1aa>
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	b00d      	add	sp, #52	@ 0x34
 800517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005182:	eeb4 0b40 	vcmp.f64	d0, d0
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	d709      	bvc.n	80051a0 <_printf_float+0xc0>
 800518c:	ee10 3a90 	vmov	r3, s1
 8005190:	2b00      	cmp	r3, #0
 8005192:	bfbc      	itt	lt
 8005194:	232d      	movlt	r3, #45	@ 0x2d
 8005196:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800519a:	497d      	ldr	r1, [pc, #500]	@ (8005390 <_printf_float+0x2b0>)
 800519c:	4b7d      	ldr	r3, [pc, #500]	@ (8005394 <_printf_float+0x2b4>)
 800519e:	e7d5      	b.n	800514c <_printf_float+0x6c>
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	1c59      	adds	r1, r3, #1
 80051a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80051a8:	d139      	bne.n	800521e <_printf_float+0x13e>
 80051aa:	2306      	movs	r3, #6
 80051ac:	6063      	str	r3, [r4, #4]
 80051ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051b2:	2300      	movs	r3, #0
 80051b4:	6022      	str	r2, [r4, #0]
 80051b6:	9303      	str	r3, [sp, #12]
 80051b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80051ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80051be:	ab09      	add	r3, sp, #36	@ 0x24
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6861      	ldr	r1, [r4, #4]
 80051c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7ff fefb 	bl	8004fc4 <__cvt>
 80051ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80051d4:	4680      	mov	r8, r0
 80051d6:	d129      	bne.n	800522c <_printf_float+0x14c>
 80051d8:	1cc8      	adds	r0, r1, #3
 80051da:	db02      	blt.n	80051e2 <_printf_float+0x102>
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	4299      	cmp	r1, r3
 80051e0:	dd41      	ble.n	8005266 <_printf_float+0x186>
 80051e2:	f1a9 0902 	sub.w	r9, r9, #2
 80051e6:	fa5f f989 	uxtb.w	r9, r9
 80051ea:	3901      	subs	r1, #1
 80051ec:	464a      	mov	r2, r9
 80051ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80051f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80051f4:	f7ff ff3a 	bl	800506c <__exponent>
 80051f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051fa:	1813      	adds	r3, r2, r0
 80051fc:	2a01      	cmp	r2, #1
 80051fe:	4682      	mov	sl, r0
 8005200:	6123      	str	r3, [r4, #16]
 8005202:	dc02      	bgt.n	800520a <_printf_float+0x12a>
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	07d2      	lsls	r2, r2, #31
 8005208:	d501      	bpl.n	800520e <_printf_float+0x12e>
 800520a:	3301      	adds	r3, #1
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0a6      	beq.n	8005164 <_printf_float+0x84>
 8005216:	232d      	movs	r3, #45	@ 0x2d
 8005218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800521c:	e7a2      	b.n	8005164 <_printf_float+0x84>
 800521e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005222:	d1c4      	bne.n	80051ae <_printf_float+0xce>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1c2      	bne.n	80051ae <_printf_float+0xce>
 8005228:	2301      	movs	r3, #1
 800522a:	e7bf      	b.n	80051ac <_printf_float+0xcc>
 800522c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005230:	d9db      	bls.n	80051ea <_printf_float+0x10a>
 8005232:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8005236:	d118      	bne.n	800526a <_printf_float+0x18a>
 8005238:	2900      	cmp	r1, #0
 800523a:	6863      	ldr	r3, [r4, #4]
 800523c:	dd0b      	ble.n	8005256 <_printf_float+0x176>
 800523e:	6121      	str	r1, [r4, #16]
 8005240:	b913      	cbnz	r3, 8005248 <_printf_float+0x168>
 8005242:	6822      	ldr	r2, [r4, #0]
 8005244:	07d0      	lsls	r0, r2, #31
 8005246:	d502      	bpl.n	800524e <_printf_float+0x16e>
 8005248:	3301      	adds	r3, #1
 800524a:	440b      	add	r3, r1
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005250:	f04f 0a00 	mov.w	sl, #0
 8005254:	e7db      	b.n	800520e <_printf_float+0x12e>
 8005256:	b913      	cbnz	r3, 800525e <_printf_float+0x17e>
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	07d2      	lsls	r2, r2, #31
 800525c:	d501      	bpl.n	8005262 <_printf_float+0x182>
 800525e:	3302      	adds	r3, #2
 8005260:	e7f4      	b.n	800524c <_printf_float+0x16c>
 8005262:	2301      	movs	r3, #1
 8005264:	e7f2      	b.n	800524c <_printf_float+0x16c>
 8005266:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800526a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800526c:	4299      	cmp	r1, r3
 800526e:	db05      	blt.n	800527c <_printf_float+0x19c>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	6121      	str	r1, [r4, #16]
 8005274:	07d8      	lsls	r0, r3, #31
 8005276:	d5ea      	bpl.n	800524e <_printf_float+0x16e>
 8005278:	1c4b      	adds	r3, r1, #1
 800527a:	e7e7      	b.n	800524c <_printf_float+0x16c>
 800527c:	2900      	cmp	r1, #0
 800527e:	bfd4      	ite	le
 8005280:	f1c1 0202 	rsble	r2, r1, #2
 8005284:	2201      	movgt	r2, #1
 8005286:	4413      	add	r3, r2
 8005288:	e7e0      	b.n	800524c <_printf_float+0x16c>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	055a      	lsls	r2, r3, #21
 800528e:	d407      	bmi.n	80052a0 <_printf_float+0x1c0>
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	4642      	mov	r2, r8
 8005294:	4631      	mov	r1, r6
 8005296:	4628      	mov	r0, r5
 8005298:	47b8      	blx	r7
 800529a:	3001      	adds	r0, #1
 800529c:	d12a      	bne.n	80052f4 <_printf_float+0x214>
 800529e:	e76b      	b.n	8005178 <_printf_float+0x98>
 80052a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80052a4:	f240 80e0 	bls.w	8005468 <_printf_float+0x388>
 80052a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80052ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b4:	d133      	bne.n	800531e <_printf_float+0x23e>
 80052b6:	4a38      	ldr	r2, [pc, #224]	@ (8005398 <_printf_float+0x2b8>)
 80052b8:	2301      	movs	r3, #1
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f af59 	beq.w	8005178 <_printf_float+0x98>
 80052c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80052ca:	4543      	cmp	r3, r8
 80052cc:	db02      	blt.n	80052d4 <_printf_float+0x1f4>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	07d8      	lsls	r0, r3, #31
 80052d2:	d50f      	bpl.n	80052f4 <_printf_float+0x214>
 80052d4:	9b05      	ldr	r3, [sp, #20]
 80052d6:	465a      	mov	r2, fp
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f af4a 	beq.w	8005178 <_printf_float+0x98>
 80052e4:	f04f 0900 	mov.w	r9, #0
 80052e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80052ec:	f104 0a1a 	add.w	sl, r4, #26
 80052f0:	45c8      	cmp	r8, r9
 80052f2:	dc09      	bgt.n	8005308 <_printf_float+0x228>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	079b      	lsls	r3, r3, #30
 80052f8:	f100 8107 	bmi.w	800550a <_printf_float+0x42a>
 80052fc:	68e0      	ldr	r0, [r4, #12]
 80052fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005300:	4298      	cmp	r0, r3
 8005302:	bfb8      	it	lt
 8005304:	4618      	movlt	r0, r3
 8005306:	e739      	b.n	800517c <_printf_float+0x9c>
 8005308:	2301      	movs	r3, #1
 800530a:	4652      	mov	r2, sl
 800530c:	4631      	mov	r1, r6
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	f43f af30 	beq.w	8005178 <_printf_float+0x98>
 8005318:	f109 0901 	add.w	r9, r9, #1
 800531c:	e7e8      	b.n	80052f0 <_printf_float+0x210>
 800531e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	dc3b      	bgt.n	800539c <_printf_float+0x2bc>
 8005324:	4a1c      	ldr	r2, [pc, #112]	@ (8005398 <_printf_float+0x2b8>)
 8005326:	2301      	movs	r3, #1
 8005328:	4631      	mov	r1, r6
 800532a:	4628      	mov	r0, r5
 800532c:	47b8      	blx	r7
 800532e:	3001      	adds	r0, #1
 8005330:	f43f af22 	beq.w	8005178 <_printf_float+0x98>
 8005334:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005338:	ea59 0303 	orrs.w	r3, r9, r3
 800533c:	d102      	bne.n	8005344 <_printf_float+0x264>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	07d9      	lsls	r1, r3, #31
 8005342:	d5d7      	bpl.n	80052f4 <_printf_float+0x214>
 8005344:	9b05      	ldr	r3, [sp, #20]
 8005346:	465a      	mov	r2, fp
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	f43f af12 	beq.w	8005178 <_printf_float+0x98>
 8005354:	f04f 0a00 	mov.w	sl, #0
 8005358:	f104 0b1a 	add.w	fp, r4, #26
 800535c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535e:	425b      	negs	r3, r3
 8005360:	4553      	cmp	r3, sl
 8005362:	dc01      	bgt.n	8005368 <_printf_float+0x288>
 8005364:	464b      	mov	r3, r9
 8005366:	e794      	b.n	8005292 <_printf_float+0x1b2>
 8005368:	2301      	movs	r3, #1
 800536a:	465a      	mov	r2, fp
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f af00 	beq.w	8005178 <_printf_float+0x98>
 8005378:	f10a 0a01 	add.w	sl, sl, #1
 800537c:	e7ee      	b.n	800535c <_printf_float+0x27c>
 800537e:	bf00      	nop
 8005380:	ffffffff 	.word	0xffffffff
 8005384:	7fefffff 	.word	0x7fefffff
 8005388:	08008390 	.word	0x08008390
 800538c:	08008394 	.word	0x08008394
 8005390:	08008398 	.word	0x08008398
 8005394:	0800839c 	.word	0x0800839c
 8005398:	080083a0 	.word	0x080083a0
 800539c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800539e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053a2:	4553      	cmp	r3, sl
 80053a4:	bfa8      	it	ge
 80053a6:	4653      	movge	r3, sl
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	4699      	mov	r9, r3
 80053ac:	dc37      	bgt.n	800541e <_printf_float+0x33e>
 80053ae:	2300      	movs	r3, #0
 80053b0:	9307      	str	r3, [sp, #28]
 80053b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053b6:	f104 021a 	add.w	r2, r4, #26
 80053ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053bc:	9907      	ldr	r1, [sp, #28]
 80053be:	9306      	str	r3, [sp, #24]
 80053c0:	eba3 0309 	sub.w	r3, r3, r9
 80053c4:	428b      	cmp	r3, r1
 80053c6:	dc31      	bgt.n	800542c <_printf_float+0x34c>
 80053c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ca:	459a      	cmp	sl, r3
 80053cc:	dc3b      	bgt.n	8005446 <_printf_float+0x366>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	07da      	lsls	r2, r3, #31
 80053d2:	d438      	bmi.n	8005446 <_printf_float+0x366>
 80053d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053d6:	ebaa 0903 	sub.w	r9, sl, r3
 80053da:	9b06      	ldr	r3, [sp, #24]
 80053dc:	ebaa 0303 	sub.w	r3, sl, r3
 80053e0:	4599      	cmp	r9, r3
 80053e2:	bfa8      	it	ge
 80053e4:	4699      	movge	r9, r3
 80053e6:	f1b9 0f00 	cmp.w	r9, #0
 80053ea:	dc34      	bgt.n	8005456 <_printf_float+0x376>
 80053ec:	f04f 0800 	mov.w	r8, #0
 80053f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053f4:	f104 0b1a 	add.w	fp, r4, #26
 80053f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053fa:	ebaa 0303 	sub.w	r3, sl, r3
 80053fe:	eba3 0309 	sub.w	r3, r3, r9
 8005402:	4543      	cmp	r3, r8
 8005404:	f77f af76 	ble.w	80052f4 <_printf_float+0x214>
 8005408:	2301      	movs	r3, #1
 800540a:	465a      	mov	r2, fp
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	f43f aeb0 	beq.w	8005178 <_printf_float+0x98>
 8005418:	f108 0801 	add.w	r8, r8, #1
 800541c:	e7ec      	b.n	80053f8 <_printf_float+0x318>
 800541e:	4642      	mov	r2, r8
 8005420:	4631      	mov	r1, r6
 8005422:	4628      	mov	r0, r5
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	d1c1      	bne.n	80053ae <_printf_float+0x2ce>
 800542a:	e6a5      	b.n	8005178 <_printf_float+0x98>
 800542c:	2301      	movs	r3, #1
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	9206      	str	r2, [sp, #24]
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f ae9e 	beq.w	8005178 <_printf_float+0x98>
 800543c:	9b07      	ldr	r3, [sp, #28]
 800543e:	9a06      	ldr	r2, [sp, #24]
 8005440:	3301      	adds	r3, #1
 8005442:	9307      	str	r3, [sp, #28]
 8005444:	e7b9      	b.n	80053ba <_printf_float+0x2da>
 8005446:	9b05      	ldr	r3, [sp, #20]
 8005448:	465a      	mov	r2, fp
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	d1bf      	bne.n	80053d4 <_printf_float+0x2f4>
 8005454:	e690      	b.n	8005178 <_printf_float+0x98>
 8005456:	9a06      	ldr	r2, [sp, #24]
 8005458:	464b      	mov	r3, r9
 800545a:	4442      	add	r2, r8
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	d1c2      	bne.n	80053ec <_printf_float+0x30c>
 8005466:	e687      	b.n	8005178 <_printf_float+0x98>
 8005468:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800546c:	f1b9 0f01 	cmp.w	r9, #1
 8005470:	dc01      	bgt.n	8005476 <_printf_float+0x396>
 8005472:	07db      	lsls	r3, r3, #31
 8005474:	d536      	bpl.n	80054e4 <_printf_float+0x404>
 8005476:	2301      	movs	r3, #1
 8005478:	4642      	mov	r2, r8
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	f43f ae79 	beq.w	8005178 <_printf_float+0x98>
 8005486:	9b05      	ldr	r3, [sp, #20]
 8005488:	465a      	mov	r2, fp
 800548a:	4631      	mov	r1, r6
 800548c:	4628      	mov	r0, r5
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	f43f ae71 	beq.w	8005178 <_printf_float+0x98>
 8005496:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800549a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800549e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80054a6:	d018      	beq.n	80054da <_printf_float+0x3fa>
 80054a8:	464b      	mov	r3, r9
 80054aa:	f108 0201 	add.w	r2, r8, #1
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	d10c      	bne.n	80054d2 <_printf_float+0x3f2>
 80054b8:	e65e      	b.n	8005178 <_printf_float+0x98>
 80054ba:	2301      	movs	r3, #1
 80054bc:	465a      	mov	r2, fp
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f ae57 	beq.w	8005178 <_printf_float+0x98>
 80054ca:	f108 0801 	add.w	r8, r8, #1
 80054ce:	45c8      	cmp	r8, r9
 80054d0:	dbf3      	blt.n	80054ba <_printf_float+0x3da>
 80054d2:	4653      	mov	r3, sl
 80054d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80054d8:	e6dc      	b.n	8005294 <_printf_float+0x1b4>
 80054da:	f04f 0800 	mov.w	r8, #0
 80054de:	f104 0b1a 	add.w	fp, r4, #26
 80054e2:	e7f4      	b.n	80054ce <_printf_float+0x3ee>
 80054e4:	2301      	movs	r3, #1
 80054e6:	4642      	mov	r2, r8
 80054e8:	e7e1      	b.n	80054ae <_printf_float+0x3ce>
 80054ea:	2301      	movs	r3, #1
 80054ec:	464a      	mov	r2, r9
 80054ee:	4631      	mov	r1, r6
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b8      	blx	r7
 80054f4:	3001      	adds	r0, #1
 80054f6:	f43f ae3f 	beq.w	8005178 <_printf_float+0x98>
 80054fa:	f108 0801 	add.w	r8, r8, #1
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005502:	1a5b      	subs	r3, r3, r1
 8005504:	4543      	cmp	r3, r8
 8005506:	dcf0      	bgt.n	80054ea <_printf_float+0x40a>
 8005508:	e6f8      	b.n	80052fc <_printf_float+0x21c>
 800550a:	f04f 0800 	mov.w	r8, #0
 800550e:	f104 0919 	add.w	r9, r4, #25
 8005512:	e7f4      	b.n	80054fe <_printf_float+0x41e>

08005514 <_printf_common>:
 8005514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	4616      	mov	r6, r2
 800551a:	4698      	mov	r8, r3
 800551c:	688a      	ldr	r2, [r1, #8]
 800551e:	690b      	ldr	r3, [r1, #16]
 8005520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005524:	4293      	cmp	r3, r2
 8005526:	bfb8      	it	lt
 8005528:	4613      	movlt	r3, r2
 800552a:	6033      	str	r3, [r6, #0]
 800552c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005530:	4607      	mov	r7, r0
 8005532:	460c      	mov	r4, r1
 8005534:	b10a      	cbz	r2, 800553a <_printf_common+0x26>
 8005536:	3301      	adds	r3, #1
 8005538:	6033      	str	r3, [r6, #0]
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	0699      	lsls	r1, r3, #26
 800553e:	bf42      	ittt	mi
 8005540:	6833      	ldrmi	r3, [r6, #0]
 8005542:	3302      	addmi	r3, #2
 8005544:	6033      	strmi	r3, [r6, #0]
 8005546:	6825      	ldr	r5, [r4, #0]
 8005548:	f015 0506 	ands.w	r5, r5, #6
 800554c:	d106      	bne.n	800555c <_printf_common+0x48>
 800554e:	f104 0a19 	add.w	sl, r4, #25
 8005552:	68e3      	ldr	r3, [r4, #12]
 8005554:	6832      	ldr	r2, [r6, #0]
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	42ab      	cmp	r3, r5
 800555a:	dc26      	bgt.n	80055aa <_printf_common+0x96>
 800555c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	3b00      	subs	r3, #0
 8005564:	bf18      	it	ne
 8005566:	2301      	movne	r3, #1
 8005568:	0692      	lsls	r2, r2, #26
 800556a:	d42b      	bmi.n	80055c4 <_printf_common+0xb0>
 800556c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005570:	4641      	mov	r1, r8
 8005572:	4638      	mov	r0, r7
 8005574:	47c8      	blx	r9
 8005576:	3001      	adds	r0, #1
 8005578:	d01e      	beq.n	80055b8 <_printf_common+0xa4>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	6922      	ldr	r2, [r4, #16]
 800557e:	f003 0306 	and.w	r3, r3, #6
 8005582:	2b04      	cmp	r3, #4
 8005584:	bf02      	ittt	eq
 8005586:	68e5      	ldreq	r5, [r4, #12]
 8005588:	6833      	ldreq	r3, [r6, #0]
 800558a:	1aed      	subeq	r5, r5, r3
 800558c:	68a3      	ldr	r3, [r4, #8]
 800558e:	bf0c      	ite	eq
 8005590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005594:	2500      	movne	r5, #0
 8005596:	4293      	cmp	r3, r2
 8005598:	bfc4      	itt	gt
 800559a:	1a9b      	subgt	r3, r3, r2
 800559c:	18ed      	addgt	r5, r5, r3
 800559e:	2600      	movs	r6, #0
 80055a0:	341a      	adds	r4, #26
 80055a2:	42b5      	cmp	r5, r6
 80055a4:	d11a      	bne.n	80055dc <_printf_common+0xc8>
 80055a6:	2000      	movs	r0, #0
 80055a8:	e008      	b.n	80055bc <_printf_common+0xa8>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4652      	mov	r2, sl
 80055ae:	4641      	mov	r1, r8
 80055b0:	4638      	mov	r0, r7
 80055b2:	47c8      	blx	r9
 80055b4:	3001      	adds	r0, #1
 80055b6:	d103      	bne.n	80055c0 <_printf_common+0xac>
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c0:	3501      	adds	r5, #1
 80055c2:	e7c6      	b.n	8005552 <_printf_common+0x3e>
 80055c4:	18e1      	adds	r1, r4, r3
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	2030      	movs	r0, #48	@ 0x30
 80055ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055ce:	4422      	add	r2, r4
 80055d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055d8:	3302      	adds	r3, #2
 80055da:	e7c7      	b.n	800556c <_printf_common+0x58>
 80055dc:	2301      	movs	r3, #1
 80055de:	4622      	mov	r2, r4
 80055e0:	4641      	mov	r1, r8
 80055e2:	4638      	mov	r0, r7
 80055e4:	47c8      	blx	r9
 80055e6:	3001      	adds	r0, #1
 80055e8:	d0e6      	beq.n	80055b8 <_printf_common+0xa4>
 80055ea:	3601      	adds	r6, #1
 80055ec:	e7d9      	b.n	80055a2 <_printf_common+0x8e>
	...

080055f0 <_printf_i>:
 80055f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	7e0f      	ldrb	r7, [r1, #24]
 80055f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055f8:	2f78      	cmp	r7, #120	@ 0x78
 80055fa:	4691      	mov	r9, r2
 80055fc:	4680      	mov	r8, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	469a      	mov	sl, r3
 8005602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005606:	d807      	bhi.n	8005618 <_printf_i+0x28>
 8005608:	2f62      	cmp	r7, #98	@ 0x62
 800560a:	d80a      	bhi.n	8005622 <_printf_i+0x32>
 800560c:	2f00      	cmp	r7, #0
 800560e:	f000 80d2 	beq.w	80057b6 <_printf_i+0x1c6>
 8005612:	2f58      	cmp	r7, #88	@ 0x58
 8005614:	f000 80b9 	beq.w	800578a <_printf_i+0x19a>
 8005618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800561c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005620:	e03a      	b.n	8005698 <_printf_i+0xa8>
 8005622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005626:	2b15      	cmp	r3, #21
 8005628:	d8f6      	bhi.n	8005618 <_printf_i+0x28>
 800562a:	a101      	add	r1, pc, #4	@ (adr r1, 8005630 <_printf_i+0x40>)
 800562c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005630:	08005689 	.word	0x08005689
 8005634:	0800569d 	.word	0x0800569d
 8005638:	08005619 	.word	0x08005619
 800563c:	08005619 	.word	0x08005619
 8005640:	08005619 	.word	0x08005619
 8005644:	08005619 	.word	0x08005619
 8005648:	0800569d 	.word	0x0800569d
 800564c:	08005619 	.word	0x08005619
 8005650:	08005619 	.word	0x08005619
 8005654:	08005619 	.word	0x08005619
 8005658:	08005619 	.word	0x08005619
 800565c:	0800579d 	.word	0x0800579d
 8005660:	080056c7 	.word	0x080056c7
 8005664:	08005757 	.word	0x08005757
 8005668:	08005619 	.word	0x08005619
 800566c:	08005619 	.word	0x08005619
 8005670:	080057bf 	.word	0x080057bf
 8005674:	08005619 	.word	0x08005619
 8005678:	080056c7 	.word	0x080056c7
 800567c:	08005619 	.word	0x08005619
 8005680:	08005619 	.word	0x08005619
 8005684:	0800575f 	.word	0x0800575f
 8005688:	6833      	ldr	r3, [r6, #0]
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6032      	str	r2, [r6, #0]
 8005690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005698:	2301      	movs	r3, #1
 800569a:	e09d      	b.n	80057d8 <_printf_i+0x1e8>
 800569c:	6833      	ldr	r3, [r6, #0]
 800569e:	6820      	ldr	r0, [r4, #0]
 80056a0:	1d19      	adds	r1, r3, #4
 80056a2:	6031      	str	r1, [r6, #0]
 80056a4:	0606      	lsls	r6, r0, #24
 80056a6:	d501      	bpl.n	80056ac <_printf_i+0xbc>
 80056a8:	681d      	ldr	r5, [r3, #0]
 80056aa:	e003      	b.n	80056b4 <_printf_i+0xc4>
 80056ac:	0645      	lsls	r5, r0, #25
 80056ae:	d5fb      	bpl.n	80056a8 <_printf_i+0xb8>
 80056b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	da03      	bge.n	80056c0 <_printf_i+0xd0>
 80056b8:	232d      	movs	r3, #45	@ 0x2d
 80056ba:	426d      	negs	r5, r5
 80056bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c0:	4859      	ldr	r0, [pc, #356]	@ (8005828 <_printf_i+0x238>)
 80056c2:	230a      	movs	r3, #10
 80056c4:	e011      	b.n	80056ea <_printf_i+0xfa>
 80056c6:	6821      	ldr	r1, [r4, #0]
 80056c8:	6833      	ldr	r3, [r6, #0]
 80056ca:	0608      	lsls	r0, r1, #24
 80056cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80056d0:	d402      	bmi.n	80056d8 <_printf_i+0xe8>
 80056d2:	0649      	lsls	r1, r1, #25
 80056d4:	bf48      	it	mi
 80056d6:	b2ad      	uxthmi	r5, r5
 80056d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80056da:	4853      	ldr	r0, [pc, #332]	@ (8005828 <_printf_i+0x238>)
 80056dc:	6033      	str	r3, [r6, #0]
 80056de:	bf14      	ite	ne
 80056e0:	230a      	movne	r3, #10
 80056e2:	2308      	moveq	r3, #8
 80056e4:	2100      	movs	r1, #0
 80056e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ea:	6866      	ldr	r6, [r4, #4]
 80056ec:	60a6      	str	r6, [r4, #8]
 80056ee:	2e00      	cmp	r6, #0
 80056f0:	bfa2      	ittt	ge
 80056f2:	6821      	ldrge	r1, [r4, #0]
 80056f4:	f021 0104 	bicge.w	r1, r1, #4
 80056f8:	6021      	strge	r1, [r4, #0]
 80056fa:	b90d      	cbnz	r5, 8005700 <_printf_i+0x110>
 80056fc:	2e00      	cmp	r6, #0
 80056fe:	d04b      	beq.n	8005798 <_printf_i+0x1a8>
 8005700:	4616      	mov	r6, r2
 8005702:	fbb5 f1f3 	udiv	r1, r5, r3
 8005706:	fb03 5711 	mls	r7, r3, r1, r5
 800570a:	5dc7      	ldrb	r7, [r0, r7]
 800570c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005710:	462f      	mov	r7, r5
 8005712:	42bb      	cmp	r3, r7
 8005714:	460d      	mov	r5, r1
 8005716:	d9f4      	bls.n	8005702 <_printf_i+0x112>
 8005718:	2b08      	cmp	r3, #8
 800571a:	d10b      	bne.n	8005734 <_printf_i+0x144>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	07df      	lsls	r7, r3, #31
 8005720:	d508      	bpl.n	8005734 <_printf_i+0x144>
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	6861      	ldr	r1, [r4, #4]
 8005726:	4299      	cmp	r1, r3
 8005728:	bfde      	ittt	le
 800572a:	2330      	movle	r3, #48	@ 0x30
 800572c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005730:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005734:	1b92      	subs	r2, r2, r6
 8005736:	6122      	str	r2, [r4, #16]
 8005738:	f8cd a000 	str.w	sl, [sp]
 800573c:	464b      	mov	r3, r9
 800573e:	aa03      	add	r2, sp, #12
 8005740:	4621      	mov	r1, r4
 8005742:	4640      	mov	r0, r8
 8005744:	f7ff fee6 	bl	8005514 <_printf_common>
 8005748:	3001      	adds	r0, #1
 800574a:	d14a      	bne.n	80057e2 <_printf_i+0x1f2>
 800574c:	f04f 30ff 	mov.w	r0, #4294967295
 8005750:	b004      	add	sp, #16
 8005752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	f043 0320 	orr.w	r3, r3, #32
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	4833      	ldr	r0, [pc, #204]	@ (800582c <_printf_i+0x23c>)
 8005760:	2778      	movs	r7, #120	@ 0x78
 8005762:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	6831      	ldr	r1, [r6, #0]
 800576a:	061f      	lsls	r7, r3, #24
 800576c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005770:	d402      	bmi.n	8005778 <_printf_i+0x188>
 8005772:	065f      	lsls	r7, r3, #25
 8005774:	bf48      	it	mi
 8005776:	b2ad      	uxthmi	r5, r5
 8005778:	6031      	str	r1, [r6, #0]
 800577a:	07d9      	lsls	r1, r3, #31
 800577c:	bf44      	itt	mi
 800577e:	f043 0320 	orrmi.w	r3, r3, #32
 8005782:	6023      	strmi	r3, [r4, #0]
 8005784:	b11d      	cbz	r5, 800578e <_printf_i+0x19e>
 8005786:	2310      	movs	r3, #16
 8005788:	e7ac      	b.n	80056e4 <_printf_i+0xf4>
 800578a:	4827      	ldr	r0, [pc, #156]	@ (8005828 <_printf_i+0x238>)
 800578c:	e7e9      	b.n	8005762 <_printf_i+0x172>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f023 0320 	bic.w	r3, r3, #32
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	e7f6      	b.n	8005786 <_printf_i+0x196>
 8005798:	4616      	mov	r6, r2
 800579a:	e7bd      	b.n	8005718 <_printf_i+0x128>
 800579c:	6833      	ldr	r3, [r6, #0]
 800579e:	6825      	ldr	r5, [r4, #0]
 80057a0:	6961      	ldr	r1, [r4, #20]
 80057a2:	1d18      	adds	r0, r3, #4
 80057a4:	6030      	str	r0, [r6, #0]
 80057a6:	062e      	lsls	r6, r5, #24
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	d501      	bpl.n	80057b0 <_printf_i+0x1c0>
 80057ac:	6019      	str	r1, [r3, #0]
 80057ae:	e002      	b.n	80057b6 <_printf_i+0x1c6>
 80057b0:	0668      	lsls	r0, r5, #25
 80057b2:	d5fb      	bpl.n	80057ac <_printf_i+0x1bc>
 80057b4:	8019      	strh	r1, [r3, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	6123      	str	r3, [r4, #16]
 80057ba:	4616      	mov	r6, r2
 80057bc:	e7bc      	b.n	8005738 <_printf_i+0x148>
 80057be:	6833      	ldr	r3, [r6, #0]
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	6032      	str	r2, [r6, #0]
 80057c4:	681e      	ldr	r6, [r3, #0]
 80057c6:	6862      	ldr	r2, [r4, #4]
 80057c8:	2100      	movs	r1, #0
 80057ca:	4630      	mov	r0, r6
 80057cc:	f7fa fd88 	bl	80002e0 <memchr>
 80057d0:	b108      	cbz	r0, 80057d6 <_printf_i+0x1e6>
 80057d2:	1b80      	subs	r0, r0, r6
 80057d4:	6060      	str	r0, [r4, #4]
 80057d6:	6863      	ldr	r3, [r4, #4]
 80057d8:	6123      	str	r3, [r4, #16]
 80057da:	2300      	movs	r3, #0
 80057dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057e0:	e7aa      	b.n	8005738 <_printf_i+0x148>
 80057e2:	6923      	ldr	r3, [r4, #16]
 80057e4:	4632      	mov	r2, r6
 80057e6:	4649      	mov	r1, r9
 80057e8:	4640      	mov	r0, r8
 80057ea:	47d0      	blx	sl
 80057ec:	3001      	adds	r0, #1
 80057ee:	d0ad      	beq.n	800574c <_printf_i+0x15c>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	079b      	lsls	r3, r3, #30
 80057f4:	d413      	bmi.n	800581e <_printf_i+0x22e>
 80057f6:	68e0      	ldr	r0, [r4, #12]
 80057f8:	9b03      	ldr	r3, [sp, #12]
 80057fa:	4298      	cmp	r0, r3
 80057fc:	bfb8      	it	lt
 80057fe:	4618      	movlt	r0, r3
 8005800:	e7a6      	b.n	8005750 <_printf_i+0x160>
 8005802:	2301      	movs	r3, #1
 8005804:	4632      	mov	r2, r6
 8005806:	4649      	mov	r1, r9
 8005808:	4640      	mov	r0, r8
 800580a:	47d0      	blx	sl
 800580c:	3001      	adds	r0, #1
 800580e:	d09d      	beq.n	800574c <_printf_i+0x15c>
 8005810:	3501      	adds	r5, #1
 8005812:	68e3      	ldr	r3, [r4, #12]
 8005814:	9903      	ldr	r1, [sp, #12]
 8005816:	1a5b      	subs	r3, r3, r1
 8005818:	42ab      	cmp	r3, r5
 800581a:	dcf2      	bgt.n	8005802 <_printf_i+0x212>
 800581c:	e7eb      	b.n	80057f6 <_printf_i+0x206>
 800581e:	2500      	movs	r5, #0
 8005820:	f104 0619 	add.w	r6, r4, #25
 8005824:	e7f5      	b.n	8005812 <_printf_i+0x222>
 8005826:	bf00      	nop
 8005828:	080083a2 	.word	0x080083a2
 800582c:	080083b3 	.word	0x080083b3

08005830 <std>:
 8005830:	2300      	movs	r3, #0
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	e9c0 3300 	strd	r3, r3, [r0]
 800583a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800583e:	6083      	str	r3, [r0, #8]
 8005840:	8181      	strh	r1, [r0, #12]
 8005842:	6643      	str	r3, [r0, #100]	@ 0x64
 8005844:	81c2      	strh	r2, [r0, #14]
 8005846:	6183      	str	r3, [r0, #24]
 8005848:	4619      	mov	r1, r3
 800584a:	2208      	movs	r2, #8
 800584c:	305c      	adds	r0, #92	@ 0x5c
 800584e:	f000 f8f4 	bl	8005a3a <memset>
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <std+0x58>)
 8005854:	6263      	str	r3, [r4, #36]	@ 0x24
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <std+0x5c>)
 8005858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <std+0x60>)
 800585c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <std+0x64>)
 8005860:	6323      	str	r3, [r4, #48]	@ 0x30
 8005862:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <std+0x68>)
 8005864:	6224      	str	r4, [r4, #32]
 8005866:	429c      	cmp	r4, r3
 8005868:	d006      	beq.n	8005878 <std+0x48>
 800586a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800586e:	4294      	cmp	r4, r2
 8005870:	d002      	beq.n	8005878 <std+0x48>
 8005872:	33d0      	adds	r3, #208	@ 0xd0
 8005874:	429c      	cmp	r4, r3
 8005876:	d105      	bne.n	8005884 <std+0x54>
 8005878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005880:	f000 b958 	b.w	8005b34 <__retarget_lock_init_recursive>
 8005884:	bd10      	pop	{r4, pc}
 8005886:	bf00      	nop
 8005888:	080059b5 	.word	0x080059b5
 800588c:	080059d7 	.word	0x080059d7
 8005890:	08005a0f 	.word	0x08005a0f
 8005894:	08005a33 	.word	0x08005a33
 8005898:	24000314 	.word	0x24000314

0800589c <stdio_exit_handler>:
 800589c:	4a02      	ldr	r2, [pc, #8]	@ (80058a8 <stdio_exit_handler+0xc>)
 800589e:	4903      	ldr	r1, [pc, #12]	@ (80058ac <stdio_exit_handler+0x10>)
 80058a0:	4803      	ldr	r0, [pc, #12]	@ (80058b0 <stdio_exit_handler+0x14>)
 80058a2:	f000 b869 	b.w	8005978 <_fwalk_sglue>
 80058a6:	bf00      	nop
 80058a8:	24000014 	.word	0x24000014
 80058ac:	08007109 	.word	0x08007109
 80058b0:	24000024 	.word	0x24000024

080058b4 <cleanup_stdio>:
 80058b4:	6841      	ldr	r1, [r0, #4]
 80058b6:	4b0c      	ldr	r3, [pc, #48]	@ (80058e8 <cleanup_stdio+0x34>)
 80058b8:	4299      	cmp	r1, r3
 80058ba:	b510      	push	{r4, lr}
 80058bc:	4604      	mov	r4, r0
 80058be:	d001      	beq.n	80058c4 <cleanup_stdio+0x10>
 80058c0:	f001 fc22 	bl	8007108 <_fflush_r>
 80058c4:	68a1      	ldr	r1, [r4, #8]
 80058c6:	4b09      	ldr	r3, [pc, #36]	@ (80058ec <cleanup_stdio+0x38>)
 80058c8:	4299      	cmp	r1, r3
 80058ca:	d002      	beq.n	80058d2 <cleanup_stdio+0x1e>
 80058cc:	4620      	mov	r0, r4
 80058ce:	f001 fc1b 	bl	8007108 <_fflush_r>
 80058d2:	68e1      	ldr	r1, [r4, #12]
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <cleanup_stdio+0x3c>)
 80058d6:	4299      	cmp	r1, r3
 80058d8:	d004      	beq.n	80058e4 <cleanup_stdio+0x30>
 80058da:	4620      	mov	r0, r4
 80058dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e0:	f001 bc12 	b.w	8007108 <_fflush_r>
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	bf00      	nop
 80058e8:	24000314 	.word	0x24000314
 80058ec:	2400037c 	.word	0x2400037c
 80058f0:	240003e4 	.word	0x240003e4

080058f4 <global_stdio_init.part.0>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <global_stdio_init.part.0+0x30>)
 80058f8:	4c0b      	ldr	r4, [pc, #44]	@ (8005928 <global_stdio_init.part.0+0x34>)
 80058fa:	4a0c      	ldr	r2, [pc, #48]	@ (800592c <global_stdio_init.part.0+0x38>)
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	4620      	mov	r0, r4
 8005900:	2200      	movs	r2, #0
 8005902:	2104      	movs	r1, #4
 8005904:	f7ff ff94 	bl	8005830 <std>
 8005908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800590c:	2201      	movs	r2, #1
 800590e:	2109      	movs	r1, #9
 8005910:	f7ff ff8e 	bl	8005830 <std>
 8005914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005918:	2202      	movs	r2, #2
 800591a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591e:	2112      	movs	r1, #18
 8005920:	f7ff bf86 	b.w	8005830 <std>
 8005924:	2400044c 	.word	0x2400044c
 8005928:	24000314 	.word	0x24000314
 800592c:	0800589d 	.word	0x0800589d

08005930 <__sfp_lock_acquire>:
 8005930:	4801      	ldr	r0, [pc, #4]	@ (8005938 <__sfp_lock_acquire+0x8>)
 8005932:	f000 b900 	b.w	8005b36 <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	24000455 	.word	0x24000455

0800593c <__sfp_lock_release>:
 800593c:	4801      	ldr	r0, [pc, #4]	@ (8005944 <__sfp_lock_release+0x8>)
 800593e:	f000 b8fb 	b.w	8005b38 <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	24000455 	.word	0x24000455

08005948 <__sinit>:
 8005948:	b510      	push	{r4, lr}
 800594a:	4604      	mov	r4, r0
 800594c:	f7ff fff0 	bl	8005930 <__sfp_lock_acquire>
 8005950:	6a23      	ldr	r3, [r4, #32]
 8005952:	b11b      	cbz	r3, 800595c <__sinit+0x14>
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005958:	f7ff bff0 	b.w	800593c <__sfp_lock_release>
 800595c:	4b04      	ldr	r3, [pc, #16]	@ (8005970 <__sinit+0x28>)
 800595e:	6223      	str	r3, [r4, #32]
 8005960:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <__sinit+0x2c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f5      	bne.n	8005954 <__sinit+0xc>
 8005968:	f7ff ffc4 	bl	80058f4 <global_stdio_init.part.0>
 800596c:	e7f2      	b.n	8005954 <__sinit+0xc>
 800596e:	bf00      	nop
 8005970:	080058b5 	.word	0x080058b5
 8005974:	2400044c 	.word	0x2400044c

08005978 <_fwalk_sglue>:
 8005978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597c:	4607      	mov	r7, r0
 800597e:	4688      	mov	r8, r1
 8005980:	4614      	mov	r4, r2
 8005982:	2600      	movs	r6, #0
 8005984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005988:	f1b9 0901 	subs.w	r9, r9, #1
 800598c:	d505      	bpl.n	800599a <_fwalk_sglue+0x22>
 800598e:	6824      	ldr	r4, [r4, #0]
 8005990:	2c00      	cmp	r4, #0
 8005992:	d1f7      	bne.n	8005984 <_fwalk_sglue+0xc>
 8005994:	4630      	mov	r0, r6
 8005996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d907      	bls.n	80059b0 <_fwalk_sglue+0x38>
 80059a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a4:	3301      	adds	r3, #1
 80059a6:	d003      	beq.n	80059b0 <_fwalk_sglue+0x38>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c0      	blx	r8
 80059ae:	4306      	orrs	r6, r0
 80059b0:	3568      	adds	r5, #104	@ 0x68
 80059b2:	e7e9      	b.n	8005988 <_fwalk_sglue+0x10>

080059b4 <__sread>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	460c      	mov	r4, r1
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	f000 f86c 	bl	8005a98 <_read_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	bfab      	itete	ge
 80059c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059c6:	89a3      	ldrhlt	r3, [r4, #12]
 80059c8:	181b      	addge	r3, r3, r0
 80059ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059ce:	bfac      	ite	ge
 80059d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059d2:	81a3      	strhlt	r3, [r4, #12]
 80059d4:	bd10      	pop	{r4, pc}

080059d6 <__swrite>:
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	461f      	mov	r7, r3
 80059dc:	898b      	ldrh	r3, [r1, #12]
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	4605      	mov	r5, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	4616      	mov	r6, r2
 80059e6:	d505      	bpl.n	80059f4 <__swrite+0x1e>
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	2302      	movs	r3, #2
 80059ee:	2200      	movs	r2, #0
 80059f0:	f000 f840 	bl	8005a74 <_lseek_r>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	4628      	mov	r0, r5
 8005a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	f000 b857 	b.w	8005abc <_write_r>

08005a0e <__sseek>:
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	460c      	mov	r4, r1
 8005a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a16:	f000 f82d 	bl	8005a74 <_lseek_r>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	bf15      	itete	ne
 8005a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a2a:	81a3      	strheq	r3, [r4, #12]
 8005a2c:	bf18      	it	ne
 8005a2e:	81a3      	strhne	r3, [r4, #12]
 8005a30:	bd10      	pop	{r4, pc}

08005a32 <__sclose>:
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 b80d 	b.w	8005a54 <_close_r>

08005a3a <memset>:
 8005a3a:	4402      	add	r2, r0
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d100      	bne.n	8005a44 <memset+0xa>
 8005a42:	4770      	bx	lr
 8005a44:	f803 1b01 	strb.w	r1, [r3], #1
 8005a48:	e7f9      	b.n	8005a3e <memset+0x4>
	...

08005a4c <_localeconv_r>:
 8005a4c:	4800      	ldr	r0, [pc, #0]	@ (8005a50 <_localeconv_r+0x4>)
 8005a4e:	4770      	bx	lr
 8005a50:	24000160 	.word	0x24000160

08005a54 <_close_r>:
 8005a54:	b538      	push	{r3, r4, r5, lr}
 8005a56:	4d06      	ldr	r5, [pc, #24]	@ (8005a70 <_close_r+0x1c>)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	f7fb f9e1 	bl	8000e26 <_close>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_close_r+0x1a>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_close_r+0x1a>
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	24000450 	.word	0x24000450

08005a74 <_lseek_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	@ (8005a94 <_lseek_r+0x20>)
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4608      	mov	r0, r1
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	602a      	str	r2, [r5, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f7fb f9f6 	bl	8000e74 <_lseek>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_lseek_r+0x1e>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_lseek_r+0x1e>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	24000450 	.word	0x24000450

08005a98 <_read_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	@ (8005ab8 <_read_r+0x20>)
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	602a      	str	r2, [r5, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f7fb f984 	bl	8000db4 <_read>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_read_r+0x1e>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_read_r+0x1e>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	24000450 	.word	0x24000450

08005abc <_write_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d07      	ldr	r5, [pc, #28]	@ (8005adc <_write_r+0x20>)
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	4608      	mov	r0, r1
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	602a      	str	r2, [r5, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f7fb f98f 	bl	8000dee <_write>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_write_r+0x1e>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_write_r+0x1e>
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	24000450 	.word	0x24000450

08005ae0 <__errno>:
 8005ae0:	4b01      	ldr	r3, [pc, #4]	@ (8005ae8 <__errno+0x8>)
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	24000020 	.word	0x24000020

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4d0d      	ldr	r5, [pc, #52]	@ (8005b24 <__libc_init_array+0x38>)
 8005af0:	4c0d      	ldr	r4, [pc, #52]	@ (8005b28 <__libc_init_array+0x3c>)
 8005af2:	1b64      	subs	r4, r4, r5
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	2600      	movs	r6, #0
 8005af8:	42a6      	cmp	r6, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	4d0b      	ldr	r5, [pc, #44]	@ (8005b2c <__libc_init_array+0x40>)
 8005afe:	4c0c      	ldr	r4, [pc, #48]	@ (8005b30 <__libc_init_array+0x44>)
 8005b00:	f002 fc1e 	bl	8008340 <_init>
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	2600      	movs	r6, #0
 8005b0a:	42a6      	cmp	r6, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b14:	4798      	blx	r3
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1e:	4798      	blx	r3
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	080088e0 	.word	0x080088e0
 8005b28:	080088e0 	.word	0x080088e0
 8005b2c:	080088e0 	.word	0x080088e0
 8005b30:	080088e4 	.word	0x080088e4

08005b34 <__retarget_lock_init_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <__retarget_lock_acquire_recursive>:
 8005b36:	4770      	bx	lr

08005b38 <__retarget_lock_release_recursive>:
 8005b38:	4770      	bx	lr

08005b3a <quorem>:
 8005b3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3e:	6903      	ldr	r3, [r0, #16]
 8005b40:	690c      	ldr	r4, [r1, #16]
 8005b42:	42a3      	cmp	r3, r4
 8005b44:	4607      	mov	r7, r0
 8005b46:	db7e      	blt.n	8005c46 <quorem+0x10c>
 8005b48:	3c01      	subs	r4, #1
 8005b4a:	f101 0814 	add.w	r8, r1, #20
 8005b4e:	00a3      	lsls	r3, r4, #2
 8005b50:	f100 0514 	add.w	r5, r0, #20
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b64:	3301      	adds	r3, #1
 8005b66:	429a      	cmp	r2, r3
 8005b68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b70:	d32e      	bcc.n	8005bd0 <quorem+0x96>
 8005b72:	f04f 0a00 	mov.w	sl, #0
 8005b76:	46c4      	mov	ip, r8
 8005b78:	46ae      	mov	lr, r5
 8005b7a:	46d3      	mov	fp, sl
 8005b7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b80:	b298      	uxth	r0, r3
 8005b82:	fb06 a000 	mla	r0, r6, r0, sl
 8005b86:	0c02      	lsrs	r2, r0, #16
 8005b88:	0c1b      	lsrs	r3, r3, #16
 8005b8a:	fb06 2303 	mla	r3, r6, r3, r2
 8005b8e:	f8de 2000 	ldr.w	r2, [lr]
 8005b92:	b280      	uxth	r0, r0
 8005b94:	b292      	uxth	r2, r2
 8005b96:	1a12      	subs	r2, r2, r0
 8005b98:	445a      	add	r2, fp
 8005b9a:	f8de 0000 	ldr.w	r0, [lr]
 8005b9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ba8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005bac:	b292      	uxth	r2, r2
 8005bae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bb2:	45e1      	cmp	r9, ip
 8005bb4:	f84e 2b04 	str.w	r2, [lr], #4
 8005bb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bbc:	d2de      	bcs.n	8005b7c <quorem+0x42>
 8005bbe:	9b00      	ldr	r3, [sp, #0]
 8005bc0:	58eb      	ldr	r3, [r5, r3]
 8005bc2:	b92b      	cbnz	r3, 8005bd0 <quorem+0x96>
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	3b04      	subs	r3, #4
 8005bc8:	429d      	cmp	r5, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	d32f      	bcc.n	8005c2e <quorem+0xf4>
 8005bce:	613c      	str	r4, [r7, #16]
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f001 f90d 	bl	8006df0 <__mcmp>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	db25      	blt.n	8005c26 <quorem+0xec>
 8005bda:	4629      	mov	r1, r5
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f858 2b04 	ldr.w	r2, [r8], #4
 8005be2:	f8d1 c000 	ldr.w	ip, [r1]
 8005be6:	fa1f fe82 	uxth.w	lr, r2
 8005bea:	fa1f f38c 	uxth.w	r3, ip
 8005bee:	eba3 030e 	sub.w	r3, r3, lr
 8005bf2:	4403      	add	r3, r0
 8005bf4:	0c12      	lsrs	r2, r2, #16
 8005bf6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bfa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c04:	45c1      	cmp	r9, r8
 8005c06:	f841 3b04 	str.w	r3, [r1], #4
 8005c0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c0e:	d2e6      	bcs.n	8005bde <quorem+0xa4>
 8005c10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c18:	b922      	cbnz	r2, 8005c24 <quorem+0xea>
 8005c1a:	3b04      	subs	r3, #4
 8005c1c:	429d      	cmp	r5, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	d30b      	bcc.n	8005c3a <quorem+0x100>
 8005c22:	613c      	str	r4, [r7, #16]
 8005c24:	3601      	adds	r6, #1
 8005c26:	4630      	mov	r0, r6
 8005c28:	b003      	add	sp, #12
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	3b04      	subs	r3, #4
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d1cb      	bne.n	8005bce <quorem+0x94>
 8005c36:	3c01      	subs	r4, #1
 8005c38:	e7c6      	b.n	8005bc8 <quorem+0x8e>
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	d1ef      	bne.n	8005c22 <quorem+0xe8>
 8005c42:	3c01      	subs	r4, #1
 8005c44:	e7ea      	b.n	8005c1c <quorem+0xe2>
 8005c46:	2000      	movs	r0, #0
 8005c48:	e7ee      	b.n	8005c28 <quorem+0xee>
 8005c4a:	0000      	movs	r0, r0
 8005c4c:	0000      	movs	r0, r0
	...

08005c50 <_dtoa_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	ed2d 8b02 	vpush	{d8}
 8005c58:	69c7      	ldr	r7, [r0, #28]
 8005c5a:	b091      	sub	sp, #68	@ 0x44
 8005c5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c60:	ec55 4b10 	vmov	r4, r5, d0
 8005c64:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005c66:	9107      	str	r1, [sp, #28]
 8005c68:	4681      	mov	r9, r0
 8005c6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8005c6e:	b97f      	cbnz	r7, 8005c90 <_dtoa_r+0x40>
 8005c70:	2010      	movs	r0, #16
 8005c72:	f000 fd8d 	bl	8006790 <malloc>
 8005c76:	4602      	mov	r2, r0
 8005c78:	f8c9 001c 	str.w	r0, [r9, #28]
 8005c7c:	b920      	cbnz	r0, 8005c88 <_dtoa_r+0x38>
 8005c7e:	4ba0      	ldr	r3, [pc, #640]	@ (8005f00 <_dtoa_r+0x2b0>)
 8005c80:	21ef      	movs	r1, #239	@ 0xef
 8005c82:	48a0      	ldr	r0, [pc, #640]	@ (8005f04 <_dtoa_r+0x2b4>)
 8005c84:	f001 fa86 	bl	8007194 <__assert_func>
 8005c88:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c8c:	6007      	str	r7, [r0, #0]
 8005c8e:	60c7      	str	r7, [r0, #12]
 8005c90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c94:	6819      	ldr	r1, [r3, #0]
 8005c96:	b159      	cbz	r1, 8005cb0 <_dtoa_r+0x60>
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	604a      	str	r2, [r1, #4]
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4093      	lsls	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
 8005ca2:	4648      	mov	r0, r9
 8005ca4:	f000 fe6a 	bl	800697c <_Bfree>
 8005ca8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	1e2b      	subs	r3, r5, #0
 8005cb2:	bfbb      	ittet	lt
 8005cb4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005cb8:	9303      	strlt	r3, [sp, #12]
 8005cba:	2300      	movge	r3, #0
 8005cbc:	2201      	movlt	r2, #1
 8005cbe:	bfac      	ite	ge
 8005cc0:	6033      	strge	r3, [r6, #0]
 8005cc2:	6032      	strlt	r2, [r6, #0]
 8005cc4:	4b90      	ldr	r3, [pc, #576]	@ (8005f08 <_dtoa_r+0x2b8>)
 8005cc6:	9e03      	ldr	r6, [sp, #12]
 8005cc8:	43b3      	bics	r3, r6
 8005cca:	d110      	bne.n	8005cee <_dtoa_r+0x9e>
 8005ccc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005cce:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005cd8:	4323      	orrs	r3, r4
 8005cda:	f000 84de 	beq.w	800669a <_dtoa_r+0xa4a>
 8005cde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005ce0:	4f8a      	ldr	r7, [pc, #552]	@ (8005f0c <_dtoa_r+0x2bc>)
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 84e0 	beq.w	80066a8 <_dtoa_r+0xa58>
 8005ce8:	1cfb      	adds	r3, r7, #3
 8005cea:	f000 bcdb 	b.w	80066a4 <_dtoa_r+0xa54>
 8005cee:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005cf2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfa:	d10a      	bne.n	8005d12 <_dtoa_r+0xc2>
 8005cfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005cfe:	2301      	movs	r3, #1
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005d04:	b113      	cbz	r3, 8005d0c <_dtoa_r+0xbc>
 8005d06:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005d08:	4b81      	ldr	r3, [pc, #516]	@ (8005f10 <_dtoa_r+0x2c0>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	4f81      	ldr	r7, [pc, #516]	@ (8005f14 <_dtoa_r+0x2c4>)
 8005d0e:	f000 bccb 	b.w	80066a8 <_dtoa_r+0xa58>
 8005d12:	aa0e      	add	r2, sp, #56	@ 0x38
 8005d14:	a90f      	add	r1, sp, #60	@ 0x3c
 8005d16:	4648      	mov	r0, r9
 8005d18:	eeb0 0b48 	vmov.f64	d0, d8
 8005d1c:	f001 f918 	bl	8006f50 <__d2b>
 8005d20:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d26:	9001      	str	r0, [sp, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d045      	beq.n	8005db8 <_dtoa_r+0x168>
 8005d2c:	eeb0 7b48 	vmov.f64	d7, d8
 8005d30:	ee18 1a90 	vmov	r1, s17
 8005d34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005d38:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005d3c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005d40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005d44:	2500      	movs	r5, #0
 8005d46:	ee07 1a90 	vmov	s15, r1
 8005d4a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005d4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005ee8 <_dtoa_r+0x298>
 8005d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d56:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005ef0 <_dtoa_r+0x2a0>
 8005d5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005d5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005ef8 <_dtoa_r+0x2a8>
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005d6a:	eeb0 7b46 	vmov.f64	d7, d6
 8005d6e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005d72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005d76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7e:	ee16 8a90 	vmov	r8, s13
 8005d82:	d508      	bpl.n	8005d96 <_dtoa_r+0x146>
 8005d84:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005d88:	eeb4 6b47 	vcmp.f64	d6, d7
 8005d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d90:	bf18      	it	ne
 8005d92:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005d96:	f1b8 0f16 	cmp.w	r8, #22
 8005d9a:	d82b      	bhi.n	8005df4 <_dtoa_r+0x1a4>
 8005d9c:	495e      	ldr	r1, [pc, #376]	@ (8005f18 <_dtoa_r+0x2c8>)
 8005d9e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005da2:	ed91 7b00 	vldr	d7, [r1]
 8005da6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	d501      	bpl.n	8005db4 <_dtoa_r+0x164>
 8005db0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005db4:	2100      	movs	r1, #0
 8005db6:	e01e      	b.n	8005df6 <_dtoa_r+0x1a6>
 8005db8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005dc0:	2920      	cmp	r1, #32
 8005dc2:	bfc1      	itttt	gt
 8005dc4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005dc8:	408e      	lslgt	r6, r1
 8005dca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005dce:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005dd2:	bfd6      	itet	le
 8005dd4:	f1c1 0120 	rsble	r1, r1, #32
 8005dd8:	4331      	orrgt	r1, r6
 8005dda:	fa04 f101 	lslle.w	r1, r4, r1
 8005dde:	ee07 1a90 	vmov	s15, r1
 8005de2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005de6:	3b01      	subs	r3, #1
 8005de8:	ee17 1a90 	vmov	r1, s15
 8005dec:	2501      	movs	r5, #1
 8005dee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005df2:	e7a8      	b.n	8005d46 <_dtoa_r+0xf6>
 8005df4:	2101      	movs	r1, #1
 8005df6:	1ad2      	subs	r2, r2, r3
 8005df8:	1e53      	subs	r3, r2, #1
 8005dfa:	9306      	str	r3, [sp, #24]
 8005dfc:	bf45      	ittet	mi
 8005dfe:	f1c2 0301 	rsbmi	r3, r2, #1
 8005e02:	9305      	strmi	r3, [sp, #20]
 8005e04:	2300      	movpl	r3, #0
 8005e06:	2300      	movmi	r3, #0
 8005e08:	bf4c      	ite	mi
 8005e0a:	9306      	strmi	r3, [sp, #24]
 8005e0c:	9305      	strpl	r3, [sp, #20]
 8005e0e:	f1b8 0f00 	cmp.w	r8, #0
 8005e12:	910c      	str	r1, [sp, #48]	@ 0x30
 8005e14:	db18      	blt.n	8005e48 <_dtoa_r+0x1f8>
 8005e16:	9b06      	ldr	r3, [sp, #24]
 8005e18:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005e1c:	4443      	add	r3, r8
 8005e1e:	9306      	str	r3, [sp, #24]
 8005e20:	2300      	movs	r3, #0
 8005e22:	9a07      	ldr	r2, [sp, #28]
 8005e24:	2a09      	cmp	r2, #9
 8005e26:	d849      	bhi.n	8005ebc <_dtoa_r+0x26c>
 8005e28:	2a05      	cmp	r2, #5
 8005e2a:	bfc4      	itt	gt
 8005e2c:	3a04      	subgt	r2, #4
 8005e2e:	9207      	strgt	r2, [sp, #28]
 8005e30:	9a07      	ldr	r2, [sp, #28]
 8005e32:	f1a2 0202 	sub.w	r2, r2, #2
 8005e36:	bfcc      	ite	gt
 8005e38:	2400      	movgt	r4, #0
 8005e3a:	2401      	movle	r4, #1
 8005e3c:	2a03      	cmp	r2, #3
 8005e3e:	d848      	bhi.n	8005ed2 <_dtoa_r+0x282>
 8005e40:	e8df f002 	tbb	[pc, r2]
 8005e44:	3a2c2e0b 	.word	0x3a2c2e0b
 8005e48:	9b05      	ldr	r3, [sp, #20]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	eba3 0308 	sub.w	r3, r3, r8
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e54:	f1c8 0300 	rsb	r3, r8, #0
 8005e58:	e7e3      	b.n	8005e22 <_dtoa_r+0x1d2>
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	9208      	str	r2, [sp, #32]
 8005e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	dc39      	bgt.n	8005ed8 <_dtoa_r+0x288>
 8005e64:	f04f 0b01 	mov.w	fp, #1
 8005e68:	46da      	mov	sl, fp
 8005e6a:	465a      	mov	r2, fp
 8005e6c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005e70:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005e74:	2100      	movs	r1, #0
 8005e76:	2004      	movs	r0, #4
 8005e78:	f100 0614 	add.w	r6, r0, #20
 8005e7c:	4296      	cmp	r6, r2
 8005e7e:	d930      	bls.n	8005ee2 <_dtoa_r+0x292>
 8005e80:	6079      	str	r1, [r7, #4]
 8005e82:	4648      	mov	r0, r9
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	f000 fd39 	bl	80068fc <_Balloc>
 8005e8a:	9b04      	ldr	r3, [sp, #16]
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d146      	bne.n	8005f20 <_dtoa_r+0x2d0>
 8005e92:	4b22      	ldr	r3, [pc, #136]	@ (8005f1c <_dtoa_r+0x2cc>)
 8005e94:	4602      	mov	r2, r0
 8005e96:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e9a:	e6f2      	b.n	8005c82 <_dtoa_r+0x32>
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	e7dd      	b.n	8005e5c <_dtoa_r+0x20c>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	9208      	str	r2, [sp, #32]
 8005ea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ea6:	eb08 0b02 	add.w	fp, r8, r2
 8005eaa:	f10b 0a01 	add.w	sl, fp, #1
 8005eae:	4652      	mov	r2, sl
 8005eb0:	2a01      	cmp	r2, #1
 8005eb2:	bfb8      	it	lt
 8005eb4:	2201      	movlt	r2, #1
 8005eb6:	e7db      	b.n	8005e70 <_dtoa_r+0x220>
 8005eb8:	2201      	movs	r2, #1
 8005eba:	e7f2      	b.n	8005ea2 <_dtoa_r+0x252>
 8005ebc:	2401      	movs	r4, #1
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005ec4:	f04f 3bff 	mov.w	fp, #4294967295
 8005ec8:	2100      	movs	r1, #0
 8005eca:	46da      	mov	sl, fp
 8005ecc:	2212      	movs	r2, #18
 8005ece:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ed0:	e7ce      	b.n	8005e70 <_dtoa_r+0x220>
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	9208      	str	r2, [sp, #32]
 8005ed6:	e7f5      	b.n	8005ec4 <_dtoa_r+0x274>
 8005ed8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8005edc:	46da      	mov	sl, fp
 8005ede:	465a      	mov	r2, fp
 8005ee0:	e7c6      	b.n	8005e70 <_dtoa_r+0x220>
 8005ee2:	3101      	adds	r1, #1
 8005ee4:	0040      	lsls	r0, r0, #1
 8005ee6:	e7c7      	b.n	8005e78 <_dtoa_r+0x228>
 8005ee8:	636f4361 	.word	0x636f4361
 8005eec:	3fd287a7 	.word	0x3fd287a7
 8005ef0:	8b60c8b3 	.word	0x8b60c8b3
 8005ef4:	3fc68a28 	.word	0x3fc68a28
 8005ef8:	509f79fb 	.word	0x509f79fb
 8005efc:	3fd34413 	.word	0x3fd34413
 8005f00:	080083d1 	.word	0x080083d1
 8005f04:	080083e8 	.word	0x080083e8
 8005f08:	7ff00000 	.word	0x7ff00000
 8005f0c:	080083cd 	.word	0x080083cd
 8005f10:	080083a1 	.word	0x080083a1
 8005f14:	080083a0 	.word	0x080083a0
 8005f18:	080084e0 	.word	0x080084e0
 8005f1c:	08008440 	.word	0x08008440
 8005f20:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005f24:	f1ba 0f0e 	cmp.w	sl, #14
 8005f28:	6010      	str	r0, [r2, #0]
 8005f2a:	d86f      	bhi.n	800600c <_dtoa_r+0x3bc>
 8005f2c:	2c00      	cmp	r4, #0
 8005f2e:	d06d      	beq.n	800600c <_dtoa_r+0x3bc>
 8005f30:	f1b8 0f00 	cmp.w	r8, #0
 8005f34:	f340 80c2 	ble.w	80060bc <_dtoa_r+0x46c>
 8005f38:	4aca      	ldr	r2, [pc, #808]	@ (8006264 <_dtoa_r+0x614>)
 8005f3a:	f008 010f 	and.w	r1, r8, #15
 8005f3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005f42:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005f46:	ed92 7b00 	vldr	d7, [r2]
 8005f4a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005f4e:	f000 80a9 	beq.w	80060a4 <_dtoa_r+0x454>
 8005f52:	4ac5      	ldr	r2, [pc, #788]	@ (8006268 <_dtoa_r+0x618>)
 8005f54:	ed92 6b08 	vldr	d6, [r2, #32]
 8005f58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005f5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005f60:	f001 010f 	and.w	r1, r1, #15
 8005f64:	2203      	movs	r2, #3
 8005f66:	48c0      	ldr	r0, [pc, #768]	@ (8006268 <_dtoa_r+0x618>)
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	f040 809d 	bne.w	80060a8 <_dtoa_r+0x458>
 8005f6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005f72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005f76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005f7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f80:	2900      	cmp	r1, #0
 8005f82:	f000 80c1 	beq.w	8006108 <_dtoa_r+0x4b8>
 8005f86:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005f8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f92:	f140 80b9 	bpl.w	8006108 <_dtoa_r+0x4b8>
 8005f96:	f1ba 0f00 	cmp.w	sl, #0
 8005f9a:	f000 80b5 	beq.w	8006108 <_dtoa_r+0x4b8>
 8005f9e:	f1bb 0f00 	cmp.w	fp, #0
 8005fa2:	dd31      	ble.n	8006008 <_dtoa_r+0x3b8>
 8005fa4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005fa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005fac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fb0:	f108 31ff 	add.w	r1, r8, #4294967295
 8005fb4:	9104      	str	r1, [sp, #16]
 8005fb6:	3201      	adds	r2, #1
 8005fb8:	465c      	mov	r4, fp
 8005fba:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005fbe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005fc2:	ee07 2a90 	vmov	s15, r2
 8005fc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005fca:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005fce:	ee15 2a90 	vmov	r2, s11
 8005fd2:	ec51 0b15 	vmov	r0, r1, d5
 8005fd6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	f040 8098 	bne.w	8006110 <_dtoa_r+0x4c0>
 8005fe0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005fe4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005fe8:	ec41 0b17 	vmov	d7, r0, r1
 8005fec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff4:	f300 8261 	bgt.w	80064ba <_dtoa_r+0x86a>
 8005ff8:	eeb1 7b47 	vneg.f64	d7, d7
 8005ffc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006004:	f100 80f5 	bmi.w	80061f2 <_dtoa_r+0x5a2>
 8006008:	ed8d 8b02 	vstr	d8, [sp, #8]
 800600c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800600e:	2a00      	cmp	r2, #0
 8006010:	f2c0 812c 	blt.w	800626c <_dtoa_r+0x61c>
 8006014:	f1b8 0f0e 	cmp.w	r8, #14
 8006018:	f300 8128 	bgt.w	800626c <_dtoa_r+0x61c>
 800601c:	4b91      	ldr	r3, [pc, #580]	@ (8006264 <_dtoa_r+0x614>)
 800601e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006022:	ed93 6b00 	vldr	d6, [r3]
 8006026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	da03      	bge.n	8006034 <_dtoa_r+0x3e4>
 800602c:	f1ba 0f00 	cmp.w	sl, #0
 8006030:	f340 80d2 	ble.w	80061d8 <_dtoa_r+0x588>
 8006034:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8006038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800603c:	463e      	mov	r6, r7
 800603e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006042:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006046:	ee15 3a10 	vmov	r3, s10
 800604a:	3330      	adds	r3, #48	@ 0x30
 800604c:	f806 3b01 	strb.w	r3, [r6], #1
 8006050:	1bf3      	subs	r3, r6, r7
 8006052:	459a      	cmp	sl, r3
 8006054:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006058:	eea3 7b46 	vfms.f64	d7, d3, d6
 800605c:	f040 80f8 	bne.w	8006250 <_dtoa_r+0x600>
 8006060:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006064:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606c:	f300 80dd 	bgt.w	800622a <_dtoa_r+0x5da>
 8006070:	eeb4 7b46 	vcmp.f64	d7, d6
 8006074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006078:	d104      	bne.n	8006084 <_dtoa_r+0x434>
 800607a:	ee15 3a10 	vmov	r3, s10
 800607e:	07db      	lsls	r3, r3, #31
 8006080:	f100 80d3 	bmi.w	800622a <_dtoa_r+0x5da>
 8006084:	9901      	ldr	r1, [sp, #4]
 8006086:	4648      	mov	r0, r9
 8006088:	f000 fc78 	bl	800697c <_Bfree>
 800608c:	2300      	movs	r3, #0
 800608e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006090:	7033      	strb	r3, [r6, #0]
 8006092:	f108 0301 	add.w	r3, r8, #1
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8304 	beq.w	80066a8 <_dtoa_r+0xa58>
 80060a0:	601e      	str	r6, [r3, #0]
 80060a2:	e301      	b.n	80066a8 <_dtoa_r+0xa58>
 80060a4:	2202      	movs	r2, #2
 80060a6:	e75e      	b.n	8005f66 <_dtoa_r+0x316>
 80060a8:	07cc      	lsls	r4, r1, #31
 80060aa:	d504      	bpl.n	80060b6 <_dtoa_r+0x466>
 80060ac:	ed90 6b00 	vldr	d6, [r0]
 80060b0:	3201      	adds	r2, #1
 80060b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060b6:	1049      	asrs	r1, r1, #1
 80060b8:	3008      	adds	r0, #8
 80060ba:	e755      	b.n	8005f68 <_dtoa_r+0x318>
 80060bc:	d022      	beq.n	8006104 <_dtoa_r+0x4b4>
 80060be:	f1c8 0100 	rsb	r1, r8, #0
 80060c2:	4a68      	ldr	r2, [pc, #416]	@ (8006264 <_dtoa_r+0x614>)
 80060c4:	f001 000f 	and.w	r0, r1, #15
 80060c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80060cc:	ed92 7b00 	vldr	d7, [r2]
 80060d0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80060d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060d8:	4863      	ldr	r0, [pc, #396]	@ (8006268 <_dtoa_r+0x618>)
 80060da:	1109      	asrs	r1, r1, #4
 80060dc:	2400      	movs	r4, #0
 80060de:	2202      	movs	r2, #2
 80060e0:	b929      	cbnz	r1, 80060ee <_dtoa_r+0x49e>
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	f43f af49 	beq.w	8005f7a <_dtoa_r+0x32a>
 80060e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060ec:	e745      	b.n	8005f7a <_dtoa_r+0x32a>
 80060ee:	07ce      	lsls	r6, r1, #31
 80060f0:	d505      	bpl.n	80060fe <_dtoa_r+0x4ae>
 80060f2:	ed90 6b00 	vldr	d6, [r0]
 80060f6:	3201      	adds	r2, #1
 80060f8:	2401      	movs	r4, #1
 80060fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060fe:	1049      	asrs	r1, r1, #1
 8006100:	3008      	adds	r0, #8
 8006102:	e7ed      	b.n	80060e0 <_dtoa_r+0x490>
 8006104:	2202      	movs	r2, #2
 8006106:	e738      	b.n	8005f7a <_dtoa_r+0x32a>
 8006108:	f8cd 8010 	str.w	r8, [sp, #16]
 800610c:	4654      	mov	r4, sl
 800610e:	e754      	b.n	8005fba <_dtoa_r+0x36a>
 8006110:	4a54      	ldr	r2, [pc, #336]	@ (8006264 <_dtoa_r+0x614>)
 8006112:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006116:	ed12 4b02 	vldr	d4, [r2, #-8]
 800611a:	9a08      	ldr	r2, [sp, #32]
 800611c:	ec41 0b17 	vmov	d7, r0, r1
 8006120:	443c      	add	r4, r7
 8006122:	b34a      	cbz	r2, 8006178 <_dtoa_r+0x528>
 8006124:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006128:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800612c:	463e      	mov	r6, r7
 800612e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006132:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006136:	ee35 7b47 	vsub.f64	d7, d5, d7
 800613a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800613e:	ee14 2a90 	vmov	r2, s9
 8006142:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006146:	3230      	adds	r2, #48	@ 0x30
 8006148:	ee36 6b45 	vsub.f64	d6, d6, d5
 800614c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006154:	f806 2b01 	strb.w	r2, [r6], #1
 8006158:	d438      	bmi.n	80061cc <_dtoa_r+0x57c>
 800615a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800615e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006166:	d462      	bmi.n	800622e <_dtoa_r+0x5de>
 8006168:	42a6      	cmp	r6, r4
 800616a:	f43f af4d 	beq.w	8006008 <_dtoa_r+0x3b8>
 800616e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006172:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006176:	e7e0      	b.n	800613a <_dtoa_r+0x4ea>
 8006178:	4621      	mov	r1, r4
 800617a:	463e      	mov	r6, r7
 800617c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006180:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006184:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006188:	ee14 2a90 	vmov	r2, s9
 800618c:	3230      	adds	r2, #48	@ 0x30
 800618e:	f806 2b01 	strb.w	r2, [r6], #1
 8006192:	42a6      	cmp	r6, r4
 8006194:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006198:	ee36 6b45 	vsub.f64	d6, d6, d5
 800619c:	d119      	bne.n	80061d2 <_dtoa_r+0x582>
 800619e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80061a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80061a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80061aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ae:	dc3e      	bgt.n	800622e <_dtoa_r+0x5de>
 80061b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80061b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80061b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061bc:	f57f af24 	bpl.w	8006008 <_dtoa_r+0x3b8>
 80061c0:	460e      	mov	r6, r1
 80061c2:	3901      	subs	r1, #1
 80061c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80061c8:	2b30      	cmp	r3, #48	@ 0x30
 80061ca:	d0f9      	beq.n	80061c0 <_dtoa_r+0x570>
 80061cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80061d0:	e758      	b.n	8006084 <_dtoa_r+0x434>
 80061d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80061d6:	e7d5      	b.n	8006184 <_dtoa_r+0x534>
 80061d8:	d10b      	bne.n	80061f2 <_dtoa_r+0x5a2>
 80061da:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80061de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ee:	f2c0 8161 	blt.w	80064b4 <_dtoa_r+0x864>
 80061f2:	2400      	movs	r4, #0
 80061f4:	4625      	mov	r5, r4
 80061f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f8:	43db      	mvns	r3, r3
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	463e      	mov	r6, r7
 80061fe:	f04f 0800 	mov.w	r8, #0
 8006202:	4621      	mov	r1, r4
 8006204:	4648      	mov	r0, r9
 8006206:	f000 fbb9 	bl	800697c <_Bfree>
 800620a:	2d00      	cmp	r5, #0
 800620c:	d0de      	beq.n	80061cc <_dtoa_r+0x57c>
 800620e:	f1b8 0f00 	cmp.w	r8, #0
 8006212:	d005      	beq.n	8006220 <_dtoa_r+0x5d0>
 8006214:	45a8      	cmp	r8, r5
 8006216:	d003      	beq.n	8006220 <_dtoa_r+0x5d0>
 8006218:	4641      	mov	r1, r8
 800621a:	4648      	mov	r0, r9
 800621c:	f000 fbae 	bl	800697c <_Bfree>
 8006220:	4629      	mov	r1, r5
 8006222:	4648      	mov	r0, r9
 8006224:	f000 fbaa 	bl	800697c <_Bfree>
 8006228:	e7d0      	b.n	80061cc <_dtoa_r+0x57c>
 800622a:	f8cd 8010 	str.w	r8, [sp, #16]
 800622e:	4633      	mov	r3, r6
 8006230:	461e      	mov	r6, r3
 8006232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006236:	2a39      	cmp	r2, #57	@ 0x39
 8006238:	d106      	bne.n	8006248 <_dtoa_r+0x5f8>
 800623a:	429f      	cmp	r7, r3
 800623c:	d1f8      	bne.n	8006230 <_dtoa_r+0x5e0>
 800623e:	9a04      	ldr	r2, [sp, #16]
 8006240:	3201      	adds	r2, #1
 8006242:	9204      	str	r2, [sp, #16]
 8006244:	2230      	movs	r2, #48	@ 0x30
 8006246:	703a      	strb	r2, [r7, #0]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	3201      	adds	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e7bd      	b.n	80061cc <_dtoa_r+0x57c>
 8006250:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006254:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625c:	f47f aeef 	bne.w	800603e <_dtoa_r+0x3ee>
 8006260:	e710      	b.n	8006084 <_dtoa_r+0x434>
 8006262:	bf00      	nop
 8006264:	080084e0 	.word	0x080084e0
 8006268:	080084b8 	.word	0x080084b8
 800626c:	9908      	ldr	r1, [sp, #32]
 800626e:	2900      	cmp	r1, #0
 8006270:	f000 80e3 	beq.w	800643a <_dtoa_r+0x7ea>
 8006274:	9907      	ldr	r1, [sp, #28]
 8006276:	2901      	cmp	r1, #1
 8006278:	f300 80c8 	bgt.w	800640c <_dtoa_r+0x7bc>
 800627c:	2d00      	cmp	r5, #0
 800627e:	f000 80c1 	beq.w	8006404 <_dtoa_r+0x7b4>
 8006282:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006286:	9e05      	ldr	r6, [sp, #20]
 8006288:	461c      	mov	r4, r3
 800628a:	9304      	str	r3, [sp, #16]
 800628c:	9b05      	ldr	r3, [sp, #20]
 800628e:	4413      	add	r3, r2
 8006290:	9305      	str	r3, [sp, #20]
 8006292:	9b06      	ldr	r3, [sp, #24]
 8006294:	2101      	movs	r1, #1
 8006296:	4413      	add	r3, r2
 8006298:	4648      	mov	r0, r9
 800629a:	9306      	str	r3, [sp, #24]
 800629c:	f000 fc22 	bl	8006ae4 <__i2b>
 80062a0:	9b04      	ldr	r3, [sp, #16]
 80062a2:	4605      	mov	r5, r0
 80062a4:	b166      	cbz	r6, 80062c0 <_dtoa_r+0x670>
 80062a6:	9a06      	ldr	r2, [sp, #24]
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	dd09      	ble.n	80062c0 <_dtoa_r+0x670>
 80062ac:	42b2      	cmp	r2, r6
 80062ae:	9905      	ldr	r1, [sp, #20]
 80062b0:	bfa8      	it	ge
 80062b2:	4632      	movge	r2, r6
 80062b4:	1a89      	subs	r1, r1, r2
 80062b6:	9105      	str	r1, [sp, #20]
 80062b8:	9906      	ldr	r1, [sp, #24]
 80062ba:	1ab6      	subs	r6, r6, r2
 80062bc:	1a8a      	subs	r2, r1, r2
 80062be:	9206      	str	r2, [sp, #24]
 80062c0:	b1fb      	cbz	r3, 8006302 <_dtoa_r+0x6b2>
 80062c2:	9a08      	ldr	r2, [sp, #32]
 80062c4:	2a00      	cmp	r2, #0
 80062c6:	f000 80bc 	beq.w	8006442 <_dtoa_r+0x7f2>
 80062ca:	b19c      	cbz	r4, 80062f4 <_dtoa_r+0x6a4>
 80062cc:	4629      	mov	r1, r5
 80062ce:	4622      	mov	r2, r4
 80062d0:	4648      	mov	r0, r9
 80062d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062d4:	f000 fcc6 	bl	8006c64 <__pow5mult>
 80062d8:	9a01      	ldr	r2, [sp, #4]
 80062da:	4601      	mov	r1, r0
 80062dc:	4605      	mov	r5, r0
 80062de:	4648      	mov	r0, r9
 80062e0:	f000 fc16 	bl	8006b10 <__multiply>
 80062e4:	9901      	ldr	r1, [sp, #4]
 80062e6:	9004      	str	r0, [sp, #16]
 80062e8:	4648      	mov	r0, r9
 80062ea:	f000 fb47 	bl	800697c <_Bfree>
 80062ee:	9a04      	ldr	r2, [sp, #16]
 80062f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062f2:	9201      	str	r2, [sp, #4]
 80062f4:	1b1a      	subs	r2, r3, r4
 80062f6:	d004      	beq.n	8006302 <_dtoa_r+0x6b2>
 80062f8:	9901      	ldr	r1, [sp, #4]
 80062fa:	4648      	mov	r0, r9
 80062fc:	f000 fcb2 	bl	8006c64 <__pow5mult>
 8006300:	9001      	str	r0, [sp, #4]
 8006302:	2101      	movs	r1, #1
 8006304:	4648      	mov	r0, r9
 8006306:	f000 fbed 	bl	8006ae4 <__i2b>
 800630a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800630c:	4604      	mov	r4, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 81d0 	beq.w	80066b4 <_dtoa_r+0xa64>
 8006314:	461a      	mov	r2, r3
 8006316:	4601      	mov	r1, r0
 8006318:	4648      	mov	r0, r9
 800631a:	f000 fca3 	bl	8006c64 <__pow5mult>
 800631e:	9b07      	ldr	r3, [sp, #28]
 8006320:	2b01      	cmp	r3, #1
 8006322:	4604      	mov	r4, r0
 8006324:	f300 8095 	bgt.w	8006452 <_dtoa_r+0x802>
 8006328:	9b02      	ldr	r3, [sp, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 808b 	bne.w	8006446 <_dtoa_r+0x7f6>
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006336:	2a00      	cmp	r2, #0
 8006338:	f040 8087 	bne.w	800644a <_dtoa_r+0x7fa>
 800633c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006340:	0d12      	lsrs	r2, r2, #20
 8006342:	0512      	lsls	r2, r2, #20
 8006344:	2a00      	cmp	r2, #0
 8006346:	f000 8082 	beq.w	800644e <_dtoa_r+0x7fe>
 800634a:	9b05      	ldr	r3, [sp, #20]
 800634c:	3301      	adds	r3, #1
 800634e:	9305      	str	r3, [sp, #20]
 8006350:	9b06      	ldr	r3, [sp, #24]
 8006352:	3301      	adds	r3, #1
 8006354:	9306      	str	r3, [sp, #24]
 8006356:	2301      	movs	r3, #1
 8006358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800635a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 81af 	beq.w	80066c0 <_dtoa_r+0xa70>
 8006362:	6922      	ldr	r2, [r4, #16]
 8006364:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006368:	6910      	ldr	r0, [r2, #16]
 800636a:	f000 fb6f 	bl	8006a4c <__hi0bits>
 800636e:	f1c0 0020 	rsb	r0, r0, #32
 8006372:	9b06      	ldr	r3, [sp, #24]
 8006374:	4418      	add	r0, r3
 8006376:	f010 001f 	ands.w	r0, r0, #31
 800637a:	d076      	beq.n	800646a <_dtoa_r+0x81a>
 800637c:	f1c0 0220 	rsb	r2, r0, #32
 8006380:	2a04      	cmp	r2, #4
 8006382:	dd69      	ble.n	8006458 <_dtoa_r+0x808>
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	f1c0 001c 	rsb	r0, r0, #28
 800638a:	4403      	add	r3, r0
 800638c:	9305      	str	r3, [sp, #20]
 800638e:	9b06      	ldr	r3, [sp, #24]
 8006390:	4406      	add	r6, r0
 8006392:	4403      	add	r3, r0
 8006394:	9306      	str	r3, [sp, #24]
 8006396:	9b05      	ldr	r3, [sp, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	dd05      	ble.n	80063a8 <_dtoa_r+0x758>
 800639c:	9901      	ldr	r1, [sp, #4]
 800639e:	461a      	mov	r2, r3
 80063a0:	4648      	mov	r0, r9
 80063a2:	f000 fcb9 	bl	8006d18 <__lshift>
 80063a6:	9001      	str	r0, [sp, #4]
 80063a8:	9b06      	ldr	r3, [sp, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd05      	ble.n	80063ba <_dtoa_r+0x76a>
 80063ae:	4621      	mov	r1, r4
 80063b0:	461a      	mov	r2, r3
 80063b2:	4648      	mov	r0, r9
 80063b4:	f000 fcb0 	bl	8006d18 <__lshift>
 80063b8:	4604      	mov	r4, r0
 80063ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d056      	beq.n	800646e <_dtoa_r+0x81e>
 80063c0:	9801      	ldr	r0, [sp, #4]
 80063c2:	4621      	mov	r1, r4
 80063c4:	f000 fd14 	bl	8006df0 <__mcmp>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	da50      	bge.n	800646e <_dtoa_r+0x81e>
 80063cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	9901      	ldr	r1, [sp, #4]
 80063d4:	2300      	movs	r3, #0
 80063d6:	220a      	movs	r2, #10
 80063d8:	4648      	mov	r0, r9
 80063da:	f000 faf1 	bl	80069c0 <__multadd>
 80063de:	9b08      	ldr	r3, [sp, #32]
 80063e0:	9001      	str	r0, [sp, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 816e 	beq.w	80066c4 <_dtoa_r+0xa74>
 80063e8:	4629      	mov	r1, r5
 80063ea:	2300      	movs	r3, #0
 80063ec:	220a      	movs	r2, #10
 80063ee:	4648      	mov	r0, r9
 80063f0:	f000 fae6 	bl	80069c0 <__multadd>
 80063f4:	f1bb 0f00 	cmp.w	fp, #0
 80063f8:	4605      	mov	r5, r0
 80063fa:	dc64      	bgt.n	80064c6 <_dtoa_r+0x876>
 80063fc:	9b07      	ldr	r3, [sp, #28]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	dc3e      	bgt.n	8006480 <_dtoa_r+0x830>
 8006402:	e060      	b.n	80064c6 <_dtoa_r+0x876>
 8006404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006406:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800640a:	e73c      	b.n	8006286 <_dtoa_r+0x636>
 800640c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8006410:	42a3      	cmp	r3, r4
 8006412:	bfbf      	itttt	lt
 8006414:	1ae2      	sublt	r2, r4, r3
 8006416:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006418:	189b      	addlt	r3, r3, r2
 800641a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800641c:	bfae      	itee	ge
 800641e:	1b1c      	subge	r4, r3, r4
 8006420:	4623      	movlt	r3, r4
 8006422:	2400      	movlt	r4, #0
 8006424:	f1ba 0f00 	cmp.w	sl, #0
 8006428:	bfb5      	itete	lt
 800642a:	9a05      	ldrlt	r2, [sp, #20]
 800642c:	9e05      	ldrge	r6, [sp, #20]
 800642e:	eba2 060a 	sublt.w	r6, r2, sl
 8006432:	4652      	movge	r2, sl
 8006434:	bfb8      	it	lt
 8006436:	2200      	movlt	r2, #0
 8006438:	e727      	b.n	800628a <_dtoa_r+0x63a>
 800643a:	9e05      	ldr	r6, [sp, #20]
 800643c:	9d08      	ldr	r5, [sp, #32]
 800643e:	461c      	mov	r4, r3
 8006440:	e730      	b.n	80062a4 <_dtoa_r+0x654>
 8006442:	461a      	mov	r2, r3
 8006444:	e758      	b.n	80062f8 <_dtoa_r+0x6a8>
 8006446:	2300      	movs	r3, #0
 8006448:	e786      	b.n	8006358 <_dtoa_r+0x708>
 800644a:	9b02      	ldr	r3, [sp, #8]
 800644c:	e784      	b.n	8006358 <_dtoa_r+0x708>
 800644e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006450:	e783      	b.n	800635a <_dtoa_r+0x70a>
 8006452:	2300      	movs	r3, #0
 8006454:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006456:	e784      	b.n	8006362 <_dtoa_r+0x712>
 8006458:	d09d      	beq.n	8006396 <_dtoa_r+0x746>
 800645a:	9b05      	ldr	r3, [sp, #20]
 800645c:	321c      	adds	r2, #28
 800645e:	4413      	add	r3, r2
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	9b06      	ldr	r3, [sp, #24]
 8006464:	4416      	add	r6, r2
 8006466:	4413      	add	r3, r2
 8006468:	e794      	b.n	8006394 <_dtoa_r+0x744>
 800646a:	4602      	mov	r2, r0
 800646c:	e7f5      	b.n	800645a <_dtoa_r+0x80a>
 800646e:	f1ba 0f00 	cmp.w	sl, #0
 8006472:	f8cd 8010 	str.w	r8, [sp, #16]
 8006476:	46d3      	mov	fp, sl
 8006478:	dc21      	bgt.n	80064be <_dtoa_r+0x86e>
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	2b02      	cmp	r3, #2
 800647e:	dd1e      	ble.n	80064be <_dtoa_r+0x86e>
 8006480:	f1bb 0f00 	cmp.w	fp, #0
 8006484:	f47f aeb7 	bne.w	80061f6 <_dtoa_r+0x5a6>
 8006488:	4621      	mov	r1, r4
 800648a:	465b      	mov	r3, fp
 800648c:	2205      	movs	r2, #5
 800648e:	4648      	mov	r0, r9
 8006490:	f000 fa96 	bl	80069c0 <__multadd>
 8006494:	4601      	mov	r1, r0
 8006496:	4604      	mov	r4, r0
 8006498:	9801      	ldr	r0, [sp, #4]
 800649a:	f000 fca9 	bl	8006df0 <__mcmp>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f77f aea9 	ble.w	80061f6 <_dtoa_r+0x5a6>
 80064a4:	463e      	mov	r6, r7
 80064a6:	2331      	movs	r3, #49	@ 0x31
 80064a8:	f806 3b01 	strb.w	r3, [r6], #1
 80064ac:	9b04      	ldr	r3, [sp, #16]
 80064ae:	3301      	adds	r3, #1
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	e6a4      	b.n	80061fe <_dtoa_r+0x5ae>
 80064b4:	f8cd 8010 	str.w	r8, [sp, #16]
 80064b8:	4654      	mov	r4, sl
 80064ba:	4625      	mov	r5, r4
 80064bc:	e7f2      	b.n	80064a4 <_dtoa_r+0x854>
 80064be:	9b08      	ldr	r3, [sp, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8103 	beq.w	80066cc <_dtoa_r+0xa7c>
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	dd05      	ble.n	80064d6 <_dtoa_r+0x886>
 80064ca:	4629      	mov	r1, r5
 80064cc:	4632      	mov	r2, r6
 80064ce:	4648      	mov	r0, r9
 80064d0:	f000 fc22 	bl	8006d18 <__lshift>
 80064d4:	4605      	mov	r5, r0
 80064d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d058      	beq.n	800658e <_dtoa_r+0x93e>
 80064dc:	6869      	ldr	r1, [r5, #4]
 80064de:	4648      	mov	r0, r9
 80064e0:	f000 fa0c 	bl	80068fc <_Balloc>
 80064e4:	4606      	mov	r6, r0
 80064e6:	b928      	cbnz	r0, 80064f4 <_dtoa_r+0x8a4>
 80064e8:	4b82      	ldr	r3, [pc, #520]	@ (80066f4 <_dtoa_r+0xaa4>)
 80064ea:	4602      	mov	r2, r0
 80064ec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80064f0:	f7ff bbc7 	b.w	8005c82 <_dtoa_r+0x32>
 80064f4:	692a      	ldr	r2, [r5, #16]
 80064f6:	3202      	adds	r2, #2
 80064f8:	0092      	lsls	r2, r2, #2
 80064fa:	f105 010c 	add.w	r1, r5, #12
 80064fe:	300c      	adds	r0, #12
 8006500:	f000 fe3a 	bl	8007178 <memcpy>
 8006504:	2201      	movs	r2, #1
 8006506:	4631      	mov	r1, r6
 8006508:	4648      	mov	r0, r9
 800650a:	f000 fc05 	bl	8006d18 <__lshift>
 800650e:	1c7b      	adds	r3, r7, #1
 8006510:	9305      	str	r3, [sp, #20]
 8006512:	eb07 030b 	add.w	r3, r7, fp
 8006516:	9309      	str	r3, [sp, #36]	@ 0x24
 8006518:	9b02      	ldr	r3, [sp, #8]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	46a8      	mov	r8, r5
 8006520:	9308      	str	r3, [sp, #32]
 8006522:	4605      	mov	r5, r0
 8006524:	9b05      	ldr	r3, [sp, #20]
 8006526:	9801      	ldr	r0, [sp, #4]
 8006528:	4621      	mov	r1, r4
 800652a:	f103 3bff 	add.w	fp, r3, #4294967295
 800652e:	f7ff fb04 	bl	8005b3a <quorem>
 8006532:	4641      	mov	r1, r8
 8006534:	9002      	str	r0, [sp, #8]
 8006536:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800653a:	9801      	ldr	r0, [sp, #4]
 800653c:	f000 fc58 	bl	8006df0 <__mcmp>
 8006540:	462a      	mov	r2, r5
 8006542:	9006      	str	r0, [sp, #24]
 8006544:	4621      	mov	r1, r4
 8006546:	4648      	mov	r0, r9
 8006548:	f000 fc6e 	bl	8006e28 <__mdiff>
 800654c:	68c2      	ldr	r2, [r0, #12]
 800654e:	4606      	mov	r6, r0
 8006550:	b9fa      	cbnz	r2, 8006592 <_dtoa_r+0x942>
 8006552:	4601      	mov	r1, r0
 8006554:	9801      	ldr	r0, [sp, #4]
 8006556:	f000 fc4b 	bl	8006df0 <__mcmp>
 800655a:	4602      	mov	r2, r0
 800655c:	4631      	mov	r1, r6
 800655e:	4648      	mov	r0, r9
 8006560:	920a      	str	r2, [sp, #40]	@ 0x28
 8006562:	f000 fa0b 	bl	800697c <_Bfree>
 8006566:	9b07      	ldr	r3, [sp, #28]
 8006568:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800656a:	9e05      	ldr	r6, [sp, #20]
 800656c:	ea43 0102 	orr.w	r1, r3, r2
 8006570:	9b08      	ldr	r3, [sp, #32]
 8006572:	4319      	orrs	r1, r3
 8006574:	d10f      	bne.n	8006596 <_dtoa_r+0x946>
 8006576:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800657a:	d028      	beq.n	80065ce <_dtoa_r+0x97e>
 800657c:	9b06      	ldr	r3, [sp, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	dd02      	ble.n	8006588 <_dtoa_r+0x938>
 8006582:	9b02      	ldr	r3, [sp, #8]
 8006584:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006588:	f88b a000 	strb.w	sl, [fp]
 800658c:	e639      	b.n	8006202 <_dtoa_r+0x5b2>
 800658e:	4628      	mov	r0, r5
 8006590:	e7bd      	b.n	800650e <_dtoa_r+0x8be>
 8006592:	2201      	movs	r2, #1
 8006594:	e7e2      	b.n	800655c <_dtoa_r+0x90c>
 8006596:	9b06      	ldr	r3, [sp, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	db04      	blt.n	80065a6 <_dtoa_r+0x956>
 800659c:	9907      	ldr	r1, [sp, #28]
 800659e:	430b      	orrs	r3, r1
 80065a0:	9908      	ldr	r1, [sp, #32]
 80065a2:	430b      	orrs	r3, r1
 80065a4:	d120      	bne.n	80065e8 <_dtoa_r+0x998>
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	ddee      	ble.n	8006588 <_dtoa_r+0x938>
 80065aa:	9901      	ldr	r1, [sp, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	4648      	mov	r0, r9
 80065b0:	f000 fbb2 	bl	8006d18 <__lshift>
 80065b4:	4621      	mov	r1, r4
 80065b6:	9001      	str	r0, [sp, #4]
 80065b8:	f000 fc1a 	bl	8006df0 <__mcmp>
 80065bc:	2800      	cmp	r0, #0
 80065be:	dc03      	bgt.n	80065c8 <_dtoa_r+0x978>
 80065c0:	d1e2      	bne.n	8006588 <_dtoa_r+0x938>
 80065c2:	f01a 0f01 	tst.w	sl, #1
 80065c6:	d0df      	beq.n	8006588 <_dtoa_r+0x938>
 80065c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80065cc:	d1d9      	bne.n	8006582 <_dtoa_r+0x932>
 80065ce:	2339      	movs	r3, #57	@ 0x39
 80065d0:	f88b 3000 	strb.w	r3, [fp]
 80065d4:	4633      	mov	r3, r6
 80065d6:	461e      	mov	r6, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80065de:	2a39      	cmp	r2, #57	@ 0x39
 80065e0:	d053      	beq.n	800668a <_dtoa_r+0xa3a>
 80065e2:	3201      	adds	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e60c      	b.n	8006202 <_dtoa_r+0x5b2>
 80065e8:	2a00      	cmp	r2, #0
 80065ea:	dd07      	ble.n	80065fc <_dtoa_r+0x9ac>
 80065ec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80065f0:	d0ed      	beq.n	80065ce <_dtoa_r+0x97e>
 80065f2:	f10a 0301 	add.w	r3, sl, #1
 80065f6:	f88b 3000 	strb.w	r3, [fp]
 80065fa:	e602      	b.n	8006202 <_dtoa_r+0x5b2>
 80065fc:	9b05      	ldr	r3, [sp, #20]
 80065fe:	9a05      	ldr	r2, [sp, #20]
 8006600:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006606:	4293      	cmp	r3, r2
 8006608:	d029      	beq.n	800665e <_dtoa_r+0xa0e>
 800660a:	9901      	ldr	r1, [sp, #4]
 800660c:	2300      	movs	r3, #0
 800660e:	220a      	movs	r2, #10
 8006610:	4648      	mov	r0, r9
 8006612:	f000 f9d5 	bl	80069c0 <__multadd>
 8006616:	45a8      	cmp	r8, r5
 8006618:	9001      	str	r0, [sp, #4]
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	f04f 020a 	mov.w	r2, #10
 8006622:	4641      	mov	r1, r8
 8006624:	4648      	mov	r0, r9
 8006626:	d107      	bne.n	8006638 <_dtoa_r+0x9e8>
 8006628:	f000 f9ca 	bl	80069c0 <__multadd>
 800662c:	4680      	mov	r8, r0
 800662e:	4605      	mov	r5, r0
 8006630:	9b05      	ldr	r3, [sp, #20]
 8006632:	3301      	adds	r3, #1
 8006634:	9305      	str	r3, [sp, #20]
 8006636:	e775      	b.n	8006524 <_dtoa_r+0x8d4>
 8006638:	f000 f9c2 	bl	80069c0 <__multadd>
 800663c:	4629      	mov	r1, r5
 800663e:	4680      	mov	r8, r0
 8006640:	2300      	movs	r3, #0
 8006642:	220a      	movs	r2, #10
 8006644:	4648      	mov	r0, r9
 8006646:	f000 f9bb 	bl	80069c0 <__multadd>
 800664a:	4605      	mov	r5, r0
 800664c:	e7f0      	b.n	8006630 <_dtoa_r+0x9e0>
 800664e:	f1bb 0f00 	cmp.w	fp, #0
 8006652:	bfcc      	ite	gt
 8006654:	465e      	movgt	r6, fp
 8006656:	2601      	movle	r6, #1
 8006658:	443e      	add	r6, r7
 800665a:	f04f 0800 	mov.w	r8, #0
 800665e:	9901      	ldr	r1, [sp, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	4648      	mov	r0, r9
 8006664:	f000 fb58 	bl	8006d18 <__lshift>
 8006668:	4621      	mov	r1, r4
 800666a:	9001      	str	r0, [sp, #4]
 800666c:	f000 fbc0 	bl	8006df0 <__mcmp>
 8006670:	2800      	cmp	r0, #0
 8006672:	dcaf      	bgt.n	80065d4 <_dtoa_r+0x984>
 8006674:	d102      	bne.n	800667c <_dtoa_r+0xa2c>
 8006676:	f01a 0f01 	tst.w	sl, #1
 800667a:	d1ab      	bne.n	80065d4 <_dtoa_r+0x984>
 800667c:	4633      	mov	r3, r6
 800667e:	461e      	mov	r6, r3
 8006680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006684:	2a30      	cmp	r2, #48	@ 0x30
 8006686:	d0fa      	beq.n	800667e <_dtoa_r+0xa2e>
 8006688:	e5bb      	b.n	8006202 <_dtoa_r+0x5b2>
 800668a:	429f      	cmp	r7, r3
 800668c:	d1a3      	bne.n	80065d6 <_dtoa_r+0x986>
 800668e:	9b04      	ldr	r3, [sp, #16]
 8006690:	3301      	adds	r3, #1
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	2331      	movs	r3, #49	@ 0x31
 8006696:	703b      	strb	r3, [r7, #0]
 8006698:	e5b3      	b.n	8006202 <_dtoa_r+0x5b2>
 800669a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800669c:	4f16      	ldr	r7, [pc, #88]	@ (80066f8 <_dtoa_r+0xaa8>)
 800669e:	b11b      	cbz	r3, 80066a8 <_dtoa_r+0xa58>
 80066a0:	f107 0308 	add.w	r3, r7, #8
 80066a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	4638      	mov	r0, r7
 80066aa:	b011      	add	sp, #68	@ 0x44
 80066ac:	ecbd 8b02 	vpop	{d8}
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	f77f ae36 	ble.w	8006328 <_dtoa_r+0x6d8>
 80066bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066c0:	2001      	movs	r0, #1
 80066c2:	e656      	b.n	8006372 <_dtoa_r+0x722>
 80066c4:	f1bb 0f00 	cmp.w	fp, #0
 80066c8:	f77f aed7 	ble.w	800647a <_dtoa_r+0x82a>
 80066cc:	463e      	mov	r6, r7
 80066ce:	9801      	ldr	r0, [sp, #4]
 80066d0:	4621      	mov	r1, r4
 80066d2:	f7ff fa32 	bl	8005b3a <quorem>
 80066d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80066da:	f806 ab01 	strb.w	sl, [r6], #1
 80066de:	1bf2      	subs	r2, r6, r7
 80066e0:	4593      	cmp	fp, r2
 80066e2:	ddb4      	ble.n	800664e <_dtoa_r+0x9fe>
 80066e4:	9901      	ldr	r1, [sp, #4]
 80066e6:	2300      	movs	r3, #0
 80066e8:	220a      	movs	r2, #10
 80066ea:	4648      	mov	r0, r9
 80066ec:	f000 f968 	bl	80069c0 <__multadd>
 80066f0:	9001      	str	r0, [sp, #4]
 80066f2:	e7ec      	b.n	80066ce <_dtoa_r+0xa7e>
 80066f4:	08008440 	.word	0x08008440
 80066f8:	080083c4 	.word	0x080083c4

080066fc <_free_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4605      	mov	r5, r0
 8006700:	2900      	cmp	r1, #0
 8006702:	d041      	beq.n	8006788 <_free_r+0x8c>
 8006704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006708:	1f0c      	subs	r4, r1, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfb8      	it	lt
 800670e:	18e4      	addlt	r4, r4, r3
 8006710:	f000 f8e8 	bl	80068e4 <__malloc_lock>
 8006714:	4a1d      	ldr	r2, [pc, #116]	@ (800678c <_free_r+0x90>)
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	b933      	cbnz	r3, 8006728 <_free_r+0x2c>
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	6014      	str	r4, [r2, #0]
 800671e:	4628      	mov	r0, r5
 8006720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006724:	f000 b8e4 	b.w	80068f0 <__malloc_unlock>
 8006728:	42a3      	cmp	r3, r4
 800672a:	d908      	bls.n	800673e <_free_r+0x42>
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	1821      	adds	r1, r4, r0
 8006730:	428b      	cmp	r3, r1
 8006732:	bf01      	itttt	eq
 8006734:	6819      	ldreq	r1, [r3, #0]
 8006736:	685b      	ldreq	r3, [r3, #4]
 8006738:	1809      	addeq	r1, r1, r0
 800673a:	6021      	streq	r1, [r4, #0]
 800673c:	e7ed      	b.n	800671a <_free_r+0x1e>
 800673e:	461a      	mov	r2, r3
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	b10b      	cbz	r3, 8006748 <_free_r+0x4c>
 8006744:	42a3      	cmp	r3, r4
 8006746:	d9fa      	bls.n	800673e <_free_r+0x42>
 8006748:	6811      	ldr	r1, [r2, #0]
 800674a:	1850      	adds	r0, r2, r1
 800674c:	42a0      	cmp	r0, r4
 800674e:	d10b      	bne.n	8006768 <_free_r+0x6c>
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	4401      	add	r1, r0
 8006754:	1850      	adds	r0, r2, r1
 8006756:	4283      	cmp	r3, r0
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	d1e0      	bne.n	800671e <_free_r+0x22>
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	6053      	str	r3, [r2, #4]
 8006762:	4408      	add	r0, r1
 8006764:	6010      	str	r0, [r2, #0]
 8006766:	e7da      	b.n	800671e <_free_r+0x22>
 8006768:	d902      	bls.n	8006770 <_free_r+0x74>
 800676a:	230c      	movs	r3, #12
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	e7d6      	b.n	800671e <_free_r+0x22>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	1821      	adds	r1, r4, r0
 8006774:	428b      	cmp	r3, r1
 8006776:	bf04      	itt	eq
 8006778:	6819      	ldreq	r1, [r3, #0]
 800677a:	685b      	ldreq	r3, [r3, #4]
 800677c:	6063      	str	r3, [r4, #4]
 800677e:	bf04      	itt	eq
 8006780:	1809      	addeq	r1, r1, r0
 8006782:	6021      	streq	r1, [r4, #0]
 8006784:	6054      	str	r4, [r2, #4]
 8006786:	e7ca      	b.n	800671e <_free_r+0x22>
 8006788:	bd38      	pop	{r3, r4, r5, pc}
 800678a:	bf00      	nop
 800678c:	2400045c 	.word	0x2400045c

08006790 <malloc>:
 8006790:	4b02      	ldr	r3, [pc, #8]	@ (800679c <malloc+0xc>)
 8006792:	4601      	mov	r1, r0
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	f000 b825 	b.w	80067e4 <_malloc_r>
 800679a:	bf00      	nop
 800679c:	24000020 	.word	0x24000020

080067a0 <sbrk_aligned>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4e0f      	ldr	r6, [pc, #60]	@ (80067e0 <sbrk_aligned+0x40>)
 80067a4:	460c      	mov	r4, r1
 80067a6:	6831      	ldr	r1, [r6, #0]
 80067a8:	4605      	mov	r5, r0
 80067aa:	b911      	cbnz	r1, 80067b2 <sbrk_aligned+0x12>
 80067ac:	f000 fcd4 	bl	8007158 <_sbrk_r>
 80067b0:	6030      	str	r0, [r6, #0]
 80067b2:	4621      	mov	r1, r4
 80067b4:	4628      	mov	r0, r5
 80067b6:	f000 fccf 	bl	8007158 <_sbrk_r>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	d103      	bne.n	80067c6 <sbrk_aligned+0x26>
 80067be:	f04f 34ff 	mov.w	r4, #4294967295
 80067c2:	4620      	mov	r0, r4
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
 80067c6:	1cc4      	adds	r4, r0, #3
 80067c8:	f024 0403 	bic.w	r4, r4, #3
 80067cc:	42a0      	cmp	r0, r4
 80067ce:	d0f8      	beq.n	80067c2 <sbrk_aligned+0x22>
 80067d0:	1a21      	subs	r1, r4, r0
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 fcc0 	bl	8007158 <_sbrk_r>
 80067d8:	3001      	adds	r0, #1
 80067da:	d1f2      	bne.n	80067c2 <sbrk_aligned+0x22>
 80067dc:	e7ef      	b.n	80067be <sbrk_aligned+0x1e>
 80067de:	bf00      	nop
 80067e0:	24000458 	.word	0x24000458

080067e4 <_malloc_r>:
 80067e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e8:	1ccd      	adds	r5, r1, #3
 80067ea:	f025 0503 	bic.w	r5, r5, #3
 80067ee:	3508      	adds	r5, #8
 80067f0:	2d0c      	cmp	r5, #12
 80067f2:	bf38      	it	cc
 80067f4:	250c      	movcc	r5, #12
 80067f6:	2d00      	cmp	r5, #0
 80067f8:	4606      	mov	r6, r0
 80067fa:	db01      	blt.n	8006800 <_malloc_r+0x1c>
 80067fc:	42a9      	cmp	r1, r5
 80067fe:	d904      	bls.n	800680a <_malloc_r+0x26>
 8006800:	230c      	movs	r3, #12
 8006802:	6033      	str	r3, [r6, #0]
 8006804:	2000      	movs	r0, #0
 8006806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800680a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068e0 <_malloc_r+0xfc>
 800680e:	f000 f869 	bl	80068e4 <__malloc_lock>
 8006812:	f8d8 3000 	ldr.w	r3, [r8]
 8006816:	461c      	mov	r4, r3
 8006818:	bb44      	cbnz	r4, 800686c <_malloc_r+0x88>
 800681a:	4629      	mov	r1, r5
 800681c:	4630      	mov	r0, r6
 800681e:	f7ff ffbf 	bl	80067a0 <sbrk_aligned>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	4604      	mov	r4, r0
 8006826:	d158      	bne.n	80068da <_malloc_r+0xf6>
 8006828:	f8d8 4000 	ldr.w	r4, [r8]
 800682c:	4627      	mov	r7, r4
 800682e:	2f00      	cmp	r7, #0
 8006830:	d143      	bne.n	80068ba <_malloc_r+0xd6>
 8006832:	2c00      	cmp	r4, #0
 8006834:	d04b      	beq.n	80068ce <_malloc_r+0xea>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	4639      	mov	r1, r7
 800683a:	4630      	mov	r0, r6
 800683c:	eb04 0903 	add.w	r9, r4, r3
 8006840:	f000 fc8a 	bl	8007158 <_sbrk_r>
 8006844:	4581      	cmp	r9, r0
 8006846:	d142      	bne.n	80068ce <_malloc_r+0xea>
 8006848:	6821      	ldr	r1, [r4, #0]
 800684a:	1a6d      	subs	r5, r5, r1
 800684c:	4629      	mov	r1, r5
 800684e:	4630      	mov	r0, r6
 8006850:	f7ff ffa6 	bl	80067a0 <sbrk_aligned>
 8006854:	3001      	adds	r0, #1
 8006856:	d03a      	beq.n	80068ce <_malloc_r+0xea>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	442b      	add	r3, r5
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	f8d8 3000 	ldr.w	r3, [r8]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	bb62      	cbnz	r2, 80068c0 <_malloc_r+0xdc>
 8006866:	f8c8 7000 	str.w	r7, [r8]
 800686a:	e00f      	b.n	800688c <_malloc_r+0xa8>
 800686c:	6822      	ldr	r2, [r4, #0]
 800686e:	1b52      	subs	r2, r2, r5
 8006870:	d420      	bmi.n	80068b4 <_malloc_r+0xd0>
 8006872:	2a0b      	cmp	r2, #11
 8006874:	d917      	bls.n	80068a6 <_malloc_r+0xc2>
 8006876:	1961      	adds	r1, r4, r5
 8006878:	42a3      	cmp	r3, r4
 800687a:	6025      	str	r5, [r4, #0]
 800687c:	bf18      	it	ne
 800687e:	6059      	strne	r1, [r3, #4]
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	bf08      	it	eq
 8006884:	f8c8 1000 	streq.w	r1, [r8]
 8006888:	5162      	str	r2, [r4, r5]
 800688a:	604b      	str	r3, [r1, #4]
 800688c:	4630      	mov	r0, r6
 800688e:	f000 f82f 	bl	80068f0 <__malloc_unlock>
 8006892:	f104 000b 	add.w	r0, r4, #11
 8006896:	1d23      	adds	r3, r4, #4
 8006898:	f020 0007 	bic.w	r0, r0, #7
 800689c:	1ac2      	subs	r2, r0, r3
 800689e:	bf1c      	itt	ne
 80068a0:	1a1b      	subne	r3, r3, r0
 80068a2:	50a3      	strne	r3, [r4, r2]
 80068a4:	e7af      	b.n	8006806 <_malloc_r+0x22>
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	bf0c      	ite	eq
 80068ac:	f8c8 2000 	streq.w	r2, [r8]
 80068b0:	605a      	strne	r2, [r3, #4]
 80068b2:	e7eb      	b.n	800688c <_malloc_r+0xa8>
 80068b4:	4623      	mov	r3, r4
 80068b6:	6864      	ldr	r4, [r4, #4]
 80068b8:	e7ae      	b.n	8006818 <_malloc_r+0x34>
 80068ba:	463c      	mov	r4, r7
 80068bc:	687f      	ldr	r7, [r7, #4]
 80068be:	e7b6      	b.n	800682e <_malloc_r+0x4a>
 80068c0:	461a      	mov	r2, r3
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d1fb      	bne.n	80068c0 <_malloc_r+0xdc>
 80068c8:	2300      	movs	r3, #0
 80068ca:	6053      	str	r3, [r2, #4]
 80068cc:	e7de      	b.n	800688c <_malloc_r+0xa8>
 80068ce:	230c      	movs	r3, #12
 80068d0:	6033      	str	r3, [r6, #0]
 80068d2:	4630      	mov	r0, r6
 80068d4:	f000 f80c 	bl	80068f0 <__malloc_unlock>
 80068d8:	e794      	b.n	8006804 <_malloc_r+0x20>
 80068da:	6005      	str	r5, [r0, #0]
 80068dc:	e7d6      	b.n	800688c <_malloc_r+0xa8>
 80068de:	bf00      	nop
 80068e0:	2400045c 	.word	0x2400045c

080068e4 <__malloc_lock>:
 80068e4:	4801      	ldr	r0, [pc, #4]	@ (80068ec <__malloc_lock+0x8>)
 80068e6:	f7ff b926 	b.w	8005b36 <__retarget_lock_acquire_recursive>
 80068ea:	bf00      	nop
 80068ec:	24000454 	.word	0x24000454

080068f0 <__malloc_unlock>:
 80068f0:	4801      	ldr	r0, [pc, #4]	@ (80068f8 <__malloc_unlock+0x8>)
 80068f2:	f7ff b921 	b.w	8005b38 <__retarget_lock_release_recursive>
 80068f6:	bf00      	nop
 80068f8:	24000454 	.word	0x24000454

080068fc <_Balloc>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	69c6      	ldr	r6, [r0, #28]
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	b976      	cbnz	r6, 8006924 <_Balloc+0x28>
 8006906:	2010      	movs	r0, #16
 8006908:	f7ff ff42 	bl	8006790 <malloc>
 800690c:	4602      	mov	r2, r0
 800690e:	61e0      	str	r0, [r4, #28]
 8006910:	b920      	cbnz	r0, 800691c <_Balloc+0x20>
 8006912:	4b18      	ldr	r3, [pc, #96]	@ (8006974 <_Balloc+0x78>)
 8006914:	4818      	ldr	r0, [pc, #96]	@ (8006978 <_Balloc+0x7c>)
 8006916:	216b      	movs	r1, #107	@ 0x6b
 8006918:	f000 fc3c 	bl	8007194 <__assert_func>
 800691c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006920:	6006      	str	r6, [r0, #0]
 8006922:	60c6      	str	r6, [r0, #12]
 8006924:	69e6      	ldr	r6, [r4, #28]
 8006926:	68f3      	ldr	r3, [r6, #12]
 8006928:	b183      	cbz	r3, 800694c <_Balloc+0x50>
 800692a:	69e3      	ldr	r3, [r4, #28]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006932:	b9b8      	cbnz	r0, 8006964 <_Balloc+0x68>
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f605 	lsl.w	r6, r1, r5
 800693a:	1d72      	adds	r2, r6, #5
 800693c:	0092      	lsls	r2, r2, #2
 800693e:	4620      	mov	r0, r4
 8006940:	f000 fc46 	bl	80071d0 <_calloc_r>
 8006944:	b160      	cbz	r0, 8006960 <_Balloc+0x64>
 8006946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800694a:	e00e      	b.n	800696a <_Balloc+0x6e>
 800694c:	2221      	movs	r2, #33	@ 0x21
 800694e:	2104      	movs	r1, #4
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fc3d 	bl	80071d0 <_calloc_r>
 8006956:	69e3      	ldr	r3, [r4, #28]
 8006958:	60f0      	str	r0, [r6, #12]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e4      	bne.n	800692a <_Balloc+0x2e>
 8006960:	2000      	movs	r0, #0
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	6802      	ldr	r2, [r0, #0]
 8006966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800696a:	2300      	movs	r3, #0
 800696c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006970:	e7f7      	b.n	8006962 <_Balloc+0x66>
 8006972:	bf00      	nop
 8006974:	080083d1 	.word	0x080083d1
 8006978:	08008451 	.word	0x08008451

0800697c <_Bfree>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	69c6      	ldr	r6, [r0, #28]
 8006980:	4605      	mov	r5, r0
 8006982:	460c      	mov	r4, r1
 8006984:	b976      	cbnz	r6, 80069a4 <_Bfree+0x28>
 8006986:	2010      	movs	r0, #16
 8006988:	f7ff ff02 	bl	8006790 <malloc>
 800698c:	4602      	mov	r2, r0
 800698e:	61e8      	str	r0, [r5, #28]
 8006990:	b920      	cbnz	r0, 800699c <_Bfree+0x20>
 8006992:	4b09      	ldr	r3, [pc, #36]	@ (80069b8 <_Bfree+0x3c>)
 8006994:	4809      	ldr	r0, [pc, #36]	@ (80069bc <_Bfree+0x40>)
 8006996:	218f      	movs	r1, #143	@ 0x8f
 8006998:	f000 fbfc 	bl	8007194 <__assert_func>
 800699c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069a0:	6006      	str	r6, [r0, #0]
 80069a2:	60c6      	str	r6, [r0, #12]
 80069a4:	b13c      	cbz	r4, 80069b6 <_Bfree+0x3a>
 80069a6:	69eb      	ldr	r3, [r5, #28]
 80069a8:	6862      	ldr	r2, [r4, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069b0:	6021      	str	r1, [r4, #0]
 80069b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	080083d1 	.word	0x080083d1
 80069bc:	08008451 	.word	0x08008451

080069c0 <__multadd>:
 80069c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c4:	690d      	ldr	r5, [r1, #16]
 80069c6:	4607      	mov	r7, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	461e      	mov	r6, r3
 80069cc:	f101 0c14 	add.w	ip, r1, #20
 80069d0:	2000      	movs	r0, #0
 80069d2:	f8dc 3000 	ldr.w	r3, [ip]
 80069d6:	b299      	uxth	r1, r3
 80069d8:	fb02 6101 	mla	r1, r2, r1, r6
 80069dc:	0c1e      	lsrs	r6, r3, #16
 80069de:	0c0b      	lsrs	r3, r1, #16
 80069e0:	fb02 3306 	mla	r3, r2, r6, r3
 80069e4:	b289      	uxth	r1, r1
 80069e6:	3001      	adds	r0, #1
 80069e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069ec:	4285      	cmp	r5, r0
 80069ee:	f84c 1b04 	str.w	r1, [ip], #4
 80069f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069f6:	dcec      	bgt.n	80069d2 <__multadd+0x12>
 80069f8:	b30e      	cbz	r6, 8006a3e <__multadd+0x7e>
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	42ab      	cmp	r3, r5
 80069fe:	dc19      	bgt.n	8006a34 <__multadd+0x74>
 8006a00:	6861      	ldr	r1, [r4, #4]
 8006a02:	4638      	mov	r0, r7
 8006a04:	3101      	adds	r1, #1
 8006a06:	f7ff ff79 	bl	80068fc <_Balloc>
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	b928      	cbnz	r0, 8006a1a <__multadd+0x5a>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	4b0c      	ldr	r3, [pc, #48]	@ (8006a44 <__multadd+0x84>)
 8006a12:	480d      	ldr	r0, [pc, #52]	@ (8006a48 <__multadd+0x88>)
 8006a14:	21ba      	movs	r1, #186	@ 0xba
 8006a16:	f000 fbbd 	bl	8007194 <__assert_func>
 8006a1a:	6922      	ldr	r2, [r4, #16]
 8006a1c:	3202      	adds	r2, #2
 8006a1e:	f104 010c 	add.w	r1, r4, #12
 8006a22:	0092      	lsls	r2, r2, #2
 8006a24:	300c      	adds	r0, #12
 8006a26:	f000 fba7 	bl	8007178 <memcpy>
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f7ff ffa5 	bl	800697c <_Bfree>
 8006a32:	4644      	mov	r4, r8
 8006a34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a38:	3501      	adds	r5, #1
 8006a3a:	615e      	str	r6, [r3, #20]
 8006a3c:	6125      	str	r5, [r4, #16]
 8006a3e:	4620      	mov	r0, r4
 8006a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a44:	08008440 	.word	0x08008440
 8006a48:	08008451 	.word	0x08008451

08006a4c <__hi0bits>:
 8006a4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a50:	4603      	mov	r3, r0
 8006a52:	bf36      	itet	cc
 8006a54:	0403      	lslcc	r3, r0, #16
 8006a56:	2000      	movcs	r0, #0
 8006a58:	2010      	movcc	r0, #16
 8006a5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a5e:	bf3c      	itt	cc
 8006a60:	021b      	lslcc	r3, r3, #8
 8006a62:	3008      	addcc	r0, #8
 8006a64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a68:	bf3c      	itt	cc
 8006a6a:	011b      	lslcc	r3, r3, #4
 8006a6c:	3004      	addcc	r0, #4
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a72:	bf3c      	itt	cc
 8006a74:	009b      	lslcc	r3, r3, #2
 8006a76:	3002      	addcc	r0, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	db05      	blt.n	8006a88 <__hi0bits+0x3c>
 8006a7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a80:	f100 0001 	add.w	r0, r0, #1
 8006a84:	bf08      	it	eq
 8006a86:	2020      	moveq	r0, #32
 8006a88:	4770      	bx	lr

08006a8a <__lo0bits>:
 8006a8a:	6803      	ldr	r3, [r0, #0]
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	f013 0007 	ands.w	r0, r3, #7
 8006a92:	d00b      	beq.n	8006aac <__lo0bits+0x22>
 8006a94:	07d9      	lsls	r1, r3, #31
 8006a96:	d421      	bmi.n	8006adc <__lo0bits+0x52>
 8006a98:	0798      	lsls	r0, r3, #30
 8006a9a:	bf49      	itett	mi
 8006a9c:	085b      	lsrmi	r3, r3, #1
 8006a9e:	089b      	lsrpl	r3, r3, #2
 8006aa0:	2001      	movmi	r0, #1
 8006aa2:	6013      	strmi	r3, [r2, #0]
 8006aa4:	bf5c      	itt	pl
 8006aa6:	6013      	strpl	r3, [r2, #0]
 8006aa8:	2002      	movpl	r0, #2
 8006aaa:	4770      	bx	lr
 8006aac:	b299      	uxth	r1, r3
 8006aae:	b909      	cbnz	r1, 8006ab4 <__lo0bits+0x2a>
 8006ab0:	0c1b      	lsrs	r3, r3, #16
 8006ab2:	2010      	movs	r0, #16
 8006ab4:	b2d9      	uxtb	r1, r3
 8006ab6:	b909      	cbnz	r1, 8006abc <__lo0bits+0x32>
 8006ab8:	3008      	adds	r0, #8
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	0719      	lsls	r1, r3, #28
 8006abe:	bf04      	itt	eq
 8006ac0:	091b      	lsreq	r3, r3, #4
 8006ac2:	3004      	addeq	r0, #4
 8006ac4:	0799      	lsls	r1, r3, #30
 8006ac6:	bf04      	itt	eq
 8006ac8:	089b      	lsreq	r3, r3, #2
 8006aca:	3002      	addeq	r0, #2
 8006acc:	07d9      	lsls	r1, r3, #31
 8006ace:	d403      	bmi.n	8006ad8 <__lo0bits+0x4e>
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	f100 0001 	add.w	r0, r0, #1
 8006ad6:	d003      	beq.n	8006ae0 <__lo0bits+0x56>
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	4770      	bx	lr
 8006adc:	2000      	movs	r0, #0
 8006ade:	4770      	bx	lr
 8006ae0:	2020      	movs	r0, #32
 8006ae2:	4770      	bx	lr

08006ae4 <__i2b>:
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	2101      	movs	r1, #1
 8006aea:	f7ff ff07 	bl	80068fc <_Balloc>
 8006aee:	4602      	mov	r2, r0
 8006af0:	b928      	cbnz	r0, 8006afe <__i2b+0x1a>
 8006af2:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <__i2b+0x24>)
 8006af4:	4805      	ldr	r0, [pc, #20]	@ (8006b0c <__i2b+0x28>)
 8006af6:	f240 1145 	movw	r1, #325	@ 0x145
 8006afa:	f000 fb4b 	bl	8007194 <__assert_func>
 8006afe:	2301      	movs	r3, #1
 8006b00:	6144      	str	r4, [r0, #20]
 8006b02:	6103      	str	r3, [r0, #16]
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	bf00      	nop
 8006b08:	08008440 	.word	0x08008440
 8006b0c:	08008451 	.word	0x08008451

08006b10 <__multiply>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	4614      	mov	r4, r2
 8006b16:	690a      	ldr	r2, [r1, #16]
 8006b18:	6923      	ldr	r3, [r4, #16]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	bfa8      	it	ge
 8006b1e:	4623      	movge	r3, r4
 8006b20:	460f      	mov	r7, r1
 8006b22:	bfa4      	itt	ge
 8006b24:	460c      	movge	r4, r1
 8006b26:	461f      	movge	r7, r3
 8006b28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b30:	68a3      	ldr	r3, [r4, #8]
 8006b32:	6861      	ldr	r1, [r4, #4]
 8006b34:	eb0a 0609 	add.w	r6, sl, r9
 8006b38:	42b3      	cmp	r3, r6
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	bfb8      	it	lt
 8006b3e:	3101      	addlt	r1, #1
 8006b40:	f7ff fedc 	bl	80068fc <_Balloc>
 8006b44:	b930      	cbnz	r0, 8006b54 <__multiply+0x44>
 8006b46:	4602      	mov	r2, r0
 8006b48:	4b44      	ldr	r3, [pc, #272]	@ (8006c5c <__multiply+0x14c>)
 8006b4a:	4845      	ldr	r0, [pc, #276]	@ (8006c60 <__multiply+0x150>)
 8006b4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b50:	f000 fb20 	bl	8007194 <__assert_func>
 8006b54:	f100 0514 	add.w	r5, r0, #20
 8006b58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4543      	cmp	r3, r8
 8006b62:	d321      	bcc.n	8006ba8 <__multiply+0x98>
 8006b64:	f107 0114 	add.w	r1, r7, #20
 8006b68:	f104 0214 	add.w	r2, r4, #20
 8006b6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006b74:	9302      	str	r3, [sp, #8]
 8006b76:	1b13      	subs	r3, r2, r4
 8006b78:	3b15      	subs	r3, #21
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	3304      	adds	r3, #4
 8006b80:	f104 0715 	add.w	r7, r4, #21
 8006b84:	42ba      	cmp	r2, r7
 8006b86:	bf38      	it	cc
 8006b88:	2304      	movcc	r3, #4
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	9b02      	ldr	r3, [sp, #8]
 8006b8e:	9103      	str	r1, [sp, #12]
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d80c      	bhi.n	8006bae <__multiply+0x9e>
 8006b94:	2e00      	cmp	r6, #0
 8006b96:	dd03      	ble.n	8006ba0 <__multiply+0x90>
 8006b98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d05b      	beq.n	8006c58 <__multiply+0x148>
 8006ba0:	6106      	str	r6, [r0, #16]
 8006ba2:	b005      	add	sp, #20
 8006ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	f843 2b04 	str.w	r2, [r3], #4
 8006bac:	e7d8      	b.n	8006b60 <__multiply+0x50>
 8006bae:	f8b1 a000 	ldrh.w	sl, [r1]
 8006bb2:	f1ba 0f00 	cmp.w	sl, #0
 8006bb6:	d024      	beq.n	8006c02 <__multiply+0xf2>
 8006bb8:	f104 0e14 	add.w	lr, r4, #20
 8006bbc:	46a9      	mov	r9, r5
 8006bbe:	f04f 0c00 	mov.w	ip, #0
 8006bc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bc6:	f8d9 3000 	ldr.w	r3, [r9]
 8006bca:	fa1f fb87 	uxth.w	fp, r7
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	fb0a 330b 	mla	r3, sl, fp, r3
 8006bd4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006bd8:	f8d9 7000 	ldr.w	r7, [r9]
 8006bdc:	4463      	add	r3, ip
 8006bde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006be2:	fb0a c70b 	mla	r7, sl, fp, ip
 8006be6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006bf0:	4572      	cmp	r2, lr
 8006bf2:	f849 3b04 	str.w	r3, [r9], #4
 8006bf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006bfa:	d8e2      	bhi.n	8006bc2 <__multiply+0xb2>
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	f845 c003 	str.w	ip, [r5, r3]
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c08:	3104      	adds	r1, #4
 8006c0a:	f1b9 0f00 	cmp.w	r9, #0
 8006c0e:	d021      	beq.n	8006c54 <__multiply+0x144>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	f104 0c14 	add.w	ip, r4, #20
 8006c16:	46ae      	mov	lr, r5
 8006c18:	f04f 0a00 	mov.w	sl, #0
 8006c1c:	f8bc b000 	ldrh.w	fp, [ip]
 8006c20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c24:	fb09 770b 	mla	r7, r9, fp, r7
 8006c28:	4457      	add	r7, sl
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c30:	f84e 3b04 	str.w	r3, [lr], #4
 8006c34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c3c:	f8be 3000 	ldrh.w	r3, [lr]
 8006c40:	fb09 330a 	mla	r3, r9, sl, r3
 8006c44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c48:	4562      	cmp	r2, ip
 8006c4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c4e:	d8e5      	bhi.n	8006c1c <__multiply+0x10c>
 8006c50:	9f01      	ldr	r7, [sp, #4]
 8006c52:	51eb      	str	r3, [r5, r7]
 8006c54:	3504      	adds	r5, #4
 8006c56:	e799      	b.n	8006b8c <__multiply+0x7c>
 8006c58:	3e01      	subs	r6, #1
 8006c5a:	e79b      	b.n	8006b94 <__multiply+0x84>
 8006c5c:	08008440 	.word	0x08008440
 8006c60:	08008451 	.word	0x08008451

08006c64 <__pow5mult>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4615      	mov	r5, r2
 8006c6a:	f012 0203 	ands.w	r2, r2, #3
 8006c6e:	4607      	mov	r7, r0
 8006c70:	460e      	mov	r6, r1
 8006c72:	d007      	beq.n	8006c84 <__pow5mult+0x20>
 8006c74:	4c25      	ldr	r4, [pc, #148]	@ (8006d0c <__pow5mult+0xa8>)
 8006c76:	3a01      	subs	r2, #1
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c7e:	f7ff fe9f 	bl	80069c0 <__multadd>
 8006c82:	4606      	mov	r6, r0
 8006c84:	10ad      	asrs	r5, r5, #2
 8006c86:	d03d      	beq.n	8006d04 <__pow5mult+0xa0>
 8006c88:	69fc      	ldr	r4, [r7, #28]
 8006c8a:	b97c      	cbnz	r4, 8006cac <__pow5mult+0x48>
 8006c8c:	2010      	movs	r0, #16
 8006c8e:	f7ff fd7f 	bl	8006790 <malloc>
 8006c92:	4602      	mov	r2, r0
 8006c94:	61f8      	str	r0, [r7, #28]
 8006c96:	b928      	cbnz	r0, 8006ca4 <__pow5mult+0x40>
 8006c98:	4b1d      	ldr	r3, [pc, #116]	@ (8006d10 <__pow5mult+0xac>)
 8006c9a:	481e      	ldr	r0, [pc, #120]	@ (8006d14 <__pow5mult+0xb0>)
 8006c9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ca0:	f000 fa78 	bl	8007194 <__assert_func>
 8006ca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ca8:	6004      	str	r4, [r0, #0]
 8006caa:	60c4      	str	r4, [r0, #12]
 8006cac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cb4:	b94c      	cbnz	r4, 8006cca <__pow5mult+0x66>
 8006cb6:	f240 2171 	movw	r1, #625	@ 0x271
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f7ff ff12 	bl	8006ae4 <__i2b>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	6003      	str	r3, [r0, #0]
 8006cca:	f04f 0900 	mov.w	r9, #0
 8006cce:	07eb      	lsls	r3, r5, #31
 8006cd0:	d50a      	bpl.n	8006ce8 <__pow5mult+0x84>
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f7ff ff1a 	bl	8006b10 <__multiply>
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4680      	mov	r8, r0
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f7ff fe4b 	bl	800697c <_Bfree>
 8006ce6:	4646      	mov	r6, r8
 8006ce8:	106d      	asrs	r5, r5, #1
 8006cea:	d00b      	beq.n	8006d04 <__pow5mult+0xa0>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	b938      	cbnz	r0, 8006d00 <__pow5mult+0x9c>
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f7ff ff0b 	bl	8006b10 <__multiply>
 8006cfa:	6020      	str	r0, [r4, #0]
 8006cfc:	f8c0 9000 	str.w	r9, [r0]
 8006d00:	4604      	mov	r4, r0
 8006d02:	e7e4      	b.n	8006cce <__pow5mult+0x6a>
 8006d04:	4630      	mov	r0, r6
 8006d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0a:	bf00      	nop
 8006d0c:	080084ac 	.word	0x080084ac
 8006d10:	080083d1 	.word	0x080083d1
 8006d14:	08008451 	.word	0x08008451

08006d18 <__lshift>:
 8006d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	6849      	ldr	r1, [r1, #4]
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d26:	68a3      	ldr	r3, [r4, #8]
 8006d28:	4607      	mov	r7, r0
 8006d2a:	4691      	mov	r9, r2
 8006d2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d30:	f108 0601 	add.w	r6, r8, #1
 8006d34:	42b3      	cmp	r3, r6
 8006d36:	db0b      	blt.n	8006d50 <__lshift+0x38>
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f7ff fddf 	bl	80068fc <_Balloc>
 8006d3e:	4605      	mov	r5, r0
 8006d40:	b948      	cbnz	r0, 8006d56 <__lshift+0x3e>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b28      	ldr	r3, [pc, #160]	@ (8006de8 <__lshift+0xd0>)
 8006d46:	4829      	ldr	r0, [pc, #164]	@ (8006dec <__lshift+0xd4>)
 8006d48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d4c:	f000 fa22 	bl	8007194 <__assert_func>
 8006d50:	3101      	adds	r1, #1
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	e7ee      	b.n	8006d34 <__lshift+0x1c>
 8006d56:	2300      	movs	r3, #0
 8006d58:	f100 0114 	add.w	r1, r0, #20
 8006d5c:	f100 0210 	add.w	r2, r0, #16
 8006d60:	4618      	mov	r0, r3
 8006d62:	4553      	cmp	r3, sl
 8006d64:	db33      	blt.n	8006dce <__lshift+0xb6>
 8006d66:	6920      	ldr	r0, [r4, #16]
 8006d68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d6c:	f104 0314 	add.w	r3, r4, #20
 8006d70:	f019 091f 	ands.w	r9, r9, #31
 8006d74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d7c:	d02b      	beq.n	8006dd6 <__lshift+0xbe>
 8006d7e:	f1c9 0e20 	rsb	lr, r9, #32
 8006d82:	468a      	mov	sl, r1
 8006d84:	2200      	movs	r2, #0
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	fa00 f009 	lsl.w	r0, r0, r9
 8006d8c:	4310      	orrs	r0, r2
 8006d8e:	f84a 0b04 	str.w	r0, [sl], #4
 8006d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d96:	459c      	cmp	ip, r3
 8006d98:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d9c:	d8f3      	bhi.n	8006d86 <__lshift+0x6e>
 8006d9e:	ebac 0304 	sub.w	r3, ip, r4
 8006da2:	3b15      	subs	r3, #21
 8006da4:	f023 0303 	bic.w	r3, r3, #3
 8006da8:	3304      	adds	r3, #4
 8006daa:	f104 0015 	add.w	r0, r4, #21
 8006dae:	4584      	cmp	ip, r0
 8006db0:	bf38      	it	cc
 8006db2:	2304      	movcc	r3, #4
 8006db4:	50ca      	str	r2, [r1, r3]
 8006db6:	b10a      	cbz	r2, 8006dbc <__lshift+0xa4>
 8006db8:	f108 0602 	add.w	r6, r8, #2
 8006dbc:	3e01      	subs	r6, #1
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	612e      	str	r6, [r5, #16]
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	f7ff fdda 	bl	800697c <_Bfree>
 8006dc8:	4628      	mov	r0, r5
 8006dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dce:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	e7c5      	b.n	8006d62 <__lshift+0x4a>
 8006dd6:	3904      	subs	r1, #4
 8006dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ddc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006de0:	459c      	cmp	ip, r3
 8006de2:	d8f9      	bhi.n	8006dd8 <__lshift+0xc0>
 8006de4:	e7ea      	b.n	8006dbc <__lshift+0xa4>
 8006de6:	bf00      	nop
 8006de8:	08008440 	.word	0x08008440
 8006dec:	08008451 	.word	0x08008451

08006df0 <__mcmp>:
 8006df0:	690a      	ldr	r2, [r1, #16]
 8006df2:	4603      	mov	r3, r0
 8006df4:	6900      	ldr	r0, [r0, #16]
 8006df6:	1a80      	subs	r0, r0, r2
 8006df8:	b530      	push	{r4, r5, lr}
 8006dfa:	d10e      	bne.n	8006e1a <__mcmp+0x2a>
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	3114      	adds	r1, #20
 8006e00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e10:	4295      	cmp	r5, r2
 8006e12:	d003      	beq.n	8006e1c <__mcmp+0x2c>
 8006e14:	d205      	bcs.n	8006e22 <__mcmp+0x32>
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	bd30      	pop	{r4, r5, pc}
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	d3f3      	bcc.n	8006e08 <__mcmp+0x18>
 8006e20:	e7fb      	b.n	8006e1a <__mcmp+0x2a>
 8006e22:	2001      	movs	r0, #1
 8006e24:	e7f9      	b.n	8006e1a <__mcmp+0x2a>
	...

08006e28 <__mdiff>:
 8006e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	4689      	mov	r9, r1
 8006e2e:	4606      	mov	r6, r0
 8006e30:	4611      	mov	r1, r2
 8006e32:	4648      	mov	r0, r9
 8006e34:	4614      	mov	r4, r2
 8006e36:	f7ff ffdb 	bl	8006df0 <__mcmp>
 8006e3a:	1e05      	subs	r5, r0, #0
 8006e3c:	d112      	bne.n	8006e64 <__mdiff+0x3c>
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff fd5b 	bl	80068fc <_Balloc>
 8006e46:	4602      	mov	r2, r0
 8006e48:	b928      	cbnz	r0, 8006e56 <__mdiff+0x2e>
 8006e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8006f48 <__mdiff+0x120>)
 8006e4c:	f240 2137 	movw	r1, #567	@ 0x237
 8006e50:	483e      	ldr	r0, [pc, #248]	@ (8006f4c <__mdiff+0x124>)
 8006e52:	f000 f99f 	bl	8007194 <__assert_func>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	b003      	add	sp, #12
 8006e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	bfbc      	itt	lt
 8006e66:	464b      	movlt	r3, r9
 8006e68:	46a1      	movlt	r9, r4
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e70:	bfba      	itte	lt
 8006e72:	461c      	movlt	r4, r3
 8006e74:	2501      	movlt	r5, #1
 8006e76:	2500      	movge	r5, #0
 8006e78:	f7ff fd40 	bl	80068fc <_Balloc>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	b918      	cbnz	r0, 8006e88 <__mdiff+0x60>
 8006e80:	4b31      	ldr	r3, [pc, #196]	@ (8006f48 <__mdiff+0x120>)
 8006e82:	f240 2145 	movw	r1, #581	@ 0x245
 8006e86:	e7e3      	b.n	8006e50 <__mdiff+0x28>
 8006e88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e8c:	6926      	ldr	r6, [r4, #16]
 8006e8e:	60c5      	str	r5, [r0, #12]
 8006e90:	f109 0310 	add.w	r3, r9, #16
 8006e94:	f109 0514 	add.w	r5, r9, #20
 8006e98:	f104 0e14 	add.w	lr, r4, #20
 8006e9c:	f100 0b14 	add.w	fp, r0, #20
 8006ea0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ea4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	46d9      	mov	r9, fp
 8006eac:	f04f 0c00 	mov.w	ip, #0
 8006eb0:	9b01      	ldr	r3, [sp, #4]
 8006eb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006eb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006eba:	9301      	str	r3, [sp, #4]
 8006ebc:	fa1f f38a 	uxth.w	r3, sl
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	b283      	uxth	r3, r0
 8006ec4:	1acb      	subs	r3, r1, r3
 8006ec6:	0c00      	lsrs	r0, r0, #16
 8006ec8:	4463      	add	r3, ip
 8006eca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006ece:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ed8:	4576      	cmp	r6, lr
 8006eda:	f849 3b04 	str.w	r3, [r9], #4
 8006ede:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ee2:	d8e5      	bhi.n	8006eb0 <__mdiff+0x88>
 8006ee4:	1b33      	subs	r3, r6, r4
 8006ee6:	3b15      	subs	r3, #21
 8006ee8:	f023 0303 	bic.w	r3, r3, #3
 8006eec:	3415      	adds	r4, #21
 8006eee:	3304      	adds	r3, #4
 8006ef0:	42a6      	cmp	r6, r4
 8006ef2:	bf38      	it	cc
 8006ef4:	2304      	movcc	r3, #4
 8006ef6:	441d      	add	r5, r3
 8006ef8:	445b      	add	r3, fp
 8006efa:	461e      	mov	r6, r3
 8006efc:	462c      	mov	r4, r5
 8006efe:	4544      	cmp	r4, r8
 8006f00:	d30e      	bcc.n	8006f20 <__mdiff+0xf8>
 8006f02:	f108 0103 	add.w	r1, r8, #3
 8006f06:	1b49      	subs	r1, r1, r5
 8006f08:	f021 0103 	bic.w	r1, r1, #3
 8006f0c:	3d03      	subs	r5, #3
 8006f0e:	45a8      	cmp	r8, r5
 8006f10:	bf38      	it	cc
 8006f12:	2100      	movcc	r1, #0
 8006f14:	440b      	add	r3, r1
 8006f16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f1a:	b191      	cbz	r1, 8006f42 <__mdiff+0x11a>
 8006f1c:	6117      	str	r7, [r2, #16]
 8006f1e:	e79d      	b.n	8006e5c <__mdiff+0x34>
 8006f20:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f24:	46e6      	mov	lr, ip
 8006f26:	0c08      	lsrs	r0, r1, #16
 8006f28:	fa1c fc81 	uxtah	ip, ip, r1
 8006f2c:	4471      	add	r1, lr
 8006f2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f32:	b289      	uxth	r1, r1
 8006f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f38:	f846 1b04 	str.w	r1, [r6], #4
 8006f3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f40:	e7dd      	b.n	8006efe <__mdiff+0xd6>
 8006f42:	3f01      	subs	r7, #1
 8006f44:	e7e7      	b.n	8006f16 <__mdiff+0xee>
 8006f46:	bf00      	nop
 8006f48:	08008440 	.word	0x08008440
 8006f4c:	08008451 	.word	0x08008451

08006f50 <__d2b>:
 8006f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	460f      	mov	r7, r1
 8006f56:	2101      	movs	r1, #1
 8006f58:	ec59 8b10 	vmov	r8, r9, d0
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	f7ff fccd 	bl	80068fc <_Balloc>
 8006f62:	4604      	mov	r4, r0
 8006f64:	b930      	cbnz	r0, 8006f74 <__d2b+0x24>
 8006f66:	4602      	mov	r2, r0
 8006f68:	4b23      	ldr	r3, [pc, #140]	@ (8006ff8 <__d2b+0xa8>)
 8006f6a:	4824      	ldr	r0, [pc, #144]	@ (8006ffc <__d2b+0xac>)
 8006f6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f70:	f000 f910 	bl	8007194 <__assert_func>
 8006f74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f7c:	b10d      	cbz	r5, 8006f82 <__d2b+0x32>
 8006f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	f1b8 0300 	subs.w	r3, r8, #0
 8006f88:	d023      	beq.n	8006fd2 <__d2b+0x82>
 8006f8a:	4668      	mov	r0, sp
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	f7ff fd7c 	bl	8006a8a <__lo0bits>
 8006f92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f96:	b1d0      	cbz	r0, 8006fce <__d2b+0x7e>
 8006f98:	f1c0 0320 	rsb	r3, r0, #32
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	40c2      	lsrs	r2, r0
 8006fa4:	6163      	str	r3, [r4, #20]
 8006fa6:	9201      	str	r2, [sp, #4]
 8006fa8:	9b01      	ldr	r3, [sp, #4]
 8006faa:	61a3      	str	r3, [r4, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bf0c      	ite	eq
 8006fb0:	2201      	moveq	r2, #1
 8006fb2:	2202      	movne	r2, #2
 8006fb4:	6122      	str	r2, [r4, #16]
 8006fb6:	b1a5      	cbz	r5, 8006fe2 <__d2b+0x92>
 8006fb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006fbc:	4405      	add	r5, r0
 8006fbe:	603d      	str	r5, [r7, #0]
 8006fc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006fc4:	6030      	str	r0, [r6, #0]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	b003      	add	sp, #12
 8006fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fce:	6161      	str	r1, [r4, #20]
 8006fd0:	e7ea      	b.n	8006fa8 <__d2b+0x58>
 8006fd2:	a801      	add	r0, sp, #4
 8006fd4:	f7ff fd59 	bl	8006a8a <__lo0bits>
 8006fd8:	9b01      	ldr	r3, [sp, #4]
 8006fda:	6163      	str	r3, [r4, #20]
 8006fdc:	3020      	adds	r0, #32
 8006fde:	2201      	movs	r2, #1
 8006fe0:	e7e8      	b.n	8006fb4 <__d2b+0x64>
 8006fe2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fe6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006fea:	6038      	str	r0, [r7, #0]
 8006fec:	6918      	ldr	r0, [r3, #16]
 8006fee:	f7ff fd2d 	bl	8006a4c <__hi0bits>
 8006ff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ff6:	e7e5      	b.n	8006fc4 <__d2b+0x74>
 8006ff8:	08008440 	.word	0x08008440
 8006ffc:	08008451 	.word	0x08008451

08007000 <__sflush_r>:
 8007000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007008:	0716      	lsls	r6, r2, #28
 800700a:	4605      	mov	r5, r0
 800700c:	460c      	mov	r4, r1
 800700e:	d454      	bmi.n	80070ba <__sflush_r+0xba>
 8007010:	684b      	ldr	r3, [r1, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	dc02      	bgt.n	800701c <__sflush_r+0x1c>
 8007016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007018:	2b00      	cmp	r3, #0
 800701a:	dd48      	ble.n	80070ae <__sflush_r+0xae>
 800701c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800701e:	2e00      	cmp	r6, #0
 8007020:	d045      	beq.n	80070ae <__sflush_r+0xae>
 8007022:	2300      	movs	r3, #0
 8007024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007028:	682f      	ldr	r7, [r5, #0]
 800702a:	6a21      	ldr	r1, [r4, #32]
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	d030      	beq.n	8007092 <__sflush_r+0x92>
 8007030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	0759      	lsls	r1, r3, #29
 8007036:	d505      	bpl.n	8007044 <__sflush_r+0x44>
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	1ad2      	subs	r2, r2, r3
 800703c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800703e:	b10b      	cbz	r3, 8007044 <__sflush_r+0x44>
 8007040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007042:	1ad2      	subs	r2, r2, r3
 8007044:	2300      	movs	r3, #0
 8007046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007048:	6a21      	ldr	r1, [r4, #32]
 800704a:	4628      	mov	r0, r5
 800704c:	47b0      	blx	r6
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	d106      	bne.n	8007062 <__sflush_r+0x62>
 8007054:	6829      	ldr	r1, [r5, #0]
 8007056:	291d      	cmp	r1, #29
 8007058:	d82b      	bhi.n	80070b2 <__sflush_r+0xb2>
 800705a:	4a2a      	ldr	r2, [pc, #168]	@ (8007104 <__sflush_r+0x104>)
 800705c:	410a      	asrs	r2, r1
 800705e:	07d6      	lsls	r6, r2, #31
 8007060:	d427      	bmi.n	80070b2 <__sflush_r+0xb2>
 8007062:	2200      	movs	r2, #0
 8007064:	6062      	str	r2, [r4, #4]
 8007066:	04d9      	lsls	r1, r3, #19
 8007068:	6922      	ldr	r2, [r4, #16]
 800706a:	6022      	str	r2, [r4, #0]
 800706c:	d504      	bpl.n	8007078 <__sflush_r+0x78>
 800706e:	1c42      	adds	r2, r0, #1
 8007070:	d101      	bne.n	8007076 <__sflush_r+0x76>
 8007072:	682b      	ldr	r3, [r5, #0]
 8007074:	b903      	cbnz	r3, 8007078 <__sflush_r+0x78>
 8007076:	6560      	str	r0, [r4, #84]	@ 0x54
 8007078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800707a:	602f      	str	r7, [r5, #0]
 800707c:	b1b9      	cbz	r1, 80070ae <__sflush_r+0xae>
 800707e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007082:	4299      	cmp	r1, r3
 8007084:	d002      	beq.n	800708c <__sflush_r+0x8c>
 8007086:	4628      	mov	r0, r5
 8007088:	f7ff fb38 	bl	80066fc <_free_r>
 800708c:	2300      	movs	r3, #0
 800708e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007090:	e00d      	b.n	80070ae <__sflush_r+0xae>
 8007092:	2301      	movs	r3, #1
 8007094:	4628      	mov	r0, r5
 8007096:	47b0      	blx	r6
 8007098:	4602      	mov	r2, r0
 800709a:	1c50      	adds	r0, r2, #1
 800709c:	d1c9      	bne.n	8007032 <__sflush_r+0x32>
 800709e:	682b      	ldr	r3, [r5, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0c6      	beq.n	8007032 <__sflush_r+0x32>
 80070a4:	2b1d      	cmp	r3, #29
 80070a6:	d001      	beq.n	80070ac <__sflush_r+0xac>
 80070a8:	2b16      	cmp	r3, #22
 80070aa:	d11e      	bne.n	80070ea <__sflush_r+0xea>
 80070ac:	602f      	str	r7, [r5, #0]
 80070ae:	2000      	movs	r0, #0
 80070b0:	e022      	b.n	80070f8 <__sflush_r+0xf8>
 80070b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	e01b      	b.n	80070f2 <__sflush_r+0xf2>
 80070ba:	690f      	ldr	r7, [r1, #16]
 80070bc:	2f00      	cmp	r7, #0
 80070be:	d0f6      	beq.n	80070ae <__sflush_r+0xae>
 80070c0:	0793      	lsls	r3, r2, #30
 80070c2:	680e      	ldr	r6, [r1, #0]
 80070c4:	bf08      	it	eq
 80070c6:	694b      	ldreq	r3, [r1, #20]
 80070c8:	600f      	str	r7, [r1, #0]
 80070ca:	bf18      	it	ne
 80070cc:	2300      	movne	r3, #0
 80070ce:	eba6 0807 	sub.w	r8, r6, r7
 80070d2:	608b      	str	r3, [r1, #8]
 80070d4:	f1b8 0f00 	cmp.w	r8, #0
 80070d8:	dde9      	ble.n	80070ae <__sflush_r+0xae>
 80070da:	6a21      	ldr	r1, [r4, #32]
 80070dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070de:	4643      	mov	r3, r8
 80070e0:	463a      	mov	r2, r7
 80070e2:	4628      	mov	r0, r5
 80070e4:	47b0      	blx	r6
 80070e6:	2800      	cmp	r0, #0
 80070e8:	dc08      	bgt.n	80070fc <__sflush_r+0xfc>
 80070ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070fc:	4407      	add	r7, r0
 80070fe:	eba8 0800 	sub.w	r8, r8, r0
 8007102:	e7e7      	b.n	80070d4 <__sflush_r+0xd4>
 8007104:	dfbffffe 	.word	0xdfbffffe

08007108 <_fflush_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	690b      	ldr	r3, [r1, #16]
 800710c:	4605      	mov	r5, r0
 800710e:	460c      	mov	r4, r1
 8007110:	b913      	cbnz	r3, 8007118 <_fflush_r+0x10>
 8007112:	2500      	movs	r5, #0
 8007114:	4628      	mov	r0, r5
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	b118      	cbz	r0, 8007122 <_fflush_r+0x1a>
 800711a:	6a03      	ldr	r3, [r0, #32]
 800711c:	b90b      	cbnz	r3, 8007122 <_fflush_r+0x1a>
 800711e:	f7fe fc13 	bl	8005948 <__sinit>
 8007122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f3      	beq.n	8007112 <_fflush_r+0xa>
 800712a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800712c:	07d0      	lsls	r0, r2, #31
 800712e:	d404      	bmi.n	800713a <_fflush_r+0x32>
 8007130:	0599      	lsls	r1, r3, #22
 8007132:	d402      	bmi.n	800713a <_fflush_r+0x32>
 8007134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007136:	f7fe fcfe 	bl	8005b36 <__retarget_lock_acquire_recursive>
 800713a:	4628      	mov	r0, r5
 800713c:	4621      	mov	r1, r4
 800713e:	f7ff ff5f 	bl	8007000 <__sflush_r>
 8007142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007144:	07da      	lsls	r2, r3, #31
 8007146:	4605      	mov	r5, r0
 8007148:	d4e4      	bmi.n	8007114 <_fflush_r+0xc>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	059b      	lsls	r3, r3, #22
 800714e:	d4e1      	bmi.n	8007114 <_fflush_r+0xc>
 8007150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007152:	f7fe fcf1 	bl	8005b38 <__retarget_lock_release_recursive>
 8007156:	e7dd      	b.n	8007114 <_fflush_r+0xc>

08007158 <_sbrk_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d06      	ldr	r5, [pc, #24]	@ (8007174 <_sbrk_r+0x1c>)
 800715c:	2300      	movs	r3, #0
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	602b      	str	r3, [r5, #0]
 8007164:	f7f9 fe94 	bl	8000e90 <_sbrk>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_sbrk_r+0x1a>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_sbrk_r+0x1a>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	24000450 	.word	0x24000450

08007178 <memcpy>:
 8007178:	440a      	add	r2, r1
 800717a:	4291      	cmp	r1, r2
 800717c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007180:	d100      	bne.n	8007184 <memcpy+0xc>
 8007182:	4770      	bx	lr
 8007184:	b510      	push	{r4, lr}
 8007186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718e:	4291      	cmp	r1, r2
 8007190:	d1f9      	bne.n	8007186 <memcpy+0xe>
 8007192:	bd10      	pop	{r4, pc}

08007194 <__assert_func>:
 8007194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007196:	4614      	mov	r4, r2
 8007198:	461a      	mov	r2, r3
 800719a:	4b09      	ldr	r3, [pc, #36]	@ (80071c0 <__assert_func+0x2c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4605      	mov	r5, r0
 80071a0:	68d8      	ldr	r0, [r3, #12]
 80071a2:	b954      	cbnz	r4, 80071ba <__assert_func+0x26>
 80071a4:	4b07      	ldr	r3, [pc, #28]	@ (80071c4 <__assert_func+0x30>)
 80071a6:	461c      	mov	r4, r3
 80071a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071ac:	9100      	str	r1, [sp, #0]
 80071ae:	462b      	mov	r3, r5
 80071b0:	4905      	ldr	r1, [pc, #20]	@ (80071c8 <__assert_func+0x34>)
 80071b2:	f000 f841 	bl	8007238 <fiprintf>
 80071b6:	f000 f851 	bl	800725c <abort>
 80071ba:	4b04      	ldr	r3, [pc, #16]	@ (80071cc <__assert_func+0x38>)
 80071bc:	e7f4      	b.n	80071a8 <__assert_func+0x14>
 80071be:	bf00      	nop
 80071c0:	24000020 	.word	0x24000020
 80071c4:	080085ed 	.word	0x080085ed
 80071c8:	080085bf 	.word	0x080085bf
 80071cc:	080085b2 	.word	0x080085b2

080071d0 <_calloc_r>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	fba1 5402 	umull	r5, r4, r1, r2
 80071d6:	b93c      	cbnz	r4, 80071e8 <_calloc_r+0x18>
 80071d8:	4629      	mov	r1, r5
 80071da:	f7ff fb03 	bl	80067e4 <_malloc_r>
 80071de:	4606      	mov	r6, r0
 80071e0:	b928      	cbnz	r0, 80071ee <_calloc_r+0x1e>
 80071e2:	2600      	movs	r6, #0
 80071e4:	4630      	mov	r0, r6
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	220c      	movs	r2, #12
 80071ea:	6002      	str	r2, [r0, #0]
 80071ec:	e7f9      	b.n	80071e2 <_calloc_r+0x12>
 80071ee:	462a      	mov	r2, r5
 80071f0:	4621      	mov	r1, r4
 80071f2:	f7fe fc22 	bl	8005a3a <memset>
 80071f6:	e7f5      	b.n	80071e4 <_calloc_r+0x14>

080071f8 <__ascii_mbtowc>:
 80071f8:	b082      	sub	sp, #8
 80071fa:	b901      	cbnz	r1, 80071fe <__ascii_mbtowc+0x6>
 80071fc:	a901      	add	r1, sp, #4
 80071fe:	b142      	cbz	r2, 8007212 <__ascii_mbtowc+0x1a>
 8007200:	b14b      	cbz	r3, 8007216 <__ascii_mbtowc+0x1e>
 8007202:	7813      	ldrb	r3, [r2, #0]
 8007204:	600b      	str	r3, [r1, #0]
 8007206:	7812      	ldrb	r2, [r2, #0]
 8007208:	1e10      	subs	r0, r2, #0
 800720a:	bf18      	it	ne
 800720c:	2001      	movne	r0, #1
 800720e:	b002      	add	sp, #8
 8007210:	4770      	bx	lr
 8007212:	4610      	mov	r0, r2
 8007214:	e7fb      	b.n	800720e <__ascii_mbtowc+0x16>
 8007216:	f06f 0001 	mvn.w	r0, #1
 800721a:	e7f8      	b.n	800720e <__ascii_mbtowc+0x16>

0800721c <__ascii_wctomb>:
 800721c:	4603      	mov	r3, r0
 800721e:	4608      	mov	r0, r1
 8007220:	b141      	cbz	r1, 8007234 <__ascii_wctomb+0x18>
 8007222:	2aff      	cmp	r2, #255	@ 0xff
 8007224:	d904      	bls.n	8007230 <__ascii_wctomb+0x14>
 8007226:	228a      	movs	r2, #138	@ 0x8a
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	f04f 30ff 	mov.w	r0, #4294967295
 800722e:	4770      	bx	lr
 8007230:	700a      	strb	r2, [r1, #0]
 8007232:	2001      	movs	r0, #1
 8007234:	4770      	bx	lr
	...

08007238 <fiprintf>:
 8007238:	b40e      	push	{r1, r2, r3}
 800723a:	b503      	push	{r0, r1, lr}
 800723c:	4601      	mov	r1, r0
 800723e:	ab03      	add	r3, sp, #12
 8007240:	4805      	ldr	r0, [pc, #20]	@ (8007258 <fiprintf+0x20>)
 8007242:	f853 2b04 	ldr.w	r2, [r3], #4
 8007246:	6800      	ldr	r0, [r0, #0]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	f000 f837 	bl	80072bc <_vfiprintf_r>
 800724e:	b002      	add	sp, #8
 8007250:	f85d eb04 	ldr.w	lr, [sp], #4
 8007254:	b003      	add	sp, #12
 8007256:	4770      	bx	lr
 8007258:	24000020 	.word	0x24000020

0800725c <abort>:
 800725c:	b508      	push	{r3, lr}
 800725e:	2006      	movs	r0, #6
 8007260:	f000 fa00 	bl	8007664 <raise>
 8007264:	2001      	movs	r0, #1
 8007266:	f7f9 fd9a 	bl	8000d9e <_exit>

0800726a <__sfputc_r>:
 800726a:	6893      	ldr	r3, [r2, #8]
 800726c:	3b01      	subs	r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	b410      	push	{r4}
 8007272:	6093      	str	r3, [r2, #8]
 8007274:	da08      	bge.n	8007288 <__sfputc_r+0x1e>
 8007276:	6994      	ldr	r4, [r2, #24]
 8007278:	42a3      	cmp	r3, r4
 800727a:	db01      	blt.n	8007280 <__sfputc_r+0x16>
 800727c:	290a      	cmp	r1, #10
 800727e:	d103      	bne.n	8007288 <__sfputc_r+0x1e>
 8007280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007284:	f000 b932 	b.w	80074ec <__swbuf_r>
 8007288:	6813      	ldr	r3, [r2, #0]
 800728a:	1c58      	adds	r0, r3, #1
 800728c:	6010      	str	r0, [r2, #0]
 800728e:	7019      	strb	r1, [r3, #0]
 8007290:	4608      	mov	r0, r1
 8007292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007296:	4770      	bx	lr

08007298 <__sfputs_r>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	4614      	mov	r4, r2
 80072a0:	18d5      	adds	r5, r2, r3
 80072a2:	42ac      	cmp	r4, r5
 80072a4:	d101      	bne.n	80072aa <__sfputs_r+0x12>
 80072a6:	2000      	movs	r0, #0
 80072a8:	e007      	b.n	80072ba <__sfputs_r+0x22>
 80072aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ae:	463a      	mov	r2, r7
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7ff ffda 	bl	800726a <__sfputc_r>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	d1f3      	bne.n	80072a2 <__sfputs_r+0xa>
 80072ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072bc <_vfiprintf_r>:
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	460d      	mov	r5, r1
 80072c2:	b09d      	sub	sp, #116	@ 0x74
 80072c4:	4614      	mov	r4, r2
 80072c6:	4698      	mov	r8, r3
 80072c8:	4606      	mov	r6, r0
 80072ca:	b118      	cbz	r0, 80072d4 <_vfiprintf_r+0x18>
 80072cc:	6a03      	ldr	r3, [r0, #32]
 80072ce:	b90b      	cbnz	r3, 80072d4 <_vfiprintf_r+0x18>
 80072d0:	f7fe fb3a 	bl	8005948 <__sinit>
 80072d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072d6:	07d9      	lsls	r1, r3, #31
 80072d8:	d405      	bmi.n	80072e6 <_vfiprintf_r+0x2a>
 80072da:	89ab      	ldrh	r3, [r5, #12]
 80072dc:	059a      	lsls	r2, r3, #22
 80072de:	d402      	bmi.n	80072e6 <_vfiprintf_r+0x2a>
 80072e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072e2:	f7fe fc28 	bl	8005b36 <__retarget_lock_acquire_recursive>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	071b      	lsls	r3, r3, #28
 80072ea:	d501      	bpl.n	80072f0 <_vfiprintf_r+0x34>
 80072ec:	692b      	ldr	r3, [r5, #16]
 80072ee:	b99b      	cbnz	r3, 8007318 <_vfiprintf_r+0x5c>
 80072f0:	4629      	mov	r1, r5
 80072f2:	4630      	mov	r0, r6
 80072f4:	f000 f938 	bl	8007568 <__swsetup_r>
 80072f8:	b170      	cbz	r0, 8007318 <_vfiprintf_r+0x5c>
 80072fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072fc:	07dc      	lsls	r4, r3, #31
 80072fe:	d504      	bpl.n	800730a <_vfiprintf_r+0x4e>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	b01d      	add	sp, #116	@ 0x74
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	0598      	lsls	r0, r3, #22
 800730e:	d4f7      	bmi.n	8007300 <_vfiprintf_r+0x44>
 8007310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007312:	f7fe fc11 	bl	8005b38 <__retarget_lock_release_recursive>
 8007316:	e7f3      	b.n	8007300 <_vfiprintf_r+0x44>
 8007318:	2300      	movs	r3, #0
 800731a:	9309      	str	r3, [sp, #36]	@ 0x24
 800731c:	2320      	movs	r3, #32
 800731e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007322:	f8cd 800c 	str.w	r8, [sp, #12]
 8007326:	2330      	movs	r3, #48	@ 0x30
 8007328:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074d8 <_vfiprintf_r+0x21c>
 800732c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007330:	f04f 0901 	mov.w	r9, #1
 8007334:	4623      	mov	r3, r4
 8007336:	469a      	mov	sl, r3
 8007338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733c:	b10a      	cbz	r2, 8007342 <_vfiprintf_r+0x86>
 800733e:	2a25      	cmp	r2, #37	@ 0x25
 8007340:	d1f9      	bne.n	8007336 <_vfiprintf_r+0x7a>
 8007342:	ebba 0b04 	subs.w	fp, sl, r4
 8007346:	d00b      	beq.n	8007360 <_vfiprintf_r+0xa4>
 8007348:	465b      	mov	r3, fp
 800734a:	4622      	mov	r2, r4
 800734c:	4629      	mov	r1, r5
 800734e:	4630      	mov	r0, r6
 8007350:	f7ff ffa2 	bl	8007298 <__sfputs_r>
 8007354:	3001      	adds	r0, #1
 8007356:	f000 80a7 	beq.w	80074a8 <_vfiprintf_r+0x1ec>
 800735a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800735c:	445a      	add	r2, fp
 800735e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007360:	f89a 3000 	ldrb.w	r3, [sl]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 809f 	beq.w	80074a8 <_vfiprintf_r+0x1ec>
 800736a:	2300      	movs	r3, #0
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007374:	f10a 0a01 	add.w	sl, sl, #1
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	9307      	str	r3, [sp, #28]
 800737c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007380:	931a      	str	r3, [sp, #104]	@ 0x68
 8007382:	4654      	mov	r4, sl
 8007384:	2205      	movs	r2, #5
 8007386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738a:	4853      	ldr	r0, [pc, #332]	@ (80074d8 <_vfiprintf_r+0x21c>)
 800738c:	f7f8 ffa8 	bl	80002e0 <memchr>
 8007390:	9a04      	ldr	r2, [sp, #16]
 8007392:	b9d8      	cbnz	r0, 80073cc <_vfiprintf_r+0x110>
 8007394:	06d1      	lsls	r1, r2, #27
 8007396:	bf44      	itt	mi
 8007398:	2320      	movmi	r3, #32
 800739a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800739e:	0713      	lsls	r3, r2, #28
 80073a0:	bf44      	itt	mi
 80073a2:	232b      	movmi	r3, #43	@ 0x2b
 80073a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a8:	f89a 3000 	ldrb.w	r3, [sl]
 80073ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80073ae:	d015      	beq.n	80073dc <_vfiprintf_r+0x120>
 80073b0:	9a07      	ldr	r2, [sp, #28]
 80073b2:	4654      	mov	r4, sl
 80073b4:	2000      	movs	r0, #0
 80073b6:	f04f 0c0a 	mov.w	ip, #10
 80073ba:	4621      	mov	r1, r4
 80073bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073c0:	3b30      	subs	r3, #48	@ 0x30
 80073c2:	2b09      	cmp	r3, #9
 80073c4:	d94b      	bls.n	800745e <_vfiprintf_r+0x1a2>
 80073c6:	b1b0      	cbz	r0, 80073f6 <_vfiprintf_r+0x13a>
 80073c8:	9207      	str	r2, [sp, #28]
 80073ca:	e014      	b.n	80073f6 <_vfiprintf_r+0x13a>
 80073cc:	eba0 0308 	sub.w	r3, r0, r8
 80073d0:	fa09 f303 	lsl.w	r3, r9, r3
 80073d4:	4313      	orrs	r3, r2
 80073d6:	9304      	str	r3, [sp, #16]
 80073d8:	46a2      	mov	sl, r4
 80073da:	e7d2      	b.n	8007382 <_vfiprintf_r+0xc6>
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	1d19      	adds	r1, r3, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	9103      	str	r1, [sp, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bfbb      	ittet	lt
 80073e8:	425b      	neglt	r3, r3
 80073ea:	f042 0202 	orrlt.w	r2, r2, #2
 80073ee:	9307      	strge	r3, [sp, #28]
 80073f0:	9307      	strlt	r3, [sp, #28]
 80073f2:	bfb8      	it	lt
 80073f4:	9204      	strlt	r2, [sp, #16]
 80073f6:	7823      	ldrb	r3, [r4, #0]
 80073f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80073fa:	d10a      	bne.n	8007412 <_vfiprintf_r+0x156>
 80073fc:	7863      	ldrb	r3, [r4, #1]
 80073fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007400:	d132      	bne.n	8007468 <_vfiprintf_r+0x1ac>
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	1d1a      	adds	r2, r3, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	9203      	str	r2, [sp, #12]
 800740a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800740e:	3402      	adds	r4, #2
 8007410:	9305      	str	r3, [sp, #20]
 8007412:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074e8 <_vfiprintf_r+0x22c>
 8007416:	7821      	ldrb	r1, [r4, #0]
 8007418:	2203      	movs	r2, #3
 800741a:	4650      	mov	r0, sl
 800741c:	f7f8 ff60 	bl	80002e0 <memchr>
 8007420:	b138      	cbz	r0, 8007432 <_vfiprintf_r+0x176>
 8007422:	9b04      	ldr	r3, [sp, #16]
 8007424:	eba0 000a 	sub.w	r0, r0, sl
 8007428:	2240      	movs	r2, #64	@ 0x40
 800742a:	4082      	lsls	r2, r0
 800742c:	4313      	orrs	r3, r2
 800742e:	3401      	adds	r4, #1
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007436:	4829      	ldr	r0, [pc, #164]	@ (80074dc <_vfiprintf_r+0x220>)
 8007438:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800743c:	2206      	movs	r2, #6
 800743e:	f7f8 ff4f 	bl	80002e0 <memchr>
 8007442:	2800      	cmp	r0, #0
 8007444:	d03f      	beq.n	80074c6 <_vfiprintf_r+0x20a>
 8007446:	4b26      	ldr	r3, [pc, #152]	@ (80074e0 <_vfiprintf_r+0x224>)
 8007448:	bb1b      	cbnz	r3, 8007492 <_vfiprintf_r+0x1d6>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	3307      	adds	r3, #7
 800744e:	f023 0307 	bic.w	r3, r3, #7
 8007452:	3308      	adds	r3, #8
 8007454:	9303      	str	r3, [sp, #12]
 8007456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007458:	443b      	add	r3, r7
 800745a:	9309      	str	r3, [sp, #36]	@ 0x24
 800745c:	e76a      	b.n	8007334 <_vfiprintf_r+0x78>
 800745e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007462:	460c      	mov	r4, r1
 8007464:	2001      	movs	r0, #1
 8007466:	e7a8      	b.n	80073ba <_vfiprintf_r+0xfe>
 8007468:	2300      	movs	r3, #0
 800746a:	3401      	adds	r4, #1
 800746c:	9305      	str	r3, [sp, #20]
 800746e:	4619      	mov	r1, r3
 8007470:	f04f 0c0a 	mov.w	ip, #10
 8007474:	4620      	mov	r0, r4
 8007476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800747a:	3a30      	subs	r2, #48	@ 0x30
 800747c:	2a09      	cmp	r2, #9
 800747e:	d903      	bls.n	8007488 <_vfiprintf_r+0x1cc>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0c6      	beq.n	8007412 <_vfiprintf_r+0x156>
 8007484:	9105      	str	r1, [sp, #20]
 8007486:	e7c4      	b.n	8007412 <_vfiprintf_r+0x156>
 8007488:	fb0c 2101 	mla	r1, ip, r1, r2
 800748c:	4604      	mov	r4, r0
 800748e:	2301      	movs	r3, #1
 8007490:	e7f0      	b.n	8007474 <_vfiprintf_r+0x1b8>
 8007492:	ab03      	add	r3, sp, #12
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	462a      	mov	r2, r5
 8007498:	4b12      	ldr	r3, [pc, #72]	@ (80074e4 <_vfiprintf_r+0x228>)
 800749a:	a904      	add	r1, sp, #16
 800749c:	4630      	mov	r0, r6
 800749e:	f7fd fe1f 	bl	80050e0 <_printf_float>
 80074a2:	4607      	mov	r7, r0
 80074a4:	1c78      	adds	r0, r7, #1
 80074a6:	d1d6      	bne.n	8007456 <_vfiprintf_r+0x19a>
 80074a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074aa:	07d9      	lsls	r1, r3, #31
 80074ac:	d405      	bmi.n	80074ba <_vfiprintf_r+0x1fe>
 80074ae:	89ab      	ldrh	r3, [r5, #12]
 80074b0:	059a      	lsls	r2, r3, #22
 80074b2:	d402      	bmi.n	80074ba <_vfiprintf_r+0x1fe>
 80074b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074b6:	f7fe fb3f 	bl	8005b38 <__retarget_lock_release_recursive>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	065b      	lsls	r3, r3, #25
 80074be:	f53f af1f 	bmi.w	8007300 <_vfiprintf_r+0x44>
 80074c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074c4:	e71e      	b.n	8007304 <_vfiprintf_r+0x48>
 80074c6:	ab03      	add	r3, sp, #12
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	462a      	mov	r2, r5
 80074cc:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <_vfiprintf_r+0x228>)
 80074ce:	a904      	add	r1, sp, #16
 80074d0:	4630      	mov	r0, r6
 80074d2:	f7fe f88d 	bl	80055f0 <_printf_i>
 80074d6:	e7e4      	b.n	80074a2 <_vfiprintf_r+0x1e6>
 80074d8:	080086ef 	.word	0x080086ef
 80074dc:	080086f9 	.word	0x080086f9
 80074e0:	080050e1 	.word	0x080050e1
 80074e4:	08007299 	.word	0x08007299
 80074e8:	080086f5 	.word	0x080086f5

080074ec <__swbuf_r>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	460e      	mov	r6, r1
 80074f0:	4614      	mov	r4, r2
 80074f2:	4605      	mov	r5, r0
 80074f4:	b118      	cbz	r0, 80074fe <__swbuf_r+0x12>
 80074f6:	6a03      	ldr	r3, [r0, #32]
 80074f8:	b90b      	cbnz	r3, 80074fe <__swbuf_r+0x12>
 80074fa:	f7fe fa25 	bl	8005948 <__sinit>
 80074fe:	69a3      	ldr	r3, [r4, #24]
 8007500:	60a3      	str	r3, [r4, #8]
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	071a      	lsls	r2, r3, #28
 8007506:	d501      	bpl.n	800750c <__swbuf_r+0x20>
 8007508:	6923      	ldr	r3, [r4, #16]
 800750a:	b943      	cbnz	r3, 800751e <__swbuf_r+0x32>
 800750c:	4621      	mov	r1, r4
 800750e:	4628      	mov	r0, r5
 8007510:	f000 f82a 	bl	8007568 <__swsetup_r>
 8007514:	b118      	cbz	r0, 800751e <__swbuf_r+0x32>
 8007516:	f04f 37ff 	mov.w	r7, #4294967295
 800751a:	4638      	mov	r0, r7
 800751c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	6922      	ldr	r2, [r4, #16]
 8007522:	1a98      	subs	r0, r3, r2
 8007524:	6963      	ldr	r3, [r4, #20]
 8007526:	b2f6      	uxtb	r6, r6
 8007528:	4283      	cmp	r3, r0
 800752a:	4637      	mov	r7, r6
 800752c:	dc05      	bgt.n	800753a <__swbuf_r+0x4e>
 800752e:	4621      	mov	r1, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f7ff fde9 	bl	8007108 <_fflush_r>
 8007536:	2800      	cmp	r0, #0
 8007538:	d1ed      	bne.n	8007516 <__swbuf_r+0x2a>
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	3b01      	subs	r3, #1
 800753e:	60a3      	str	r3, [r4, #8]
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	6022      	str	r2, [r4, #0]
 8007546:	701e      	strb	r6, [r3, #0]
 8007548:	6962      	ldr	r2, [r4, #20]
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	429a      	cmp	r2, r3
 800754e:	d004      	beq.n	800755a <__swbuf_r+0x6e>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	07db      	lsls	r3, r3, #31
 8007554:	d5e1      	bpl.n	800751a <__swbuf_r+0x2e>
 8007556:	2e0a      	cmp	r6, #10
 8007558:	d1df      	bne.n	800751a <__swbuf_r+0x2e>
 800755a:	4621      	mov	r1, r4
 800755c:	4628      	mov	r0, r5
 800755e:	f7ff fdd3 	bl	8007108 <_fflush_r>
 8007562:	2800      	cmp	r0, #0
 8007564:	d0d9      	beq.n	800751a <__swbuf_r+0x2e>
 8007566:	e7d6      	b.n	8007516 <__swbuf_r+0x2a>

08007568 <__swsetup_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4b29      	ldr	r3, [pc, #164]	@ (8007610 <__swsetup_r+0xa8>)
 800756c:	4605      	mov	r5, r0
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	460c      	mov	r4, r1
 8007572:	b118      	cbz	r0, 800757c <__swsetup_r+0x14>
 8007574:	6a03      	ldr	r3, [r0, #32]
 8007576:	b90b      	cbnz	r3, 800757c <__swsetup_r+0x14>
 8007578:	f7fe f9e6 	bl	8005948 <__sinit>
 800757c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007580:	0719      	lsls	r1, r3, #28
 8007582:	d422      	bmi.n	80075ca <__swsetup_r+0x62>
 8007584:	06da      	lsls	r2, r3, #27
 8007586:	d407      	bmi.n	8007598 <__swsetup_r+0x30>
 8007588:	2209      	movs	r2, #9
 800758a:	602a      	str	r2, [r5, #0]
 800758c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	f04f 30ff 	mov.w	r0, #4294967295
 8007596:	e033      	b.n	8007600 <__swsetup_r+0x98>
 8007598:	0758      	lsls	r0, r3, #29
 800759a:	d512      	bpl.n	80075c2 <__swsetup_r+0x5a>
 800759c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800759e:	b141      	cbz	r1, 80075b2 <__swsetup_r+0x4a>
 80075a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075a4:	4299      	cmp	r1, r3
 80075a6:	d002      	beq.n	80075ae <__swsetup_r+0x46>
 80075a8:	4628      	mov	r0, r5
 80075aa:	f7ff f8a7 	bl	80066fc <_free_r>
 80075ae:	2300      	movs	r3, #0
 80075b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075b8:	81a3      	strh	r3, [r4, #12]
 80075ba:	2300      	movs	r3, #0
 80075bc:	6063      	str	r3, [r4, #4]
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	f043 0308 	orr.w	r3, r3, #8
 80075c8:	81a3      	strh	r3, [r4, #12]
 80075ca:	6923      	ldr	r3, [r4, #16]
 80075cc:	b94b      	cbnz	r3, 80075e2 <__swsetup_r+0x7a>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075d8:	d003      	beq.n	80075e2 <__swsetup_r+0x7a>
 80075da:	4621      	mov	r1, r4
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 f883 	bl	80076e8 <__smakebuf_r>
 80075e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e6:	f013 0201 	ands.w	r2, r3, #1
 80075ea:	d00a      	beq.n	8007602 <__swsetup_r+0x9a>
 80075ec:	2200      	movs	r2, #0
 80075ee:	60a2      	str	r2, [r4, #8]
 80075f0:	6962      	ldr	r2, [r4, #20]
 80075f2:	4252      	negs	r2, r2
 80075f4:	61a2      	str	r2, [r4, #24]
 80075f6:	6922      	ldr	r2, [r4, #16]
 80075f8:	b942      	cbnz	r2, 800760c <__swsetup_r+0xa4>
 80075fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075fe:	d1c5      	bne.n	800758c <__swsetup_r+0x24>
 8007600:	bd38      	pop	{r3, r4, r5, pc}
 8007602:	0799      	lsls	r1, r3, #30
 8007604:	bf58      	it	pl
 8007606:	6962      	ldrpl	r2, [r4, #20]
 8007608:	60a2      	str	r2, [r4, #8]
 800760a:	e7f4      	b.n	80075f6 <__swsetup_r+0x8e>
 800760c:	2000      	movs	r0, #0
 800760e:	e7f7      	b.n	8007600 <__swsetup_r+0x98>
 8007610:	24000020 	.word	0x24000020

08007614 <_raise_r>:
 8007614:	291f      	cmp	r1, #31
 8007616:	b538      	push	{r3, r4, r5, lr}
 8007618:	4605      	mov	r5, r0
 800761a:	460c      	mov	r4, r1
 800761c:	d904      	bls.n	8007628 <_raise_r+0x14>
 800761e:	2316      	movs	r3, #22
 8007620:	6003      	str	r3, [r0, #0]
 8007622:	f04f 30ff 	mov.w	r0, #4294967295
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800762a:	b112      	cbz	r2, 8007632 <_raise_r+0x1e>
 800762c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007630:	b94b      	cbnz	r3, 8007646 <_raise_r+0x32>
 8007632:	4628      	mov	r0, r5
 8007634:	f000 f830 	bl	8007698 <_getpid_r>
 8007638:	4622      	mov	r2, r4
 800763a:	4601      	mov	r1, r0
 800763c:	4628      	mov	r0, r5
 800763e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007642:	f000 b817 	b.w	8007674 <_kill_r>
 8007646:	2b01      	cmp	r3, #1
 8007648:	d00a      	beq.n	8007660 <_raise_r+0x4c>
 800764a:	1c59      	adds	r1, r3, #1
 800764c:	d103      	bne.n	8007656 <_raise_r+0x42>
 800764e:	2316      	movs	r3, #22
 8007650:	6003      	str	r3, [r0, #0]
 8007652:	2001      	movs	r0, #1
 8007654:	e7e7      	b.n	8007626 <_raise_r+0x12>
 8007656:	2100      	movs	r1, #0
 8007658:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800765c:	4620      	mov	r0, r4
 800765e:	4798      	blx	r3
 8007660:	2000      	movs	r0, #0
 8007662:	e7e0      	b.n	8007626 <_raise_r+0x12>

08007664 <raise>:
 8007664:	4b02      	ldr	r3, [pc, #8]	@ (8007670 <raise+0xc>)
 8007666:	4601      	mov	r1, r0
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	f7ff bfd3 	b.w	8007614 <_raise_r>
 800766e:	bf00      	nop
 8007670:	24000020 	.word	0x24000020

08007674 <_kill_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d07      	ldr	r5, [pc, #28]	@ (8007694 <_kill_r+0x20>)
 8007678:	2300      	movs	r3, #0
 800767a:	4604      	mov	r4, r0
 800767c:	4608      	mov	r0, r1
 800767e:	4611      	mov	r1, r2
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	f7f9 fb7c 	bl	8000d7e <_kill>
 8007686:	1c43      	adds	r3, r0, #1
 8007688:	d102      	bne.n	8007690 <_kill_r+0x1c>
 800768a:	682b      	ldr	r3, [r5, #0]
 800768c:	b103      	cbz	r3, 8007690 <_kill_r+0x1c>
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	bd38      	pop	{r3, r4, r5, pc}
 8007692:	bf00      	nop
 8007694:	24000450 	.word	0x24000450

08007698 <_getpid_r>:
 8007698:	f7f9 bb69 	b.w	8000d6e <_getpid>

0800769c <__swhatbuf_r>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	460c      	mov	r4, r1
 80076a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a4:	2900      	cmp	r1, #0
 80076a6:	b096      	sub	sp, #88	@ 0x58
 80076a8:	4615      	mov	r5, r2
 80076aa:	461e      	mov	r6, r3
 80076ac:	da0d      	bge.n	80076ca <__swhatbuf_r+0x2e>
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076b4:	f04f 0100 	mov.w	r1, #0
 80076b8:	bf14      	ite	ne
 80076ba:	2340      	movne	r3, #64	@ 0x40
 80076bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076c0:	2000      	movs	r0, #0
 80076c2:	6031      	str	r1, [r6, #0]
 80076c4:	602b      	str	r3, [r5, #0]
 80076c6:	b016      	add	sp, #88	@ 0x58
 80076c8:	bd70      	pop	{r4, r5, r6, pc}
 80076ca:	466a      	mov	r2, sp
 80076cc:	f000 f848 	bl	8007760 <_fstat_r>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	dbec      	blt.n	80076ae <__swhatbuf_r+0x12>
 80076d4:	9901      	ldr	r1, [sp, #4]
 80076d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076de:	4259      	negs	r1, r3
 80076e0:	4159      	adcs	r1, r3
 80076e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076e6:	e7eb      	b.n	80076c0 <__swhatbuf_r+0x24>

080076e8 <__smakebuf_r>:
 80076e8:	898b      	ldrh	r3, [r1, #12]
 80076ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ec:	079d      	lsls	r5, r3, #30
 80076ee:	4606      	mov	r6, r0
 80076f0:	460c      	mov	r4, r1
 80076f2:	d507      	bpl.n	8007704 <__smakebuf_r+0x1c>
 80076f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	6123      	str	r3, [r4, #16]
 80076fc:	2301      	movs	r3, #1
 80076fe:	6163      	str	r3, [r4, #20]
 8007700:	b003      	add	sp, #12
 8007702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007704:	ab01      	add	r3, sp, #4
 8007706:	466a      	mov	r2, sp
 8007708:	f7ff ffc8 	bl	800769c <__swhatbuf_r>
 800770c:	9f00      	ldr	r7, [sp, #0]
 800770e:	4605      	mov	r5, r0
 8007710:	4639      	mov	r1, r7
 8007712:	4630      	mov	r0, r6
 8007714:	f7ff f866 	bl	80067e4 <_malloc_r>
 8007718:	b948      	cbnz	r0, 800772e <__smakebuf_r+0x46>
 800771a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771e:	059a      	lsls	r2, r3, #22
 8007720:	d4ee      	bmi.n	8007700 <__smakebuf_r+0x18>
 8007722:	f023 0303 	bic.w	r3, r3, #3
 8007726:	f043 0302 	orr.w	r3, r3, #2
 800772a:	81a3      	strh	r3, [r4, #12]
 800772c:	e7e2      	b.n	80076f4 <__smakebuf_r+0xc>
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	6020      	str	r0, [r4, #0]
 8007732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800773e:	b15b      	cbz	r3, 8007758 <__smakebuf_r+0x70>
 8007740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007744:	4630      	mov	r0, r6
 8007746:	f000 f81d 	bl	8007784 <_isatty_r>
 800774a:	b128      	cbz	r0, 8007758 <__smakebuf_r+0x70>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	f023 0303 	bic.w	r3, r3, #3
 8007752:	f043 0301 	orr.w	r3, r3, #1
 8007756:	81a3      	strh	r3, [r4, #12]
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	431d      	orrs	r5, r3
 800775c:	81a5      	strh	r5, [r4, #12]
 800775e:	e7cf      	b.n	8007700 <__smakebuf_r+0x18>

08007760 <_fstat_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4d07      	ldr	r5, [pc, #28]	@ (8007780 <_fstat_r+0x20>)
 8007764:	2300      	movs	r3, #0
 8007766:	4604      	mov	r4, r0
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	602b      	str	r3, [r5, #0]
 800776e:	f7f9 fb66 	bl	8000e3e <_fstat>
 8007772:	1c43      	adds	r3, r0, #1
 8007774:	d102      	bne.n	800777c <_fstat_r+0x1c>
 8007776:	682b      	ldr	r3, [r5, #0]
 8007778:	b103      	cbz	r3, 800777c <_fstat_r+0x1c>
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	bd38      	pop	{r3, r4, r5, pc}
 800777e:	bf00      	nop
 8007780:	24000450 	.word	0x24000450

08007784 <_isatty_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d06      	ldr	r5, [pc, #24]	@ (80077a0 <_isatty_r+0x1c>)
 8007788:	2300      	movs	r3, #0
 800778a:	4604      	mov	r4, r0
 800778c:	4608      	mov	r0, r1
 800778e:	602b      	str	r3, [r5, #0]
 8007790:	f7f9 fb65 	bl	8000e5e <_isatty>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_isatty_r+0x1a>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_isatty_r+0x1a>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	24000450 	.word	0x24000450
 80077a4:	00000000 	.word	0x00000000

080077a8 <sin>:
 80077a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077aa:	eeb0 7b40 	vmov.f64	d7, d0
 80077ae:	ee17 3a90 	vmov	r3, s15
 80077b2:	4a21      	ldr	r2, [pc, #132]	@ (8007838 <sin+0x90>)
 80077b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d807      	bhi.n	80077cc <sin+0x24>
 80077bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8007830 <sin+0x88>
 80077c0:	2000      	movs	r0, #0
 80077c2:	b005      	add	sp, #20
 80077c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c8:	f000 b8a2 	b.w	8007910 <__kernel_sin>
 80077cc:	4a1b      	ldr	r2, [pc, #108]	@ (800783c <sin+0x94>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d904      	bls.n	80077dc <sin+0x34>
 80077d2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80077d6:	b005      	add	sp, #20
 80077d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80077dc:	4668      	mov	r0, sp
 80077de:	f000 f8ef 	bl	80079c0 <__ieee754_rem_pio2>
 80077e2:	f000 0003 	and.w	r0, r0, #3
 80077e6:	2801      	cmp	r0, #1
 80077e8:	d00a      	beq.n	8007800 <sin+0x58>
 80077ea:	2802      	cmp	r0, #2
 80077ec:	d00f      	beq.n	800780e <sin+0x66>
 80077ee:	b9c0      	cbnz	r0, 8007822 <sin+0x7a>
 80077f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077f4:	ed9d 0b00 	vldr	d0, [sp]
 80077f8:	2001      	movs	r0, #1
 80077fa:	f000 f889 	bl	8007910 <__kernel_sin>
 80077fe:	e7ea      	b.n	80077d6 <sin+0x2e>
 8007800:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007804:	ed9d 0b00 	vldr	d0, [sp]
 8007808:	f000 f81a 	bl	8007840 <__kernel_cos>
 800780c:	e7e3      	b.n	80077d6 <sin+0x2e>
 800780e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007812:	ed9d 0b00 	vldr	d0, [sp]
 8007816:	2001      	movs	r0, #1
 8007818:	f000 f87a 	bl	8007910 <__kernel_sin>
 800781c:	eeb1 0b40 	vneg.f64	d0, d0
 8007820:	e7d9      	b.n	80077d6 <sin+0x2e>
 8007822:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007826:	ed9d 0b00 	vldr	d0, [sp]
 800782a:	f000 f809 	bl	8007840 <__kernel_cos>
 800782e:	e7f5      	b.n	800781c <sin+0x74>
	...
 8007838:	3fe921fb 	.word	0x3fe921fb
 800783c:	7fefffff 	.word	0x7fefffff

08007840 <__kernel_cos>:
 8007840:	eeb0 5b40 	vmov.f64	d5, d0
 8007844:	ee15 1a90 	vmov	r1, s11
 8007848:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800784c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8007850:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8007854:	d204      	bcs.n	8007860 <__kernel_cos+0x20>
 8007856:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800785a:	ee17 3a90 	vmov	r3, s15
 800785e:	b343      	cbz	r3, 80078b2 <__kernel_cos+0x72>
 8007860:	ee25 6b05 	vmul.f64	d6, d5, d5
 8007864:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8007868:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80078d8 <__kernel_cos+0x98>
 800786c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80078e0 <__kernel_cos+0xa0>
 8007870:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007874:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80078e8 <__kernel_cos+0xa8>
 8007878:	eea4 7b06 	vfma.f64	d7, d4, d6
 800787c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80078f0 <__kernel_cos+0xb0>
 8007880:	eea7 4b06 	vfma.f64	d4, d7, d6
 8007884:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80078f8 <__kernel_cos+0xb8>
 8007888:	4b1f      	ldr	r3, [pc, #124]	@ (8007908 <__kernel_cos+0xc8>)
 800788a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800788e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8007900 <__kernel_cos+0xc0>
 8007892:	4299      	cmp	r1, r3
 8007894:	eea7 4b06 	vfma.f64	d4, d7, d6
 8007898:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800789c:	ee24 4b06 	vmul.f64	d4, d4, d6
 80078a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80078a4:	eea6 1b04 	vfma.f64	d1, d6, d4
 80078a8:	d804      	bhi.n	80078b4 <__kernel_cos+0x74>
 80078aa:	ee37 7b41 	vsub.f64	d7, d7, d1
 80078ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80078b2:	4770      	bx	lr
 80078b4:	4b15      	ldr	r3, [pc, #84]	@ (800790c <__kernel_cos+0xcc>)
 80078b6:	4299      	cmp	r1, r3
 80078b8:	d809      	bhi.n	80078ce <__kernel_cos+0x8e>
 80078ba:	2200      	movs	r2, #0
 80078bc:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80078c0:	ec43 2b16 	vmov	d6, r2, r3
 80078c4:	ee30 0b46 	vsub.f64	d0, d0, d6
 80078c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80078cc:	e7ed      	b.n	80078aa <__kernel_cos+0x6a>
 80078ce:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 80078d2:	e7f7      	b.n	80078c4 <__kernel_cos+0x84>
 80078d4:	f3af 8000 	nop.w
 80078d8:	be8838d4 	.word	0xbe8838d4
 80078dc:	bda8fae9 	.word	0xbda8fae9
 80078e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80078e4:	3e21ee9e 	.word	0x3e21ee9e
 80078e8:	809c52ad 	.word	0x809c52ad
 80078ec:	be927e4f 	.word	0xbe927e4f
 80078f0:	19cb1590 	.word	0x19cb1590
 80078f4:	3efa01a0 	.word	0x3efa01a0
 80078f8:	16c15177 	.word	0x16c15177
 80078fc:	bf56c16c 	.word	0xbf56c16c
 8007900:	5555554c 	.word	0x5555554c
 8007904:	3fa55555 	.word	0x3fa55555
 8007908:	3fd33332 	.word	0x3fd33332
 800790c:	3fe90000 	.word	0x3fe90000

08007910 <__kernel_sin>:
 8007910:	ee10 3a90 	vmov	r3, s1
 8007914:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007918:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800791c:	d204      	bcs.n	8007928 <__kernel_sin+0x18>
 800791e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8007922:	ee17 3a90 	vmov	r3, s15
 8007926:	b35b      	cbz	r3, 8007980 <__kernel_sin+0x70>
 8007928:	ee20 6b00 	vmul.f64	d6, d0, d0
 800792c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8007930:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8007988 <__kernel_sin+0x78>
 8007934:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8007990 <__kernel_sin+0x80>
 8007938:	eea6 4b07 	vfma.f64	d4, d6, d7
 800793c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8007998 <__kernel_sin+0x88>
 8007940:	eea4 7b06 	vfma.f64	d7, d4, d6
 8007944:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80079a0 <__kernel_sin+0x90>
 8007948:	eea7 4b06 	vfma.f64	d4, d7, d6
 800794c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80079a8 <__kernel_sin+0x98>
 8007950:	eea4 7b06 	vfma.f64	d7, d4, d6
 8007954:	b930      	cbnz	r0, 8007964 <__kernel_sin+0x54>
 8007956:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80079b0 <__kernel_sin+0xa0>
 800795a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800795e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8007962:	4770      	bx	lr
 8007964:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8007968:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800796c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8007970:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8007974:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80079b8 <__kernel_sin+0xa8>
 8007978:	eea5 1b07 	vfma.f64	d1, d5, d7
 800797c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	f3af 8000 	nop.w
 8007988:	5acfd57c 	.word	0x5acfd57c
 800798c:	3de5d93a 	.word	0x3de5d93a
 8007990:	8a2b9ceb 	.word	0x8a2b9ceb
 8007994:	be5ae5e6 	.word	0xbe5ae5e6
 8007998:	57b1fe7d 	.word	0x57b1fe7d
 800799c:	3ec71de3 	.word	0x3ec71de3
 80079a0:	19c161d5 	.word	0x19c161d5
 80079a4:	bf2a01a0 	.word	0xbf2a01a0
 80079a8:	1110f8a6 	.word	0x1110f8a6
 80079ac:	3f811111 	.word	0x3f811111
 80079b0:	55555549 	.word	0x55555549
 80079b4:	bfc55555 	.word	0xbfc55555
 80079b8:	55555549 	.word	0x55555549
 80079bc:	3fc55555 	.word	0x3fc55555

080079c0 <__ieee754_rem_pio2>:
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	eeb0 7b40 	vmov.f64	d7, d0
 80079c6:	ee17 5a90 	vmov	r5, s15
 80079ca:	4b99      	ldr	r3, [pc, #612]	@ (8007c30 <__ieee754_rem_pio2+0x270>)
 80079cc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80079d0:	429e      	cmp	r6, r3
 80079d2:	b088      	sub	sp, #32
 80079d4:	4604      	mov	r4, r0
 80079d6:	d807      	bhi.n	80079e8 <__ieee754_rem_pio2+0x28>
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	ed84 0b00 	vstr	d0, [r4]
 80079e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80079e4:	2000      	movs	r0, #0
 80079e6:	e01b      	b.n	8007a20 <__ieee754_rem_pio2+0x60>
 80079e8:	4b92      	ldr	r3, [pc, #584]	@ (8007c34 <__ieee754_rem_pio2+0x274>)
 80079ea:	429e      	cmp	r6, r3
 80079ec:	d83b      	bhi.n	8007a66 <__ieee754_rem_pio2+0xa6>
 80079ee:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 80079f2:	2d00      	cmp	r5, #0
 80079f4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8007bf0 <__ieee754_rem_pio2+0x230>
 80079f8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 80079fc:	dd19      	ble.n	8007a32 <__ieee754_rem_pio2+0x72>
 80079fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007a02:	429e      	cmp	r6, r3
 8007a04:	d00e      	beq.n	8007a24 <__ieee754_rem_pio2+0x64>
 8007a06:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8007bf8 <__ieee754_rem_pio2+0x238>
 8007a0a:	ee37 6b45 	vsub.f64	d6, d7, d5
 8007a0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007a12:	ed84 6b00 	vstr	d6, [r4]
 8007a16:	ee37 7b45 	vsub.f64	d7, d7, d5
 8007a1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8007a1e:	2001      	movs	r0, #1
 8007a20:	b008      	add	sp, #32
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8007c00 <__ieee754_rem_pio2+0x240>
 8007a28:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8007c08 <__ieee754_rem_pio2+0x248>
 8007a2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007a30:	e7eb      	b.n	8007a0a <__ieee754_rem_pio2+0x4a>
 8007a32:	429e      	cmp	r6, r3
 8007a34:	ee30 7b06 	vadd.f64	d7, d0, d6
 8007a38:	d00e      	beq.n	8007a58 <__ieee754_rem_pio2+0x98>
 8007a3a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8007bf8 <__ieee754_rem_pio2+0x238>
 8007a3e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007a42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007a46:	ed84 6b00 	vstr	d6, [r4]
 8007a4a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	ed84 7b02 	vstr	d7, [r4, #8]
 8007a56:	e7e3      	b.n	8007a20 <__ieee754_rem_pio2+0x60>
 8007a58:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8007c00 <__ieee754_rem_pio2+0x240>
 8007a5c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8007c08 <__ieee754_rem_pio2+0x248>
 8007a60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007a64:	e7eb      	b.n	8007a3e <__ieee754_rem_pio2+0x7e>
 8007a66:	4b74      	ldr	r3, [pc, #464]	@ (8007c38 <__ieee754_rem_pio2+0x278>)
 8007a68:	429e      	cmp	r6, r3
 8007a6a:	d870      	bhi.n	8007b4e <__ieee754_rem_pio2+0x18e>
 8007a6c:	f000 f8ec 	bl	8007c48 <fabs>
 8007a70:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8007a74:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007c10 <__ieee754_rem_pio2+0x250>
 8007a78:	eea0 7b06 	vfma.f64	d7, d0, d6
 8007a7c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007a80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007a84:	ee17 0a90 	vmov	r0, s15
 8007a88:	eeb1 4b45 	vneg.f64	d4, d5
 8007a8c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8007bf0 <__ieee754_rem_pio2+0x230>
 8007a90:	eea5 0b47 	vfms.f64	d0, d5, d7
 8007a94:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8007bf8 <__ieee754_rem_pio2+0x238>
 8007a98:	281f      	cmp	r0, #31
 8007a9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007a9e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007aa2:	dc05      	bgt.n	8007ab0 <__ieee754_rem_pio2+0xf0>
 8007aa4:	4b65      	ldr	r3, [pc, #404]	@ (8007c3c <__ieee754_rem_pio2+0x27c>)
 8007aa6:	1e42      	subs	r2, r0, #1
 8007aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aac:	42b3      	cmp	r3, r6
 8007aae:	d109      	bne.n	8007ac4 <__ieee754_rem_pio2+0x104>
 8007ab0:	ee16 3a90 	vmov	r3, s13
 8007ab4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007ab8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	ea4f 5226 	mov.w	r2, r6, asr #20
 8007ac2:	dc02      	bgt.n	8007aca <__ieee754_rem_pio2+0x10a>
 8007ac4:	ed84 6b00 	vstr	d6, [r4]
 8007ac8:	e01a      	b.n	8007b00 <__ieee754_rem_pio2+0x140>
 8007aca:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8007c00 <__ieee754_rem_pio2+0x240>
 8007ace:	eeb0 6b40 	vmov.f64	d6, d0
 8007ad2:	eea4 6b03 	vfma.f64	d6, d4, d3
 8007ad6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007ada:	eea4 7b03 	vfma.f64	d7, d4, d3
 8007ade:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8007c08 <__ieee754_rem_pio2+0x248>
 8007ae2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8007ae6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8007aea:	ee13 3a90 	vmov	r3, s7
 8007aee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b31      	cmp	r3, #49	@ 0x31
 8007af6:	dc17      	bgt.n	8007b28 <__ieee754_rem_pio2+0x168>
 8007af8:	eeb0 0b46 	vmov.f64	d0, d6
 8007afc:	ed84 3b00 	vstr	d3, [r4]
 8007b00:	ed94 6b00 	vldr	d6, [r4]
 8007b04:	2d00      	cmp	r5, #0
 8007b06:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007b0a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007b0e:	ed84 0b02 	vstr	d0, [r4, #8]
 8007b12:	da85      	bge.n	8007a20 <__ieee754_rem_pio2+0x60>
 8007b14:	eeb1 6b46 	vneg.f64	d6, d6
 8007b18:	eeb1 0b40 	vneg.f64	d0, d0
 8007b1c:	ed84 6b00 	vstr	d6, [r4]
 8007b20:	ed84 0b02 	vstr	d0, [r4, #8]
 8007b24:	4240      	negs	r0, r0
 8007b26:	e77b      	b.n	8007a20 <__ieee754_rem_pio2+0x60>
 8007b28:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8007c18 <__ieee754_rem_pio2+0x258>
 8007b2c:	eeb0 0b46 	vmov.f64	d0, d6
 8007b30:	eea4 0b07 	vfma.f64	d0, d4, d7
 8007b34:	ee36 6b40 	vsub.f64	d6, d6, d0
 8007b38:	eea4 6b07 	vfma.f64	d6, d4, d7
 8007b3c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8007c20 <__ieee754_rem_pio2+0x260>
 8007b40:	eeb0 7b46 	vmov.f64	d7, d6
 8007b44:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8007b48:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007b4c:	e7ba      	b.n	8007ac4 <__ieee754_rem_pio2+0x104>
 8007b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c40 <__ieee754_rem_pio2+0x280>)
 8007b50:	429e      	cmp	r6, r3
 8007b52:	d906      	bls.n	8007b62 <__ieee754_rem_pio2+0x1a2>
 8007b54:	ee30 7b40 	vsub.f64	d7, d0, d0
 8007b58:	ed80 7b02 	vstr	d7, [r0, #8]
 8007b5c:	ed80 7b00 	vstr	d7, [r0]
 8007b60:	e740      	b.n	80079e4 <__ieee754_rem_pio2+0x24>
 8007b62:	ee10 3a10 	vmov	r3, s0
 8007b66:	1532      	asrs	r2, r6, #20
 8007b68:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8007b72:	ec41 0b17 	vmov	d7, r0, r1
 8007b76:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007b7a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8007c28 <__ieee754_rem_pio2+0x268>
 8007b7e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007b82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b86:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007b8a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007b8e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007b92:	a808      	add	r0, sp, #32
 8007b94:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007b98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b9c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8007ba0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007ba4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ba8:	2103      	movs	r1, #3
 8007baa:	ed30 7b02 	vldmdb	r0!, {d7}
 8007bae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	f101 31ff 	add.w	r1, r1, #4294967295
 8007bbc:	d0f5      	beq.n	8007baa <__ieee754_rem_pio2+0x1ea>
 8007bbe:	4921      	ldr	r1, [pc, #132]	@ (8007c44 <__ieee754_rem_pio2+0x284>)
 8007bc0:	9101      	str	r1, [sp, #4]
 8007bc2:	2102      	movs	r1, #2
 8007bc4:	9100      	str	r1, [sp, #0]
 8007bc6:	a802      	add	r0, sp, #8
 8007bc8:	4621      	mov	r1, r4
 8007bca:	f000 f845 	bl	8007c58 <__kernel_rem_pio2>
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	f6bf af26 	bge.w	8007a20 <__ieee754_rem_pio2+0x60>
 8007bd4:	ed94 7b00 	vldr	d7, [r4]
 8007bd8:	eeb1 7b47 	vneg.f64	d7, d7
 8007bdc:	ed84 7b00 	vstr	d7, [r4]
 8007be0:	ed94 7b02 	vldr	d7, [r4, #8]
 8007be4:	eeb1 7b47 	vneg.f64	d7, d7
 8007be8:	ed84 7b02 	vstr	d7, [r4, #8]
 8007bec:	e79a      	b.n	8007b24 <__ieee754_rem_pio2+0x164>
 8007bee:	bf00      	nop
 8007bf0:	54400000 	.word	0x54400000
 8007bf4:	3ff921fb 	.word	0x3ff921fb
 8007bf8:	1a626331 	.word	0x1a626331
 8007bfc:	3dd0b461 	.word	0x3dd0b461
 8007c00:	1a600000 	.word	0x1a600000
 8007c04:	3dd0b461 	.word	0x3dd0b461
 8007c08:	2e037073 	.word	0x2e037073
 8007c0c:	3ba3198a 	.word	0x3ba3198a
 8007c10:	6dc9c883 	.word	0x6dc9c883
 8007c14:	3fe45f30 	.word	0x3fe45f30
 8007c18:	2e000000 	.word	0x2e000000
 8007c1c:	3ba3198a 	.word	0x3ba3198a
 8007c20:	252049c1 	.word	0x252049c1
 8007c24:	397b839a 	.word	0x397b839a
 8007c28:	00000000 	.word	0x00000000
 8007c2c:	41700000 	.word	0x41700000
 8007c30:	3fe921fb 	.word	0x3fe921fb
 8007c34:	4002d97b 	.word	0x4002d97b
 8007c38:	413921fb 	.word	0x413921fb
 8007c3c:	08008700 	.word	0x08008700
 8007c40:	7fefffff 	.word	0x7fefffff
 8007c44:	08008780 	.word	0x08008780

08007c48 <fabs>:
 8007c48:	ec51 0b10 	vmov	r0, r1, d0
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c52:	ec43 2b10 	vmov	d0, r2, r3
 8007c56:	4770      	bx	lr

08007c58 <__kernel_rem_pio2>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	ed2d 8b06 	vpush	{d8-d10}
 8007c60:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8007c64:	469b      	mov	fp, r3
 8007c66:	9001      	str	r0, [sp, #4]
 8007c68:	4bbb      	ldr	r3, [pc, #748]	@ (8007f58 <__kernel_rem_pio2+0x300>)
 8007c6a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8007c6c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8007c70:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8007c74:	f112 0f14 	cmn.w	r2, #20
 8007c78:	bfa8      	it	ge
 8007c7a:	1ed3      	subge	r3, r2, #3
 8007c7c:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007c80:	bfb8      	it	lt
 8007c82:	2300      	movlt	r3, #0
 8007c84:	f06f 0517 	mvn.w	r5, #23
 8007c88:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8007f40 <__kernel_rem_pio2+0x2e8>
 8007c8c:	bfa4      	itt	ge
 8007c8e:	2018      	movge	r0, #24
 8007c90:	fb93 f3f0 	sdivge	r3, r3, r0
 8007c94:	fb03 5505 	mla	r5, r3, r5, r5
 8007c98:	eba3 040a 	sub.w	r4, r3, sl
 8007c9c:	4415      	add	r5, r2
 8007c9e:	460f      	mov	r7, r1
 8007ca0:	eb09 060a 	add.w	r6, r9, sl
 8007ca4:	a81a      	add	r0, sp, #104	@ 0x68
 8007ca6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8007caa:	2200      	movs	r2, #0
 8007cac:	42b2      	cmp	r2, r6
 8007cae:	dd0e      	ble.n	8007cce <__kernel_rem_pio2+0x76>
 8007cb0:	aa1a      	add	r2, sp, #104	@ 0x68
 8007cb2:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8007cb6:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8007cba:	2600      	movs	r6, #0
 8007cbc:	454e      	cmp	r6, r9
 8007cbe:	dc25      	bgt.n	8007d0c <__kernel_rem_pio2+0xb4>
 8007cc0:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8007f40 <__kernel_rem_pio2+0x2e8>
 8007cc4:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007cc8:	4614      	mov	r4, r2
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e015      	b.n	8007cfa <__kernel_rem_pio2+0xa2>
 8007cce:	42d4      	cmn	r4, r2
 8007cd0:	d409      	bmi.n	8007ce6 <__kernel_rem_pio2+0x8e>
 8007cd2:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8007cd6:	ee07 1a90 	vmov	s15, r1
 8007cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007cde:	eca0 7b02 	vstmia	r0!, {d7}
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	e7e2      	b.n	8007cac <__kernel_rem_pio2+0x54>
 8007ce6:	eeb0 7b46 	vmov.f64	d7, d6
 8007cea:	e7f8      	b.n	8007cde <__kernel_rem_pio2+0x86>
 8007cec:	ecbc 5b02 	vldmia	ip!, {d5}
 8007cf0:	ed94 6b00 	vldr	d6, [r4]
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007cfa:	4550      	cmp	r0, sl
 8007cfc:	f1a4 0408 	sub.w	r4, r4, #8
 8007d00:	ddf4      	ble.n	8007cec <__kernel_rem_pio2+0x94>
 8007d02:	ecae 7b02 	vstmia	lr!, {d7}
 8007d06:	3601      	adds	r6, #1
 8007d08:	3208      	adds	r2, #8
 8007d0a:	e7d7      	b.n	8007cbc <__kernel_rem_pio2+0x64>
 8007d0c:	aa06      	add	r2, sp, #24
 8007d0e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8007f48 <__kernel_rem_pio2+0x2f0>
 8007d12:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8007f50 <__kernel_rem_pio2+0x2f8>
 8007d16:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8007d1a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8007d1e:	9203      	str	r2, [sp, #12]
 8007d20:	9302      	str	r3, [sp, #8]
 8007d22:	464c      	mov	r4, r9
 8007d24:	00e3      	lsls	r3, r4, #3
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	ab92      	add	r3, sp, #584	@ 0x248
 8007d2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d2e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8007d32:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8007d34:	ab06      	add	r3, sp, #24
 8007d36:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007d3a:	461e      	mov	r6, r3
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f1a2 0208 	sub.w	r2, r2, #8
 8007d44:	dc4a      	bgt.n	8007ddc <__kernel_rem_pio2+0x184>
 8007d46:	4628      	mov	r0, r5
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	f000 fa01 	bl	8008150 <scalbn>
 8007d4e:	eeb0 8b40 	vmov.f64	d8, d0
 8007d52:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8007d56:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007d5a:	f000 fa79 	bl	8008250 <floor>
 8007d5e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8007d62:	eea0 8b47 	vfms.f64	d8, d0, d7
 8007d66:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	ee17 8a90 	vmov	r8, s15
 8007d70:	9b05      	ldr	r3, [sp, #20]
 8007d72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d76:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007d7a:	dd41      	ble.n	8007e00 <__kernel_rem_pio2+0x1a8>
 8007d7c:	1e60      	subs	r0, r4, #1
 8007d7e:	aa06      	add	r2, sp, #24
 8007d80:	f1c5 0c18 	rsb	ip, r5, #24
 8007d84:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8007d88:	fa46 f20c 	asr.w	r2, r6, ip
 8007d8c:	4490      	add	r8, r2
 8007d8e:	fa02 f20c 	lsl.w	r2, r2, ip
 8007d92:	1ab6      	subs	r6, r6, r2
 8007d94:	aa06      	add	r2, sp, #24
 8007d96:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8007d9a:	f1c5 0217 	rsb	r2, r5, #23
 8007d9e:	4116      	asrs	r6, r2
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	dd3c      	ble.n	8007e1e <__kernel_rem_pio2+0x1c6>
 8007da4:	f04f 0c00 	mov.w	ip, #0
 8007da8:	f108 0801 	add.w	r8, r8, #1
 8007dac:	4660      	mov	r0, ip
 8007dae:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8007db2:	4564      	cmp	r4, ip
 8007db4:	dc66      	bgt.n	8007e84 <__kernel_rem_pio2+0x22c>
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	dd03      	ble.n	8007dc2 <__kernel_rem_pio2+0x16a>
 8007dba:	2d01      	cmp	r5, #1
 8007dbc:	d072      	beq.n	8007ea4 <__kernel_rem_pio2+0x24c>
 8007dbe:	2d02      	cmp	r5, #2
 8007dc0:	d07a      	beq.n	8007eb8 <__kernel_rem_pio2+0x260>
 8007dc2:	2e02      	cmp	r6, #2
 8007dc4:	d12b      	bne.n	8007e1e <__kernel_rem_pio2+0x1c6>
 8007dc6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007dca:	ee30 8b48 	vsub.f64	d8, d0, d8
 8007dce:	b330      	cbz	r0, 8007e1e <__kernel_rem_pio2+0x1c6>
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f000 f9bd 	bl	8008150 <scalbn>
 8007dd6:	ee38 8b40 	vsub.f64	d8, d8, d0
 8007dda:	e020      	b.n	8007e1e <__kernel_rem_pio2+0x1c6>
 8007ddc:	ee20 7b09 	vmul.f64	d7, d0, d9
 8007de0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007de4:	3801      	subs	r0, #1
 8007de6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8007dea:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007dee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007df2:	eca6 0a01 	vstmia	r6!, {s0}
 8007df6:	ed92 0b00 	vldr	d0, [r2]
 8007dfa:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007dfe:	e79e      	b.n	8007d3e <__kernel_rem_pio2+0xe6>
 8007e00:	d105      	bne.n	8007e0e <__kernel_rem_pio2+0x1b6>
 8007e02:	1e62      	subs	r2, r4, #1
 8007e04:	a906      	add	r1, sp, #24
 8007e06:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8007e0a:	15f6      	asrs	r6, r6, #23
 8007e0c:	e7c8      	b.n	8007da0 <__kernel_rem_pio2+0x148>
 8007e0e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8007e12:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	da31      	bge.n	8007e80 <__kernel_rem_pio2+0x228>
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e26:	f040 809b 	bne.w	8007f60 <__kernel_rem_pio2+0x308>
 8007e2a:	1e62      	subs	r2, r4, #1
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	454a      	cmp	r2, r9
 8007e30:	da49      	bge.n	8007ec6 <__kernel_rem_pio2+0x26e>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d062      	beq.n	8007efc <__kernel_rem_pio2+0x2a4>
 8007e36:	3c01      	subs	r4, #1
 8007e38:	ab06      	add	r3, sp, #24
 8007e3a:	3d18      	subs	r5, #24
 8007e3c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0f8      	beq.n	8007e36 <__kernel_rem_pio2+0x1de>
 8007e44:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f000 f981 	bl	8008150 <scalbn>
 8007e4e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007f48 <__kernel_rem_pio2+0x2f0>
 8007e52:	1c62      	adds	r2, r4, #1
 8007e54:	a96a      	add	r1, sp, #424	@ 0x1a8
 8007e56:	00d3      	lsls	r3, r2, #3
 8007e58:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	f280 80a8 	bge.w	8007fb4 <__kernel_rem_pio2+0x35c>
 8007e64:	4622      	mov	r2, r4
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	f2c0 80c6 	blt.w	8007ff8 <__kernel_rem_pio2+0x3a0>
 8007e6c:	a96a      	add	r1, sp, #424	@ 0x1a8
 8007e6e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007e72:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8007f40 <__kernel_rem_pio2+0x2e8>
 8007e76:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8007f5c <__kernel_rem_pio2+0x304>
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	1aa1      	subs	r1, r4, r2
 8007e7e:	e0b0      	b.n	8007fe2 <__kernel_rem_pio2+0x38a>
 8007e80:	2602      	movs	r6, #2
 8007e82:	e78f      	b.n	8007da4 <__kernel_rem_pio2+0x14c>
 8007e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e88:	b948      	cbnz	r0, 8007e9e <__kernel_rem_pio2+0x246>
 8007e8a:	b122      	cbz	r2, 8007e96 <__kernel_rem_pio2+0x23e>
 8007e8c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8007e90:	f843 2c04 	str.w	r2, [r3, #-4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f10c 0c01 	add.w	ip, ip, #1
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	e789      	b.n	8007db2 <__kernel_rem_pio2+0x15a>
 8007e9e:	ebae 0202 	sub.w	r2, lr, r2
 8007ea2:	e7f5      	b.n	8007e90 <__kernel_rem_pio2+0x238>
 8007ea4:	1e62      	subs	r2, r4, #1
 8007ea6:	ab06      	add	r3, sp, #24
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007eb0:	a906      	add	r1, sp, #24
 8007eb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007eb6:	e784      	b.n	8007dc2 <__kernel_rem_pio2+0x16a>
 8007eb8:	1e62      	subs	r2, r4, #1
 8007eba:	ab06      	add	r3, sp, #24
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007ec4:	e7f4      	b.n	8007eb0 <__kernel_rem_pio2+0x258>
 8007ec6:	ab06      	add	r3, sp, #24
 8007ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ecc:	3a01      	subs	r2, #1
 8007ece:	4318      	orrs	r0, r3
 8007ed0:	e7ad      	b.n	8007e2e <__kernel_rem_pio2+0x1d6>
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d0fa      	beq.n	8007ed2 <__kernel_rem_pio2+0x27a>
 8007edc:	9a04      	ldr	r2, [sp, #16]
 8007ede:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8007ee2:	446a      	add	r2, sp
 8007ee4:	eb04 000b 	add.w	r0, r4, fp
 8007ee8:	a91a      	add	r1, sp, #104	@ 0x68
 8007eea:	1c66      	adds	r6, r4, #1
 8007eec:	3a98      	subs	r2, #152	@ 0x98
 8007eee:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8007ef2:	4423      	add	r3, r4
 8007ef4:	42b3      	cmp	r3, r6
 8007ef6:	da04      	bge.n	8007f02 <__kernel_rem_pio2+0x2aa>
 8007ef8:	461c      	mov	r4, r3
 8007efa:	e713      	b.n	8007d24 <__kernel_rem_pio2+0xcc>
 8007efc:	9a03      	ldr	r2, [sp, #12]
 8007efe:	2301      	movs	r3, #1
 8007f00:	e7e8      	b.n	8007ed4 <__kernel_rem_pio2+0x27c>
 8007f02:	9902      	ldr	r1, [sp, #8]
 8007f04:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007f08:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8007f0c:	9104      	str	r1, [sp, #16]
 8007f0e:	ee07 1a90 	vmov	s15, r1
 8007f12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f16:	2400      	movs	r4, #0
 8007f18:	eca0 7b02 	vstmia	r0!, {d7}
 8007f1c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8007f40 <__kernel_rem_pio2+0x2e8>
 8007f20:	4686      	mov	lr, r0
 8007f22:	4554      	cmp	r4, sl
 8007f24:	dd03      	ble.n	8007f2e <__kernel_rem_pio2+0x2d6>
 8007f26:	eca2 7b02 	vstmia	r2!, {d7}
 8007f2a:	3601      	adds	r6, #1
 8007f2c:	e7e2      	b.n	8007ef4 <__kernel_rem_pio2+0x29c>
 8007f2e:	ecbc 5b02 	vldmia	ip!, {d5}
 8007f32:	ed3e 6b02 	vldmdb	lr!, {d6}
 8007f36:	3401      	adds	r4, #1
 8007f38:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007f3c:	e7f1      	b.n	8007f22 <__kernel_rem_pio2+0x2ca>
 8007f3e:	bf00      	nop
	...
 8007f4c:	3e700000 	.word	0x3e700000
 8007f50:	00000000 	.word	0x00000000
 8007f54:	41700000 	.word	0x41700000
 8007f58:	080088c8 	.word	0x080088c8
 8007f5c:	08008888 	.word	0x08008888
 8007f60:	4268      	negs	r0, r5
 8007f62:	eeb0 0b48 	vmov.f64	d0, d8
 8007f66:	f000 f8f3 	bl	8008150 <scalbn>
 8007f6a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8008138 <__kernel_rem_pio2+0x4e0>
 8007f6e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8007f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f76:	db17      	blt.n	8007fa8 <__kernel_rem_pio2+0x350>
 8007f78:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8008140 <__kernel_rem_pio2+0x4e8>
 8007f7c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007f80:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007f84:	aa06      	add	r2, sp, #24
 8007f86:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8007f8a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8007f8e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007f92:	3518      	adds	r5, #24
 8007f94:	ee10 3a10 	vmov	r3, s0
 8007f98:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007f9c:	ee17 3a10 	vmov	r3, s14
 8007fa0:	3401      	adds	r4, #1
 8007fa2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007fa6:	e74d      	b.n	8007e44 <__kernel_rem_pio2+0x1ec>
 8007fa8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007fac:	aa06      	add	r2, sp, #24
 8007fae:	ee10 3a10 	vmov	r3, s0
 8007fb2:	e7f6      	b.n	8007fa2 <__kernel_rem_pio2+0x34a>
 8007fb4:	a806      	add	r0, sp, #24
 8007fb6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007fba:	9001      	str	r0, [sp, #4]
 8007fbc:	ee07 0a90 	vmov	s15, r0
 8007fc0:	3a01      	subs	r2, #1
 8007fc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007fc6:	ee27 7b00 	vmul.f64	d7, d7, d0
 8007fca:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007fce:	ed21 7b02 	vstmdb	r1!, {d7}
 8007fd2:	e744      	b.n	8007e5e <__kernel_rem_pio2+0x206>
 8007fd4:	ecbc 5b02 	vldmia	ip!, {d5}
 8007fd8:	ecb5 6b02 	vldmia	r5!, {d6}
 8007fdc:	3001      	adds	r0, #1
 8007fde:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007fe2:	4548      	cmp	r0, r9
 8007fe4:	dc01      	bgt.n	8007fea <__kernel_rem_pio2+0x392>
 8007fe6:	4281      	cmp	r1, r0
 8007fe8:	daf4      	bge.n	8007fd4 <__kernel_rem_pio2+0x37c>
 8007fea:	a842      	add	r0, sp, #264	@ 0x108
 8007fec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007ff0:	ed81 7b00 	vstr	d7, [r1]
 8007ff4:	3a01      	subs	r2, #1
 8007ff6:	e736      	b.n	8007e66 <__kernel_rem_pio2+0x20e>
 8007ff8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8007ffa:	2a02      	cmp	r2, #2
 8007ffc:	dc0a      	bgt.n	8008014 <__kernel_rem_pio2+0x3bc>
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	dc2d      	bgt.n	800805e <__kernel_rem_pio2+0x406>
 8008002:	d046      	beq.n	8008092 <__kernel_rem_pio2+0x43a>
 8008004:	f008 0007 	and.w	r0, r8, #7
 8008008:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800800c:	ecbd 8b06 	vpop	{d8-d10}
 8008010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008014:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8008016:	2a03      	cmp	r2, #3
 8008018:	d1f4      	bne.n	8008004 <__kernel_rem_pio2+0x3ac>
 800801a:	a942      	add	r1, sp, #264	@ 0x108
 800801c:	f1a3 0208 	sub.w	r2, r3, #8
 8008020:	440a      	add	r2, r1
 8008022:	4611      	mov	r1, r2
 8008024:	4620      	mov	r0, r4
 8008026:	2800      	cmp	r0, #0
 8008028:	f1a1 0108 	sub.w	r1, r1, #8
 800802c:	dc52      	bgt.n	80080d4 <__kernel_rem_pio2+0x47c>
 800802e:	4621      	mov	r1, r4
 8008030:	2901      	cmp	r1, #1
 8008032:	f1a2 0208 	sub.w	r2, r2, #8
 8008036:	dc5d      	bgt.n	80080f4 <__kernel_rem_pio2+0x49c>
 8008038:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8008148 <__kernel_rem_pio2+0x4f0>
 800803c:	aa42      	add	r2, sp, #264	@ 0x108
 800803e:	4413      	add	r3, r2
 8008040:	2c01      	cmp	r4, #1
 8008042:	dc67      	bgt.n	8008114 <__kernel_rem_pio2+0x4bc>
 8008044:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8008048:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800804c:	2e00      	cmp	r6, #0
 800804e:	d167      	bne.n	8008120 <__kernel_rem_pio2+0x4c8>
 8008050:	ed87 5b00 	vstr	d5, [r7]
 8008054:	ed87 6b02 	vstr	d6, [r7, #8]
 8008058:	ed87 7b04 	vstr	d7, [r7, #16]
 800805c:	e7d2      	b.n	8008004 <__kernel_rem_pio2+0x3ac>
 800805e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8008148 <__kernel_rem_pio2+0x4f0>
 8008062:	aa42      	add	r2, sp, #264	@ 0x108
 8008064:	4413      	add	r3, r2
 8008066:	4622      	mov	r2, r4
 8008068:	2a00      	cmp	r2, #0
 800806a:	da24      	bge.n	80080b6 <__kernel_rem_pio2+0x45e>
 800806c:	b34e      	cbz	r6, 80080c2 <__kernel_rem_pio2+0x46a>
 800806e:	eeb1 7b46 	vneg.f64	d7, d6
 8008072:	ed87 7b00 	vstr	d7, [r7]
 8008076:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800807a:	aa44      	add	r2, sp, #272	@ 0x110
 800807c:	2301      	movs	r3, #1
 800807e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008082:	429c      	cmp	r4, r3
 8008084:	da20      	bge.n	80080c8 <__kernel_rem_pio2+0x470>
 8008086:	b10e      	cbz	r6, 800808c <__kernel_rem_pio2+0x434>
 8008088:	eeb1 7b47 	vneg.f64	d7, d7
 800808c:	ed87 7b02 	vstr	d7, [r7, #8]
 8008090:	e7b8      	b.n	8008004 <__kernel_rem_pio2+0x3ac>
 8008092:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8008148 <__kernel_rem_pio2+0x4f0>
 8008096:	aa42      	add	r2, sp, #264	@ 0x108
 8008098:	4413      	add	r3, r2
 800809a:	2c00      	cmp	r4, #0
 800809c:	da05      	bge.n	80080aa <__kernel_rem_pio2+0x452>
 800809e:	b10e      	cbz	r6, 80080a4 <__kernel_rem_pio2+0x44c>
 80080a0:	eeb1 7b47 	vneg.f64	d7, d7
 80080a4:	ed87 7b00 	vstr	d7, [r7]
 80080a8:	e7ac      	b.n	8008004 <__kernel_rem_pio2+0x3ac>
 80080aa:	ed33 6b02 	vldmdb	r3!, {d6}
 80080ae:	3c01      	subs	r4, #1
 80080b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80080b4:	e7f1      	b.n	800809a <__kernel_rem_pio2+0x442>
 80080b6:	ed33 7b02 	vldmdb	r3!, {d7}
 80080ba:	3a01      	subs	r2, #1
 80080bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80080c0:	e7d2      	b.n	8008068 <__kernel_rem_pio2+0x410>
 80080c2:	eeb0 7b46 	vmov.f64	d7, d6
 80080c6:	e7d4      	b.n	8008072 <__kernel_rem_pio2+0x41a>
 80080c8:	ecb2 6b02 	vldmia	r2!, {d6}
 80080cc:	3301      	adds	r3, #1
 80080ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80080d2:	e7d6      	b.n	8008082 <__kernel_rem_pio2+0x42a>
 80080d4:	ed91 7b00 	vldr	d7, [r1]
 80080d8:	ed91 5b02 	vldr	d5, [r1, #8]
 80080dc:	3801      	subs	r0, #1
 80080de:	ee37 6b05 	vadd.f64	d6, d7, d5
 80080e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80080e6:	ed81 6b00 	vstr	d6, [r1]
 80080ea:	ee37 7b05 	vadd.f64	d7, d7, d5
 80080ee:	ed81 7b02 	vstr	d7, [r1, #8]
 80080f2:	e798      	b.n	8008026 <__kernel_rem_pio2+0x3ce>
 80080f4:	ed92 7b00 	vldr	d7, [r2]
 80080f8:	ed92 5b02 	vldr	d5, [r2, #8]
 80080fc:	3901      	subs	r1, #1
 80080fe:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008102:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008106:	ed82 6b00 	vstr	d6, [r2]
 800810a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800810e:	ed82 7b02 	vstr	d7, [r2, #8]
 8008112:	e78d      	b.n	8008030 <__kernel_rem_pio2+0x3d8>
 8008114:	ed33 6b02 	vldmdb	r3!, {d6}
 8008118:	3c01      	subs	r4, #1
 800811a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800811e:	e78f      	b.n	8008040 <__kernel_rem_pio2+0x3e8>
 8008120:	eeb1 5b45 	vneg.f64	d5, d5
 8008124:	eeb1 6b46 	vneg.f64	d6, d6
 8008128:	ed87 5b00 	vstr	d5, [r7]
 800812c:	eeb1 7b47 	vneg.f64	d7, d7
 8008130:	ed87 6b02 	vstr	d6, [r7, #8]
 8008134:	e790      	b.n	8008058 <__kernel_rem_pio2+0x400>
 8008136:	bf00      	nop
 8008138:	00000000 	.word	0x00000000
 800813c:	41700000 	.word	0x41700000
 8008140:	00000000 	.word	0x00000000
 8008144:	3e700000 	.word	0x3e700000
	...

08008150 <scalbn>:
 8008150:	ee10 1a90 	vmov	r1, s1
 8008154:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008158:	b98b      	cbnz	r3, 800817e <scalbn+0x2e>
 800815a:	ee10 3a10 	vmov	r3, s0
 800815e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008162:	4319      	orrs	r1, r3
 8008164:	d00a      	beq.n	800817c <scalbn+0x2c>
 8008166:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8008218 <scalbn+0xc8>
 800816a:	4b37      	ldr	r3, [pc, #220]	@ (8008248 <scalbn+0xf8>)
 800816c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008170:	4298      	cmp	r0, r3
 8008172:	da0b      	bge.n	800818c <scalbn+0x3c>
 8008174:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8008220 <scalbn+0xd0>
 8008178:	ee20 0b07 	vmul.f64	d0, d0, d7
 800817c:	4770      	bx	lr
 800817e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008182:	4293      	cmp	r3, r2
 8008184:	d107      	bne.n	8008196 <scalbn+0x46>
 8008186:	ee30 0b00 	vadd.f64	d0, d0, d0
 800818a:	4770      	bx	lr
 800818c:	ee10 1a90 	vmov	r1, s1
 8008190:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008194:	3b36      	subs	r3, #54	@ 0x36
 8008196:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800819a:	4290      	cmp	r0, r2
 800819c:	dd0d      	ble.n	80081ba <scalbn+0x6a>
 800819e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008228 <scalbn+0xd8>
 80081a2:	ee10 3a90 	vmov	r3, s1
 80081a6:	eeb0 6b47 	vmov.f64	d6, d7
 80081aa:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8008230 <scalbn+0xe0>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80081b4:	ee27 0b06 	vmul.f64	d0, d7, d6
 80081b8:	4770      	bx	lr
 80081ba:	4418      	add	r0, r3
 80081bc:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80081c0:	4298      	cmp	r0, r3
 80081c2:	dcec      	bgt.n	800819e <scalbn+0x4e>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	dd0a      	ble.n	80081de <scalbn+0x8e>
 80081c8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80081cc:	ec53 2b10 	vmov	r2, r3, d0
 80081d0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80081d4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80081d8:	ec43 2b10 	vmov	d0, r2, r3
 80081dc:	4770      	bx	lr
 80081de:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80081e2:	da09      	bge.n	80081f8 <scalbn+0xa8>
 80081e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8008220 <scalbn+0xd0>
 80081e8:	ee10 3a90 	vmov	r3, s1
 80081ec:	eeb0 6b47 	vmov.f64	d6, d7
 80081f0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8008238 <scalbn+0xe8>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	e7db      	b.n	80081b0 <scalbn+0x60>
 80081f8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80081fc:	ec53 2b10 	vmov	r2, r3, d0
 8008200:	3036      	adds	r0, #54	@ 0x36
 8008202:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8008206:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800820a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8008240 <scalbn+0xf0>
 800820e:	ec43 2b10 	vmov	d0, r2, r3
 8008212:	e7b1      	b.n	8008178 <scalbn+0x28>
 8008214:	f3af 8000 	nop.w
 8008218:	00000000 	.word	0x00000000
 800821c:	43500000 	.word	0x43500000
 8008220:	c2f8f359 	.word	0xc2f8f359
 8008224:	01a56e1f 	.word	0x01a56e1f
 8008228:	8800759c 	.word	0x8800759c
 800822c:	7e37e43c 	.word	0x7e37e43c
 8008230:	8800759c 	.word	0x8800759c
 8008234:	fe37e43c 	.word	0xfe37e43c
 8008238:	c2f8f359 	.word	0xc2f8f359
 800823c:	81a56e1f 	.word	0x81a56e1f
 8008240:	00000000 	.word	0x00000000
 8008244:	3c900000 	.word	0x3c900000
 8008248:	ffff3cb0 	.word	0xffff3cb0
 800824c:	00000000 	.word	0x00000000

08008250 <floor>:
 8008250:	ee10 3a90 	vmov	r3, s1
 8008254:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8008258:	ee10 2a10 	vmov	r2, s0
 800825c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8008260:	2913      	cmp	r1, #19
 8008262:	b530      	push	{r4, r5, lr}
 8008264:	4615      	mov	r5, r2
 8008266:	dc33      	bgt.n	80082d0 <floor+0x80>
 8008268:	2900      	cmp	r1, #0
 800826a:	da18      	bge.n	800829e <floor+0x4e>
 800826c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8008330 <floor+0xe0>
 8008270:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008274:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827c:	dd0a      	ble.n	8008294 <floor+0x44>
 800827e:	2b00      	cmp	r3, #0
 8008280:	da50      	bge.n	8008324 <floor+0xd4>
 8008282:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008286:	4313      	orrs	r3, r2
 8008288:	2200      	movs	r2, #0
 800828a:	4293      	cmp	r3, r2
 800828c:	4b2a      	ldr	r3, [pc, #168]	@ (8008338 <floor+0xe8>)
 800828e:	bf08      	it	eq
 8008290:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8008294:	4619      	mov	r1, r3
 8008296:	4610      	mov	r0, r2
 8008298:	ec41 0b10 	vmov	d0, r0, r1
 800829c:	e01f      	b.n	80082de <floor+0x8e>
 800829e:	4827      	ldr	r0, [pc, #156]	@ (800833c <floor+0xec>)
 80082a0:	4108      	asrs	r0, r1
 80082a2:	ea03 0400 	and.w	r4, r3, r0
 80082a6:	4314      	orrs	r4, r2
 80082a8:	d019      	beq.n	80082de <floor+0x8e>
 80082aa:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008330 <floor+0xe0>
 80082ae:	ee30 0b07 	vadd.f64	d0, d0, d7
 80082b2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80082b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ba:	ddeb      	ble.n	8008294 <floor+0x44>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	bfbe      	ittt	lt
 80082c0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80082c4:	410a      	asrlt	r2, r1
 80082c6:	189b      	addlt	r3, r3, r2
 80082c8:	ea23 0300 	bic.w	r3, r3, r0
 80082cc:	2200      	movs	r2, #0
 80082ce:	e7e1      	b.n	8008294 <floor+0x44>
 80082d0:	2933      	cmp	r1, #51	@ 0x33
 80082d2:	dd05      	ble.n	80082e0 <floor+0x90>
 80082d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80082d8:	d101      	bne.n	80082de <floor+0x8e>
 80082da:	ee30 0b00 	vadd.f64	d0, d0, d0
 80082de:	bd30      	pop	{r4, r5, pc}
 80082e0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	40e0      	lsrs	r0, r4
 80082ea:	4210      	tst	r0, r2
 80082ec:	d0f7      	beq.n	80082de <floor+0x8e>
 80082ee:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8008330 <floor+0xe0>
 80082f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80082f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80082fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fe:	ddc9      	ble.n	8008294 <floor+0x44>
 8008300:	2b00      	cmp	r3, #0
 8008302:	da02      	bge.n	800830a <floor+0xba>
 8008304:	2914      	cmp	r1, #20
 8008306:	d103      	bne.n	8008310 <floor+0xc0>
 8008308:	3301      	adds	r3, #1
 800830a:	ea22 0200 	bic.w	r2, r2, r0
 800830e:	e7c1      	b.n	8008294 <floor+0x44>
 8008310:	2401      	movs	r4, #1
 8008312:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8008316:	fa04 f101 	lsl.w	r1, r4, r1
 800831a:	440a      	add	r2, r1
 800831c:	42aa      	cmp	r2, r5
 800831e:	bf38      	it	cc
 8008320:	191b      	addcc	r3, r3, r4
 8008322:	e7f2      	b.n	800830a <floor+0xba>
 8008324:	2200      	movs	r2, #0
 8008326:	4613      	mov	r3, r2
 8008328:	e7b4      	b.n	8008294 <floor+0x44>
 800832a:	bf00      	nop
 800832c:	f3af 8000 	nop.w
 8008330:	8800759c 	.word	0x8800759c
 8008334:	7e37e43c 	.word	0x7e37e43c
 8008338:	bff00000 	.word	0xbff00000
 800833c:	000fffff 	.word	0x000fffff

08008340 <_init>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr

0800834c <_fini>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	bf00      	nop
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr
